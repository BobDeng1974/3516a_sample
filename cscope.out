cscope 15 $HOME/3516a/Hi3516A_SDK_V1.0.4.0/mpp -q 0000020089 0003229479
	@component/isp/sensor/aptina_ar0230/ar0230_cmos.c

1 #i‡!
deföed
(
__AR0230_CMOS_H_
)

2 
	#__AR0230_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#AR0230_ID
 230

	)

25 #ifde‡
INIFILE_CONFIG_MODE


27 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

28 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

29 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

30 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

39 c⁄° 
£ns‹_i2c_addr
;

40 
£ns‹_addr_byã
;

41 
£ns‹_d©a_byã
;

43 
	#ANALOG_GAIN
 (0x3060)

	)

44 
	#DIGITAL_GAIN
 (0x305E)

	)

45 
	#FRAME_LINES
 (0x300A)

	)

46 
	#EXPOSURE_TIME
 (0x3012)

	)

47 
	#LINE_LEN_PCK
 (0x300C)

	)

49 
	#SENSOR_2M_1080p30_MODE
 (1)

	)

50 
	#SENSOR_2M_1080p60_MODE
 (2)

	)

52 
	#INCREASE_LINES
 (1Ë

	)

53 
	#FRAME_LINES_2M_1080p
 (1125+
INCREASE_LINES
)

	)

58 
	#LONG_EXP_SHT_CLIP
 (
FRAME_LINES_2M_1080p
*16/17)

	)

60 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_2M_1080p30_MODE
;

61 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

63 
HI_U32
 
	ggu32FuŒLöesStd
 = 
FRAME_LINES_2M_1080p
;

64 
HI_U32
 
	ggu32FuŒLöes
 = 
FRAME_LINES_2M_1080p
;

65 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

66 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

68 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

69 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

71 
	#PATHLEN_MAX
 256

	)

72 
	#CMOS_CFG_INI
 "¨0230_cfg.öi"

	)

73 
	gpcName
[
PATHLEN_MAX
] = "configs/ar0230_cfg.ini";

77 #ifde‡
INIFILE_CONFIG_MODE


78 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

80 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

82 
¥ötf
("nullÖointer when getáe default value!\n");

86 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

87 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

88 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

90 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

91 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

92 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

94 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

95 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

97 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

98 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

100 
	ggíSís‹Mode
)

102 
	gWDR_MODE_NONE
:

104 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

105 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

106 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

107 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

109 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

111 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

112 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

113 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

114 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

116 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 12288;

117 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

118 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

119 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

121 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 2046;

122 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

123 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

124 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

126 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

127 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

128 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

131 
	gWDR_MODE_BUILT_IN
:

133 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

134 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

135 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

136 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

138 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

140 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
LONG_EXP_SHT_CLIP
;

141 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 32;

142 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

143 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

145 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 2048;

146 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1719;

147 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

148 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

150 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 384;

151 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

152 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

153 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

155 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

156 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

157 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

170 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

172 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

174 
¥ötf
("nullÖointer when getáe default value!\n");

178 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

179 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

180 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

182 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

183 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

184 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

186 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

187 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

189 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

190 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

192 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

193 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

194 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 4 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

196 
	ggíSís‹Mode
)

198 
	gWDR_MODE_NONE
:

200 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

201 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

202 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

203 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

205 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

207 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

208 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

209 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

210 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

212 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 29030;

213 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

214 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

215 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

217 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 2046;

218 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

219 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

220 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

223 
	gWDR_MODE_BUILT_IN
:

225 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

226 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

227 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

228 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

230 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

232 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
LONG_EXP_SHT_CLIP
;

233 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 32;

234 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

235 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

237 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 4096;

238 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1719;

239 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 8192;

240 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

242 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 384;

243 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

244 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 384;

245 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

246 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

261 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

263 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

265 i‡(30 =
f32Fps
)

267 
gu32FuŒLöesStd
 = 
FRAME_LINES_2M_1080p
;

269 i‡(25 =
f32Fps
)

271 
gu32FuŒLöesStd
 = 
FRAME_LINES_2M_1080p
 * 30 /
f32Fps
;

274 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
LONG_EXP_SHT_CLIP
;

278 i‡(
	gSENSOR_2M_1080p30_MODE
 =
gu8Sís‹ImageMode
)

280 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

282 
gu32FuŒLöesStd
 = (
FRAME_LINES_2M_1080p
 * 30Ë/ 
f32Fps
;

289 i‡(
	gSENSOR_2M_1080p60_MODE
 =
gu8Sís‹ImageMode
)

291 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

293 
gu32FuŒLöesStd
 = (
FRAME_LINES_2M_1080p
 * 60Ë/ 
f32Fps
;

301 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

305 
	ggu32FuŒLöesStd
 = 
gu32FuŒLöesStd
 > 0xFFFF ? 0xFFFF : gu32FullLinesStd;

306 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = 
gu32FuŒLöesStd
;

308 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

309 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

310 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

314 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

315 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

317 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

318 
	ggu32FuŒLöes
 = 
u32FuŒLöes
;

319 
£ns‹_wrôe_ªgi°î
(
FRAME_LINES
, 
gu32FuŒLöes
);

321 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 2;

327 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

329 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = 
u32I¡Time
;

334 
HI_U32
 
	gagaö_èbÀ
[51] =

343 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

345 
	gi
;

346 
HI_U32
 
	gu32InTimes
;

348 if(!
	gpu32AgaöDb
 || !
	gpu32AgaöLö
)

350 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

354 
	gu32InTimes
 = *
pu32AgaöLö
;

356 i‡(
	gu32InTimes
 >
agaö_èbÀ
[50])

358 *
pu32AgaöLö
 = 
agaö_èbÀ
[50];

359 *
	gpu32AgaöDb
 = 50;

363 
	gi
 = 1; i < 51; i++)

365 if(
	gu32InTimes
 < 
	gagaö_èbÀ
[
i
])

367 *
	gpu32AgaöLö
 = 
agaö_èbÀ
[
i
 - 1];

368 *
	gpu32AgaöDb
 = 
i
 - 1;

377 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

379 
HI_BOOL
 
	gbHCG
 = 
HI_FALSE
;

381 if(
	gu32Agaö
 < 10)

383 if(
	gHI_TRUE
 =
bHCG
)

385 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 = 0x0000;

386 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = 0x0B08;

387 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = 0x1E13;

388 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = 0x0080;

390 i‡(
	gWDR_MODE_NONE
 !
gíSís‹Mode
)

392 
g_°SnsRegsInfo
.
a°I2cD©a
[8].
u32D©a
 = 0x0480;

393 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = 0x0480;

397 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = 0x0080;

398 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = 0x0080;

399 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = 0x0080;

400 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32D©a
 = 0x0080;

402 
	gbHCG
 = 
HI_FALSE
;

405 if(
	gu32Agaö
 < 5)

407 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = 
u32Agaö
 + 0xb;

412 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = 
u32Agaö
 * 2 + 0x6;

417 if(
	gHI_FALSE
 =
bHCG
)

419 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 = 0x0004;

420 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = 0x1C0E;

421 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = 0x4E39;

422 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = 0x00B0;

424 i‡(
	gWDR_MODE_NONE
 !
gíSís‹Mode
)

426 
g_°SnsRegsInfo
.
a°I2cD©a
[8].
u32D©a
 = 0x0780;

427 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = 0x0780;

431 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = 0xFF80;

432 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = 0xFF80;

433 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = 0xFF80;

434 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32D©a
 = 0xFF80;

437 
	gbHCG
 = 
HI_TRUE
;

440 if(
	gu32Agaö
 < 26)

442 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = 
u32Agaö
 - 10;

447 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = 
u32Agaö
 * 2 - 36;

451 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = 
u32Dgaö
;

457 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

459 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

461 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

462 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

463 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

464 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

465 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

466 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

474 #ifde‡
INIFILE_CONFIG_MODE


476 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

478 
HI_U8
 
	gi
;

480 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

482 
¥ötf
("nullÖointer when getáwb default value!\n");

486 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

487 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 
g_AwbD·
[0].
u16WbRefTemp
;

489 
	gi
= 0; i < 4; i++)

491 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

494 
	gi
= 0; i < 6; i++)

496 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

500 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

501 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

508 
AWB_CCM_S
 
	gg_°AwbCcm
 =

532 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

541 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

543 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

545 
¥ötf
("nullÖointer when getáwb default value!\n");

549 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

551 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 5000;

553 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x18F;

554 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

555 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

556 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x195;

558 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 0x004A;

559 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 0x000B;

560 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -0x00AC;

561 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 0x16C2A;

562 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 0x0080;

563 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -0x0D469;

565 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

566 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

574 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

576 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

578 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

585 #ifde‡
INIFILE_CONFIG_MODE


587 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

589 i‡(
	gHI_NULL
 =
p°Def
)

591 
¥ötf
("nullÖointer when get isp default value!\n");

595 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

597 
	ggíSís‹Mode
)

600 
WDR_MODE_NONE
:

601 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

602 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

603 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

604 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

605 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

606 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

608 
	gWDR_MODE_BUILT_IN
:

609 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

610 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

611 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

612 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

613 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

614 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

615 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

620 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

621 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

628 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

657 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀBuûtInWDR
 =

684 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

710 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

755 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicBuûtInWDR
 =

800 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

815 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

861 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaBuûtInWDR
 =

872 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„BuûtInWDR
 =

889 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

891 i‡(
	gHI_NULL
 =
p°Def
)

893 
¥ötf
("nullÖointer when get isp default value!\n");

897 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

899 
	ggíSís‹Mode
)

901 
	gWDR_MODE_NONE
:

903 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

904 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

905 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

906 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

907 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

908 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

909 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

910 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

911 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

913 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

914 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

915 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

916 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

917 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

921 
	gWDR_MODE_BUILT_IN
:

923 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

924 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

925 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

926 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

927 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

928 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

929 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

930 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

931 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

933 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

934 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀBuûtInWDR
, (
ISP_CMOS_AGC_TABLE_S
));

935 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicBuûtInWDR
, (
ISP_CMOS_DEMOSAIC_S
));

936 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaBuûtInWDR
, (
ISP_CMOS_GAMMA_S
));

937 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„BuûtInWDR
, (
ISP_CMOS_GAMMAFE_S
));

938 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

946 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

947 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

954 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

956 
HI_S32
 
	gi
;

958 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

960 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

965 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

967 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

969 
i
=0; 
	gi
<4; i++)

971 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xA8;

974 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

976 
i
=0; 
	gi
<4; i++)

978 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xC3;

987 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

990 
HI_U32
 
	gu32FuŒLöes_5Fps
 = 
FRAME_LINES_2M_1080p
 * 30 / 5;

991 
HI_U32
 
	gu32MaxExpTime_5Fps
 = 
u32FuŒLöes_5Fps
 - 2;

993 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

998 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

999 
	gu32MaxExpTime_5Fps
 = 
u32FuŒLöes_5Fps
 - 2;

1001 i‡(
	gbE«bÀ
)

1003 
£ns‹_wrôe_ªgi°î
(
FRAME_LINES
, 
u32FuŒLöes_5Fps
);

1004 
£ns‹_wrôe_ªgi°î
(
EXPOSURE_TIME
, 
u32MaxExpTime_5Fps
);

1005 
£ns‹_wrôe_ªgi°î
(
ANALOG_GAIN
, 0x0);

1006 
£ns‹_wrôe_ªgi°î
(
DIGITAL_GAIN
, 0x0080);

1010 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

1011 
£ns‹_wrôe_ªgi°î
(
FRAME_LINES
, 
gu32FuŒLöesStd
);

1012 
	gbInô
 = 
HI_FALSE
;

1018 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1020 
	gbInô
 = 
HI_FALSE
;

1022 
	gu8Mode
)

1024 
	gWDR_MODE_NONE
:

1025 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1028 
	gWDR_MODE_BUILT_IN
:

1029 
gíSís‹Mode
 = 
WDR_MODE_BUILT_IN
;

1033 
¥ötf
("NOT supportÅhis mode!\n");

1041 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1043 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1045 
	gbInô
 = 
HI_FALSE
;

1047 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1049 
¥ötf
("nullÖointer when set image mode\n");

1053 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1055 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1057 
u8Sís‹ImageMode
 = 
SENSOR_2M_1080p30_MODE
;

1061 
	gu8Sís‹ImageMode
 = 
SENSOR_2M_1080p60_MODE
;

1066 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1067 
p°Sís‹ImageMode
->
u16Width
,

1068 
p°Sís‹ImageMode
->
u16Height
,

1069 
p°Sís‹ImageMode
->
f32Fps
);

1073 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1075 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1081 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1087 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1093 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1096 
HI_S32
 
	gi
;

1098 i‡(
	gHI_FALSE
 =
bInô
)

1100 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1101 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1102 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 12;

1103 
	gi
=0; i < 
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1105 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1106 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1107 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1108 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1110 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1111 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
EXPOSURE_TIME
;

1112 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1113 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
ANALOG_GAIN
;

1114 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 0;

1115 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 
DIGITAL_GAIN
;

1116 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 0;

1117 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
FRAME_LINES
;

1120 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 0;

1121 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 0x3100;

1122 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 0;

1123 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 0x3206;

1124 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 0;

1125 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 0x3208;

1126 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 0;

1127 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 0x3202;

1128 i‡(
	gWDR_MODE_NONE
 !
gíSís‹Mode
)

1130 
g_°SnsRegsInfo
.
a°I2cD©a
[8].
u8DñayFrmNum
 = 0;

1131 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 0x3096;

1132 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1133 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 0x3098;

1134 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 10;

1138 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 0;

1139 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 0x3176;

1140 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1141 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 0x3178;

1142 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1143 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 0x317A;

1144 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu8DñayFrmNum
 = 0;

1145 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32RegAddr
 = 0x317C;

1150 
	gbInô
 = 
HI_TRUE
;

1154 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1156 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1158 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1162 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1167 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1169 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1173 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1174 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1179 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1181 
mem£t
(
pcName
, 0, (pcName));

1183 i‡(
	gHI_NULL
 =
pcP©h
)

1185 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1186 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1190 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1192 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1196 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1197 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1203 
HI_VOID
 
£ns‹_globÆ_öô
()

1205 
	ggu8Sís‹ImageMode
 = 
SENSOR_2M_1080p30_MODE
;

1206 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1207 
	ggu32FuŒLöesStd
 = 
FRAME_LINES_2M_1080p
;

1208 
	ggu32FuŒLöes
 = 
FRAME_LINES_2M_1080p
;

1209 
	gbInô
 = 
HI_FALSE
;

1210 
	gbSís‹Inô
 = 
HI_FALSE
;

1212 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1213 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1215 #ifde‡
INIFILE_CONFIG_MODE


1216 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1217 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1218 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1220 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1228 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1230 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1232 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1233 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1234 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1235 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1236 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1238 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1239 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1240 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1241 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1250 
£ns‹_ªgi°î_ˇŒback
()

1252 
ISP_DEV
 
	gI•Dev
 = 0;

1253 
HI_S32
 
	gs32Rë
;

1254 
ALG_LIB_S
 
	g°Lib
;

1255 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1256 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1257 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1259 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1260 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
AR0230_ID
, &
°I•Regi°î
);

1261 i‡(
	gs32Rë
)

1263 
¥ötf
("sensorÑegister callback function failed!\n");

1264  
	gs32Rë
;

1267 
	g°Lib
.
	gs32Id
 = 0;

1268 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1269 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1270 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0230_ID
, &
°AeRegi°î
);

1271 i‡(
	gs32Rë
)

1273 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1274  
	gs32Rë
;

1277 
	g°Lib
.
	gs32Id
 = 0;

1278 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1279 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1280 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0230_ID
, &
°AwbRegi°î
);

1281 i‡(
	gs32Rë
)

1283 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1284  
	gs32Rë
;

1290 
£ns‹_uƒegi°î_ˇŒback
()

1292 
ISP_DEV
 
	gI•Dev
 = 0;

1293 
HI_S32
 
	gs32Rë
;

1294 
ALG_LIB_S
 
	g°Lib
;

1296 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
AR0230_ID
);

1297 i‡(
	gs32Rë
)

1299 
¥ötf
("sensor unregister callback function failed!\n");

1300  
	gs32Rë
;

1303 
	g°Lib
.
	gs32Id
 = 0;

1304 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1305 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0230_ID
);

1306 i‡(
	gs32Rë
)

1308 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1309  
	gs32Rë
;

1312 
	g°Lib
.
	gs32Id
 = 0;

1313 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1314 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0230_ID
);

1315 i‡(
	gs32Rë
)

1317 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1318  
	gs32Rë
;

1324 #ifde‡
__˝lu•lus


1325 #i‡
__˝lu•lus


	@component/isp/sensor/aptina_ar0230/ar0230_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~"hi_comm_video.h
"

27 #ifde‡
HI_GPIO_I2C


28 
	~"gpioi2c_ex.h
"

30 
	~"hi_i2c.h
"

33 c⁄° 
	g£ns‹_i2c_addr
 = 0x20;

34 c⁄° 
	g£ns‹_addr_byã
 = 2;

35 c⁄° 
	g£ns‹_d©a_byã
 = 2;

36 
	gg_fd
 = -1;

38 
HI_U8
 
gu8Sís‹ImageMode
;

39 
WDR_MODE_E
 
gíSís‹Mode
;

40 
HI_BOOL
 
bSís‹Inô
;

42 
	$£ns‹_i2c_öô
()

44 if(
g_fd
 >= 0)

48 #ifde‡
HI_GPIO_I2C


49 
ªt
;

51 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

52 if(
g_fd
 < 0)

54 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

58 
ªt
;

60 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

61 if(
g_fd
 < 0)

63 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

67 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

68 i‡(
ªt
 < 0)

70 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

71  
ªt
;

76 
	}
}

78 
	$£ns‹_i2c_exô
()

80 i‡(
g_fd
 >= 0)

82 
	`˛o£
(
g_fd
);

83 
g_fd
 = -1;

87 
	}
}

89 
	$£ns‹_ªad_ªgi°î
(
addr
)

94 
	}
}

96 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

98 #ifde‡
HI_GPIO_I2C


99 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

100 
i2c_d©a
.
ªg_addr
 = 
addr
;

101 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

102 
i2c_d©a
.
d©a
 = data;

103 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

105 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

107 i‡(
ªt
)

109 
	`¥ötf
("GPIO-I2C write faild!\n");

110  
ªt
;

113 
idx
 = 0;

114 
ªt
;

115 
buf
[8];

117 
buf
[
idx
++] = 
addr
 & 0xFF;

118 i‡(
£ns‹_addr_byã
 == 2)

120 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

121 
buf
[
idx
++] = 
addr
 >> 8;

125 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

128 i‡(
ªt
 < 0)

130 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

134 
buf
[
idx
++] = 
d©a
;

135 i‡(
£ns‹_d©a_byã
 == 2)

137 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

138 
buf
[
idx
++] = 
d©a
 >> 8;

142 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

145 i‡(
ªt
)

147 
	`¥ötf
("hi_i2c write faild!\n");

151 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

152 if(
ªt
 < 0)

154 
	`¥ötf
("I2C_WRITEÉrror!\n");

160 
	}
}

162 
	$dñay_ms
(
ms
) {

163 
	`u¶ìp
(
ms
*1000);

164 
	}
}

166 
	$£ns‹_¥og
(* 
rom
)

168 
i
 = 0;

170 
lookup
 = 
rom
[
i
++];

171 
addr
 = (
lookup
 >> 16) & 0xFFFF;

172 
d©a
 = 
lookup
 & 0xFFFF;

173 i‡(
addr
 == 0xFFFE) {

174 
	`dñay_ms
(
d©a
);

175 } i‡(
addr
 == 0xFFFF) {

178 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

181 
	}
}

183 
£ns‹_löór_1080p30_öô
();

184 
£ns‹_löór_1080p60_öô
();

185 
£ns‹_wdr_1080p30_öô
();

186 
£ns‹_wdr_1080p60_öô
();

189 
	$£ns‹_öô
()

191 
cmp_vÆue
;

193 
	`£ns‹_i2c_öô
();

194 
cmp_vÆue
 = (
gu8Sís‹ImageMode
 << 4Ë| 
gíSís‹Mode
;

196 
cmp_vÆue
)

200 
	`£ns‹_löór_1080p30_öô
();

205 
	`£ns‹_löór_1080p60_öô
();

210 
	`£ns‹_wdr_1080p30_öô
();

216 
	`£ns‹_wdr_1080p60_öô
();

221 
	`¥ötf
("Not support!\n");

226 
bSís‹Inô
 = 
HI_TRUE
;

229 
	}
}

231 
	$£ns‹_exô
()

233 
	`£ns‹_i2c_exô
();

236 
	}
}

238 
	$£ns‹_löór_1080p30_öô
()

242 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0001 );

243 
	`dñay_ms
(200);

244 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x10D8 );

247 
	`£ns‹_wrôe_ªgi°î
(0x3088, 0x8242);

248 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

249 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x729B);

250 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A31);

251 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4342);

252 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03);

253 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A14);

254 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4578);

255 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7B3D);

256 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFF3D);

257 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFF3D);

258 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xEA2A);

259 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x043D);

260 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102A);

261 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x052A);

262 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1535);

263 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A05);

264 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3D10);

265 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

266 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A04);

267 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A14);

268 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DFF);

269 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DFF);

270 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DEA);

271 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A04);

272 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x622A);

273 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x288E);

274 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0036);

275 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A08);

276 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3D64);

277 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7A3D);

278 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0444);

279 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C4B);

280 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8F03);

281 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x430D);

282 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2D46);

283 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

284 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F16);

285 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x530D);

286 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1660);

287 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E4C);

288 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2904);

289 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2984);

290 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03);

291 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFC);

292 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1D);

293 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5754);

294 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x495F);

295 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5305);

296 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5307);

297 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D2B);

298 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF810);

299 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x164C);

300 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0955);

301 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x562B);

302 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xB82B);

303 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x984E);

304 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1129);

305 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9460);

306 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C19);

307 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1B);

308 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4548);

309 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4508);

310 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4588);

311 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29B6);

312 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01);

313 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AF8);

314 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E02);

315 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA);

316 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F09);

317 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1B);

318 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29B2);

319 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F0C);

320 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E03);

321 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E15);

322 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C13);

323 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F11);

324 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E0F);

325 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F2B);

326 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x902A);

327 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF22B);

328 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x803E);

329 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x063F);

330 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0660);

331 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29A2);

332 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29A3);

333 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F4D);

334 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1C2A);

335 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFA29);

336 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8345);

337 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xA83E);

338 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x072A);

339 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFB3E);

340 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2945);

341 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8824);

342 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E08);

343 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA);

344 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5D29);

345 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9288);

346 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102B);

347 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x048B);

348 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1686);

349 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8D48);

350 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D4E);

351 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B80);

352 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4C0B);

353 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x603F);

354 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x302A);

355 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF23F);

356 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1029);

357 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8229);

358 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8329);

359 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x435C);

360 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x155F);

361 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D1C);

362 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA);

363 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

364 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00);

365 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98);

366 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F0A);

367 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A0A);

368 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

369 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0B43);

370 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x168E);

371 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A);

372 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C45);

373 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x783F);

374 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x072A);

375 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9D3E);

376 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x305D);

377 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2944);

378 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8810);

379 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B04);

380 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x530D);

381 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

382 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E08);

383 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01);

384 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98);

385 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00);

386 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x769C);

387 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x779C);

388 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4644);

389 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1616);

390 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x907A);

391 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1244);

392 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4B18);

393 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A04);

394 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

395 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0643);

396 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1605);

397 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

398 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0743);

399 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1658);

400 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

401 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5A43);

402 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1645);

403 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x588E);

404 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A);

405 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C45);

406 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x787B);

407 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F07);

408 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A9D);

409 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x530D);

410 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8B16);

411 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x863E);

412 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2345);

413 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5825);

414 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E10);

415 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01);

416 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98);

417 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00);

418 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E10);

419 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8D60);

420 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1244);

421 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4B2C);

422 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C2C);

425 
	`£ns‹_wrôe_ªgi°î
(0x320C, 0x0180);

426 
	`£ns‹_wrôe_ªgi°î
(0x320E, 0x0300);

427 
	`£ns‹_wrôe_ªgi°î
(0x3210, 0x0500);

428 
	`£ns‹_wrôe_ªgi°î
(0x3204, 0x0B6D);

429 
	`£ns‹_wrôe_ªgi°î
(0x30FE, 0x0080);

430 
	`£ns‹_wrôe_ªgi°î
(0x3ED8, 0x7B99);

431 
	`£ns‹_wrôe_ªgi°î
(0x3EDC, 0x9BA8);

432 
	`£ns‹_wrôe_ªgi°î
(0x3EDA, 0x9B9B);

433 
	`£ns‹_wrôe_ªgi°î
(0x3092, 0x006F);

434 
	`£ns‹_wrôe_ªgi°î
(0x3EEC, 0x1C04);

435 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x779C);

436 
	`£ns‹_wrôe_ªgi°î
(0x3EF6, 0xA70F);

437 
	`£ns‹_wrôe_ªgi°î
(0x3044, 0x0410);

438 
	`£ns‹_wrôe_ªgi°î
(0x3ED0, 0xFF44);

439 
	`£ns‹_wrôe_ªgi°î
(0x3ED4, 0x031F);

440 
	`£ns‹_wrôe_ªgi°î
(0x30FE, 0x0080);

441 
	`£ns‹_wrôe_ªgi°î
(0x3EE2, 0x8866);

442 
	`£ns‹_wrôe_ªgi°î
(0x3EE4, 0x6623);

443 
	`£ns‹_wrôe_ªgi°î
(0x3EE6, 0x2263);

444 
	`£ns‹_wrôe_ªgi°î
(0x30E0, 0x4283);

446 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0058);

447 
	`£ns‹_wrôe_ªgi°î
(0x30B0, 0x1118);

448 
	`£ns‹_wrôe_ªgi°î
(0x31AC, 0x0C0C);

452 
	`£ns‹_wrôe_ªgi°î
(0x302A, 0x000C);

453 
	`£ns‹_wrôe_ªgi°î
(0x302C, 0x0001);

454 
	`£ns‹_wrôe_ªgi°î
(0x302E, 0x0004);

455 
	`£ns‹_wrôe_ªgi°î
(0x3030, 0x0042);

456 
	`£ns‹_wrôe_ªgi°î
(0x3036, 0x000C);

457 
	`£ns‹_wrôe_ªgi°î
(0x3038, 0x0002);

460 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x0000 );

461 
	`£ns‹_wrôe_ªgi°î
(0x3004, 0x0000 );

462 
	`£ns‹_wrôe_ªgi°î
(0x3006, 0x0437);

463 
	`£ns‹_wrôe_ªgi°î
(0x3008, 0x0787 );

464 
	`£ns‹_wrôe_ªgi°î
(0x300A, 1351 );

465 
	`£ns‹_wrôe_ªgi°î
(0x300C, 1118 );

466 
	`£ns‹_wrôe_ªgi°î
(0x3012, 1349 );

467 
	`£ns‹_wrôe_ªgi°î
(0x30A2, 0x0001 );

468 
	`£ns‹_wrôe_ªgi°î
(0x30A6, 0x0001);

469 
	`£ns‹_wrôe_ªgi°î
(0x3040, 0x0000 );

472 
	`£ns‹_wrôe_ªgi°î
(0x3082, 0x0009 );

473 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x769C );

474 
	`£ns‹_wrôe_ªgi°î
(0x31E0, 0x0200 );

475 
	`£ns‹_wrôe_ªgi°î
(0x318C, 0x0000 );

478 
	`£ns‹_wrôe_ªgi°î
(0x3060, 0x000B );

479 
	`£ns‹_wrôe_ªgi°î
(0x3096, 0x0080 );

480 
	`£ns‹_wrôe_ªgi°î
(0x3098, 0x0080 );

481 
	`£ns‹_wrôe_ªgi°î
(0x3206, 0x0B08 );

482 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x1E13 );

483 
	`£ns‹_wrôe_ªgi°î
(0x3202, 0x0080 );

484 
	`£ns‹_wrôe_ªgi°î
(0x3200, 0x0002 );

485 
	`£ns‹_wrôe_ªgi°î
(0x3100, 0x0000 );

488 
	`£ns‹_wrôe_ªgi°î
(0x3200, 0x0000 );

489 
	`£ns‹_wrôe_ªgi°î
(0x31D0, 0x0000 );

491 
	`£ns‹_wrôe_ªgi°î
(0x2400, 0x0003 );

492 
	`£ns‹_wrôe_ªgi°î
(0x301E, 0x00A8 );

493 
	`£ns‹_wrôe_ªgi°î
(0x2450, 0x0000 );

494 
	`£ns‹_wrôe_ªgi°î
(0x320A, 0x0080 );

496 
	`£ns‹_wrôe_ªgi°î
(0x3178, 0xFE80 );

497 
	`£ns‹_wrôe_ªgi°î
(0x3176, 0xFE80 );

498 
	`£ns‹_wrôe_ªgi°î
(0x317A, 0xFF80 );

499 
	`£ns‹_wrôe_ªgi°î
(0x317C, 0xFF80 );

501 
	`£ns‹_wrôe_ªgi°î
(0x3064, 0x1802 );

502 
	`£ns‹_wrôe_ªgi°î
(0x31AE, 0x0304 );

503 
	`£ns‹_wrôe_ªgi°î
(0x31C6, 0x0400 );

504 
	`£ns‹_wrôe_ªgi°î
(0x306E, 0x9210 );

506 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x005C );

507 
	`dñay_ms
(33);

509 
	`¥ötf
("Aptina AR0230 sensorÜinear 2M-1080p 30fps init success!\n");

510 
	}
}

514 
	$£ns‹_löór_1080p60_öô
()

519 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0001 );

520 
	`dñay_ms
(200);

521 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x10D8 );

524 
	`£ns‹_wrôe_ªgi°î
(0x3088, 0x8242);

525 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

526 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x729B);

527 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A31);

528 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4342);

529 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03);

530 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A14);

531 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4578);

532 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7B3D);

533 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFF3D);

534 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFF3D);

535 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xEA2A);

536 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x043D);

537 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102A);

538 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x052A);

539 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1535);

540 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A05);

541 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3D10);

542 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

543 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A04);

544 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A14);

545 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DFF);

546 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DFF);

547 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DEA);

548 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A04);

549 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x622A);

550 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x288E);

551 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0036);

552 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A08);

553 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3D64);

554 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7A3D);

555 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0444);

556 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C4B);

557 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8F03);

558 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x430D);

559 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2D46);

560 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

561 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F16);

562 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x530D);

563 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1660);

564 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E4C);

565 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2904);

566 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2984);

567 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03);

568 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFC);

569 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1D);

570 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5754);

571 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x495F);

572 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5305);

573 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5307);

574 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D2B);

575 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF810);

576 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x164C);

577 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0955);

578 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x562B);

579 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xB82B);

580 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x984E);

581 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1129);

582 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9460);

583 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C19);

584 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1B);

585 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4548);

586 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4508);

587 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4588);

588 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29B6);

589 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01);

590 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AF8);

591 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E02);

592 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA);

593 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F09);

594 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1B);

595 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29B2);

596 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F0C);

597 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E03);

598 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E15);

599 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C13);

600 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F11);

601 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E0F);

602 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F2B);

603 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x902A);

604 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF22B);

605 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x803E);

606 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x063F);

607 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0660);

608 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29A2);

609 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29A3);

610 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F4D);

611 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1C2A);

612 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFA29);

613 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8345);

614 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xA83E);

615 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x072A);

616 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFB3E);

617 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2945);

618 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8824);

619 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E08);

620 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA);

621 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5D29);

622 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9288);

623 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102B);

624 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x048B);

625 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1686);

626 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8D48);

627 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D4E);

628 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B80);

629 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4C0B);

630 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x603F);

631 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x302A);

632 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF23F);

633 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1029);

634 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8229);

635 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8329);

636 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x435C);

637 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x155F);

638 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D1C);

639 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA);

640 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

641 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00);

642 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98);

643 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F0A);

644 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A0A);

645 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

646 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0B43);

647 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x168E);

648 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A);

649 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C45);

650 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x783F);

651 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x072A);

652 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9D3E);

653 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x305D);

654 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2944);

655 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8810);

656 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B04);

657 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x530D);

658 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558);

659 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E08);

660 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01);

661 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98);

662 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00);

663 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x769C);

664 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x779C);

665 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4644);

666 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1616);

667 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x907A);

668 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1244);

669 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4B18);

670 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A04);

671 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

672 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0643);

673 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1605);

674 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

675 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0743);

676 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1658);

677 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316);

678 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5A43);

679 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1645);

680 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x588E);

681 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A);

682 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C45);

683 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x787B);

684 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F07);

685 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A9D);

686 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x530D);

687 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8B16);

688 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x863E);

689 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2345);

690 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5825);

691 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E10);

692 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01);

693 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98);

694 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00);

695 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E10);

696 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8D60);

697 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1244);

698 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4B2C);

699 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C2C);

702 
	`£ns‹_wrôe_ªgi°î
(0x320C, 0x0180);

703 
	`£ns‹_wrôe_ªgi°î
(0x320E, 0x0300);

704 
	`£ns‹_wrôe_ªgi°î
(0x3210, 0x0500);

705 
	`£ns‹_wrôe_ªgi°î
(0x3204, 0x0B6D);

706 
	`£ns‹_wrôe_ªgi°î
(0x30FE, 0x0080);

707 
	`£ns‹_wrôe_ªgi°î
(0x3ED8, 0x7B99);

708 
	`£ns‹_wrôe_ªgi°î
(0x3EDC, 0x9BA8);

709 
	`£ns‹_wrôe_ªgi°î
(0x3EDA, 0x9B9B);

710 
	`£ns‹_wrôe_ªgi°î
(0x3092, 0x006F);

711 
	`£ns‹_wrôe_ªgi°î
(0x3EEC, 0x1C04);

712 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x779C);

713 
	`£ns‹_wrôe_ªgi°î
(0x3EF6, 0xA70F);

714 
	`£ns‹_wrôe_ªgi°î
(0x3044, 0x0410);

715 
	`£ns‹_wrôe_ªgi°î
(0x3ED0, 0xFF44);

716 
	`£ns‹_wrôe_ªgi°î
(0x3ED4, 0x031F);

717 
	`£ns‹_wrôe_ªgi°î
(0x30FE, 0x0080);

718 
	`£ns‹_wrôe_ªgi°î
(0x3EE2, 0x8866);

719 
	`£ns‹_wrôe_ªgi°î
(0x3EE4, 0x6623);

720 
	`£ns‹_wrôe_ªgi°î
(0x3EE6, 0x2263);

721 
	`£ns‹_wrôe_ªgi°î
(0x30E0, 0x4283);

723 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0058);

724 
	`£ns‹_wrôe_ªgi°î
(0x30B0, 0x0118);

725 
	`£ns‹_wrôe_ªgi°î
(0x31AC, 0x0C0C);

729 
	`£ns‹_wrôe_ªgi°î
(0x302A, 0x0006);

730 
	`£ns‹_wrôe_ªgi°î
(0x302C, 0x0001);

731 
	`£ns‹_wrôe_ªgi°î
(0x302E, 0x0004);

732 
	`£ns‹_wrôe_ªgi°î
(0x3030, 0x0042);

733 
	`£ns‹_wrôe_ªgi°î
(0x3036, 0x000C);

734 
	`£ns‹_wrôe_ªgi°î
(0x3038, 0x0001);

737 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x0000 );

738 
	`£ns‹_wrôe_ªgi°î
(0x3004, 0x0000 );

739 
	`£ns‹_wrôe_ªgi°î
(0x3006, 0x0437 );

740 
	`£ns‹_wrôe_ªgi°î
(0x3008, 0x0787 );

741 
	`£ns‹_wrôe_ªgi°î
(0x300A, 1106 );

742 
	`£ns‹_wrôe_ªgi°î
(0x300C, 1118 );

743 
	`£ns‹_wrôe_ªgi°î
(0x3012, 1046 );

744 
	`£ns‹_wrôe_ªgi°î
(0x30A2, 0x0001 );

745 
	`£ns‹_wrôe_ªgi°î
(0x30A6, 0x0001 );

746 
	`£ns‹_wrôe_ªgi°î
(0x3040, 0x0000 );

749 
	`£ns‹_wrôe_ªgi°î
(0x3082, 0x0009 );

750 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x769C );

751 
	`£ns‹_wrôe_ªgi°î
(0x31E0, 0x0200 );

752 
	`£ns‹_wrôe_ªgi°î
(0x318C, 0x0000 );

755 
	`£ns‹_wrôe_ªgi°î
(0x3060, 0x000B );

756 
	`£ns‹_wrôe_ªgi°î
(0x3096, 0x0080 );

757 
	`£ns‹_wrôe_ªgi°î
(0x3098, 0x0080 );

758 
	`£ns‹_wrôe_ªgi°î
(0x3206, 0x0B08 );

759 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x1E13 );

760 
	`£ns‹_wrôe_ªgi°î
(0x3202, 0x0080 );

761 
	`£ns‹_wrôe_ªgi°î
(0x3200, 0x0002 );

762 
	`£ns‹_wrôe_ªgi°î
(0x3100, 0x0000 );

765 
	`£ns‹_wrôe_ªgi°î
(0x3200, 0x0000 );

766 
	`£ns‹_wrôe_ªgi°î
(0x31D0, 0x0000 );

768 
	`£ns‹_wrôe_ªgi°î
(0x2400, 0x0003 );

769 
	`£ns‹_wrôe_ªgi°î
(0x301E, 0x00A8 );

770 
	`£ns‹_wrôe_ªgi°î
(0x2450, 0x0000 );

771 
	`£ns‹_wrôe_ªgi°î
(0x320A, 0x0080 );

773 
	`£ns‹_wrôe_ªgi°î
(0x3178, 0xFE80 );

774 
	`£ns‹_wrôe_ªgi°î
(0x3176, 0xFE80 );

775 
	`£ns‹_wrôe_ªgi°î
(0x317A, 0xFF80 );

776 
	`£ns‹_wrôe_ªgi°î
(0x317C, 0xFF80 );

778 
	`£ns‹_wrôe_ªgi°î
(0x3064, 0x1802 );

779 
	`£ns‹_wrôe_ªgi°î
(0x31AE, 0x0304 );

780 
	`£ns‹_wrôe_ªgi°î
(0x31C6, 0x0400 );

781 
	`£ns‹_wrôe_ªgi°î
(0x306E, 0x9210 );

783 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x005C );

784 
	`dñay_ms
(33);

786 
	`¥ötf
("Aptina AR0230 sensorÜinear 2M-1080p 60fps init success!\n");

788 
	}
}

791 
	$£ns‹_wdr_1080p30_öô
()

797 
	`£ns‹_wrôe_ªgi°î
( 0x301A, 0x0001);

798 
	`dñay_ms
( 200);

799 
	`£ns‹_wrôe_ªgi°î
( 0x301A, 0x10D8);

806 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0059 );

807 
	`dñay_ms
( 200);

808 
	`£ns‹_wrôe_ªgi°î
(0x3088, 0x8000 );

809 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558 );

810 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x729B );

811 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A31 );

812 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4342 );

813 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03 );

814 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A14 );

815 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4578 );

816 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7B3D );

817 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFF3D );

818 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFF3D );

819 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xEA2A );

820 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x043D );

821 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102A );

822 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x052A );

823 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1535 );

824 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A05 );

825 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3D10 );

826 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558 );

827 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A04 );

828 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A14 );

829 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DFF );

830 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DFF );

831 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3DEA );

832 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A04 );

833 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x622A );

834 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x288E );

835 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0036 );

836 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A08 );

837 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3D64 );

838 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7A3D );

839 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0444 );

840 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C4B );

841 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8F00 );

842 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x430C );

843 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2D63 );

844 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

845 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03 );

846 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFC );

847 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1D );

848 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5754 );

849 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x495F );

850 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5305 );

851 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5307 );

852 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D2B );

853 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF810 );

854 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x164C );

855 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0855 );

856 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x562B );

857 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xB82B );

858 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x984E );

859 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1129 );

860 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0429 );

861 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8429 );

862 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9460 );

863 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C19 );

864 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1B );

865 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4548 );

866 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4508 );

867 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4588 );

868 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29B6 );

869 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01 );

870 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AF8 );

871 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E02 );

872 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA );

873 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F09 );

874 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C1B );

875 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29B2 );

876 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F0C );

877 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E02 );

878 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E13 );

879 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C13 );

880 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F11 );

881 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E0B );

882 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F2B );

883 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x902A );

884 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF22B );

885 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x803E );

886 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x043F );

887 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0660 );

888 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29A2 );

889 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x29A3 );

890 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F4D );

891 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x192A );

892 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFA29 );

893 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8345 );

894 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xA83E );

895 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x072A );

896 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFB3E );

897 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2945 );

898 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8821 );

899 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E08 );

900 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA );

901 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5D29 );

902 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9288 );

903 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102B );

904 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x048B );

905 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1685 );

906 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8D48 );

907 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D4E );

908 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B80 );

909 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4C0B );

910 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x603F );

911 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x282A );

912 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF23F );

913 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0F29 );

914 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8229 );

915 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8329 );

916 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x435C );

917 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x155F );

918 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D19 );

919 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA );

920 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558 );

921 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00 );

922 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98 );

923 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F06 );

924 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1244 );

925 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A04 );

926 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

927 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0543 );

928 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1658 );

929 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

930 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5A43 );

931 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1606 );

932 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

933 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0743 );

934 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x168E );

935 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A );

936 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C45 );

937 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x787B );

938 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F07 );

939 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A9D );

940 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E2E );

941 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558 );

942 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x253E );

943 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x068E );

944 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x012A );

945 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x988E );

946 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0012 );

947 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x444B );

948 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0343 );

949 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2D46 );

950 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

951 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xA343 );

952 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x165D );

953 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0D29 );

954 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4488 );

955 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102B );

956 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0453 );

957 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0D8B );

958 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1685 );

959 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x448E );

960 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A );

961 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFC5C );

962 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1D8D );

963 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x6057 );

964 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5449 );

965 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F53 );

966 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0553 );

967 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x074D );

968 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2BF8 );

969 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1016 );

970 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4C08 );

971 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5556 );

972 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2BB8 );

973 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B98 );

974 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4E11 );

975 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2904 );

976 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2984 );

977 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2994 );

978 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x605C );

979 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x195C );

980 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1B45 );

981 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4845 );

982 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0845 );

983 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8829 );

984 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xB68E );

985 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x012A );

986 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xF83E );

987 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x022A );

988 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFA3F );

989 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x095C );

990 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1B29 );

991 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xB23F );

992 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0C3E );

993 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x023E );

994 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x135C );

995 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x133F );

996 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x113E );

997 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0B5F );

998 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B90 );

999 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AF2 );

1000 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B80 );

1001 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E04 );

1002 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F06 );

1003 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x6029 );

1004 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xA229 );

1005 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xA35F );

1006 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4D1C );

1007 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFA );

1008 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2983 );

1009 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x45A8 );

1010 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E07 );

1011 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AFB );

1012 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E29 );

1013 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4588 );

1014 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x243E );

1015 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x082A );

1016 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFA5D );

1017 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2992 );

1018 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8810 );

1019 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2B04 );

1020 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8B16 );

1021 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x868D );

1022 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x484D );

1023 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4E2B );

1024 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x804C );

1025 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0B60 );

1026 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F28 );

1027 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2AF2 );

1028 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F0F );

1029 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2982 );

1030 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2983 );

1031 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2943 );

1032 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5C15 );

1033 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5F4D );

1034 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1C2A );

1035 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0xFA45 );

1036 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x588E );

1037 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x002A );

1038 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x983F );

1039 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x064A );

1040 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x739D );

1041 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0A43 );

1042 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x160B );

1043 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

1044 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E03 );

1045 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A9C );

1046 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4578 );

1047 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F07 );

1048 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A9D );

1049 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E12 );

1050 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558 );

1051 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3F04 );

1052 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E01 );

1053 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2A98 );

1054 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x8E00 );

1055 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9176 );

1056 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C77 );

1057 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C46 );

1058 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4416 );

1059 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1690 );

1060 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x7A12 );

1061 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x444B );

1062 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4A00 );

1063 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

1064 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x6343 );

1065 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1608 );

1066 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

1067 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x5043 );

1068 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1665 );

1069 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4316 );

1070 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x6643 );

1071 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x168E );

1072 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x032A );

1073 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9C45 );

1074 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x783F );

1075 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x072A );

1076 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x9D5D );

1077 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0C29 );

1078 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4488 );

1079 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x102B );

1080 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0453 );

1081 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0D8B );

1082 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x1686 );

1083 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x3E1F );

1084 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x4558 );

1085 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x283E );

1086 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x068E );

1087 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x012A );

1088 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x988E );

1089 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x008D );

1090 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x6012 );

1091 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x444B );

1092 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C2C );

1093 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x2C2C );

1100 
	`£ns‹_wrôe_ªgi°î
( 0x2436, 0x000E );

1101 
	`£ns‹_wrôe_ªgi°î
( 0x320C, 0x0180 );

1102 
	`£ns‹_wrôe_ªgi°î
( 0x320E, 0x0300 );

1103 
	`£ns‹_wrôe_ªgi°î
( 0x3210, 0x0500 );

1104 
	`£ns‹_wrôe_ªgi°î
( 0x3204, 0x0B6D );

1105 
	`£ns‹_wrôe_ªgi°î
( 0x30FE, 0x0080 );

1106 
	`£ns‹_wrôe_ªgi°î
( 0x3ED8, 0x7B99 );

1107 
	`£ns‹_wrôe_ªgi°î
( 0x3EDC, 0x9BA8 );

1108 
	`£ns‹_wrôe_ªgi°î
( 0x3EDA, 0x9B9B );

1109 
	`£ns‹_wrôe_ªgi°î
( 0x3092, 0x006F );

1110 
	`£ns‹_wrôe_ªgi°î
( 0x3EEC, 0x1C04 );

1111 
	`£ns‹_wrôe_ªgi°î
( 0x30BA, 0x779C );

1112 
	`£ns‹_wrôe_ªgi°î
( 0x3EF6, 0xA70F );

1113 
	`£ns‹_wrôe_ªgi°î
( 0x3044, 0x0410 );

1114 
	`£ns‹_wrôe_ªgi°î
( 0x3ED0, 0xFF44 );

1115 
	`£ns‹_wrôe_ªgi°î
( 0x3ED4, 0x031F );

1116 
	`£ns‹_wrôe_ªgi°î
( 0x30FE, 0x0080 );

1117 
	`£ns‹_wrôe_ªgi°î
( 0x3EE2, 0x8866 );

1118 
	`£ns‹_wrôe_ªgi°î
( 0x3EE4, 0x6623 );

1119 
	`£ns‹_wrôe_ªgi°î
( 0x3EE6, 0x2263 );

1120 
	`£ns‹_wrôe_ªgi°î
( 0x30E0, 0x4283 );

1121 
	`£ns‹_wrôe_ªgi°î
( 0x30F0, 0x1283 );

1124 
	`£ns‹_wrôe_ªgi°î
( 0x301A, 0x0058 );

1125 
	`£ns‹_wrôe_ªgi°î
( 0x30B0, 0x0118 );

1126 
	`£ns‹_wrôe_ªgi°î
( 0x31AC, 0x100C );

1130 
	`£ns‹_wrôe_ªgi°î
( 0x302A, 0x0006 );

1131 
	`£ns‹_wrôe_ªgi°î
( 0x302C, 0x0001 );

1132 
	`£ns‹_wrôe_ªgi°î
( 0x302E, 0x0004 );

1133 
	`£ns‹_wrôe_ªgi°î
( 0x3030, 0x0042 );

1134 
	`£ns‹_wrôe_ªgi°î
( 0x3036, 0x000C );

1135 
	`£ns‹_wrôe_ªgi°î
( 0x3038, 0x0001 );

1139 
	`£ns‹_wrôe_ªgi°î
( 0x3002, 0x0000 );

1140 
	`£ns‹_wrôe_ªgi°î
( 0x3004, 0x0000 );

1141 
	`£ns‹_wrôe_ªgi°î
( 0x3006, 0x0437 );

1142 
	`£ns‹_wrôe_ªgi°î
( 0x3008, 0x0787 );

1143 
	`£ns‹_wrôe_ªgi°î
( 0x300A, 0x0465 );

1144 
	`£ns‹_wrôe_ªgi°î
( 0x300C, 0x0898 );

1145 
	`£ns‹_wrôe_ªgi°î
( 0x3012, 0x0416 );

1146 
	`£ns‹_wrôe_ªgi°î
( 0x30A2, 0x0001 );

1147 
	`£ns‹_wrôe_ªgi°î
( 0x30A6, 0x0001 );

1148 
	`£ns‹_wrôe_ªgi°î
( 0x3040, 0x0000 );

1151 
	`£ns‹_wrôe_ªgi°î
( 0x3082, 0x0008 );

1152 
	`£ns‹_wrôe_ªgi°î
( 0x31E0, 0x0200 );

1156 
	`£ns‹_wrôe_ªgi°î
(0x2400, 0x0003);

1157 
	`£ns‹_wrôe_ªgi°î
(0x301E, 0x00A8);

1158 
	`£ns‹_wrôe_ªgi°î
(0x2450, 0x0000);

1159 
	`£ns‹_wrôe_ªgi°î
(0x320A, 0x0080);

1160 
	`£ns‹_wrôe_ªgi°î
(0x31D0, 0x0001);

1167 
	`£ns‹_wrôe_ªgi°î
( 0x2420, 0x0000 );

1168 
	`£ns‹_wrôe_ªgi°î
( 0x2440, 0x0004 );

1169 
	`£ns‹_wrôe_ªgi°î
( 0x2442, 0x0080 );

1170 
	`£ns‹_wrôe_ªgi°î
( 0x301E, 0x0000 );

1171 
	`£ns‹_wrôe_ªgi°î
( 0x2450, 0x0000 );

1172 
	`£ns‹_wrôe_ªgi°î
( 0x320A, 0x0080 );

1173 
	`£ns‹_wrôe_ªgi°î
( 0x31D0, 0x0000 );

1174 
	`£ns‹_wrôe_ªgi°î
( 0x2400, 0x0002 );

1175 
	`£ns‹_wrôe_ªgi°î
( 0x2410, 0x0005 );

1176 
	`£ns‹_wrôe_ªgi°î
( 0x2412, 0x002D );

1177 
	`£ns‹_wrôe_ªgi°î
( 0x2444, 0xF400 );

1178 
	`£ns‹_wrôe_ªgi°î
( 0x2446, 0x0001 );

1179 
	`£ns‹_wrôe_ªgi°î
( 0x2438, 0x0010 );

1180 
	`£ns‹_wrôe_ªgi°î
( 0x243A, 0x0012 );

1181 
	`£ns‹_wrôe_ªgi°î
( 0x243C, 0xFFFF );

1182 
	`£ns‹_wrôe_ªgi°î
( 0x243E, 0x0100 );

1187 
	`£ns‹_wrôe_ªgi°î
( 0x3190, 0x0000 );

1188 
	`£ns‹_wrôe_ªgi°î
( 0x318A, 0x0E74 );

1189 
	`£ns‹_wrôe_ªgi°î
( 0x318C, 0xC000 );

1190 
	`£ns‹_wrôe_ªgi°î
( 0x3192, 0x0400 );

1191 
	`£ns‹_wrôe_ªgi°î
( 0x3198, 0x2050 );

1194 
	`£ns‹_wrôe_ªgi°î
( 0x3060, 0x000B );

1195 
	`£ns‹_wrôe_ªgi°î
( 0x3096, 0x0480 );

1196 
	`£ns‹_wrôe_ªgi°î
( 0x3098, 0x0480 );

1197 
	`£ns‹_wrôe_ªgi°î
( 0x3206, 0x0B08 );

1198 
	`£ns‹_wrôe_ªgi°î
( 0x3208, 0x1E13 );

1199 
	`£ns‹_wrôe_ªgi°î
( 0x3202, 0x0080 );

1200 
	`£ns‹_wrôe_ªgi°î
( 0x3200, 0x0002 );

1201 
	`£ns‹_wrôe_ªgi°î
( 0x3100, 0x0000 );

1204 
	`£ns‹_wrôe_ªgi°î
( 0x30BA, 0x779C );

1205 
	`£ns‹_wrôe_ªgi°î
( 0x318E, 0x0200 );

1206 
	`£ns‹_wrôe_ªgi°î
( 0x3064, 0x1802 );

1207 
	`£ns‹_wrôe_ªgi°î
( 0x31AE, 0x0304 );

1208 
	`£ns‹_wrôe_ªgi°î
( 0x31C6, 0x0400 );

1209 
	`£ns‹_wrôe_ªgi°î
( 0x306E, 0x9210 );

1210 
	`£ns‹_wrôe_ªgi°î
( 0x301A, 0x005C );

1211 
	`dñay_ms
(33);

1215 
	`¥ötf
("Aptina AR0230 sensor wdr 2M-1080p 30fps init success!\n");

1216 
	}
}

1218 
	$£ns‹_wdr_1080p60_öô
()

1220 
	`¥ötf
("Aptina AR0230 sensor wdr 2M-1080p 60fps init success!\n");

1221 
	}
}

	@component/isp/sensor/aptina_ar0330/ar0330_cmos.c

1 #i‡!
deföed
(
__AR0330_CMOS_H_
)

2 
	#__AR0330_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#AR0330_ID
 330

	)

25 #ifde‡
INIFILE_CONFIG_MODE


27 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

28 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

29 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

30 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

39 c⁄° 
£ns‹_i2c_addr
;

40 
£ns‹_addr_byã
;

41 
£ns‹_d©a_byã
;

43 
	#ANALOG_GAIN
 (0x3060)

	)

44 
	#DIGITAL_GAIN
 (0x305E)

	)

45 
	#FRAME_LINES
 (0x300A)

	)

46 
	#EXPOSURE_TIME
 (0x3012)

	)

47 
	#LINE_LEN_PCK
 (0x300C)

	)

49 
	#SENSOR_2M_1080p_MODE
 (1)

	)

50 
	#SENSOR_3M_1536p_MODE
 (2)

	)

51 
	#SENSOR_3M_1296p_MODE
 (3)

	)

53 
	#INCREASE_LINES
 (1Ë

	)

54 
	#FRAME_LINES_2M_1080p
 (1308+
INCREASE_LINES
)

	)

55 
	#FRAME_LINES_3M_1296p
 (1308+
INCREASE_LINES
)

	)

56 
	#FRAME_LINES_3M_1536p
 (1709+
INCREASE_LINES
)

	)

57 
	#LINE_LENGTH_PCK
 (1248)

	)

59 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_3M_1536p_MODE
;

60 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

62 
HI_U32
 
	ggu32FuŒLöesStd
 = 
FRAME_LINES_3M_1536p
;

63 
HI_U32
 
	ggu32FuŒLöes
 = 
FRAME_LINES_3M_1536p
;

64 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

65 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

67 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

68 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

70 
	#PATHLEN_MAX
 256

	)

71 
	#CMOS_CFG_INI
 "¨0330_cfg.öi"

	)

72 
	gpcName
[
PATHLEN_MAX
] = "configs/ar0330_cfg.ini";

76 #ifde‡
INIFILE_CONFIG_MODE


78 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

80 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

82 
¥ötf
("nullÖointer when getáe default value!\n");

86 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

87 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

88 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

90 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

91 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

92 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

94 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

95 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

97 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

98 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

100 
	ggíSís‹Mode
)

103 
WDR_MODE_NONE
:

104 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

105 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

106 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

107 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

109 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

111 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

112 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

113 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

114 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

116 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 8192;

117 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

118 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

119 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

121 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 2047;

122 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

123 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

124 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

126 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

127 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

128 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

131 
	gWDR_MODE_2To1_FRAME
:

132 
WDR_MODE_2To1_FRAME_FULL_RATE
:

133 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xc;

134 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

135 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

136 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

138 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

140 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

141 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

142 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

143 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

145 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 8192;

146 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

147 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

148 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

150 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 2047;

151 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

152 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

153 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

155 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

156 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

157 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

165 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

167 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

169 
¥ötf
("nullÖointer when getáe default value!\n");

173 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

174 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

175 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

177 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

178 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

179 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

181 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

182 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

184 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

185 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.0078125;

187 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

188 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

189 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 4 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

191 
	ggíSís‹Mode
)

194 
WDR_MODE_NONE
:

195 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

196 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

197 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

198 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

200 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

202 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

203 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

204 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

205 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

207 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 8192;

208 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

209 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

210 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

212 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 2047;

213 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

214 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

215 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

218 
	gWDR_MODE_2To1_FRAME
:

219 
WDR_MODE_2To1_FRAME_FULL_RATE
:

220 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xc;

221 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

222 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

223 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

225 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

227 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

228 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

229 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

230 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

232 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 8192;

233 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

234 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

235 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

237 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 2047;

238 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 128;

239 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

240 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

249 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

251 i‡(
	gSENSOR_2M_1080p_MODE
 =
gu8Sís‹ImageMode
)

253 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

255 
gu32FuŒLöesStd
 = (
FRAME_LINES_2M_1080p
 * 30Ë/ 
f32Fps
;

259 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

263 i‡(
	gSENSOR_3M_1536p_MODE
 =
gu8Sís‹ImageMode
)

265 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

267 #i‚de‡
HI_FPGA


268 
gu32FuŒLöesStd
 = (
FRAME_LINES_3M_1536p
 * 30Ë/ 
f32Fps
;

270 
	ggu32FuŒLöesStd
 = (
FRAME_LINES_3M_1536p
 * 25Ë/ 
f32Fps
;

275 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

279 i‡(
	gSENSOR_3M_1296p_MODE
 =
gu8Sís‹ImageMode
)

281 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

283 
gu32FuŒLöesStd
 = (
FRAME_LINES_3M_1296p
 * 30Ë/ 
f32Fps
;

287 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

293 
¥ötf
("NŸ suµ‹t! gu8Sís‹ImageMode:%d, f32Fps:%f\n", 
gu8Sís‹ImageMode
, 
f32Fps
);

297 
	ggu32FuŒLöesStd
 = 
gu32FuŒLöesStd
 > 0xFFFF ? 0xFFFF : gu32FullLinesStd;

299 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

301 
g_°SnsRegsInfo
.
a°I2cD©a
[3].
u32D©a
 = 
gu32FuŒLöesStd
;

305 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = 
gu32FuŒLöesStd
;

308 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

309 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

310 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

311 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

316 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

317 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

319 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

320 
	ggu32FuŒLöes
 = 
u32FuŒLöes
;

322 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

324 
g_°SnsRegsInfo
.
a°I2cD©a
[3].
u32D©a
 = 
gu32FuŒLöes
;

328 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = 
gu32FuŒLöes
;

331 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 2;

337 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

339 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

341 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

343 i‡(
bFú°
)

345 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = 
u32I¡Time
;

346 
	gbFú°
 = 
HI_FALSE
;

350 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = 
u32I¡Time
;

351 
	gbFú°
 = 
HI_TRUE
;

356 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = 
u32I¡Time
;

357 
	gbFú°
 = 
HI_TRUE
;

363 
HI_U32
 
	gagaö_èbÀ
[29] =

369 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

371 
	gi
;

373 i‡(*
	gpu32AgaöLö
 >
agaö_èbÀ
[28])

375 *
pu32AgaöLö
 = 
agaö_èbÀ
[28];

376 *
	gpu32AgaöDb
 = 28;

380 
	gi
 = 1; i < 29; i++)

382 if(*
	gpu32AgaöLö
 < 
	gagaö_èbÀ
[
i
])

384 *
	gpu32AgaöLö
 = 
agaö_èbÀ
[
i
 - 1];

385 *
	gpu32AgaöDb
 = 
i
 - 1;

393 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

395 
HI_U32
 
	gu32AGaöReg
 = 0;

397 if(
	gu32Agaö
 < 16)

399 
	gu32AGaöReg
 = 0x00 + 
u32Agaö
;

401 if(
	gu32Agaö
 < 24)

403 
	gu32AGaöReg
 = 0x10 + (
u32Agaö
 - 16) * 2;

405 if(
	gu32Agaö
 < 28)

407 
	gu32AGaöReg
 = 0x20 + (
u32Agaö
 - 24) * 4;

409 if(
	gu32Agaö
 == 28)

411 
u32AGaöReg
 = 0x30;

414 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = 
u32AGaöReg
;

415 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = 
u32Dgaö
;

421 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

423 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

425 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

429 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

431 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 2Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

437 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

439 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

441 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

442 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

443 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

444 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

445 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

446 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

447 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

454 #ifde‡
INIFILE_CONFIG_MODE


456 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

458 
HI_U8
 
	gi
;

460 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

462 
¥ötf
("nullÖointer when getáwb default value!\n");

466 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

467 
	ggíSís‹Mode
)

470 
WDR_MODE_NONE
:

471 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

473 
	gi
= 0; i < 4; i++)

475 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

478 
	gi
= 0; i < 6; i++)

480 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

482 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

483 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

486 
	gWDR_MODE_2To1_FRAME
:

487 
WDR_MODE_2To1_FRAME_FULL_RATE
:

488 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

489 
	gi
= 0; i < 4; i++)

491 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

494 
	gi
= 0; i < 6; i++)

496 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

499 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

500 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

508 
AWB_CCM_S
 
	gg_°AwbCcm
 =

532 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

541 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

550 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

552 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

554 
¥ötf
("nullÖointer when getáwb default value!\n");

558 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

560 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 5000;

562 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x180;

563 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

564 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

565 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1ca;

567 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 37;

568 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 107;

569 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -111;

570 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 200420;

571 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

572 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -148673;

574 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

576 
	ggíSís‹Mode
)

579 
WDR_MODE_NONE
:

580 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

583 
	gWDR_MODE_2To1_FRAME
:

584 
WDR_MODE_2To1_FRAME_FULL_RATE
:

585 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

595 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

597 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

599 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

606 #ifde‡
INIFILE_CONFIG_MODE


608 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

610 i‡(
	gHI_NULL
 =
p°Def
)

612 
¥ötf
("nullÖointer when get isp default value!\n");

616 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

618 
	ggíSís‹Mode
)

621 
WDR_MODE_NONE
:

622 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

623 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

624 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

625 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

626 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

627 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

630 
	gWDR_MODE_2To1_FRAME
:

631 
WDR_MODE_2To1_FRAME_FULL_RATE
:

632 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

633 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

634 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

635 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

636 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

637 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

638 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

641 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2304;

642 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1536;

649 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

678 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

707 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

733 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

750 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

795 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

840 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

855 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

899 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

916 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

932 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

934 i‡(
	gHI_NULL
 =
p°Def
)

936 
¥ötf
("nullÖointer when get isp default value!\n");

940 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

941 
	ggíSís‹Mode
)

944 
WDR_MODE_NONE
:

945 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

946 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

947 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

948 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

949 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

950 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

951 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

952 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

953 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

955 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

956 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

957 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

958 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

959 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

962 
	gWDR_MODE_2To1_FRAME
:

963 
WDR_MODE_2To1_FRAME_FULL_RATE
:

964 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

965 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

966 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

967 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

968 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

969 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

970 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

971 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

972 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

974 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

975 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

976 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

977 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

978 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

979 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

982 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2304;

983 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1536;

990 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

992 
HI_S32
 
	gi
;

994 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

996 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1001 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1003 
	gi
=0; i<4; i++)

1005 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xA8;

1011 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1014 
HI_U32
 
	gu32FuŒLöes_5Fps
 = 
FRAME_LINES_3M_1536p
;

1015 
HI_U32
 
	gu32MaxExpTime_5Fps
 = 
FRAME_LINES_3M_1536p
 - 2;

1017 i‡(
	gSENSOR_2M_1080p_MODE
 =
gu8Sís‹ImageMode
)

1019 
u32FuŒLöes_5Fps
 = 
FRAME_LINES_2M_1080p
 * 30 / 5;

1021 if(
	gSENSOR_3M_1536p_MODE
 =
gu8Sís‹ImageMode
)

1023 #i‚de‡
HI_FPGA


1024 
u32FuŒLöes_5Fps
 = 
FRAME_LINES_3M_1536p
 * 30 / 5;

1026 
	gu32FuŒLöes_5Fps
 = 
FRAME_LINES_3M_1536p
 * 25 / 5;

1030 if(
	gSENSOR_3M_1296p_MODE
 =
gu8Sís‹ImageMode
)

1032 
u32FuŒLöes_5Fps
 = 
FRAME_LINES_3M_1296p
 * 30 / 5;

1039 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1040 
	gu32MaxExpTime_5Fps
 = 
u32FuŒLöes_5Fps
 - 2;

1042 i‡(
	gbE«bÀ
)

1044 
£ns‹_wrôe_ªgi°î
(
FRAME_LINES
, 
u32FuŒLöes_5Fps
);

1045 
£ns‹_wrôe_ªgi°î
(
EXPOSURE_TIME
, 
u32MaxExpTime_5Fps
);

1046 
£ns‹_wrôe_ªgi°î
(
ANALOG_GAIN
, 0x1300);

1047 
£ns‹_wrôe_ªgi°î
(
DIGITAL_GAIN
, 0x0080);

1051 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

1052 
£ns‹_wrôe_ªgi°î
(
FRAME_LINES
, 
gu32FuŒLöesStd
);

1053 
	gbInô
 = 
HI_FALSE
;

1059 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1061 
	gbInô
 = 
HI_FALSE
;

1063 
	gu8Mode
)

1065 
	gWDR_MODE_NONE
:

1066 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1067 
¥ötf
("linear mode\n");

1070 
	gWDR_MODE_2To1_FRAME
:

1071 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1073 
¥ötf
("2to1 half-rate frame WDR mode\n");

1076 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1077 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1079 
¥ötf
("2to1 full-rate frame WDR mode\n");

1083 
¥ötf
("NOT supportÅhis mode!\n");

1091 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1093 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1095 
	gbInô
 = 
HI_FALSE
;

1097 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1099 
¥ötf
("nullÖointer when set image mode\n");

1103 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1105 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1107 
u8Sís‹ImageMode
 = 
SENSOR_2M_1080p_MODE
;

1111 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1112 
p°Sís‹ImageMode
->
u16Width
,

1113 
p°Sís‹ImageMode
->
u16Height
,

1114 
p°Sís‹ImageMode
->
f32Fps
);

1119 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2048)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1536))

1121 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1123 
u8Sís‹ImageMode
 = 
SENSOR_3M_1536p_MODE
;

1127 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1128 
p°Sís‹ImageMode
->
u16Width
,

1129 
p°Sís‹ImageMode
->
u16Height
,

1130 
p°Sís‹ImageMode
->
f32Fps
);

1135 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2304)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1296))

1137 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1139 
u8Sís‹ImageMode
 = 
SENSOR_3M_1296p_MODE
;

1143 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1144 
p°Sís‹ImageMode
->
u16Width
,

1145 
p°Sís‹ImageMode
->
u16Height
,

1146 
p°Sís‹ImageMode
->
f32Fps
);

1153 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1154 
p°Sís‹ImageMode
->
u16Width
,

1155 
p°Sís‹ImageMode
->
u16Height
,

1156 
p°Sís‹ImageMode
->
f32Fps
);

1160 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1162 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1168 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1174 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1180 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1182 
HI_S32
 
	gi
;

1184 i‡(
	gHI_FALSE
 =
bInô
)

1186 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1187 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1188 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 4;

1190 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1192 
g_°SnsRegsInfo
.
u32RegNum
 += 1;

1194 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1196 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1197 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1198 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1199 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1201 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1202 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
EXPOSURE_TIME
;

1203 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1204 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
ANALOG_GAIN
;

1205 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 0;

1206 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 
DIGITAL_GAIN
;

1207 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 0;

1208 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
FRAME_LINES
;

1210 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1212 
g_°SnsRegsInfo
.
a°I2cD©a
[3].
u8DñayFrmNum
 = 1;

1213 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
EXPOSURE_TIME
;

1214 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 0;

1215 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
FRAME_LINES
;

1218 
	gbInô
 = 
HI_TRUE
;

1222 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1224 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1226 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1230 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1234 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1236 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1237 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gbUpd©e
 = 
HI_TRUE
;

1241 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1243 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1247 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1248 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1253 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1255 
mem£t
(
pcName
, 0, (pcName));

1257 i‡(
	gHI_NULL
 =
pcP©h
)

1259 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1260 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1264 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1266 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1270 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1271 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1277 
HI_VOID
 
£ns‹_globÆ_öô
()

1279 
	ggu8Sís‹ImageMode
 = 
SENSOR_3M_1536p_MODE
;

1280 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1281 
	ggu32FuŒLöesStd
 = 
FRAME_LINES_3M_1536p
;

1282 
	ggu32FuŒLöes
 = 
FRAME_LINES_3M_1536p
;

1283 
	gbInô
 = 
HI_FALSE
;

1284 
	gbSís‹Inô
 = 
HI_FALSE
;

1286 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1287 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1289 #ifde‡
INIFILE_CONFIG_MODE


1290 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1291 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1292 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1294 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1302 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1304 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1306 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1307 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1308 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1309 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1310 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1312 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1313 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1314 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1315 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1324 
£ns‹_ªgi°î_ˇŒback
()

1326 
ISP_DEV
 
	gI•Dev
 = 0;

1327 
HI_S32
 
	gs32Rë
;

1328 
ALG_LIB_S
 
	g°Lib
;

1329 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1330 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1331 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1333 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1334 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
AR0330_ID
, &
°I•Regi°î
);

1335 i‡(
	gs32Rë
)

1337 
¥ötf
("sensorÑegister callback function failed!\n");

1338  
	gs32Rë
;

1341 
	g°Lib
.
	gs32Id
 = 0;

1342 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1343 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1344 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0330_ID
, &
°AeRegi°î
);

1345 i‡(
	gs32Rë
)

1347 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1348  
	gs32Rë
;

1351 
	g°Lib
.
	gs32Id
 = 0;

1352 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1353 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1354 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0330_ID
, &
°AwbRegi°î
);

1355 i‡(
	gs32Rë
)

1357 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1358  
	gs32Rë
;

1364 
£ns‹_uƒegi°î_ˇŒback
()

1366 
ISP_DEV
 
	gI•Dev
 = 0;

1367 
HI_S32
 
	gs32Rë
;

1368 
ALG_LIB_S
 
	g°Lib
;

1370 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
AR0330_ID
);

1371 i‡(
	gs32Rë
)

1373 
¥ötf
("sensor unregister callback function failed!\n");

1374  
	gs32Rë
;

1377 
	g°Lib
.
	gs32Id
 = 0;

1378 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1379 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0330_ID
);

1380 i‡(
	gs32Rë
)

1382 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1383  
	gs32Rë
;

1386 
	g°Lib
.
	gs32Id
 = 0;

1387 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1388 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
AR0330_ID
);

1389 i‡(
	gs32Rë
)

1391 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1392  
	gs32Rë
;

1398 #ifde‡
__˝lu•lus


1399 #i‡
__˝lu•lus


	@component/isp/sensor/aptina_ar0330/ar0330_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~"hi_comm_video.h
"

27 #ifde‡
HI_GPIO_I2C


28 
	~"gpioi2c_ex.h
"

30 
	~"hi_i2c.h
"

33 c⁄° 
	g£ns‹_i2c_addr
 = 0x20;

34 c⁄° 
	g£ns‹_addr_byã
 = 2;

35 c⁄° 
	g£ns‹_d©a_byã
 = 2;

36 
	gg_fd
 = -1;

38 
HI_U8
 
gu8Sís‹ImageMode
;

39 
HI_BOOL
 
bSís‹Inô
;

41 
	$£ns‹_i2c_öô
()

43 if(
g_fd
 >= 0)

47 #ifde‡
HI_GPIO_I2C


48 
ªt
;

50 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

51 if(
g_fd
 < 0)

53 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

57 
ªt
;

59 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

60 if(
g_fd
 < 0)

62 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

66 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

67 i‡(
ªt
 < 0)

69 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

70  
ªt
;

75 
	}
}

77 
	$£ns‹_i2c_exô
()

79 i‡(
g_fd
 >= 0)

81 
	`˛o£
(
g_fd
);

82 
g_fd
 = -1;

86 
	}
}

88 
	$£ns‹_ªad_ªgi°î
(
addr
)

93 
	}
}

95 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

97 #ifde‡
HI_GPIO_I2C


98 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

99 
i2c_d©a
.
ªg_addr
 = 
addr
;

100 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

101 
i2c_d©a
.
d©a
 = data;

102 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

104 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

106 i‡(
ªt
)

108 
	`¥ötf
("GPIO-I2C write faild!\n");

109  
ªt
;

112 
idx
 = 0;

113 
ªt
;

114 
buf
[8];

116 
buf
[
idx
++] = 
addr
 & 0xFF;

117 i‡(
£ns‹_addr_byã
 == 2)

119 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

120 
buf
[
idx
++] = 
addr
 >> 8;

124 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

127 i‡(
ªt
 < 0)

129 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

133 
buf
[
idx
++] = 
d©a
;

134 i‡(
£ns‹_d©a_byã
 == 2)

136 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

137 
buf
[
idx
++] = 
d©a
 >> 8;

141 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

144 i‡(
ªt
)

146 
	`¥ötf
("hi_i2c write faild!\n");

150 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

151 if(
ªt
 < 0)

153 
	`¥ötf
("I2C_WRITEÉrror!\n");

158 
	}
}

160 
	$dñay_ms
(
ms
) {

161 
	`u¶ìp
(
ms
*1000);

162 
	}
}

164 
	$£ns‹_¥og
(* 
rom
)

166 
i
 = 0;

168 
lookup
 = 
rom
[
i
++];

169 
addr
 = (
lookup
 >> 16) & 0xFFFF;

170 
d©a
 = 
lookup
 & 0xFFFF;

171 i‡(
addr
 == 0xFFFE) {

172 
	`dñay_ms
(
d©a
);

173 } i‡(
addr
 == 0xFFFF) {

176 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

179 
	}
}

181 
£ns‹_öô_2M_1080p
();

182 
£ns‹_öô_3M_1536p
();

183 
£ns‹_öô_3M_1296p
();

185 
	$£ns‹_öô
()

187 
	`£ns‹_i2c_öô
();

189 
gu8Sís‹ImageMode
)

193 
	`£ns‹_öô_2M_1080p
();

194 
bSís‹Inô
 = 
HI_TRUE
;

199 
	`£ns‹_öô_3M_1536p
();

200 
bSís‹Inô
 = 
HI_TRUE
;

205 
	`£ns‹_öô_3M_1296p
();

206 
bSís‹Inô
 = 
HI_TRUE
;

211 
	`¥ötf
("Not support!\n");

214 
	}
}

216 
	$£ns‹_exô
()

218 
	`£ns‹_i2c_exô
();

221 
	}
}

223 
	$£ns‹_öô_2M_1080p
()

226 
	`£ns‹_wrôe_ªgi°î
(0x301A,0x0001);

227 
	`dñay_ms
(100);

229 
	`£ns‹_wrôe_ªgi°î
(0x3052,0xA114);

230 
	`£ns‹_wrôe_ªgi°î
(0x304A,0x0070);

231 
	`dñay_ms
(100);

233 
	`£ns‹_wrôe_ªgi°î
(0x31AE,0x0202);

234 
	`£ns‹_wrôe_ªgi°î
(0x301A,0x0058);

235 
	`dñay_ms
(34);

237 
	`£ns‹_wrôe_ªgi°î
(0x3064,0x1802);

238 
	`£ns‹_wrôe_ªgi°î
(0x3078,0x0001);

241 
	`£ns‹_wrôe_ªgi°î
(0x3ED2,0x0146);

242 
	`£ns‹_wrôe_ªgi°î
(0x3EDA,0x88BC);

243 
	`£ns‹_wrôe_ªgi°î
(0x3EDC,0xAA63);

246 
	`£ns‹_wrôe_ªgi°î
(0x3046,0x0000);

247 
	`£ns‹_wrôe_ªgi°î
(0x3048,0x8480);

248 
	`£ns‹_wrôe_ªgi°î
(0x31E0,0x0203);

251 
	`£ns‹_wrôe_ªgi°î
(0x302A,0x0006);

252 
	`£ns‹_wrôe_ªgi°î
(0x302C,0x0002);

253 
	`£ns‹_wrôe_ªgi°î
(0x302e,0x0002);

254 
	`£ns‹_wrôe_ªgi°î
(0x3030,0x0031);

255 
	`£ns‹_wrôe_ªgi°î
(0x3036,0x000c);

256 
	`£ns‹_wrôe_ªgi°î
(0x3038,0x0001);

257 
	`£ns‹_wrôe_ªgi°î
(0x31AC,0x0C0C);

258 
	`£ns‹_wrôe_ªgi°î
(0x31B0,0x002D);

259 
	`£ns‹_wrôe_ªgi°î
(0x31B2,0x0012);

260 
	`£ns‹_wrôe_ªgi°î
(0x31B4,0x3B44);

261 
	`£ns‹_wrôe_ªgi°î
(0x31B6,0x314D);

262 
	`£ns‹_wrôe_ªgi°î
(0x31B8,0x2089);

263 
	`£ns‹_wrôe_ªgi°î
(0x31BA,0x0206);

264 
	`£ns‹_wrôe_ªgi°î
(0x31BC,0x8005);

265 
	`£ns‹_wrôe_ªgi°î
(0x31BE,0x2003);

266 
	`dñay_ms
(10);

269 
	`£ns‹_wrôe_ªgi°î
(0x3004,0x00C6);

270 
	`£ns‹_wrôe_ªgi°î
(0x3008,0x0845);

271 
	`£ns‹_wrôe_ªgi°î
(0x3002,0x00EA);

272 
	`£ns‹_wrôe_ªgi°î
(0x3006,0x0521);

275 
	`£ns‹_wrôe_ªgi°î
(0x30A2,0x0001);

276 
	`£ns‹_wrôe_ªgi°î
(0x30A6,0x0001);

277 
	`£ns‹_wrôe_ªgi°î
(0x3040,0x3000);

278 
	`£ns‹_wrôe_ªgi°î
(0x3ED4,0x8F6C);

279 
	`£ns‹_wrôe_ªgi°î
(0x3ED6,0x66CC);

282 
	`£ns‹_wrôe_ªgi°î
(0x300C,0x04E0);

283 
	`£ns‹_wrôe_ªgi°î
(0x300A,0x051C);

284 
	`£ns‹_wrôe_ªgi°î
(0x3014,0x0000);

285 
	`£ns‹_wrôe_ªgi°î
(0x3012,0x0514);

286 
	`£ns‹_wrôe_ªgi°î
(0x3042,0x0000);

287 
	`£ns‹_wrôe_ªgi°î
(0x30BA,0x002C);

289 
	`dñay_ms
(30);

290 
	`£ns‹_wrôe_ªgi°î
(0x3088,0x80BA);

291 
	`£ns‹_wrôe_ªgi°î
(0x3086,0x0253);

292 
	`£ns‹_wrôe_ªgi°î
(0x301A,0x0004);

294 
	`¥ötf
("Aptina AR0330 sensor 2M-1080p 30fps init success!\n");

295 
	}
}

297 
	$£ns‹_öô_3M_1536p
()

299 #i‚de‡
HI_FPGA


301 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0001);

302 
	`dñay_ms
(100);

304 
	`£ns‹_wrôe_ªgi°î
(0x3052, 0xA114);

305 
	`£ns‹_wrôe_ªgi°î
(0x304A, 0x0070);

306 
	`dñay_ms
(100);

308 
	`£ns‹_wrôe_ªgi°î
(0x31AE, 0x0202);

309 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0058);

310 
	`dñay_ms
(34);

312 
	`£ns‹_wrôe_ªgi°î
(0x3064, 0x1802);

313 
	`£ns‹_wrôe_ªgi°î
(0x3078, 0x0001);

316 
	`£ns‹_wrôe_ªgi°î
(0x3ED2, 0x0146);

317 
	`£ns‹_wrôe_ªgi°î
(0x3EDA, 0x88BC);

318 
	`£ns‹_wrôe_ªgi°î
(0x3EDC, 0xAA63);

321 
	`£ns‹_wrôe_ªgi°î
(0x3046, 0x0000);

322 
	`£ns‹_wrôe_ªgi°î
(0x3048, 0x8480);

323 
	`£ns‹_wrôe_ªgi°î
(0x31E0, 0x0203);

326 
	`£ns‹_wrôe_ªgi°î
(0x302A, 0x0006);

327 
	`£ns‹_wrôe_ªgi°î
(0x302C, 0x0002);

328 
	`£ns‹_wrôe_ªgi°î
(0x302e, 0x0001);

329 
	`£ns‹_wrôe_ªgi°î
(0x3030, 0x0020);

330 
	`£ns‹_wrôe_ªgi°î
(0x3036, 0x000c);

331 
	`£ns‹_wrôe_ªgi°î
(0x3038, 0x0001);

332 
	`£ns‹_wrôe_ªgi°î
(0x31AC, 0x0C0C);

333 
	`£ns‹_wrôe_ªgi°î
(0x31B0, 0x0044);

334 
	`£ns‹_wrôe_ªgi°î
(0x31B2, 0x0029);

335 
	`£ns‹_wrôe_ªgi°î
(0x31B4, 0x1A54);

336 
	`£ns‹_wrôe_ªgi°î
(0x31B6, 0x11D3);

337 
	`£ns‹_wrôe_ªgi°î
(0x31B8, 0x3049);

338 
	`£ns‹_wrôe_ªgi°î
(0x31BA, 0x0208);

339 
	`£ns‹_wrôe_ªgi°î
(0x31BC, 0x0007);

341 
	`dñay_ms
(10);

344 
	`£ns‹_wrôe_ªgi°î
(0x3004, 0x0086);

345 
	`£ns‹_wrôe_ªgi°î
(0x3008, 0x0885);

346 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x0006);

347 
	`£ns‹_wrôe_ªgi°î
(0x3006, 0x0605);

350 
	`£ns‹_wrôe_ªgi°î
(0x30A2, 0x0001);

351 
	`£ns‹_wrôe_ªgi°î
(0x30A6, 0x0001);

352 
	`£ns‹_wrôe_ªgi°î
(0x3040, 0x0000);

353 
	`£ns‹_wrôe_ªgi°î
(0x3ED4, 0x8F6C);

354 
	`£ns‹_wrôe_ªgi°î
(0x3ED6, 0x66CC);

357 
	`£ns‹_wrôe_ªgi°î
(0x300C, 0x04E0);

358 
	`£ns‹_wrôe_ªgi°î
(0x300A, 0x06AD);

359 
	`£ns‹_wrôe_ªgi°î
(0x3014, 0x0000);

360 
	`£ns‹_wrôe_ªgi°î
(0x3012, 0x06AC);

361 
	`£ns‹_wrôe_ªgi°î
(0x3042, 0x0000);

362 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x002C);

365 
	`dñay_ms
(30);

366 
	`£ns‹_wrôe_ªgi°î
(0x3088, 0x80BA);

367 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0253);

368 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0004);

370 
	`¥ötf
("Aptina AR0330 sensor 3M-1536p 30fps init success!\n");

373 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0001);

374 
	`dñay_ms
(100);

376 
	`£ns‹_wrôe_ªgi°î
(0x3052, 0xA114);

377 
	`£ns‹_wrôe_ªgi°î
(0x304A, 0x0070);

378 
	`dñay_ms
(100);

380 
	`£ns‹_wrôe_ªgi°î
(0x31AE, 0x0202);

381 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0058);

382 
	`dñay_ms
(34);

384 
	`£ns‹_wrôe_ªgi°î
(0x3064, 0x1802);

385 
	`£ns‹_wrôe_ªgi°î
(0x3078, 0x0001);

388 
	`£ns‹_wrôe_ªgi°î
(0x3ED2, 0x0146);

389 
	`£ns‹_wrôe_ªgi°î
(0x3EDA, 0x88BC);

390 
	`£ns‹_wrôe_ªgi°î
(0x3EDC, 0xAA63);

393 
	`£ns‹_wrôe_ªgi°î
(0x3046, 0x4038);

394 
	`£ns‹_wrôe_ªgi°î
(0x3048, 0x8480);

395 
	`£ns‹_wrôe_ªgi°î
(0x31E0, 0x0203);

398 
	`£ns‹_wrôe_ªgi°î
(0x302A, 0x0006);

399 
	`£ns‹_wrôe_ªgi°î
(0x302C, 0x0002);

400 
	`£ns‹_wrôe_ªgi°î
(0x302e, 0x0002);

401 
	`£ns‹_wrôe_ªgi°î
(0x3030, 0x0031);

402 
	`£ns‹_wrôe_ªgi°î
(0x3036, 0x000c);

403 
	`£ns‹_wrôe_ªgi°î
(0x3038, 0x0001);

404 
	`£ns‹_wrôe_ªgi°î
(0x31AC, 0x0C0C);

405 
	`£ns‹_wrôe_ªgi°î
(0x31B0, 0x0044);

406 
	`£ns‹_wrôe_ªgi°î
(0x31B2, 0x0029);

407 
	`£ns‹_wrôe_ªgi°î
(0x31B4, 0x1A54);

408 
	`£ns‹_wrôe_ªgi°î
(0x31B6, 0x11D3);

409 
	`£ns‹_wrôe_ªgi°î
(0x31B8, 0x3049);

410 
	`£ns‹_wrôe_ªgi°î
(0x31BA, 0x0208);

411 
	`£ns‹_wrôe_ªgi°î
(0x31BC, 0x0007);

412 
	`£ns‹_wrôe_ªgi°î
(0x31BE, 0x2003);

413 
	`dñay_ms
(10);

416 
	`£ns‹_wrôe_ªgi°î
(0x3004, 0x0086);

417 
	`£ns‹_wrôe_ªgi°î
(0x3008, 0x0885);

418 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x0006);

419 
	`£ns‹_wrôe_ªgi°î
(0x3006, 0x0605);

422 
	`£ns‹_wrôe_ªgi°î
(0x30A2, 0x0001);

423 
	`£ns‹_wrôe_ªgi°î
(0x30A6, 0x0001);

424 
	`£ns‹_wrôe_ªgi°î
(0x3040, 0x0000);

425 
	`£ns‹_wrôe_ªgi°î
(0x3ED4, 0x8F6C);

426 
	`£ns‹_wrôe_ªgi°î
(0x3ED6, 0x66CC);

429 
	`£ns‹_wrôe_ªgi°î
(0x300C, 0x04E0);

430 
	`£ns‹_wrôe_ªgi°î
(0x300A, 0x0622);

431 
	`£ns‹_wrôe_ªgi°î
(0x3014, 0x0000);

432 
	`£ns‹_wrôe_ªgi°î
(0x3012, 0x05DC);

433 
	`£ns‹_wrôe_ªgi°î
(0x3042, 0x0000);

434 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x002C);

436 
	`dñay_ms
(30);

437 
	`£ns‹_wrôe_ªgi°î
(0x3088, 0x80BA);

438 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0253);

439 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0004);

441 
	`¥ötf
("Aptina AR0330 sensor 3M-1536p 25fps init success!\n");

443 
	}
}

445 
	$£ns‹_öô_3M_1296p
()

449 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0001);

450 
	`dñay_ms
(100);

452 
	`£ns‹_wrôe_ªgi°î
(0x3052, 0xA114);

453 
	`£ns‹_wrôe_ªgi°î
(0x304A, 0x0070);

454 
	`dñay_ms
(100);

456 
	`£ns‹_wrôe_ªgi°î
(0x31AE, 0x0202);

457 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0058);

458 
	`dñay_ms
(34);

460 
	`£ns‹_wrôe_ªgi°î
(0x3064, 0x1802);

461 
	`£ns‹_wrôe_ªgi°î
(0x3078, 0x0001);

464 
	`£ns‹_wrôe_ªgi°î
(0x3ED2, 0x0146);

465 
	`£ns‹_wrôe_ªgi°î
(0x3EDA, 0x88BC);

466 
	`£ns‹_wrôe_ªgi°î
(0x3EDC, 0xAA63);

469 
	`£ns‹_wrôe_ªgi°î
(0x3046, 0x0000);

470 
	`£ns‹_wrôe_ªgi°î
(0x3048, 0x8480);

471 
	`£ns‹_wrôe_ªgi°î
(0x31E0, 0x0203);

474 
	`£ns‹_wrôe_ªgi°î
(0x302A, 0x0006);

475 
	`£ns‹_wrôe_ªgi°î
(0x302C, 0x0002);

476 
	`£ns‹_wrôe_ªgi°î
(0x302e, 0x0002);

477 
	`£ns‹_wrôe_ªgi°î
(0x3030, 0x0031);

478 
	`£ns‹_wrôe_ªgi°î
(0x3036, 0x000c);

479 
	`£ns‹_wrôe_ªgi°î
(0x3038, 0x0001);

480 
	`£ns‹_wrôe_ªgi°î
(0x31AC, 0x0C0C);

481 
	`£ns‹_wrôe_ªgi°î
(0x31B0, 0x002D);

482 
	`£ns‹_wrôe_ªgi°î
(0x31B2, 0x0012);

483 
	`£ns‹_wrôe_ªgi°î
(0x31B4, 0x3B44);

484 
	`£ns‹_wrôe_ªgi°î
(0x31B6, 0x314D);

485 
	`£ns‹_wrôe_ªgi°î
(0x31B8, 0x2089);

486 
	`£ns‹_wrôe_ªgi°î
(0x31BA, 0x0206);

487 
	`£ns‹_wrôe_ªgi°î
(0x31BC, 0x8005);

488 
	`£ns‹_wrôe_ªgi°î
(0x31BE, 0x2003);

489 
	`dñay_ms
(10);

492 
	`£ns‹_wrôe_ªgi°î
(0x3004, 0x0006);

493 
	`£ns‹_wrôe_ªgi°î
(0x3008, 0x0905);

494 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x0078);

495 
	`£ns‹_wrôe_ªgi°î
(0x3006, 0x0587);

498 
	`£ns‹_wrôe_ªgi°î
(0x30A2, 0x0001);

499 
	`£ns‹_wrôe_ªgi°î
(0x30A6, 0x0001);

500 
	`£ns‹_wrôe_ªgi°î
(0x3040, 0x0000);

501 
	`£ns‹_wrôe_ªgi°î
(0x3ED4, 0x8F6C);

502 
	`£ns‹_wrôe_ªgi°î
(0x3ED6, 0x66CC);

505 
	`£ns‹_wrôe_ªgi°î
(0x300C, 0x04E0);

506 
	`£ns‹_wrôe_ªgi°î
(0x300A, 0x051C);

507 
	`£ns‹_wrôe_ªgi°î
(0x3014, 0x0000);

508 
	`£ns‹_wrôe_ªgi°î
(0x3012, 0x0514);

509 
	`£ns‹_wrôe_ªgi°î
(0x3042, 0x0000);

510 
	`£ns‹_wrôe_ªgi°î
(0x30BA, 0x002C);

512 
	`dñay_ms
(30);

513 
	`£ns‹_wrôe_ªgi°î
(0x3088, 0x80BA);

514 
	`£ns‹_wrôe_ªgi°î
(0x3086, 0x0253);

515 
	`£ns‹_wrôe_ªgi°î
(0x301A, 0x0004);

517 
	`¥ötf
("Aptina AR0330 sensor 3M-1296p 30fps init success!\n");

518 
	}
}

	@component/isp/sensor/hi_cmoscfg/hi_cmos_cfg.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~"hi_comm_¢s.h
"

5 
	~"hi_´_comm.h
"

6 
	~"hi_awb_comm.h
"

7 
	~"öù¨£r.h
"

9 #ifde‡
__˝lu•lus


10 #i‡
__˝lu•lus


16 #ifde‡
INIFILE_CONFIG_MODE


18 
	#ModeNumMax
 6

	)

19 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[
ModeNumMax
];

20 
AWB_SENSOR_DEFAULT_S
 
	gg_AwbD·
[
ModeNumMax
];

21 
ISP_CMOS_DEFAULT_S
 
	gg_I•D·
[
ModeNumMax
];

23 
di˘i⁄¨y
* 
	gg_di˘i⁄¨y
 = 
NULL
;

24 
	gMAEWeight
[256];

25 
	#ISO_EXPOSURE_LEVEL
 16

	)

28 
	$Weight
(c⁄° *
pcSå
)

30 c⁄° * 
pszVRBegö
 = 
pcSå
;

31 c⁄° * 
pszVREnd
 = 
pszVRBegö
;

32 
Cou¡
 = 0;

33 
Temp
[20];

34 
Mycou¡
 = 0;

35 
Lígth
 = 
	`°æí
(
pcSå
);

36 
ª
;

37 
i
 = 0;

39 
	`mem£t
(
Temp
, 0, 20);

41 (
pszVREnd
 !
NULL
))

43 if((
Mycou¡
 > 
Lígth
)||(Mycount == Length))

47 (*
pszVREnd
 != '|')&&(*pszVREnd != '\0')&&(*pszVREnd != ','))

49 
pszVREnd
++;

50 
Cou¡
++;

51 
Mycou¡
++;

53 
	`mem˝y
(
Temp
, 
pszVRBegö
, 
Cou¡
);

55 
ª
 = ()
	`°πﬁ
(
Temp
, 
NULL
, 0);

56 
MAEWeight
[
i
] = 
ª
;

58 
	`mem£t
(
Temp
, 0, 20);

59 
Cou¡
 = 0;

60 
pszVREnd
++;

61 
pszVRBegö
 = 
pszVREnd
;

62 
Mycou¡
++;

63 
i
++;

66  
i
;

67 
	}
}

70 
HI_S32
 
	$Cmos_cfg_LﬂdFûe
(c⁄° 
HI_CHAR
 *
pcName
)

72 if(
NULL
 !
g_di˘i⁄¨y
)

74 
g_di˘i⁄¨y
 = 
NULL
;

78 
g_di˘i⁄¨y
 = 
	`öù¨£r_lﬂd
(
pcName
);

79 if(
NULL
 =
g_di˘i⁄¨y
)

81 
	`¥ötf
("%†öòlﬂd faûed\n",
pcName
);

82  
HI_FAILURE
;

85  
HI_SUCCESS
;

86 
	}
}

88 
HI_VOID
 
	$Cmos_cfg_FªeDi˘
()

90 if(
NULL
 !
g_di˘i⁄¨y
)

92 
	`öù¨£r_‰ìdi˘
(
g_di˘i⁄¨y
);

94 
g_di˘i⁄¨y
 = 
NULL
;

95 
	}
}

97 
HI_S32
 
	$cmos_lﬂdAE_cfg
()

99 
HI_U8
 
i
;

100 
HI_S32
 
s32Temp
 = 0;

101 
HI_S32
 
AEModeNumbî
 = 0;

102 
HI_CHAR
 
acTempSå
[128];

105 
AEModeNumbî
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, "AE:AEModeNumbî", 
HI_FAILURE
);

106 i‡(
HI_FAILURE
 =
AEModeNumbî
)

108 
	`¥ötf
("AE:AEModeNumber failed\n");

109  
HI_FAILURE
;

112 i‡(
AEModeNumbî
 > 
ModeNumMax
)

114 
	`¥ötf
("notice : Current AEModeNumber isÜarger!!!\n");

115  
HI_FAILURE
;

118 
i
 = 0; i < 
AEModeNumbî
; i++)

121 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:AeCom≥nßti⁄_%d", 
i
);

122 
s32Temp
 = 0;

123 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

124 i‡(
HI_FAILURE
 =
s32Temp
)

126 
	`¥ötf
("AE:AeCom≥nßti⁄_%d faûed\n", 
i
);

127  
HI_FAILURE
;

129 
g_AeD·
[
i
].
u8AeCom≥nßti⁄
 = 
s32Temp
;

132 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MaxI¡TimeT¨gë_%d", 
i
);

133 
s32Temp
 = 0;

134 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

135 i‡(
HI_FAILURE
 =
s32Temp
)

137 
	`¥ötf
("AE:MaxI¡TimeT¨gë_%d faûed\n", 
i
);

138  
HI_FAILURE
;

140 
g_AeD·
[
i
].
u32MaxI¡TimeT¨gë
 = 
s32Temp
;

143 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MöI¡TimeT¨gë_%d", 
i
);

144 
s32Temp
 = 0;

145 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

146 i‡(
HI_FAILURE
 =
s32Temp
)

148 
	`¥ötf
("AE:MöI¡TimeT¨gë_%d faûed\n", 
i
);

149  
HI_FAILURE
;

151 
g_AeD·
[
i
].
u32MöI¡TimeT¨gë
 = 
s32Temp
;

154 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MaxAgaöT¨gë_%d", 
i
);

155 
s32Temp
 = 0;

156 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

157 i‡(
HI_FAILURE
 =
s32Temp
)

159 
	`¥ötf
("AE:MaxAgaöT¨gë_%d faûed\n", 
i
);

160  
HI_FAILURE
;

162 
g_AeD·
[
i
].
u32MaxAgaöT¨gë
 = 
s32Temp
;

165 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MöAgaöT¨gë_%d", 
i
);

166 
s32Temp
 = 0;

167 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

168 i‡(
HI_FAILURE
 =
s32Temp
)

170 
	`¥ötf
("AE:MöAgaöT¨gë_%d faûed\n", 
i
);

171  
HI_FAILURE
;

173 
g_AeD·
[
i
].
u32MöAgaöT¨gë
 = 
s32Temp
;

176 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MaxDgaöT¨gë_%d", 
i
);

177 
s32Temp
 = 0;

178 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

179 i‡(
HI_FAILURE
 =
s32Temp
)

181 
	`¥ötf
("AE:MaxDgaöT¨gë_%d faûed\n", 
i
);

182  
HI_FAILURE
;

184 
g_AeD·
[
i
].
u32MaxDgaöT¨gë
 = 
s32Temp
;

187 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MöDgaöT¨gë_%d", 
i
);

188 
s32Temp
 = 0;

189 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

190 i‡(
HI_FAILURE
 =
s32Temp
)

192 
	`¥ötf
("AE:MöDgaöT¨gë_%d faûed\n", 
i
);

193  
HI_FAILURE
;

195 
g_AeD·
[
i
].
u32MöDgaöT¨gë
 = 
s32Temp
;

198 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:ISPDgaöShi·_%d", 
i
);

199 
s32Temp
 = 0;

200 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

201 i‡(
HI_FAILURE
 =
s32Temp
)

203 
	`¥ötf
("AE:ISPDgaöShi·_%d faûed\n", 
i
);

204  
HI_FAILURE
;

206 
g_AeD·
[
i
].
u32ISPDgaöShi·
 = 
s32Temp
;

209 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MaxISPDgaöT¨gë_%d", 
i
);

210 
s32Temp
 = 0;

211 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

212 i‡(
HI_FAILURE
 =
s32Temp
)

214 
	`¥ötf
("AE:MaxISPDgaöT¨gë_%d faûed\n", 
i
);

215  
HI_FAILURE
;

217 
g_AeD·
[
i
].
u32MaxISPDgaöT¨gë
 = 
s32Temp
;

220 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AE:MöISPDgaöT¨gë_%d", 
i
);

221 
s32Temp
 = 0;

222 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

223 i‡(
HI_FAILURE
 =
s32Temp
)

225 
	`¥ötf
("AE:MöISPDgaöT¨gë_%d faûed\n", 
i
);

226  
HI_FAILURE
;

228 
g_AeD·
[
i
].
u32MöISPDgaöT¨gë
 = 
s32Temp
;

232  
HI_SUCCESS
;

233 
	}
}

236 
HI_S32
 
	$cmos_lﬂdAWB_cfg
()

238 
HI_U8
 
i
,
j
;

239 
HI_S32
 
s32Temp
 = 0;

240 
HI_S32
 
AWBModeNumbî
 = 0;

241 
HI_CHAR
 *
pcTempSå
 = 
NULL
;

242 
HI_CHAR
 
acTempSå
[128];

243 
HI_S32
 
FödKey
 = 0;

246 
AWBModeNumbî
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, "AWB:AWBModeNumbî", 
HI_FAILURE
);

247 i‡(
HI_FAILURE
 =
AWBModeNumbî
)

249 
	`¥ötf
("AWB:AWBModeNumber failed\n");

250  
HI_FAILURE
;

253 i‡(
AWBModeNumbî
 > 
ModeNumMax
)

255 
	`¥ötf
("notice : Current AWBModeNumber isÜarger!!!\n");

256  
HI_FAILURE
;

259 
i
 = 0; i < 
AWBModeNumbî
; i++)

262 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:HighCﬁ‹Temp_%d", 
i
);

263 
s32Temp
 = 0;

264 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

265 i‡(
HI_FAILURE
 =
s32Temp
)

267 
	`¥ötf
("AWB:HighCﬁ‹Temp_%d faûed\n", 
i
);

268  
HI_FAILURE
;

270 
g_AwbD·
[
i
].
°Ccm
.
u16HighCﬁ‹Temp
 = 
s32Temp
;

273 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:HighCCM_%d", 
i
);

274 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

275 if(
NULL
 =
pcTempSå
)

277 
	`¥ötf
("AWB:HighCCM_%dÉº‹\n", 
i
);

278  
HI_FAILURE
;

281 
s32Temp
 = 
	`Weight
(
pcTempSå
);

282 
j
 = 0; j < 9; j++)

284 
g_AwbD·
[
i
].
°Ccm
.
au16HighCCM
[
j
] = 
MAEWeight
[j];

288 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:MidCﬁ‹Temp_%d", 
i
);

289 
s32Temp
 = 0;

290 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

291 i‡(
HI_FAILURE
 =
s32Temp
)

293 
	`¥ötf
("AWB:MidCﬁ‹Temp_%d faûed\n", 
i
);

294  
HI_FAILURE
;

296 
g_AwbD·
[
i
].
°Ccm
.
u16MidCﬁ‹Temp
 = 
s32Temp
;

299 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:MidCCM_%d", 
i
);

300 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

301 if(
NULL
 =
pcTempSå
)

303 
	`¥ötf
("AWB:MidCCM_%dÉº‹\n", 
i
);

304  
HI_FAILURE
;

307 
s32Temp
 = 
	`Weight
(
pcTempSå
);

308 
j
 = 0; j < 9; j++)

310 
g_AwbD·
[
i
].
°Ccm
.
au16MidCCM
[
j
] = 
MAEWeight
[j];

314 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:LowCﬁ‹Temp_%d", 
i
);

315 
s32Temp
 = 0;

316 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

317 i‡(
HI_FAILURE
 =
s32Temp
)

319 
	`¥ötf
("AWB:LowCﬁ‹Temp_%d faûed\n", 
i
);

320  
HI_FAILURE
;

322 
g_AwbD·
[
i
].
°Ccm
.
u16LowCﬁ‹Temp
 = 
s32Temp
;

325 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:LowCCM_%d", 
i
);

326 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

327 if(
NULL
 =
pcTempSå
)

329 
	`¥ötf
("AWB:LowCCM_%dÉº‹\n", 
i
);

330  
HI_FAILURE
;

333 
s32Temp
 = 
	`Weight
(
pcTempSå
);

334 
j
 = 0; j < 9; j++)

336 
g_AwbD·
[
i
].
°Ccm
.
au16LowCCM
[
j
] = 
MAEWeight
[j];

340 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:WbRefTemp_%d", 
i
);

341 
s32Temp
 = 0;

342 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

343 i‡(
HI_FAILURE
 =
s32Temp
)

345 
	`¥ötf
("AWB:WbRefTemp_%d faûed\n", 
i
);

346  
HI_FAILURE
;

348 
g_AwbD·
[
i
].
u16WbRefTemp
 = 
s32Temp
;

351 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:GaöOff£t_%d", 
i
);

352 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

353 if(
NULL
 =
pcTempSå
)

355 
	`¥ötf
("AWB:GaöOff£t_%dÉº‹\n", 
i
);

356  
HI_FAILURE
;

359 
s32Temp
 = 
	`Weight
(
pcTempSå
);

360 
j
 = 0; j < 4; j++)

362 
g_AwbD·
[
i
].
au16GaöOff£t
[
j
] = 
MAEWeight
[j];

366 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:WbP¨a_%d", 
i
);

367 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

368 if(
NULL
 =
pcTempSå
)

370 
	`¥ötf
("AWB:WbP¨a_%dÉº‹\n", 
i
);

371  
HI_FAILURE
;

374 
s32Temp
 = 
	`Weight
(
pcTempSå
);

375 
j
 = 0; j < 6; j++)

377 
g_AwbD·
[
i
].
as32WbP¨a
[
j
] = 
MAEWeight
[j];

381 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:S©VÆid_%d", 
i
);

382 
FödKey
 = 0;

383 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

384 if(1 =
FödKey
)

386 
s32Temp
 = 0;

387 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

388 i‡(
HI_FAILURE
 =
s32Temp
)

390 
	`¥ötf
("AWB:S©VÆid_%d faûed\n", 
i
);

391  
HI_FAILURE
;

393 
g_AwbD·
[
i
].
°AgcTbl
.
bVÆid
 = 
s32Temp
;

396 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "AWB:S©uøti⁄_%d", 
i
);

397 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

398 if(
NULL
 =
pcTempSå
)

400 
	`¥ötf
("AWB:S©uøti⁄_%dÉº‹\n", 
i
);

401  
HI_FAILURE
;

404 
s32Temp
 = 
	`Weight
(
pcTempSå
);

405 
j
 = 0;j < 
ISO_EXPOSURE_LEVEL
; j++)

407 
g_AwbD·
[
i
].
°AgcTbl
.
au8S©uøti⁄
[
j
] = 
MAEWeight
[j];

414  
HI_SUCCESS
;

415 
	}
}

418 
HI_S32
 
	$cmos_lﬂdISP_cfg
()

420 
HI_U8
 
i
,
j
;

421 
HI_S32
 
s32Temp
 = 0;

422 
HI_S32
 
s32Off£t
 = 0;

423 
HI_S32
 
ISPModeNumbî
 = 0;

424 
HI_CHAR
 *
pcTempSå
 = 
NULL
;

425 
HI_CHAR
 
acTempSå
[128];

426 
HI_S32
 
FödKey
 = 0;

429 
ISPModeNumbî
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, "ISP:ISPModeNumbî", 
HI_FAILURE
);

430 i‡(
HI_FAILURE
 =
ISPModeNumbî
)

432 
	`¥ötf
("ISP:ISPModeNumber failed\n");

433  
HI_FAILURE
;

436 i‡(
ISPModeNumbî
 > 
ModeNumMax
)

438 
	`¥ötf
("notice : Current ISPModeNumber isÜarger!!!\n");

439  
HI_FAILURE
;

442 
i
 = 0; i < 
ISPModeNumbî
; i++)

445 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:AgcVÆid_%d", 
i
);

446 
FödKey
 = 0;

447 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

448 if(1 =
FödKey
)

450 
s32Temp
 = 0;

451 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

452 i‡(
HI_FAILURE
 =
s32Temp
)

454 
	`¥ötf
("ISP:AgcVÆid_%d faûed\n", 
i
);

455  
HI_FAILURE
;

457 
g_I•D·
[
i
].
°AgcTbl
.
bVÆid
 = 
s32Temp
;

460 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:Sh¨≥nA…D_%d", 
i
);

461 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

462 if(
NULL
 =
pcTempSå
)

464 
	`¥ötf
("ISP:Sh¨≥nA…D_%dÉº‹\n", 
i
);

465  
HI_FAILURE
;

468 
s32Temp
 = 
	`Weight
(
pcTempSå
);

469 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

471 
g_I•D·
[
i
].
°AgcTbl
.
au8Sh¨≥nA…D
[
j
] = 
MAEWeight
[j];

475 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:Sh¨≥nA…Ud_%d", 
i
);

476 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

477 if(
NULL
 =
pcTempSå
)

479 
	`¥ötf
("ISP:Sh¨≥nA…Ud_%dÉº‹\n", 
i
);

480  
HI_FAILURE
;

483 
s32Temp
 = 
	`Weight
(
pcTempSå
);

484 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

486 
g_I•D·
[
i
].
°AgcTbl
.
au8Sh¨≥nA…Ud
[
j
] = 
MAEWeight
[j];

490 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:SƒThªsh_%d", 
i
);

491 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

492 if(
NULL
 =
pcTempSå
)

494 
	`¥ötf
("ISP:SƒThªsh_%dÉº‹\n", 
i
);

495  
HI_FAILURE
;

498 
s32Temp
 = 
	`Weight
(
pcTempSå
);

499 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

501 
g_I•D·
[
i
].
°AgcTbl
.
au8SƒThªsh
[
j
] = 
MAEWeight
[j];

505 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:DemoßicLumThªsh_%d", 
i
);

506 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

507 if(
NULL
 =
pcTempSå
)

509 
	`¥ötf
("ISP:DemoßicLumThªsh_%dÉº‹\n", 
i
);

510  
HI_FAILURE
;

513 
s32Temp
 = 
	`Weight
(
pcTempSå
);

514 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

516 
g_I•D·
[
i
].
°AgcTbl
.
au8DemoßicLumThªsh
[
j
] = 
MAEWeight
[j];

520 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:DemoßicNpOff£t_%d", 
i
);

521 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

522 if(
NULL
 =
pcTempSå
)

524 
	`¥ötf
("ISP:DemoßicNpOff£t_%dÉº‹\n", 
i
);

525  
HI_FAILURE
;

528 
s32Temp
 = 
	`Weight
(
pcTempSå
);

529 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

531 
g_I•D·
[
i
].
°AgcTbl
.
au8DemoßicNpOff£t
[
j
] = 
MAEWeight
[j];

535 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:GeSåígth_%d", 
i
);

536 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

537 if(
NULL
 =
pcTempSå
)

539 
	`¥ötf
("ISP:GeSåígth_%dÉº‹\n", 
i
);

540  
HI_FAILURE
;

543 
s32Temp
 = 
	`Weight
(
pcTempSå
);

544 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

546 
g_I•D·
[
i
].
°AgcTbl
.
au8GeSåígth
[
j
] = 
MAEWeight
[j];

550 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:Sh¨≥nRGB_%d", 
i
);

551 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

552 if(
NULL
 =
pcTempSå
)

554 
	`¥ötf
("ISP:Sh¨≥nRGB_%dÉº‹\n", 
i
);

555  
HI_FAILURE
;

558 
s32Temp
 = 
	`Weight
(
pcTempSå
);

559 
j
 = 0; j < 
ISO_EXPOSURE_LEVEL
; j++)

561 
g_I•D·
[
i
].
°AgcTbl
.
au8Sh¨≥nRGB
[
j
] = 
MAEWeight
[j];

566 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:WeightVÆid_%d", 
i
);

567 
FödKey
 = 0;

568 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

569 if(1 =
FödKey
)

571 
s32Temp
 = 0;

572 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

573 i‡(
HI_FAILURE
 =
s32Temp
)

575 
	`¥ötf
("ISP:WeightVÆid_%d faûed\n", 
i
);

576  
HI_FAILURE
;

578 
g_I•D·
[
i
].
°Noi£Tbl
.
bVÆid
 = 
s32Temp
;

581 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:Noi£ProfûeWeight_%d", 
i
);

582 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

583 if(
NULL
 =
pcTempSå
)

585 
	`¥ötf
("ISP:Noi£ProfûeWeight_%dÉº‹\n", 
i
);

586  
HI_FAILURE
;

589 
s32Temp
 = 
	`Weight
(
pcTempSå
);

590 
j
 = 0; j < 128; j++)

592 
g_I•D·
[
i
].
°Noi£Tbl
.
au8Noi£ProfûeWeightLut
[
j
] = 
MAEWeight
[j];

596 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:DemoßicWeight_%d", 
i
);

597 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

598 if(
NULL
 =
pcTempSå
)

600 
	`¥ötf
("ISP:DemoßicWeight_%dÉº‹\n", 
i
);

601  
HI_FAILURE
;

604 
s32Temp
 = 
	`Weight
(
pcTempSå
);

605 
j
 = 0; j < 128; j++)

607 
g_I•D·
[
i
].
°Noi£Tbl
.
au8DemoßicWeightLut
[
j
] = 
MAEWeight
[j];

613 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:demoßicVÆid_%d", 
i
);

614 
FödKey
 = 0;

615 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

616 if(1 =
FödKey
)

618 
s32Temp
 = 0;

619 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

620 i‡(
HI_FAILURE
 =
s32Temp
)

622 
	`¥ötf
("ISP:demoßicVÆid_%d faûed\n", 
i
);

623  
HI_FAILURE
;

625 
g_I•D·
[
i
].
°Demoßic
.
bVÆid
 = 
s32Temp
;

628 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:VhSl›e_%d", 
i
);

629 
s32Temp
 = 0;

630 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

631 i‡(
HI_FAILURE
 =
s32Temp
)

633 
	`¥ötf
("ISP:VhSl›e_%d faûed\n", 
i
);

634  
HI_FAILURE
;

636 
g_I•D·
[
i
].
°Demoßic
.
u8VhSl›e
 = 
s32Temp
;

639 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:AaSl›e_%d", 
i
);

640 
s32Temp
 = 0;

641 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

642 i‡(
HI_FAILURE
 =
s32Temp
)

644 
	`¥ötf
("ISP:AaSl›e_%d faûed\n", 
i
);

645  
HI_FAILURE
;

647 
g_I•D·
[
i
].
°Demoßic
.
u8AaSl›e
 = 
s32Temp
;

650 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:VaSl›e_%d", 
i
);

651 
s32Temp
 = 0;

652 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

653 i‡(
HI_FAILURE
 =
s32Temp
)

655 
	`¥ötf
("ISP:VaSl›e_%d faûed\n", 
i
);

656  
HI_FAILURE
;

658 
g_I•D·
[
i
].
°Demoßic
.
u8VaSl›e
 = 
s32Temp
;

661 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:UuSl›e_%d", 
i
);

662 
s32Temp
 = 0;

663 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

664 i‡(
HI_FAILURE
 =
s32Temp
)

666 
	`¥ötf
("ISP:UuSl›e_%d faûed\n", 
i
);

667  
HI_FAILURE
;

669 
g_I•D·
[
i
].
°Demoßic
.
u8UuSl›e
 = 
s32Temp
;

672 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:S©Sl›e_%d", 
i
);

673 
s32Temp
 = 0;

674 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

675 i‡(
HI_FAILURE
 =
s32Temp
)

677 
	`¥ötf
("ISP:S©Sl›e_%d faûed\n", 
i
);

678  
HI_FAILURE
;

680 
g_I•D·
[
i
].
°Demoßic
.
u8S©Sl›e
 = 
s32Temp
;

683 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:AcSl›e_%d", 
i
);

684 
s32Temp
 = 0;

685 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

686 i‡(
HI_FAILURE
 =
s32Temp
)

688 
	`¥ötf
("ISP:AcSl›e_%d faûed\n", 
i
);

689  
HI_FAILURE
;

691 
g_I•D·
[
i
].
°Demoßic
.
u8AcSl›e
 = 
s32Temp
;

694 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:FcSl›e_%d", 
i
);

695 
s32Temp
 = 0;

696 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

697 i‡(
HI_FAILURE
 =
s32Temp
)

699 
	`¥ötf
("ISP:FcSl›e_%d faûed\n", 
i
);

700  
HI_FAILURE
;

702 
g_I•D·
[
i
].
°Demoßic
.
u8FcSl›e
 = 
s32Temp
;

705 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:VhThªsh_%d", 
i
);

706 
s32Temp
 = 0;

707 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

708 i‡(
HI_FAILURE
 =
s32Temp
)

710 
	`¥ötf
("ISP:VhThªsh_%d faûed\n", 
i
);

711  
HI_FAILURE
;

713 
g_I•D·
[
i
].
°Demoßic
.
u16VhThªsh
 = 
s32Temp
;

716 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:AaThªsh_%d", 
i
);

717 
s32Temp
 = 0;

718 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

719 i‡(
HI_FAILURE
 =
s32Temp
)

721 
	`¥ötf
("ISP:AaThªsh_%d faûed\n", 
i
);

722  
HI_FAILURE
;

724 
g_I•D·
[
i
].
°Demoßic
.
u16AaThªsh
 = 
s32Temp
;

727 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:VaThªsh_%d", 
i
);

728 
s32Temp
 = 0;

729 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

730 i‡(
HI_FAILURE
 =
s32Temp
)

732 
	`¥ötf
("ISP:VaThªsh_%d faûed\n", 
i
);

733  
HI_FAILURE
;

735 
g_I•D·
[
i
].
°Demoßic
.
u16VaThªsh
 = 
s32Temp
;

738 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:UuThªsh_%d", 
i
);

739 
s32Temp
 = 0;

740 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

741 i‡(
HI_FAILURE
 =
s32Temp
)

743 
	`¥ötf
("ISP:UuThªsh_%d faûed\n", 
i
);

744  
HI_FAILURE
;

746 
g_I•D·
[
i
].
°Demoßic
.
u16UuThªsh
 = 
s32Temp
;

749 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:S©Thªsh_%d", 
i
);

750 
s32Temp
 = 0;

751 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

752 i‡(
HI_FAILURE
 =
s32Temp
)

754 
	`¥ötf
("ISP:S©Thªsh_%d faûed\n", 
i
);

755  
HI_FAILURE
;

757 
g_I•D·
[
i
].
°Demoßic
.
u16S©Thªsh
 = 
s32Temp
;

760 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:AcThªsh_%d", 
i
);

761 
s32Temp
 = 0;

762 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

763 i‡(
HI_FAILURE
 =
s32Temp
)

765 
	`¥ötf
("ISP:AcThªsh_%d faûed\n", 
i
);

766  
HI_FAILURE
;

768 
g_I•D·
[
i
].
°Demoßic
.
u16AcThªsh
 = 
s32Temp
;

773 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gammaRGBVÆid_%d", 
i
);

774 
FödKey
 = 0;

775 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

776 if(1 =
FödKey
)

778 
s32Temp
 = 0;

779 
s32Off£t
 = 0;

780 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

781 i‡(
HI_FAILURE
 =
s32Temp
)

783 
	`¥ötf
("ISP:gammaRGBVÆid_%d faûed\n", 
i
);

784  
HI_FAILURE
;

786 
g_I•D·
[
i
].
°Gamma
.
bVÆid
 = 
s32Temp
;

789 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gammaRGB0_%d", 
i
);

790 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

791 if(
NULL
 =
pcTempSå
)

793 
	`¥ötf
("ISP:gammaRGB0_%dÉº‹\n", 
i
);

794  
HI_FAILURE
;

797 
s32Temp
 = 
	`Weight
(
pcTempSå
);

798 
j
 = 0; j < 
s32Temp
; j++)

800 
g_I•D·
[
i
].
°Gamma
.
au16Gamma
[
j
] = 
MAEWeight
[j];

802 
s32Off£t
 +
s32Temp
;

805 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gammaRGB1_%d", 
i
);

806 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

807 if(
NULL
 =
pcTempSå
)

809 
	`¥ötf
("ISP:gammaRGB1_%dÉº‹\n", 
i
);

810  
HI_FAILURE
;

813 
s32Temp
 = 
	`Weight
(
pcTempSå
);

814 
j
 = 0; j < 
s32Temp
; j++)

816 
g_I•D·
[
i
].
°Gamma
.
au16Gamma
[
s32Off£t
 + 
j
] = 
MAEWeight
[j];

818 
s32Off£t
 +
s32Temp
;

821 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gammaRGB2_%d", 
i
);

822 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

823 if(
NULL
 =
pcTempSå
)

825 
	`¥ötf
("ISP:gammaRGB2_%dÉº‹\n", 
i
);

826  
HI_FAILURE
;

829 
s32Temp
 = 
	`Weight
(
pcTempSå
);

830 
j
 = 0; j < 
s32Temp
; j++)

832 
g_I•D·
[
i
].
°Gamma
.
au16Gamma
[
s32Off£t
 + 
j
] = 
MAEWeight
[j];

837 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gamma„vÆid_%d", 
i
);

838 
FödKey
 = 0;

839 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

840 if(1 =
FödKey
)

842 
s32Temp
 = 0;

843 
s32Off£t
 = 0;

844 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

845 i‡(
HI_FAILURE
 =
s32Temp
)

847 
	`¥ötf
("ISP:gamma„vÆid_%d faûed\n", 
i
);

848  
HI_FAILURE
;

850 
g_I•D·
[
i
].
°Gamma„
.
bVÆid
 = 
s32Temp
;

854 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gamma„0_%d", 
i
);

855 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

856 i‡(
NULL
 =
pcTempSå
)

858 
	`¥ötf
("ISP:gamma„0_%dÉº‹\n", 
i
);

859  
HI_FAILURE
;

862 
s32Temp
 = 0;

863 
s32Temp
 = 
	`Weight
(
pcTempSå
);

864 
j
 = 0; j < 
s32Temp
; j++)

866 
g_I•D·
[
i
].
°Gamma„
.
au16Gamma„0
[
j
] = 
MAEWeight
[j];

870 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gamma„1.0_%d", 
i
);

871 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

872 if(
NULL
 =
pcTempSå
)

874 
	`¥ötf
("ISP:gamma„1.0_%dÉº‹\n", 
i
);

875  
HI_FAILURE
;

878 
s32Temp
 = 
	`Weight
(
pcTempSå
);

879 
j
 = 0; j < 
s32Temp
; j++)

881 
g_I•D·
[
i
].
°Gamma„
.
au16Gamma„1
[
j
] = 
MAEWeight
[j];

883 
s32Off£t
 +
s32Temp
;

886 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gamma„1.1_%d", 
i
);

887 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

888 if(
NULL
 =
pcTempSå
)

890 
	`¥ötf
("ISP:gamma„1.1_%dÉº‹\n", 
i
);

891  
HI_FAILURE
;

894 
s32Temp
 = 
	`Weight
(
pcTempSå
);

895 
j
 = 0; j < 
s32Temp
; j++)

897 
g_I•D·
[
i
].
°Gamma„
.
au16Gamma„1
[
s32Off£t
 + 
j
] = 
MAEWeight
[j];

899 
s32Off£t
 +
s32Temp
;

902 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:gamma„1.2_%d", 
i
);

903 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

904 if(
NULL
 =
pcTempSå
)

906 
	`¥ötf
("ISP:gamma„1.2_%dÉº‹\n", 
i
);

907  
HI_FAILURE
;

910 
s32Temp
 = 
	`Weight
(
pcTempSå
);

911 
j
 = 0; j < 
s32Temp
; j++)

913 
g_I•D·
[
i
].
°Gamma„
.
au16Gamma„1
[
s32Off£t
 + 
j
] = 
MAEWeight
[j];

918 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:RGBsh¨≥nLutVÆid_%d", 
i
);

919 
FödKey
 = 0;

920 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

921 if(1 =
FödKey
)

923 
s32Temp
 = 0;

924 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

925 i‡(
HI_FAILURE
 =
s32Temp
)

927 
	`¥ötf
("ISP:RGBsh¨≥nLutVÆid_%d faûed\n", 
i
);

928  
HI_FAILURE
;

930 
g_I•D·
[
i
].
°RgbSh¨≥n
.
bVÆid
 = 
s32Temp
;

933 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:LutC‹e_%d", 
i
);

934 
s32Temp
 = 0;

935 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

936 i‡(
HI_FAILURE
 =
s32Temp
)

938 
	`¥ötf
("ISP:LutC‹e_%d faûed\n", 
i
);

939  
HI_FAILURE
;

941 
g_I•D·
[
i
].
°RgbSh¨≥n
.
u8LutC‹e
 = 
s32Temp
;

944 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:LutSåígth_%d", 
i
);

945 
s32Temp
 = 0;

946 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

947 i‡(
HI_FAILURE
 =
s32Temp
)

949 
	`¥ötf
("ISP:LutSåígth_%d faûed\n", 
i
);

950  
HI_FAILURE
;

952 
g_I•D·
[
i
].
°RgbSh¨≥n
.
u8LutSåígth
 = 
s32Temp
;

955 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:LutMagnôude_%d", 
i
);

956 
s32Temp
 = 0;

957 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

958 i‡(
HI_FAILURE
 =
s32Temp
)

960 
	`¥ötf
("ISP:LutMagnôude_%d faûed\n", 
i
);

961  
HI_FAILURE
;

963 
g_I•D·
[
i
].
°RgbSh¨≥n
.
u8LutMagnôude
 = 
s32Temp
;

968 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:DrcE«bÀ_%d", 
i
);

969 
FödKey
 = 0;

970 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

971 if(1 =
FödKey
)

973 
s32Temp
 = 0;

974 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

975 i‡(
HI_FAILURE
 =
s32Temp
)

977 
	`¥ötf
("ISP:DrcE«bÀ_%d faûed\n", 
i
);

978  
HI_FAILURE
;

980 
g_I•D·
[
i
].
°Drc
.
bE«bÀ
 = 
s32Temp
;

983 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:BœckLevñ_%d", 
i
);

984 
s32Temp
 = 0;

985 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

986 i‡(
HI_FAILURE
 =
s32Temp
)

988 
	`¥ötf
("ISP:BœckLevñ_%d faûed\n", 
i
);

989  
HI_FAILURE
;

991 
g_I•D·
[
i
].
°Drc
.
u32BœckLevñ
 = 
s32Temp
;

994 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:WhôeLevñ_%d", 
i
);

995 
s32Temp
 = 0;

996 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

997 i‡(
HI_FAILURE
 =
s32Temp
)

999 
	`¥ötf
("ISP:WhôeLevñ_%d faûed\n", 
i
);

1000  
HI_FAILURE
;

1002 
g_I•D·
[
i
].
°Drc
.
u32WhôeLevñ
 = 
s32Temp
;

1005 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:Sl›eMax_%d", 
i
);

1006 
s32Temp
 = 0;

1007 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1008 i‡(
HI_FAILURE
 =
s32Temp
)

1010 
	`¥ötf
("ISP:Sl›eMax_%d faûed\n", 
i
);

1011  
HI_FAILURE
;

1013 
g_I•D·
[
i
].
°Drc
.
u32Sl›eMax
 = 
s32Temp
;

1016 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:Sl›eMö_%d", 
i
);

1017 
s32Temp
 = 0;

1018 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1019 i‡(
HI_FAILURE
 =
s32Temp
)

1021 
	`¥ötf
("ISP:Sl›eMö_%d faûed\n", 
i
);

1022  
HI_FAILURE
;

1024 
g_I•D·
[
i
].
°Drc
.
u32Sl›eMö
 = 
s32Temp
;

1027 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:V¨ün˚S∑˚_%d", 
i
);

1028 
s32Temp
 = 0;

1029 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1030 i‡(
HI_FAILURE
 =
s32Temp
)

1032 
	`¥ötf
("ISP:V¨ün˚S∑˚_%d faûed\n", 
i
);

1033  
HI_FAILURE
;

1035 
g_I•D·
[
i
].
°Drc
.
u32V¨ün˚S∑˚
 = 
s32Temp
;

1038 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:V¨ün˚I¡ísôy_%d", 
i
);

1039 
s32Temp
 = 0;

1040 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1041 i‡(
HI_FAILURE
 =
s32Temp
)

1043 
	`¥ötf
("ISP:V¨ün˚I¡ísôy_%d faûed\n", 
i
);

1044  
HI_FAILURE
;

1046 
g_I•D·
[
i
].
°Drc
.
u32V¨ün˚I¡ísôy
 = 
s32Temp
;

1051 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:ShadögVÆid_%d", 
i
);

1052 
FödKey
 = 0;

1053 
FödKey
 = 
	`öù¨£r_föd_íåy
(
g_di˘i⁄¨y
, 
acTempSå
);

1054 if(1 =
FödKey
)

1056 
s32Temp
 = 0;

1057 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1058 i‡(
HI_FAILURE
 =
s32Temp
)

1060 
	`¥ötf
("ISP:ShadögVÆid_%d faûed\n", 
i
);

1061  
HI_FAILURE
;

1063 
g_I•D·
[
i
].
°Shadög
.
bVÆid
 = 
s32Temp
;

1066 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:RCíãrX_%d", 
i
);

1067 
s32Temp
 = 0;

1068 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1069 i‡(
HI_FAILURE
 =
s32Temp
)

1071 
	`¥ötf
("ISP:RCíãrX_%d faûed\n", 
i
);

1072  
HI_FAILURE
;

1074 
g_I•D·
[
i
].
°Shadög
.
u16RCíãrX
 = 
s32Temp
;

1077 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:RCíãrY_%d", 
i
);

1078 
s32Temp
 = 0;

1079 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1080 i‡(
HI_FAILURE
 =
s32Temp
)

1082 
	`¥ötf
("ISP:RCíãrY_%d faûed\n", 
i
);

1083  
HI_FAILURE
;

1085 
g_I•D·
[
i
].
°Shadög
.
u16RCíãrY
 = 
s32Temp
;

1088 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:GCíãrX_%d", 
i
);

1089 
s32Temp
 = 0;

1090 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1091 i‡(
HI_FAILURE
 =
s32Temp
)

1093 
	`¥ötf
("ISP:GCíãrX_%d faûed\n", 
i
);

1094  
HI_FAILURE
;

1096 
g_I•D·
[
i
].
°Shadög
.
u16GCíãrX
 = 
s32Temp
;

1099 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:GCíãrY_%d", 
i
);

1100 
s32Temp
 = 0;

1101 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1102 i‡(
HI_FAILURE
 =
s32Temp
)

1104 
	`¥ötf
("ISP:GCíãrY_%d faûed\n", 
i
);

1105  
HI_FAILURE
;

1107 
g_I•D·
[
i
].
°Shadög
.
u16GCíãrY
 = 
s32Temp
;

1110 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:BCíãrX_%d", 
i
);

1111 
s32Temp
 = 0;

1112 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1113 i‡(
HI_FAILURE
 =
s32Temp
)

1115 
	`¥ötf
("ISP:BCíãrX_%d faûed\n", 
i
);

1116  
HI_FAILURE
;

1118 
g_I•D·
[
i
].
°Shadög
.
u16BCíãrX
 = 
s32Temp
;

1121 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:BCíãrY_%d", 
i
);

1122 
s32Temp
 = 0;

1123 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1124 i‡(
HI_FAILURE
 =
s32Temp
)

1126 
	`¥ötf
("ISP:BCíãrY_%d faûed\n", 
i
);

1127  
HI_FAILURE
;

1129 
g_I•D·
[
i
].
°Shadög
.
u16BCíãrY
 = 
s32Temp
;

1132 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:TblNodeNum_%d", 
i
);

1133 
s32Temp
 = 0;

1134 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1135 i‡(
HI_FAILURE
 =
s32Temp
)

1137 
	`¥ötf
("ISP:TblNodeNum_%d faûed\n", 
i
);

1138  
HI_FAILURE
;

1140 
g_I•D·
[
i
].
°Shadög
.
u16TblNodeNum
 = 
s32Temp
;

1143 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:RShadögTbl_%d", 
i
);

1144 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

1145 if(
NULL
 =
pcTempSå
)

1147 
	`¥ötf
("ISP:RShadögTbl_%dÉº‹\n", 
i
);

1148  
HI_FAILURE
;

1150 
s32Temp
 = 0;

1151 
s32Temp
 = 
	`Weight
(
pcTempSå
);

1152 
j
 = 0; j < 
g_I•D·
[
i
].
°Shadög
.
u16TblNodeNum
; j++)

1154 
g_I•D·
[
i
].
°Shadög
.
au16RShadögTbl
[
j
] = 
MAEWeight
[j];

1158 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:GShadögTbl_%d", 
i
);

1159 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

1160 if(
NULL
 =
pcTempSå
)

1162 
	`¥ötf
("ISP:GShadögTbl_%dÉº‹\n", 
i
);

1163  
HI_FAILURE
;

1165 
s32Temp
 = 0;

1166 
s32Temp
 = 
	`Weight
(
pcTempSå
);

1167 
j
 = 0; j < 
g_I•D·
[
i
].
°Shadög
.
u16TblNodeNum
; j++)

1169 
g_I•D·
[
i
].
°Shadög
.
au16GShadögTbl
[
j
] = 
MAEWeight
[j];

1173 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:BShadögTbl_%d", 
i
);

1174 
pcTempSå
 = 
	`öù¨£r_gë°rög
(
g_di˘i⁄¨y
, 
acTempSå
, "-1");

1175 if(
NULL
 =
pcTempSå
)

1177 
	`¥ötf
("ISP:BShadögTbl_%dÉº‹\n", 
i
);

1178  
HI_FAILURE
;

1180 
s32Temp
 = 0;

1181 
s32Temp
 = 
	`Weight
(
pcTempSå
);

1182 
j
 = 0; j < 
g_I•D·
[
i
].
°Shadög
.
u16TblNodeNum
; j++)

1184 
g_I•D·
[
i
].
°Shadög
.
au16BShadögTbl
[
j
] = 
MAEWeight
[j];

1188 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:ROffCíãr_%d", 
i
);

1189 
s32Temp
 = 0;

1190 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1191 i‡(
HI_FAILURE
 =
s32Temp
)

1193 
	`¥ötf
("ISP:ROffCíãr_%d faûed\n", 
i
);

1194  
HI_FAILURE
;

1196 
g_I•D·
[
i
].
°Shadög
.
u16ROffCíãr
 = 
s32Temp
;

1198 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:GOffCíãr_%d", 
i
);

1199 
s32Temp
 = 0;

1200 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1201 i‡(
HI_FAILURE
 =
s32Temp
)

1203 
	`¥ötf
("ISP:GOffCíãr_%d faûed\n", 
i
);

1204  
HI_FAILURE
;

1206 
g_I•D·
[
i
].
°Shadög
.
u16GOffCíãr
 = 
s32Temp
;

1208 
	`¢¥ötf
(
acTempSå
, ◊cTempSå), "ISP:BOffCíãr_%d", 
i
);

1209 
s32Temp
 = 0;

1210 
s32Temp
 = 
	`öù¨£r_gëöt
(
g_di˘i⁄¨y
, 
acTempSå
, 
HI_FAILURE
);

1211 i‡(
HI_FAILURE
 =
s32Temp
)

1213 
	`¥ötf
("ISP:BOffCíãr_%d faûed\n", 
i
);

1214  
HI_FAILURE
;

1216 
g_I•D·
[
i
].
°Shadög
.
u16BOffCíãr
 = 
s32Temp
;

1222  
HI_SUCCESS
;

1223 
	}
}

1226 
HI_S32
 
	$Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
)

1228 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1230 if(
NULL
 =
pcName
)

1232 
	`¥ötf
("nullÖointer when get inifileÖath!!!\n");

1233  
HI_FAILURE
;

1236 
s32Rë
 = 
	`Cmos_cfg_LﬂdFûe
(
pcName
);

1237 i‡(
HI_SUCCESS
 !
s32Rë
)

1239 
	`¥ötf
("%†lﬂd inòfûíamêÁûed\n", 
pcName
);

1240 
	`Cmos_cfg_FªeDi˘
();

1241  
HI_FAILURE
;

1244 
s32Rë
 = 
	`cmos_lﬂdAE_cfg
();

1245 i‡(
HI_SUCCESS
 !
s32Rë
)

1247 
	`¥ötf
("cmos_loadAE_cfg failed\n");

1248 
	`Cmos_cfg_FªeDi˘
();

1249  
HI_FAILURE
;

1252 
s32Rë
 = 
	`cmos_lﬂdAWB_cfg
();

1253 i‡(
HI_SUCCESS
 !
s32Rë
)

1255 
	`¥ötf
("cmos_loadAWB_cfg failed\n");

1256 
	`Cmos_cfg_FªeDi˘
();

1257  
HI_FAILURE
;

1260 
s32Rë
 = 
	`cmos_lﬂdISP_cfg
();

1261 i‡(
HI_SUCCESS
 !
s32Rë
)

1263 
	`¥ötf
("cmos_loadISP_cfg failed\n");

1264 
	`Cmos_cfg_FªeDi˘
();

1265  
HI_FAILURE
;

1268 
	`Cmos_cfg_FªeDi˘
();

1270  
HI_SUCCESS
;

1271 
	}
}

1278 #ifde‡
__˝lu•lus


1279 #i‡
__˝lu•lus


	@component/isp/sensor/omnivision_ov4689/ov4689_cmos.c

1 #i‡!
deföed
(
__OV4689_CMOS_H_
)

2 
	#__OV4689_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#OV4689_ID
 4689

	)

26 #ifde‡
INIFILE_CONFIG_MODE


28 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

29 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

30 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

31 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

40 c⁄° 
£ns‹_i2c_addr
;

41 
£ns‹_addr_byã
;

42 
£ns‹_d©a_byã
;

44 
	#SENSOR_4M_30FPS_MODE
 (0)

	)

45 
	#SENSOR_1080P_60FPS_MODE
 (1)

	)

46 
	#SENSOR_1080P_30FPS_MODE
 (2)

	)

47 
	#SENSOR_2304_1296_30FPS_MODE
 (3)

	)

48 
	#SENSOR_2048_1520_30FPS_MODE
 (4)

	)

49 
	#SENSOR_720p_120FPS_MODE
 (5)

	)

50 
	#SENSOR_720p_180FPS_MODE
 (6)

	)

52 
	#OV4689_VMAX_4M30
 (1632)

	)

53 
	#OV4689_VMAX_1080P
 (1123)

	)

54 
	#OV4689_VMAX_1080P_WDR_LINE
 (1312)

	)

55 
	#OV4689_VMAX_2304_1296
 (1849)

	)

56 
	#OV4689_VMAX_2048_1520
 (2128)

	)

57 
	#OV4689_VMAX_720P
 (773)

	)

60 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_4M_30FPS_MODE
;

61 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

63 
HI_U32
 
	ggu32FuŒLöesStd
 = 1632;

64 
HI_U32
 
	ggu32FuŒLöes
 = 1632;

65 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

66 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

68 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

69 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

71 
	#PATHLEN_MAX
 256

	)

72 
	#CMOS_CFG_INI
 "ov4689_cfg.öi"

	)

73 
	gpcName
[
PATHLEN_MAX
] = "configs/ov4689_cfg.ini";

76 #ifde‡
INIFILE_CONFIG_MODE


78 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

80 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

82 
¥ötf
("nullÖointer when getáe default value!\n");

86 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

87 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

88 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

90 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

91 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

92 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

94 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

95 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

97 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

98 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 1;

100 
	ggíSís‹Mode
)

103 
WDR_MODE_NONE
:

104 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

105 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

106 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

107 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

109 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

111 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

112 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

113 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

114 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

116 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16384;

117 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

118 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

119 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

121 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

122 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

123 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

124 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

126 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

127 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

128 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

130 
	gWDR_MODE_2To1_FRAME
:

131 
WDR_MODE_2To1_FRAME_FULL_RATE
:

132 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

133 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

134 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

135 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

137 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[2].
u8AeCom≥nßti⁄
;

139 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

140 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

141 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MaxI¡TimeT¨gë
;

142 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MöI¡TimeT¨gë
;

144 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16384;

145 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

146 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[2].
u32MaxAgaöT¨gë
;

147 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[2].
u32MöAgaöT¨gë
;

149 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

150 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

151 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxDgaöT¨gë
;

152 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[2].
u32MöDgaöT¨gë
;

154 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[2].
u32ISPDgaöShi·
;

155 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MöISPDgaöT¨gë
;

156 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxISPDgaöT¨gë
;

158 
	gWDR_MODE_2To1_LINE
:

159 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

160 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

161 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

162 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

164 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

166 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

167 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

168 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

169 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

171 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16384;

172 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

173 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

174 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

176 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

177 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

178 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

179 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

181 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

182 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

183 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

193 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

195 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

197 
¥ötf
("nullÖointer when getáe default value!\n");

201 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

202 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

203 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

205 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

206 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

207 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

209 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

210 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

212 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

213 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 1;

215 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

216 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

217 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 16 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

219 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

220 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

221 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

222 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

224 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16832;

225 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

226 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

227 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

229 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

230 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

231 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

232 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

233 
	ggíSís‹Mode
)

236 
WDR_MODE_NONE
:

237 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

238 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

239 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

240 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

242 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

245 
	gWDR_MODE_2To1_FRAME
:

246 
WDR_MODE_2To1_FRAME_FULL_RATE
:

247 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

248 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

249 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

250 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

252 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

255 
	gWDR_MODE_2To1_LINE
:

256 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

257 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

258 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

259 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

261 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

265 
	ggu8Sís‹ImageMode
)

268 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
*60/2;

272 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
*120/2;

276 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
*180/2;

280 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

288 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

290 
	ggu8Sís‹ImageMode
)

292 
	gSENSOR_4M_30FPS_MODE
:

293 if(
gíSís‹Mode
 =
WDR_MODE_NONE
 ||gíSís‹Modê=
WDR_MODE_2To1_FRAME
 ||gíSís‹Modê=
WDR_MODE_2To1_FRAME_FULL_RATE
)

295 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

297 
gu32FuŒLöesStd
 = (
OV4689_VMAX_4M30
 * 30Ë/ 
f32Fps
;

301 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

307 if((
	gf32Fps
 <25Ë&& (
f32Fps
 >= 0.5))

309 
gu32FuŒLöesStd
 = 
OV4689_VMAX_4M30
 *25 /(
f32Fps
);

314 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

321 
	gSENSOR_2304_1296_30FPS_MODE
:

322 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

324 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

326 
gu32FuŒLöesStd
 = (1340 * 30Ë/ 
f32Fps
;

330 
	ggu32FuŒLöesStd
 = (
OV4689_VMAX_2304_1296
 * 30Ë/ 
f32Fps
;

335 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

340 
	gSENSOR_2048_1520_30FPS_MODE
:

341 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

343 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

345 
gu32FuŒLöesStd
 = (0x620 * 30Ë/ 
f32Fps
;

349 
	ggu32FuŒLöesStd
 = (0x850 * 30Ë/ 
f32Fps
;

354 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

360 
	gSENSOR_1080P_60FPS_MODE
:

361 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

363 
gu32FuŒLöesStd
 = (
OV4689_VMAX_1080P
 * 60Ë/ 
f32Fps
;

367 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

372 
	gSENSOR_1080P_30FPS_MODE
:

373 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

375 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

377 
gu32FuŒLöesStd
 = (
OV4689_VMAX_1080P_WDR_LINE
 * 30Ë/ 
f32Fps
;

381 
	ggu32FuŒLöesStd
 = (
OV4689_VMAX_1080P
 * 30Ë/ 
f32Fps
;

386 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

391 
	gSENSOR_720p_120FPS_MODE
:

392 i‡((
f32Fps
 <= 120) && (f32Fps >= 0.5))

394 
gu32FuŒLöesStd
 = (
OV4689_VMAX_720P
 * 120Ë/ 
f32Fps
;

398 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

403 
	gSENSOR_720p_180FPS_MODE
:

404 i‡((
f32Fps
 <= 180) && (f32Fps >= 0.5))

406 
gu32FuŒLöesStd
 = (
OV4689_VMAX_720P
 * 180Ë/ 
f32Fps
;

410 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

419 
	ggu32FuŒLöesStd
 = 
gu32FuŒLöesStd
 > 0x7FFF ? 0x7FFF : gu32FullLinesStd;

421 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

423 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

424 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0x7F00) >> 8;

428 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

429 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0x7F00) >> 8;

432 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

433 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

434 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

435 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

440 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

441 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

443 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0x7FFF) ? 0x7FFF : u32FullLines;

444 
	ggu32FuŒLöes
 = 
u32FuŒLöes
;

446 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

448 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u32D©a
 = (
gu32FuŒLöes
 & 0xFF);

449 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöes
 & 0x7F00) >> 8;

453 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

454 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32D©a
 = (
gu32FuŒLöes
 & 0x7F00) >> 8;

457 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 4;

463 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

465 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

467 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

469 i‡(
bFú°
)

471 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u32D©a
 = 
u32I¡Time
 >> 12;

472 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
u32I¡Time
 & 0xFF0) >> 4;

473 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = (
u32I¡Time
 & 0xF) << 4;

474 
	gbFú°
 = 
HI_FALSE
;

478 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = 
u32I¡Time
 >> 12;

479 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF0) >> 4;

480 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = (
u32I¡Time
 & 0xF) << 4;

481 
	gbFú°
 = 
HI_TRUE
;

484 i‡(
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode
 ||
WDR_MODE_2To1_FRAME_FULL_RATE
 ==genSensorMode)

486 i‡(
bFú°
)

488 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = 
u32I¡Time
 >> 12;

489 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF0) >> 4;

490 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = (
u32I¡Time
 & 0xF) << 4;

491 
	gbFú°
 = 
HI_FALSE
;

496 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = 
u32I¡Time
 >> 12;

497 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
u32I¡Time
 & 0xFF0) >> 4;

498 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = (
u32I¡Time
 & 0xF) << 4;

499 
	gbFú°
 = 
HI_TRUE
;

504 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = 
u32I¡Time
 >> 12;

505 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF0) >> 4;

506 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = (
u32I¡Time
 & 0xF) << 4;

507 
	gbFú°
 = 
HI_TRUE
;

513 
HI_U32
 
	ggaö_èbÀ
[520]=

556 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

558 
	gi
;

560 i‡(*
	gpu32AgaöLö
 >
gaö_èbÀ
[519])

562 *
pu32AgaöLö
 = 
gaö_èbÀ
[519];

563 *
	gpu32AgaöDb
 = 519;

567 
	gi
 = 1; i < 520; i++)

569 i‡(*
	gpu32AgaöLö
 < 
	ggaö_èbÀ
[
i
])

571 *
	gpu32AgaöLö
 = 
gaö_èbÀ
[
i
 - 1];

572 *
	gpu32AgaöDb
 = 
i
 - 1;

581 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

583 
HI_U32
 
	gu32AGaöReg
 = 0;

585 if(
	gu32Agaö
 < 128)

587 
	gu32AGaöReg
 = 0;

588 
	gu32Agaö
 += 128;

590 if(
	gu32Agaö
 < 256)

592 
	gu32AGaöReg
 = 1;

593 
	gu32Agaö
 -= 8;

595 if(
	gu32Agaö
 < 384)

597 
	gu32AGaöReg
 = 3;

598 
	gu32Agaö
 -= 140;

602 
	gu32AGaöReg
 = 7;

603 
	gu32Agaö
 -= 264;

606 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = 
u32AGaöReg
;

607 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = 
u32Agaö
;

609 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

611 
g_°SnsRegsInfo
.
a°I2cD©a
[8].
u32D©a
 = g_stSnsRegsInfo.astI2cData[3].u32Data;

612 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
;

619 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

622 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

624 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

627 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

629 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 4Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

631 i‡((
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
))

636 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 50Ë* 0x40 / (
u32R©io
 + 0x40);

637 if(
	ggu8Sís‹ImageMode
 =
SENSOR_1080P_30FPS_MODE
)

639 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 200Ë* 0x40 / (
u32R©io
 + 0x40);

641 if((
	ggu8Sís‹ImageMode
 =
SENSOR_2304_1296_30FPS_MODE
Ë|| (
gu8Sís‹ImageMode
 =
SENSOR_2048_1520_30FPS_MODE
))

643 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 200Ë* 0x40 / (
u32R©io
 + 0x40);

650 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

652 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

654 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

655 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

656 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

657 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

658 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

659 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

660 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
NULL
;

661 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

668 #ifde‡
INIFILE_CONFIG_MODE


670 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

672 
HI_U8
 
	gi
;

674 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

676 
¥ötf
("nullÖointer when getáwb default value!\n");

680 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

681 
	ggíSís‹Mode
)

684 
WDR_MODE_NONE
:

685 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

686 
	gi
= 0; i < 4; i++)

688 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

691 
	gi
= 0; i < 6; i++)

693 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

696 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

697 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

699 
	gWDR_MODE_2To1_LINE
:

700 
WDR_MODE_2To1_FRAME
:

701 
WDR_MODE_2To1_FRAME_FULL_RATE
:

702 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

703 
	gi
= 0; i < 4; i++)

705 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

708 
	gi
= 0; i < 6; i++)

710 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

713 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

714 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

723 
AWB_CCM_S
 
	gg_°AwbCcm
 =

747 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

756 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

765 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

767 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

769 
¥ötf
("nullÖointer when getáwb default value!\n");

773 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

775 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4850;

777 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x212;

778 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

779 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

780 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1c8;

782 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 63;

783 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 76;

784 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -117;

785 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 119178;

786 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

787 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -73499;

789 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

791 
	ggíSís‹Mode
)

794 
WDR_MODE_NONE
:

795 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

797 
	gWDR_MODE_2To1_LINE
:

798 
WDR_MODE_2To1_FRAME
:

799 
WDR_MODE_2To1_FRAME_FULL_RATE
:

800 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

809 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

811 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

813 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

820 #ifde‡
INIFILE_CONFIG_MODE


822 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

824 i‡(
	gHI_NULL
 =
p°Def
)

826 
¥ötf
("nullÖointer when get isp default value!\n");

830 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

831 
	ggíSís‹Mode
)

834 
WDR_MODE_NONE
:

835 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

836 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

837 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

838 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

839 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

840 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

843 
	gWDR_MODE_2To1_LINE
:

844 
WDR_MODE_2To1_FRAME
:

845 
WDR_MODE_2To1_FRAME_FULL_RATE
:

846 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

847 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

848 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

849 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

850 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

851 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

852 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

856 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

857 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1520;

864 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

893 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

920 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

965 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

980 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

1024 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

1067 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

1084 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

1086 i‡(
	gHI_NULL
 =
p°Def
)

1088 
¥ötf
("nullÖointer when get isp default value!\n");

1092 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

1094 
	ggíSís‹Mode
)

1097 
WDR_MODE_NONE
:

1098 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

1099 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1100 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

1101 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

1102 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

1103 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

1104 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

1105 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1106 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1108 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

1109 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

1110 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

1111 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

1112 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1114 
	gWDR_MODE_2To1_LINE
:

1115 
WDR_MODE_2To1_FRAME
:

1116 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1117 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

1118 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1119 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

1120 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

1121 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

1122 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

1123 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

1124 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1125 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1127 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

1128 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

1129 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

1130 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1131 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

1132 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

1137 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

1138 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1520;

1144 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

1146 
HI_S32
 
	gi
;

1148 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

1150 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1155 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1157 
	gi
=0; i<4; i++)

1159 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0x40;

1165 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1167 
HI_U32
 
	gu32FuŒLöes_5Fps
, 
	gu32MaxI¡Time_5Fps
;

1169 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1175 i‡(
	gSENSOR_4M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1177 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_4M30
 * 30) / 5;

1179 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1181 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_1080P
 * 60) / 5;

1183 i‡(
	gSENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1185 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_1080P
 * 30) / 5;

1187 i‡(
	gSENSOR_2304_1296_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1189 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_2304_1296
 * 30) / 5;

1191 i‡(
	gSENSOR_2048_1520_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1193 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_2048_1520
 * 30) / 5;

1195 i‡(
	gSENSOR_720p_120FPS_MODE
 =
gu8Sís‹ImageMode
)

1197 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_720P
 * 120) / 5;

1199 i‡(
	gSENSOR_720p_180FPS_MODE
 =
gu8Sís‹ImageMode
)

1201 
u32FuŒLöes_5Fps
 = (
OV4689_VMAX_720P
 * 180) / 5;

1209 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1210 
	gu32MaxI¡Time_5Fps
 = 
u32FuŒLöes_5Fps
 - 4;

1212 i‡(
	gbE«bÀ
)

1214 
£ns‹_wrôe_ªgi°î
 (0x380F, 
u32FuŒLöes_5Fps
 & 0xFF);

1215 
£ns‹_wrôe_ªgi°î
 (0x380E, (
u32FuŒLöes_5Fps
 & 0x7F00) >> 8);

1216 
£ns‹_wrôe_ªgi°î
(0x3500, (
u32MaxI¡Time_5Fps
>>12));

1217 
£ns‹_wrôe_ªgi°î
(0x3501, ((
u32MaxI¡Time_5Fps
 & 0xFF0) >> 4));

1218 
£ns‹_wrôe_ªgi°î
(0x3502, ((
u32MaxI¡Time_5Fps
 & 0xF) << 4));

1220 
£ns‹_wrôe_ªgi°î
(0x3508, 0x00);

1221 
£ns‹_wrôe_ªgi°î
(0x3509, 0x80);

1225 
£ns‹_wrôe_ªgi°î
 (0x380F, 
gu32FuŒLöesStd
& 0xFF);

1226 
£ns‹_wrôe_ªgi°î
 (0x380E, (
gu32FuŒLöesStd
 & 0x7F00) >> 8);

1227 
	gbInô
 = 
HI_FALSE
;

1233 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1235 
	gbInô
 = 
HI_FALSE
;

1237 
	gu8Mode
)

1239 
	gWDR_MODE_NONE
:

1240 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1241 
¥ötf
("linear mode\n");

1244 
	gWDR_MODE_2To1_LINE
:

1245 
gíSís‹Mode
 = 
WDR_MODE_2To1_LINE
;

1246 
¥ötf
("2to1Üine WDR mode\n");

1249 
	gWDR_MODE_2To1_FRAME
:

1250 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1253 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1254 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1258 
¥ötf
("NOT supportÅhis mode!\n");

1266 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1268 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1269 
HI_U8
 
	gu8MaxFømeR©e
 = 30;

1270 
	gbInô
 = 
HI_FALSE
;

1272 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1274 
¥ötf
("nullÖointer when set image mode\n");

1277 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1280)&&(
p°Sís‹ImageMode
->
u16Height
 <= 720))

1279 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 120)

1281 
u8Sís‹ImageMode
 = 
SENSOR_720p_120FPS_MODE
;

1283 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 180)

1285 
u8Sís‹ImageMode
 = 
SENSOR_720p_180FPS_MODE
;

1289 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1290 
p°Sís‹ImageMode
->
u16Width
,

1291 
p°Sís‹ImageMode
->
u16Height
,

1292 
p°Sís‹ImageMode
->
f32Fps
);

1297 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1299 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1301 
u8Sís‹ImageMode
 = 
SENSOR_1080P_30FPS_MODE
;

1303 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 60)

1305 
u8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1309 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1310 
p°Sís‹ImageMode
->
u16Width
,

1311 
p°Sís‹ImageMode
->
u16Height
,

1312 
p°Sís‹ImageMode
->
f32Fps
);

1317 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2048)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1520))

1319 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1321 
u8Sís‹ImageMode
 = 
SENSOR_2048_1520_30FPS_MODE
;

1325 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1326 
p°Sís‹ImageMode
->
u16Width
,

1327 
p°Sís‹ImageMode
->
u16Height
,

1328 
p°Sís‹ImageMode
->
f32Fps
);

1333 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2304)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1296))

1335 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1337 
u8Sís‹ImageMode
 = 
SENSOR_2304_1296_30FPS_MODE
;

1341 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1342 
p°Sís‹ImageMode
->
u16Width
,

1343 
p°Sís‹ImageMode
->
u16Height
,

1344 
p°Sís‹ImageMode
->
f32Fps
);

1349 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2592)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1520))

1351 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1353 
u8MaxFømeR©e
 = 25;

1357 
	gu8MaxFømeR©e
 = 30;

1359 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <
u8MaxFømeR©e
)

1361 
u8Sís‹ImageMode
 = 
SENSOR_4M_30FPS_MODE
;

1365 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1366 
p°Sís‹ImageMode
->
u16Width
,

1367 
p°Sís‹ImageMode
->
u16Height
,

1368 
p°Sís‹ImageMode
->
f32Fps
);

1375 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1376 
p°Sís‹ImageMode
->
u16Width
,

1377 
p°Sís‹ImageMode
->
u16Height
,

1378 
p°Sís‹ImageMode
->
f32Fps
);

1382 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1384 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1390 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1396 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1402 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1404 
HI_S32
 
	gi
;

1406 i‡(
	gHI_FALSE
 =
bInô
)

1408 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1409 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1410 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 7;

1412 i‡((
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 =gíSís‹ModeË|| (
WDR_MODE_2To1_FRAME_FULL_RATE
 == genSensorMode))

1414 
g_°SnsRegsInfo
.
u32RegNum
 += 5;

1417 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1419 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1420 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1421 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1422 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1424 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1425 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 0x3500;

1426 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1427 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 0x3501;

1428 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 0;

1429 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 0x3502;

1430 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 1;

1431 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 0x3508;

1432 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 1;

1433 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 0x3509;

1434 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 0;

1435 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 0x380F;

1436 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 0;

1437 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 0x380E;

1438 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
 )

1440 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u8DñayFrmNum
 = 0;

1441 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 0x350A;

1442 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 0;

1443 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 0x350B;

1444 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 0;

1445 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 0x350C;

1446 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 1;

1447 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 0x350E;

1448 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 1;

1449 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 0x350F;

1450 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1451 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 0x380F;

1452 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu8DñayFrmNum
 = 0;

1453 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32RegAddr
 = 0x380E;

1455 i‡((
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME_FULL_RATE
 == genSensorMode))

1457 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u8DñayFrmNum
 = 1;

1458 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 0x3500;

1459 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 1;

1460 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 0x3501;

1461 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 1;

1462 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 0x3502;

1463 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 1;

1464 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 0x350E;

1465 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 1;

1466 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 0x350F;

1467 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1468 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 0x380F;

1469 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu8DñayFrmNum
 = 0;

1470 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[11].
	gu32RegAddr
 = 0x380E;

1472 
	gbInô
 = 
HI_TRUE
;

1476 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1478 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1480 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1484 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1488 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1490 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1491 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1492 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gbUpd©e
 = 
HI_TRUE
;

1493 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gbUpd©e
 = 
HI_TRUE
;

1494 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gbUpd©e
 = 
HI_TRUE
;

1495 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gbUpd©e
 = 
HI_TRUE
;

1499 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1501 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1505 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1506 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1511 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1513 
mem£t
(
pcName
, 0, (pcName));

1515 i‡(
	gHI_NULL
 =
pcP©h
)

1517 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1518 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1522 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1524 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1528 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1529 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1535 
HI_VOID
 
£ns‹_globÆ_öô
()

1537 
	ggu8Sís‹ImageMode
 = 
SENSOR_4M_30FPS_MODE
;

1538 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1540 
	ggu32FuŒLöesStd
 = 1632;

1541 
	ggu32FuŒLöes
 = 1632;

1542 
	gbInô
 = 
HI_FALSE
;

1543 
	gbSís‹Inô
 = 
HI_FALSE
;

1545 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1546 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1548 #ifde‡
INIFILE_CONFIG_MODE


1549 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1550 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1551 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1553 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1560 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1562 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1564 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1565 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1566 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1567 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1568 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1570 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1571 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1572 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1573 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1582 
£ns‹_ªgi°î_ˇŒback
()

1584 
ISP_DEV
 
	gI•Dev
 = 0;

1585 
HI_S32
 
	gs32Rë
;

1586 
ALG_LIB_S
 
	g°Lib
;

1587 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1588 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1589 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1591 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1592 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
OV4689_ID
, &
°I•Regi°î
);

1593 i‡(
	gs32Rë
)

1595 
¥ötf
("sensorÑegister callback function failed!\n");

1596  
	gs32Rë
;

1599 
	g°Lib
.
	gs32Id
 = 0;

1600 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1601 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1602 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
OV4689_ID
, &
°AeRegi°î
);

1603 i‡(
	gs32Rë
)

1605 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1606  
	gs32Rë
;

1609 
	g°Lib
.
	gs32Id
 = 0;

1610 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1611 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1612 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
OV4689_ID
, &
°AwbRegi°î
);

1613 i‡(
	gs32Rë
)

1615 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1616  
	gs32Rë
;

1622 
£ns‹_uƒegi°î_ˇŒback
()

1624 
ISP_DEV
 
	gI•Dev
 = 0;

1625 
HI_S32
 
	gs32Rë
;

1626 
ALG_LIB_S
 
	g°Lib
;

1628 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
OV4689_ID
);

1629 i‡(
	gs32Rë
)

1631 
¥ötf
("sensor unregister callback function failed!\n");

1632  
	gs32Rë
;

1635 
	g°Lib
.
	gs32Id
 = 0;

1636 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1637 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
OV4689_ID
);

1638 i‡(
	gs32Rë
)

1640 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1641  
	gs32Rë
;

1644 
	g°Lib
.
	gs32Id
 = 0;

1645 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1646 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
OV4689_ID
);

1647 i‡(
	gs32Rë
)

1649 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1650  
	gs32Rë
;

1656 #ifde‡
__˝lu•lus


1657 #i‡
__˝lu•lus


	@component/isp/sensor/omnivision_ov4689/ov4689_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~"hi_comm_video.h
"

26 #ifde‡
HI_GPIO_I2C


27 
	~"gpioi2c_ex.h
"

29 
	~"hi_i2c.h
"

32 c⁄° 
	g£ns‹_i2c_addr
 = 0x42;

33 c⁄° 
	g£ns‹_addr_byã
 = 2;

34 c⁄° 
	g£ns‹_d©a_byã
 = 1;

35 
	gg_fd
 = -1;

37 
WDR_MODE_E
 
gíSís‹Mode
;

38 
HI_U8
 
gu8Sís‹ImageMode
;

39 
HI_BOOL
 
bSís‹Inô
;

41 
	$£ns‹_i2c_öô
()

43 if(
g_fd
 >= 0)

47 #ifde‡
HI_GPIO_I2C


48 
ªt
;

50 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

51 if(
g_fd
 < 0)

53 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

57 
ªt
;

59 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

60 if(
g_fd
 < 0)

62 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

66 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

67 i‡(
ªt
 < 0)

69 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

70  
ªt
;

75 
	}
}

77 
	$£ns‹_i2c_exô
()

79 i‡(
g_fd
 >= 0)

81 
	`˛o£
(
g_fd
);

82 
g_fd
 = -1;

86 
	}
}

88 
	$£ns‹_ªad_ªgi°î
(
addr
)

93 
	}
}

95 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

97 #ifde‡
HI_GPIO_I2C


98 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

99 
i2c_d©a
.
ªg_addr
 = 
addr
;

100 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

101 
i2c_d©a
.
d©a
 = data;

102 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

104 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

106 i‡(
ªt
)

108 
	`¥ötf
("GPIO-I2C write faild!\n");

109  
ªt
;

112 
idx
 = 0;

113 
ªt
;

114 
buf
[8];

116 
buf
[
idx
++] = 
addr
 & 0xFF;

117 i‡(
£ns‹_addr_byã
 == 2)

119 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

120 
buf
[
idx
++] = 
addr
 >> 8;

124 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

127 i‡(
ªt
 < 0)

129 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

133 
buf
[
idx
++] = 
d©a
;

134 i‡(
£ns‹_d©a_byã
 == 2)

136 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

137 
buf
[
idx
++] = 
d©a
 >> 8;

141 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

144 i‡(
ªt
)

146 
	`¥ötf
("hi_i2c write faild!\n");

150 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

151 if(
ªt
 < 0)

153 
	`¥ötf
("I2C_WRITEÉrror!\n");

158 
	}
}

160 
	$dñay_ms
(
ms
) {

161 
	`u¶ìp
(
ms
*1000);

162 
	}
}

164 
	$£ns‹_¥og
(* 
rom
)

166 
i
 = 0;

168 
lookup
 = 
rom
[
i
++];

169 
addr
 = (
lookup
 >> 16) & 0xFFFF;

170 
d©a
 = 
lookup
 & 0xFFFF;

171 i‡(
addr
 == 0xFFFE) {

172 
	`dñay_ms
(
d©a
);

173 } i‡(
addr
 == 0xFFFF) {

176 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

179 
	}
}

182 
£ns‹_öô_4M50
();

183 
£ns‹_öô_4M30
();

184 
£ns‹_wdr_4M_25_öô
();

185 
£ns‹_wdr_4M_15_öô
();

186 
£ns‹_wdr_1080p30_öô
();

187 
£ns‹_wdr_2304_1296_30_öô
();

188 
£ns‹_wdr_2048_1520_30_öô
();

189 
£ns‹_löór_2304_1296_30_öô
();

190 
£ns‹_löór_2048_1520_30_öô
();

191 
£ns‹_löór_1080p60_öô
();

192 
£ns‹_löór_1080p30_öô
();

193 
£ns‹_löór_720p_120Âs_öô
();

194 
£ns‹_löór_720p_180Âs_öô
();

196 
	$£ns‹_öô
()

198 
	`£ns‹_i2c_öô
();

200 
gu8Sís‹ImageMode
)

203 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

205 
	`£ns‹_wdr_4M_25_öô
();

207 if(
WDR_MODE_NONE
 =
gíSís‹Mode
)

209 
	`£ns‹_öô_4M30
();

210 }if((
WDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë||
WDR_MODE_2To1_FRAME
 == genSensorMode)

212 
	`£ns‹_öô_4M30
();

217 
	`£ns‹_löór_1080p60_öô
();

220 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

222 
	`£ns‹_wdr_1080p30_öô
();

226 
	`£ns‹_löór_1080p30_öô
();

230 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

232 
	`£ns‹_wdr_2304_1296_30_öô
();

236 
	`£ns‹_löór_2304_1296_30_öô
();

240 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

242 
	`£ns‹_wdr_2048_1520_30_öô
();

246 
	`£ns‹_löór_2048_1520_30_öô
();

251 if(
WDR_MODE_NONE
 =
gíSís‹Mode
)

253 
	`£ns‹_löór_720p_120Âs_öô
();

262 if(
WDR_MODE_NONE
 =
gíSís‹Mode
)

264 
	`£ns‹_löór_720p_180Âs_öô
();

272 
	`¥ötf
("Not supportÅhis mode\n");

275 
	}
}

277 
	$£ns‹_exô
()

279 
	`£ns‹_i2c_exô
();

282 
	}
}

284 
	$£ns‹_íabÀ_wdr_mode
()

286 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x03);

287 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

288 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x06);

289 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x0C);

290 
	`£ns‹_wrôe_ªgi°î
(0x376e, 0x01);

292 
	`£ns‹_wrôe_ªgi°î
(0x350B, 0x08);

293 
	`£ns‹_wrôe_ªgi°î
(0x3511, 0x01);

294 
	`£ns‹_wrôe_ªgi°î
(0x3517, 0x00);

295 
	`£ns‹_wrôe_ªgi°î
(0x351d, 0x00);

297 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x06);

299 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

300 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

302 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf1);

303 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

304 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf0);

305 
	}
}

306 
	$£ns‹_öô_comm_fú°
()

308 
	`£ns‹_wrôe_ªgi°î
(0x3020, 0x93);

309 
	`£ns‹_wrôe_ªgi°î
(0x3021, 0x03);

310 
	`£ns‹_wrôe_ªgi°î
(0x3022, 0x01);

311 
	`£ns‹_wrôe_ªgi°î
(0x3031, 0x0a);

312 
	`£ns‹_wrôe_ªgi°î
(0x3305, 0xf1);

313 
	`£ns‹_wrôe_ªgi°î
(0x3307, 0x04);

314 
	`£ns‹_wrôe_ªgi°î
(0x3309, 0x29);

315 
	`£ns‹_wrôe_ªgi°î
(0x3500, 0x00);

316 
	`£ns‹_wrôe_ªgi°î
(0x3501, 0x45);

317 
	`£ns‹_wrôe_ªgi°î
(0x3502, 0xB0);

318 
	`£ns‹_wrôe_ªgi°î
(0x3503, 0x77);

319 
	`£ns‹_wrôe_ªgi°î
(0x3504, 0x00);

320 
	`£ns‹_wrôe_ªgi°î
(0x3505, 0x00);

321 
	`£ns‹_wrôe_ªgi°î
(0x3506, 0x00);

322 
	`£ns‹_wrôe_ªgi°î
(0x3507, 0x00);

323 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x00);

324 
	`£ns‹_wrôe_ªgi°î
(0x3509, 0x80);

325 
	`£ns‹_wrôe_ªgi°î
(0x350a, 0x00);

326 
	`£ns‹_wrôe_ªgi°î
(0x350b, 0x00);

327 
	`£ns‹_wrôe_ªgi°î
(0x350c, 0x00);

328 
	`£ns‹_wrôe_ªgi°î
(0x350d, 0x00);

329 
	`£ns‹_wrôe_ªgi°î
(0x350e, 0x00);

330 
	`£ns‹_wrôe_ªgi°î
(0x350f, 0x80);

331 
	`£ns‹_wrôe_ªgi°î
(0x3510, 0x00);

332 
	`£ns‹_wrôe_ªgi°î
(0x3511, 0x00);

333 
	`£ns‹_wrôe_ªgi°î
(0x3512, 0x00);

334 
	`£ns‹_wrôe_ªgi°î
(0x3513, 0x00);

335 
	`£ns‹_wrôe_ªgi°î
(0x3514, 0x00);

336 
	`£ns‹_wrôe_ªgi°î
(0x3515, 0x80);

337 
	`£ns‹_wrôe_ªgi°î
(0x3516, 0x00);

338 
	`£ns‹_wrôe_ªgi°î
(0x3517, 0x00);

339 
	`£ns‹_wrôe_ªgi°î
(0x3518, 0x00);

340 
	`£ns‹_wrôe_ªgi°î
(0x3519, 0x00);

341 
	`£ns‹_wrôe_ªgi°î
(0x351a, 0x00);

342 
	`£ns‹_wrôe_ªgi°î
(0x351b, 0x80);

343 
	`£ns‹_wrôe_ªgi°î
(0x351c, 0x00);

344 
	`£ns‹_wrôe_ªgi°î
(0x351d, 0x00);

345 
	`£ns‹_wrôe_ªgi°î
(0x351e, 0x00);

346 
	`£ns‹_wrôe_ªgi°î
(0x351f, 0x00);

347 
	`£ns‹_wrôe_ªgi°î
(0x3520, 0x00);

348 
	`£ns‹_wrôe_ªgi°î
(0x3521, 0x80);

349 
	`£ns‹_wrôe_ªgi°î
(0x3522, 0x08);

350 
	`£ns‹_wrôe_ªgi°î
(0x3524, 0x08);

351 
	`£ns‹_wrôe_ªgi°î
(0x3526, 0x08);

352 
	`£ns‹_wrôe_ªgi°î
(0x3528, 0x08);

353 
	`£ns‹_wrôe_ªgi°î
(0x352a, 0x08);

354 
	`£ns‹_wrôe_ªgi°î
(0x3602, 0x00);

355 
	`£ns‹_wrôe_ªgi°î
(0x3604, 0x02);

356 
	`£ns‹_wrôe_ªgi°î
(0x3605, 0x00);

357 
	`£ns‹_wrôe_ªgi°î
(0x3606, 0x00);

358 
	`£ns‹_wrôe_ªgi°î
(0x3607, 0x00);

359 
	`£ns‹_wrôe_ªgi°î
(0x3609, 0x12);

360 
	`£ns‹_wrôe_ªgi°î
(0x360a, 0x40);

361 
	`£ns‹_wrôe_ªgi°î
(0x360c, 0x08);

362 
	`£ns‹_wrôe_ªgi°î
(0x360f, 0xe5);

363 
	`£ns‹_wrôe_ªgi°î
(0x3608, 0x8f);

364 
	`£ns‹_wrôe_ªgi°î
(0x3611, 0x00);

365 
	`£ns‹_wrôe_ªgi°î
(0x3613, 0xf7);

366 
	`£ns‹_wrôe_ªgi°î
(0x3616, 0x58);

367 
	`£ns‹_wrôe_ªgi°î
(0x3619, 0x99);

368 
	`£ns‹_wrôe_ªgi°î
(0x361b, 0x60);

369 
	`£ns‹_wrôe_ªgi°î
(0x361c, 0x7a);

370 
	`£ns‹_wrôe_ªgi°î
(0x361e, 0x79);

371 
	`£ns‹_wrôe_ªgi°î
(0x361f, 0x02);

372 
	`£ns‹_wrôe_ªgi°î
(0x3632, 0x00);

373 
	`£ns‹_wrôe_ªgi°î
(0x3633, 0x10);

374 
	`£ns‹_wrôe_ªgi°î
(0x3634, 0x10);

375 
	`£ns‹_wrôe_ªgi°î
(0x3635, 0x10);

376 
	`£ns‹_wrôe_ªgi°î
(0x3636, 0x15);

377 
	`£ns‹_wrôe_ªgi°î
(0x3646, 0x86);

378 
	`£ns‹_wrôe_ªgi°î
(0x364a, 0x0b);

379 
	`£ns‹_wrôe_ªgi°î
(0x3700, 0x17);

380 
	`£ns‹_wrôe_ªgi°î
(0x3701, 0x22);

381 
	`£ns‹_wrôe_ªgi°î
(0x3703, 0x10);

382 
	`£ns‹_wrôe_ªgi°î
(0x370a, 0x37);

383 
	`£ns‹_wrôe_ªgi°î
(0x3705, 0x00);

384 
	`£ns‹_wrôe_ªgi°î
(0x3706, 0x63);

385 
	`£ns‹_wrôe_ªgi°î
(0x3709, 0x3c);

386 
	`£ns‹_wrôe_ªgi°î
(0x370b, 0x01);

387 
	`£ns‹_wrôe_ªgi°î
(0x370c, 0x30);

388 
	`£ns‹_wrôe_ªgi°î
(0x3710, 0x24);

389 
	`£ns‹_wrôe_ªgi°î
(0x3711, 0x0c);

390 
	`£ns‹_wrôe_ªgi°î
(0x3716, 0x00);

391 
	`£ns‹_wrôe_ªgi°î
(0x3720, 0x28);

392 
	`£ns‹_wrôe_ªgi°î
(0x3729, 0x7b);

393 
	`£ns‹_wrôe_ªgi°î
(0x372a, 0x84);

394 
	`£ns‹_wrôe_ªgi°î
(0x372b, 0xbd);

395 
	`£ns‹_wrôe_ªgi°î
(0x372c, 0xbc);

396 
	`£ns‹_wrôe_ªgi°î
(0x372e, 0x52);

397 
	`£ns‹_wrôe_ªgi°î
(0x373c, 0x0e);

398 
	`£ns‹_wrôe_ªgi°î
(0x373e, 0x33);

399 
	`£ns‹_wrôe_ªgi°î
(0x3743, 0x10);

400 
	`£ns‹_wrôe_ªgi°î
(0x3744, 0x88);

401 
	`£ns‹_wrôe_ªgi°î
(0x3745, 0xc0);

402 
	`£ns‹_wrôe_ªgi°î
(0x374a, 0x43);

403 
	`£ns‹_wrôe_ªgi°î
(0x374c, 0x00);

404 
	`£ns‹_wrôe_ªgi°î
(0x374e, 0x23);

405 
	`£ns‹_wrôe_ªgi°î
(0x3751, 0x7b);

406 
	`£ns‹_wrôe_ªgi°î
(0x3752, 0x84);

407 
	`£ns‹_wrôe_ªgi°î
(0x3753, 0xbd);

408 
	`£ns‹_wrôe_ªgi°î
(0x3754, 0xbc);

409 
	`£ns‹_wrôe_ªgi°î
(0x3756, 0x52);

410 
	`£ns‹_wrôe_ªgi°î
(0x375c, 0x00);

411 
	`£ns‹_wrôe_ªgi°î
(0x3760, 0x00);

412 
	`£ns‹_wrôe_ªgi°î
(0x3761, 0x00);

413 
	`£ns‹_wrôe_ªgi°î
(0x3762, 0x00);

414 
	`£ns‹_wrôe_ªgi°î
(0x3763, 0x00);

415 
	`£ns‹_wrôe_ªgi°î
(0x3764, 0x00);

416 
	`£ns‹_wrôe_ªgi°î
(0x3767, 0x04);

417 
	`£ns‹_wrôe_ªgi°î
(0x3768, 0x04);

418 
	`£ns‹_wrôe_ªgi°î
(0x3769, 0x08);

419 
	`£ns‹_wrôe_ªgi°î
(0x376a, 0x08);

420 
	`£ns‹_wrôe_ªgi°î
(0x376b, 0x20);

421 
	`£ns‹_wrôe_ªgi°î
(0x376c, 0x00);

422 
	`£ns‹_wrôe_ªgi°î
(0x376d, 0x00);

423 
	`£ns‹_wrôe_ªgi°î
(0x376e, 0x00);

424 
	`£ns‹_wrôe_ªgi°î
(0x3773, 0x00);

425 
	`£ns‹_wrôe_ªgi°î
(0x3774, 0x51);

426 
	`£ns‹_wrôe_ªgi°î
(0x3776, 0xbd);

427 
	`£ns‹_wrôe_ªgi°î
(0x3777, 0xbd);

428 
	`£ns‹_wrôe_ªgi°î
(0x3781, 0x18);

429 
	`£ns‹_wrôe_ªgi°î
(0x3783, 0x25);

430 
	`¥ötf
("fist init ok!\n");

431 
	}
}

433 
	$£ns‹_öô_comm_£c⁄d
()

435 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

436 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

437 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

438 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

439 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

440 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

441 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

442 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

443 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

444 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

445 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

446 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

447 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

448 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

449 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

450 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

451 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

452 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

453 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

454 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

455 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

456 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

457 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

458 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

459 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

460 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

461 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

462 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

463 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

464 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

465 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

466 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

467 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

468 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

469 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

470 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x06);

471 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0x13);

472 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x07);

473 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0x40);

474 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x07);

475 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0x50);

476 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

477 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

478 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

479 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

480 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

481 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

482 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

483 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

484 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

485 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

486 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

487 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

488 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

489 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

490 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

491 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

492 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

493 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

494 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x41);

495 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

496 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

497 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

498 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

499 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x56);

500 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

501 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

502 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

503 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

504 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

505 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

506 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

507 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

508 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

509 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

510 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

511 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

512 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

513 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

514 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

515 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

516 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

517 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

518 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

519 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

520 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

521 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

522 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

523 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

524 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

525 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

526 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

527 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

528 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

529 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

530 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

531 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

533 
	`dñay_ms
(10);

534 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

536 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

538 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

539 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

540 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

541 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

542 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

543 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

544 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

545 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

546 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

547 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

548 
	`¥ötf
("second init ok\n");

549 
	}
}

551 
	$£ns‹_öô_4M50
()

553 
	`u¶ìp
(200000);

554 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

556 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

557 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x00);

558 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

559 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0x19);

560 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x00);

561 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

562 
	`£ns‹_wrôe_ªgi°î
(0x0305, 0x01);

563 
	`£ns‹_wrôe_ªgi°î
(0x0306, 0x01);

564 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x00);

565 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

566 
	`£ns‹_wrôe_ªgi°î
(0x030c, 0x00);

567 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

568 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

569 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

572 
	`£ns‹_wrôe_ªgi°î
(0x0311, 0x00);

573 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

574 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

575 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

576 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

577 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

578 
	`£ns‹_wrôe_ªgi°î
(0x3020, 0x93);

579 
	`£ns‹_wrôe_ªgi°î
(0x3021, 0x03);

580 
	`£ns‹_wrôe_ªgi°î
(0x3022, 0x01);

581 
	`£ns‹_wrôe_ªgi°î
(0x3031, 0x0a);

582 
	`£ns‹_wrôe_ªgi°î
(0x3305, 0xf1);

583 
	`£ns‹_wrôe_ªgi°î
(0x3307, 0x04);

584 
	`£ns‹_wrôe_ªgi°î
(0x3309, 0x29);

585 
	`£ns‹_wrôe_ªgi°î
(0x3500, 0x00);

586 
	`£ns‹_wrôe_ªgi°î
(0x3501, 0x45);

587 
	`£ns‹_wrôe_ªgi°î
(0x3502, 0xB0);

588 
	`£ns‹_wrôe_ªgi°î
(0x3503, 0x77);

589 
	`£ns‹_wrôe_ªgi°î
(0x3504, 0x00);

590 
	`£ns‹_wrôe_ªgi°î
(0x3505, 0x00);

591 
	`£ns‹_wrôe_ªgi°î
(0x3506, 0x00);

592 
	`£ns‹_wrôe_ªgi°î
(0x3507, 0x00);

593 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x00);

594 
	`£ns‹_wrôe_ªgi°î
(0x3509, 0x80);

595 
	`£ns‹_wrôe_ªgi°î
(0x350a, 0x00);

596 
	`£ns‹_wrôe_ªgi°î
(0x350b, 0x00);

597 
	`£ns‹_wrôe_ªgi°î
(0x350c, 0x00);

598 
	`£ns‹_wrôe_ªgi°î
(0x350d, 0x00);

599 
	`£ns‹_wrôe_ªgi°î
(0x350e, 0x00);

600 
	`£ns‹_wrôe_ªgi°î
(0x350f, 0x80);

601 
	`£ns‹_wrôe_ªgi°î
(0x3510, 0x00);

602 
	`£ns‹_wrôe_ªgi°î
(0x3511, 0x00);

603 
	`£ns‹_wrôe_ªgi°î
(0x3512, 0x00);

604 
	`£ns‹_wrôe_ªgi°î
(0x3513, 0x00);

605 
	`£ns‹_wrôe_ªgi°î
(0x3514, 0x00);

606 
	`£ns‹_wrôe_ªgi°î
(0x3515, 0x80);

607 
	`£ns‹_wrôe_ªgi°î
(0x3516, 0x00);

608 
	`£ns‹_wrôe_ªgi°î
(0x3517, 0x00);

609 
	`£ns‹_wrôe_ªgi°î
(0x3518, 0x00);

610 
	`£ns‹_wrôe_ªgi°î
(0x3519, 0x00);

611 
	`£ns‹_wrôe_ªgi°î
(0x351a, 0x00);

612 
	`£ns‹_wrôe_ªgi°î
(0x351b, 0x80);

613 
	`£ns‹_wrôe_ªgi°î
(0x351c, 0x00);

614 
	`£ns‹_wrôe_ªgi°î
(0x351d, 0x00);

615 
	`£ns‹_wrôe_ªgi°î
(0x351e, 0x00);

616 
	`£ns‹_wrôe_ªgi°î
(0x351f, 0x00);

617 
	`£ns‹_wrôe_ªgi°î
(0x3520, 0x00);

618 
	`£ns‹_wrôe_ªgi°î
(0x3521, 0x80);

619 
	`£ns‹_wrôe_ªgi°î
(0x3522, 0x08);

620 
	`£ns‹_wrôe_ªgi°î
(0x3524, 0x08);

621 
	`£ns‹_wrôe_ªgi°î
(0x3526, 0x08);

622 
	`£ns‹_wrôe_ªgi°î
(0x3528, 0x08);

623 
	`£ns‹_wrôe_ªgi°î
(0x352a, 0x08);

624 
	`£ns‹_wrôe_ªgi°î
(0x3602, 0x00);

625 
	`£ns‹_wrôe_ªgi°î
(0x3604, 0x02);

626 
	`£ns‹_wrôe_ªgi°î
(0x3605, 0x00);

627 
	`£ns‹_wrôe_ªgi°î
(0x3606, 0x00);

628 
	`£ns‹_wrôe_ªgi°î
(0x3607, 0x00);

629 
	`£ns‹_wrôe_ªgi°î
(0x3609, 0x12);

630 
	`£ns‹_wrôe_ªgi°î
(0x360a, 0x40);

631 
	`£ns‹_wrôe_ªgi°î
(0x360c, 0x08);

632 
	`£ns‹_wrôe_ªgi°î
(0x360f, 0xe5);

633 
	`£ns‹_wrôe_ªgi°î
(0x3608, 0x8f);

634 
	`£ns‹_wrôe_ªgi°î
(0x3611, 0x00);

635 
	`£ns‹_wrôe_ªgi°î
(0x3613, 0xf7);

636 
	`£ns‹_wrôe_ªgi°î
(0x3616, 0x58);

637 
	`£ns‹_wrôe_ªgi°î
(0x3619, 0x99);

638 
	`£ns‹_wrôe_ªgi°î
(0x361b, 0x60);

639 
	`£ns‹_wrôe_ªgi°î
(0x361c, 0x7a);

640 
	`£ns‹_wrôe_ªgi°î
(0x361e, 0x79);

641 
	`£ns‹_wrôe_ªgi°î
(0x361f, 0x02);

642 
	`£ns‹_wrôe_ªgi°î
(0x3632, 0x00);

643 
	`£ns‹_wrôe_ªgi°î
(0x3633, 0x10);

644 
	`£ns‹_wrôe_ªgi°î
(0x3634, 0x10);

645 
	`£ns‹_wrôe_ªgi°î
(0x3635, 0x10);

646 
	`£ns‹_wrôe_ªgi°î
(0x3636, 0x15);

647 
	`£ns‹_wrôe_ªgi°î
(0x3646, 0x86);

648 
	`£ns‹_wrôe_ªgi°î
(0x364a, 0x0b);

649 
	`£ns‹_wrôe_ªgi°î
(0x3700, 0x17);

650 
	`£ns‹_wrôe_ªgi°î
(0x3701, 0x22);

651 
	`£ns‹_wrôe_ªgi°î
(0x3703, 0x10);

652 
	`£ns‹_wrôe_ªgi°î
(0x370a, 0x37);

653 
	`£ns‹_wrôe_ªgi°î
(0x3705, 0x00);

654 
	`£ns‹_wrôe_ªgi°î
(0x3706, 0x63);

655 
	`£ns‹_wrôe_ªgi°î
(0x3709, 0x3c);

656 
	`£ns‹_wrôe_ªgi°î
(0x370b, 0x01);

657 
	`£ns‹_wrôe_ªgi°î
(0x370c, 0x30);

658 
	`£ns‹_wrôe_ªgi°î
(0x3710, 0x24);

659 
	`£ns‹_wrôe_ªgi°î
(0x3711, 0x0c);

660 
	`£ns‹_wrôe_ªgi°î
(0x3716, 0x00);

661 
	`£ns‹_wrôe_ªgi°î
(0x3720, 0x28);

662 
	`£ns‹_wrôe_ªgi°î
(0x3729, 0x7b);

663 
	`£ns‹_wrôe_ªgi°î
(0x372a, 0x84);

664 
	`£ns‹_wrôe_ªgi°î
(0x372b, 0xbd);

665 
	`£ns‹_wrôe_ªgi°î
(0x372c, 0xbc);

666 
	`£ns‹_wrôe_ªgi°î
(0x372e, 0x52);

667 
	`£ns‹_wrôe_ªgi°î
(0x373c, 0x0e);

668 
	`£ns‹_wrôe_ªgi°î
(0x373e, 0x33);

669 
	`£ns‹_wrôe_ªgi°î
(0x3743, 0x10);

670 
	`£ns‹_wrôe_ªgi°î
(0x3744, 0x88);

671 
	`£ns‹_wrôe_ªgi°î
(0x3745, 0xc0);

672 
	`£ns‹_wrôe_ªgi°î
(0x374a, 0x43);

673 
	`£ns‹_wrôe_ªgi°î
(0x374c, 0x00);

674 
	`£ns‹_wrôe_ªgi°î
(0x374e, 0x23);

675 
	`£ns‹_wrôe_ªgi°î
(0x3751, 0x7b);

676 
	`£ns‹_wrôe_ªgi°î
(0x3752, 0x84);

677 
	`£ns‹_wrôe_ªgi°î
(0x3753, 0xbd);

678 
	`£ns‹_wrôe_ªgi°î
(0x3754, 0xbc);

679 
	`£ns‹_wrôe_ªgi°î
(0x3756, 0x52);

680 
	`£ns‹_wrôe_ªgi°î
(0x375c, 0x00);

681 
	`£ns‹_wrôe_ªgi°î
(0x3760, 0x00);

682 
	`£ns‹_wrôe_ªgi°î
(0x3761, 0x00);

683 
	`£ns‹_wrôe_ªgi°î
(0x3762, 0x00);

684 
	`£ns‹_wrôe_ªgi°î
(0x3763, 0x00);

685 
	`£ns‹_wrôe_ªgi°î
(0x3764, 0x00);

686 
	`£ns‹_wrôe_ªgi°î
(0x3767, 0x04);

687 
	`£ns‹_wrôe_ªgi°î
(0x3768, 0x04);

688 
	`£ns‹_wrôe_ªgi°î
(0x3769, 0x08);

689 
	`£ns‹_wrôe_ªgi°î
(0x376a, 0x08);

690 
	`£ns‹_wrôe_ªgi°î
(0x376b, 0x20);

691 
	`£ns‹_wrôe_ªgi°î
(0x376c, 0x00);

692 
	`£ns‹_wrôe_ªgi°î
(0x376d, 0x00);

693 
	`£ns‹_wrôe_ªgi°î
(0x376e, 0x00);

694 
	`£ns‹_wrôe_ªgi°î
(0x3773, 0x00);

695 
	`£ns‹_wrôe_ªgi°î
(0x3774, 0x51);

696 
	`£ns‹_wrôe_ªgi°î
(0x3776, 0xbd);

697 
	`£ns‹_wrôe_ªgi°î
(0x3777, 0xbd);

698 
	`£ns‹_wrôe_ªgi°î
(0x3781, 0x18);

699 
	`£ns‹_wrôe_ªgi°î
(0x3783, 0x25);

700 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x00);

701 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0x38);

702 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

703 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0x04);

704 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x0a);

705 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0x67);

706 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x05);

707 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0xfb);

708 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x0a);

709 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x20);

710 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x05);

711 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0xf0);

713 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x05);

714 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0xc0);

718 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x06);

719 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0x60);

721 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

722 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

723 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

724 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

725 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

726 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

727 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

728 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

729 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

730 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

731 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

732 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

733 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

734 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

735 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

736 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

737 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

738 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

739 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

740 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

741 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

742 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

743 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

744 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

745 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

746 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

747 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

748 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

749 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

750 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

751 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

752 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

753 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

754 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

755 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

756 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x08);

757 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0xB3);

758 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x09);

759 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0xE0);

760 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x09);

761 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0xF0);

762 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

763 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

764 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

765 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

766 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

767 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

768 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

769 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

770 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

771 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

772 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

773 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

774 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

775 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

776 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

777 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

778 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

779 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

780 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x41);

781 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

782 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

783 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

784 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

785 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x1a);

786 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

787 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

788 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

789 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

790 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

791 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

792 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

793 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

794 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

795 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

796 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

797 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

798 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

799 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

800 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

801 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

802 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

803 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

804 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

805 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

806 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

807 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

808 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

809 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

810 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

811 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

812 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

813 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

814 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

815 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

816 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

817 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

820 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

822 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

824 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

825 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

826 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

827 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

828 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

829 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

830 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

831 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

832 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

833 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

835 
bSís‹Inô
 = 
HI_TRUE
;

837 
	}
}

838 
	$£ns‹_öô_4M30
()

840 
	`u¶ìp
(200000);

841 
	`£ns‹_wrôe_ªgi°î
(0x0103,0x01);

843 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

844 
	`£ns‹_wrôe_ªgi°î
(0x0300,0x02);

845 
	`£ns‹_wrôe_ªgi°î
(0x0301,0x00);

846 
	`£ns‹_wrôe_ªgi°î
(0x0302,0xf4);

847 
	`£ns‹_wrôe_ªgi°î
(0x0303,0x03);

848 
	`£ns‹_wrôe_ªgi°î
(0x0304,0x03);

849 
	`£ns‹_wrôe_ªgi°î
(0x030A,0x01);

850 
	`£ns‹_wrôe_ªgi°î
(0x030b,0x00);

851 
	`£ns‹_wrôe_ªgi°î
(0x030d,0x1e);

852 
	`£ns‹_wrôe_ªgi°î
(0x030e,0x04);

853 
	`£ns‹_wrôe_ªgi°î
(0x030f,0x01);

854 
	`£ns‹_wrôe_ªgi°î
(0x0312,0x01);

855 
	`£ns‹_wrôe_ªgi°î
(0x031e,0x00);

856 
	`£ns‹_wrôe_ªgi°î
(0x3000,0x20);

857 
	`£ns‹_wrôe_ªgi°î
(0x3002,0x00);

858 
	`£ns‹_wrôe_ªgi°î
(0x3018,0x72);

859 
	`£ns‹_wrôe_ªgi°î
(0x3020,0x93);

860 
	`£ns‹_wrôe_ªgi°î
(0x3021,0x03);

861 
	`£ns‹_wrôe_ªgi°î
(0x3022,0x01);

862 
	`£ns‹_wrôe_ªgi°î
(0x3031,0x0a);

863 
	`£ns‹_wrôe_ªgi°î
(0x3305,0xf1);

864 
	`£ns‹_wrôe_ªgi°î
(0x3307,0x04);

865 
	`£ns‹_wrôe_ªgi°î
(0x3309,0x29);

866 
	`£ns‹_wrôe_ªgi°î
(0x3500,0x00);

867 
	`£ns‹_wrôe_ªgi°î
(0x3501,0x45);

868 
	`£ns‹_wrôe_ªgi°î
(0x3502,0xB0);

869 
	`£ns‹_wrôe_ªgi°î
(0x3503,0x77);

870 
	`£ns‹_wrôe_ªgi°î
(0x3504,0x00);

871 
	`£ns‹_wrôe_ªgi°î
(0x3505,0x00);

872 
	`£ns‹_wrôe_ªgi°î
(0x3506,0x00);

873 
	`£ns‹_wrôe_ªgi°î
(0x3507,0x00);

874 
	`£ns‹_wrôe_ªgi°î
(0x3508,0x00);

875 
	`£ns‹_wrôe_ªgi°î
(0x3509,0x80);

876 
	`£ns‹_wrôe_ªgi°î
(0x350a,0x00);

877 
	`£ns‹_wrôe_ªgi°î
(0x350b,0x00);

878 
	`£ns‹_wrôe_ªgi°î
(0x350c,0x00);

879 
	`£ns‹_wrôe_ªgi°î
(0x350d,0x00);

880 
	`£ns‹_wrôe_ªgi°î
(0x350e,0x00);

881 
	`£ns‹_wrôe_ªgi°î
(0x350f,0x80);

882 
	`£ns‹_wrôe_ªgi°î
(0x3510,0x00);

883 
	`£ns‹_wrôe_ªgi°î
(0x3511,0x00);

884 
	`£ns‹_wrôe_ªgi°î
(0x3512,0x00);

885 
	`£ns‹_wrôe_ªgi°î
(0x3513,0x00);

886 
	`£ns‹_wrôe_ªgi°î
(0x3514,0x00);

887 
	`£ns‹_wrôe_ªgi°î
(0x3515,0x80);

888 
	`£ns‹_wrôe_ªgi°î
(0x3516,0x00);

889 
	`£ns‹_wrôe_ªgi°î
(0x3517,0x00);

890 
	`£ns‹_wrôe_ªgi°î
(0x3518,0x00);

891 
	`£ns‹_wrôe_ªgi°î
(0x3519,0x00);

892 
	`£ns‹_wrôe_ªgi°î
(0x351a,0x00);

893 
	`£ns‹_wrôe_ªgi°î
(0x351b,0x80);

894 
	`£ns‹_wrôe_ªgi°î
(0x351c,0x00);

895 
	`£ns‹_wrôe_ªgi°î
(0x351d,0x00);

896 
	`£ns‹_wrôe_ªgi°î
(0x351e,0x00);

897 
	`£ns‹_wrôe_ªgi°î
(0x351f,0x00);

898 
	`£ns‹_wrôe_ªgi°î
(0x3520,0x00);

899 
	`£ns‹_wrôe_ªgi°î
(0x3521,0x80);

900 
	`£ns‹_wrôe_ªgi°î
(0x3522,0x08);

901 
	`£ns‹_wrôe_ªgi°î
(0x3524,0x08);

902 
	`£ns‹_wrôe_ªgi°î
(0x3526,0x08);

903 
	`£ns‹_wrôe_ªgi°î
(0x3528,0x08);

904 
	`£ns‹_wrôe_ªgi°î
(0x352a,0x08);

905 
	`£ns‹_wrôe_ªgi°î
(0x3602,0x00);

906 
	`£ns‹_wrôe_ªgi°î
(0x3604,0x02);

907 
	`£ns‹_wrôe_ªgi°î
(0x3605,0x00);

908 
	`£ns‹_wrôe_ªgi°î
(0x3606,0x00);

909 
	`£ns‹_wrôe_ªgi°î
(0x3607,0x00);

910 
	`£ns‹_wrôe_ªgi°î
(0x3609,0x12);

911 
	`£ns‹_wrôe_ªgi°î
(0x360a,0x40);

912 
	`£ns‹_wrôe_ªgi°î
(0x360c,0x08);

913 
	`£ns‹_wrôe_ªgi°î
(0x360f,0xe5);

914 
	`£ns‹_wrôe_ªgi°î
(0x3608,0x8f);

915 
	`£ns‹_wrôe_ªgi°î
(0x3611,0x00);

916 
	`£ns‹_wrôe_ªgi°î
(0x3613,0xf7);

917 
	`£ns‹_wrôe_ªgi°î
(0x3616,0x58);

918 
	`£ns‹_wrôe_ªgi°î
(0x3619,0x99);

919 
	`£ns‹_wrôe_ªgi°î
(0x361b,0x60);

920 
	`£ns‹_wrôe_ªgi°î
(0x361c,0x7a);

921 
	`£ns‹_wrôe_ªgi°î
(0x361e,0x79);

922 
	`£ns‹_wrôe_ªgi°î
(0x361f,0x02);

923 
	`£ns‹_wrôe_ªgi°î
(0x3632,0x00);

924 
	`£ns‹_wrôe_ªgi°î
(0x3633,0x10);

925 
	`£ns‹_wrôe_ªgi°î
(0x3634,0x10);

926 
	`£ns‹_wrôe_ªgi°î
(0x3635,0x10);

927 
	`£ns‹_wrôe_ªgi°î
(0x3636,0x15);

928 
	`£ns‹_wrôe_ªgi°î
(0x3646,0x86);

929 
	`£ns‹_wrôe_ªgi°î
(0x364a,0x0b);

930 
	`£ns‹_wrôe_ªgi°î
(0x3700,0x17);

931 
	`£ns‹_wrôe_ªgi°î
(0x3701,0x22);

932 
	`£ns‹_wrôe_ªgi°î
(0x3703,0x10);

933 
	`£ns‹_wrôe_ªgi°î
(0x370a,0x37);

934 
	`£ns‹_wrôe_ªgi°î
(0x3705,0x00);

935 
	`£ns‹_wrôe_ªgi°î
(0x3706,0x63);

936 
	`£ns‹_wrôe_ªgi°î
(0x3709,0x3c);

937 
	`£ns‹_wrôe_ªgi°î
(0x370b,0x01);

938 
	`£ns‹_wrôe_ªgi°î
(0x370c,0x30);

939 
	`£ns‹_wrôe_ªgi°î
(0x3710,0x24);

940 
	`£ns‹_wrôe_ªgi°î
(0x3711,0x0c);

941 
	`£ns‹_wrôe_ªgi°î
(0x3716,0x00);

942 
	`£ns‹_wrôe_ªgi°î
(0x3720,0x28);

943 
	`£ns‹_wrôe_ªgi°î
(0x3729,0x7b);

944 
	`£ns‹_wrôe_ªgi°î
(0x372a,0x84);

945 
	`£ns‹_wrôe_ªgi°î
(0x372b,0xbd);

946 
	`£ns‹_wrôe_ªgi°î
(0x372c,0xbc);

947 
	`£ns‹_wrôe_ªgi°î
(0x372e,0x52);

948 
	`£ns‹_wrôe_ªgi°î
(0x373c,0x0e);

949 
	`£ns‹_wrôe_ªgi°î
(0x373e,0x33);

950 
	`£ns‹_wrôe_ªgi°î
(0x3743,0x10);

951 
	`£ns‹_wrôe_ªgi°î
(0x3744,0x88);

952 
	`£ns‹_wrôe_ªgi°î
(0x3745,0xc0);

953 
	`£ns‹_wrôe_ªgi°î
(0x374a,0x43);

954 
	`£ns‹_wrôe_ªgi°î
(0x374c,0x00);

955 
	`£ns‹_wrôe_ªgi°î
(0x374e,0x23);

956 
	`£ns‹_wrôe_ªgi°î
(0x3751,0x7b);

957 
	`£ns‹_wrôe_ªgi°î
(0x3752,0x84);

958 
	`£ns‹_wrôe_ªgi°î
(0x3753,0xbd);

959 
	`£ns‹_wrôe_ªgi°î
(0x3754,0xbc);

960 
	`£ns‹_wrôe_ªgi°î
(0x3756,0x52);

961 
	`£ns‹_wrôe_ªgi°î
(0x375c,0x00);

962 
	`£ns‹_wrôe_ªgi°î
(0x3760,0x00);

963 
	`£ns‹_wrôe_ªgi°î
(0x3761,0x00);

964 
	`£ns‹_wrôe_ªgi°î
(0x3762,0x00);

965 
	`£ns‹_wrôe_ªgi°î
(0x3763,0x00);

966 
	`£ns‹_wrôe_ªgi°î
(0x3764,0x00);

967 
	`£ns‹_wrôe_ªgi°î
(0x3767,0x04);

968 
	`£ns‹_wrôe_ªgi°î
(0x3768,0x04);

969 
	`£ns‹_wrôe_ªgi°î
(0x3769,0x08);

970 
	`£ns‹_wrôe_ªgi°î
(0x376a,0x08);

971 
	`£ns‹_wrôe_ªgi°î
(0x376b,0x20);

972 
	`£ns‹_wrôe_ªgi°î
(0x376c,0x00);

973 
	`£ns‹_wrôe_ªgi°î
(0x376d,0x00);

974 
	`£ns‹_wrôe_ªgi°î
(0x376e,0x00);

975 
	`£ns‹_wrôe_ªgi°î
(0x3773,0x00);

976 
	`£ns‹_wrôe_ªgi°î
(0x3774,0x51);

977 
	`£ns‹_wrôe_ªgi°î
(0x3776,0xbd);

978 
	`£ns‹_wrôe_ªgi°î
(0x3777,0xbd);

979 
	`£ns‹_wrôe_ªgi°î
(0x3781,0x18);

980 
	`£ns‹_wrôe_ªgi°î
(0x3783,0x25);

981 
	`£ns‹_wrôe_ªgi°î
(0x3800,0x00);

982 
	`£ns‹_wrôe_ªgi°î
(0x3801,0x38);

983 
	`£ns‹_wrôe_ªgi°î
(0x3802,0x00);

984 
	`£ns‹_wrôe_ªgi°î
(0x3803,0x04);

985 
	`£ns‹_wrôe_ªgi°î
(0x3804,0x0a);

986 
	`£ns‹_wrôe_ªgi°î
(0x3805,0x67);

987 
	`£ns‹_wrôe_ªgi°î
(0x3806,0x05);

988 
	`£ns‹_wrôe_ªgi°î
(0x3807,0xfb);

989 
	`£ns‹_wrôe_ªgi°î
(0x3808,0x0a);

990 
	`£ns‹_wrôe_ªgi°î
(0x3809,0x20);

991 
	`£ns‹_wrôe_ªgi°î
(0x380a,0x05);

992 
	`£ns‹_wrôe_ªgi°î
(0x380b,0xf0);

993 
	`£ns‹_wrôe_ªgi°î
(0x380c,0x09);

994 
	`£ns‹_wrôe_ªgi°î
(0x380d,0x94);

995 
	`£ns‹_wrôe_ªgi°î
(0x380e,0x06);

996 
	`£ns‹_wrôe_ªgi°î
(0x380f,0x60);

997 
	`£ns‹_wrôe_ªgi°î
(0x3810,0x00);

998 
	`£ns‹_wrôe_ªgi°î
(0x3811,0x08);

999 
	`£ns‹_wrôe_ªgi°î
(0x3812,0x00);

1000 
	`£ns‹_wrôe_ªgi°î
(0x3813,0x04);

1001 
	`£ns‹_wrôe_ªgi°î
(0x3814,0x01);

1002 
	`£ns‹_wrôe_ªgi°î
(0x3815,0x01);

1003 
	`£ns‹_wrôe_ªgi°î
(0x3819,0x01);

1004 
	`£ns‹_wrôe_ªgi°î
(0x3820,0x00);

1005 
	`£ns‹_wrôe_ªgi°î
(0x3821,0x06);

1006 
	`£ns‹_wrôe_ªgi°î
(0x3829,0x00);

1007 
	`£ns‹_wrôe_ªgi°î
(0x382a,0x01);

1008 
	`£ns‹_wrôe_ªgi°î
(0x382b,0x01);

1009 
	`£ns‹_wrôe_ªgi°î
(0x382d,0x7f);

1010 
	`£ns‹_wrôe_ªgi°î
(0x3830,0x04);

1011 
	`£ns‹_wrôe_ªgi°î
(0x3836,0x01);

1012 
	`£ns‹_wrôe_ªgi°î
(0x3841,0x02);

1013 
	`£ns‹_wrôe_ªgi°î
(0x3846,0x08);

1014 
	`£ns‹_wrôe_ªgi°î
(0x3847,0x07);

1015 
	`£ns‹_wrôe_ªgi°î
(0x3d85,0x36);

1016 
	`£ns‹_wrôe_ªgi°î
(0x3d8c,0x71);

1017 
	`£ns‹_wrôe_ªgi°î
(0x3d8d,0xcb);

1018 
	`£ns‹_wrôe_ªgi°î
(0x3f0a,0x00);

1019 
	`£ns‹_wrôe_ªgi°î
(0x4000,0x71);

1020 
	`£ns‹_wrôe_ªgi°î
(0x4001,0x40);

1021 
	`£ns‹_wrôe_ªgi°î
(0x4002,0x04);

1022 
	`£ns‹_wrôe_ªgi°î
(0x4003,0x14);

1023 
	`£ns‹_wrôe_ªgi°î
(0x400e,0x00);

1024 
	`£ns‹_wrôe_ªgi°î
(0x4011,0x00);

1025 
	`£ns‹_wrôe_ªgi°î
(0x401a,0x00);

1026 
	`£ns‹_wrôe_ªgi°î
(0x401b,0x00);

1027 
	`£ns‹_wrôe_ªgi°î
(0x401c,0x00);

1028 
	`£ns‹_wrôe_ªgi°î
(0x401d,0x00);

1029 
	`£ns‹_wrôe_ªgi°î
(0x401f,0x00);

1030 
	`£ns‹_wrôe_ªgi°î
(0x4020,0x00);

1031 
	`£ns‹_wrôe_ªgi°î
(0x4021,0x10);

1032 
	`£ns‹_wrôe_ªgi°î
(0x4022,0x06);

1033 
	`£ns‹_wrôe_ªgi°î
(0x4023,0x13);

1034 
	`£ns‹_wrôe_ªgi°î
(0x4024,0x07);

1035 
	`£ns‹_wrôe_ªgi°î
(0x4025,0x40);

1036 
	`£ns‹_wrôe_ªgi°î
(0x4026,0x07);

1037 
	`£ns‹_wrôe_ªgi°î
(0x4027,0x50);

1038 
	`£ns‹_wrôe_ªgi°î
(0x4028,0x00);

1039 
	`£ns‹_wrôe_ªgi°î
(0x4029,0x02);

1040 
	`£ns‹_wrôe_ªgi°î
(0x402a,0x06);

1041 
	`£ns‹_wrôe_ªgi°î
(0x402b,0x04);

1042 
	`£ns‹_wrôe_ªgi°î
(0x402c,0x02);

1043 
	`£ns‹_wrôe_ªgi°î
(0x402d,0x02);

1044 
	`£ns‹_wrôe_ªgi°î
(0x402e,0x0e);

1045 
	`£ns‹_wrôe_ªgi°î
(0x402f,0x04);

1046 
	`£ns‹_wrôe_ªgi°î
(0x4302,0xff);

1047 
	`£ns‹_wrôe_ªgi°î
(0x4303,0xff);

1048 
	`£ns‹_wrôe_ªgi°î
(0x4304,0x00);

1049 
	`£ns‹_wrôe_ªgi°î
(0x4305,0x00);

1050 
	`£ns‹_wrôe_ªgi°î
(0x4306,0x00);

1051 
	`£ns‹_wrôe_ªgi°î
(0x4308,0x02);

1052 
	`£ns‹_wrôe_ªgi°î
(0x4500,0x6c);

1053 
	`£ns‹_wrôe_ªgi°î
(0x4501,0xc4);

1054 
	`£ns‹_wrôe_ªgi°î
(0x4502,0x40);

1055 
	`£ns‹_wrôe_ªgi°î
(0x4503,0x01);

1056 
	`£ns‹_wrôe_ªgi°î
(0x4601,0x41);

1057 
	`£ns‹_wrôe_ªgi°î
(0x4800,0x04);

1058 
	`£ns‹_wrôe_ªgi°î
(0x4813,0x08);

1059 
	`£ns‹_wrôe_ªgi°î
(0x481f,0x40);

1060 
	`£ns‹_wrôe_ªgi°î
(0x4829,0x78);

1061 
	`£ns‹_wrôe_ªgi°î
(0x4837,0x56);

1062 
	`£ns‹_wrôe_ªgi°î
(0x4b00,0x2a);

1063 
	`£ns‹_wrôe_ªgi°î
(0x4b0d,0x00);

1064 
	`£ns‹_wrôe_ªgi°î
(0x4d00,0x04);

1065 
	`£ns‹_wrôe_ªgi°î
(0x4d01,0x42);

1066 
	`£ns‹_wrôe_ªgi°î
(0x4d02,0xd1);

1067 
	`£ns‹_wrôe_ªgi°î
(0x4d03,0x93);

1068 
	`£ns‹_wrôe_ªgi°î
(0x4d04,0xf5);

1069 
	`£ns‹_wrôe_ªgi°î
(0x4d05,0xc1);

1070 
	`£ns‹_wrôe_ªgi°î
(0x5000,0xf3);

1071 
	`£ns‹_wrôe_ªgi°î
(0x5001,0x11);

1072 
	`£ns‹_wrôe_ªgi°î
(0x5004,0x00);

1073 
	`£ns‹_wrôe_ªgi°î
(0x500a,0x00);

1074 
	`£ns‹_wrôe_ªgi°î
(0x500b,0x00);

1075 
	`£ns‹_wrôe_ªgi°î
(0x5032,0x00);

1076 
	`£ns‹_wrôe_ªgi°î
(0x5040,0x00);

1077 
	`£ns‹_wrôe_ªgi°î
(0x5050,0x0c);

1078 
	`£ns‹_wrôe_ªgi°î
(0x8000,0x00);

1079 
	`£ns‹_wrôe_ªgi°î
(0x8001,0x00);

1080 
	`£ns‹_wrôe_ªgi°î
(0x8002,0x00);

1081 
	`£ns‹_wrôe_ªgi°î
(0x8003,0x00);

1082 
	`£ns‹_wrôe_ªgi°î
(0x8004,0x00);

1083 
	`£ns‹_wrôe_ªgi°î
(0x8005,0x00);

1084 
	`£ns‹_wrôe_ªgi°î
(0x8006,0x00);

1085 
	`£ns‹_wrôe_ªgi°î
(0x8007,0x00);

1086 
	`£ns‹_wrôe_ªgi°î
(0x8008,0x00);

1087 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

1088 
	`£ns‹_wrôe_ªgi°î
(0x3105,0x31);

1089 
	`£ns‹_wrôe_ªgi°î
(0x301a,0xf9);

1090 
	`£ns‹_wrôe_ªgi°î
(0x3508,0x07);

1091 
	`£ns‹_wrôe_ªgi°î
(0x484b,0x05);

1092 
	`£ns‹_wrôe_ªgi°î
(0x4805,0x03);

1093 
	`£ns‹_wrôe_ªgi°î
(0x3601,0x01);

1094 
	`£ns‹_wrôe_ªgi°î
(0x0100,0x01);

1096 
	`u¶ìp
(10000);

1097 
	`£ns‹_wrôe_ªgi°î
(0x3105,0x11);

1098 
	`£ns‹_wrôe_ªgi°î
(0x301a,0xf1);

1099 
	`£ns‹_wrôe_ªgi°î
(0x4805,0x00);

1100 
	`£ns‹_wrôe_ªgi°î
(0x301a,0xf0);

1101 
	`£ns‹_wrôe_ªgi°î
(0x3208,0x00);

1102 
	`£ns‹_wrôe_ªgi°î
(0x302a,0x00);

1103 
	`£ns‹_wrôe_ªgi°î
(0x302a,0x00);

1104 
	`£ns‹_wrôe_ªgi°î
(0x302a,0x00);

1105 
	`£ns‹_wrôe_ªgi°î
(0x302a,0x00);

1106 
	`£ns‹_wrôe_ªgi°î
(0x302a,0x00);

1107 
	`£ns‹_wrôe_ªgi°î
(0x3601,0x00);

1108 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

1109 
	`£ns‹_wrôe_ªgi°î
(0x3208,0x10);

1110 
	`£ns‹_wrôe_ªgi°î
(0x3208,0xa0);

1112 
bSís‹Inô
 = 
HI_TRUE
;

1113 
	`¥ötf
("-------OV4689 Sensor 4M30fps Initial OK!-------\n");

1114 
	}
}

1116 
	$£ns‹_wdr_4M_25_öô
()

1119 
	`£ns‹_öô_4M50
();

1120 
	`£ns‹_íabÀ_wdr_mode
();

1122 
bSís‹Inô
 = 
HI_TRUE
;

1124 
	`¥ötf
("-------OV4689 Sensor 4M25fps WDR Initial OK!-------\n");

1125 
	}
}

1127 
	$£ns‹_wdr_4M_15_öô
()

1129 
	`£ns‹_öô_4M30
();

1130 
	`£ns‹_íabÀ_wdr_mode
();

1131 
	`¥ötf
("--------ov4689 4M15fps WDR init ok!---------\n");

1132 
	}
}

1134 
	$£ns‹_löór_1080p60_öô
()

1136 
	`u¶ìp
(200000);

1137 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

1139 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1140 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x02);

1141 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

1142 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0xf4);

1143 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x03);

1144 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

1145 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x01);

1146 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

1147 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

1148 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

1149 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

1150 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

1151 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

1152 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

1153 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

1154 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

1155 
	`£ns‹_öô_comm_fú°
();

1156 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x01);

1157 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0x88);

1158 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

1159 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0xe0);

1160 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x09);

1161 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0x17);

1162 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x05);

1163 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0x1f);

1164 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x07);

1165 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x80);

1166 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x04);

1167 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0x38);

1168 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x06);

1169 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0xF4);

1170 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x04);

1171 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0x63);

1173 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

1174 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

1175 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

1176 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

1177 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

1178 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

1179 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

1180 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

1181 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

1182 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

1183 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

1184 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

1185 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

1186 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

1187 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

1188 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

1189 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

1190 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

1191 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

1192 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

1193 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

1194 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

1195 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

1196 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

1197 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

1198 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

1199 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

1200 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

1201 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

1202 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

1203 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

1204 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

1205 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

1206 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

1207 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

1208 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x06);

1209 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0x13);

1210 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x07);

1211 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0x40);

1212 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x07);

1213 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0x50);

1214 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

1215 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

1216 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

1217 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

1218 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

1219 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

1220 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

1221 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

1222 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

1223 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

1224 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

1225 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

1226 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

1227 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

1228 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

1229 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

1230 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

1231 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

1232 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x77);

1233 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

1234 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

1235 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

1236 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

1237 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x56);

1238 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

1239 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

1240 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

1241 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

1242 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

1243 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

1244 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

1245 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

1246 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

1247 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

1248 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

1249 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

1250 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

1251 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

1252 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

1253 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

1254 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

1255 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

1256 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

1257 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

1258 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

1259 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

1260 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

1261 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

1262 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

1263 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1264 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

1265 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

1266 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

1267 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

1268 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

1269 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

1270 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

1271 
	`dñay_ms
(10);

1272 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

1273 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf1);

1274 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

1275 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf0);

1276 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

1277 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1278 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1279 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1280 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1281 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1282 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

1283 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1284 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

1285 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

1286 
bSís‹Inô
 = 
HI_TRUE
;

1287 
	`¥ötf
("-------OV4689 Sensor 1080P 60fps Linear Mode Initial OK!-------\n");

1288 
	}
}

1290 
	$£ns‹_wdr_1080p30_öô
()

1292 
	`u¶ìp
(200000);

1293 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

1295 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1296 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x00);

1297 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

1298 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0x19);

1299 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x00);

1300 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

1301 
	`£ns‹_wrôe_ªgi°î
(0x0305, 0x01);

1302 
	`£ns‹_wrôe_ªgi°î
(0x0306, 0x01);

1303 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x00);

1304 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

1305 
	`£ns‹_wrôe_ªgi°î
(0x030c, 0x00);

1306 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

1307 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

1308 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

1309 
	`£ns‹_wrôe_ªgi°î
(0x0311, 0x00);

1310 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

1311 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

1312 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

1313 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

1314 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

1315 
	`£ns‹_öô_comm_fú°
();

1316 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x01);

1317 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0x88);

1318 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

1319 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0xe0);

1320 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x09);

1321 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0x17);

1322 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x05);

1323 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0x1f);

1324 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x07);

1325 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x80);

1326 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x04);

1327 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0x38);

1328 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x05);

1329 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0xF4);

1330 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x05);

1331 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0x20);

1333 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

1334 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

1335 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

1336 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

1337 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

1338 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

1339 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

1340 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

1341 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

1342 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

1343 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

1344 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

1345 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

1346 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

1347 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

1348 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

1349 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

1350 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

1351 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

1352 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

1353 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

1354 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

1355 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

1356 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

1357 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

1358 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

1359 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

1360 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

1361 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

1362 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

1363 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

1364 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

1365 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

1366 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

1367 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

1368 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x06);

1369 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0x13);

1370 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x07);

1371 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0x40);

1372 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x07);

1373 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0x50);

1374 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

1375 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

1376 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

1377 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

1378 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

1379 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

1380 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

1381 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

1382 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

1383 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

1384 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

1385 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

1386 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

1387 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

1388 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

1389 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

1390 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

1391 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

1392 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x41);

1393 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

1394 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

1395 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

1396 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

1397 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x1a);

1398 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

1399 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

1400 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

1401 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

1402 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

1403 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

1404 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

1405 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

1406 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

1407 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

1408 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

1409 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

1410 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

1411 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

1412 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

1413 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

1414 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

1415 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

1416 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

1417 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

1418 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

1419 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

1420 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

1421 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

1422 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

1423 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1424 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

1425 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

1426 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

1427 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

1428 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

1429 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

1431 
	`dñay_ms
(10);

1432 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

1434 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

1436 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

1437 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1438 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1439 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1440 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1441 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1442 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

1443 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1444 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

1445 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

1448 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x03);

1449 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

1450 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

1451 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x0C);

1452 
	`£ns‹_wrôe_ªgi°î
(0x376e, 0x01);

1453 
	`£ns‹_wrôe_ªgi°î
(0x350B, 0x08);

1454 
	`£ns‹_wrôe_ªgi°î
(0x3511, 0x01);

1455 
	`£ns‹_wrôe_ªgi°î
(0x3517, 0x00);

1456 
	`£ns‹_wrôe_ªgi°î
(0x351d, 0x00);

1457 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

1459 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

1460 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

1462 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf1);

1463 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

1464 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf0);

1465 
bSís‹Inô
 = 
HI_TRUE
;

1466 
	`¥ötf
("-------OV4689 Sensor 1080P 30fps WDR Mode Initial OK!-------\n");

1467 
	}
}

1469 
	$£ns‹_löór_1080p30_öô
()

1471 
	`u¶ìp
(200000);

1472 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

1474 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1475 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x02);

1476 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

1477 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0x7C);

1478 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x03);

1479 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

1480 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x01);

1481 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

1482 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

1483 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

1484 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x03);

1485 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

1486 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

1487 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

1488 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

1489 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

1490 
	`£ns‹_öô_comm_fú°
();

1491 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x01);

1492 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0x88);

1493 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

1494 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0xe0);

1495 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x09);

1496 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0x17);

1497 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x05);

1498 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0x1f);

1499 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x07);

1500 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x80);

1501 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x04);

1502 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0x38);

1503 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x06);

1504 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0xF4);

1505 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x04);

1506 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0x63);

1508 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

1509 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

1510 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

1511 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

1512 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

1513 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

1514 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

1515 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

1516 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

1517 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

1518 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

1519 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

1520 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

1521 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

1522 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

1523 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

1524 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

1525 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

1526 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

1527 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

1528 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

1529 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

1530 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

1531 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

1532 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

1533 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

1534 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

1535 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

1536 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

1537 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

1538 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

1539 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

1540 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

1541 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

1542 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

1543 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x06);

1544 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0x13);

1545 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x07);

1546 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0x40);

1547 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x07);

1548 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0x50);

1549 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

1550 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

1551 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

1552 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

1553 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

1554 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

1555 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

1556 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

1557 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

1558 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

1559 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

1560 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

1561 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

1562 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

1563 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

1564 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

1565 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

1566 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

1567 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x77);

1568 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

1569 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

1570 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

1571 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

1572 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x56);

1573 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

1574 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

1575 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

1576 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

1577 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

1578 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

1579 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

1580 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

1581 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

1582 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

1583 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

1584 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

1585 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

1586 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

1587 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

1588 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

1589 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

1590 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

1591 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

1592 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

1593 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

1594 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

1595 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

1596 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

1597 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

1598 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1599 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

1600 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

1601 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

1602 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

1603 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

1604 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

1605 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

1606 
	`dñay_ms
(10);

1607 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

1608 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf1);

1609 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

1610 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf0);

1611 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

1612 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1613 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1614 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1615 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1616 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1617 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

1618 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1619 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

1620 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

1621 
bSís‹Inô
 = 
HI_TRUE
;

1622 
	`¥ötf
("-------OV4689 Sensor 1080P 30fps Linear Mode Initial OK!-------\n");

1624 
	}
}

1626 
	$£ns‹_wdr_2304_1296_30_öô
()

1628 
	`u¶ìp
(200000);

1629 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

1631 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1632 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x00);

1633 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

1634 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0x19);

1635 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x00);

1636 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

1637 
	`£ns‹_wrôe_ªgi°î
(0x0305, 0x01);

1638 
	`£ns‹_wrôe_ªgi°î
(0x0306, 0x01);

1639 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x00);

1640 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

1641 
	`£ns‹_wrôe_ªgi°î
(0x030c, 0x00);

1642 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

1643 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

1644 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

1647 
	`£ns‹_wrôe_ªgi°î
(0x0311, 0x00);

1648 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

1649 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

1650 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

1651 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

1652 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

1653 
	`£ns‹_wrôe_ªgi°î
(0x3020, 0x93);

1654 
	`£ns‹_wrôe_ªgi°î
(0x3021, 0x03);

1655 
	`£ns‹_wrôe_ªgi°î
(0x3022, 0x01);

1656 
	`£ns‹_wrôe_ªgi°î
(0x3031, 0x0a);

1657 
	`£ns‹_wrôe_ªgi°î
(0x3305, 0xf1);

1658 
	`£ns‹_wrôe_ªgi°î
(0x3307, 0x04);

1659 
	`£ns‹_wrôe_ªgi°î
(0x3309, 0x29);

1660 
	`£ns‹_wrôe_ªgi°î
(0x3500, 0x00);

1661 
	`£ns‹_wrôe_ªgi°î
(0x3501, 0x45);

1662 
	`£ns‹_wrôe_ªgi°î
(0x3502, 0xB0);

1663 
	`£ns‹_wrôe_ªgi°î
(0x3503, 0x77);

1664 
	`£ns‹_wrôe_ªgi°î
(0x3504, 0x00);

1665 
	`£ns‹_wrôe_ªgi°î
(0x3505, 0x00);

1666 
	`£ns‹_wrôe_ªgi°î
(0x3506, 0x00);

1667 
	`£ns‹_wrôe_ªgi°î
(0x3507, 0x00);

1668 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x00);

1669 
	`£ns‹_wrôe_ªgi°î
(0x3509, 0x80);

1670 
	`£ns‹_wrôe_ªgi°î
(0x350a, 0x00);

1671 
	`£ns‹_wrôe_ªgi°î
(0x350b, 0x00);

1672 
	`£ns‹_wrôe_ªgi°î
(0x350c, 0x00);

1673 
	`£ns‹_wrôe_ªgi°î
(0x350d, 0x00);

1674 
	`£ns‹_wrôe_ªgi°î
(0x350e, 0x00);

1675 
	`£ns‹_wrôe_ªgi°î
(0x350f, 0x80);

1676 
	`£ns‹_wrôe_ªgi°î
(0x3510, 0x00);

1677 
	`£ns‹_wrôe_ªgi°î
(0x3511, 0x00);

1678 
	`£ns‹_wrôe_ªgi°î
(0x3512, 0x00);

1679 
	`£ns‹_wrôe_ªgi°î
(0x3513, 0x00);

1680 
	`£ns‹_wrôe_ªgi°î
(0x3514, 0x00);

1681 
	`£ns‹_wrôe_ªgi°î
(0x3515, 0x80);

1682 
	`£ns‹_wrôe_ªgi°î
(0x3516, 0x00);

1683 
	`£ns‹_wrôe_ªgi°î
(0x3517, 0x00);

1684 
	`£ns‹_wrôe_ªgi°î
(0x3518, 0x00);

1685 
	`£ns‹_wrôe_ªgi°î
(0x3519, 0x00);

1686 
	`£ns‹_wrôe_ªgi°î
(0x351a, 0x00);

1687 
	`£ns‹_wrôe_ªgi°î
(0x351b, 0x80);

1688 
	`£ns‹_wrôe_ªgi°î
(0x351c, 0x00);

1689 
	`£ns‹_wrôe_ªgi°î
(0x351d, 0x00);

1690 
	`£ns‹_wrôe_ªgi°î
(0x351e, 0x00);

1691 
	`£ns‹_wrôe_ªgi°î
(0x351f, 0x00);

1692 
	`£ns‹_wrôe_ªgi°î
(0x3520, 0x00);

1693 
	`£ns‹_wrôe_ªgi°î
(0x3521, 0x80);

1694 
	`£ns‹_wrôe_ªgi°î
(0x3522, 0x08);

1695 
	`£ns‹_wrôe_ªgi°î
(0x3524, 0x08);

1696 
	`£ns‹_wrôe_ªgi°î
(0x3526, 0x08);

1697 
	`£ns‹_wrôe_ªgi°î
(0x3528, 0x08);

1698 
	`£ns‹_wrôe_ªgi°î
(0x352a, 0x08);

1699 
	`£ns‹_wrôe_ªgi°î
(0x3602, 0x00);

1700 
	`£ns‹_wrôe_ªgi°î
(0x3604, 0x02);

1701 
	`£ns‹_wrôe_ªgi°î
(0x3605, 0x00);

1702 
	`£ns‹_wrôe_ªgi°î
(0x3606, 0x00);

1703 
	`£ns‹_wrôe_ªgi°î
(0x3607, 0x00);

1704 
	`£ns‹_wrôe_ªgi°î
(0x3609, 0x12);

1705 
	`£ns‹_wrôe_ªgi°î
(0x360a, 0x40);

1706 
	`£ns‹_wrôe_ªgi°î
(0x360c, 0x08);

1707 
	`£ns‹_wrôe_ªgi°î
(0x360f, 0xe5);

1708 
	`£ns‹_wrôe_ªgi°î
(0x3608, 0x8f);

1709 
	`£ns‹_wrôe_ªgi°î
(0x3611, 0x00);

1710 
	`£ns‹_wrôe_ªgi°î
(0x3613, 0xf7);

1711 
	`£ns‹_wrôe_ªgi°î
(0x3616, 0x58);

1712 
	`£ns‹_wrôe_ªgi°î
(0x3619, 0x99);

1713 
	`£ns‹_wrôe_ªgi°î
(0x361b, 0x60);

1714 
	`£ns‹_wrôe_ªgi°î
(0x361c, 0x7a);

1715 
	`£ns‹_wrôe_ªgi°î
(0x361e, 0x79);

1716 
	`£ns‹_wrôe_ªgi°î
(0x361f, 0x02);

1717 
	`£ns‹_wrôe_ªgi°î
(0x3632, 0x00);

1718 
	`£ns‹_wrôe_ªgi°î
(0x3633, 0x10);

1719 
	`£ns‹_wrôe_ªgi°î
(0x3634, 0x10);

1720 
	`£ns‹_wrôe_ªgi°î
(0x3635, 0x10);

1721 
	`£ns‹_wrôe_ªgi°î
(0x3636, 0x15);

1722 
	`£ns‹_wrôe_ªgi°î
(0x3646, 0x86);

1723 
	`£ns‹_wrôe_ªgi°î
(0x364a, 0x0b);

1724 
	`£ns‹_wrôe_ªgi°î
(0x3700, 0x17);

1725 
	`£ns‹_wrôe_ªgi°î
(0x3701, 0x22);

1726 
	`£ns‹_wrôe_ªgi°î
(0x3703, 0x10);

1727 
	`£ns‹_wrôe_ªgi°î
(0x370a, 0x37);

1728 
	`£ns‹_wrôe_ªgi°î
(0x3705, 0x00);

1729 
	`£ns‹_wrôe_ªgi°î
(0x3706, 0x63);

1730 
	`£ns‹_wrôe_ªgi°î
(0x3709, 0x3c);

1731 
	`£ns‹_wrôe_ªgi°î
(0x370b, 0x01);

1732 
	`£ns‹_wrôe_ªgi°î
(0x370c, 0x30);

1733 
	`£ns‹_wrôe_ªgi°î
(0x3710, 0x24);

1734 
	`£ns‹_wrôe_ªgi°î
(0x3711, 0x0c);

1735 
	`£ns‹_wrôe_ªgi°î
(0x3716, 0x00);

1736 
	`£ns‹_wrôe_ªgi°î
(0x3720, 0x28);

1737 
	`£ns‹_wrôe_ªgi°î
(0x3729, 0x7b);

1738 
	`£ns‹_wrôe_ªgi°î
(0x372a, 0x84);

1739 
	`£ns‹_wrôe_ªgi°î
(0x372b, 0xbd);

1740 
	`£ns‹_wrôe_ªgi°î
(0x372c, 0xbc);

1741 
	`£ns‹_wrôe_ªgi°î
(0x372e, 0x52);

1742 
	`£ns‹_wrôe_ªgi°î
(0x373c, 0x0e);

1743 
	`£ns‹_wrôe_ªgi°î
(0x373e, 0x33);

1744 
	`£ns‹_wrôe_ªgi°î
(0x3743, 0x10);

1745 
	`£ns‹_wrôe_ªgi°î
(0x3744, 0x88);

1746 
	`£ns‹_wrôe_ªgi°î
(0x3745, 0xc0);

1747 
	`£ns‹_wrôe_ªgi°î
(0x374a, 0x43);

1748 
	`£ns‹_wrôe_ªgi°î
(0x374c, 0x00);

1749 
	`£ns‹_wrôe_ªgi°î
(0x374e, 0x23);

1750 
	`£ns‹_wrôe_ªgi°î
(0x3751, 0x7b);

1751 
	`£ns‹_wrôe_ªgi°î
(0x3752, 0x84);

1752 
	`£ns‹_wrôe_ªgi°î
(0x3753, 0xbd);

1753 
	`£ns‹_wrôe_ªgi°î
(0x3754, 0xbc);

1754 
	`£ns‹_wrôe_ªgi°î
(0x3756, 0x52);

1755 
	`£ns‹_wrôe_ªgi°î
(0x375c, 0x00);

1756 
	`£ns‹_wrôe_ªgi°î
(0x3760, 0x00);

1757 
	`£ns‹_wrôe_ªgi°î
(0x3761, 0x00);

1758 
	`£ns‹_wrôe_ªgi°î
(0x3762, 0x00);

1759 
	`£ns‹_wrôe_ªgi°î
(0x3763, 0x00);

1760 
	`£ns‹_wrôe_ªgi°î
(0x3764, 0x00);

1761 
	`£ns‹_wrôe_ªgi°î
(0x3767, 0x04);

1762 
	`£ns‹_wrôe_ªgi°î
(0x3768, 0x04);

1763 
	`£ns‹_wrôe_ªgi°î
(0x3769, 0x08);

1764 
	`£ns‹_wrôe_ªgi°î
(0x376a, 0x08);

1765 
	`£ns‹_wrôe_ªgi°î
(0x376b, 0x20);

1766 
	`£ns‹_wrôe_ªgi°î
(0x376c, 0x00);

1767 
	`£ns‹_wrôe_ªgi°î
(0x376d, 0x00);

1768 
	`£ns‹_wrôe_ªgi°î
(0x376e, 0x00);

1769 
	`£ns‹_wrôe_ªgi°î
(0x3773, 0x00);

1770 
	`£ns‹_wrôe_ªgi°î
(0x3774, 0x51);

1771 
	`£ns‹_wrôe_ªgi°î
(0x3776, 0xbd);

1772 
	`£ns‹_wrôe_ªgi°î
(0x3777, 0xbd);

1773 
	`£ns‹_wrôe_ªgi°î
(0x3781, 0x18);

1774 
	`£ns‹_wrôe_ªgi°î
(0x3783, 0x25);

1776 
	`£ns‹_wrôe_ªgi°î
(0x3800,0x00);

1777 
	`£ns‹_wrôe_ªgi°î
(0x3801,0xc8);

1778 
	`£ns‹_wrôe_ªgi°î
(0x3802,0x00);

1779 
	`£ns‹_wrôe_ªgi°î
(0x3803,0x74);

1780 
	`£ns‹_wrôe_ªgi°î
(0x3804,0x09);

1781 
	`£ns‹_wrôe_ªgi°î
(0x3805,0xd7);

1782 
	`£ns‹_wrôe_ªgi°î
(0x3806,0x05);

1783 
	`£ns‹_wrôe_ªgi°î
(0x3807,0x8b);

1784 
	`£ns‹_wrôe_ªgi°î
(0x3808,0x09);

1785 
	`£ns‹_wrôe_ªgi°î
(0x3809,0x00);

1786 
	`£ns‹_wrôe_ªgi°î
(0x380a,0x05);

1787 
	`£ns‹_wrôe_ªgi°î
(0x380b,0x10);

1788 
	`£ns‹_wrôe_ªgi°î
(0x380c,0x05);

1789 
	`£ns‹_wrôe_ªgi°î
(0x380d,0xee);

1790 
	`£ns‹_wrôe_ªgi°î
(0x380e,0x05);

1791 
	`£ns‹_wrôe_ªgi°î
(0x380f,0x2f);

1792 
	`£ns‹_wrôe_ªgi°î
(0x3810,0x00);

1793 
	`£ns‹_wrôe_ªgi°î
(0x3811,0x08);

1794 
	`£ns‹_wrôe_ªgi°î
(0x3812,0x00);

1795 
	`£ns‹_wrôe_ªgi°î
(0x3813,0x04);

1797 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

1798 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

1799 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

1800 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

1801 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

1802 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

1803 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

1804 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

1805 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

1806 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

1807 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

1808 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

1809 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

1810 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

1811 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

1812 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

1813 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

1814 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

1815 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

1816 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

1817 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

1818 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

1819 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

1820 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

1821 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

1822 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

1823 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

1824 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

1825 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

1827 
	`£ns‹_wrôe_ªgi°î
(0x4020,0x00);

1828 
	`£ns‹_wrôe_ªgi°î
(0x4021,0x10);

1829 
	`£ns‹_wrôe_ªgi°î
(0x4022,0x07);

1830 
	`£ns‹_wrôe_ªgi°î
(0x4023,0x93);

1831 
	`£ns‹_wrôe_ªgi°î
(0x4024,0x08);

1832 
	`£ns‹_wrôe_ªgi°î
(0x4025,0xc0);

1833 
	`£ns‹_wrôe_ªgi°î
(0x4026,0x08);

1834 
	`£ns‹_wrôe_ªgi°î
(0x4027,0xd0);

1836 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

1837 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

1838 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

1839 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

1840 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

1841 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

1842 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

1843 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

1844 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

1845 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

1846 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

1847 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

1848 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

1849 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

1850 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

1851 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

1852 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

1853 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

1855 
	`£ns‹_wrôe_ªgi°î
(0x4600,0x00);

1856 
	`£ns‹_wrôe_ªgi°î
(0x4601,0x41);

1858 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

1859 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

1860 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

1861 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

1862 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x1a);

1863 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

1864 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

1865 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

1866 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

1867 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

1868 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

1869 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

1870 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

1871 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

1872 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

1873 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

1874 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

1875 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

1876 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

1877 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

1878 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

1879 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

1880 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

1881 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

1882 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

1883 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

1884 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

1885 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

1886 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

1887 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

1888 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1889 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

1890 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

1891 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

1892 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

1893 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

1894 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

1897 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

1899 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

1901 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

1902 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1903 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1904 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1905 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1906 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

1907 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

1908 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1909 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

1910 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

1912 
	`£ns‹_íabÀ_wdr_mode
();

1913 
bSís‹Inô
 = 
HI_TRUE
;

1914 
	`¥ötf
("-------OV4689 Sensor 2304_1296 30fps WDR Mode Initial OK!-------\n");

1915 
	}
}

1918 
	$£ns‹_wdr_2048_1520_30_öô
()

1920 
	`u¶ìp
(200000);

1921 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

1923 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

1924 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x00);

1925 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

1926 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0x19);

1927 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x00);

1928 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

1929 
	`£ns‹_wrôe_ªgi°î
(0x0305, 0x01);

1930 
	`£ns‹_wrôe_ªgi°î
(0x0306, 0x01);

1931 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x00);

1932 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

1933 
	`£ns‹_wrôe_ªgi°î
(0x030c, 0x00);

1934 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

1935 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

1936 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

1939 
	`£ns‹_wrôe_ªgi°î
(0x0311, 0x00);

1940 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

1941 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

1942 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

1943 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

1944 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

1945 
	`£ns‹_wrôe_ªgi°î
(0x3020, 0x93);

1946 
	`£ns‹_wrôe_ªgi°î
(0x3021, 0x03);

1947 
	`£ns‹_wrôe_ªgi°î
(0x3022, 0x01);

1948 
	`£ns‹_wrôe_ªgi°î
(0x3031, 0x0a);

1949 
	`£ns‹_wrôe_ªgi°î
(0x3305, 0xf1);

1950 
	`£ns‹_wrôe_ªgi°î
(0x3307, 0x04);

1951 
	`£ns‹_wrôe_ªgi°î
(0x3309, 0x29);

1952 
	`£ns‹_wrôe_ªgi°î
(0x3500, 0x00);

1953 
	`£ns‹_wrôe_ªgi°î
(0x3501, 0x45);

1954 
	`£ns‹_wrôe_ªgi°î
(0x3502, 0xB0);

1955 
	`£ns‹_wrôe_ªgi°î
(0x3503, 0x77);

1956 
	`£ns‹_wrôe_ªgi°î
(0x3504, 0x00);

1957 
	`£ns‹_wrôe_ªgi°î
(0x3505, 0x00);

1958 
	`£ns‹_wrôe_ªgi°î
(0x3506, 0x00);

1959 
	`£ns‹_wrôe_ªgi°î
(0x3507, 0x00);

1960 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x00);

1961 
	`£ns‹_wrôe_ªgi°î
(0x3509, 0x80);

1962 
	`£ns‹_wrôe_ªgi°î
(0x350a, 0x00);

1963 
	`£ns‹_wrôe_ªgi°î
(0x350b, 0x00);

1964 
	`£ns‹_wrôe_ªgi°î
(0x350c, 0x00);

1965 
	`£ns‹_wrôe_ªgi°î
(0x350d, 0x00);

1966 
	`£ns‹_wrôe_ªgi°î
(0x350e, 0x00);

1967 
	`£ns‹_wrôe_ªgi°î
(0x350f, 0x80);

1968 
	`£ns‹_wrôe_ªgi°î
(0x3510, 0x00);

1969 
	`£ns‹_wrôe_ªgi°î
(0x3511, 0x00);

1970 
	`£ns‹_wrôe_ªgi°î
(0x3512, 0x00);

1971 
	`£ns‹_wrôe_ªgi°î
(0x3513, 0x00);

1972 
	`£ns‹_wrôe_ªgi°î
(0x3514, 0x00);

1973 
	`£ns‹_wrôe_ªgi°î
(0x3515, 0x80);

1974 
	`£ns‹_wrôe_ªgi°î
(0x3516, 0x00);

1975 
	`£ns‹_wrôe_ªgi°î
(0x3517, 0x00);

1976 
	`£ns‹_wrôe_ªgi°î
(0x3518, 0x00);

1977 
	`£ns‹_wrôe_ªgi°î
(0x3519, 0x00);

1978 
	`£ns‹_wrôe_ªgi°î
(0x351a, 0x00);

1979 
	`£ns‹_wrôe_ªgi°î
(0x351b, 0x80);

1980 
	`£ns‹_wrôe_ªgi°î
(0x351c, 0x00);

1981 
	`£ns‹_wrôe_ªgi°î
(0x351d, 0x00);

1982 
	`£ns‹_wrôe_ªgi°î
(0x351e, 0x00);

1983 
	`£ns‹_wrôe_ªgi°î
(0x351f, 0x00);

1984 
	`£ns‹_wrôe_ªgi°î
(0x3520, 0x00);

1985 
	`£ns‹_wrôe_ªgi°î
(0x3521, 0x80);

1986 
	`£ns‹_wrôe_ªgi°î
(0x3522, 0x08);

1987 
	`£ns‹_wrôe_ªgi°î
(0x3524, 0x08);

1988 
	`£ns‹_wrôe_ªgi°î
(0x3526, 0x08);

1989 
	`£ns‹_wrôe_ªgi°î
(0x3528, 0x08);

1990 
	`£ns‹_wrôe_ªgi°î
(0x352a, 0x08);

1991 
	`£ns‹_wrôe_ªgi°î
(0x3602, 0x00);

1992 
	`£ns‹_wrôe_ªgi°î
(0x3604, 0x02);

1993 
	`£ns‹_wrôe_ªgi°î
(0x3605, 0x00);

1994 
	`£ns‹_wrôe_ªgi°î
(0x3606, 0x00);

1995 
	`£ns‹_wrôe_ªgi°î
(0x3607, 0x00);

1996 
	`£ns‹_wrôe_ªgi°î
(0x3609, 0x12);

1997 
	`£ns‹_wrôe_ªgi°î
(0x360a, 0x40);

1998 
	`£ns‹_wrôe_ªgi°î
(0x360c, 0x08);

1999 
	`£ns‹_wrôe_ªgi°î
(0x360f, 0xe5);

2000 
	`£ns‹_wrôe_ªgi°î
(0x3608, 0x8f);

2001 
	`£ns‹_wrôe_ªgi°î
(0x3611, 0x00);

2002 
	`£ns‹_wrôe_ªgi°î
(0x3613, 0xf7);

2003 
	`£ns‹_wrôe_ªgi°î
(0x3616, 0x58);

2004 
	`£ns‹_wrôe_ªgi°î
(0x3619, 0x99);

2005 
	`£ns‹_wrôe_ªgi°î
(0x361b, 0x60);

2006 
	`£ns‹_wrôe_ªgi°î
(0x361c, 0x7a);

2007 
	`£ns‹_wrôe_ªgi°î
(0x361e, 0x79);

2008 
	`£ns‹_wrôe_ªgi°î
(0x361f, 0x02);

2009 
	`£ns‹_wrôe_ªgi°î
(0x3632, 0x00);

2010 
	`£ns‹_wrôe_ªgi°î
(0x3633, 0x10);

2011 
	`£ns‹_wrôe_ªgi°î
(0x3634, 0x10);

2012 
	`£ns‹_wrôe_ªgi°î
(0x3635, 0x10);

2013 
	`£ns‹_wrôe_ªgi°î
(0x3636, 0x15);

2014 
	`£ns‹_wrôe_ªgi°î
(0x3646, 0x86);

2015 
	`£ns‹_wrôe_ªgi°î
(0x364a, 0x0b);

2016 
	`£ns‹_wrôe_ªgi°î
(0x3700, 0x17);

2017 
	`£ns‹_wrôe_ªgi°î
(0x3701, 0x22);

2018 
	`£ns‹_wrôe_ªgi°î
(0x3703, 0x10);

2019 
	`£ns‹_wrôe_ªgi°î
(0x370a, 0x37);

2020 
	`£ns‹_wrôe_ªgi°î
(0x3705, 0x00);

2021 
	`£ns‹_wrôe_ªgi°î
(0x3706, 0x63);

2022 
	`£ns‹_wrôe_ªgi°î
(0x3709, 0x3c);

2023 
	`£ns‹_wrôe_ªgi°î
(0x370b, 0x01);

2024 
	`£ns‹_wrôe_ªgi°î
(0x370c, 0x30);

2025 
	`£ns‹_wrôe_ªgi°î
(0x3710, 0x24);

2026 
	`£ns‹_wrôe_ªgi°î
(0x3711, 0x0c);

2027 
	`£ns‹_wrôe_ªgi°î
(0x3716, 0x00);

2028 
	`£ns‹_wrôe_ªgi°î
(0x3720, 0x28);

2029 
	`£ns‹_wrôe_ªgi°î
(0x3729, 0x7b);

2030 
	`£ns‹_wrôe_ªgi°î
(0x372a, 0x84);

2031 
	`£ns‹_wrôe_ªgi°î
(0x372b, 0xbd);

2032 
	`£ns‹_wrôe_ªgi°î
(0x372c, 0xbc);

2033 
	`£ns‹_wrôe_ªgi°î
(0x372e, 0x52);

2034 
	`£ns‹_wrôe_ªgi°î
(0x373c, 0x0e);

2035 
	`£ns‹_wrôe_ªgi°î
(0x373e, 0x33);

2036 
	`£ns‹_wrôe_ªgi°î
(0x3743, 0x10);

2037 
	`£ns‹_wrôe_ªgi°î
(0x3744, 0x88);

2038 
	`£ns‹_wrôe_ªgi°î
(0x3745, 0xc0);

2039 
	`£ns‹_wrôe_ªgi°î
(0x374a, 0x43);

2040 
	`£ns‹_wrôe_ªgi°î
(0x374c, 0x00);

2041 
	`£ns‹_wrôe_ªgi°î
(0x374e, 0x23);

2042 
	`£ns‹_wrôe_ªgi°î
(0x3751, 0x7b);

2043 
	`£ns‹_wrôe_ªgi°î
(0x3752, 0x84);

2044 
	`£ns‹_wrôe_ªgi°î
(0x3753, 0xbd);

2045 
	`£ns‹_wrôe_ªgi°î
(0x3754, 0xbc);

2046 
	`£ns‹_wrôe_ªgi°î
(0x3756, 0x52);

2047 
	`£ns‹_wrôe_ªgi°î
(0x375c, 0x00);

2048 
	`£ns‹_wrôe_ªgi°î
(0x3760, 0x00);

2049 
	`£ns‹_wrôe_ªgi°î
(0x3761, 0x00);

2050 
	`£ns‹_wrôe_ªgi°î
(0x3762, 0x00);

2051 
	`£ns‹_wrôe_ªgi°î
(0x3763, 0x00);

2052 
	`£ns‹_wrôe_ªgi°î
(0x3764, 0x00);

2053 
	`£ns‹_wrôe_ªgi°î
(0x3767, 0x04);

2054 
	`£ns‹_wrôe_ªgi°î
(0x3768, 0x04);

2055 
	`£ns‹_wrôe_ªgi°î
(0x3769, 0x08);

2056 
	`£ns‹_wrôe_ªgi°î
(0x376a, 0x08);

2057 
	`£ns‹_wrôe_ªgi°î
(0x376b, 0x20);

2058 
	`£ns‹_wrôe_ªgi°î
(0x376c, 0x00);

2059 
	`£ns‹_wrôe_ªgi°î
(0x376d, 0x00);

2060 
	`£ns‹_wrôe_ªgi°î
(0x376e, 0x00);

2061 
	`£ns‹_wrôe_ªgi°î
(0x3773, 0x00);

2062 
	`£ns‹_wrôe_ªgi°î
(0x3774, 0x51);

2063 
	`£ns‹_wrôe_ªgi°î
(0x3776, 0xbd);

2064 
	`£ns‹_wrôe_ªgi°î
(0x3777, 0xbd);

2065 
	`£ns‹_wrôe_ªgi°î
(0x3781, 0x18);

2066 
	`£ns‹_wrôe_ªgi°î
(0x3783, 0x25);

2068 
	`£ns‹_wrôe_ªgi°î
(0x3800,0x01);

2069 
	`£ns‹_wrôe_ªgi°î
(0x3801,0x48);

2070 
	`£ns‹_wrôe_ªgi°î
(0x3802,0x00);

2071 
	`£ns‹_wrôe_ªgi°î
(0x3803,0x04);

2072 
	`£ns‹_wrôe_ªgi°î
(0x3804,0x09);

2073 
	`£ns‹_wrôe_ªgi°î
(0x3805,0x57);

2074 
	`£ns‹_wrôe_ªgi°î
(0x3806,0x05);

2075 
	`£ns‹_wrôe_ªgi°î
(0x3807,0xfb);

2076 
	`£ns‹_wrôe_ªgi°î
(0x3808,0x08);

2077 
	`£ns‹_wrôe_ªgi°î
(0x3809,0x00);

2078 
	`£ns‹_wrôe_ªgi°î
(0x380a,0x05);

2079 
	`£ns‹_wrôe_ªgi°î
(0x380b,0xf0);

2081 
	`£ns‹_wrôe_ªgi°î
(0x380c,0x05);

2082 
	`£ns‹_wrôe_ªgi°î
(0x380d,0x28);

2083 
	`£ns‹_wrôe_ªgi°î
(0x380e,0x05);

2084 
	`£ns‹_wrôe_ªgi°î
(0x380f,0x80);

2085 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

2086 
	`£ns‹_wrôe_ªgi°î
(0x3810,0x00);

2087 
	`£ns‹_wrôe_ªgi°î
(0x3811,0x08);

2088 
	`£ns‹_wrôe_ªgi°î
(0x3812,0x00);

2089 
	`£ns‹_wrôe_ªgi°î
(0x3813,0x04);

2091 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

2092 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

2093 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

2094 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

2095 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

2096 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

2097 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

2098 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

2099 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

2100 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

2101 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

2102 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

2103 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

2104 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

2105 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

2106 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

2107 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

2108 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

2109 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

2110 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

2111 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

2112 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

2113 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

2114 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

2115 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

2116 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

2117 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

2118 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

2119 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

2121 
	`£ns‹_wrôe_ªgi°î
(0x4020,0x00);

2122 
	`£ns‹_wrôe_ªgi°î
(0x4021,0x10);

2123 
	`£ns‹_wrôe_ªgi°î
(0x4022,0x06);

2124 
	`£ns‹_wrôe_ªgi°î
(0x4023,0x93);

2125 
	`£ns‹_wrôe_ªgi°î
(0x4024,0x07);

2126 
	`£ns‹_wrôe_ªgi°î
(0x4025,0xc0);

2127 
	`£ns‹_wrôe_ªgi°î
(0x4026,0x07);

2128 
	`£ns‹_wrôe_ªgi°î
(0x4027,0xd0);

2130 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

2131 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

2132 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

2133 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

2134 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

2135 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

2136 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

2137 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

2138 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

2139 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

2140 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

2141 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

2142 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

2143 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

2144 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

2145 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

2146 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

2147 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

2149 
	`£ns‹_wrôe_ªgi°î
(0x4600,0x00);

2150 
	`£ns‹_wrôe_ªgi°î
(0x4601,0x41);

2152 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

2153 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

2154 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

2155 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

2156 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x1a);

2157 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

2158 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

2159 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

2160 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

2161 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

2162 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

2163 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

2164 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

2165 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

2166 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

2167 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

2168 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

2169 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

2170 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

2171 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

2172 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

2173 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

2174 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

2175 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

2176 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

2177 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

2178 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

2179 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

2180 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

2181 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

2182 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2183 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

2184 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

2185 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

2186 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

2187 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

2188 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

2191 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

2193 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

2195 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

2196 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2197 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2198 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2199 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2200 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2201 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

2202 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2203 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

2204 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

2206 
	`£ns‹_íabÀ_wdr_mode
();

2207 
bSís‹Inô
 = 
HI_TRUE
;

2208 
	`¥ötf
("-------OV4689 Sensor 2304_1296 30fps WDR Mode Initial OK!-------\n");

2209 
	}
}

2211 
	$£ns‹_löór_2304_1296_30_öô
()

2213 
	`u¶ìp
(200000);

2214 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

2216 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2217 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x02);

2218 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

2219 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0xf4);

2220 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x03);

2221 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

2222 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x01);

2223 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

2224 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

2225 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

2226 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

2227 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

2228 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

2229 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

2230 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

2231 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

2232 
	`£ns‹_öô_comm_fú°
();

2233 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x00);

2234 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0xc8);

2235 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

2236 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0x74);

2237 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x09);

2238 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0xd7);

2239 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x05);

2240 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0x8b);

2241 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x09);

2242 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x00);

2243 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x05);

2244 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0x10);

2245 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x08);

2246 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0x74);

2247 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x05);

2248 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0x77);

2250 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

2251 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

2252 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

2253 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

2254 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

2255 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

2256 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

2257 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

2258 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

2259 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

2260 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

2261 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

2262 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

2263 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

2264 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

2265 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

2266 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

2267 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

2268 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

2269 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

2270 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

2271 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

2272 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

2273 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

2274 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

2275 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

2276 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

2277 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

2278 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

2279 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

2280 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

2281 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

2282 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

2283 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

2284 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

2285 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x06);

2286 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0x13);

2287 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x07);

2288 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0x40);

2289 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x07);

2290 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0x50);

2291 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

2292 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

2293 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

2294 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

2295 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

2296 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

2297 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

2298 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

2299 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

2300 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

2301 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

2302 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

2303 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

2304 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

2305 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

2306 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

2307 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

2308 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

2309 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x77);

2310 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

2311 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

2312 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

2313 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

2314 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x56);

2315 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

2316 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

2317 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

2318 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

2319 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

2320 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

2321 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

2322 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

2323 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

2324 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

2325 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

2326 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

2327 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

2328 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

2329 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

2330 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

2331 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

2332 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

2333 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

2334 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

2335 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

2336 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

2337 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

2338 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

2339 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

2340 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2341 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

2342 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

2343 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

2344 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

2345 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

2346 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

2347 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

2348 
	`dñay_ms
(10);

2349 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

2350 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf1);

2351 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

2352 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf0);

2353 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

2354 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2355 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2356 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2357 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2358 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2359 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

2360 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2361 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

2362 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

2363 
bSís‹Inô
 = 
HI_TRUE
;

2364 
	`¥ötf
("-------OV4689 Sensor 3M 2304*1296 30fps Linear Mode Initial OK!-------\n");

2365 
	}
}

2368 
	$£ns‹_löór_2048_1520_30_öô
()

2370 
	`u¶ìp
(200000);

2371 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

2373 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2374 
	`£ns‹_wrôe_ªgi°î
(0x0300, 0x02);

2375 
	`£ns‹_wrôe_ªgi°î
(0x0301, 0x00);

2376 
	`£ns‹_wrôe_ªgi°î
(0x0302, 0xf4);

2377 
	`£ns‹_wrôe_ªgi°î
(0x0303, 0x03);

2378 
	`£ns‹_wrôe_ªgi°î
(0x0304, 0x03);

2379 
	`£ns‹_wrôe_ªgi°î
(0x030A, 0x01);

2380 
	`£ns‹_wrôe_ªgi°î
(0x030b, 0x00);

2381 
	`£ns‹_wrôe_ªgi°î
(0x030d, 0x1e);

2382 
	`£ns‹_wrôe_ªgi°î
(0x030e, 0x04);

2383 
	`£ns‹_wrôe_ªgi°î
(0x030f, 0x01);

2384 
	`£ns‹_wrôe_ªgi°î
(0x0312, 0x01);

2385 
	`£ns‹_wrôe_ªgi°î
(0x031e, 0x00);

2386 
	`£ns‹_wrôe_ªgi°î
(0x3000, 0x20);

2387 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0x00);

2388 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0x72);

2389 
	`£ns‹_öô_comm_fú°
();

2390 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x01);

2391 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0x48);

2392 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

2393 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0x04);

2394 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x09);

2395 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0x57);

2396 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x05);

2397 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0xfb);

2398 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x08);

2399 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x00);

2400 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x05);

2401 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0xf0);

2402 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x07);

2403 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0x74);

2404 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x08);

2405 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0x50);

2407 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

2408 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x08);

2409 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

2410 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x04);

2411 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x01);

2412 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x01);

2413 
	`£ns‹_wrôe_ªgi°î
(0x3819, 0x01);

2414 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x00);

2415 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x06);

2416 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x00);

2417 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x01);

2418 
	`£ns‹_wrôe_ªgi°î
(0x382b, 0x01);

2419 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x7f);

2420 
	`£ns‹_wrôe_ªgi°î
(0x3830, 0x04);

2421 
	`£ns‹_wrôe_ªgi°î
(0x3836, 0x01);

2422 
	`£ns‹_wrôe_ªgi°î
(0x3841, 0x02);

2423 
	`£ns‹_wrôe_ªgi°î
(0x3846, 0x08);

2424 
	`£ns‹_wrôe_ªgi°î
(0x3847, 0x07);

2425 
	`£ns‹_wrôe_ªgi°î
(0x3d85, 0x36);

2426 
	`£ns‹_wrôe_ªgi°î
(0x3d8c, 0x71);

2427 
	`£ns‹_wrôe_ªgi°î
(0x3d8d, 0xcb);

2428 
	`£ns‹_wrôe_ªgi°î
(0x3f0a, 0x00);

2429 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x71);

2430 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x40);

2431 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x04);

2432 
	`£ns‹_wrôe_ªgi°î
(0x4003, 0x14);

2433 
	`£ns‹_wrôe_ªgi°î
(0x400e, 0x00);

2434 
	`£ns‹_wrôe_ªgi°î
(0x4011, 0x00);

2435 
	`£ns‹_wrôe_ªgi°î
(0x401a, 0x00);

2436 
	`£ns‹_wrôe_ªgi°î
(0x401b, 0x00);

2437 
	`£ns‹_wrôe_ªgi°î
(0x401c, 0x00);

2438 
	`£ns‹_wrôe_ªgi°î
(0x401d, 0x00);

2439 
	`£ns‹_wrôe_ªgi°î
(0x401f, 0x00);

2440 
	`£ns‹_wrôe_ªgi°î
(0x4020, 0x00);

2441 
	`£ns‹_wrôe_ªgi°î
(0x4021, 0x10);

2442 
	`£ns‹_wrôe_ªgi°î
(0x4022, 0x06);

2443 
	`£ns‹_wrôe_ªgi°î
(0x4023, 0x13);

2444 
	`£ns‹_wrôe_ªgi°î
(0x4024, 0x07);

2445 
	`£ns‹_wrôe_ªgi°î
(0x4025, 0x40);

2446 
	`£ns‹_wrôe_ªgi°î
(0x4026, 0x07);

2447 
	`£ns‹_wrôe_ªgi°î
(0x4027, 0x50);

2448 
	`£ns‹_wrôe_ªgi°î
(0x4028, 0x00);

2449 
	`£ns‹_wrôe_ªgi°î
(0x4029, 0x02);

2450 
	`£ns‹_wrôe_ªgi°î
(0x402a, 0x06);

2451 
	`£ns‹_wrôe_ªgi°î
(0x402b, 0x04);

2452 
	`£ns‹_wrôe_ªgi°î
(0x402c, 0x02);

2453 
	`£ns‹_wrôe_ªgi°î
(0x402d, 0x02);

2454 
	`£ns‹_wrôe_ªgi°î
(0x402e, 0x0e);

2455 
	`£ns‹_wrôe_ªgi°î
(0x402f, 0x04);

2456 
	`£ns‹_wrôe_ªgi°î
(0x4302, 0xff);

2457 
	`£ns‹_wrôe_ªgi°î
(0x4303, 0xff);

2458 
	`£ns‹_wrôe_ªgi°î
(0x4304, 0x00);

2459 
	`£ns‹_wrôe_ªgi°î
(0x4305, 0x00);

2460 
	`£ns‹_wrôe_ªgi°î
(0x4306, 0x00);

2461 
	`£ns‹_wrôe_ªgi°î
(0x4308, 0x02);

2462 
	`£ns‹_wrôe_ªgi°î
(0x4500, 0x6c);

2463 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0xc4);

2464 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x40);

2465 
	`£ns‹_wrôe_ªgi°î
(0x4503, 0x01);

2466 
	`£ns‹_wrôe_ªgi°î
(0x4601, 0x77);

2467 
	`£ns‹_wrôe_ªgi°î
(0x4800, 0x04);

2468 
	`£ns‹_wrôe_ªgi°î
(0x4813, 0x08);

2469 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x40);

2470 
	`£ns‹_wrôe_ªgi°î
(0x4829, 0x78);

2471 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x56);

2472 
	`£ns‹_wrôe_ªgi°î
(0x4b00, 0x2a);

2473 
	`£ns‹_wrôe_ªgi°î
(0x4b0d, 0x00);

2474 
	`£ns‹_wrôe_ªgi°î
(0x4d00, 0x04);

2475 
	`£ns‹_wrôe_ªgi°î
(0x4d01, 0x42);

2476 
	`£ns‹_wrôe_ªgi°î
(0x4d02, 0xd1);

2477 
	`£ns‹_wrôe_ªgi°î
(0x4d03, 0x93);

2478 
	`£ns‹_wrôe_ªgi°î
(0x4d04, 0xf5);

2479 
	`£ns‹_wrôe_ªgi°î
(0x4d05, 0xc1);

2480 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0xf3);

2481 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x11);

2482 
	`£ns‹_wrôe_ªgi°î
(0x5004, 0x00);

2483 
	`£ns‹_wrôe_ªgi°î
(0x500a, 0x00);

2484 
	`£ns‹_wrôe_ªgi°î
(0x500b, 0x00);

2485 
	`£ns‹_wrôe_ªgi°î
(0x5032, 0x00);

2486 
	`£ns‹_wrôe_ªgi°î
(0x5040, 0x00);

2487 
	`£ns‹_wrôe_ªgi°î
(0x5050, 0x0c);

2488 
	`£ns‹_wrôe_ªgi°î
(0x8000, 0x00);

2489 
	`£ns‹_wrôe_ªgi°î
(0x8001, 0x00);

2490 
	`£ns‹_wrôe_ªgi°î
(0x8002, 0x00);

2491 
	`£ns‹_wrôe_ªgi°î
(0x8003, 0x00);

2492 
	`£ns‹_wrôe_ªgi°î
(0x8004, 0x00);

2493 
	`£ns‹_wrôe_ªgi°î
(0x8005, 0x00);

2494 
	`£ns‹_wrôe_ªgi°î
(0x8006, 0x00);

2495 
	`£ns‹_wrôe_ªgi°î
(0x8007, 0x00);

2496 
	`£ns‹_wrôe_ªgi°î
(0x8008, 0x00);

2497 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2498 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x31);

2499 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf9);

2500 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x07);

2501 
	`£ns‹_wrôe_ªgi°î
(0x484b, 0x05);

2502 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x03);

2503 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x01);

2504 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

2505 
	`dñay_ms
(10);

2506 
	`£ns‹_wrôe_ªgi°î
(0x3105, 0x11);

2507 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf1);

2508 
	`£ns‹_wrôe_ªgi°î
(0x4805, 0x00);

2509 
	`£ns‹_wrôe_ªgi°î
(0x301a, 0xf0);

2510 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x00);

2511 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2512 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2513 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2514 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2515 
	`£ns‹_wrôe_ªgi°î
(0x302a, 0x00);

2516 
	`£ns‹_wrôe_ªgi°î
(0x3601, 0x00);

2517 
	`£ns‹_wrôe_ªgi°î
(0x3638, 0x00);

2518 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0x10);

2519 
	`£ns‹_wrôe_ªgi°î
(0x3208, 0xa0);

2520 
bSís‹Inô
 = 
HI_TRUE
;

2521 
	`¥ötf
("-------OV4689 Sensor 3M 2048*1520 30fps Linear Mode Initial OK!-------\n");

2522 
	}
}

2526 
	$£ns‹_löór_720p_120Âs_öô
()

2528 
	`u¶ìp
(200000);

2529 
	`£ns‹_wrôe_ªgi°î
(0x0103,0x01);

2531 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

2532 
	`£ns‹_wrôe_ªgi°î
(0x0300,0x02);

2533 
	`£ns‹_wrôe_ªgi°î
(0x0302,0x32);

2534 
	`£ns‹_wrôe_ªgi°î
(0x0303,0x00);

2535 
	`£ns‹_wrôe_ªgi°î
(0x0304,0x03);

2536 
	`£ns‹_wrôe_ªgi°î
(0x030b,0x00);

2537 
	`£ns‹_wrôe_ªgi°î
(0x030d,0x1e);

2538 
	`£ns‹_wrôe_ªgi°î
(0x030e,0x04);

2539 
	`£ns‹_wrôe_ªgi°î
(0x030f,0x02);

2540 
	`£ns‹_wrôe_ªgi°î
(0x0312,0x01);

2541 
	`£ns‹_wrôe_ªgi°î
(0x031e,0x00);

2542 
	`£ns‹_wrôe_ªgi°î
(0x3000,0x20);

2543 
	`£ns‹_wrôe_ªgi°î
(0x3002,0x00);

2544 
	`£ns‹_wrôe_ªgi°î
(0x3018,0x72);

2545 
	`£ns‹_wrôe_ªgi°î
(0x3020,0x93);

2546 
	`£ns‹_wrôe_ªgi°î
(0x3021,0x03);

2547 
	`£ns‹_wrôe_ªgi°î
(0x3022,0x01);

2548 
	`£ns‹_wrôe_ªgi°î
(0x3031,0x0a);

2549 
	`£ns‹_wrôe_ªgi°î
(0x303f,0x0c);

2550 
	`£ns‹_wrôe_ªgi°î
(0x3305,0xf1);

2551 
	`£ns‹_wrôe_ªgi°î
(0x3307,0x04);

2552 
	`£ns‹_wrôe_ªgi°î
(0x3309,0x29);

2553 
	`£ns‹_wrôe_ªgi°î
(0x3500,0x00);

2554 
	`£ns‹_wrôe_ªgi°î
(0x3501,0x30);

2555 
	`£ns‹_wrôe_ªgi°î
(0x3502,0x00);

2556 
	`£ns‹_wrôe_ªgi°î
(0x3503,0x77);

2557 
	`£ns‹_wrôe_ªgi°î
(0x3504,0x00);

2558 
	`£ns‹_wrôe_ªgi°î
(0x3505,0x00);

2559 
	`£ns‹_wrôe_ªgi°î
(0x3506,0x00);

2560 
	`£ns‹_wrôe_ªgi°î
(0x3507,0x00);

2561 
	`£ns‹_wrôe_ªgi°î
(0x3508,0x00);

2562 
	`£ns‹_wrôe_ªgi°î
(0x3509,0x80);

2563 
	`£ns‹_wrôe_ªgi°î
(0x350a,0x00);

2564 
	`£ns‹_wrôe_ªgi°î
(0x350b,0x00);

2565 
	`£ns‹_wrôe_ªgi°î
(0x350c,0x00);

2566 
	`£ns‹_wrôe_ªgi°î
(0x350d,0x00);

2567 
	`£ns‹_wrôe_ªgi°î
(0x350e,0x00);

2568 
	`£ns‹_wrôe_ªgi°î
(0x350f,0x80);

2569 
	`£ns‹_wrôe_ªgi°î
(0x3510,0x00);

2570 
	`£ns‹_wrôe_ªgi°î
(0x3511,0x00);

2571 
	`£ns‹_wrôe_ªgi°î
(0x3512,0x00);

2572 
	`£ns‹_wrôe_ªgi°î
(0x3513,0x00);

2573 
	`£ns‹_wrôe_ªgi°î
(0x3514,0x00);

2574 
	`£ns‹_wrôe_ªgi°î
(0x3515,0x80);

2575 
	`£ns‹_wrôe_ªgi°î
(0x3516,0x00);

2576 
	`£ns‹_wrôe_ªgi°î
(0x3517,0x00);

2577 
	`£ns‹_wrôe_ªgi°î
(0x3518,0x00);

2578 
	`£ns‹_wrôe_ªgi°î
(0x3519,0x00);

2579 
	`£ns‹_wrôe_ªgi°î
(0x351a,0x00);

2580 
	`£ns‹_wrôe_ªgi°î
(0x351b,0x80);

2581 
	`£ns‹_wrôe_ªgi°î
(0x351c,0x00);

2582 
	`£ns‹_wrôe_ªgi°î
(0x351d,0x00);

2583 
	`£ns‹_wrôe_ªgi°î
(0x351e,0x00);

2584 
	`£ns‹_wrôe_ªgi°î
(0x351f,0x00);

2585 
	`£ns‹_wrôe_ªgi°î
(0x3520,0x00);

2586 
	`£ns‹_wrôe_ªgi°î
(0x3521,0x80);

2587 
	`£ns‹_wrôe_ªgi°î
(0x3522,0x08);

2588 
	`£ns‹_wrôe_ªgi°î
(0x3524,0x08);

2589 
	`£ns‹_wrôe_ªgi°î
(0x3526,0x08);

2590 
	`£ns‹_wrôe_ªgi°î
(0x3528,0x08);

2591 
	`£ns‹_wrôe_ªgi°î
(0x352a,0x08);

2592 
	`£ns‹_wrôe_ªgi°î
(0x3602,0x00);

2593 
	`£ns‹_wrôe_ªgi°î
(0x3603,0x40);

2594 
	`£ns‹_wrôe_ªgi°î
(0x3604,0x02);

2595 
	`£ns‹_wrôe_ªgi°î
(0x3605,0x00);

2596 
	`£ns‹_wrôe_ªgi°î
(0x3606,0x00);

2597 
	`£ns‹_wrôe_ªgi°î
(0x3607,0x00);

2598 
	`£ns‹_wrôe_ªgi°î
(0x3609,0x12);

2599 
	`£ns‹_wrôe_ªgi°î
(0x360a,0x40);

2600 
	`£ns‹_wrôe_ªgi°î
(0x360c,0x08);

2601 
	`£ns‹_wrôe_ªgi°î
(0x360f,0xe5);

2602 
	`£ns‹_wrôe_ªgi°î
(0x3608,0x8f);

2603 
	`£ns‹_wrôe_ªgi°î
(0x3611,0x00);

2604 
	`£ns‹_wrôe_ªgi°î
(0x3613,0xf7);

2605 
	`£ns‹_wrôe_ªgi°î
(0x3616,0x58);

2606 
	`£ns‹_wrôe_ªgi°î
(0x3619,0x99);

2607 
	`£ns‹_wrôe_ªgi°î
(0x361b,0x60);

2608 
	`£ns‹_wrôe_ªgi°î
(0x361c,0x7a);

2609 
	`£ns‹_wrôe_ªgi°î
(0x361e,0x79);

2610 
	`£ns‹_wrôe_ªgi°î
(0x361f,0x02);

2611 
	`£ns‹_wrôe_ªgi°î
(0x3632,0x05);

2612 
	`£ns‹_wrôe_ªgi°î
(0x3633,0x10);

2613 
	`£ns‹_wrôe_ªgi°î
(0x3634,0x10);

2614 
	`£ns‹_wrôe_ªgi°î
(0x3635,0x10);

2615 
	`£ns‹_wrôe_ªgi°î
(0x3636,0x15);

2616 
	`£ns‹_wrôe_ªgi°î
(0x3646,0x86);

2617 
	`£ns‹_wrôe_ªgi°î
(0x364a,0x0b);

2618 
	`£ns‹_wrôe_ªgi°î
(0x3700,0x17);

2619 
	`£ns‹_wrôe_ªgi°î
(0x3701,0x22);

2620 
	`£ns‹_wrôe_ªgi°î
(0x3703,0x10);

2621 
	`£ns‹_wrôe_ªgi°î
(0x370a,0x37);

2622 
	`£ns‹_wrôe_ªgi°î
(0x3705,0x00);

2623 
	`£ns‹_wrôe_ªgi°î
(0x3706,0x63);

2624 
	`£ns‹_wrôe_ªgi°î
(0x3709,0x3c);

2625 
	`£ns‹_wrôe_ªgi°î
(0x370b,0x01);

2626 
	`£ns‹_wrôe_ªgi°î
(0x370c,0x30);

2627 
	`£ns‹_wrôe_ªgi°î
(0x3710,0x24);

2628 
	`£ns‹_wrôe_ªgi°î
(0x3711,0x0c);

2629 
	`£ns‹_wrôe_ªgi°î
(0x3716,0x00);

2630 
	`£ns‹_wrôe_ªgi°î
(0x3720,0x28);

2631 
	`£ns‹_wrôe_ªgi°î
(0x3729,0x7b);

2632 
	`£ns‹_wrôe_ªgi°î
(0x372a,0x84);

2633 
	`£ns‹_wrôe_ªgi°î
(0x372b,0xbd);

2634 
	`£ns‹_wrôe_ªgi°î
(0x372c,0xbc);

2635 
	`£ns‹_wrôe_ªgi°î
(0x372e,0x52);

2636 
	`£ns‹_wrôe_ªgi°î
(0x373c,0x0e);

2637 
	`£ns‹_wrôe_ªgi°î
(0x373e,0x33);

2638 
	`£ns‹_wrôe_ªgi°î
(0x3743,0x10);

2639 
	`£ns‹_wrôe_ªgi°î
(0x3744,0x88);

2640 
	`£ns‹_wrôe_ªgi°î
(0x3745,0xc0);

2641 
	`£ns‹_wrôe_ªgi°î
(0x374a,0x43);

2642 
	`£ns‹_wrôe_ªgi°î
(0x374c,0x00);

2643 
	`£ns‹_wrôe_ªgi°î
(0x374e,0x23);

2644 
	`£ns‹_wrôe_ªgi°î
(0x3751,0x7b);

2645 
	`£ns‹_wrôe_ªgi°î
(0x3752,0x84);

2646 
	`£ns‹_wrôe_ªgi°î
(0x3753,0xbd);

2647 
	`£ns‹_wrôe_ªgi°î
(0x3754,0xbc);

2648 
	`£ns‹_wrôe_ªgi°î
(0x3756,0x52);

2649 
	`£ns‹_wrôe_ªgi°î
(0x375c,0x00);

2650 
	`£ns‹_wrôe_ªgi°î
(0x3760,0x00);

2651 
	`£ns‹_wrôe_ªgi°î
(0x3761,0x00);

2652 
	`£ns‹_wrôe_ªgi°î
(0x3762,0x00);

2653 
	`£ns‹_wrôe_ªgi°î
(0x3763,0x00);

2654 
	`£ns‹_wrôe_ªgi°î
(0x3764,0x00);

2655 
	`£ns‹_wrôe_ªgi°î
(0x3767,0x04);

2656 
	`£ns‹_wrôe_ªgi°î
(0x3768,0x04);

2657 
	`£ns‹_wrôe_ªgi°î
(0x3769,0x08);

2658 
	`£ns‹_wrôe_ªgi°î
(0x376a,0x08);

2659 
	`£ns‹_wrôe_ªgi°î
(0x376b,0x40);

2660 
	`£ns‹_wrôe_ªgi°î
(0x376c,0x00);

2661 
	`£ns‹_wrôe_ªgi°î
(0x376d,0x00);

2662 
	`£ns‹_wrôe_ªgi°î
(0x376e,0x00);

2663 
	`£ns‹_wrôe_ªgi°î
(0x3773,0x00);

2664 
	`£ns‹_wrôe_ªgi°î
(0x3774,0x51);

2665 
	`£ns‹_wrôe_ªgi°î
(0x3776,0xbd);

2666 
	`£ns‹_wrôe_ªgi°î
(0x3777,0xbd);

2667 
	`£ns‹_wrôe_ªgi°î
(0x3781,0x18);

2668 
	`£ns‹_wrôe_ªgi°î
(0x3783,0x25);

2669 
	`£ns‹_wrôe_ªgi°î
(0x3798,0x1b);

2670 
	`£ns‹_wrôe_ªgi°î
(0x3800,0x00);

2671 
	`£ns‹_wrôe_ªgi°î
(0x3801,0x48);

2672 
	`£ns‹_wrôe_ªgi°î
(0x3802,0x00);

2673 
	`£ns‹_wrôe_ªgi°î
(0x3803,0x2C);

2674 
	`£ns‹_wrôe_ªgi°î
(0x3804,0x0a);

2675 
	`£ns‹_wrôe_ªgi°î
(0x3805,0x57);

2676 
	`£ns‹_wrôe_ªgi°î
(0x3806,0x05);

2677 
	`£ns‹_wrôe_ªgi°î
(0x3807,0xD3);

2678 
	`£ns‹_wrôe_ªgi°î
(0x3808,0x05);

2679 
	`£ns‹_wrôe_ªgi°î
(0x3809,0x00);

2680 
	`£ns‹_wrôe_ªgi°î
(0x380a,0x02);

2681 
	`£ns‹_wrôe_ªgi°î
(0x380b,0xD0);

2682 
	`£ns‹_wrôe_ªgi°î
(0x380c,0x03);

2683 
	`£ns‹_wrôe_ªgi°î
(0x380d,0x5C);

2684 
	`£ns‹_wrôe_ªgi°î
(0x380e,0x03);

2685 
	`£ns‹_wrôe_ªgi°î
(0x380f,0x05);

2686 
	`£ns‹_wrôe_ªgi°î
(0x3810,0x00);

2687 
	`£ns‹_wrôe_ªgi°î
(0x3811,0x04);

2688 
	`£ns‹_wrôe_ªgi°î
(0x3812,0x00);

2689 
	`£ns‹_wrôe_ªgi°î
(0x3813,0x02);

2690 
	`£ns‹_wrôe_ªgi°î
(0x3814,0x03);

2691 
	`£ns‹_wrôe_ªgi°î
(0x3815,0x01);

2692 
	`£ns‹_wrôe_ªgi°î
(0x3819,0x01);

2693 
	`£ns‹_wrôe_ªgi°î
(0x3820,0x10);

2694 
	`£ns‹_wrôe_ªgi°î
(0x3821,0x07);

2695 
	`£ns‹_wrôe_ªgi°î
(0x3829,0x00);

2696 
	`£ns‹_wrôe_ªgi°î
(0x382a,0x03);

2697 
	`£ns‹_wrôe_ªgi°î
(0x382b,0x01);

2698 
	`£ns‹_wrôe_ªgi°î
(0x382d,0x7f);

2699 
	`£ns‹_wrôe_ªgi°î
(0x3830,0x08);

2700 
	`£ns‹_wrôe_ªgi°î
(0x3836,0x02);

2701 
	`£ns‹_wrôe_ªgi°î
(0x3837,0x00);

2702 
	`£ns‹_wrôe_ªgi°î
(0x3841,0x02);

2703 
	`£ns‹_wrôe_ªgi°î
(0x3846,0x08);

2704 
	`£ns‹_wrôe_ªgi°î
(0x3847,0x07);

2705 
	`£ns‹_wrôe_ªgi°î
(0x3d85,0x36);

2706 
	`£ns‹_wrôe_ªgi°î
(0x3d8c,0x71);

2707 
	`£ns‹_wrôe_ªgi°î
(0x3d8d,0xcb);

2708 
	`£ns‹_wrôe_ªgi°î
(0x3f0a,0x00);

2709 
	`£ns‹_wrôe_ªgi°î
(0x4000,0x71);

2710 
	`£ns‹_wrôe_ªgi°î
(0x4001,0x50);

2711 
	`£ns‹_wrôe_ªgi°î
(0x4002,0x04);

2712 
	`£ns‹_wrôe_ªgi°î
(0x4003,0x14);

2713 
	`£ns‹_wrôe_ªgi°î
(0x400e,0x00);

2714 
	`£ns‹_wrôe_ªgi°î
(0x4011,0x00);

2715 
	`£ns‹_wrôe_ªgi°î
(0x401a,0x00);

2716 
	`£ns‹_wrôe_ªgi°î
(0x401b,0x00);

2717 
	`£ns‹_wrôe_ªgi°î
(0x401c,0x00);

2718 
	`£ns‹_wrôe_ªgi°î
(0x401d,0x00);

2719 
	`£ns‹_wrôe_ªgi°î
(0x401f,0x00);

2720 
	`£ns‹_wrôe_ªgi°î
(0x4020,0x00);

2721 
	`£ns‹_wrôe_ªgi°î
(0x4021,0x10);

2722 
	`£ns‹_wrôe_ªgi°î
(0x4022,0x03);

2723 
	`£ns‹_wrôe_ªgi°î
(0x4023,0x93);

2724 
	`£ns‹_wrôe_ªgi°î
(0x4024,0x04);

2725 
	`£ns‹_wrôe_ªgi°î
(0x4025,0xC0);

2726 
	`£ns‹_wrôe_ªgi°î
(0x4026,0x04);

2727 
	`£ns‹_wrôe_ªgi°î
(0x4027,0xD0);

2728 
	`£ns‹_wrôe_ªgi°î
(0x4028,0x00);

2729 
	`£ns‹_wrôe_ªgi°î
(0x4029,0x02);

2730 
	`£ns‹_wrôe_ªgi°î
(0x402a,0x06);

2731 
	`£ns‹_wrôe_ªgi°î
(0x402b,0x04);

2732 
	`£ns‹_wrôe_ªgi°î
(0x402c,0x02);

2733 
	`£ns‹_wrôe_ªgi°î
(0x402d,0x02);

2734 
	`£ns‹_wrôe_ªgi°î
(0x402e,0x0e);

2735 
	`£ns‹_wrôe_ªgi°î
(0x402f,0x04);

2736 
	`£ns‹_wrôe_ªgi°î
(0x4302,0xff);

2737 
	`£ns‹_wrôe_ªgi°î
(0x4303,0xff);

2738 
	`£ns‹_wrôe_ªgi°î
(0x4304,0x00);

2739 
	`£ns‹_wrôe_ªgi°î
(0x4305,0x00);

2740 
	`£ns‹_wrôe_ªgi°î
(0x4306,0x00);

2741 
	`£ns‹_wrôe_ªgi°î
(0x4308,0x02);

2742 
	`£ns‹_wrôe_ªgi°î
(0x4500,0x6c);

2743 
	`£ns‹_wrôe_ªgi°î
(0x4501,0xc4);

2744 
	`£ns‹_wrôe_ªgi°î
(0x4502,0x44);

2745 
	`£ns‹_wrôe_ªgi°î
(0x4503,0x01);

2746 
	`£ns‹_wrôe_ªgi°î
(0x4601,0x4F);

2747 
	`£ns‹_wrôe_ªgi°î
(0x4800,0x04);

2748 
	`£ns‹_wrôe_ªgi°î
(0x4813,0x08);

2749 
	`£ns‹_wrôe_ªgi°î
(0x481f,0x40);

2750 
	`£ns‹_wrôe_ªgi°î
(0x4829,0x78);

2751 
	`£ns‹_wrôe_ªgi°î
(0x4837,0x1b);

2752 
	`£ns‹_wrôe_ªgi°î
(0x4b00,0x2a);

2753 
	`£ns‹_wrôe_ªgi°î
(0x4b0d,0x00);

2754 
	`£ns‹_wrôe_ªgi°î
(0x4d00,0x04);

2755 
	`£ns‹_wrôe_ªgi°î
(0x4d01,0x42);

2756 
	`£ns‹_wrôe_ªgi°î
(0x4d02,0xd1);

2757 
	`£ns‹_wrôe_ªgi°î
(0x4d03,0x93);

2758 
	`£ns‹_wrôe_ªgi°î
(0x4d04,0xf5);

2759 
	`£ns‹_wrôe_ªgi°î
(0x4d05,0xc1);

2760 
	`£ns‹_wrôe_ªgi°î
(0x5000,0xf3);

2761 
	`£ns‹_wrôe_ªgi°î
(0x5001,0x11);

2762 
	`£ns‹_wrôe_ªgi°î
(0x5004,0x00);

2763 
	`£ns‹_wrôe_ªgi°î
(0x500a,0x00);

2764 
	`£ns‹_wrôe_ªgi°î
(0x500b,0x00);

2765 
	`£ns‹_wrôe_ªgi°î
(0x5032,0x00);

2766 
	`£ns‹_wrôe_ªgi°î
(0x5040,0x00);

2767 
	`£ns‹_wrôe_ªgi°î
(0x5050,0x3c);

2768 
	`£ns‹_wrôe_ªgi°î
(0x5500,0x00);

2769 
	`£ns‹_wrôe_ªgi°î
(0x5501,0x10);

2770 
	`£ns‹_wrôe_ªgi°î
(0x5502,0x01);

2771 
	`£ns‹_wrôe_ªgi°î
(0x5503,0x0f);

2772 
	`£ns‹_wrôe_ªgi°î
(0x8000,0x00);

2773 
	`£ns‹_wrôe_ªgi°î
(0x8001,0x00);

2774 
	`£ns‹_wrôe_ªgi°î
(0x8002,0x00);

2775 
	`£ns‹_wrôe_ªgi°î
(0x8003,0x00);

2776 
	`£ns‹_wrôe_ªgi°î
(0x8004,0x00);

2777 
	`£ns‹_wrôe_ªgi°î
(0x8005,0x00);

2778 
	`£ns‹_wrôe_ªgi°î
(0x8006,0x00);

2779 
	`£ns‹_wrôe_ªgi°î
(0x8007,0x00);

2780 
	`£ns‹_wrôe_ªgi°î
(0x8008,0x00);

2781 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

2782 
	`£ns‹_wrôe_ªgi°î
(0x0100,0x01);

2784 
bSís‹Inô
 = 
HI_TRUE
;

2785 
	`¥ötf
("-------OV4689 Sensor 720120fps Linear Mode Initial OK!-------\n");

2786 
	}
}

2787 
	$£ns‹_löór_720p_180Âs_öô
()

2789 
	`u¶ìp
(200000);

2790 
	`£ns‹_wrôe_ªgi°î
(0x0103,0x01);

2792 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

2793 
	`£ns‹_wrôe_ªgi°î
(0x0300,0x02);

2794 
	`£ns‹_wrôe_ªgi°î
(0x0302,0x32);

2795 
	`£ns‹_wrôe_ªgi°î
(0x0303,0x00);

2796 
	`£ns‹_wrôe_ªgi°î
(0x0304,0x03);

2797 
	`£ns‹_wrôe_ªgi°î
(0x030b,0x00);

2798 
	`£ns‹_wrôe_ªgi°î
(0x030d,0x1e);

2799 
	`£ns‹_wrôe_ªgi°î
(0x030e,0x04);

2800 
	`£ns‹_wrôe_ªgi°î
(0x030f,0x01);

2801 
	`£ns‹_wrôe_ªgi°î
(0x0312,0x01);

2802 
	`£ns‹_wrôe_ªgi°î
(0x031e,0x00);

2803 
	`£ns‹_wrôe_ªgi°î
(0x3000,0x20);

2804 
	`£ns‹_wrôe_ªgi°î
(0x3002,0x00);

2805 
	`£ns‹_wrôe_ªgi°î
(0x3018,0x72);

2806 
	`£ns‹_wrôe_ªgi°î
(0x3020,0x93);

2807 
	`£ns‹_wrôe_ªgi°î
(0x3021,0x03);

2808 
	`£ns‹_wrôe_ªgi°î
(0x3022,0x01);

2809 
	`£ns‹_wrôe_ªgi°î
(0x3031,0x0a);

2810 
	`£ns‹_wrôe_ªgi°î
(0x303f,0x0c);

2811 
	`£ns‹_wrôe_ªgi°î
(0x3305,0xf1);

2812 
	`£ns‹_wrôe_ªgi°î
(0x3307,0x04);

2813 
	`£ns‹_wrôe_ªgi°î
(0x3309,0x29);

2814 
	`£ns‹_wrôe_ªgi°î
(0x3500,0x00);

2815 
	`£ns‹_wrôe_ªgi°î
(0x3501,0x30);

2816 
	`£ns‹_wrôe_ªgi°î
(0x3502,0x00);

2817 
	`£ns‹_wrôe_ªgi°î
(0x3503,0x77);

2818 
	`£ns‹_wrôe_ªgi°î
(0x3504,0x00);

2819 
	`£ns‹_wrôe_ªgi°î
(0x3505,0x00);

2820 
	`£ns‹_wrôe_ªgi°î
(0x3506,0x00);

2821 
	`£ns‹_wrôe_ªgi°î
(0x3507,0x00);

2822 
	`£ns‹_wrôe_ªgi°î
(0x3508,0x00);

2823 
	`£ns‹_wrôe_ªgi°î
(0x3509,0x80);

2824 
	`£ns‹_wrôe_ªgi°î
(0x350a,0x00);

2825 
	`£ns‹_wrôe_ªgi°î
(0x350b,0x00);

2826 
	`£ns‹_wrôe_ªgi°î
(0x350c,0x00);

2827 
	`£ns‹_wrôe_ªgi°î
(0x350d,0x00);

2828 
	`£ns‹_wrôe_ªgi°î
(0x350e,0x00);

2829 
	`£ns‹_wrôe_ªgi°î
(0x350f,0x80);

2830 
	`£ns‹_wrôe_ªgi°î
(0x3510,0x00);

2831 
	`£ns‹_wrôe_ªgi°î
(0x3511,0x00);

2832 
	`£ns‹_wrôe_ªgi°î
(0x3512,0x00);

2833 
	`£ns‹_wrôe_ªgi°î
(0x3513,0x00);

2834 
	`£ns‹_wrôe_ªgi°î
(0x3514,0x00);

2835 
	`£ns‹_wrôe_ªgi°î
(0x3515,0x80);

2836 
	`£ns‹_wrôe_ªgi°î
(0x3516,0x00);

2837 
	`£ns‹_wrôe_ªgi°î
(0x3517,0x00);

2838 
	`£ns‹_wrôe_ªgi°î
(0x3518,0x00);

2839 
	`£ns‹_wrôe_ªgi°î
(0x3519,0x00);

2840 
	`£ns‹_wrôe_ªgi°î
(0x351a,0x00);

2841 
	`£ns‹_wrôe_ªgi°î
(0x351b,0x80);

2842 
	`£ns‹_wrôe_ªgi°î
(0x351c,0x00);

2843 
	`£ns‹_wrôe_ªgi°î
(0x351d,0x00);

2844 
	`£ns‹_wrôe_ªgi°î
(0x351e,0x00);

2845 
	`£ns‹_wrôe_ªgi°î
(0x351f,0x00);

2846 
	`£ns‹_wrôe_ªgi°î
(0x3520,0x00);

2847 
	`£ns‹_wrôe_ªgi°î
(0x3521,0x80);

2848 
	`£ns‹_wrôe_ªgi°î
(0x3522,0x08);

2849 
	`£ns‹_wrôe_ªgi°î
(0x3524,0x08);

2850 
	`£ns‹_wrôe_ªgi°î
(0x3526,0x08);

2851 
	`£ns‹_wrôe_ªgi°î
(0x3528,0x08);

2852 
	`£ns‹_wrôe_ªgi°î
(0x352a,0x08);

2853 
	`£ns‹_wrôe_ªgi°î
(0x3602,0x00);

2854 
	`£ns‹_wrôe_ªgi°î
(0x3603,0x40);

2855 
	`£ns‹_wrôe_ªgi°î
(0x3604,0x02);

2856 
	`£ns‹_wrôe_ªgi°î
(0x3605,0x00);

2857 
	`£ns‹_wrôe_ªgi°î
(0x3606,0x00);

2858 
	`£ns‹_wrôe_ªgi°î
(0x3607,0x00);

2859 
	`£ns‹_wrôe_ªgi°î
(0x3609,0x12);

2860 
	`£ns‹_wrôe_ªgi°î
(0x360a,0x40);

2861 
	`£ns‹_wrôe_ªgi°î
(0x360c,0x08);

2862 
	`£ns‹_wrôe_ªgi°î
(0x360f,0xe5);

2863 
	`£ns‹_wrôe_ªgi°î
(0x3608,0x8f);

2864 
	`£ns‹_wrôe_ªgi°î
(0x3611,0x00);

2865 
	`£ns‹_wrôe_ªgi°î
(0x3613,0xf7);

2866 
	`£ns‹_wrôe_ªgi°î
(0x3616,0x58);

2867 
	`£ns‹_wrôe_ªgi°î
(0x3619,0x99);

2868 
	`£ns‹_wrôe_ªgi°î
(0x361b,0x60);

2869 
	`£ns‹_wrôe_ªgi°î
(0x361c,0x7a);

2870 
	`£ns‹_wrôe_ªgi°î
(0x361e,0x79);

2871 
	`£ns‹_wrôe_ªgi°î
(0x361f,0x02);

2872 
	`£ns‹_wrôe_ªgi°î
(0x3632,0x05);

2873 
	`£ns‹_wrôe_ªgi°î
(0x3633,0x10);

2874 
	`£ns‹_wrôe_ªgi°î
(0x3634,0x10);

2875 
	`£ns‹_wrôe_ªgi°î
(0x3635,0x10);

2876 
	`£ns‹_wrôe_ªgi°î
(0x3636,0x15);

2877 
	`£ns‹_wrôe_ªgi°î
(0x3646,0x86);

2878 
	`£ns‹_wrôe_ªgi°î
(0x364a,0x0b);

2879 
	`£ns‹_wrôe_ªgi°î
(0x3700,0x17);

2880 
	`£ns‹_wrôe_ªgi°î
(0x3701,0x22);

2881 
	`£ns‹_wrôe_ªgi°î
(0x3703,0x10);

2882 
	`£ns‹_wrôe_ªgi°î
(0x370a,0x37);

2883 
	`£ns‹_wrôe_ªgi°î
(0x3705,0x00);

2884 
	`£ns‹_wrôe_ªgi°î
(0x3706,0x63);

2885 
	`£ns‹_wrôe_ªgi°î
(0x3709,0x3c);

2886 
	`£ns‹_wrôe_ªgi°î
(0x370b,0x01);

2887 
	`£ns‹_wrôe_ªgi°î
(0x370c,0x30);

2888 
	`£ns‹_wrôe_ªgi°î
(0x3710,0x24);

2889 
	`£ns‹_wrôe_ªgi°î
(0x3711,0x0c);

2890 
	`£ns‹_wrôe_ªgi°î
(0x3716,0x00);

2891 
	`£ns‹_wrôe_ªgi°î
(0x3720,0x28);

2892 
	`£ns‹_wrôe_ªgi°î
(0x3729,0x7b);

2893 
	`£ns‹_wrôe_ªgi°î
(0x372a,0x84);

2894 
	`£ns‹_wrôe_ªgi°î
(0x372b,0xbd);

2895 
	`£ns‹_wrôe_ªgi°î
(0x372c,0xbc);

2896 
	`£ns‹_wrôe_ªgi°î
(0x372e,0x52);

2897 
	`£ns‹_wrôe_ªgi°î
(0x373c,0x0e);

2898 
	`£ns‹_wrôe_ªgi°î
(0x373e,0x33);

2899 
	`£ns‹_wrôe_ªgi°î
(0x3743,0x10);

2900 
	`£ns‹_wrôe_ªgi°î
(0x3744,0x88);

2901 
	`£ns‹_wrôe_ªgi°î
(0x3745,0xc0);

2902 
	`£ns‹_wrôe_ªgi°î
(0x374a,0x43);

2903 
	`£ns‹_wrôe_ªgi°î
(0x374c,0x00);

2904 
	`£ns‹_wrôe_ªgi°î
(0x374e,0x23);

2905 
	`£ns‹_wrôe_ªgi°î
(0x3751,0x7b);

2906 
	`£ns‹_wrôe_ªgi°î
(0x3752,0x84);

2907 
	`£ns‹_wrôe_ªgi°î
(0x3753,0xbd);

2908 
	`£ns‹_wrôe_ªgi°î
(0x3754,0xbc);

2909 
	`£ns‹_wrôe_ªgi°î
(0x3756,0x52);

2910 
	`£ns‹_wrôe_ªgi°î
(0x375c,0x00);

2911 
	`£ns‹_wrôe_ªgi°î
(0x3760,0x00);

2912 
	`£ns‹_wrôe_ªgi°î
(0x3761,0x00);

2913 
	`£ns‹_wrôe_ªgi°î
(0x3762,0x00);

2914 
	`£ns‹_wrôe_ªgi°î
(0x3763,0x00);

2915 
	`£ns‹_wrôe_ªgi°î
(0x3764,0x00);

2916 
	`£ns‹_wrôe_ªgi°î
(0x3767,0x04);

2917 
	`£ns‹_wrôe_ªgi°î
(0x3768,0x04);

2918 
	`£ns‹_wrôe_ªgi°î
(0x3769,0x08);

2919 
	`£ns‹_wrôe_ªgi°î
(0x376a,0x08);

2920 
	`£ns‹_wrôe_ªgi°î
(0x376b,0x40);

2921 
	`£ns‹_wrôe_ªgi°î
(0x376c,0x00);

2922 
	`£ns‹_wrôe_ªgi°î
(0x376d,0x00);

2923 
	`£ns‹_wrôe_ªgi°î
(0x376e,0x00);

2924 
	`£ns‹_wrôe_ªgi°î
(0x3773,0x00);

2925 
	`£ns‹_wrôe_ªgi°î
(0x3774,0x51);

2926 
	`£ns‹_wrôe_ªgi°î
(0x3776,0xbd);

2927 
	`£ns‹_wrôe_ªgi°î
(0x3777,0xbd);

2928 
	`£ns‹_wrôe_ªgi°î
(0x3781,0x18);

2929 
	`£ns‹_wrôe_ªgi°î
(0x3783,0x25);

2930 
	`£ns‹_wrôe_ªgi°î
(0x3798,0x1b);

2931 
	`£ns‹_wrôe_ªgi°î
(0x3800,0x00);

2932 
	`£ns‹_wrôe_ªgi°î
(0x3801,0x48);

2933 
	`£ns‹_wrôe_ªgi°î
(0x3802,0x00);

2934 
	`£ns‹_wrôe_ªgi°î
(0x3803,0x2C);

2935 
	`£ns‹_wrôe_ªgi°î
(0x3804,0x0a);

2936 
	`£ns‹_wrôe_ªgi°î
(0x3805,0x57);

2937 
	`£ns‹_wrôe_ªgi°î
(0x3806,0x05);

2938 
	`£ns‹_wrôe_ªgi°î
(0x3807,0xD3);

2939 
	`£ns‹_wrôe_ªgi°î
(0x3808,0x05);

2940 
	`£ns‹_wrôe_ªgi°î
(0x3809,0x00);

2941 
	`£ns‹_wrôe_ªgi°î
(0x380a,0x02);

2942 
	`£ns‹_wrôe_ªgi°î
(0x380b,0xD0);

2943 
	`£ns‹_wrôe_ªgi°î
(0x380c,0x03);

2944 
	`£ns‹_wrôe_ªgi°î
(0x380d,0x5C);

2945 
	`£ns‹_wrôe_ªgi°î
(0x380e,0x03);

2946 
	`£ns‹_wrôe_ªgi°î
(0x380f,0x05);

2947 
	`£ns‹_wrôe_ªgi°î
(0x3810,0x00);

2948 
	`£ns‹_wrôe_ªgi°î
(0x3811,0x04);

2949 
	`£ns‹_wrôe_ªgi°î
(0x3812,0x00);

2950 
	`£ns‹_wrôe_ªgi°î
(0x3813,0x02);

2951 
	`£ns‹_wrôe_ªgi°î
(0x3814,0x03);

2952 
	`£ns‹_wrôe_ªgi°î
(0x3815,0x01);

2953 
	`£ns‹_wrôe_ªgi°î
(0x3819,0x01);

2954 
	`£ns‹_wrôe_ªgi°î
(0x3820,0x10);

2955 
	`£ns‹_wrôe_ªgi°î
(0x3821,0x07);

2956 
	`£ns‹_wrôe_ªgi°î
(0x3829,0x00);

2957 
	`£ns‹_wrôe_ªgi°î
(0x382a,0x03);

2958 
	`£ns‹_wrôe_ªgi°î
(0x382b,0x01);

2959 
	`£ns‹_wrôe_ªgi°î
(0x382d,0x7f);

2960 
	`£ns‹_wrôe_ªgi°î
(0x3830,0x08);

2961 
	`£ns‹_wrôe_ªgi°î
(0x3836,0x02);

2962 
	`£ns‹_wrôe_ªgi°î
(0x3837,0x00);

2963 
	`£ns‹_wrôe_ªgi°î
(0x3841,0x02);

2964 
	`£ns‹_wrôe_ªgi°î
(0x3846,0x08);

2965 
	`£ns‹_wrôe_ªgi°î
(0x3847,0x07);

2966 
	`£ns‹_wrôe_ªgi°î
(0x3d85,0x36);

2967 
	`£ns‹_wrôe_ªgi°î
(0x3d8c,0x71);

2968 
	`£ns‹_wrôe_ªgi°î
(0x3d8d,0xcb);

2969 
	`£ns‹_wrôe_ªgi°î
(0x3f0a,0x00);

2970 
	`£ns‹_wrôe_ªgi°î
(0x4000,0x71);

2971 
	`£ns‹_wrôe_ªgi°î
(0x4001,0x50);

2972 
	`£ns‹_wrôe_ªgi°î
(0x4002,0x04);

2973 
	`£ns‹_wrôe_ªgi°î
(0x4003,0x14);

2974 
	`£ns‹_wrôe_ªgi°î
(0x400e,0x00);

2975 
	`£ns‹_wrôe_ªgi°î
(0x4011,0x00);

2976 
	`£ns‹_wrôe_ªgi°î
(0x401a,0x00);

2977 
	`£ns‹_wrôe_ªgi°î
(0x401b,0x00);

2978 
	`£ns‹_wrôe_ªgi°î
(0x401c,0x00);

2979 
	`£ns‹_wrôe_ªgi°î
(0x401d,0x00);

2980 
	`£ns‹_wrôe_ªgi°î
(0x401f,0x00);

2981 
	`£ns‹_wrôe_ªgi°î
(0x4020,0x00);

2982 
	`£ns‹_wrôe_ªgi°î
(0x4021,0x10);

2983 
	`£ns‹_wrôe_ªgi°î
(0x4022,0x03);

2984 
	`£ns‹_wrôe_ªgi°î
(0x4023,0x93);

2985 
	`£ns‹_wrôe_ªgi°î
(0x4024,0x04);

2986 
	`£ns‹_wrôe_ªgi°î
(0x4025,0xC0);

2987 
	`£ns‹_wrôe_ªgi°î
(0x4026,0x04);

2988 
	`£ns‹_wrôe_ªgi°î
(0x4027,0xD0);

2989 
	`£ns‹_wrôe_ªgi°î
(0x4028,0x00);

2990 
	`£ns‹_wrôe_ªgi°î
(0x4029,0x02);

2991 
	`£ns‹_wrôe_ªgi°î
(0x402a,0x06);

2992 
	`£ns‹_wrôe_ªgi°î
(0x402b,0x04);

2993 
	`£ns‹_wrôe_ªgi°î
(0x402c,0x02);

2994 
	`£ns‹_wrôe_ªgi°î
(0x402d,0x02);

2995 
	`£ns‹_wrôe_ªgi°î
(0x402e,0x0e);

2996 
	`£ns‹_wrôe_ªgi°î
(0x402f,0x04);

2997 
	`£ns‹_wrôe_ªgi°î
(0x4302,0xff);

2998 
	`£ns‹_wrôe_ªgi°î
(0x4303,0xff);

2999 
	`£ns‹_wrôe_ªgi°î
(0x4304,0x00);

3000 
	`£ns‹_wrôe_ªgi°î
(0x4305,0x00);

3001 
	`£ns‹_wrôe_ªgi°î
(0x4306,0x00);

3002 
	`£ns‹_wrôe_ªgi°î
(0x4308,0x02);

3003 
	`£ns‹_wrôe_ªgi°î
(0x4500,0x6c);

3004 
	`£ns‹_wrôe_ªgi°î
(0x4501,0xc4);

3005 
	`£ns‹_wrôe_ªgi°î
(0x4502,0x44);

3006 
	`£ns‹_wrôe_ªgi°î
(0x4503,0x01);

3007 
	`£ns‹_wrôe_ªgi°î
(0x4601,0x4F);

3008 
	`£ns‹_wrôe_ªgi°î
(0x4800,0x04);

3009 
	`£ns‹_wrôe_ªgi°î
(0x4813,0x08);

3010 
	`£ns‹_wrôe_ªgi°î
(0x481f,0x40);

3011 
	`£ns‹_wrôe_ªgi°î
(0x4829,0x78);

3012 
	`£ns‹_wrôe_ªgi°î
(0x4837,0x1b);

3013 
	`£ns‹_wrôe_ªgi°î
(0x4b00,0x2a);

3014 
	`£ns‹_wrôe_ªgi°î
(0x4b0d,0x00);

3015 
	`£ns‹_wrôe_ªgi°î
(0x4d00,0x04);

3016 
	`£ns‹_wrôe_ªgi°î
(0x4d01,0x42);

3017 
	`£ns‹_wrôe_ªgi°î
(0x4d02,0xd1);

3018 
	`£ns‹_wrôe_ªgi°î
(0x4d03,0x93);

3019 
	`£ns‹_wrôe_ªgi°î
(0x4d04,0xf5);

3020 
	`£ns‹_wrôe_ªgi°î
(0x4d05,0xc1);

3021 
	`£ns‹_wrôe_ªgi°î
(0x5000,0xf3);

3022 
	`£ns‹_wrôe_ªgi°î
(0x5001,0x11);

3023 
	`£ns‹_wrôe_ªgi°î
(0x5004,0x00);

3024 
	`£ns‹_wrôe_ªgi°î
(0x500a,0x00);

3025 
	`£ns‹_wrôe_ªgi°î
(0x500b,0x00);

3026 
	`£ns‹_wrôe_ªgi°î
(0x5032,0x00);

3027 
	`£ns‹_wrôe_ªgi°î
(0x5040,0x00);

3028 
	`£ns‹_wrôe_ªgi°î
(0x5050,0x3c);

3029 
	`£ns‹_wrôe_ªgi°î
(0x5500,0x00);

3030 
	`£ns‹_wrôe_ªgi°î
(0x5501,0x10);

3031 
	`£ns‹_wrôe_ªgi°î
(0x5502,0x01);

3032 
	`£ns‹_wrôe_ªgi°î
(0x5503,0x0f);

3033 
	`£ns‹_wrôe_ªgi°î
(0x8000,0x00);

3034 
	`£ns‹_wrôe_ªgi°î
(0x8001,0x00);

3035 
	`£ns‹_wrôe_ªgi°î
(0x8002,0x00);

3036 
	`£ns‹_wrôe_ªgi°î
(0x8003,0x00);

3037 
	`£ns‹_wrôe_ªgi°î
(0x8004,0x00);

3038 
	`£ns‹_wrôe_ªgi°î
(0x8005,0x00);

3039 
	`£ns‹_wrôe_ªgi°î
(0x8006,0x00);

3040 
	`£ns‹_wrôe_ªgi°î
(0x8007,0x00);

3041 
	`£ns‹_wrôe_ªgi°î
(0x8008,0x00);

3042 
	`£ns‹_wrôe_ªgi°î
(0x3638,0x00);

3043 
	`£ns‹_wrôe_ªgi°î
(0x0100,0x01);

3045 
bSís‹Inô
 = 
HI_TRUE
;

3046 
	`¥ötf
("-------OV4689 Sensor 720180fps Linear Mode Initial OK!-------\n");

3047 
	}
}

	@component/isp/sensor/omnivision_ov5658/ov5658_cmos.c

1 #i‡!
deföed
(
__OV5658_CMOS_H_
)

2 
	#__OV5658_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#OV5658_ID
 5658

	)

26 #ifde‡
INIFILE_CONFIG_MODE


28 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

29 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

30 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

31 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

39 c⁄° 
£ns‹_i2c_addr
;

40 
£ns‹_addr_byã
;

41 
£ns‹_d©a_byã
;

44 
	#GAIN_ADDR
 (0x350A)

	)

45 
	#VMAX_ADDR
 (0x380E)

	)

46 
	#SHS_ADDR
 (0x3500)

	)

48 
	#INCREASE_LINES
 (1Ë

	)

49 
	#SENSOR_5M_30FPS_MODE
 (1)

	)

50 
	#VMAX_5M30
 (1984+
INCREASE_LINES
)

	)

53 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

54 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

56 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_5M30
;

57 
HI_U32
 
	ggu32FuŒLöes
 = 
VMAX_5M30
;

58 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

59 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

61 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

62 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

64 
	#PATHLEN_MAX
 256

	)

65 
	#CMOS_CFG_INI
 "ov5658_cfg.öi"

	)

66 
	gpcName
[
PATHLEN_MAX
] = "configs/ov5658_cfg.ini";

69 #ifde‡
INIFILE_CONFIG_MODE


71 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

73 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

75 
¥ötf
("nullÖointer when getáe default value!\n");

79 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

80 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

81 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

83 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

84 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

85 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

87 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

88 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

90 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

91 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.1;

94 
	ggíSís‹Mode
)

97 
WDR_MODE_NONE
:

98 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

99 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

100 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

101 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

103 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

105 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

106 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

107 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

108 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

110 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 63488;

111 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

112 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

113 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

115 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1024;

116 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

117 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

118 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

120 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

121 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

122 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

124 
	gWDR_MODE_2To1_FRAME
:

125 
WDR_MODE_2To1_FRAME_FULL_RATE
:

126 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

127 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

128 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

129 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

131 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

133 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

134 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

135 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

136 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

138 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 63488;

139 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

140 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

141 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

143 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1024;

144 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

145 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

146 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

148 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

149 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

150 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

158 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

160 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

162 
¥ötf
("nullÖointer when getáe default value!\n");

166 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

167 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

168 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

170 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

171 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

172 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

174 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

175 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.0625;

177 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

178 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 1;

180 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

181 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

182 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

184 
	ggíSís‹Mode
)

187 
WDR_MODE_NONE
:

189 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

190 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

191 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

192 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

194 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

196 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

197 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

198 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535 -4;

199 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

201 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 63488;

202 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

203 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

204 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

206 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

207 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

208 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

209 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

211 
	gWDR_MODE_2To1_FRAME
:

212 
WDR_MODE_2To1_FRAME_FULL_RATE
:

214 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xc;

215 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

216 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

217 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

219 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

221 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

222 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

223 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535 -4;

224 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

226 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 63488;

227 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

228 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

229 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

231 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

232 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

233 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

234 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

243 
	#AGAIN_NODE_NUM
 96

	)

245 
HI_U32
 
	gau32Agaö_èbÀ
[
AGAIN_NODE_NUM
]=

257 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

259 
	gi
;

261 if((
	gHI_NULL
 =
pu32AgaöLö
Ë||(
HI_NULL
 =
pu32AgaöDb
))

263 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

267 i‡(*
	gpu32AgaöLö
 >
au32Agaö_èbÀ
[
AGAIN_NODE_NUM
 -1])

269 *
pu32AgaöLö
 = 
au32Agaö_èbÀ
[
AGAIN_NODE_NUM
 -1];

270 *
	gpu32AgaöDb
 = 
AGAIN_NODE_NUM
 -1;

274 
	gi
 = 1; i < 
	gAGAIN_NODE_NUM
; i++)

276 i‡(*
	gpu32AgaöLö
 < 
	gau32Agaö_èbÀ
[
i
])

278 *
	gpu32AgaöLö
 = 
au32Agaö_èbÀ
[
i
 - 1];

279 *
	gpu32AgaöDb
 = 
i
 - 1;

289 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

291 i‡(
	gSENSOR_5M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

293 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

295 
gu32FuŒLöesStd
 = 
VMAX_5M30
*30/
f32Fps
;

299 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

305 
¥ötf
("NŸ suµ‹t! gu8Sís‹ImageMode:%d, f32Fps:%f\n", 
gu8Sís‹ImageMode
, 
f32Fps
);

309 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

311 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

313 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

314 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

318 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

319 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

322 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

323 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

324 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

325 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

327 
	ggu32FuŒLöes
 = 
gu32FuŒLöesStd
;

332 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

334 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

335 
	ggu32FuŒLöes

u32FuŒLöes
;

337 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

339 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u32D©a
 = ((
gu32FuŒLöes
 & 0xFF00) >> 8);

340 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

344 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = ((
gu32FuŒLöes
 & 0xFF00) >> 8);

345 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

348 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 4;

354 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

356 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

358 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

360 if(
bFú°
)

362 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = ((
u32I¡Time
 & 0xF000) >> 12);

363 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = ((
u32I¡Time
 & 0x0FF0) >> 4);

364 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = ((
u32I¡Time
 & 0x000F) << 4);

365 
	gbFú°
 = 
HI_FALSE
;

369 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = ((
u32I¡Time
 & 0xF000) >> 12);

370 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = ((
u32I¡Time
 & 0x0FF0) >> 4);

371 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = ((
u32I¡Time
 & 0x000F) << 4);

372 
	gbFú°
 = 
HI_TRUE
;

377 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = ((
u32I¡Time
 & 0xF000) >> 12);

378 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = ((
u32I¡Time
 & 0x0FF0) >> 4);

379 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = ((
u32I¡Time
 & 0x000F) << 4);

386 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

388 
HI_U32
 
	gu32NumOf1s
 = 0;

389 
HI_U32
 
	gu32NumOf1sReg
 =0;

390 
	gu32NumOf1s
 = 
u32Agaö
>>4;

392 
	gu32NumOf1s
)

394 
	gu32NumOf1sReg
 = (
u32NumOf1sReg
 << 1) + 1;

395 
	gu32NumOf1s
 --;

398 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = (
u32NumOf1sReg
 >> 4);

399 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = ( (
u32NumOf1sReg
 & 0x0FË<<4Ë+ (
u32Agaö
 & 0x0F);

407 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

409 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

411 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

415 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

417 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 4Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

424 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

426 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

428 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

429 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

430 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

431 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

432 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

433 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

434 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

441 #ifde‡
INIFILE_CONFIG_MODE


443 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

445 
HI_U8
 
	gi
;

447 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

449 
¥ötf
("nullÖointer when getáwb default value!\n");

453 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

455 
	ggíSís‹Mode
)

458 
WDR_MODE_NONE
:

459 
WDR_MODE_2To1_FRAME
:

460 
WDR_MODE_2To1_FRAME_FULL_RATE
:

461 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

462 
	gi
= 0; i < 4; i++)

464 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

466 
	gi
= 0; i < 6; i++)

468 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

470 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

471 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

479 
AWB_CCM_S
 
	gg_°AwbCcm
 =

503 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

512 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

524 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

526 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

528 
¥ötf
("nullÖointer when getáwb default value!\n");

532 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

534 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4800;

536 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x16b;

537 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

538 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

539 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x172;

541 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 94;

542 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 15;

543 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -147;

544 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 168728;

545 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

546 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -119825;

548 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

550 
	ggíSís‹Mode
)

553 
WDR_MODE_NONE
:

554 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

556 
	gWDR_MODE_2To1_FRAME
:

557 
WDR_MODE_2To1_FRAME_FULL_RATE
:

558 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

568 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

570 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

572 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

579 #ifde‡
INIFILE_CONFIG_MODE


581 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

583 i‡(
	gHI_NULL
 =
p°Def
)

585 
¥ötf
("nullÖointer when get isp default value!\n");

589 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

591 
	ggíSís‹Mode
)

594 
WDR_MODE_NONE
:

595 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

596 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

597 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

598 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

599 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

600 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

602 
	gWDR_MODE_2To1_FRAME
:

603 
WDR_MODE_2To1_FRAME_FULL_RATE
:

604 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

605 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

606 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

607 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

608 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

609 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

610 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

615 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

616 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1944;

623 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

652 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

680 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

711 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

742 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

788 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

834 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

849 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥nFSWDR
 =

865 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

888 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

911 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

929 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

931 i‡(
	gHI_NULL
 =
p°Def
)

933 
¥ötf
("nullÖointer when get isp default value!\n");

937 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

939 
	ggíSís‹Mode
)

941 
	gWDR_MODE_NONE
:

942 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

943 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

944 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

945 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

946 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

947 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

948 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

949 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

950 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

952 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

953 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

954 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

955 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

956 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

958 
	gWDR_MODE_2To1_FRAME
:

959 
WDR_MODE_2To1_FRAME_FULL_RATE
:

961 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

962 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

963 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

964 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

965 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

966 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

967 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

968 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

969 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

971 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

972 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

973 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

974 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥nFSWDR
, (
ISP_CMOS_RGBSHARPEN_S
));

975 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

976 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

982 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

983 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1944;

990 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

992 
HI_S32
 
	gi
;

994 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

996 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1001 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1002 
	gi
=0; i<4; i++)

1004 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 65;

1009 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1011 
HI_U32
 
	gu32FuŒLöes_5Fps
 = 
VMAX_5M30
;

1012 
HI_U32
 
	gu32MaxExpTime_5Fps
 = 
VMAX_5M30
 - 2;

1014 i‡(
	gSENSOR_5M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1016 
u32FuŒLöes_5Fps
 = 
VMAX_5M30
 * 30 / 5;

1023 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1024 
	gu32MaxExpTime_5Fps
 = 
u32FuŒLöes_5Fps
 - 4;

1026 i‡(
	gbE«bÀ
)

1028 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
+1, 
u32FuŒLöes_5Fps
 & 0xFF);

1029 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, (
u32FuŒLöes_5Fps
 & 0xFF00) >> 8 );

1031 
£ns‹_wrôe_ªgi°î
(
SHS_ADDR
, (
u32MaxExpTime_5Fps
 & 0xF000) >> 12);

1032 
£ns‹_wrôe_ªgi°î
(
SHS_ADDR
+1, (
u32MaxExpTime_5Fps
 & 0x0FF0) >> 4);

1033 
£ns‹_wrôe_ªgi°î
(
SHS_ADDR
+2, (
u32MaxExpTime_5Fps
 & 0x000F) << 4);

1035 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
, 0x00);

1036 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
+1, 0x10);

1040 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

1041 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
+1, 
gu32FuŒLöesStd
 & 0xFF);

1042 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
, (
gu32FuŒLöesStd
 & 0xFF00) >> 8);

1043 
	gbInô
 = 
HI_FALSE
;

1049 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1051 
	gbInô
 = 
HI_FALSE
;

1053 
	gu8Mode
)

1055 
	gWDR_MODE_NONE
:

1056 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1057 
¥ötf
("linear mode\n");

1060 
	gWDR_MODE_2To1_FRAME
:

1061 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1062 
¥ötf
("2to1 half-rate frame WDR mode\n");

1065 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1066 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1067 
¥ötf
("2to1 full-rate frame WDR mode\n");

1071 
¥ötf
("NOT supportÅhis mode!\n");

1078 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1080 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1082 
	gbInô
 = 
HI_FALSE
;

1084 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1086 
¥ötf
("nullÖointer when set image mode\n");

1090 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2592)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1944))

1092 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1094 
u8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

1098 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1099 
p°Sís‹ImageMode
->
u16Width
,

1100 
p°Sís‹ImageMode
->
u16Height
,

1101 
p°Sís‹ImageMode
->
f32Fps
);

1108 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1109 
p°Sís‹ImageMode
->
u16Width
,

1110 
p°Sís‹ImageMode
->
u16Height
,

1111 
p°Sís‹ImageMode
->
f32Fps
);

1115 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1117 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1123 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1129 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1135 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1137 
HI_S32
 
	gi
;

1139 i‡(
	gHI_FALSE
 =
bInô
)

1141 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1142 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1143 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 7;

1145 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1147 
g_°SnsRegsInfo
.
u32RegNum
 += 3;

1150 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1152 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1153 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1154 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1155 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1157 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1158 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
SHS_ADDR
;

1159 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1160 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
SHS_ADDR
+1;

1161 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 0;

1162 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 
SHS_ADDR
+2;

1164 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 0;

1165 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
GAIN_ADDR
;

1166 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 0;

1167 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
GAIN_ADDR
+1;

1169 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 0;

1170 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
VMAX_ADDR
;

1171 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 0;

1172 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 
VMAX_ADDR
+1;

1174 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1176 
g_°SnsRegsInfo
.
a°I2cD©a
[5].
u8DñayFrmNum
 = 1;

1177 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
SHS_ADDR
;

1178 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 1;

1179 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 
SHS_ADDR
+1;

1180 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 1;

1181 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
SHS_ADDR
+2;

1182 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 0;

1183 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
VMAX_ADDR
;

1184 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1185 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR
+1;

1188 
	gbInô
 = 
HI_TRUE
;

1192 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1194 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1196 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1200 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1204 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1206 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1207 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1208 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gbUpd©e
 = 
HI_TRUE
;

1209 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gbUpd©e
 = 
HI_TRUE
;

1210 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gbUpd©e
 = 
HI_TRUE
;

1211 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gbUpd©e
 = 
HI_TRUE
;

1215 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1217 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1221 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1222 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1227 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1229 
mem£t
(
pcName
, 0, (pcName));

1231 i‡(
	gHI_NULL
 =
pcP©h
)

1233 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1234 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1238 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1240 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1244 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1245 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1251 
HI_VOID
 
£ns‹_globÆ_öô
()

1253 
	ggu8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

1254 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1255 
	ggu32FuŒLöesStd
 = 
VMAX_5M30
;

1256 
	ggu32FuŒLöes
 = 
VMAX_5M30
;

1257 
	gbInô
 = 
HI_FALSE
;

1258 
	gbSís‹Inô
 = 
HI_FALSE
;

1260 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1261 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1263 #ifde‡
INIFILE_CONFIG_MODE


1264 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1265 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1266 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1268 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1275 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1277 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1279 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1280 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1281 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1282 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1283 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1285 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1286 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1287 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1288 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1297 
£ns‹_ªgi°î_ˇŒback
()

1299 
ISP_DEV
 
	gI•Dev
 = 0;

1300 
HI_S32
 
	gs32Rë
;

1301 
ALG_LIB_S
 
	g°Lib
;

1302 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1303 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1304 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1306 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1307 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
OV5658_ID
, &
°I•Regi°î
);

1308 i‡(
	gs32Rë
)

1310 
¥ötf
("sensorÑegister callback function failed!\n");

1311  
	gs32Rë
;

1314 
	g°Lib
.
	gs32Id
 = 0;

1315 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1316 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1317 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
OV5658_ID
, &
°AeRegi°î
);

1318 i‡(
	gs32Rë
)

1320 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1321  
	gs32Rë
;

1324 
	g°Lib
.
	gs32Id
 = 0;

1325 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1326 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1327 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
OV5658_ID
, &
°AwbRegi°î
);

1328 i‡(
	gs32Rë
)

1330 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1331  
	gs32Rë
;

1337 
£ns‹_uƒegi°î_ˇŒback
()

1339 
ISP_DEV
 
	gI•Dev
 = 0;

1340 
HI_S32
 
	gs32Rë
;

1341 
ALG_LIB_S
 
	g°Lib
;

1343 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
OV5658_ID
);

1344 i‡(
	gs32Rë
)

1346 
¥ötf
("sensor unregister callback function failed!\n");

1347  
	gs32Rë
;

1350 
	g°Lib
.
	gs32Id
 = 0;

1351 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1352 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
OV5658_ID
);

1353 i‡(
	gs32Rë
)

1355 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1356  
	gs32Rë
;

1359 
	g°Lib
.
	gs32Id
 = 0;

1360 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1361 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
OV5658_ID
);

1362 i‡(
	gs32Rë
)

1364 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1365  
	gs32Rë
;

1371 #ifde‡
__˝lu•lus


1372 #i‡
__˝lu•lus


	@component/isp/sensor/omnivision_ov5658/ov5658_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

25 
	~"hi_comm_video.h
"

27 #ifde‡
HI_GPIO_I2C


28 
	~"gpioi2c_ex.h
"

30 
	~"hi_i2c.h
"

34 c⁄° 
	g£ns‹_i2c_addr
 = 0x6c;

35 c⁄° 
	g£ns‹_addr_byã
 = 2;

36 c⁄° 
	g£ns‹_d©a_byã
 = 1;

37 
	gg_fd
 = -1;

39 
HI_U8
 
gu8Sís‹ImageMode
;

40 
HI_BOOL
 
bSís‹Inô
;

42 
	$£ns‹_i2c_öô
()

44 if(
g_fd
 >= 0)

48 #ifde‡
HI_GPIO_I2C


49 
ªt
;

51 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

52 if(
g_fd
 < 0)

54 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

58 
ªt
;

60 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

61 if(
g_fd
 < 0)

63 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

67 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

68 i‡(
ªt
 < 0)

70 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

71  
ªt
;

76 
	}
}

78 
	$£ns‹_i2c_exô
()

80 i‡(
g_fd
 >= 0)

82 
	`˛o£
(
g_fd
);

83 
g_fd
 = -1;

87 
	}
}

89 
	$£ns‹_ªad_ªgi°î
(
addr
)

94 
	}
}

96 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

98 #ifde‡
HI_GPIO_I2C


99 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

100 
i2c_d©a
.
ªg_addr
 = 
addr
;

101 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

102 
i2c_d©a
.
d©a
 = data;

103 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

105 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

107 i‡(
ªt
)

109 
	`¥ötf
("GPIO-I2C write faild!\n");

110  
ªt
;

113 
idx
 = 0;

114 
ªt
;

115 
buf
[8];

117 
buf
[
idx
++] = 
addr
 & 0xFF;

118 i‡(
£ns‹_addr_byã
 == 2)

120 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

121 
buf
[
idx
++] = 
addr
 >> 8;

125 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

128 i‡(
ªt
 < 0)

130 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

134 
buf
[
idx
++] = 
d©a
;

135 i‡(
£ns‹_d©a_byã
 == 2)

137 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

138 
buf
[
idx
++] = 
d©a
 >> 8;

142 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

145 i‡(
ªt
)

147 
	`¥ötf
("hi_i2c write faild!\n");

151 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

152 if(
ªt
 < 0)

154 
	`¥ötf
("I2C_WRITEÉrror!\n");

159 
	}
}

161 
	$dñay_ms
(
ms
) {

162 
	`u¶ìp
(
ms
*1000);

163 
	}
}

165 
	$£ns‹_¥og
(* 
rom
)

167 
i
 = 0;

169 
lookup
 = 
rom
[
i
++];

170 
addr
 = (
lookup
 >> 16) & 0xFFFF;

171 
d©a
 = 
lookup
 & 0xFFFF;

172 i‡(
addr
 == 0xFFFE) {

173 
	`dñay_ms
(
d©a
);

174 } i‡(
addr
 == 0xFFFF) {

177 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

180 
	}
}

182 
£ns‹_öô_5M30
();

184 
	$£ns‹_öô
()

186 
	`£ns‹_i2c_öô
();

188 i‡(1 =
gu8Sís‹ImageMode
)

190 
	`£ns‹_öô_5M30
();

191 
bSís‹Inô
 = 
HI_TRUE
;

195 
	`¥ötf
("Not supportÅhis mode\n");

197 
	}
}

199 
	$£ns‹_exô
()

201 
	`£ns‹_i2c_exô
();

204 
	}
}

207 
	$£ns‹_öô_5M30
()

209 
	`£ns‹_wrôe_ªgi°î
(0x0103, 0x01);

210 
	`£ns‹_wrôe_ªgi°î
(0x3210, 0x43);

211 
	`£ns‹_wrôe_ªgi°î
(0x3001, 0x0e);

212 
	`£ns‹_wrôe_ªgi°î
(0x3002, 0xc0);

213 
	`£ns‹_wrôe_ªgi°î
(0x3011, 0x41);

214 
	`£ns‹_wrôe_ªgi°î
(0x3012, 0x0a);

215 
	`£ns‹_wrôe_ªgi°î
(0x3013, 0x50);

216 
	`£ns‹_wrôe_ªgi°î
(0x3015, 0x09);

217 
	`£ns‹_wrôe_ªgi°î
(0x3018, 0xf0);

218 
	`£ns‹_wrôe_ªgi°î
(0x3021, 0x40);

219 
	`£ns‹_wrôe_ªgi°î
(0x3500, 0x00);

220 
	`£ns‹_wrôe_ªgi°î
(0x3501, 0x7b);

221 
	`£ns‹_wrôe_ªgi°î
(0x3502, 0x00);

222 
	`£ns‹_wrôe_ªgi°î
(0x3503, 0x07);

223 
	`£ns‹_wrôe_ªgi°î
(0x3505, 0x00);

224 
	`£ns‹_wrôe_ªgi°î
(0x3506, 0x00);

225 
	`£ns‹_wrôe_ªgi°î
(0x3507, 0x02);

226 
	`£ns‹_wrôe_ªgi°î
(0x3508, 0x00);

227 
	`£ns‹_wrôe_ªgi°î
(0x3509, 0x08);

228 
	`£ns‹_wrôe_ªgi°î
(0x350a, 0x00);

229 
	`£ns‹_wrôe_ªgi°î
(0x350b, 0x80);

230 
	`£ns‹_wrôe_ªgi°î
(0x3600, 0x4b);

231 
	`£ns‹_wrôe_ªgi°î
(0x3602, 0x3c);

232 
	`£ns‹_wrôe_ªgi°î
(0x3605, 0x14);

233 
	`£ns‹_wrôe_ªgi°î
(0x3606, 0x09);

234 
	`£ns‹_wrôe_ªgi°î
(0x3612, 0x04);

235 
	`£ns‹_wrôe_ªgi°î
(0x3613, 0x66);

236 
	`£ns‹_wrôe_ªgi°î
(0x3614, 0x39);

237 
	`£ns‹_wrôe_ªgi°î
(0x3615, 0x33);

238 
	`£ns‹_wrôe_ªgi°î
(0x3616, 0x46);

239 
	`£ns‹_wrôe_ªgi°î
(0x361a, 0x0a);

240 
	`£ns‹_wrôe_ªgi°î
(0x361c, 0x76);

241 
	`£ns‹_wrôe_ªgi°î
(0x3620, 0x40);

242 
	`£ns‹_wrôe_ªgi°î
(0x3640, 0x03);

243 
	`£ns‹_wrôe_ªgi°î
(0x3641, 0x60);

244 
	`£ns‹_wrôe_ªgi°î
(0x3642, 0x00);

245 
	`£ns‹_wrôe_ªgi°î
(0x3643, 0x90);

246 
	`£ns‹_wrôe_ªgi°î
(0x3660, 0x04);

247 
	`£ns‹_wrôe_ªgi°î
(0x3665, 0x00);

248 
	`£ns‹_wrôe_ªgi°î
(0x3666, 0x20);

249 
	`£ns‹_wrôe_ªgi°î
(0x3667, 0x00);

250 
	`£ns‹_wrôe_ªgi°î
(0x366a, 0x80);

251 
	`£ns‹_wrôe_ªgi°î
(0x3680, 0xe0);

252 
	`£ns‹_wrôe_ªgi°î
(0x3692, 0x80);

253 
	`£ns‹_wrôe_ªgi°î
(0x3700, 0x42);

254 
	`£ns‹_wrôe_ªgi°î
(0x3701, 0x14);

255 
	`£ns‹_wrôe_ªgi°î
(0x3702, 0xe8);

256 
	`£ns‹_wrôe_ªgi°î
(0x3703, 0x20);

257 
	`£ns‹_wrôe_ªgi°î
(0x3704, 0x5e);

258 
	`£ns‹_wrôe_ªgi°î
(0x3705, 0x02);

259 
	`£ns‹_wrôe_ªgi°î
(0x3708, 0xe3);

260 
	`£ns‹_wrôe_ªgi°î
(0x3709, 0xc3);

261 
	`£ns‹_wrôe_ªgi°î
(0x370a, 0x00);

262 
	`£ns‹_wrôe_ªgi°î
(0x370b, 0x20);

263 
	`£ns‹_wrôe_ªgi°î
(0x370c, 0x0c);

264 
	`£ns‹_wrôe_ªgi°î
(0x370d, 0x11);

265 
	`£ns‹_wrôe_ªgi°î
(0x370e, 0x00);

266 
	`£ns‹_wrôe_ªgi°î
(0x370f, 0x40);

267 
	`£ns‹_wrôe_ªgi°î
(0x3710, 0x00);

268 
	`£ns‹_wrôe_ªgi°î
(0x3715, 0x09);

269 
	`£ns‹_wrôe_ªgi°î
(0x371a, 0x04);

270 
	`£ns‹_wrôe_ªgi°î
(0x371b, 0x05);

271 
	`£ns‹_wrôe_ªgi°î
(0x371c, 0x01);

272 
	`£ns‹_wrôe_ªgi°î
(0x371e, 0xa1);

273 
	`£ns‹_wrôe_ªgi°î
(0x371f, 0x18);

274 
	`£ns‹_wrôe_ªgi°î
(0x3721, 0x00);

275 
	`£ns‹_wrôe_ªgi°î
(0x3726, 0x00);

276 
	`£ns‹_wrôe_ªgi°î
(0x372a, 0x01);

277 
	`£ns‹_wrôe_ªgi°î
(0x3730, 0x10);

278 
	`£ns‹_wrôe_ªgi°î
(0x3738, 0x22);

279 
	`£ns‹_wrôe_ªgi°î
(0x3739, 0xe5);

280 
	`£ns‹_wrôe_ªgi°î
(0x373a, 0x50);

281 
	`£ns‹_wrôe_ªgi°î
(0x373b, 0x02);

282 
	`£ns‹_wrôe_ªgi°î
(0x373c, 0x2c);

283 
	`£ns‹_wrôe_ªgi°î
(0x373f, 0x02);

284 
	`£ns‹_wrôe_ªgi°î
(0x3740, 0x42);

285 
	`£ns‹_wrôe_ªgi°î
(0x3741, 0x02);

286 
	`£ns‹_wrôe_ªgi°î
(0x3743, 0x01);

287 
	`£ns‹_wrôe_ªgi°î
(0x3744, 0x02);

288 
	`£ns‹_wrôe_ªgi°î
(0x3747, 0x00);

289 
	`£ns‹_wrôe_ªgi°î
(0x3754, 0xc0);

290 
	`£ns‹_wrôe_ªgi°î
(0x3755, 0x07);

291 
	`£ns‹_wrôe_ªgi°î
(0x3756, 0x1a);

292 
	`£ns‹_wrôe_ªgi°î
(0x3759, 0x0f);

293 
	`£ns‹_wrôe_ªgi°î
(0x375c, 0x04);

294 
	`£ns‹_wrôe_ªgi°î
(0x3767, 0x00);

295 
	`£ns‹_wrôe_ªgi°î
(0x376b, 0x44);

296 
	`£ns‹_wrôe_ªgi°î
(0x377b, 0x44);

297 
	`£ns‹_wrôe_ªgi°î
(0x377c, 0x30);

298 
	`£ns‹_wrôe_ªgi°î
(0x377e, 0x30);

299 
	`£ns‹_wrôe_ªgi°î
(0x377f, 0x08);

300 
	`£ns‹_wrôe_ªgi°î
(0x3781, 0x0c);

301 
	`£ns‹_wrôe_ªgi°î
(0x3785, 0x1e);

302 
	`£ns‹_wrôe_ªgi°î
(0x378f, 0xf5);

303 
	`£ns‹_wrôe_ªgi°î
(0x3791, 0xb0);

304 
	`£ns‹_wrôe_ªgi°î
(0x379c, 0x0c);

305 
	`£ns‹_wrôe_ªgi°î
(0x379d, 0x20);

306 
	`£ns‹_wrôe_ªgi°î
(0x379e, 0x00);

307 
	`£ns‹_wrôe_ªgi°î
(0x3796, 0x72);

308 
	`£ns‹_wrôe_ªgi°î
(0x379a, 0x07);

309 
	`£ns‹_wrôe_ªgi°î
(0x379b, 0xb0);

310 
	`£ns‹_wrôe_ªgi°î
(0x37c5, 0x00);

311 
	`£ns‹_wrôe_ªgi°î
(0x37c6, 0x00);

312 
	`£ns‹_wrôe_ªgi°î
(0x37c7, 0x00);

313 
	`£ns‹_wrôe_ªgi°î
(0x37c9, 0x00);

314 
	`£ns‹_wrôe_ªgi°î
(0x37ca, 0x00);

315 
	`£ns‹_wrôe_ªgi°î
(0x37cb, 0x00);

316 
	`£ns‹_wrôe_ªgi°î
(0x37cc, 0x00);

317 
	`£ns‹_wrôe_ªgi°î
(0x37cd, 0x00);

318 
	`£ns‹_wrôe_ªgi°î
(0x37ce, 0x01);

319 
	`£ns‹_wrôe_ªgi°î
(0x37cf, 0x00);

320 
	`£ns‹_wrôe_ªgi°î
(0x37d1, 0x00);

321 
	`£ns‹_wrôe_ªgi°î
(0x37de, 0x00);

322 
	`£ns‹_wrôe_ªgi°î
(0x37df, 0x00);

323 
	`£ns‹_wrôe_ªgi°î
(0x3800, 0x00);

324 
	`£ns‹_wrôe_ªgi°î
(0x3801, 0x00);

325 
	`£ns‹_wrôe_ªgi°î
(0x3802, 0x00);

326 
	`£ns‹_wrôe_ªgi°î
(0x3803, 0x00);

327 
	`£ns‹_wrôe_ªgi°î
(0x3804, 0x0a);

328 
	`£ns‹_wrôe_ªgi°î
(0x3805, 0x3f);

329 
	`£ns‹_wrôe_ªgi°î
(0x3806, 0x07);

330 
	`£ns‹_wrôe_ªgi°î
(0x3807, 0xa3);

331 
	`£ns‹_wrôe_ªgi°î
(0x3808, 0x0a);

332 
	`£ns‹_wrôe_ªgi°î
(0x3809, 0x20);

334 
	`£ns‹_wrôe_ªgi°î
(0x380a, 0x07);

335 
	`£ns‹_wrôe_ªgi°î
(0x380b, 0x98);

336 
	`£ns‹_wrôe_ªgi°î
(0x380c, 0x0c);

337 
	`£ns‹_wrôe_ªgi°î
(0x380d, 0x98);

338 
	`£ns‹_wrôe_ªgi°î
(0x380e, 0x07);

339 
	`£ns‹_wrôe_ªgi°î
(0x380f, 0xc0);

340 
	`£ns‹_wrôe_ªgi°î
(0x3810, 0x00);

341 
	`£ns‹_wrôe_ªgi°î
(0x3811, 0x10);

342 
	`£ns‹_wrôe_ªgi°î
(0x3812, 0x00);

343 
	`£ns‹_wrôe_ªgi°î
(0x3813, 0x06);

344 
	`£ns‹_wrôe_ªgi°î
(0x3814, 0x11);

345 
	`£ns‹_wrôe_ªgi°î
(0x3815, 0x11);

347 
	`£ns‹_wrôe_ªgi°î
(0x3820, 0x10);

349 
	`£ns‹_wrôe_ªgi°î
(0x3821, 0x1e);

352 
	`£ns‹_wrôe_ªgi°î
(0x3823, 0x00);

353 
	`£ns‹_wrôe_ªgi°î
(0x3824, 0x00);

354 
	`£ns‹_wrôe_ªgi°î
(0x3825, 0x00);

355 
	`£ns‹_wrôe_ªgi°î
(0x3826, 0x00);

356 
	`£ns‹_wrôe_ªgi°î
(0x3827, 0x00);

357 
	`£ns‹_wrôe_ªgi°î
(0x3829, 0x0b);

358 
	`£ns‹_wrôe_ªgi°î
(0x382a, 0x04);

359 
	`£ns‹_wrôe_ªgi°î
(0x382c, 0x34);

360 
	`£ns‹_wrôe_ªgi°î
(0x382d, 0x00);

361 
	`£ns‹_wrôe_ªgi°î
(0x3a04, 0x06);

362 
	`£ns‹_wrôe_ªgi°î
(0x3a05, 0x14);

363 
	`£ns‹_wrôe_ªgi°î
(0x3a06, 0x00);

364 
	`£ns‹_wrôe_ªgi°î
(0x3a07, 0xfe);

365 
	`£ns‹_wrôe_ªgi°î
(0x3b00, 0x00);

366 
	`£ns‹_wrôe_ªgi°î
(0x3b02, 0x00);

367 
	`£ns‹_wrôe_ªgi°î
(0x3b03, 0x00);

368 
	`£ns‹_wrôe_ªgi°î
(0x3b04, 0x00);

369 
	`£ns‹_wrôe_ªgi°î
(0x3b05, 0x00);

370 
	`£ns‹_wrôe_ªgi°î
(0x4000, 0x18);

371 
	`£ns‹_wrôe_ªgi°î
(0x4001, 0x04);

372 
	`£ns‹_wrôe_ªgi°î
(0x4002, 0x45);

373 
	`£ns‹_wrôe_ªgi°î
(0x4004, 0x04);

374 
	`£ns‹_wrôe_ªgi°î
(0x4005, 0x18);

375 
	`£ns‹_wrôe_ªgi°î
(0x4006, 0x20);

376 
	`£ns‹_wrôe_ªgi°î
(0x4007, 0x98);

377 
	`£ns‹_wrôe_ªgi°î
(0x4008, 0x24);

378 
	`£ns‹_wrôe_ªgi°î
(0x4009, 0x10);

379 
	`£ns‹_wrôe_ªgi°î
(0x400c, 0x00);

380 
	`£ns‹_wrôe_ªgi°î
(0x400d, 0x00);

381 
	`£ns‹_wrôe_ªgi°î
(0x404e, 0x37);

382 
	`£ns‹_wrôe_ªgi°î
(0x404f, 0x8f);

383 
	`£ns‹_wrôe_ªgi°î
(0x4058, 0x00);

384 
	`£ns‹_wrôe_ªgi°î
(0x4100, 0x50);

385 
	`£ns‹_wrôe_ªgi°î
(0x4101, 0x34);

386 
	`£ns‹_wrôe_ªgi°î
(0x4102, 0x34);

387 
	`£ns‹_wrôe_ªgi°î
(0x4104, 0xde);

388 
	`£ns‹_wrôe_ªgi°î
(0x4300, 0xff);

389 
	`£ns‹_wrôe_ªgi°î
(0x4307, 0x30);

390 
	`£ns‹_wrôe_ªgi°î
(0x4311, 0x04);

391 
	`£ns‹_wrôe_ªgi°î
(0x4315, 0x01);

392 
	`£ns‹_wrôe_ªgi°î
(0x4501, 0x08);

393 
	`£ns‹_wrôe_ªgi°î
(0x4502, 0x08);

394 
	`£ns‹_wrôe_ªgi°î
(0x4816, 0x52);

395 
	`£ns‹_wrôe_ªgi°î
(0x481f, 0x30);

396 
	`£ns‹_wrôe_ªgi°î
(0x4826, 0x28);

397 
	`£ns‹_wrôe_ªgi°î
(0x4837, 0x0d);

398 
	`£ns‹_wrôe_ªgi°î
(0x4a00, 0xaa);

399 
	`£ns‹_wrôe_ªgi°î
(0x4a02, 0x00);

400 
	`£ns‹_wrôe_ªgi°î
(0x4a03, 0x01);

401 
	`£ns‹_wrôe_ªgi°î
(0x4a05, 0x40);

402 
	`£ns‹_wrôe_ªgi°î
(0x4a0a, 0x88);

403 
	`£ns‹_wrôe_ªgi°î
(0x5000, 0x06);

404 
	`£ns‹_wrôe_ªgi°î
(0x5001, 0x01);

405 
	`£ns‹_wrôe_ªgi°î
(0x5002, 0x00);

406 
	`£ns‹_wrôe_ªgi°î
(0x5003, 0x20);

407 
	`£ns‹_wrôe_ªgi°î
(0x5013, 0x00);

408 
	`£ns‹_wrôe_ªgi°î
(0x501f, 0x00);

409 
	`£ns‹_wrôe_ªgi°î
(0x5043, 0x48);

410 
	`£ns‹_wrôe_ªgi°î
(0x5780, 0x1c);

411 
	`£ns‹_wrôe_ªgi°î
(0x5786, 0x20);

412 
	`£ns‹_wrôe_ªgi°î
(0x5788, 0x18);

413 
	`£ns‹_wrôe_ªgi°î
(0x578a, 0x04);

414 
	`£ns‹_wrôe_ªgi°î
(0x578b, 0x02);

415 
	`£ns‹_wrôe_ªgi°î
(0x578c, 0x02);

416 
	`£ns‹_wrôe_ªgi°î
(0x578e, 0x06);

417 
	`£ns‹_wrôe_ªgi°î
(0x578f, 0x02);

418 
	`£ns‹_wrôe_ªgi°î
(0x5790, 0x02);

419 
	`£ns‹_wrôe_ªgi°î
(0x5791, 0xff);

420 
	`£ns‹_wrôe_ªgi°î
(0x5e00, 0x00);

421 
	`£ns‹_wrôe_ªgi°î
(0x5e10, 0x0c);

422 
	`£ns‹_wrôe_ªgi°î
(0x0100, 0x01);

424 
	`u¶ìp
(10000);

426 
	`£ns‹_wrôe_ªgi°î
(0x5800, 0x22);

427 
	`£ns‹_wrôe_ªgi°î
(0x5801, 0x11);

428 
	`£ns‹_wrôe_ªgi°î
(0x5802, 0x0d);

429 
	`£ns‹_wrôe_ªgi°î
(0x5803, 0x0d);

430 
	`£ns‹_wrôe_ªgi°î
(0x5804, 0x12);

431 
	`£ns‹_wrôe_ªgi°î
(0x5805, 0x26);

432 
	`£ns‹_wrôe_ªgi°î
(0x5806, 0x09);

433 
	`£ns‹_wrôe_ªgi°î
(0x5807, 0x07);

434 
	`£ns‹_wrôe_ªgi°î
(0x5808, 0x05);

435 
	`£ns‹_wrôe_ªgi°î
(0x5809, 0x05);

436 
	`£ns‹_wrôe_ªgi°î
(0x580a, 0x07);

437 
	`£ns‹_wrôe_ªgi°î
(0x580b, 0x0a);

438 
	`£ns‹_wrôe_ªgi°î
(0x580c, 0x07);

439 
	`£ns‹_wrôe_ªgi°î
(0x580d, 0x02);

440 
	`£ns‹_wrôe_ªgi°î
(0x580e, 0x00);

441 
	`£ns‹_wrôe_ªgi°î
(0x580f, 0x00);

442 
	`£ns‹_wrôe_ªgi°î
(0x5810, 0x03);

443 
	`£ns‹_wrôe_ªgi°î
(0x5811, 0x07);

444 
	`£ns‹_wrôe_ªgi°î
(0x5812, 0x06);

445 
	`£ns‹_wrôe_ªgi°î
(0x5813, 0x02);

446 
	`£ns‹_wrôe_ªgi°î
(0x5814, 0x00);

447 
	`£ns‹_wrôe_ªgi°î
(0x5815, 0x00);

448 
	`£ns‹_wrôe_ªgi°î
(0x5816, 0x03);

449 
	`£ns‹_wrôe_ªgi°î
(0x5817, 0x07);

450 
	`£ns‹_wrôe_ªgi°î
(0x5818, 0x09);

451 
	`£ns‹_wrôe_ªgi°î
(0x5819, 0x05);

452 
	`£ns‹_wrôe_ªgi°î
(0x581a, 0x04);

453 
	`£ns‹_wrôe_ªgi°î
(0x581b, 0x04);

454 
	`£ns‹_wrôe_ªgi°î
(0x581c, 0x07);

455 
	`£ns‹_wrôe_ªgi°î
(0x581d, 0x09);

456 
	`£ns‹_wrôe_ªgi°î
(0x581e, 0x1d);

457 
	`£ns‹_wrôe_ªgi°î
(0x581f, 0x0e);

458 
	`£ns‹_wrôe_ªgi°î
(0x5820, 0x0b);

459 
	`£ns‹_wrôe_ªgi°î
(0x5821, 0x0b);

460 
	`£ns‹_wrôe_ªgi°î
(0x5822, 0x0f);

461 
	`£ns‹_wrôe_ªgi°î
(0x5823, 0x1e);

462 
	`£ns‹_wrôe_ªgi°î
(0x5824, 0x59);

463 
	`£ns‹_wrôe_ªgi°î
(0x5825, 0x46);

464 
	`£ns‹_wrôe_ªgi°î
(0x5826, 0x37);

465 
	`£ns‹_wrôe_ªgi°î
(0x5827, 0x36);

466 
	`£ns‹_wrôe_ªgi°î
(0x5828, 0x45);

467 
	`£ns‹_wrôe_ªgi°î
(0x5829, 0x39);

468 
	`£ns‹_wrôe_ªgi°î
(0x582a, 0x46);

469 
	`£ns‹_wrôe_ªgi°î
(0x582b, 0x44);

470 
	`£ns‹_wrôe_ªgi°î
(0x582c, 0x45);

471 
	`£ns‹_wrôe_ªgi°î
(0x582d, 0x28);

472 
	`£ns‹_wrôe_ªgi°î
(0x582e, 0x38);

473 
	`£ns‹_wrôe_ªgi°î
(0x582f, 0x52);

474 
	`£ns‹_wrôe_ªgi°î
(0x5830, 0x60);

475 
	`£ns‹_wrôe_ªgi°î
(0x5831, 0x51);

476 
	`£ns‹_wrôe_ªgi°î
(0x5832, 0x26);

477 
	`£ns‹_wrôe_ªgi°î
(0x5833, 0x38);

478 
	`£ns‹_wrôe_ªgi°î
(0x5834, 0x43);

479 
	`£ns‹_wrôe_ªgi°î
(0x5835, 0x42);

480 
	`£ns‹_wrôe_ªgi°î
(0x5836, 0x34);

481 
	`£ns‹_wrôe_ªgi°î
(0x5837, 0x18);

482 
	`£ns‹_wrôe_ªgi°î
(0x5838, 0x05);

483 
	`£ns‹_wrôe_ªgi°î
(0x5839, 0x27);

484 
	`£ns‹_wrôe_ªgi°î
(0x583a, 0x27);

485 
	`£ns‹_wrôe_ªgi°î
(0x583b, 0x27);

486 
	`£ns‹_wrôe_ªgi°î
(0x583c, 0x0a);

487 
	`£ns‹_wrôe_ªgi°î
(0x583d, 0xbf);

488 
	`£ns‹_wrôe_ªgi°î
(0x5842, 0x01);

489 
	`£ns‹_wrôe_ªgi°î
(0x5843, 0x2b);

490 
	`£ns‹_wrôe_ªgi°î
(0x5844, 0x01);

491 
	`£ns‹_wrôe_ªgi°î
(0x5845, 0x92);

492 
	`£ns‹_wrôe_ªgi°î
(0x5846, 0x01);

493 
	`£ns‹_wrôe_ªgi°î
(0x5847, 0x8f);

494 
	`£ns‹_wrôe_ªgi°î
(0x5848, 0x01);

495 
	`£ns‹_wrôe_ªgi°î
(0x5849, 0x0c);

497 
	`¥ötf
("-------OV ov5658 Sensor 5M30fps Initial OK!-------\n");

499 
	}
}

	@component/isp/sensor/panasonic_mn34220/mn34220_cmos.c

1 #i‡!
deföed
(
__MN34220_CMOS_H_
)

2 
	#__MN34220_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


22 
	#MN34220_ID
 34220

	)

26 
	#CMOS_MN34220_SLOW_SHUTTER_VMAX_MODE


	)

30 #ifde‡
INIFILE_CONFIG_MODE


32 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

33 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

34 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

35 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

44 c⁄° 
£ns‹_i2c_addr
;

45 
£ns‹_addr_byã
;

46 
£ns‹_d©a_byã
;

48 
	#EXPOSURE_ADDR_HHH
 (0x0220)

	)

49 
	#EXPOSURE_ADDR_H
 (0x0202)

	)

50 
	#EXPOSURE_ADDR_L
 (0x0203)

	)

51 
	#SHORT_EXPOSURE_ADDR_H
 (0x312A)

	)

52 
	#SHORT_EXPOSURE_ADDR_L
 (0x312B)

	)

53 
	#AGC_ADDR_H
 (0x0204)

	)

54 
	#AGC_ADDR_L
 (0x0205)

	)

55 
	#DGC_ADDR_H
 (0x3108)

	)

56 
	#DGC_ADDR_L
 (0x3109)

	)

57 
	#VMAX_ADDR_H
 (0x0340)

	)

58 
	#VMAX_ADDR_L
 (0x0341)

	)

60 
	#INCREASE_LINES
 (1Ë

	)

61 
	#VMAX_1080P30_LINEAR
 (1125+
INCREASE_LINES
)

	)

62 
	#VMAX_1080P60_LINEAR
 (1125+
INCREASE_LINES
)

	)

63 
	#VMAX_1080P60TO30_WDR
 (1250+
INCREASE_LINES
)

	)

64 
	#VMAX_720P120_LINEAR
 (750+
INCREASE_LINES
)

	)

65 
	#VMAX_VGA240_LINEAR
 (562+
INCREASE_LINES
)

	)

67 
	#SENSOR_1080P_60FPS_MODE
 (1)

	)

68 
	#SENSOR_1080P_30FPS_MODE
 (2)

	)

69 
	#SENSOR_720P_120FPS_MODE
 (3)

	)

70 
	#SENSOR_VGA_240FPS_MODE
 (4)

	)

72 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_1080P_30FPS_MODE
;

73 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

75 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

76 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

77 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

79 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

80 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

82 
	#PATHLEN_MAX
 256

	)

83 
	#CMOS_CFG_INI
 "mn34220_cfg.öi"

	)

84 
	gpcName
[
PATHLEN_MAX
] = "configs/mn34220_cfg.ini";

88 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_30Fps
 =

101 
ISP_AE_ROUTE_EX_S
 
	gg°AERouãExAâr_30Fps
 =

114 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_30Fps_Púis
 =

129 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_25Fps
 =

142 
ISP_AE_ROUTE_EX_S
 
	gg°AERouãExAâr_25Fps
 =

155 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_25Fps_Púis
 =

171 
ISP_PIRIS_ATTR_S
 
	gg°PúisAâr
=

179 
ISP_IRIS_F_NO_1_4
,

180 
ISP_IRIS_F_NO_5_6


183 #ifde‡
INIFILE_CONFIG_MODE


185 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

187 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

189 
¥ötf
("nullÖointer when getáe default value!\n");

193 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*25/2;

194 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

195 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

197 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

198 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

199 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.8045;

201 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

202 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.38;

204 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

205 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.38;

207 
	gp°AeSnsD·
->
	gu32InôExposuª
 = 921600;

209 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

211 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.6082;

213 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

215 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.8045;

220 
	ggíSís‹Mode
)

223 
WDR_MODE_NONE
:

224 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

225 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

226 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

227 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

229 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

231 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

232 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

233 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

234 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

236 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

237 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

238 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

239 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

241 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

242 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

243 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

244 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

246 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

247 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

248 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

251 
	gWDR_MODE_2To1_FRAME
:

252 
WDR_MODE_2To1_FRAME_FULL_RATE
:

253 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

254 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

255 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

256 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

258 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[2].
u8AeCom≥nßti⁄
;

260 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

261 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

262 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MaxI¡TimeT¨gë
;

263 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MöI¡TimeT¨gë
;

265 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

266 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

267 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[2].
u32MaxAgaöT¨gë
;

268 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[2].
u32MöAgaöT¨gë
;

270 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

271 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

272 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxDgaöT¨gë
;

273 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[2].
u32MöDgaöT¨gë
;

275 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[2].
u32ISPDgaöShi·
;

276 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MöISPDgaöT¨gë
;

277 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxISPDgaöT¨gë
;

279 
	gWDR_MODE_2To1_LINE
:

280 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

281 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

282 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

283 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

285 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

287 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

288 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

289 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

290 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

292 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

293 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

294 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

295 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

297 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

298 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

299 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

300 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

302 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

303 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

304 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

306 i‡(1250 =
gu32FuŒLöesStd
)

308 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

309 
mem˝y
(&
p°AeSnsD·
->
°AERouãAârEx
, &
g°AERouãExAâr_30Fps
, (
ISP_AE_ROUTE_EX_S
));

311 i‡(1500 =
gu32FuŒLöesStd
)

313 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

314 
mem˝y
(&
p°AeSnsD·
->
°AERouãAârEx
, &
g°AERouãExAâr_25Fps
, (
ISP_AE_ROUTE_EX_S
));

319 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

321 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2155;

323 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

325 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2818;

337 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

339 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

341 
¥ötf
("nullÖointer when getáe default value!\n");

345 
mem£t
(&
p°AeSnsD·
->
°AERouãAâr
, 0, (
ISP_AE_ROUTE_S
));

347 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*25/2;

348 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

349 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

351 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

352 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

353 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.8045;

355 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

356 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.38;

358 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

359 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.38;

361 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

362 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

363 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

365 
	gp°AeSnsD·
->
	gu32InôExposuª
 = 921600;

367 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

369 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.6082;

371 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

373 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.8045;

378 
	gp°AeSnsD·
->
	gíIrisTy≥
 = 
ISP_IRIS_DC_TYPE
;

379 
mem˝y
(&
p°AeSnsD·
->
°PúisAâr
, &
g°PúisAâr
, (
ISP_PIRIS_ATTR_S
));

381 
	gp°AeSnsD·
->
	gbAERouãExVÆid
 = 
HI_FALSE
;

383 
	ggíSís‹Mode
)

386 
WDR_MODE_NONE
:

387 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

388 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

389 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

390 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

392 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

394 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

395 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

396 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

397 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

399 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

400 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

401 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

402 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

404 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

405 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

406 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

407 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

409 
	gWDR_MODE_2To1_FRAME
:

410 
WDR_MODE_2To1_FRAME_FULL_RATE
:

411 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

412 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

413 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

414 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

416 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

418 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

419 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

420 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

421 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

423 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

424 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

425 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

426 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

428 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

429 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

430 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

431 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

433 
	gWDR_MODE_2To1_LINE
:

434 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

435 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

436 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

437 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

439 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

441 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

442 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

443 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

444 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

446 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

447 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

448 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 8134;

449 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

451 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

452 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

453 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 1024;

454 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

456 i‡(1250 =
gu32FuŒLöesStd
)

458 if(
ISP_IRIS_P_TYPE
 =
p°AeSnsD·
->
íIrisTy≥
)

460 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps_Púis
, (
ISP_AE_ROUTE_S
));

464 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

465 
mem˝y
(&
p°AeSnsD·
->
°AERouãAârEx
, &
g°AERouãExAâr_30Fps
, (
ISP_AE_ROUTE_EX_S
));

468 i‡(1500 =
gu32FuŒLöesStd
)

470 if(
ISP_IRIS_P_TYPE
 =
p°AeSnsD·
->
íIrisTy≥
)

472 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps_Púis
, (
ISP_AE_ROUTE_S
));

476 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

477 
mem˝y
(&
p°AeSnsD·
->
°AERouãAârEx
, &
g°AERouãExAâr_25Fps
, (
ISP_AE_ROUTE_EX_S
));

483 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

485 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2155;

487 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

489 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2818;

494 
	gp°AeSnsD·
->
	gbAERouãExVÆid
 = 
HI_TRUE
;

505 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

507 #ifde‡
CMOS_MN34220_SLOW_SHUTTER_VMAX_MODE


508 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

511 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

513 
gu32FuŒLöesStd
 = 
VMAX_1080P60TO30_WDR
 * 30 / 
f32Fps
;

514 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.2818;

518 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

522 i‡(25 =
f32Fps
)

524 if(
ISP_IRIS_P_TYPE
 =
p°AeSnsD·
->
íIrisTy≥
)

526 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps_Púis
, (
ISP_AE_ROUTE_S
));

530 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

531 
mem˝y
(&
p°AeSnsD·
->
°AERouãAârEx
, &
g°AERouãExAâr_25Fps
, (
ISP_AE_ROUTE_EX_S
));

536 if(
	gISP_IRIS_P_TYPE
 =
p°AeSnsD·
->
íIrisTy≥
)

538 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps_Púis
, (
ISP_AE_ROUTE_S
));

542 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

543 
mem˝y
(&
p°AeSnsD·
->
°AERouãAârEx
, &
g°AERouãExAâr_30Fps
, (
ISP_AE_ROUTE_EX_S
));

549 i‡(
	gSENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

551 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

556 
gu32FuŒLöesStd
 = (
VMAX_1080P30_LINEAR
 * 30Ë/ 
f32Fps
;

557 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.8045;

561 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

565 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

567 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

572 
gu32FuŒLöesStd
 = (
VMAX_1080P60_LINEAR
 * 60Ë/ 
f32Fps
;

573 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.6082;

577 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

581 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

583 i‡((
f32Fps
 <= 120) && (f32Fps >= 0.5))

588 
gu32FuŒLöesStd
 = (
VMAX_720P120_LINEAR
 * 120Ë/ 
f32Fps
;

589 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.5982;

593 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

597 i‡(
	gSENSOR_VGA_240FPS_MODE
 =
gu8Sís‹ImageMode
)

599 i‡((
f32Fps
 <= 240) && (f32Fps >= 0.5))

604 
gu32FuŒLöesStd
 = (
VMAX_VGA240_LINEAR
 * 240Ë/ 
f32Fps
;

605 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.4309;

609 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

615 
¥ötf
("NŸ suµ‹t! gu8Sís‹ImageMode:%d, f32Fps:%f\n", 
gu8Sís‹ImageMode
, 
f32Fps
);

620 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

621 if(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

623 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

624 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

628 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

629 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

632 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

633 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

634 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

635 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

643 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

644 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

646 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

648 if(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

650 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u32D©a
 = ((
u32FuŒLöes
 & 0xFF00) >> 8);

651 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
u32FuŒLöes
 & 0xFF);

655 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = ((
u32FuŒLöes
 & 0xFF00) >> 8);

656 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = (
u32FuŒLöes
 & 0xFF);

659 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
u32FuŒLöes
 - 2;

665 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

667 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

669 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

671 i‡(
bFú°
)

673 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

674 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

675 
	gbFú°
 = 
HI_FALSE
;

679 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

680 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

681 
	gbFú°
 = 
HI_TRUE
;

684 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

686 i‡(
bFú°
)

688 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

689 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

690 
	gbFú°
 = 
HI_FALSE
;

694 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

695 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

696 
	gbFú°
 = 
HI_TRUE
;

701 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

702 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

703 
	gbFú°
 = 
HI_TRUE
;

709 
HI_U32
 
	gad_gaö_èbÀ
[81]=

718 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

720 
	gi
;

722 if((
	gHI_NULL
 =
pu32AgaöLö
Ë||(
HI_NULL
 =
pu32AgaöDb
))

724 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

728 i‡(*
	gpu32AgaöLö
 >
ad_gaö_èbÀ
[80])

730 *
pu32AgaöLö
 = 
ad_gaö_èbÀ
[80];

731 *
	gpu32AgaöDb
 = 80;

735 
	gi
 = 1; i < 81; i++)

737 i‡(*
	gpu32AgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

739 *
	gpu32AgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

740 *
	gpu32AgaöDb
 = 
i
 - 1;

748 
HI_VOID
 
cmos_dgaö_ˇlc_èbÀ
(
HI_U32
 *
pu32DgaöLö
, HI_U32 *
pu32DgaöDb
)

750 
	gi
;

752 if((
	gHI_NULL
 =
pu32DgaöLö
Ë||(
HI_NULL
 =
pu32DgaöDb
))

754 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

758 i‡(*
	gpu32DgaöLö
 >
ad_gaö_èbÀ
[80])

760 *
pu32DgaöLö
 = 
ad_gaö_èbÀ
[80];

761 *
	gpu32DgaöDb
 = 80;

765 
	gi
 = 1; i < 81; i++)

767 i‡(*
	gpu32DgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

769 *
	gpu32DgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

770 *
	gpu32DgaöDb
 = 
i
 - 1;

778 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

780 
HI_U32
 
	gu32Tmp_Agaö
 = 0x100 + 
u32Agaö
 * 4;

781 
HI_U32
 
	gu32Tmp_Dgaö
 = 0x100 + 
u32Dgaö
 * 4;

783 i‡((
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 =((
u32Tmp_Agaö
 & 0xFF00) >> 8))

784 && (
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 =(
u32Tmp_Agaö
 & 0xFF)))

786 
g_°SnsRegsInfo
.
a°I2cD©a
[2].
u32D©a
 = 0x30;

790 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = 0x0;

793 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = ((
u32Tmp_Agaö
 & 0xFF00) >> 8);

794 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = (
u32Tmp_Agaö
 & 0xFF);

796 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = ((
u32Tmp_Dgaö
 & 0xFF00) >> 8);

797 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
u32Tmp_Dgaö
 & 0xFF);

803 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

805 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

807 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

811 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

813 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 2Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

815 i‡((
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
))

820 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 30Ë* 0x40 / (
u32R©io
 + 0x40);

827 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

829 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

831 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

832 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

833 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

834 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

835 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

836 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

837 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
cmos_dgaö_ˇlc_èbÀ
;

838 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

845 #ifde‡
INIFILE_CONFIG_MODE


847 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

849 
HI_U8
 
	gi
;

851 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

853 
¥ötf
("nullÖointer when getáwb default value!\n");

857 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

859 
	ggíSís‹Mode
)

862 
WDR_MODE_NONE
:

863 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

864 
	gi
= 0; i < 4; i++)

866 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

869 
	gi
= 0; i < 6; i++)

871 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

874 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

875 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

877 
	gWDR_MODE_2To1_LINE
:

878 
WDR_MODE_2To1_FRAME
:

879 
WDR_MODE_2To1_FRAME_FULL_RATE
:

880 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

881 
	gi
= 0; i < 4; i++)

883 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

886 
	gi
= 0; i < 6; i++)

888 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

891 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

892 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

901 
AWB_CCM_S
 
	gg_°AwbCcm
 =

925 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

936 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

946 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

948 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

950 
¥ötf
("nullÖointer when getáwb default value!\n");

954 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

956 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 5000;

958 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x1F0;

959 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

960 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

961 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1A0;

963 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 41;

964 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 127;

965 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -87;

966 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 174535;

967 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

968 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -123490;

970 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

972 
	ggíSís‹Mode
)

975 
WDR_MODE_NONE
:

976 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

978 
	gWDR_MODE_2To1_LINE
:

979 
WDR_MODE_2To1_FRAME
:

980 
WDR_MODE_2To1_FRAME_FULL_RATE
:

981 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

990 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

992 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

994 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

1001 #ifde‡
INIFILE_CONFIG_MODE


1003 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

1005 i‡(
	gHI_NULL
 =
p°Def
)

1007 
¥ötf
("nullÖointer when get isp default value!\n");

1011 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

1013 
	ggíSís‹Mode
)

1016 
WDR_MODE_NONE
:

1017 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

1018 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

1019 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

1020 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

1021 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

1022 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

1024 
	gWDR_MODE_2To1_LINE
:

1025 
WDR_MODE_2To1_FRAME
:

1026 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1027 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

1028 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

1029 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

1030 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

1031 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

1032 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

1033 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

1038 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

1039 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

1046 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

1073 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

1100 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

1125 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

1141 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

1186 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

1231 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

1246 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

1288 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

1306 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

1322 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

1324 i‡(
	gHI_NULL
 =
p°Def
)

1326 
¥ötf
("nullÖointer when get isp default value!\n");

1330 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

1332 
	ggíSís‹Mode
)

1335 
WDR_MODE_NONE
:

1336 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

1337 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1338 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

1339 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

1340 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

1341 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

1342 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

1343 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1344 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1346 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

1347 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

1348 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

1349 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1350 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

1352 
	gWDR_MODE_2To1_LINE
:

1353 
WDR_MODE_2To1_FRAME
:

1354 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1355 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

1356 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1357 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

1358 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

1359 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

1360 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x06;

1361 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x08;

1362 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1363 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1365 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

1366 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

1367 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

1368 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1369 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

1370 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

1375 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

1376 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

1383 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

1385 
HI_S32
 
	gi
;

1387 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

1389 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1394 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1396 
	gi
=0; i<4; i++)

1398 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0x100;

1401 i‡((
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 =gíSís‹ModeË|| (
WDR_MODE_2To1_FRAME_FULL_RATE
 == genSensorMode))

1403 
p°BœckLevñ
->
au16BœckLevñ
[0] = 0xFF;

1404 
	gp°BœckLevñ
->
	gau16BœckLevñ
[1] = 0x100;

1405 
	gp°BœckLevñ
->
	gau16BœckLevñ
[2] = 0x100;

1406 
	gp°BœckLevñ
->
	gau16BœckLevñ
[3] = 0xFF;

1413 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1415 
HI_U32
 
	gu32FuŒLöes_5Fps
, 
	gu32MaxI¡Time_5Fps
;

1417 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1423 i‡(
	gSENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1425 
u32FuŒLöes_5Fps
 = (
VMAX_1080P30_LINEAR
 * 30) / 5;

1427 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1429 
u32FuŒLöes_5Fps
 = (
VMAX_1080P60_LINEAR
 * 60) / 5;

1431 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

1433 
u32FuŒLöes_5Fps
 = (
VMAX_720P120_LINEAR
 * 120) / 5;

1435 i‡(
	gSENSOR_VGA_240FPS_MODE
 =
gu8Sís‹ImageMode
)

1437 
u32FuŒLöes_5Fps
 = (
VMAX_VGA240_LINEAR
 * 240) / 5;

1445 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1446 
	gu32MaxI¡Time_5Fps
 = 
u32FuŒLöes_5Fps
 - 2;

1448 i‡(
	gbE«bÀ
)

1450 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_H
, (
u32FuŒLöes_5Fps
 & 0xFF00) >> 8);

1451 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_L
, 
u32FuŒLöes_5Fps
 & 0xFF);

1452 
£ns‹_wrôe_ªgi°î
(0x0202, (
u32MaxI¡Time_5Fps
 & 0xFF00) >> 8);

1453 
£ns‹_wrôe_ªgi°î
(0x0203, 
u32MaxI¡Time_5Fps
 & 0xFF);

1454 
£ns‹_wrôe_ªgi°î
(0x0204, 0x01);

1455 
£ns‹_wrôe_ªgi°î
(0x0205, 0x00);

1456 
£ns‹_wrôe_ªgi°î
(0x3108, 0x01);

1457 
£ns‹_wrôe_ªgi°î
(0x3109, 0x00);

1461 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_H
, (
gu32FuŒLöesStd
 & 0xFF00) >> 8);

1462 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_L
, 
gu32FuŒLöesStd
 & 0xFF);

1463 
	gbInô
 = 
HI_FALSE
;

1469 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1471 
	gbInô
 = 
HI_FALSE
;

1473 
	gu8Mode
)

1475 
	gWDR_MODE_NONE
:

1476 i‡(
SENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1478 
gu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1480 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1482 
gu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

1484 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

1486 
gu32FuŒLöesStd
 = 
VMAX_720P120_LINEAR
;

1488 i‡(
	gSENSOR_VGA_240FPS_MODE
 =
gu8Sís‹ImageMode
)

1490 
gu32FuŒLöesStd
 = 
VMAX_VGA240_LINEAR
;

1492 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1493 
¥ötf
("linear mode\n");

1496 
	gWDR_MODE_2To1_LINE
:

1497 
gu32FuŒLöesStd
 = 
VMAX_1080P60TO30_WDR
;

1498 
	ggíSís‹Mode
 = 
WDR_MODE_2To1_LINE
;

1499 
¥ötf
("2to1Üine WDR mode\n");

1502 
	gWDR_MODE_2To1_FRAME
:

1503 i‡(
SENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1505 
gu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1507 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1509 
gu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

1511 
	ggíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1513 
¥ötf
("2to1 half-rate frame WDR mode\n");

1516 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1517 i‡(
SENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1519 
gu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1521 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1523 
gu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

1525 
	ggíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1527 
¥ötf
("2to1 full-rate frame WDR mode\n");

1531 
¥ötf
("NOT supportÅhis mode!\n");

1539 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1541 
HI_S32
 
	gi
;

1543 i‡(
	gHI_FALSE
 =
bInô
)

1545 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1546 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1548 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 9;

1549 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1551 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1553 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1555 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1558 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1560 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1561 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1562 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1563 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1566 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1567 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
EXPOSURE_ADDR_H
;

1568 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1569 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
EXPOSURE_ADDR_L
;

1572 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 1;

1573 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 0x3280;

1576 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 1;

1577 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
AGC_ADDR_H
;

1578 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 1;

1579 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
AGC_ADDR_L
;

1582 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 1;

1583 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
DGC_ADDR_H
;

1584 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 1;

1585 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 
DGC_ADDR_L
;

1588 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 0;

1589 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
VMAX_ADDR_H
;

1590 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 0;

1591 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
VMAX_ADDR_L
;

1593 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1595 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u8DñayFrmNum
 = 1;

1596 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
SHORT_EXPOSURE_ADDR_H
;

1597 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 1;

1598 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
SHORT_EXPOSURE_ADDR_L
;

1600 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1601 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR_H
;

1602 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1603 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 
VMAX_ADDR_L
;

1605 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1607 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u8DñayFrmNum
 = 1;

1608 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
EXPOSURE_ADDR_H
;

1609 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 1;

1610 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
EXPOSURE_ADDR_L
;

1612 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1613 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR_H
;

1614 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1615 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 
VMAX_ADDR_L
;

1618 
	gbInô
 = 
HI_TRUE
;

1622 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1624 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1626 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1630 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1634 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1636 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1637 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1638 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gbUpd©e
 = 
HI_TRUE
;

1639 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gbUpd©e
 = 
HI_TRUE
;

1643 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1645 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1649 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1650 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1655 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1657 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1659 
	gbInô
 = 
HI_FALSE
;

1661 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1663 
¥ötf
("nullÖointer when set image mode\n");

1667 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <640Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 480))

1669 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1671 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 240)

1673 
u8Sís‹ImageMode
 = 
SENSOR_VGA_240FPS_MODE
;

1677 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1678 
p°Sís‹ImageMode
->
u16Width
,

1679 
p°Sís‹ImageMode
->
u16Height
,

1680 
p°Sís‹ImageMode
->
f32Fps
,

1681 
gíSís‹Mode
);

1686 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1687 
p°Sís‹ImageMode
->
u16Width
,

1688 
p°Sís‹ImageMode
->
u16Height
,

1689 
p°Sís‹ImageMode
->
f32Fps
,

1690 
gíSís‹Mode
);

1693 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <1280Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 720))

1695 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1697 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 120)

1699 
u8Sís‹ImageMode
 = 
SENSOR_720P_120FPS_MODE
;

1703 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1704 
p°Sís‹ImageMode
->
u16Width
,

1705 
p°Sís‹ImageMode
->
u16Height
,

1706 
p°Sís‹ImageMode
->
f32Fps
,

1707 
gíSís‹Mode
);

1712 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1713 
p°Sís‹ImageMode
->
u16Width
,

1714 
p°Sís‹ImageMode
->
u16Height
,

1715 
p°Sís‹ImageMode
->
f32Fps
,

1716 
gíSís‹Mode
);

1719 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1721 i‡(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1723 i‡(
p°Sís‹ImageMode
->
f32Fps
 > 30)

1725 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1726 
p°Sís‹ImageMode
->
u16Width
,

1727 
p°Sís‹ImageMode
->
u16Height
,

1728 
p°Sís‹ImageMode
->
f32Fps
,

1729 
gíSís‹Mode
);

1736 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 30)

1738 
u8Sís‹ImageMode
 = 
SENSOR_1080P_30FPS_MODE
;

1740 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 60)

1742 
u8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1746 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1747 
p°Sís‹ImageMode
->
u16Width
,

1748 
p°Sís‹ImageMode
->
u16Height
,

1749 
p°Sís‹ImageMode
->
f32Fps
,

1750 
gíSís‹Mode
);

1758 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1759 
p°Sís‹ImageMode
->
u16Width
,

1760 
p°Sís‹ImageMode
->
u16Height
,

1761 
p°Sís‹ImageMode
->
f32Fps
,

1762 
gíSís‹Mode
);

1768 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1770 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1776 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1782 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1787 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1789 
mem£t
(
pcName
, 0, (pcName));

1791 i‡(
	gHI_NULL
 =
pcP©h
)

1793 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1794 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1798 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1800 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1804 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1805 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1811 
HI_VOID
 
£ns‹_globÆ_öô
()

1813 
	ggu8Sís‹ImageMode
 = 
SENSOR_1080P_30FPS_MODE
;

1814 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1815 
	ggu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1816 
	gbInô
 = 
HI_FALSE
;

1817 
	gbSís‹Inô
 = 
HI_FALSE
;

1819 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1820 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1822 #ifde‡
INIFILE_CONFIG_MODE


1823 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1824 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1825 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1827 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1835 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1837 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1839 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1840 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1841 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1842 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1843 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1845 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1846 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1847 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1848 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1857 
£ns‹_ªgi°î_ˇŒback
()

1859 
ISP_DEV
 
	gI•Dev
 = 0;

1860 
HI_S32
 
	gs32Rë
;

1861 
ALG_LIB_S
 
	g°Lib
;

1862 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1863 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1864 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1866 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1867 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
MN34220_ID
, &
°I•Regi°î
);

1868 i‡(
	gs32Rë
)

1870 
¥ötf
("sensorÑegister callback function failed!\n");

1871  
	gs32Rë
;

1874 
	g°Lib
.
	gs32Id
 = 0;

1875 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1876 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1877 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
, &
°AeRegi°î
);

1878 i‡(
	gs32Rë
)

1880 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1881  
	gs32Rë
;

1884 
	g°Lib
.
	gs32Id
 = 0;

1885 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1886 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1887 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
, &
°AwbRegi°î
);

1888 i‡(
	gs32Rë
)

1890 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1891  
	gs32Rë
;

1897 
£ns‹_uƒegi°î_ˇŒback
()

1899 
ISP_DEV
 
	gI•Dev
 = 0;

1900 
HI_S32
 
	gs32Rë
;

1901 
ALG_LIB_S
 
	g°Lib
;

1903 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
MN34220_ID
);

1904 i‡(
	gs32Rë
)

1906 
¥ötf
("sensor unregister callback function failed!\n");

1907  
	gs32Rë
;

1910 
	g°Lib
.
	gs32Id
 = 0;

1911 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1912 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
);

1913 i‡(
	gs32Rë
)

1915 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1916  
	gs32Rë
;

1919 
	g°Lib
.
	gs32Id
 = 0;

1920 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1921 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
);

1922 i‡(
	gs32Rë
)

1924 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1925  
	gs32Rë
;

1931 #ifde‡
__˝lu•lus


1932 #i‡
__˝lu•lus


	@component/isp/sensor/panasonic_mn34220/mn34220_sensor_ctl.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<sys/io˘l.h
>

5 
	~<f˙é.h
>

6 
	~<uni°d.h
>

8 
	~"hi_comm_video.h
"

10 #ifde‡
HI_GPIO_I2C


11 
	~"gpioi2c_ex.h
"

13 
	~"hi_i2c.h
"

16 c⁄° 
	g£ns‹_i2c_addr
 = 0x6c;

17 c⁄° 
	g£ns‹_addr_byã
 = 2;

18 c⁄° 
	g£ns‹_d©a_byã
 = 1;

19 
	gg_fd
 = -1;

21 
WDR_MODE_E
 
gíSís‹Mode
;

22 
HI_U8
 
gu8Sís‹ImageMode
;

23 
HI_BOOL
 
bSís‹Inô
;

25 
	$£ns‹_i2c_öô
()

27 if(
g_fd
 >= 0)

31 #ifde‡
HI_GPIO_I2C


32 
ªt
;

34 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

35 if(
g_fd
 < 0)

37 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

41 
ªt
;

43 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

44 if(
g_fd
 < 0)

46 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

50 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

51 i‡(
ªt
 < 0)

53 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

54  
ªt
;

59 
	}
}

61 
	$£ns‹_i2c_exô
()

63 i‡(
g_fd
 >= 0)

65 
	`˛o£
(
g_fd
);

66 
g_fd
 = -1;

70 
	}
}

72 
	$£ns‹_ªad_ªgi°î
(
addr
)

77 
	}
}

79 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

81 #ifde‡
HI_GPIO_I2C


82 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

83 
i2c_d©a
.
ªg_addr
 = 
addr
;

84 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

85 
i2c_d©a
.
d©a
 = data;

86 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

88 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

90 i‡(
ªt
)

92 
	`¥ötf
("GPIO-I2C write faild!\n");

93  
ªt
;

96 
idx
 = 0;

97 
ªt
;

98 
buf
[8];

100 
buf
[
idx
++] = 
addr
 & 0xFF;

101 i‡(
£ns‹_addr_byã
 == 2)

103 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

104 
buf
[
idx
++] = 
addr
 >> 8;

108 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

111 i‡(
ªt
 < 0)

113 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

117 
buf
[
idx
++] = 
d©a
;

118 i‡(
£ns‹_d©a_byã
 == 2)

120 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

121 
buf
[
idx
++] = 
d©a
 >> 8;

125 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

128 i‡(
ªt
)

130 
	`¥ötf
("hi_i2c write faild!\n");

134 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

135 if(
ªt
 < 0)

137 
	`¥ötf
("I2C_WRITEÉrror!\n");

142 
	}
}

144 
	$dñay_ms
(
ms
) {

145 
	`u¶ìp
(
ms
*1000);

146 
	}
}

148 
	$£ns‹_¥og
(* 
rom
)

150 
i
 = 0;

152 
lookup
 = 
rom
[
i
++];

153 
addr
 = (
lookup
 >> 16) & 0xFFFF;

154 
d©a
 = 
lookup
 & 0xFFFF;

155 i‡(
addr
 == 0xFFFE) {

156 
	`dñay_ms
(
d©a
);

157 } i‡(
addr
 == 0xFFFF) {

160 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

163 
	}
}

165 
£ns‹_wdr_öô
();

166 
£ns‹_löór_1080p30_öô
();

167 
£ns‹_löór_1080p60_öô
();

168 
£ns‹_löór_720p120_öô
();

169 
£ns‹_löór_VGA240_öô
();

171 
	$£ns‹_öô
()

173 
	`£ns‹_i2c_öô
();

176 i‡(
HI_FALSE
 =
bSís‹Inô
)

178 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

180 
	`£ns‹_wdr_öô
();

184 i‡(1 =
gu8Sís‹ImageMode
)

186 
	`£ns‹_löór_1080p60_öô
();

188 if(2 =
gu8Sís‹ImageMode
)

190 
	`£ns‹_löór_1080p30_öô
();

192 if(3 ==
gu8Sís‹ImageMode
)

194 
	`£ns‹_löór_720p120_öô
();

196 if(4 ==
gu8Sís‹ImageMode
)

198 
	`£ns‹_löór_VGA240_öô
();

208 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

210 
	`£ns‹_wdr_öô
();

214 i‡(1 =
gu8Sís‹ImageMode
)

216 
	`£ns‹_löór_1080p60_öô
();

218 if(2 =
gu8Sís‹ImageMode
)

220 
	`£ns‹_löór_1080p30_öô
();

222 if(3 ==
gu8Sís‹ImageMode
)

224 
	`£ns‹_löór_720p120_öô
();

226 if(4 ==
gu8Sís‹ImageMode
)

228 
	`£ns‹_löór_VGA240_öô
();

237 
	}
}

239 
	$£ns‹_exô
()

241 
	`£ns‹_i2c_exô
();

244 
	}
}

247 
	$£ns‹_löór_1080p60_öô
()

252 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

253 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

254 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

255 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x24);

256 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

257 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

258 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

259 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

260 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

261 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x64);

262 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

263 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x90);

264 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

265 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

266 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

267 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

268 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

269 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

270 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

271 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

272 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x04);

273 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x63);

274 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x04);

275 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0x65);

276 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

277 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0x98);

278 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

279 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x3C);

280 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x04);

281 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x7F);

282 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x04);

283 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0x44);

284 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

285 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

286 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x2C);

287 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

288 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

289 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

290 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

291 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

292 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x00);

293 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x01);

294 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

295 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

296 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

297 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

298 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

299 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

300 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

301 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x40);

302 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x02);

303 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x02);

304 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

305 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x00);

306 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x02);

307 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x02);

308 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x02);

309 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x01);

310 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x02);

311 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x02);

312 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x02);

313 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x01);

314 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

315 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

316 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x04);

317 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

318 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0xCA);

319 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0xCA);

320 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0xCA);

321 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0xCA);

322 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0xCA);

323 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0xCA);

324 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0xCA);

325 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0xCA);

326 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0xCA);

327 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0xCA);

328 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0xCA);

329 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0xCA);

330 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0xCA);

331 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0xC6);

332 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0xCA);

333 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0xCA);

334 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

335 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

336 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

337 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

338 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x02);

339 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x07);

340 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

341 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

342 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0xD7);

343 
	`£ns‹_wrôe_ªgi°î
 (0x3246, 0x01);

344 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0x79);

345 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

346 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

347 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

348 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x18);

349 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

350 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0xDE);

351 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x11);

352 
	`£ns‹_wrôe_ªgi°î
 (0x3258, 0x01);

353 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x49);

354 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x39);

355 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x46);

356 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

357 
	`£ns‹_wrôe_ªgi°î
 (0x3282, 0x0E);

358 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

359 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

360 
	`£ns‹_wrôe_ªgi°î
 (0x3289, 0x00);

361 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

362 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

363 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

364 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x02);

365 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x02);

366 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x02);

367 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x02);

368 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x03);

369 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x03);

370 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x03);

371 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x03);

372 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

373 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

374 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

375 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

377 
	`¥ötf
("===panasonic mn34220 sensor 1080P60fpsÜinear mode init success!=====\n");

379 
bSís‹Inô
 = 
HI_TRUE
;

382 
	}
}

386 
	$£ns‹_löór_1080p30_öô
()

388 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

389 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

390 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

391 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x24);

392 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

393 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

394 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

395 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

396 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

397 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x64);

398 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x14);

399 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x90);

400 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

401 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

402 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

403 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

404 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

405 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

406 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

407 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

408 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x04);

409 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x63);

410 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x04);

411 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0x65);

412 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

413 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0x98);

414 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

415 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x3C);

416 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x04);

417 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x7F);

418 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x04);

419 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0x44);

420 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

421 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

422 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x2C);

423 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

424 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

425 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

426 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

427 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

428 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x00);

429 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x01);

430 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

431 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

432 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

433 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

434 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

435 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

436 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

437 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x40);

438 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x02);

439 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x02);

440 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

441 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x00);

442 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x02);

443 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x02);

444 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x02);

445 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x01);

446 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x02);

447 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x02);

448 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x02);

449 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x01);

450 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

451 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

452 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x04);

453 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

454 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0xCA);

455 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0xCA);

456 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0xCA);

457 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0xCA);

458 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0xCA);

459 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0xCA);

460 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0xCA);

461 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0xCA);

462 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0xCA);

463 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0xCA);

464 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0xCA);

465 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0xCA);

466 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0xCA);

467 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0xC6);

468 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0xCA);

469 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0xCA);

470 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

471 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

472 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

473 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

474 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x02);

475 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x07);

476 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

477 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

478 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0xD7);

479 
	`£ns‹_wrôe_ªgi°î
 (0x3246, 0x01);

480 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0x38);

481 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x03);

482 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0xE2);

483 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

484 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x18);

485 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

486 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0xDE);

487 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x11);

488 
	`£ns‹_wrôe_ªgi°î
 (0x3258, 0x01);

489 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x68);

490 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x39);

491 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x46);

492 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

493 
	`£ns‹_wrôe_ªgi°î
 (0x3282, 0x0E);

494 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

495 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

496 
	`£ns‹_wrôe_ªgi°î
 (0x3289, 0x00);

497 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

498 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

499 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

500 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x02);

501 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x02);

502 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x02);

503 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x02);

504 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x03);

505 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x03);

506 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x03);

507 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x03);

508 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

509 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

510 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

511 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

513 
	`¥ötf
("===panasonic mn34220 sensor 1080P30fpsÜinear mode init success!=====\n");

515 
bSís‹Inô
 = 
HI_TRUE
;

518 
	}
}

520 
	$£ns‹_löór_720p120_öô
()

526 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

527 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

528 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

529 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x30);

530 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

531 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

532 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

533 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

534 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

535 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x67);

536 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

537 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x90);

538 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

539 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

540 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

541 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

542 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

543 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

544 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

545 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

546 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x02);

547 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0xEC);

548 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x02);

549 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0xEE);

550 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

551 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0xA0);

552 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

553 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0xF2);

554 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x03);

555 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0xC9);

556 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x02);

557 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0xD8);

558 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

559 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

560 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x12);

561 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

562 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

563 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

564 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

565 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

566 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x40);

567 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x10);

568 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

569 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

570 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

571 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

572 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

573 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

574 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

575 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x70);

576 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x01);

577 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x03);

578 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

579 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x05);

580 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x00);

581 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x00);

582 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x00);

583 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x03);

584 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x01);

585 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x01);

586 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x01);

587 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x02);

588 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

589 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

590 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x01);

591 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

592 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0x11);

593 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0x30);

594 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0x33);

595 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0x36);

596 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0x35);

597 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0x3C);

598 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0x3F);

599 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0x3A);

600 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0x39);

601 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0x28);

602 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0x2B);

603 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0x2E);

604 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0x2D);

605 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0x22);

606 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0x22);

607 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0x61);

608 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

609 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

610 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

611 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

612 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x03);

613 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x06);

614 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

615 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

616 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0x75);

617 
	`£ns‹_wrôe_ªgi°î
 (0x3246, 0x01);

618 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0xA5);

619 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

620 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

621 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

622 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x1B);

623 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

624 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0x7B);

625 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x32);

626 
	`£ns‹_wrôe_ªgi°î
 (0x3258, 0x01);

627 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x9A);

628 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x14);

629 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x0C);

630 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

631 
	`£ns‹_wrôe_ªgi°î
 (0x3282, 0x0E);

632 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

633 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

634 
	`£ns‹_wrôe_ªgi°î
 (0x3289, 0x00);

635 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

636 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

637 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

638 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x03);

639 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x03);

640 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x00);

641 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x03);

642 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

643 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x01);

644 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x01);

645 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x01);

646 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

647 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

648 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

649 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

651 
	`¥ötf
("===panasonic mn34220 sensor 720P120fpsÜinear mode init success!=====\n");

653 
bSís‹Inô
 = 
HI_TRUE
;

654 
	}
}

656 
	$£ns‹_löór_VGA240_öô
()

662 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

663 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

664 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

665 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x30);

666 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

667 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

668 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

669 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

670 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x04);

671 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x67);

672 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

673 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x00);

674 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

675 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

676 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

677 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

678 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

679 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

680 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

681 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

682 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x02);

683 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x30);

684 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x02);

685 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0x32);

686 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

687 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0x98);

688 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x01);

689 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x68);

690 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x03);

691 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x53);

692 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x01);

693 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0xEC);

694 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

695 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

696 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x12);

697 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x03);

698 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x09);

699 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

700 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

701 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

702 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x40);

703 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x10);

704 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

705 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

706 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

707 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0x40);

708 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

709 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

710 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

711 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x70);

712 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x01);

713 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x03);

714 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

715 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x05);

716 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x00);

717 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x00);

718 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x00);

719 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x03);

720 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x01);

721 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x01);

722 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x01);

723 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x02);

724 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

725 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

726 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x01);

727 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0x07);

728 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0x11);

729 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0x30);

730 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0x33);

731 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0x36);

732 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0x35);

733 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0x3C);

734 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0x3F);

735 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0x3A);

736 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0x39);

737 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0x28);

738 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0x2B);

739 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0x2E);

740 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0x2D);

741 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0x22);

742 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0x22);

743 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0x61);

744 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

745 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

746 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

747 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

748 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x03);

749 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x06);

750 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

751 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

752 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0x75);

753 
	`£ns‹_wrôe_ªgi°î
 (0x3246, 0x00);

754 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0xC9);

755 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

756 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

757 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

758 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x1B);

759 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

760 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0x7B);

761 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x32);

762 
	`£ns‹_wrôe_ªgi°î
 (0x3258, 0x00);

763 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x5C);

764 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x14);

765 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x0C);

766 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

767 
	`£ns‹_wrôe_ªgi°î
 (0x3282, 0x07);

768 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x19);

769 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x00);

770 
	`£ns‹_wrôe_ªgi°î
 (0x3289, 0x40);

771 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

772 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

773 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

774 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x03);

775 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x03);

776 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x00);

777 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x03);

778 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

779 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x01);

780 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x01);

781 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x01);

782 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

783 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

784 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

785 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

787 
	`¥ötf
("===panasonic mn34220 sensor VGA 240fpsÜinear mode init success!=====\n");

789 
bSís‹Inô
 = 
HI_TRUE
;

790 
	}
}

792 
	$£ns‹_wdr_öô
()

797 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

798 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

799 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

800 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x30);

801 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

802 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

803 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

804 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

805 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

806 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x67);

807 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

808 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x90);

809 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

810 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

811 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

812 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

813 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

814 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

815 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

816 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

817 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x00);

818 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x20);

819 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x04);

820 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0xE2);

821 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x14);

822 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0xA0);

823 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

824 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x3C);

825 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x04);

826 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x7F);

827 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x04);

828 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0x44);

829 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

830 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

831 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x2C);

832 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

833 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

834 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

835 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

836 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

837 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x00);

838 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x01);

839 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x01);

840 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

841 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

842 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

843 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x20);

844 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x20);

845 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x20);

846 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x40);

847 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x03);

848 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x04);

849 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x03);

850 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x05);

851 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x05);

852 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x02);

853 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x02);

854 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x05);

855 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x03);

856 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x06);

857 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x07);

858 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x06);

859 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x06);

860 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x07);

861 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x06);

862 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

863 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0xCA);

864 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0xCA);

865 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0xCA);

866 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0xCA);

867 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0xCA);

868 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0xCA);

869 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0xCA);

870 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0xCA);

871 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0xCA);

872 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0xCA);

873 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0xCA);

874 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0xCA);

875 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0xCA);

876 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0xC6);

877 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0xCA);

878 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0xCA);

879 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

880 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

881 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

882 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

883 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x02);

884 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x07);

885 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x70);

886 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x00);

887 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0xD1);

888 
	`£ns‹_wrôe_ªgi°î
 (0x3246, 0x01);

889 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0xD6);

890 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

891 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

892 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

893 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x18);

894 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

895 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0xD4);

896 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x11);

897 
	`£ns‹_wrôe_ªgi°î
 (0x3258, 0x01);

898 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0xE6);

899 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x39);

900 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x55);

901 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

902 
	`£ns‹_wrôe_ªgi°î
 (0x3282, 0x0E);

903 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

904 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

905 
	`£ns‹_wrôe_ªgi°î
 (0x3289, 0x00);

906 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

907 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

908 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

909 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x02);

910 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x02);

911 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x02);

912 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x02);

913 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x03);

914 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x03);

915 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x03);

916 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x03);

917 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

918 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

919 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

920 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

922 
	`¥ötf
("===panasonic mn34220 sensor 1080P30fps 2to1 WDR(60fsp->30fps) init success!=====\n");

924 
bSís‹Inô
 = 
HI_TRUE
;

927 
	}
}

	@component/isp/sensor/panasonic_mn34220_mipi/mn34220_cmos.c

1 #i‡!
deföed
(
__MN34220_CMOS_H_
)

2 
	#__MN34220_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


22 
	#MN34220_ID
 34220

	)

26 
	#CMOS_MN34220_SLOW_SHUTTER_VMAX_MODE


	)

30 #ifde‡
INIFILE_CONFIG_MODE


32 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

33 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

34 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

35 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

44 c⁄° 
£ns‹_i2c_addr
;

45 
£ns‹_addr_byã
;

46 
£ns‹_d©a_byã
;

48 
	#EXPOSURE_ADDR_HHH
 (0x0220)

	)

49 
	#EXPOSURE_ADDR_H
 (0x0202)

	)

50 
	#EXPOSURE_ADDR_L
 (0x0203)

	)

51 
	#SHORT_EXPOSURE_ADDR_H
 (0x312A)

	)

52 
	#SHORT_EXPOSURE_ADDR_L
 (0x312B)

	)

53 
	#AGC_ADDR_H
 (0x0204)

	)

54 
	#AGC_ADDR_L
 (0x0205)

	)

55 
	#DGC_ADDR_H
 (0x3108)

	)

56 
	#DGC_ADDR_L
 (0x3109)

	)

57 
	#VMAX_ADDR_H
 (0x0340)

	)

58 
	#VMAX_ADDR_L
 (0x0341)

	)

60 
	#INCREASE_LINES
 (1Ë

	)

61 
	#VMAX_1080P30_LINEAR
 (1125+
INCREASE_LINES
)

	)

62 
	#VMAX_1080P60_LINEAR
 (1125+
INCREASE_LINES
)

	)

63 
	#VMAX_1080P60TO30_WDR
 (1250+
INCREASE_LINES
)

	)

64 
	#VMAX_720P120_LINEAR
 (750+
INCREASE_LINES
)

	)

65 
	#VMAX_VGA160_LINEAR
 (562+
INCREASE_LINES
)

	)

67 
	#SENSOR_1080P_60FPS_MODE
 (1)

	)

68 
	#SENSOR_1080P_30FPS_MODE
 (2)

	)

69 
	#SENSOR_720P_120FPS_MODE
 (3)

	)

70 
	#SENSOR_VGA_160FPS_MODE
 (4)

	)

72 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

73 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

75 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

76 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

77 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

79 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

80 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

82 
	#PATHLEN_MAX
 256

	)

83 
	#CMOS_CFG_INI
 "mn34220_cfg.öi"

	)

84 
	gpcName
[
PATHLEN_MAX
] = "configs/mn34220_cfg.ini";

89 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_30Fps
 =

103 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_25Fps
 =

116 #ifde‡
INIFILE_CONFIG_MODE


118 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

120 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

122 
¥ötf
("nullÖointer when getáe default value!\n");

126 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*25/2;

127 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

128 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

130 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

131 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

132 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.8045;

134 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

135 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.38;

137 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

138 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.38;

140 
	gp°AeSnsD·
->
	gu32InôExposuª
 = 921600;

142 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

144 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.6082;

146 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

148 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.8045;

153 
	ggíSís‹Mode
)

156 
WDR_MODE_NONE
:

157 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

158 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

159 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

160 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

162 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

164 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

165 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

166 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

167 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

169 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

170 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

171 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

172 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

174 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

175 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

176 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

177 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

179 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

180 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

181 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

184 
	gWDR_MODE_2To1_FRAME
:

185 
WDR_MODE_2To1_FRAME_FULL_RATE
:

186 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

187 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

188 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

189 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

191 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[2].
u8AeCom≥nßti⁄
;

193 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

194 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

195 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MaxI¡TimeT¨gë
;

196 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MöI¡TimeT¨gë
;

198 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

199 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

200 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[2].
u32MaxAgaöT¨gë
;

201 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[2].
u32MöAgaöT¨gë
;

203 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

204 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

205 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxDgaöT¨gë
;

206 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[2].
u32MöDgaöT¨gë
;

208 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[2].
u32ISPDgaöShi·
;

209 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MöISPDgaöT¨gë
;

210 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxISPDgaöT¨gë
;

212 
	gWDR_MODE_2To1_LINE
:

213 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

214 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

215 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

216 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

218 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

220 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

221 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

222 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

223 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

225 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

226 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

227 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

228 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

230 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

231 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

232 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

233 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

235 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

236 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

237 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

239 i‡(1250 =
gu32FuŒLöesStd
)

241 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

243 i‡(1500 =
gu32FuŒLöesStd
)

245 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

250 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

252 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2155;

254 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

256 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2818;

268 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

270 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

272 
¥ötf
("nullÖointer when getáe default value!\n");

276 
mem£t
(&
p°AeSnsD·
->
°AERouãAâr
, 0, (
ISP_AE_ROUTE_S
));

278 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*25/2;

279 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

280 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

282 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

283 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

284 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.8045;

286 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

287 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.38;

289 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

290 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.38;

292 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

293 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

294 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

296 
	gp°AeSnsD·
->
	gu32InôExposuª
 = 921600;

298 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

300 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.6082;

302 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

304 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.8045;

309 
	ggíSís‹Mode
)

312 
WDR_MODE_NONE
:

313 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

314 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

315 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

316 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

318 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

320 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

321 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

322 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

323 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

325 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

326 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

327 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

328 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

330 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

331 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

332 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

333 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

335 
	gWDR_MODE_2To1_FRAME
:

336 
WDR_MODE_2To1_FRAME_FULL_RATE
:

337 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

338 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

339 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

340 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

342 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

344 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

345 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

346 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

347 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

349 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

350 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

351 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

352 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

354 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

355 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

356 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

357 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

359 
	gWDR_MODE_2To1_LINE
:

360 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

361 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

362 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

363 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

365 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

367 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

368 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

369 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

370 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

372 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 32382;

373 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

374 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 8134;

375 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

377 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 32382;

378 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

379 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 1024;

380 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

382 i‡(1250 =
gu32FuŒLöesStd
)

384 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

386 i‡(1500 =
gu32FuŒLöesStd
)

388 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

393 if((
	gp°AeSnsD·
->
	gf32Fps
 =50Ë|| (
p°AeSnsD·
->
f32Fps
 == 60))

395 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2155;

397 if((
	gp°AeSnsD·
->
	gf32Fps
 =25Ë|| (
p°AeSnsD·
->
f32Fps
 == 30))

399 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0.2818;

413 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

415 #ifde‡
CMOS_MN34220_SLOW_SHUTTER_VMAX_MODE


416 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

419 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

421 
gu32FuŒLöesStd
 = 
VMAX_1080P60TO30_WDR
 * 30 / 
f32Fps
;

422 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.2818;

426 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

430 i‡(25 =
f32Fps
)

432 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

436 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

441 i‡(
	gSENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

443 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

448 
gu32FuŒLöesStd
 = (
VMAX_1080P30_LINEAR
 * 30Ë/ 
f32Fps
;

449 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.8045;

453 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

457 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

459 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

464 
gu32FuŒLöesStd
 = (
VMAX_1080P60_LINEAR
 * 60Ë/ 
f32Fps
;

465 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.6082;

469 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

473 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

475 i‡((
f32Fps
 <= 120) && (f32Fps >= 0.5))

480 
gu32FuŒLöesStd
 = (
VMAX_720P120_LINEAR
 * 120Ë/ 
f32Fps
;

481 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.5960;

485 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

489 i‡(
	gSENSOR_VGA_160FPS_MODE
 =
gu8Sís‹ImageMode
)

491 i‡((
f32Fps
 <= 240) && (f32Fps >= 0.5))

496 
gu32FuŒLöesStd
 = (
VMAX_VGA160_LINEAR
 * 160Ë/ 
f32Fps
;

497 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.5960;

501 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

507 
¥ötf
("NŸ suµ‹t! gu8Sís‹ImageMode:%d, f32Fps:%f\n", 
gu8Sís‹ImageMode
, 
f32Fps
);

512 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

513 if(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

515 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

516 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

520 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

521 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

524 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

525 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

526 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

527 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

535 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

536 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

538 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

540 if(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

542 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u32D©a
 = ((
u32FuŒLöes
 & 0xFF00) >> 8);

543 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
u32FuŒLöes
 & 0xFF);

547 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32D©a
 = ((
u32FuŒLöes
 & 0xFF00) >> 8);

548 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32D©a
 = (
u32FuŒLöes
 & 0xFF);

551 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
u32FuŒLöes
 - 2;

557 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

559 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

561 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

563 i‡(
bFú°
)

565 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

566 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

567 
	gbFú°
 = 
HI_FALSE
;

571 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

572 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

573 
	gbFú°
 = 
HI_TRUE
;

576 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

578 i‡(
bFú°
)

580 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

581 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

582 
	gbFú°
 = 
HI_FALSE
;

586 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

587 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

588 
	gbFú°
 = 
HI_TRUE
;

593 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = ((
u32I¡Time
 & 0xFF00) >> 8);

594 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = (
u32I¡Time
 & 0xFF);

595 
	gbFú°
 = 
HI_TRUE
;

601 
HI_U32
 
	gad_gaö_èbÀ
[81]=

610 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

612 
	gi
;

614 if((
	gHI_NULL
 =
pu32AgaöLö
Ë||(
HI_NULL
 =
pu32AgaöDb
))

616 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

620 i‡(*
	gpu32AgaöLö
 >
ad_gaö_èbÀ
[80])

622 *
pu32AgaöLö
 = 
ad_gaö_èbÀ
[80];

623 *
	gpu32AgaöDb
 = 80;

627 
	gi
 = 1; i < 81; i++)

629 i‡(*
	gpu32AgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

631 *
	gpu32AgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

632 *
	gpu32AgaöDb
 = 
i
 - 1;

640 
HI_VOID
 
cmos_dgaö_ˇlc_èbÀ
(
HI_U32
 *
pu32DgaöLö
, HI_U32 *
pu32DgaöDb
)

642 
	gi
;

644 if((
	gHI_NULL
 =
pu32DgaöLö
Ë||(
HI_NULL
 =
pu32DgaöDb
))

646 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

650 i‡(*
	gpu32DgaöLö
 >
ad_gaö_èbÀ
[80])

652 *
pu32DgaöLö
 = 
ad_gaö_èbÀ
[80];

653 *
	gpu32DgaöDb
 = 80;

657 
	gi
 = 1; i < 81; i++)

659 i‡(*
	gpu32DgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

661 *
	gpu32DgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

662 *
	gpu32DgaöDb
 = 
i
 - 1;

670 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

672 
HI_U32
 
	gu32Tmp_Agaö
 = 0x100 + 
u32Agaö
 * 4;

673 
HI_U32
 
	gu32Tmp_Dgaö
 = 0x100 + 
u32Dgaö
 * 4;

675 i‡((
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 =((
u32Tmp_Agaö
 & 0xFF00) >> 8))

676 && (
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 =(
u32Tmp_Agaö
 & 0xFF)))

678 
g_°SnsRegsInfo
.
a°I2cD©a
[2].
u32D©a
 = 0x30;

682 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = 0x0;

685 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = ((
u32Tmp_Agaö
 & 0xFF00) >> 8);

686 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = (
u32Tmp_Agaö
 & 0xFF);

688 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = ((
u32Tmp_Dgaö
 & 0xFF00) >> 8);

689 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
u32Tmp_Dgaö
 & 0xFF);

695 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

697 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

699 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

703 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

705 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 2Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

707 i‡((
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
))

712 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 30Ë* 0x40 / (
u32R©io
 + 0x40);

718 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

720 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

722 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

723 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

724 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

725 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

726 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

727 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

728 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
cmos_dgaö_ˇlc_èbÀ
;

729 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

736 #ifde‡
INIFILE_CONFIG_MODE


738 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

740 
HI_U8
 
	gi
;

742 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

744 
¥ötf
("nullÖointer when getáwb default value!\n");

748 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

750 
	ggíSís‹Mode
)

753 
WDR_MODE_NONE
:

754 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

755 
	gi
= 0; i < 4; i++)

757 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

760 
	gi
= 0; i < 6; i++)

762 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

765 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

766 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

768 
	gWDR_MODE_2To1_LINE
:

769 
WDR_MODE_2To1_FRAME
:

770 
WDR_MODE_2To1_FRAME_FULL_RATE
:

771 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

772 
	gi
= 0; i < 4; i++)

774 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

777 
	gi
= 0; i < 6; i++)

779 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

782 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

783 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

792 
AWB_CCM_S
 
	gg_°AwbCcm
 =

816 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

827 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

836 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

838 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

840 
¥ötf
("nullÖointer when getáwb default value!\n");

844 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

846 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 5000;

848 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x1F0;

849 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

850 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

851 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1A0;

853 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 41;

854 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 127;

855 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -87;

856 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 174535;

857 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

858 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -123490;

860 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

862 
	ggíSís‹Mode
)

865 
WDR_MODE_NONE
:

866 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

868 
	gWDR_MODE_2To1_LINE
:

869 
WDR_MODE_2To1_FRAME
:

870 
WDR_MODE_2To1_FRAME_FULL_RATE
:

871 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

880 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

882 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

884 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

891 #ifde‡
INIFILE_CONFIG_MODE


893 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

895 i‡(
	gHI_NULL
 =
p°Def
)

897 
¥ötf
("nullÖointer when get isp default value!\n");

901 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

903 
	ggíSís‹Mode
)

906 
WDR_MODE_NONE
:

907 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

908 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

909 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

910 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

911 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

912 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

914 
	gWDR_MODE_2To1_LINE
:

915 
WDR_MODE_2To1_FRAME
:

916 
WDR_MODE_2To1_FRAME_FULL_RATE
:

917 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

918 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

919 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

920 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

921 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

922 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

923 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

928 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

929 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

936 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

963 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

990 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

1015 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

1031 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

1076 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

1121 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

1136 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

1178 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

1195 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

1211 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

1213 i‡(
	gHI_NULL
 =
p°Def
)

1215 
¥ötf
("nullÖointer when get isp default value!\n");

1219 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

1221 
	ggíSís‹Mode
)

1224 
WDR_MODE_NONE
:

1226 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

1227 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1228 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

1229 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

1230 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

1231 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

1232 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

1233 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1234 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1236 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

1237 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

1238 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

1239 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1240 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

1242 
	gWDR_MODE_2To1_LINE
:

1243 
WDR_MODE_2To1_FRAME
:

1244 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1246 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

1247 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1248 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

1249 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

1250 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

1251 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x06;

1252 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x08;

1253 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1254 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1256 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

1257 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

1258 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

1259 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1260 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

1261 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

1266 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

1267 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

1274 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

1276 
HI_S32
 
	gi
;

1278 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

1280 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1285 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1287 
	gi
=0; i<4; i++)

1289 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0x100;

1296 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1298 
HI_U32
 
	gu32FuŒLöes_5Fps
, 
	gu32MaxI¡Time_5Fps
;

1300 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1306 i‡(
	gSENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1308 
u32FuŒLöes_5Fps
 = (
VMAX_1080P30_LINEAR
 * 30) / 5;

1310 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1312 
u32FuŒLöes_5Fps
 = (
VMAX_1080P60_LINEAR
 * 60) / 5;

1314 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

1316 
u32FuŒLöes_5Fps
 = (
VMAX_720P120_LINEAR
 * 120) / 5;

1318 i‡(
	gSENSOR_VGA_160FPS_MODE
 =
gu8Sís‹ImageMode
)

1320 
u32FuŒLöes_5Fps
 = (
VMAX_VGA160_LINEAR
 * 160) / 5;

1328 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1329 
	gu32MaxI¡Time_5Fps
 = 
u32FuŒLöes_5Fps
 - 2;

1331 i‡(
	gbE«bÀ
)

1333 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_H
, (
u32FuŒLöes_5Fps
 & 0xFF00) >> 8);

1334 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_L
, 
u32FuŒLöes_5Fps
 & 0xFF);

1335 
£ns‹_wrôe_ªgi°î
(0x0202, (
u32MaxI¡Time_5Fps
 & 0xFF00) >> 8);

1336 
£ns‹_wrôe_ªgi°î
(0x0203, 
u32MaxI¡Time_5Fps
 & 0xFF);

1337 
£ns‹_wrôe_ªgi°î
(0x0204, 0x01);

1338 
£ns‹_wrôe_ªgi°î
(0x0205, 0x00);

1339 
£ns‹_wrôe_ªgi°î
(0x3108, 0x01);

1340 
£ns‹_wrôe_ªgi°î
(0x3109, 0x00);

1344 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_H
, (
gu32FuŒLöesStd
 & 0xFF00) >> 8);

1345 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR_L
, 
gu32FuŒLöesStd
 & 0xFF);

1346 
	gbInô
 = 
HI_FALSE
;

1352 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1354 
	gbInô
 = 
HI_FALSE
;

1356 
	gu8Mode
)

1358 
	gWDR_MODE_NONE
:

1359 i‡(
SENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1361 
gu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1363 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1365 
gu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

1367 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

1369 
gu32FuŒLöesStd
 = 
VMAX_720P120_LINEAR
;

1371 i‡(
	gSENSOR_VGA_160FPS_MODE
 =
gu8Sís‹ImageMode
)

1373 
gu32FuŒLöesStd
 = 
VMAX_VGA160_LINEAR
;

1375 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1376 
¥ötf
("linear mode\n");

1379 
	gWDR_MODE_2To1_LINE
:

1380 
gu32FuŒLöesStd
 = 
VMAX_1080P60TO30_WDR
;

1381 
	ggíSís‹Mode
 = 
WDR_MODE_2To1_LINE
;

1382 
¥ötf
("2to1Üine WDR mode\n");

1385 
	gWDR_MODE_2To1_FRAME
:

1386 i‡(
SENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1388 
gu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1390 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1392 
gu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

1394 
	ggíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1396 
¥ötf
("2to1 half-rate frame WDR mode\n");

1399 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1400 i‡(
SENSOR_1080P_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1402 
gu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1404 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1406 
gu32FuŒLöesStd
 = 
VMAX_1080P60_LINEAR
;

1408 
	ggíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1410 
¥ötf
("2to1 full-rate frame WDR mode\n");

1414 
¥ötf
("NOT supportÅhis mode!\n");

1422 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1424 
HI_S32
 
	gi
;

1426 i‡(
	gHI_FALSE
 =
bInô
)

1428 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1429 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1431 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 9;

1432 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1434 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1436 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1438 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1441 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1443 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1444 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1445 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1446 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1449 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1450 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
EXPOSURE_ADDR_H
;

1451 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1452 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
EXPOSURE_ADDR_L
;

1455 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 1;

1456 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 0x3280;

1459 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 1;

1460 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
AGC_ADDR_H
;

1461 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 1;

1462 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
AGC_ADDR_L
;

1465 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 1;

1466 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
DGC_ADDR_H
;

1467 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 1;

1468 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 
DGC_ADDR_L
;

1471 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 0;

1472 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
VMAX_ADDR_H
;

1473 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 0;

1474 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
VMAX_ADDR_L
;

1476 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1478 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u8DñayFrmNum
 = 1;

1479 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
SHORT_EXPOSURE_ADDR_H
;

1480 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 1;

1481 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
SHORT_EXPOSURE_ADDR_L
;

1483 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1484 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR_H
;

1485 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1486 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 
VMAX_ADDR_L
;

1488 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1490 
g_°SnsRegsInfo
.
a°I2cD©a
[7].
u8DñayFrmNum
 = 1;

1491 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
EXPOSURE_ADDR_H
;

1492 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu8DñayFrmNum
 = 1;

1493 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gu32RegAddr
 = 
EXPOSURE_ADDR_L
;

1495 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu8DñayFrmNum
 = 0;

1496 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR_H
;

1497 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu8DñayFrmNum
 = 0;

1498 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[10].
	gu32RegAddr
 = 
VMAX_ADDR_L
;

1501 
	gbInô
 = 
HI_TRUE
;

1505 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1507 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1509 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1513 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1517 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1519 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1520 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1521 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gbUpd©e
 = 
HI_TRUE
;

1522 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[8].
	gbUpd©e
 = 
HI_TRUE
;

1526 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1528 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1532 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1533 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1538 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1540 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1542 
	gbInô
 = 
HI_FALSE
;

1544 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1546 
¥ötf
("nullÖointer when set image mode\n");

1550 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <640Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 480))

1552 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1554 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 160)

1556 
u8Sís‹ImageMode
 = 
SENSOR_VGA_160FPS_MODE
;

1560 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1561 
p°Sís‹ImageMode
->
u16Width
,

1562 
p°Sís‹ImageMode
->
u16Height
,

1563 
p°Sís‹ImageMode
->
f32Fps
,

1564 
gíSís‹Mode
);

1569 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1570 
p°Sís‹ImageMode
->
u16Width
,

1571 
p°Sís‹ImageMode
->
u16Height
,

1572 
p°Sís‹ImageMode
->
f32Fps
,

1573 
gíSís‹Mode
);

1576 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <1280Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 720))

1578 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1580 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 120)

1582 
u8Sís‹ImageMode
 = 
SENSOR_720P_120FPS_MODE
;

1586 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1587 
p°Sís‹ImageMode
->
u16Width
,

1588 
p°Sís‹ImageMode
->
u16Height
,

1589 
p°Sís‹ImageMode
->
f32Fps
,

1590 
gíSís‹Mode
);

1595 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1596 
p°Sís‹ImageMode
->
u16Width
,

1597 
p°Sís‹ImageMode
->
u16Height
,

1598 
p°Sís‹ImageMode
->
f32Fps
,

1599 
gíSís‹Mode
);

1602 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1604 i‡(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1606 i‡(
p°Sís‹ImageMode
->
f32Fps
 > 30)

1608 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1609 
p°Sís‹ImageMode
->
u16Width
,

1610 
p°Sís‹ImageMode
->
u16Height
,

1611 
p°Sís‹ImageMode
->
f32Fps
,

1612 
gíSís‹Mode
);

1619 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 30)

1621 
u8Sís‹ImageMode
 = 
SENSOR_1080P_30FPS_MODE
;

1623 i‡(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 60)

1625 
u8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1629 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1630 
p°Sís‹ImageMode
->
u16Width
,

1631 
p°Sís‹ImageMode
->
u16Height
,

1632 
p°Sís‹ImageMode
->
f32Fps
,

1633 
gíSís‹Mode
);

1641 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1642 
p°Sís‹ImageMode
->
u16Width
,

1643 
p°Sís‹ImageMode
->
u16Height
,

1644 
p°Sís‹ImageMode
->
f32Fps
,

1645 
gíSís‹Mode
);

1651 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1653 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1659 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1665 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1670 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1672 
mem£t
(
pcName
, 0, (pcName));

1674 i‡(
	gHI_NULL
 =
pcP©h
)

1676 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1677 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1681 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1683 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1687 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1688 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1694 
HI_VOID
 
£ns‹_globÆ_öô
()

1696 
	ggu8Sís‹ImageMode
 = 
SENSOR_1080P_30FPS_MODE
;

1697 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1698 
	ggu32FuŒLöesStd
 = 
VMAX_1080P30_LINEAR
;

1699 
	gbInô
 = 
HI_FALSE
;

1700 
	gbSís‹Inô
 = 
HI_FALSE
;

1702 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1703 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1705 #ifde‡
INIFILE_CONFIG_MODE


1706 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1707 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1708 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1710 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1718 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1720 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1722 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1723 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1724 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1725 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1726 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1728 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1729 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1730 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1731 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1740 
£ns‹_ªgi°î_ˇŒback
()

1742 
ISP_DEV
 
	gI•Dev
 = 0;

1743 
HI_S32
 
	gs32Rë
;

1744 
ALG_LIB_S
 
	g°Lib
;

1745 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1746 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1747 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1749 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1750 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
MN34220_ID
, &
°I•Regi°î
);

1751 i‡(
	gs32Rë
)

1753 
¥ötf
("sensorÑegister callback function failed!\n");

1754  
	gs32Rë
;

1757 
	g°Lib
.
	gs32Id
 = 0;

1758 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1759 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1760 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
, &
°AeRegi°î
);

1761 i‡(
	gs32Rë
)

1763 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1764  
	gs32Rë
;

1767 
	g°Lib
.
	gs32Id
 = 0;

1768 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1769 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1770 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
, &
°AwbRegi°î
);

1771 i‡(
	gs32Rë
)

1773 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1774  
	gs32Rë
;

1780 
£ns‹_uƒegi°î_ˇŒback
()

1782 
ISP_DEV
 
	gI•Dev
 = 0;

1783 
HI_S32
 
	gs32Rë
;

1784 
ALG_LIB_S
 
	g°Lib
;

1786 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
MN34220_ID
);

1787 i‡(
	gs32Rë
)

1789 
¥ötf
("sensor unregister callback function failed!\n");

1790  
	gs32Rë
;

1793 
	g°Lib
.
	gs32Id
 = 0;

1794 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1795 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
);

1796 i‡(
	gs32Rë
)

1798 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1799  
	gs32Rë
;

1802 
	g°Lib
.
	gs32Id
 = 0;

1803 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1804 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
MN34220_ID
);

1805 i‡(
	gs32Rë
)

1807 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1808  
	gs32Rë
;

1814 #ifde‡
__˝lu•lus


1815 #i‡
__˝lu•lus


	@component/isp/sensor/panasonic_mn34220_mipi/mn34220_sensor_ctl.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<sys/io˘l.h
>

5 
	~<f˙é.h
>

6 
	~<uni°d.h
>

8 
	~"hi_comm_video.h
"

10 #ifde‡
HI_GPIO_I2C


11 
	~"gpioi2c_ex.h
"

13 
	~"hi_i2c.h
"

16 c⁄° 
	g£ns‹_i2c_addr
 = 0x6c;

17 c⁄° 
	g£ns‹_addr_byã
 = 2;

18 c⁄° 
	g£ns‹_d©a_byã
 = 1;

19 
	gg_fd
 = -1;

21 
WDR_MODE_E
 
gíSís‹Mode
;

22 
HI_U8
 
gu8Sís‹ImageMode
;

23 
HI_BOOL
 
bSís‹Inô
;

25 
	$£ns‹_i2c_öô
()

27 if(
g_fd
 >= 0)

31 #ifde‡
HI_GPIO_I2C


32 
ªt
;

34 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

35 if(
g_fd
 < 0)

37 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

41 
ªt
;

43 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

44 if(
g_fd
 < 0)

46 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

50 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

51 i‡(
ªt
 < 0)

53 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

54  
ªt
;

59 
	}
}

61 
	$£ns‹_i2c_exô
()

63 i‡(
g_fd
 >= 0)

65 
	`˛o£
(
g_fd
);

66 
g_fd
 = -1;

70 
	}
}

72 
	$£ns‹_ªad_ªgi°î
(
addr
)

77 
	}
}

79 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

81 #ifde‡
HI_GPIO_I2C


82 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

83 
i2c_d©a
.
ªg_addr
 = 
addr
;

84 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

85 
i2c_d©a
.
d©a
 = data;

86 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

88 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

90 i‡(
ªt
)

92 
	`¥ötf
("GPIO-I2C write faild!\n");

93  
ªt
;

96 
idx
 = 0;

97 
ªt
;

98 
buf
[8];

100 
buf
[
idx
++] = 
addr
 & 0xFF;

101 i‡(
£ns‹_addr_byã
 == 2)

103 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

104 
buf
[
idx
++] = 
addr
 >> 8;

108 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

111 i‡(
ªt
 < 0)

113 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

117 
buf
[
idx
++] = 
d©a
;

118 i‡(
£ns‹_d©a_byã
 == 2)

120 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

121 
buf
[
idx
++] = 
d©a
 >> 8;

125 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

128 i‡(
ªt
)

130 
	`¥ötf
("hi_i2c write faild!\n");

134 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

135 if(
ªt
 < 0)

137 
	`¥ötf
("I2C_WRITEÉrror!\n");

142 
	}
}

144 
	$dñay_ms
(
ms
) {

145 
	`u¶ìp
(
ms
*1000);

146 
	}
}

148 
	$£ns‹_¥og
(* 
rom
)

150 
i
 = 0;

152 
lookup
 = 
rom
[
i
++];

153 
addr
 = (
lookup
 >> 16) & 0xFFFF;

154 
d©a
 = 
lookup
 & 0xFFFF;

155 i‡(
addr
 == 0xFFFE) {

156 
	`dñay_ms
(
d©a
);

157 } i‡(
addr
 == 0xFFFF) {

160 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

163 
	}
}

165 
£ns‹_wdr_öô
();

166 
£ns‹_löór_1080p30_öô
();

167 
£ns‹_löór_1080p60_öô
();

168 
£ns‹_löór_720p120_öô
();

169 
£ns‹_löór_VGA160_öô
();

171 
	$£ns‹_öô
()

173 
	`£ns‹_i2c_öô
();

176 i‡(
HI_FALSE
 =
bSís‹Inô
)

178 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

180 
	`£ns‹_wdr_öô
();

184 i‡(1 =
gu8Sís‹ImageMode
)

186 
	`£ns‹_löór_1080p60_öô
();

188 if(2 =
gu8Sís‹ImageMode
)

190 
	`£ns‹_löór_1080p30_öô
();

192 if(3 ==
gu8Sís‹ImageMode
)

194 
	`£ns‹_löór_720p120_öô
();

196 if(4 ==
gu8Sís‹ImageMode
)

198 
	`£ns‹_löór_VGA160_öô
();

208 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

210 
	`£ns‹_wdr_öô
();

214 i‡(1 =
gu8Sís‹ImageMode
)

216 
	`£ns‹_löór_1080p60_öô
();

218 if(2 =
gu8Sís‹ImageMode
)

220 
	`£ns‹_löór_1080p30_öô
();

222 if(3 ==
gu8Sís‹ImageMode
)

224 
	`£ns‹_löór_720p120_öô
();

226 if(4 ==
gu8Sís‹ImageMode
)

228 
	`£ns‹_löór_VGA160_öô
();

237 
	}
}

239 
	$£ns‹_exô
()

241 
	`£ns‹_i2c_exô
();

244 
	}
}

247 
	$£ns‹_löór_1080p60_öô
()

250 
	`£ns‹_wrôe_ªgi°î
 (0x3022, 0x00);

251 
	`£ns‹_wrôe_ªgi°î
 (0x3023, 0x33);

252 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

253 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

254 
	`£ns‹_wrôe_ªgi°î
 (0x0304, 0x00);

255 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

256 
	`£ns‹_wrôe_ªgi°î
 (0x0306, 0x00);

257 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x24);

258 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

259 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

260 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

261 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

262 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x64);

263 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

264 
	`£ns‹_wrôe_ªgi°î
 (0x3009, 0x0E);

265 
	`£ns‹_wrôe_ªgi°î
 (0x300A, 0xFF);

266 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

267 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

268 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

269 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

270 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

271 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

272 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

273 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

275 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x04);

276 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x63);

278 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

279 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0xC0);

281 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x00);

282 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x02);

284 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

285 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0x00);

287 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

288 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

289 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x04);

290 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0x65);

291 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

292 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0x98);

293 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

294 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x3C);

295 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x04);

296 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x7F);

297 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x04);

298 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0x44);

299 
	`£ns‹_wrôe_ªgi°î
 (0x3031, 0x00);

300 
	`£ns‹_wrôe_ªgi°î
 (0x3032, 0x00);

301 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

302 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

303 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x2C);

304 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

305 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0xFF);

306 
	`£ns‹_wrôe_ªgi°î
 (0x305B, 0x00);

307 
	`£ns‹_wrôe_ªgi°î
 (0x3062, 0x10);

308 
	`£ns‹_wrôe_ªgi°î
 (0x3063, 0x24);

309 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

310 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

311 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

312 
	`£ns‹_wrôe_ªgi°î
 (0x3076, 0x40);

313 
	`£ns‹_wrôe_ªgi°î
 (0x307C, 0x2C);

314 
	`£ns‹_wrôe_ªgi°î
 (0x3085, 0x33);

315 
	`£ns‹_wrôe_ªgi°î
 (0x3087, 0x03);

316 
	`£ns‹_wrôe_ªgi°î
 (0x3088, 0x0E);

317 
	`£ns‹_wrôe_ªgi°î
 (0x3089, 0x00);

318 
	`£ns‹_wrôe_ªgi°î
 (0x308B, 0x00);

319 
	`£ns‹_wrôe_ªgi°î
 (0x308C, 0x06);

320 
	`£ns‹_wrôe_ªgi°î
 (0x308D, 0x03);

321 
	`£ns‹_wrôe_ªgi°î
 (0x308E, 0x03);

322 
	`£ns‹_wrôe_ªgi°î
 (0x308F, 0x06);

323 
	`£ns‹_wrôe_ªgi°î
 (0x3090, 0x04);

324 
	`£ns‹_wrôe_ªgi°î
 (0x3094, 0x0B);

325 
	`£ns‹_wrôe_ªgi°î
 (0x3095, 0x76);

326 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

327 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x00);

328 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x01);

329 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

330 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

331 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

332 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

333 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

334 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

335 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

336 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x40);

337 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x02);

338 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x02);

339 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

340 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x00);

341 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x02);

342 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x02);

343 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x02);

344 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x01);

345 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x02);

346 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x02);

347 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x02);

348 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x01);

349 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

350 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

351 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x04);

352 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

353 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0xCA);

354 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0xCA);

355 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0xCA);

356 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0xCA);

357 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0xCA);

358 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0xCA);

359 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0xCA);

360 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0xCA);

361 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0xCA);

362 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0xCA);

363 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0xCA);

364 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0xCA);

365 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0xCA);

366 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0xC6);

367 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0xCA);

368 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0xCA);

369 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

370 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

371 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

372 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

373 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x02);

374 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x07);

375 
	`£ns‹_wrôe_ªgi°î
 (0x3211, 0x14);

376 
	`£ns‹_wrôe_ªgi°î
 (0x323A, 0x80);

377 
	`£ns‹_wrôe_ªgi°î
 (0x323B, 0x91);

378 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

379 
	`£ns‹_wrôe_ªgi°î
 (0x323D, 0x90);

380 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

381 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0xD7);

382 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0x79);

383 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

384 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

385 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

386 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x18);

387 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

388 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0xDE);

389 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x11);

390 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x49);

391 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x39);

392 
	`£ns‹_wrôe_ªgi°î
 (0x325E, 0x84);

393 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x46);

394 
	`£ns‹_wrôe_ªgi°î
 (0x3273, 0xAB);

395 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

396 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

397 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

398 
	`£ns‹_wrôe_ªgi°î
 (0x328A, 0xE8);

399 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

400 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

401 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

402 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x02);

403 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x02);

404 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x02);

405 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x02);

406 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x03);

407 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x03);

408 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x03);

409 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x03);

410 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

411 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

412 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

413 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

415 
	`¥ötf
("===panasonic mn34220 sensor 1080P60fpsÜinear mode(MIPIÖort) init success!=====\n");

417 
bSís‹Inô
 = 
HI_TRUE
;

420 
	}
}

424 
	$£ns‹_löór_1080p30_öô
()

427 
	`£ns‹_wrôe_ªgi°î
 (0x3022, 0x00);

428 
	`£ns‹_wrôe_ªgi°î
 (0x3023, 0x33);

429 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

430 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

431 
	`£ns‹_wrôe_ªgi°î
 (0x0304, 0x00);

432 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

433 
	`£ns‹_wrôe_ªgi°î
 (0x0306, 0x00);

434 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x24);

435 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

436 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

437 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

438 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

439 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x64);

440 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x14);

441 
	`£ns‹_wrôe_ªgi°î
 (0x3009, 0x0E);

442 
	`£ns‹_wrôe_ªgi°î
 (0x300A, 0xFF);

443 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

444 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

445 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

446 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

447 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

448 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

449 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

450 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

453 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x04);

454 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x63);

456 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

457 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0xC0);

459 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x00);

460 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x02);

462 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

463 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0x00);

466 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

467 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

468 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x04);

469 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0x65);

470 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

471 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0x98);

472 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

473 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x3C);

474 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x04);

475 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x7F);

476 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x04);

477 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0x44);

478 
	`£ns‹_wrôe_ªgi°î
 (0x3031, 0x00);

479 
	`£ns‹_wrôe_ªgi°î
 (0x3032, 0x00);

480 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

481 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

482 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x2C);

483 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

484 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0xFF);

485 
	`£ns‹_wrôe_ªgi°î
 (0x305B, 0x00);

486 
	`£ns‹_wrôe_ªgi°î
 (0x3062, 0x10);

487 
	`£ns‹_wrôe_ªgi°î
 (0x3063, 0x24);

488 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

489 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

490 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

491 
	`£ns‹_wrôe_ªgi°î
 (0x3076, 0x40);

492 
	`£ns‹_wrôe_ªgi°î
 (0x307C, 0x2C);

493 
	`£ns‹_wrôe_ªgi°î
 (0x3085, 0x33);

494 
	`£ns‹_wrôe_ªgi°î
 (0x3087, 0x01);

495 
	`£ns‹_wrôe_ªgi°î
 (0x3088, 0x07);

496 
	`£ns‹_wrôe_ªgi°î
 (0x3089, 0x02);

497 
	`£ns‹_wrôe_ªgi°î
 (0x308B, 0x09);

498 
	`£ns‹_wrôe_ªgi°î
 (0x308C, 0x03);

499 
	`£ns‹_wrôe_ªgi°î
 (0x308D, 0x02);

500 
	`£ns‹_wrôe_ªgi°î
 (0x308E, 0x02);

501 
	`£ns‹_wrôe_ªgi°î
 (0x308F, 0x02);

502 
	`£ns‹_wrôe_ªgi°î
 (0x3090, 0x02);

503 
	`£ns‹_wrôe_ªgi°î
 (0x3094, 0x0B);

504 
	`£ns‹_wrôe_ªgi°î
 (0x3095, 0x76);

505 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

506 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x00);

507 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x01);

508 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

509 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

510 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

511 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

512 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

513 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

514 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

515 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x40);

516 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x02);

517 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x02);

518 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

519 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x00);

520 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x02);

521 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x02);

522 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x02);

523 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x01);

524 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x02);

525 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x02);

526 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x02);

527 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x01);

528 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

529 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

530 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x04);

531 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

532 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0xCA);

533 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0xCA);

534 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0xCA);

535 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0xCA);

536 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0xCA);

537 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0xCA);

538 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0xCA);

539 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0xCA);

540 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0xCA);

541 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0xCA);

542 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0xCA);

543 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0xCA);

544 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0xCA);

545 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0xC6);

546 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0xCA);

547 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0xCA);

548 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

549 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

550 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

551 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

552 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x02);

553 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x07);

554 
	`£ns‹_wrôe_ªgi°î
 (0x3211, 0x14);

555 
	`£ns‹_wrôe_ªgi°î
 (0x323A, 0x80);

556 
	`£ns‹_wrôe_ªgi°î
 (0x323B, 0x91);

557 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

558 
	`£ns‹_wrôe_ªgi°î
 (0x323D, 0x90);

559 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

560 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0xD7);

561 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0x38);

562 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x03);

563 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0xE2);

564 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

565 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x18);

566 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

567 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0xDE);

568 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x11);

569 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x68);

570 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x39);

571 
	`£ns‹_wrôe_ªgi°î
 (0x325E, 0x84);

572 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x46);

573 
	`£ns‹_wrôe_ªgi°î
 (0x3273, 0xAB);

574 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

575 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

576 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

577 
	`£ns‹_wrôe_ªgi°î
 (0x328A, 0xE8);

578 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

579 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

580 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

581 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x02);

582 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x02);

583 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x02);

584 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x02);

585 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x03);

586 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x03);

587 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x03);

588 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x03);

589 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

590 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

591 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

592 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

594 
bSís‹Inô
 = 
HI_TRUE
;

595 
	`¥ötf
("=========================================================\n");

596 
	`¥ötf
("===panasonic mn34220 sensor 1080P30fps(MIPIÖort) init success!=====\n");

597 
	`¥ötf
("=========================================================\n");

600 
	}
}

602 
	$£ns‹_löór_720p120_öô
()

609 
	`£ns‹_wrôe_ªgi°î
 (0x3022, 0x00);

610 
	`£ns‹_wrôe_ªgi°î
 (0x3023, 0x33);

611 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

612 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

613 
	`£ns‹_wrôe_ªgi°î
 (0x0304, 0x00);

614 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

615 
	`£ns‹_wrôe_ªgi°î
 (0x0306, 0x00);

616 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x30);

617 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

618 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

619 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

620 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

621 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x67);

622 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

623 
	`£ns‹_wrôe_ªgi°î
 (0x3009, 0x0E);

624 
	`£ns‹_wrôe_ªgi°î
 (0x300A, 0xFF);

625 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

626 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

627 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

628 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

629 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

630 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

631 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

632 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

634 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x02);

635 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0xEC);

637 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

638 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0xC0);

640 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x00);

641 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x02);

643 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

644 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0x00);

647 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

648 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

649 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x02);

650 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0xEE);

651 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

652 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0xA0);

653 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

654 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0xF2);

655 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x03);

656 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0xC9);

657 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x02);

658 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0xD8);

659 
	`£ns‹_wrôe_ªgi°î
 (0x3031, 0x02);

660 
	`£ns‹_wrôe_ªgi°î
 (0x3032, 0x02);

661 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

662 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

663 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x12);

664 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

665 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0xFF);

666 
	`£ns‹_wrôe_ªgi°î
 (0x305B, 0x00);

667 
	`£ns‹_wrôe_ªgi°î
 (0x3062, 0x10);

668 
	`£ns‹_wrôe_ªgi°î
 (0x3063, 0x24);

669 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

670 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

671 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

672 
	`£ns‹_wrôe_ªgi°î
 (0x3076, 0x40);

673 
	`£ns‹_wrôe_ªgi°î
 (0x307C, 0x2C);

674 
	`£ns‹_wrôe_ªgi°î
 (0x3085, 0x33);

675 
	`£ns‹_wrôe_ªgi°î
 (0x3087, 0x03);

676 
	`£ns‹_wrôe_ªgi°î
 (0x3088, 0x14);

677 
	`£ns‹_wrôe_ªgi°î
 (0x3089, 0x04);

678 
	`£ns‹_wrôe_ªgi°î
 (0x308B, 0x0B);

679 
	`£ns‹_wrôe_ªgi°î
 (0x308C, 0x08);

680 
	`£ns‹_wrôe_ªgi°î
 (0x308D, 0x04);

681 
	`£ns‹_wrôe_ªgi°î
 (0x308E, 0x04);

682 
	`£ns‹_wrôe_ªgi°î
 (0x308F, 0x09);

683 
	`£ns‹_wrôe_ªgi°î
 (0x3090, 0x05);

684 
	`£ns‹_wrôe_ªgi°î
 (0x3094, 0x09);

685 
	`£ns‹_wrôe_ªgi°î
 (0x3095, 0x90);

686 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

687 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x40);

688 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x10);

689 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

690 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

691 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

692 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

693 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

694 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

695 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

696 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x70);

697 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x01);

698 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x03);

699 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

700 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x05);

701 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x00);

702 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x00);

703 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x00);

704 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x03);

705 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x01);

706 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x01);

707 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x01);

708 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x02);

709 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

710 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

711 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x01);

712 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

713 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0x11);

714 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0x30);

715 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0x33);

716 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0x36);

717 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0x35);

718 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0x3C);

719 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0x3F);

720 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0x3A);

721 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0x39);

722 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0x28);

723 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0x2B);

724 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0x2E);

725 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0x2D);

726 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0x22);

727 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0x22);

728 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0x61);

729 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

730 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

731 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

732 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

733 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x03);

734 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x06);

735 
	`£ns‹_wrôe_ªgi°î
 (0x3211, 0x0C);

736 
	`£ns‹_wrôe_ªgi°î
 (0x323A, 0x80);

737 
	`£ns‹_wrôe_ªgi°î
 (0x323B, 0x91);

738 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

739 
	`£ns‹_wrôe_ªgi°î
 (0x323D, 0x90);

740 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

741 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0x75);

742 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0xA5);

743 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

744 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

745 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

746 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x1B);

747 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

748 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0x7B);

749 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x32);

750 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x9A);

751 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x14);

752 
	`£ns‹_wrôe_ªgi°î
 (0x325E, 0xB8);

753 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x0C);

754 
	`£ns‹_wrôe_ªgi°î
 (0x3273, 0xB8);

755 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

756 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x19);

757 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

758 
	`£ns‹_wrôe_ªgi°î
 (0x328A, 0x62);

759 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

760 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

761 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

762 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x03);

763 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x03);

764 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x00);

765 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x03);

766 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

767 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x01);

768 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x01);

769 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x01);

770 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

771 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

772 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

773 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

775 
bSís‹Inô
 = 
HI_TRUE
;

776 
	`¥ötf
("=========================================================\n");

777 
	`¥ötf
("===panasonic mn34220 sensor 720P120fps(MIPIÖort) init success!=====\n");

778 
	`¥ötf
("=========================================================\n");

781 
	}
}

783 
	$£ns‹_löór_VGA160_öô
()

790 
	`£ns‹_wrôe_ªgi°î
 (0x3022, 0x00);

791 
	`£ns‹_wrôe_ªgi°î
 (0x3023, 0x33);

792 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

793 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

794 
	`£ns‹_wrôe_ªgi°î
 (0x0304, 0x00);

795 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

796 
	`£ns‹_wrôe_ªgi°î
 (0x0306, 0x00);

797 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x30);

798 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

799 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

800 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

801 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

802 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x67);

803 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

804 
	`£ns‹_wrôe_ªgi°î
 (0x3009, 0x0E);

805 
	`£ns‹_wrôe_ªgi°î
 (0x300A, 0xFF);

806 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

807 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

808 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

809 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

810 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

811 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

812 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

813 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

815 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x02);

816 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x30);

818 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

819 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0xC0);

821 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x00);

822 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x02);

824 
	`£ns‹_wrôe_ªgi°î
 (0x0204, 0x01);

825 
	`£ns‹_wrôe_ªgi°î
 (0x0205, 0x00);

828 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

829 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

830 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x02);

831 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0x32);

832 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x08);

833 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0xA0);

834 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x01);

835 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x68);

836 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x03);

837 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x53);

838 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x01);

839 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0xEC);

840 
	`£ns‹_wrôe_ªgi°î
 (0x3031, 0x02);

841 
	`£ns‹_wrôe_ªgi°î
 (0x3032, 0x02);

842 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

843 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

844 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x12);

845 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

846 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0xFF);

847 
	`£ns‹_wrôe_ªgi°î
 (0x305B, 0x00);

848 
	`£ns‹_wrôe_ªgi°î
 (0x3062, 0x10);

849 
	`£ns‹_wrôe_ªgi°î
 (0x3063, 0x24);

850 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

851 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

852 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

853 
	`£ns‹_wrôe_ªgi°î
 (0x3076, 0x40);

854 
	`£ns‹_wrôe_ªgi°î
 (0x307C, 0x2C);

855 
	`£ns‹_wrôe_ªgi°î
 (0x3085, 0x33);

856 
	`£ns‹_wrôe_ªgi°î
 (0x3087, 0x03);

857 
	`£ns‹_wrôe_ªgi°î
 (0x3088, 0x14);

858 
	`£ns‹_wrôe_ªgi°î
 (0x3089, 0x04);

859 
	`£ns‹_wrôe_ªgi°î
 (0x308B, 0x0B);

860 
	`£ns‹_wrôe_ªgi°î
 (0x308C, 0x08);

861 
	`£ns‹_wrôe_ªgi°î
 (0x308D, 0x04);

862 
	`£ns‹_wrôe_ªgi°î
 (0x308E, 0x04);

863 
	`£ns‹_wrôe_ªgi°î
 (0x308F, 0x09);

864 
	`£ns‹_wrôe_ªgi°î
 (0x3090, 0x05);

865 
	`£ns‹_wrôe_ªgi°î
 (0x3094, 0x09);

866 
	`£ns‹_wrôe_ªgi°î
 (0x3095, 0x90);

867 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

868 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x40);

869 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x10);

870 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x00);

871 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

872 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

873 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

874 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x00);

875 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x00);

876 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x00);

877 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x70);

878 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x01);

879 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x03);

880 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x02);

881 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x05);

882 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x00);

883 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x00);

884 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x00);

885 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x03);

886 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x01);

887 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x01);

888 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x01);

889 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x02);

890 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x02);

891 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x02);

892 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x01);

893 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

894 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0x11);

895 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0x30);

896 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0x33);

897 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0x36);

898 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0x35);

899 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0x3C);

900 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0x3F);

901 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0x3A);

902 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0x39);

903 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0x28);

904 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0x2B);

905 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0x2E);

906 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0x2D);

907 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0x22);

908 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0x22);

909 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0x61);

910 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

911 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

912 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

913 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

914 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x03);

915 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x06);

916 
	`£ns‹_wrôe_ªgi°î
 (0x3211, 0x0C);

917 
	`£ns‹_wrôe_ªgi°î
 (0x323A, 0x80);

918 
	`£ns‹_wrôe_ªgi°î
 (0x323B, 0x91);

919 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x71);

920 
	`£ns‹_wrôe_ªgi°î
 (0x323D, 0x90);

921 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x01);

922 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0x75);

923 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0xA5);

924 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

925 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

926 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

927 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x1B);

928 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

929 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0x7B);

930 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x32);

931 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0x9A);

932 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x14);

933 
	`£ns‹_wrôe_ªgi°î
 (0x325E, 0xB8);

934 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x0C);

935 
	`£ns‹_wrôe_ªgi°î
 (0x3273, 0xB8);

936 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

937 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x19);

938 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

939 
	`£ns‹_wrôe_ªgi°î
 (0x328A, 0x62);

940 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

941 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

942 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

943 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x03);

944 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x03);

945 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x00);

946 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x03);

947 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

948 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x01);

949 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x01);

950 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x01);

951 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

952 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

953 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

954 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

956 
bSís‹Inô
 = 
HI_TRUE
;

957 
	`¥ötf
("=========================================================\n");

958 
	`¥ötf
("===panasonic mn34220 sensor VGA 160fps(MIPIÖort) init success!=====\n");

959 
	`¥ötf
("=========================================================\n");

962 
	}
}

965 
	$£ns‹_wdr_öô
()

971 
	`£ns‹_wrôe_ªgi°î
 (0x3022, 0x00);

972 
	`£ns‹_wrôe_ªgi°î
 (0x3023, 0x33);

973 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

974 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

975 
	`£ns‹_wrôe_ªgi°î
 (0x0304, 0x00);

976 
	`£ns‹_wrôe_ªgi°î
 (0x0305, 0x02);

977 
	`£ns‹_wrôe_ªgi°î
 (0x0306, 0x00);

978 
	`£ns‹_wrôe_ªgi°î
 (0x0307, 0x30);

979 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

980 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x03);

981 
	`£ns‹_wrôe_ªgi°î
 (0x0112, 0x0C);

982 
	`£ns‹_wrôe_ªgi°î
 (0x0113, 0x0C);

983 
	`£ns‹_wrôe_ªgi°î
 (0x3005, 0x67);

984 
	`£ns‹_wrôe_ªgi°î
 (0x3007, 0x10);

985 
	`£ns‹_wrôe_ªgi°î
 (0x3009, 0x0E);

986 
	`£ns‹_wrôe_ªgi°î
 (0x300A, 0xFF);

987 
	`£ns‹_wrôe_ªgi°î
 (0x300B, 0x00);

988 
	`£ns‹_wrôe_ªgi°î
 (0x3018, 0x43);

989 
	`£ns‹_wrôe_ªgi°î
 (0x3019, 0x10);

990 
	`£ns‹_wrôe_ªgi°î
 (0x301A, 0xB9);

991 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

992 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0x53);

993 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

994 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

995 
	`£ns‹_wrôe_ªgi°î
 (0x0202, 0x00);

996 
	`£ns‹_wrôe_ªgi°î
 (0x0203, 0x20);

997 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

998 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

999 
	`£ns‹_wrôe_ªgi°î
 (0x0340, 0x04);

1000 
	`£ns‹_wrôe_ªgi°î
 (0x0341, 0xE2);

1001 
	`£ns‹_wrôe_ªgi°î
 (0x0342, 0x14);

1002 
	`£ns‹_wrôe_ªgi°î
 (0x0343, 0xA0);

1003 
	`£ns‹_wrôe_ªgi°î
 (0x0346, 0x00);

1004 
	`£ns‹_wrôe_ªgi°î
 (0x0347, 0x3C);

1005 
	`£ns‹_wrôe_ªgi°î
 (0x034A, 0x04);

1006 
	`£ns‹_wrôe_ªgi°î
 (0x034B, 0x7F);

1007 
	`£ns‹_wrôe_ªgi°î
 (0x034E, 0x04);

1008 
	`£ns‹_wrôe_ªgi°î
 (0x034F, 0x44);

1009 
	`£ns‹_wrôe_ªgi°î
 (0x3031, 0x00);

1010 
	`£ns‹_wrôe_ªgi°î
 (0x3032, 0x00);

1011 
	`£ns‹_wrôe_ªgi°î
 (0x3036, 0x00);

1012 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x2E);

1013 
	`£ns‹_wrôe_ªgi°î
 (0x3041, 0x2C);

1014 
	`£ns‹_wrôe_ªgi°î
 (0x3058, 0x0F);

1015 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0xFF);

1016 
	`£ns‹_wrôe_ªgi°î
 (0x305B, 0x00);

1017 
	`£ns‹_wrôe_ªgi°î
 (0x3062, 0x10);

1018 
	`£ns‹_wrôe_ªgi°î
 (0x3063, 0x24);

1019 
	`£ns‹_wrôe_ªgi°î
 (0x306E, 0x0C);

1020 
	`£ns‹_wrôe_ªgi°î
 (0x306F, 0x00);

1021 
	`£ns‹_wrôe_ªgi°î
 (0x3074, 0x01);

1022 
	`£ns‹_wrôe_ªgi°î
 (0x3076, 0x40);

1023 
	`£ns‹_wrôe_ªgi°î
 (0x307C, 0x2C);

1024 
	`£ns‹_wrôe_ªgi°î
 (0x3085, 0x33);

1025 
	`£ns‹_wrôe_ªgi°î
 (0x3087, 0x03);

1026 
	`£ns‹_wrôe_ªgi°î
 (0x3088, 0x14);

1027 
	`£ns‹_wrôe_ªgi°î
 (0x3089, 0x04);

1028 
	`£ns‹_wrôe_ªgi°î
 (0x308B, 0x0B);

1029 
	`£ns‹_wrôe_ªgi°î
 (0x308C, 0x08);

1030 
	`£ns‹_wrôe_ªgi°î
 (0x308D, 0x04);

1031 
	`£ns‹_wrôe_ªgi°î
 (0x308E, 0x04);

1032 
	`£ns‹_wrôe_ªgi°î
 (0x308F, 0x09);

1033 
	`£ns‹_wrôe_ªgi°î
 (0x3090, 0x05);

1034 
	`£ns‹_wrôe_ªgi°î
 (0x3094, 0x0B);

1035 
	`£ns‹_wrôe_ªgi°î
 (0x3095, 0x76);

1036 
	`£ns‹_wrôe_ªgi°î
 (0x3098, 0x00);

1037 
	`£ns‹_wrôe_ªgi°î
 (0x3099, 0x00);

1038 
	`£ns‹_wrôe_ªgi°î
 (0x309A, 0x01);

1039 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x01);

1040 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x04);

1041 
	`£ns‹_wrôe_ªgi°î
 (0x3106, 0x00);

1042 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0xC0);

1043 
	`£ns‹_wrôe_ªgi°î
 (0x312B, 0x20);

1044 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x20);

1045 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x20);

1046 
	`£ns‹_wrôe_ªgi°î
 (0x3141, 0x40);

1047 
	`£ns‹_wrôe_ªgi°î
 (0x3143, 0x03);

1048 
	`£ns‹_wrôe_ªgi°î
 (0x3144, 0x04);

1049 
	`£ns‹_wrôe_ªgi°î
 (0x3145, 0x03);

1050 
	`£ns‹_wrôe_ªgi°î
 (0x3146, 0x05);

1051 
	`£ns‹_wrôe_ªgi°î
 (0x3147, 0x05);

1052 
	`£ns‹_wrôe_ªgi°î
 (0x3148, 0x02);

1053 
	`£ns‹_wrôe_ªgi°î
 (0x3149, 0x02);

1054 
	`£ns‹_wrôe_ªgi°î
 (0x314A, 0x05);

1055 
	`£ns‹_wrôe_ªgi°î
 (0x314B, 0x03);

1056 
	`£ns‹_wrôe_ªgi°î
 (0x314C, 0x06);

1057 
	`£ns‹_wrôe_ªgi°î
 (0x314D, 0x07);

1058 
	`£ns‹_wrôe_ªgi°î
 (0x314E, 0x06);

1059 
	`£ns‹_wrôe_ªgi°î
 (0x314F, 0x06);

1060 
	`£ns‹_wrôe_ªgi°î
 (0x3150, 0x07);

1061 
	`£ns‹_wrôe_ªgi°î
 (0x3152, 0x06);

1062 
	`£ns‹_wrôe_ªgi°î
 (0x3153, 0xE3);

1063 
	`£ns‹_wrôe_ªgi°î
 (0x3155, 0xCA);

1064 
	`£ns‹_wrôe_ªgi°î
 (0x3157, 0xCA);

1065 
	`£ns‹_wrôe_ªgi°î
 (0x3159, 0xCA);

1066 
	`£ns‹_wrôe_ªgi°î
 (0x315B, 0xCA);

1067 
	`£ns‹_wrôe_ªgi°î
 (0x315D, 0xCA);

1068 
	`£ns‹_wrôe_ªgi°î
 (0x315F, 0xCA);

1069 
	`£ns‹_wrôe_ªgi°î
 (0x3161, 0xCA);

1070 
	`£ns‹_wrôe_ªgi°î
 (0x3163, 0xCA);

1071 
	`£ns‹_wrôe_ªgi°î
 (0x3165, 0xCA);

1072 
	`£ns‹_wrôe_ªgi°î
 (0x3167, 0xCA);

1073 
	`£ns‹_wrôe_ªgi°î
 (0x3169, 0xCA);

1074 
	`£ns‹_wrôe_ªgi°î
 (0x316B, 0xCA);

1075 
	`£ns‹_wrôe_ªgi°î
 (0x316D, 0xCA);

1076 
	`£ns‹_wrôe_ªgi°î
 (0x316F, 0xC6);

1077 
	`£ns‹_wrôe_ªgi°î
 (0x3171, 0xCA);

1078 
	`£ns‹_wrôe_ªgi°î
 (0x3173, 0xCA);

1079 
	`£ns‹_wrôe_ªgi°î
 (0x3175, 0x80);

1080 
	`£ns‹_wrôe_ªgi°î
 (0x318E, 0x20);

1081 
	`£ns‹_wrôe_ªgi°î
 (0x318F, 0x70);

1082 
	`£ns‹_wrôe_ªgi°î
 (0x3196, 0x08);

1083 
	`£ns‹_wrôe_ªgi°î
 (0x31FC, 0x02);

1084 
	`£ns‹_wrôe_ªgi°î
 (0x31FE, 0x07);

1085 
	`£ns‹_wrôe_ªgi°î
 (0x3211, 0x0C);

1086 
	`£ns‹_wrôe_ªgi°î
 (0x323A, 0x81);

1087 
	`£ns‹_wrôe_ªgi°î
 (0x323B, 0x91);

1088 
	`£ns‹_wrôe_ªgi°î
 (0x323C, 0x70);

1089 
	`£ns‹_wrôe_ªgi°î
 (0x323D, 0x90);

1090 
	`£ns‹_wrôe_ªgi°î
 (0x323E, 0x00);

1091 
	`£ns‹_wrôe_ªgi°î
 (0x3243, 0xD1);

1092 
	`£ns‹_wrôe_ªgi°î
 (0x3247, 0xD6);

1093 
	`£ns‹_wrôe_ªgi°î
 (0x3248, 0x00);

1094 
	`£ns‹_wrôe_ªgi°î
 (0x3249, 0x00);

1095 
	`£ns‹_wrôe_ªgi°î
 (0x324A, 0x30);

1096 
	`£ns‹_wrôe_ªgi°î
 (0x324B, 0x18);

1097 
	`£ns‹_wrôe_ªgi°î
 (0x324C, 0x02);

1098 
	`£ns‹_wrôe_ªgi°î
 (0x3253, 0xD4);

1099 
	`£ns‹_wrôe_ªgi°î
 (0x3256, 0x11);

1100 
	`£ns‹_wrôe_ªgi°î
 (0x3259, 0xE6);

1101 
	`£ns‹_wrôe_ªgi°î
 (0x325A, 0x39);

1102 
	`£ns‹_wrôe_ªgi°î
 (0x325E, 0x84);

1103 
	`£ns‹_wrôe_ªgi°î
 (0x3272, 0x55);

1104 
	`£ns‹_wrôe_ªgi°î
 (0x3273, 0xAB);

1105 
	`£ns‹_wrôe_ªgi°î
 (0x3280, 0x30);

1106 
	`£ns‹_wrôe_ªgi°î
 (0x3285, 0x1B);

1107 
	`£ns‹_wrôe_ªgi°î
 (0x3288, 0x01);

1108 
	`£ns‹_wrôe_ªgi°î
 (0x328A, 0xE8);

1109 
	`£ns‹_wrôe_ªgi°î
 (0x330E, 0x05);

1110 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x02);

1111 
	`£ns‹_wrôe_ªgi°î
 (0x3315, 0x1F);

1112 
	`£ns‹_wrôe_ªgi°î
 (0x331A, 0x02);

1113 
	`£ns‹_wrôe_ªgi°î
 (0x331B, 0x02);

1114 
	`£ns‹_wrôe_ªgi°î
 (0x332C, 0x02);

1115 
	`£ns‹_wrôe_ªgi°î
 (0x3339, 0x02);

1116 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x03);

1117 
	`£ns‹_wrôe_ªgi°î
 (0x339F, 0x03);

1118 
	`£ns‹_wrôe_ªgi°î
 (0x33A2, 0x03);

1119 
	`£ns‹_wrôe_ªgi°î
 (0x33A3, 0x03);

1120 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

1121 
	`£ns‹_wrôe_ªgi°î
 (0x3001, 0xD3);

1122 
	`£ns‹_wrôe_ªgi°î
 (0x0100, 0x01);

1123 
	`£ns‹_wrôe_ªgi°î
 (0x0101, 0x00);

1125 
	`¥ötf
("===panasonic mn34220 sensor 1080P30fps 2to1 WDR(30fps)(MIPIÖort) init success!=====\n");

1127 
bSís‹Inô
 = 
HI_TRUE
;

1130 
	}
}

	@component/isp/sensor/sony_imx117/imx117_cmos.c

1 #i‡!
deföed
(
__IMX117_CMOS_H_
)

2 
	#__IMX117_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/io˘l.h
>

9 
	~<f˙é.h
>

10 
	~<uni°d.h
>

11 
	~"hi_comm_¢s.h
"

12 
	~"hi_comm_video.h
"

13 
	~"hi_¢s_˘æ.h
"

14 
	~"mpi_i•.h
"

15 
	~"mpi_´.h
"

16 
	~"mpi_awb.h
"

17 
	~"mpi_af.h
"

20 #ifde‡
__˝lu•lus


21 #i‡
__˝lu•lus


26 
	#IMX117_ID
 117

	)

30 
	#HIGH_8BITS
(
x
Ë((x & 0xff00Ë>> 8)

	)

31 
	#LOW_8BITS
(
x
Ë(x & 0x00ff)

	)

32 #i‚de‡
MAX


33 
	#MAX
(
a
, 
b
Ë((◊Ë< (b)Ë? (bË: (a))

	)

36 #i‚de‡
MIN


37 
	#MIN
(
a
, 
b
Ë((◊Ë> (b)Ë? (bË: (a))

	)

41 
	#PWM_HSYNC
 (5 )

	)

42 
	#PWM_VSYNC
 (6 )

	)

45 
	#SHR_L
 (0x000b)

	)

46 
	#SHR_H
 (0x000c)

	)

47 
	#PGC_L
 (0x0009)

	)

48 
	#PGC_H
 (0x000a)

	)

49 
	#APGC01_L
 (0x0352)

	)

50 
	#APGC01_H
 (0x0353)

	)

51 
	#APGC02_L
 (0x0356)

	)

52 
	#APGC02_H
 (0x0357)

	)

53 
	#SVR_L
 (0x000d)

	)

54 
	#SVR_H
 (0x000e)

	)

56 
	#VMAX_1080P60
 (2600 )

	)

59 
	#SENSOR_1080P_60FPS_MODE
 (0 )

	)

60 
	#SENSOR_720P_120FPS_MODE
 (1 )

	)

61 
	#SENSOR_VGA_240FPS_MODE
 (2 )

	)

62 
	#SENSOR_1080P_50FPS_MODE
 (3 )

	)

64 
	shiIMX117_FRAME_ARCH_S
 {

65 
HI_U32
 
hsync_div
;

66 
HI_U32
 
pixñ_˛k
;

67 } 
	tIMX117_FRAME_ARCH_S
;

69 
	shiIMX117_SHUTTER_INFO_S
 {

70 
HI_U32
 
mö_löe
;

71 
HI_U32
 
max_löe
;

72 
HI_U32
 
fuŒ_löes
;

73 
HI_U32
 
svr
;

74 } 
	tIMX117_SHUTTER_INFO_S
;

76 
IMX117_FRAME_ARCH_S
 
°Imx117FrmAch
[];

82 
IMX117_SHUTTER_INFO_S
 
	gg_°Imx117ShtInfo
[4] = {

92 #ifde‡
INIFILE_CONFIG_MODE


93 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

94 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

95 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

96 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

104 
IMX117_pwmWrôe
(
pwmChn
, 
≥riod
, 
duty
);

108 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

109 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

110 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_1080P60
;

112 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

116 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

118 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

119 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

121 
	#PATHLEN_MAX
 256

	)

122 
	#CMOS_CFG_INI
 "imx117_cfg.öi"

	)

123 
	gpcName
[
PATHLEN_MAX
] = "configs/imx117_cfg.ini";

126 #ifde‡
INIFILE_CONFIG_MODE


128 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

130 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

132 
¥ötf
("nullÖointer when getáe default value!\n");

136 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

137 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

138 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 50*256;

140 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

141 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

142 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = (1-0.1083);

144 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

145 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.2;

147 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

148 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.3;

150 
	ggíSís‹Mode
)

153 
WDR_MODE_NONE
:

154 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

155 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

156 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

157 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

160 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x3e;

162 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

163 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

164 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

165 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

167 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

168 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

169 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

170 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

172 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

173 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

174 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

175 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

177 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

178 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

179 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

189 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

192 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

194 
¥ötf
("nullÖointer when getáe default value!\n");

198 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*60/2;

199 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

200 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

202 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

203 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

204 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = (1-0.1083);

206 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

207 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.3;

209 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

210 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.3;

212 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

213 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

214 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

216 
	ggu8Sís‹ImageMode
)

218 
	gSENSOR_1080P_60FPS_MODE
:

220 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

221 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

222 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

223 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

225 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

227 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 2590;

228 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 10;

229 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

230 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

232 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 22528;

233 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

234 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

235 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

237 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1024;

238 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

239 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

240 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

261 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

264 
HI_U32
 
	gu32UpFpsLmt
 = 60;

265 
HI_U32
 
	gu32LöesM¨gö
 = 0;

266 
HI_U32
 
	gu32Svr
;

267 
HI_U32
 
	gu32Fps
;

270 
	gf32Fps
 = 
MAX
(
f32Fps
, 2);

272 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

274 
u32UpFpsLmt
 = 60;

276 if(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

278 
u32UpFpsLmt
 = 120;

280 if((
	gSENSOR_VGA_240FPS_MODE
 =
gu8Sís‹ImageMode
))

282 
u32UpFpsLmt
 = 240;

284 if((
	gSENSOR_1080P_50FPS_MODE
=
gu8Sís‹ImageMode
))

286 
u32UpFpsLmt
 = 50;

289 
	gu32Fps
 = 
f32Fps
 * 100;

291 i‡(
	gu32UpFpsLmt
 * 100 % 
	gu32Fps
 || 
	gf32Fps
 > u32UpFpsLmt)

295 
	gu32Svr
 = 
u32UpFpsLmt
 / 
f32Fps
;

296 i‡(
	gu32Svr
)

298 --
	gu32Svr
;

301 
	gg_°Imx117ShtInfo
[
gu8Sís‹ImageMode
].
	gsvr
 = 
u32Svr
;

303 
	gu32LöesM¨gö
 = 
g_°Imx117ShtInfo
[
gu8Sís‹ImageMode
].
fuŒ_löes
 - g_°Imx117ShtInfo[gu8Sís‹ImageMode].
max_löe
;

304 
	ggu32FuŒLöesStd
 = 
g_°Imx117ShtInfo
[
gu8Sís‹ImageMode
].
fuŒ_löes
 * (
u32Svr
 + 1);

307 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu32D©a
 = 
LOW_8BITS
(
u32Svr
);

308 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu32D©a
 = 
HIGH_8BITS
(
u32Svr
);

312 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 
u32LöesM¨gö
;

313 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 
g_°Imx117ShtInfo
[
gu8Sís‹ImageMode
].
mö_löe
;

314 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

315 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

320 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

321 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

328 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

332 
HI_U32
 
	gu32VÆue
 = 
g_°Imx117ShtInfo
[
gu8Sís‹ImageMode
].
fuŒ_löes
 * (1 + g_°Imx117ShtInfo[gu8Sís‹ImageMode].
svr
 ) - 
u32I¡Time
;

334 
	gu32VÆue
 = 
MIN
(
u32VÆue
, 0xffff);

336 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

337 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

346 
HI_U32
 
	gad_gaö_èbÀ
[123]=

357 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

361 
	gi
;

363 if((
	gHI_NULL
 =
pu32AgaöLö
Ë||(
HI_NULL
 =
pu32AgaöDb
))

365 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

369 i‡(*
	gpu32AgaöLö
 >
ad_gaö_èbÀ
[122])

371 *
pu32AgaöLö
 = 
ad_gaö_èbÀ
[122];

372 *
	gpu32AgaöDb
 = 122;

373 
	gˇlc_èbÀ_íd
;

376 
	gi
 = 1; i < 123; i++)

378 i‡(*
	gpu32AgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

380 *
	gpu32AgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

381 *
	gpu32AgaöDb
 = 
i
 - 1;

382 
	gˇlc_èbÀ_íd
;;

387 
	gˇlc_èbÀ_íd
:

390 *
pu32AgaöDb
 <<= 4;

396 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

400 
HI_U16
 
	gu16Agc01
 = 0;

401 
HI_U16
 
	gu16Agc02
 = 0;

403 i‡(
	gu32Agaö
 <= 0x146)

405 
u16Agc01
 = 0x01F;

406 
	gu16Agc02
 = 0x01E;

408 i‡(
	gu32Agaö
 <= 0x400)

410 
u16Agc01
 = 0x021;

411 
	gu16Agc02
 = 0x020;

413 i‡(
	gu32Agaö
 <= 0x52C)

415 
u16Agc01
 = 0x026;

416 
	gu16Agc02
 = 0x025;

418 i‡(
	gu32Agaö
 <= 0x696)

420 
u16Agc01
 = 0x028;

421 
	gu16Agc02
 = 0x027;

423 i‡(
	gu32Agaö
 <= 0x74B)

425 
u16Agc01
 = 0x02C;

426 
	gu16Agc02
 = 0x02B;

428 i‡(
	gu32Agaö
 <= 0x7A5)

430 
u16Agc01
 = 0x030;

431 
	gu16Agc02
 = 0x02F;

434 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32D©a
 = (
u32Agaö
 & 0xFF);

435 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32D©a
 = ((
u32Agaö
 >> 8) & 0x00FF);

436 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32D©a
 = (
u16Agc01
 & 0xFF);

437 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32D©a
 = ((
u16Agc01
 >> 8) & 0x00FF);

438 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32D©a
 = (
u16Agc02
 & 0xFF);

439 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32D©a
 = ((
u16Agc02
 >> 8) & 0x00FF);

444 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

446 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

448 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

449 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

450 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

451 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

452 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

453 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

454 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
HI_NULL
;

461 #ifde‡
INIFILE_CONFIG_MODE


463 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

465 
HI_U8
 
	gi
;

467 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

469 
¥ötf
("nullÖointer when getáwb default value!\n");

473 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

474 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 
g_AwbD·
[0].
u16WbRefTemp
;

476 
	gi
= 0; i < 4; i++)

478 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

481 
	gi
= 0; i < 6; i++)

483 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

487 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

488 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

495 
AWB_CCM_S
 
	gg_°AwbCcm
 =

519 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

528 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

530 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

532 
¥ötf
("nullÖointer when getáwb default value!\n");

536 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

537 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4900;

539 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x1D0;

540 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

541 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

542 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1F4;

544 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 21;

545 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 147;

546 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -87;

547 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 179332;

548 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

549 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -130261;

551 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

552 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

559 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

561 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

563 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

570 #ifde‡
INIFILE_CONFIG_MODE


572 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

574 i‡(
	gHI_NULL
 =
p°Def
)

576 
¥ötf
("nullÖointer when get isp default value!\n");

580 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

582 
	ggíSís‹Mode
)

585 
WDR_MODE_NONE
:

586 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

587 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

588 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

589 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

590 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

591 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

596 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

597 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

604 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

636 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

667 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

713 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

729 c⁄° 
ISP_CMOS_SHADING_S
 
	gg_°LísShadög
 =

798 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

823 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

825 i‡(
	gHI_NULL
 =
p°Def
)

827 
¥ötf
("nullÖointer when get isp default value!\n");

831 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

833 
	ggíSís‹Mode
)

836 
WDR_MODE_NONE
:

837 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

838 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

839 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

840 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

841 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

842 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

843 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

844 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

845 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

847 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

848 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

849 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

850 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

851 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

852 
mem˝y
(&
p°Def
->
°Shadög
, &
g_°LísShadög
, (
ISP_CMOS_SHADING_S
));

856 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

857 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

864 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

866 
HI_S32
 
	gi
;

868 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

870 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

875 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

877 
	gi
=0; i<4; i++)

879 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xc8;

885 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

887 
HI_U32
 
	gu32Svr
, 
	gu32PixDëShr
;

888 
HI_U32
 
	gu32UpFpsLmt
;

891 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

893 
u32UpFpsLmt
 = 60;

894 
	gu32PixDëShr
 = 10;

896 i‡(
	gSENSOR_1080P_50FPS_MODE
 =
gu8Sís‹ImageMode
)

898 
u32UpFpsLmt
 = 50;

899 
	gu32PixDëShr
 = 10;

901 i‡(
	gSENSOR_720P_120FPS_MODE
 =
gu8Sís‹ImageMode
)

903 
u32UpFpsLmt
 = 120;

904 
	gu32PixDëShr
 = 4;

908 
	gu32UpFpsLmt
 = 240;

909 
	gu32PixDëShr
 = 4;

912 
	gu32Svr
 = 
u32UpFpsLmt
 / 5 - 1;

915 i‡(
	gbE«bÀ
)

918 
£ns‹_wrôe_ªgi°î
 (
PGC_L
, 0x0);

919 
£ns‹_wrôe_ªgi°î
 (
PGC_H
, 0x0);

920 
£ns‹_wrôe_ªgi°î
 (
APGC01_L
, 0x1F);

921 
£ns‹_wrôe_ªgi°î
 (
APGC01_H
, 0x0);

922 
£ns‹_wrôe_ªgi°î
 (
APGC02_L
, 0x1E);

923 
£ns‹_wrôe_ªgi°î
 (
APGC02_H
, 0x0);

925 
£ns‹_wrôe_ªgi°î
(
SHR_L
, 
LOW_8BITS
(
u32PixDëShr
));

926 
£ns‹_wrôe_ªgi°î
(
SHR_H
, 
HIGH_8BITS
(
u32PixDëShr
));

927 
£ns‹_wrôe_ªgi°î
(
SVR_L
, 
LOW_8BITS
(
u32Svr
));

928 
£ns‹_wrôe_ªgi°î
(
SVR_H
, 
HIGH_8BITS
(
u32Svr
));

929 
u¶ìp
(10000);

933 
	gu32Svr
 = 
g_°Imx117ShtInfo
[
gu8Sís‹ImageMode
].
svr
;

934 
£ns‹_wrôe_ªgi°î
(
SVR_L
, 
LOW_8BITS
(
u32Svr
));

935 
£ns‹_wrôe_ªgi°î
(
SVR_H
, 
HIGH_8BITS
(
u32Svr
));

936 
	gbInô
 = 
HI_FALSE
;

942 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

944 
	gbInô
 = 
HI_FALSE
;

946 
	gu8Mode
)

948 
	gWDR_MODE_NONE
:

949 
gu32FuŒLöesStd
 = 
VMAX_1080P60
;

950 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

951 
¥ötf
("linear mode\n");

955 
¥ötf
("NOT supportÅhis mode!\n");

962 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

964 
HI_S32
 
	gi
;

966 i‡(
	gHI_FALSE
 =
bInô
)

968 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_SSP_TYPE
;

969 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

970 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 10;

972 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

974 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

975 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32DevAddr
 = 0x81;

976 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32DevAddrByãNum
 = 1;

977 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32RegAddrByãNum
 = 2;

978 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32D©aByãNum
 = 1;

980 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu8DñayFrmNum
 = 0;

981 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32RegAddr
 = 
SHR_L
;

982 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu8DñayFrmNum
 = 0;

983 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32RegAddr
 = 
SHR_H
;

986 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32RegAddr
 = 
PGC_L
;

987 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu8DñayFrmNum
 = 1;

988 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32RegAddr
 = 
PGC_H
;

989 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu8DñayFrmNum
 = 1;

990 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32RegAddr
 = 
APGC01_L
;

991 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu8DñayFrmNum
 = 1;

992 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32RegAddr
 = 
APGC01_H
;

993 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu8DñayFrmNum
 = 1;

994 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32RegAddr
 = 
APGC02_L
;

995 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu8DñayFrmNum
 = 1;

996 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32RegAddr
 = 
APGC02_H
;

997 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu8DñayFrmNum
 = 1;

999 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu32RegAddr
 = 
SVR_L
;

1000 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu8DñayFrmNum
 = 0;

1001 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu32RegAddr
 = 
SVR_H
;

1002 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu8DñayFrmNum
 = 0;

1006 
	gbInô
 = 
HI_TRUE
;

1010 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1012 i‡(
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°S•D©a
[i].
u32D©a
)

1014 
g_°SnsRegsInfo
.
a°S•D©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1018 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1023 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1025 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1029 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1030 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1035 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1037 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1038 
HI_U16
 
	gu16Fps
;

1039 
HI_BOOL
 
	gbNŸSuµ‹t
 = 
HI_FALSE
;

1041 
	gbInô
 = 
HI_FALSE
;

1044 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1046 
¥ötf
("nullÖointer when set image mode\n");

1050 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <800Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 480))

1052 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1054 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 240)

1056 
u8Sís‹ImageMode
 = 
SENSOR_VGA_240FPS_MODE
;

1060 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1061 
p°Sís‹ImageMode
->
u16Width
,

1062 
p°Sís‹ImageMode
->
u16Height
,

1063 
p°Sís‹ImageMode
->
f32Fps
,

1064 
gíSís‹Mode
);

1069 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1070 
p°Sís‹ImageMode
->
u16Width
,

1071 
p°Sís‹ImageMode
->
u16Height
,

1072 
p°Sís‹ImageMode
->
f32Fps
,

1073 
gíSís‹Mode
);

1076 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <1280Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 720))

1078 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1080 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 120)

1082 
u8Sís‹ImageMode
 = 
SENSOR_720P_120FPS_MODE
;

1086 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1087 
p°Sís‹ImageMode
->
u16Width
,

1088 
p°Sís‹ImageMode
->
u16Height
,

1089 
p°Sís‹ImageMode
->
f32Fps
,

1090 
gíSís‹Mode
);

1095 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1096 
p°Sís‹ImageMode
->
u16Width
,

1097 
p°Sís‹ImageMode
->
u16Height
,

1098 
p°Sís‹ImageMode
->
f32Fps
,

1099 
gíSís‹Mode
);

1102 i‡((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920Ë&& (
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1104 i‡(
WDR_MODE_NONE
 =
gíSís‹Mode
)

1107 
u16Fps
 = 
p°Sís‹ImageMode
->
f32Fps
 * 100;

1108 i‡(
	gu16Fps
 > 6000)

1110 
	gbNŸSuµ‹t
 = 
HI_TRUE
;

1112 i‡(
	gu16Fps
 <5000 && !(5000 % 
u16Fps
))

1114 
u8Sís‹ImageMode
 = 
SENSOR_1080P_50FPS_MODE
;

1116 i‡(!(6000 % 
	gu16Fps
))

1118 
	gu8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1122 
	gbNŸSuµ‹t
 = 
HI_TRUE
;

1125 i‡(
	gbNŸSuµ‹t
)

1127 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1128 
p°Sís‹ImageMode
->
u16Width
,

1129 
p°Sís‹ImageMode
->
u16Height
,

1130 
p°Sís‹ImageMode
->
f32Fps
,

1131 
gíSís‹Mode
);

1137 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",

1138 
p°Sís‹ImageMode
->
u16Width
,

1139 
p°Sís‹ImageMode
->
u16Height
,

1140 
p°Sís‹ImageMode
->
f32Fps
,

1141 
gíSís‹Mode
);

1147 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1149 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1156 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1162 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1167 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1169 
mem£t
(
pcName
, 0, (pcName));

1171 i‡(
	gHI_NULL
 =
pcP©h
)

1173 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1174 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1178 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1180 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1184 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1185 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1191 
HI_VOID
 
£ns‹_globÆ_öô
()

1193 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1194 
	gbSís‹Inô
 = 
HI_FALSE
;

1195 
	gbInô
 = 
HI_FALSE
;

1197 
	ggu32FuŒLöesStd
 = 
VMAX_1080P60
;

1198 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1199 
	ggu8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1201 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1202 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1204 #ifde‡
INIFILE_CONFIG_MODE


1205 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1206 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1207 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1209 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1217 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1219 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1221 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1222 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1223 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1224 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1225 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1226 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1227 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1228 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1229 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1238 
£ns‹_ªgi°î_ˇŒback
()

1240 
HI_S32
 
	gs32Rë
;

1241 
ALG_LIB_S
 
	g°Lib
;

1242 
ISP_DEV
 
	gI•Dev
=0;

1243 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1244 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1245 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1247 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1248 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
IMX117_ID
, &
°I•Regi°î
);

1249 i‡(
	gs32Rë
)

1251 
¥ötf
("sensorÑegister callback function failed!\n");

1252  
	gs32Rë
;

1255 
	g°Lib
.
	gs32Id
 = 0;

1256 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1257 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1258 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX117_ID
, &
°AeRegi°î
);

1259 i‡(
	gs32Rë
)

1261 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1262  
	gs32Rë
;

1265 
	g°Lib
.
	gs32Id
 = 0;

1266 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1267 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1268 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX117_ID
, &
°AwbRegi°î
);

1269 i‡(
	gs32Rë
)

1271 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1272  
	gs32Rë
;

1278 
£ns‹_uƒegi°î_ˇŒback
()

1280 
HI_S32
 
	gs32Rë
;

1281 
ALG_LIB_S
 
	g°Lib
;

1282 
ISP_DEV
 
	gI•Dev
=0;

1284 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
IMX117_ID
);

1285 i‡(
	gs32Rë
)

1287 
¥ötf
("sensor unregister callback function failed!\n");

1288  
	gs32Rë
;

1291 
	g°Lib
.
	gs32Id
 = 0;

1292 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1293 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX117_ID
);

1294 i‡(
	gs32Rë
)

1296 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1297  
	gs32Rë
;

1300 
	g°Lib
.
	gs32Id
 = 0;

1301 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1302 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX117_ID
);

1303 i‡(
	gs32Rë
)

1305 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1306  
	gs32Rë
;

1312 #ifde‡
__˝lu•lus


1313 #i‡
__˝lu•lus


	@component/isp/sensor/sony_imx117/imx117_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/io˘l.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~"hi_comm_video.h
"

27 
	~"hi_•i.h
"

28 
	~"pwm.h
"

30 
	#PWM_HSYNC
 (5)

	)

31 
	#PWM_VSYNC
 (6)

	)

32 
	shiIMX117_FRAME_ARCH_S
 {

33 
HI_U32
 
	mhsync_div
;

34 
HI_U32
 
	mpixñ_˛k
;

35 } 
	tIMX117_FRAME_ARCH_S
;

37 
WDR_MODE_E
 
gíSís‹Mode
;

38 
HI_BOOL
 
bSís‹Inô
;

40 
	gg_fd
 = -1;

42 
	#SENSOR_1080P_60FPS_MODE
 (0)

	)

43 
	#SENSOR_720P_120FPS_MODE
 (1)

	)

44 
	#SENSOR_VGA_240FPS_MODE
 (2)

	)

45 
	#SENSOR_1080P_50FPS_MODE
 (3)

	)

47 
HI_U8
 
gu8Sís‹ImageMode
 ;

50 c⁄° 
IMX117_FRAME_ARCH_S
 
	g°Imx117FrmAch
[4] = {

59 
	$IMX117_pwmWrôe
(
pwmChn
, 
≥riod
, 
duty
)

61 
ªt
;

62 
fd
 = -1;

63 
PWM_DATA_S
 
°PwmD©a
;

65 
fd
 = 
	`›í
("/dev/pwm", 0);

66 if(
fd
<0)

68 
	`¥ötf
("O≥¿pwmÉº‹! @%†löe:%d\n", 
__FUNCTION__
, 
__LINE__
);

73 
°PwmD©a
.
pwm_num
 = 
pwmChn
;

74 
°PwmD©a
.
≥riod
 =Öeriod;

75 
°PwmD©a
.
íabÀ
 = 1;

76 
°PwmD©a
.
duty
 = duty;

79 
ªt
 = 
	`io˘l
(
fd
, 
PWM_CMD_WRITE
, &
°PwmD©a
);

80 
	`˛o£
(
fd
);

82  
ªt
;

83 
	}
}

86 
	$£ns‹_•i_öô
()

88 if(
g_fd
 >= 0)

92 
vÆue
;

93 
ªt
 = 0;

94 
fûe_«me
[] = "/dev/spidev0.0";

96 
g_fd
 = 
	`›í
(
fûe_«me
, 0);

97 i‡(
g_fd
 < 0)

99 
	`¥ötf
("O≥¿%†îr‹!\n",
fûe_«me
);

103 
vÆue
 = 
SPI_MODE_3
 | 
SPI_LSB_FIRST
;

104 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MODE
, &
vÆue
);

105 i‡(
ªt
 < 0)

107 
	`¥ötf
("io˘»SPI_IOC_WR_MODEÉº, vÆuê%dÑë = %d\n", 
vÆue
, 
ªt
);

108  
ªt
;

111 
vÆue
 = 8;

112 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_BITS_PER_WORD
, &
vÆue
);

113 i‡(
ªt
 < 0)

115 
	`¥ötf
("io˘»SPI_IOC_WR_BITS_PER_WORDÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

116  
ªt
;

119 
vÆue
 = 2000000;

120 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
vÆue
);

121 i‡(
ªt
 < 0)

123 
	`¥ötf
("io˘»SPI_IOC_WR_MAX_SPEED_HZÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

124  
ªt
;

128 
	}
}

130 
	$£ns‹_•i_exô
()

132 i‡(
g_fd
 >= 0)

134 
	`˛o£
(
g_fd
);

135 
g_fd
 = -1;

139 
	}
}

141 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

143 
ªt
;

144 
•i_ioc_å™s„r
 
mesg
[1];

145 
tx_buf
[8] = {0};

146 
rx_buf
[8] = {0};

149 
tx_buf
[0] = 0x81;

150 
tx_buf
[1] = 
addr
 >> 8;

151 
tx_buf
[2] = 
addr
 & 0xff;

152 
tx_buf
[3] = 
d©a
;

156 
	`mem£t
(
mesg
, 0, (mesg));

157 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

158 
mesg
[0].
Àn
 = 4;

159 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

160 
mesg
[0].
cs_ch™ge
 = 1;

162 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

163 i‡(
ªt
 < 0) {

164 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

170 
	}
}

172 
	$£ns‹_ªad_ªgi°î
(
addr
)

174 
ªt
 = 0;

175 
•i_ioc_å™s„r
 
mesg
[1];

176 
tx_buf
[8] = {0};

177 
rx_buf
[8] = {0};

180 
tx_buf
[0] = 0x80;

181 
tx_buf
[1] = 
addr
 >> 8;

182 
tx_buf
[2] = 
addr
 & 0xff;

183 
tx_buf
[3] = 0;

185 
	`mem£t
(
mesg
, 0, (mesg));

186 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

187 
mesg
[0].
Àn
 = 4;

188 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

189 
mesg
[0].
cs_ch™ge
 = 1;

191 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

192 i‡(
ªt
 < 0) {

193 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

197  
rx_buf
[3];

198 
	}
}

200 
	$dñay_ms
(
ms
) {

201 
	`u¶ìp
(
ms
*1000);

202 
	}
}

204 
	$£ns‹_¥og
(* 
rom
)

206 
i
 = 0;

208 
lookup
 = 
rom
[
i
++];

209 
addr
 = (
lookup
 >> 16) & 0xFFFF;

210 
d©a
 = 
lookup
 & 0xFFFF;

211 i‡(
addr
 == 0xFFFE) {

212 
	`dñay_ms
(
d©a
);

213 } i‡(
addr
 == 0xFFFF) {

216 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

219 
	}
}

221 
	$£tup_£ns‹
(
i•_mode
)

223 
	}
}

225 
£ns‹_wdr_öô
();

226 
£ns‹_löór_1080p60_öô
();

227 
£ns‹_löór_720p120_öô
();

228 
£ns‹_löór_VGA240_öô
();

230 
	$£ns‹_öô
()

232 
HI_U8
 
u8Sís‹ImageModePªv
 = -1;

235 
	`£ns‹_•i_öô
();

238 i‡(!((
u8Sís‹ImageModePªv
 =
SENSOR_1080P_60FPS_MODE
 && 
gu8Sís‹ImageMode
 =
SENSOR_1080P_50FPS_MODE
) ||

239 (
u8Sís‹ImageModePªv
 =
SENSOR_1080P_50FPS_MODE
 && 
gu8Sís‹ImageMode
 =
SENSOR_1080P_60FPS_MODE
)))

242 i‡(
SENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

244 
	`£ns‹_löór_1080p60_öô
();

246 if(
SENSOR_720P_120FPS_MODE
=
gu8Sís‹ImageMode
)

248 
	`£ns‹_löór_720p120_öô
();

250 if(
SENSOR_VGA_240FPS_MODE
 =
gu8Sís‹ImageMode
)

252 
	`£ns‹_löór_VGA240_öô
();

254 if(
SENSOR_1080P_50FPS_MODE
 =
gu8Sís‹ImageMode
)

256 
	`£ns‹_löór_1080p60_öô
();

263 
u8Sís‹ImageModePªv
 = 
gu8Sís‹ImageMode
;

269 
	`IMX117_pwmWrôe
(
PWM_HSYNC
, 
°Imx117FrmAch
[
gu8Sís‹ImageMode
].
hsync_div
, stImx117FrmAch[gu8SensorImageMode].hsync_div-0x10);

270 
	`IMX117_pwmWrôe
(
PWM_VSYNC
, 
°Imx117FrmAch
[
gu8Sís‹ImageMode
].
pixñ_˛k
, stImx117FrmAch[gu8SensorImageMode].pixel_clk-0x10);

272 
bSís‹Inô
 = 
HI_TRUE
;

275 
	}
}

277 
	$£ns‹_exô
()

279 
	`£ns‹_•i_exô
();

282 
	}
}

284 
	$£ns‹_löór_VGA240_öô
()

288 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x07);

290 
	`£ns‹_wrôe_ªgi°î
 (0x0001, 0x00);

291 
	`£ns‹_wrôe_ªgi°î
 (0x0002, 0x00);

293 
	`£ns‹_wrôe_ªgi°î
 (0x0003, 0x11);

294 
	`£ns‹_wrôe_ªgi°î
 (0x0004, 0x48);

295 
	`£ns‹_wrôe_ªgi°î
 (0x0005, 0x21);

296 
	`£ns‹_wrôe_ªgi°î
 (0x0006, 0x00);

297 
	`£ns‹_wrôe_ªgi°î
 (0x0007, 0x00);

299 
	`£ns‹_wrôe_ªgi°î
 (0x0008, 0x00);

300 
	`£ns‹_wrôe_ªgi°î
 (0x0009, 0x00);

303 
	`£ns‹_wrôe_ªgi°î
 (0x000b, 0x0a);

305 
	`£ns‹_wrôe_ªgi°î
 (0x000d, 0x00);

307 
	`£ns‹_wrôe_ªgi°î
 (0x000f, 0x00);

309 
	`£ns‹_wrôe_ªgi°î
 (0x0011, 0x03);

311 
	`£ns‹_wrôe_ªgi°î
 (0x001a, 0x00);

312 
	`£ns‹_wrôe_ªgi°î
 (0x0026, 0x74);

313 
	`£ns‹_wrôe_ªgi°î
 (0x0027, 0x74);

314 
	`£ns‹_wrôe_ªgi°î
 (0x0028, 0x74);

316 
	`£ns‹_wrôe_ªgi°î
 (0x0045, 0x32);

318 
	`£ns‹_wrôe_ªgi°î
 (0x007e, 0x00);

320 
	`£ns‹_wrôe_ªgi°î
 (0x0080, 0x00);

321 
	`£ns‹_wrôe_ªgi°î
 (0x0081, 0x00);

322 
	`£ns‹_wrôe_ªgi°î
 (0x0082, 0x00);

323 
	`£ns‹_wrôe_ªgi°î
 (0x0083, 0x00);

324 
	`£ns‹_wrôe_ªgi°î
 (0x0084, 0x00);

325 
	`£ns‹_wrôe_ªgi°î
 (0x0085, 0x00);

326 
	`£ns‹_wrôe_ªgi°î
 (0x0086, 0x00);

327 
	`£ns‹_wrôe_ªgi°î
 (0x0087, 0x00);

328 
	`£ns‹_wrôe_ªgi°î
 (0x0095, 0x00);

329 
	`£ns‹_wrôe_ªgi°î
 (0x0096, 0x00);

330 
	`£ns‹_wrôe_ªgi°î
 (0x0097, 0x00);

331 
	`£ns‹_wrôe_ªgi°î
 (0x0098, 0x00);

332 
	`£ns‹_wrôe_ªgi°î
 (0x0099, 0x00);

333 
	`£ns‹_wrôe_ªgi°î
 (0x009a, 0x00);

334 
	`£ns‹_wrôe_ªgi°î
 (0x009b, 0x00);

335 
	`£ns‹_wrôe_ªgi°î
 (0x009c, 0x00);

337 
	`£ns‹_wrôe_ªgi°î
 (0x00b6, 0x00);

338 
	`£ns‹_wrôe_ªgi°î
 (0x00b7, 0x00);

339 
	`£ns‹_wrôe_ªgi°î
 (0x00b8, 0x00);

340 
	`£ns‹_wrôe_ªgi°î
 (0x00b9, 0x00);

341 
	`£ns‹_wrôe_ªgi°î
 (0x00ba, 0x00);

342 
	`£ns‹_wrôe_ªgi°î
 (0x00bb, 0x00);

343 
	`£ns‹_wrôe_ªgi°î
 (0x00bc, 0x00);

344 
	`£ns‹_wrôe_ªgi°î
 (0x00bd, 0x00);

345 
	`£ns‹_wrôe_ªgi°î
 (0x00be, 0x00);

346 
	`£ns‹_wrôe_ªgi°î
 (0x00bf, 0x00);

347 
	`£ns‹_wrôe_ªgi°î
 (0x00c0, 0x00);

348 
	`£ns‹_wrôe_ªgi°î
 (0x00c1, 0x00);

349 
	`£ns‹_wrôe_ªgi°î
 (0x00c2, 0x00);

350 
	`£ns‹_wrôe_ªgi°î
 (0x00c3, 0x00);

351 
	`£ns‹_wrôe_ªgi°î
 (0x00c4, 0x00);

352 
	`£ns‹_wrôe_ªgi°î
 (0x00c5, 0x00);

353 
	`£ns‹_wrôe_ªgi°î
 (0x00c6, 0x00);

354 
	`£ns‹_wrôe_ªgi°î
 (0x00c7, 0x00);

355 
	`£ns‹_wrôe_ªgi°î
 (0x00c8, 0x00);

356 
	`£ns‹_wrôe_ªgi°î
 (0x00c9, 0x00);

357 
	`£ns‹_wrôe_ªgi°î
 (0x00ca, 0x00);

358 
	`£ns‹_wrôe_ªgi°î
 (0x00cb, 0x00);

359 
	`£ns‹_wrôe_ªgi°î
 (0x00cc, 0x00);

360 
	`£ns‹_wrôe_ªgi°î
 (0x00ce, 0x00);

362 
	`£ns‹_wrôe_ªgi°î
 (0x0222, 0x31);

364 
	`£ns‹_wrôe_ªgi°î
 (0x0352, 0x28);

366 
	`£ns‹_wrôe_ªgi°î
 (0x0356, 0x27);

368 
	`£ns‹_wrôe_ªgi°î
 (0x0358, 0x01);

369 
	`£ns‹_wrôe_ªgi°î
 (0x0528, 0x0e);

370 
	`£ns‹_wrôe_ªgi°î
 (0x0529, 0x0e);

371 
	`£ns‹_wrôe_ªgi°î
 (0x052a, 0x0e);

372 
	`£ns‹_wrôe_ªgi°î
 (0x052b, 0x0e);

373 
	`£ns‹_wrôe_ªgi°î
 (0x0534, 0x10);

374 
	`£ns‹_wrôe_ªgi°î
 (0x057e, 0x00);

375 
	`£ns‹_wrôe_ªgi°î
 (0x057f, 0x10);

376 
	`£ns‹_wrôe_ªgi°î
 (0x0580, 0x0d);

377 
	`£ns‹_wrôe_ªgi°î
 (0x0581, 0x0d);

378 
	`£ns‹_wrôe_ªgi°î
 (0x0585, 0x00);

380 
	`£ns‹_wrôe_ªgi°î
 (0x0617, 0x10);

381 
	`£ns‹_wrôe_ªgi°î
 (0x065c, 0x05);

382 
	`£ns‹_wrôe_ªgi°î
 (0x0700, 0x19);

385 
	`£ns‹_wrôe_ªgi°î
 (0x002e, 0xff);

386 
	`£ns‹_wrôe_ªgi°î
 (0x002f, 0xff);

387 
	`£ns‹_wrôe_ªgi°î
 (0x0030, 0xff);

388 
	`£ns‹_wrôe_ªgi°î
 (0x0031, 0xff);

389 
	`£ns‹_wrôe_ªgi°î
 (0x0032, 0xff);

390 
	`£ns‹_wrôe_ªgi°î
 (0x0033, 0x00);

392 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x06);

393 
	`dñay_ms
(2);

394 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x00);

396 
	`¥ötf
("-------Sony IMX117 Sensor VGA240 Initial OK!-------\n");

398 
	}
}

400 
	$£ns‹_löór_720p120_öô
()

404 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x07);

406 
	`£ns‹_wrôe_ªgi°î
 (0x0001, 0x00);

407 
	`£ns‹_wrôe_ªgi°î
 (0x0002, 0x00);

409 
	`£ns‹_wrôe_ªgi°î
 (0x0003, 0x33);

410 
	`£ns‹_wrôe_ªgi°î
 (0x0004, 0x40);

411 
	`£ns‹_wrôe_ªgi°î
 (0x0005, 0x1D);

412 
	`£ns‹_wrôe_ªgi°î
 (0x0006, 0x00);

413 
	`£ns‹_wrôe_ªgi°î
 (0x0007, 0x00);

414 
	`£ns‹_wrôe_ªgi°î
 (0x0008, 0x00);

416 
	`£ns‹_wrôe_ªgi°î
 (0x0009, 0x00);

417 
	`£ns‹_wrôe_ªgi°î
 (0x000A, 0x06);

418 
	`£ns‹_wrôe_ªgi°î
 (0x000b, 0x0a);

419 
	`£ns‹_wrôe_ªgi°î
 (0x000C, 0x00);

420 
	`£ns‹_wrôe_ªgi°î
 (0x000d, 0x00);

421 
	`£ns‹_wrôe_ªgi°î
 (0x000E, 0x00);

422 
	`£ns‹_wrôe_ªgi°î
 (0x000f, 0x00);

423 
	`£ns‹_wrôe_ªgi°î
 (0x0010, 0x00);

424 
	`£ns‹_wrôe_ªgi°î
 (0x0011, 0x03);

425 
	`£ns‹_wrôe_ªgi°î
 (0x001a, 0x00);

427 
	`£ns‹_wrôe_ªgi°î
 (0x0026, 0x74);

428 
	`£ns‹_wrôe_ªgi°î
 (0x0027, 0x74);

429 
	`£ns‹_wrôe_ªgi°î
 (0x0028, 0x74);

431 
	`£ns‹_wrôe_ªgi°î
 (0x007E, 0x00);

432 
	`£ns‹_wrôe_ªgi°î
 (0x007F, 0x00);

433 
	`£ns‹_wrôe_ªgi°î
 (0x0080, 0x00);

434 
	`£ns‹_wrôe_ªgi°î
 (0x0081, 0x00);

435 
	`£ns‹_wrôe_ªgi°î
 (0x0082, 0x00);

436 
	`£ns‹_wrôe_ªgi°î
 (0x0083, 0x00);

437 
	`£ns‹_wrôe_ªgi°î
 (0x0084, 0x00);

438 
	`£ns‹_wrôe_ªgi°î
 (0x0085, 0x00);

439 
	`£ns‹_wrôe_ªgi°î
 (0x0086, 0x00);

440 
	`£ns‹_wrôe_ªgi°î
 (0x0087, 0x00);

441 
	`£ns‹_wrôe_ªgi°î
 (0x0095, 0x00);

442 
	`£ns‹_wrôe_ªgi°î
 (0x0096, 0x00);

443 
	`£ns‹_wrôe_ªgi°î
 (0x0097, 0x00);

444 
	`£ns‹_wrôe_ªgi°î
 (0x0098, 0x00);

445 
	`£ns‹_wrôe_ªgi°î
 (0x0099, 0x00);

446 
	`£ns‹_wrôe_ªgi°î
 (0x009A, 0x00);

447 
	`£ns‹_wrôe_ªgi°î
 (0x009B, 0x00);

448 
	`£ns‹_wrôe_ªgi°î
 (0x009C, 0x00);

450 
	`£ns‹_wrôe_ªgi°î
 (0x00B6, 0x00);

451 
	`£ns‹_wrôe_ªgi°î
 (0x00B7, 0x00);

452 
	`£ns‹_wrôe_ªgi°î
 (0x00B8, 0x00);

453 
	`£ns‹_wrôe_ªgi°î
 (0x00B9, 0x00);

454 
	`£ns‹_wrôe_ªgi°î
 (0x00BA, 0x00);

455 
	`£ns‹_wrôe_ªgi°î
 (0x00BB, 0x00);

456 
	`£ns‹_wrôe_ªgi°î
 (0x00BC, 0x00);

457 
	`£ns‹_wrôe_ªgi°î
 (0x00BD, 0x00);

458 
	`£ns‹_wrôe_ªgi°î
 (0x00BE, 0x00);

459 
	`£ns‹_wrôe_ªgi°î
 (0x00BF, 0x00);

460 
	`£ns‹_wrôe_ªgi°î
 (0x00C0, 0x00);

461 
	`£ns‹_wrôe_ªgi°î
 (0x00C1, 0x00);

462 
	`£ns‹_wrôe_ªgi°î
 (0x00C2, 0x00);

463 
	`£ns‹_wrôe_ªgi°î
 (0x00C3, 0x00);

464 
	`£ns‹_wrôe_ªgi°î
 (0x00C4, 0x00);

465 
	`£ns‹_wrôe_ªgi°î
 (0x00C5, 0x00);

466 
	`£ns‹_wrôe_ªgi°î
 (0x00C6, 0x00);

467 
	`£ns‹_wrôe_ªgi°î
 (0x00C7, 0x00);

468 
	`£ns‹_wrôe_ªgi°î
 (0x00C8, 0x00);

469 
	`£ns‹_wrôe_ªgi°î
 (0x00C9, 0x00);

470 
	`£ns‹_wrôe_ªgi°î
 (0x00CA, 0x00);

471 
	`£ns‹_wrôe_ªgi°î
 (0x00CB, 0x00);

472 
	`£ns‹_wrôe_ªgi°î
 (0x00CC, 0x00);

473 
	`£ns‹_wrôe_ªgi°î
 (0x00CE, 0x00);

475 
	`£ns‹_wrôe_ªgi°î
 (0x0222, 0x31);

476 
	`£ns‹_wrôe_ªgi°î
 (0x0223, 0x01);

478 
	`£ns‹_wrôe_ªgi°î
 (0x0352, 0x28);

479 
	`£ns‹_wrôe_ªgi°î
 (0x0353, 0x00);

480 
	`£ns‹_wrôe_ªgi°î
 (0x0356, 0x27);

481 
	`£ns‹_wrôe_ªgi°î
 (0x0357, 0x00);

483 
	`£ns‹_wrôe_ªgi°î
 (0x0358, 0x01);

485 
	`£ns‹_wrôe_ªgi°î
 (0x0528, 0x0E);

486 
	`£ns‹_wrôe_ªgi°î
 (0x0529, 0x0E);

487 
	`£ns‹_wrôe_ªgi°î
 (0x052A, 0x0E);

488 
	`£ns‹_wrôe_ªgi°î
 (0x052B, 0x0E);

489 
	`£ns‹_wrôe_ªgi°î
 (0x0534, 0x10);

490 
	`£ns‹_wrôe_ªgi°î
 (0x057E, 0x00);

491 
	`£ns‹_wrôe_ªgi°î
 (0x057F, 0x10);

492 
	`£ns‹_wrôe_ªgi°î
 (0x0580, 0x0D);

493 
	`£ns‹_wrôe_ªgi°î
 (0x0581, 0x0D);

494 
	`£ns‹_wrôe_ªgi°î
 (0x0585, 0x00);

495 
	`£ns‹_wrôe_ªgi°î
 (0x0586, 0x07);

497 
	`£ns‹_wrôe_ªgi°î
 (0x0617, 0x10);

498 
	`£ns‹_wrôe_ªgi°î
 (0x065C, 0x05);

500 
	`£ns‹_wrôe_ªgi°î
 (0x0700, 0x19);

501 
	`£ns‹_wrôe_ªgi°î
 (0x0701, 0x19);

503 
	`£ns‹_wrôe_ªgi°î
 (0x002e, 0xff);

504 
	`£ns‹_wrôe_ªgi°î
 (0x002f, 0xff);

505 
	`£ns‹_wrôe_ªgi°î
 (0x0030, 0xff);

506 
	`£ns‹_wrôe_ªgi°î
 (0x0031, 0xff);

507 
	`£ns‹_wrôe_ªgi°î
 (0x0032, 0xff);

508 
	`£ns‹_wrôe_ªgi°î
 (0x0033, 0x00);

510 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x06);

511 
	`dñay_ms
(2);

512 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x00);

514 
	`¥ötf
("-------Sony IMX117 Sensor 720p120 Initial OK!-------\n");

515 
	}
}

518 
	$£ns‹_löór_1080p60_öô
()

521 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x07);

522 
	`£ns‹_wrôe_ªgi°î
 (0x0001, 0x00);

523 
	`£ns‹_wrôe_ªgi°î
 (0x0002, 0x00);

524 
	`£ns‹_wrôe_ªgi°î
 (0x0003, 0x33);

525 
	`£ns‹_wrôe_ªgi°î
 (0x0004, 0x19);

526 
	`£ns‹_wrôe_ªgi°î
 (0x0005, 0x0d);

527 
	`£ns‹_wrôe_ªgi°î
 (0x0006, 0x00);

528 
	`£ns‹_wrôe_ªgi°î
 (0x0007, 0x00);

529 
	`£ns‹_wrôe_ªgi°î
 (0x0008, 0x00);

530 
	`£ns‹_wrôe_ªgi°î
 (0x0009, 0x00);

531 
	`£ns‹_wrôe_ªgi°î
 (0x000A, 0x00);

532 
	`£ns‹_wrôe_ªgi°î
 (0x000b, 0x1a);

533 
	`£ns‹_wrôe_ªgi°î
 (0x000C, 0x01);

534 
	`£ns‹_wrôe_ªgi°î
 (0x000d, 0x00);

535 
	`£ns‹_wrôe_ªgi°î
 (0x000E, 0x00);

536 
	`£ns‹_wrôe_ªgi°î
 (0x000f, 0x00);

537 
	`£ns‹_wrôe_ªgi°î
 (0x0010, 0x00);

538 
	`£ns‹_wrôe_ªgi°î
 (0x0011, 0x00);

539 
	`£ns‹_wrôe_ªgi°î
 (0x001a, 0x00);

540 
	`£ns‹_wrôe_ªgi°î
 (0x0026, 0x74);

541 
	`£ns‹_wrôe_ªgi°î
 (0x0027, 0x74);

542 
	`£ns‹_wrôe_ªgi°î
 (0x0028, 0x74);

547 
	`£ns‹_wrôe_ªgi°î
 (0x0045, 0x32);

548 
	`£ns‹_wrôe_ªgi°î
 (0x007e, 0x20);

549 
	`£ns‹_wrôe_ªgi°î
 (0x007F, 0x01);

550 
	`£ns‹_wrôe_ªgi°î
 (0x0080, 0x00);

551 
	`£ns‹_wrôe_ªgi°î
 (0x0081, 0x00);

552 
	`£ns‹_wrôe_ªgi°î
 (0x0082, 0x00);

553 
	`£ns‹_wrôe_ªgi°î
 (0x0083, 0x00);

554 
	`£ns‹_wrôe_ªgi°î
 (0x0084, 0x00);

555 
	`£ns‹_wrôe_ªgi°î
 (0x0085, 0x00);

556 
	`£ns‹_wrôe_ªgi°î
 (0x0086, 0x00);

557 
	`£ns‹_wrôe_ªgi°î
 (0x0087, 0x00);

558 
	`£ns‹_wrôe_ªgi°î
 (0x0095, 0x00);

559 
	`£ns‹_wrôe_ªgi°î
 (0x0096, 0x00);

560 
	`£ns‹_wrôe_ªgi°î
 (0x0097, 0x00);

561 
	`£ns‹_wrôe_ªgi°î
 (0x0098, 0x00);

562 
	`£ns‹_wrôe_ªgi°î
 (0x0099, 0x00);

563 
	`£ns‹_wrôe_ªgi°î
 (0x009a, 0x00);

564 
	`£ns‹_wrôe_ªgi°î
 (0x009b, 0x00);

565 
	`£ns‹_wrôe_ªgi°î
 (0x009c, 0x00);

566 
	`£ns‹_wrôe_ªgi°î
 (0x00b6, 0x67);

567 
	`£ns‹_wrôe_ªgi°î
 (0x00b7, 0x00);

568 
	`£ns‹_wrôe_ªgi°î
 (0x00b8, 0x00);

569 
	`£ns‹_wrôe_ªgi°î
 (0x00b9, 0x00);

570 
	`£ns‹_wrôe_ªgi°î
 (0x00ba, 0x00);

571 
	`£ns‹_wrôe_ªgi°î
 (0x00bb, 0x00);

572 
	`£ns‹_wrôe_ªgi°î
 (0x00bc, 0x00);

573 
	`£ns‹_wrôe_ªgi°î
 (0x00bd, 0x00);

574 
	`£ns‹_wrôe_ªgi°î
 (0x00be, 0x00);

575 
	`£ns‹_wrôe_ªgi°î
 (0x00bf, 0x00);

576 
	`£ns‹_wrôe_ªgi°î
 (0x00c0, 0x00);

577 
	`£ns‹_wrôe_ªgi°î
 (0x00c1, 0x00);

578 
	`£ns‹_wrôe_ªgi°î
 (0x00c2, 0x00);

579 
	`£ns‹_wrôe_ªgi°î
 (0x00c3, 0x00);

580 
	`£ns‹_wrôe_ªgi°î
 (0x00c4, 0x00);

581 
	`£ns‹_wrôe_ªgi°î
 (0x00c5, 0x00);

582 
	`£ns‹_wrôe_ªgi°î
 (0x00c6, 0x00);

583 
	`£ns‹_wrôe_ªgi°î
 (0x00c7, 0x00);

584 
	`£ns‹_wrôe_ªgi°î
 (0x00c8, 0x00);

585 
	`£ns‹_wrôe_ªgi°î
 (0x00c9, 0x00);

586 
	`£ns‹_wrôe_ªgi°î
 (0x00ca, 0x00);

587 
	`£ns‹_wrôe_ªgi°î
 (0x00cb, 0x00);

588 
	`£ns‹_wrôe_ªgi°î
 (0x00cc, 0x00);

589 
	`£ns‹_wrôe_ªgi°î
 (0x00ce, 0x0e);

590 
	`£ns‹_wrôe_ªgi°î
 (0x0222, 0x31);

591 
	`£ns‹_wrôe_ªgi°î
 (0x0223, 0x01);

592 
	`£ns‹_wrôe_ªgi°î
 (0x0352, 0x1f);

593 
	`£ns‹_wrôe_ªgi°î
 (0x0353, 0x00);

594 
	`£ns‹_wrôe_ªgi°î
 (0x0356, 0x1e);

595 
	`£ns‹_wrôe_ªgi°î
 (0x0357, 0x00);

596 
	`£ns‹_wrôe_ªgi°î
 (0x0358, 0x01);

597 
	`£ns‹_wrôe_ªgi°î
 (0x0528, 0x0e);

598 
	`£ns‹_wrôe_ªgi°î
 (0x0529, 0x0e);

599 
	`£ns‹_wrôe_ªgi°î
 (0x052a, 0x0e);

600 
	`£ns‹_wrôe_ªgi°î
 (0x052b, 0x0e);

601 
	`£ns‹_wrôe_ªgi°î
 (0x0534, 0x10);

602 
	`£ns‹_wrôe_ªgi°î
 (0x057e, 0x00);

603 
	`£ns‹_wrôe_ªgi°î
 (0x057f, 0x10);

604 
	`£ns‹_wrôe_ªgi°î
 (0x0580, 0x0d);

605 
	`£ns‹_wrôe_ªgi°î
 (0x0581, 0x0d);

606 
	`£ns‹_wrôe_ªgi°î
 (0x0585, 0x00);

607 
	`£ns‹_wrôe_ªgi°î
 (0x0586, 0x07);

608 
	`£ns‹_wrôe_ªgi°î
 (0x0617, 0x10);

609 
	`£ns‹_wrôe_ªgi°î
 (0x065c, 0x05);

610 
	`£ns‹_wrôe_ªgi°î
 (0x0700, 0x19);

611 
	`£ns‹_wrôe_ªgi°î
 (0x0701, 0x19);

613 
	`£ns‹_wrôe_ªgi°î
 (0x002e, 0xff);

614 
	`£ns‹_wrôe_ªgi°î
 (0x002f, 0xff);

615 
	`£ns‹_wrôe_ªgi°î
 (0x0030, 0xff);

616 
	`£ns‹_wrôe_ªgi°î
 (0x0031, 0xff);

617 
	`£ns‹_wrôe_ªgi°î
 (0x0032, 0xff);

618 
	`£ns‹_wrôe_ªgi°î
 (0x0033, 0x00);

620 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x06);

621 
	`dñay_ms
(2);

622 
	`£ns‹_wrôe_ªgi°î
 (0x0000, 0x00);

624 
	`¥ötf
("-------Sony IMX117 Sensor 1080p60 Initial OK!-AAAAA------\n");

627 
	}
}

629 
	$£ns‹_wdr_öô
()

632 
	}
}

	@component/isp/sensor/sony_imx123/imx123_cmos.c

1 #i‡!
deföed
(
__IMX123_CMOS_H_
)

2 
	#__IMX123_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#IMX123_ID
 123

	)

23 
	#FIXED_RHS1_MODE
 1

	)

27 #ifde‡
INIFILE_CONFIG_MODE


29 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

30 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

31 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

32 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

41 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_30Fps
 =

57 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr_25Fps
 =

74 c⁄° 
£ns‹_i2c_addr
;

75 
£ns‹_addr_byã
;

76 
£ns‹_d©a_byã
;

79 
	#INCREASE_LINES
 (1Ë

	)

81 
	#IMX123_VMAX_1080P_60FPS_LINEAR
 (1125+
INCREASE_LINES
)

82 
	#IMX123_VMAX_QXGA_30FPS_LINEAR
 (0x672+
INCREASE_LINES
)

83 
	#IMX123_VMAX_QXGA_60FPS_LINEAR
 (0x708+
INCREASE_LINES
)

84 
	#IMX123_VMAX_QXGA_30FPS_DOL_WDR
 (0x708+
INCREASE_LINES
)

85 

	)

86 
	#SENSOR_1080P_60FPS_MODE
 (0)

	)

87 
	#SENSOR_1080P_30FPS_MODE
 (1)

	)

88 
	#SENSOR_QXGA_30FPS_MODE
 (2)

	)

89 
	#SENSOR_QXGA_60FPS_MODE
 (3)

	)

91 
	#SHS1_ADDR
 (0x21E)

	)

92 
	#SHS2_ADDR
 (0x221)

	)

93 
	#RHS1_ADDR
 (0x22e)

	)

94 
	#GAIN_ADDR
 (0x214)

	)

95 
	#VMAX_ADDR
 (0x218)

	)

100 
HI_U32
 
	ggu32RHS1_LocRLimô
 = (2* 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 - 2*1564 - 11) - (((2* IMX123_VMAX_QXGA_30FPS_DOL_WDR - 2* 1564 - 11) - 10 ) %4) ;

102 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_QXGA_30FPS_MODE
;

103 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

105 
HI_U32
 
	ggu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

106 
HI_U32
 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

107 
HI_U32
 
	ggu32RHS1
 = 0xE6;

108 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

109 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

111 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

112 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

114 
	#PATHLEN_MAX
 256

	)

115 
	#CMOS_CFG_INI
 "imx123_cfg.öi"

	)

116 
	gpcName
[
PATHLEN_MAX
] = "configs/imx123_cfg.ini";

119 #ifde‡
INIFILE_CONFIG_MODE


120 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

122 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

124 
¥ötf
("nullÖointer when getáe default value!\n");

128 if––
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
Ë|| (
SENSOR_QXGA_60FPS_MODE
 == gu8SensorImageMode) )

130 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 60 / 2;

134 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 30 / 2;

137 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

138 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

140 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

141 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

142 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

144 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

145 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

147 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

148 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 1;

150 
	ggíSís‹Mode
)

153 
WDR_MODE_NONE
:

154 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

155 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

156 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

157 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

159 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

161 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

162 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 3;

163 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

164 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

166 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 363329;

167 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

168 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

169 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

171 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

172 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

173 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

174 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

176 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

177 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

178 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

181 
	gWDR_MODE_2To1_LINE
:

182 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

183 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

184 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

185 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

187 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

188 
	gp°AeSnsD·
->
	gu16M™R©ioE«bÀ
 = 
HI_TRUE
;

189 
	gp°AeSnsD·
->
	gu32R©io
 = 0x400;

191 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 447;

192 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 5;

193 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

194 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

196 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 2 * 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 * 30 / 2;

197 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 363329;

198 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

199 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

200 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

202 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

203 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

204 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

205 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

207 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

208 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

209 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

211 
	gWDR_MODE_2To1_FRAME
:

212 
WDR_MODE_2To1_FRAME_FULL_RATE
:

213 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

214 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

215 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

216 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

218 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[2].
u8AeCom≥nßti⁄
;

220 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

221 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 3;

222 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MaxI¡TimeT¨gë
;

223 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[2].
u32MöI¡TimeT¨gë
;

225 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 363329;

226 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

227 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[2].
u32MaxAgaöT¨gë
;

228 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[2].
u32MöAgaöT¨gë
;

230 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

231 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

232 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxDgaöT¨gë
;

233 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[2].
u32MöDgaöT¨gë
;

235 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[2].
u32ISPDgaöShi·
;

236 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MöISPDgaöT¨gë
;

237 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[2].
u32MaxISPDgaöT¨gë
;

246 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

248 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

250 
¥ötf
("nullÖointer when getáe default value!\n");

254 if––
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
Ë|| (
SENSOR_QXGA_60FPS_MODE
 == gu8SensorImageMode) )

256 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 60 / 2;

260 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 30 / 2;

262 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

263 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

265 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

266 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

267 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

269 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

270 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

272 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

273 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 1;

275 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

276 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

277 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

279 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 363329;

280 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

281 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

282 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

284 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 1;

285 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1;

286 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

287 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

288 
	ggíSís‹Mode
)

291 
WDR_MODE_NONE
:

292 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

293 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

294 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

295 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

297 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

298 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 3;

299 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 0xffff;

300 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
p°AeSnsD·
->
u32MöI¡Time
;

302 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

305 
	gWDR_MODE_2To1_FRAME
:

306 
WDR_MODE_2To1_FRAME_FULL_RATE
:

307 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

308 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

309 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

310 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

312 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

313 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 3;

314 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 0xffff;

315 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
p°AeSnsD·
->
u32MöI¡Time
;

317 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

320 
	gWDR_MODE_2To1_LINE
:

321 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

322 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

323 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

324 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

326 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 447;

327 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 5;

328 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 0xffff;

329 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
p°AeSnsD·
->
u32MöI¡Time
;

331 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 363329;

332 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

333 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 8134;

334 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

336 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

337 
	gp°AeSnsD·
->
	gu16M™R©ioE«bÀ
 = 
HI_TRUE
;

338 
	gp°AeSnsD·
->
	gu32R©io
 = 0x400;

341 i‡(
	gIMX123_VMAX_QXGA_30FPS_DOL_WDR
 =
gu32FuŒLöesStd
)

343 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

345 if–(
	gIMX123_VMAX_QXGA_30FPS_DOL_WDR
 * 30 /25Ë=
gu32FuŒLöesStd
)

347 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

359 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

361 
HI_U32
 
	gu32VMAX
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

363 
	ggu8Sís‹ImageMode
)

365 
	gSENSOR_QXGA_30FPS_MODE
:

366 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

368 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

370 
u32VMAX
 = 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 * 30 / 
f32Fps
;

371 
	gu32VMAX
 = (
u32VMAX
 > 0x1FFFF) ? 0x1FFFF : u32VMAX;

372 
	ggu32FuŒLöesStd
 = 
u32VMAX
 * 2;

373 
	ggu32FuŒLöes
 = 
gu32FuŒLöesStd
;

378 
	ggu32RHS1_LocRLimô
 = (2* 
u32VMAX
 - 2*1564 - 11) - (((2* u32VMAX - 2* 1564 - 11) - 10 ) %4);

381 i‡(25 >
f32Fps
)

383 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_25Fps
, (
ISP_AE_ROUTE_S
));

387 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr_30Fps
, (
ISP_AE_ROUTE_S
));

393 
	ggu32FuŒLöesStd
 = (
IMX123_VMAX_QXGA_30FPS_LINEAR
 * 30Ë/ 
f32Fps
;

394 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0x1FFFF) ? 0x1FFFF : gu32FullLinesStd;

395 
	gu32VMAX
 = 
gu32FuŒLöesStd
;

400 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

405 
	gSENSOR_QXGA_60FPS_MODE
:

406 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

408 
gu32FuŒLöesStd
 = (
IMX123_VMAX_QXGA_60FPS_LINEAR
 * 60Ë/ 
f32Fps
;

409 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0x1FFFF) ? 0x1FFFF : gu32FullLinesStd;

410 
	gu32VMAX
 = 
gu32FuŒLöesStd
;

414 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

420 
	gSENSOR_1080P_60FPS_MODE
:

421 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

423 
gu32FuŒLöesStd
 = (
IMX123_VMAX_1080P_60FPS_LINEAR
 * 60Ë/ 
f32Fps
;

424 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0x1FFFF) ? 0x1FFFF : gu32FullLinesStd;

425 
	gu32VMAX
 = 
gu32FuŒLöesStd
;

429 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

438 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

440 
g_°SnsRegsInfo
.
a°S•D©a
[5].
u32D©a
 = (
u32VMAX
 & 0xFF);

441 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32D©a
 = ((
u32VMAX
 & 0xFF00) >> 8);

442 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32D©a
 = ((
u32VMAX
 & 0x10000) >> 16);

446 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu32D©a
 = (
u32VMAX
 & 0xFF);

447 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu32D©a
 = ((
u32VMAX
 & 0xFF00) >> 8);

448 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[10].
	gu32D©a
 = ((
u32VMAX
 & 0x10000) >> 16);

451 if––
	gWDR_MODE_NONE
=
gíSís‹Mode
 ) || (
WDR_MODE_2To1_FRAME
 == genSensorMode) ||

452 –
WDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
) )

454 
p°AeSnsD·
->
u32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 4;

456 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

458 
p°AeSnsD·
->
u32MaxI¡Time
 = 
gu32RHS1_LocRLimô
 - 11;

464 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

465 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

466 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

467 
	ggu32FuŒLöes
 = 
gu32FuŒLöesStd
;

473 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

474 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

477 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0x1FFFF) ? 0x1FFFF : u32FullLines;

478 
	ggu32FuŒLöes
 = 
u32FuŒLöes
;

480 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

482 
g_°SnsRegsInfo
.
a°S•D©a
[5].
u32D©a
 = (
gu32FuŒLöes
 & 0xFF);

483 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32D©a
 = ((
gu32FuŒLöes
 & 0xFF00) >> 8);

484 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32D©a
 = ((
gu32FuŒLöes
 & 0x10000) >> 16);

488 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

489 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu32D©a
 = ((
gu32FuŒLöes
 & 0xFF00) >> 8);

490 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[10].
	gu32D©a
 = ((
gu32FuŒLöes
 & 0x10000) >> 16);

493 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

499 
p°AeSnsD·
->
u32MaxI¡Time
 = 
gu32FuŒLöes
 - 4;

506 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

508 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

509 
HI_U32
 
	gu32VÆue
 = 0;

511 
HI_U32
 
	gu32Sh‹tI¡Time
;

512 
HI_U32
 
	gu32L⁄gI¡Time
;

513 
HI_U32
 
	gu32SHS1
;

514 
HI_U32
 
	gu32SHS2
;

516 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

518 i‡(
bFú°
)

520 
u32Sh‹tI¡Time
 = 
u32I¡Time
;

521 
	gbFú°
 = 
HI_FALSE
;

525 
	gu32L⁄gI¡Time
 = 
u32I¡Time
;

526 #i‡
FIXED_RHS1_MODE


527 
	gu32SHS2
 = 
gu32FuŒLöes
 - 
u32L⁄gI¡Time
;

528 
	gu32SHS1
 = 
gu32RHS1
 - 
u32Sh‹tI¡Time
;

533 if–0 =(
u32Sh‹tI¡Time
 +11 -10) %4 )

535 
gu32RHS1
 = 
u32Sh‹tI¡Time
 +11;

539 
	ggu32RHS1
 = 
u32Sh‹tI¡Time
 +11 + ( 4 - (u32ShortIntTime +11 -10) %4 );

542 
	gu32SHS2
 = 
gu32FuŒLöes
 - 
u32L⁄gI¡Time
;

543 
	gu32SHS1
 = 
gu32RHS1
 - 
u32Sh‹tI¡Time
;

546 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32D©a
 = (
u32SHS1
 & 0xFF);

547 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32D©a
 = ((
u32SHS1
 & 0xFF00) >> 8);

548 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32D©a
 = ((
u32SHS1
 & 0x10000) >> 16);

550 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32D©a
 = (
u32SHS2
 & 0xFF);

551 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32D©a
 = ((
u32SHS2
 & 0xFF00) >> 8);

552 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32D©a
 = ((
u32SHS2
 & 0x10000) >> 16);

554 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[11].
	gu32D©a
 = (
gu32RHS1
 & 0xFF);

555 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[12].
	gu32D©a
 = ((
gu32RHS1
 & 0xFF00) >> 8);

556 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[13].
	gu32D©a
 = ((
gu32RHS1
 & 0xF0000) >> 16);

558 
	gbFú°
 = 
HI_TRUE
;

561 i‡(
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode
 ||
WDR_MODE_2To1_FRAME_FULL_RATE
 ==genSensorMode)

563 i‡(
bFú°
)

565 
bFú°
 = 
HI_FALSE
;

566 
	gu32VÆue
 = 
gu32FuŒLöes
 - 
u32I¡Time
;

567 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32D©a
 = 
u32VÆue
 & 0xFF;

568 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32D©a
 = (
u32VÆue
 & 0xFF00) >> 8;

569 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32D©a
 = (
u32VÆue
 & 0x10000) >> 16;

574 
	gbFú°
 = 
HI_TRUE
;

575 
	gu32VÆue
 = 
gu32FuŒLöes
 - 
u32I¡Time
;

576 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32D©a
 = 
u32VÆue
 & 0xFF;

577 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32D©a
 = (
u32VÆue
 & 0xFF00) >> 8;

578 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32D©a
 = (
u32VÆue
 & 0x10000) >> 16;

583 
	gu32VÆue
 = 
gu32FuŒLöes
 - 
u32I¡Time
;

585 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

586 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

587 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32D©a
 = ((
u32VÆue
 & 0x10000) >> 16);

588 
	gbFú°
 = 
HI_TRUE
;

594 
HI_U32
 
	ggaö_èbÀ
[511]=

634 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

636 
	gi
;

638 i‡(*
	gpu32AgaöLö
 >
gaö_èbÀ
[510])

640 *
pu32AgaöLö
 = 
gaö_èbÀ
[510];

641 *
	gpu32AgaöDb
 = 510;

645 
	gi
 = 1; i < 511; i++)

647 i‡(*
	gpu32AgaöLö
 < 
	ggaö_èbÀ
[
i
])

649 *
	gpu32AgaöLö
 = 
gaö_èbÀ
[
i
 - 1];

650 *
	gpu32AgaöDb
 = 
i
 - 1;

657 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

659 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32D©a
 = (
u32Agaö
 & 0xFF);

660 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32D©a
 = ((
u32Agaö
 & 0x100) >> 8);

666 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

668 #i‡
FIXED_RHS1_MODE


670 
HI_U32
 
	gu32L⁄gI¡TimeMax
;

672 
HI_U32
 
	gu32Sh‹tI¡TimeMax
;

674 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

676 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

680 if((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

682 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 4Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

685 if–(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
Ë&& (
SENSOR_QXGA_30FPS_MODE
 =
gu8Sís‹ImageMode
) )

692 #i‡
FIXED_RHS1_MODE


698 
u32Sh‹tI¡TimeMax
 = ((
gu32FuŒLöesStd
 - 22Ë* 0x40 - ((gu32FuŒLöesStd - 22Ë* 0x40%(
DIV_0_TO_1
(0x400 + 0x40)) ) ) / DIV_0_TO_1(0x400 + 0x40);

699 
	gu32Sh‹tI¡TimeMax
 = (
u32Sh‹tI¡TimeMax
 < 5)? 5 : u32ShortIntTimeMax;

701 if–
	gu32Sh‹tI¡TimeMax
 > (
	ggu32RHS1_LocRLimô
 - 11) )

703 
	gu32Sh‹tI¡TimeMax
 = 
gu32RHS1_LocRLimô
 - 11;

704 
	ggu32RHS1
 = 
gu32RHS1_LocRLimô
;

708 if–0 =(
u32Sh‹tI¡TimeMax
 +11 -10) %4 )

710 
gu32RHS1
 = 
u32Sh‹tI¡TimeMax
 +11;

714 
	ggu32RHS1
 = 
u32Sh‹tI¡TimeMax
 +11 + ( 4 - (u32ShortIntTimeMax +11 -10) %4 );

720 
	gu32Sh‹tI¡TimeMax
 = ( (
gu32FuŒLöesStd
 - 22Ë* 0x40 - ( (gu32FuŒLöesStd - 22Ë* 0x40%(
DIV_0_TO_1
(
u32R©io
 + 0x40)) ) ) / DIV_0_TO_1(u32Ratio + 0x40);

722 
	gu32Sh‹tI¡TimeMax
 = (
u32Sh‹tI¡TimeMax
 < 5) ? 5 : u32ShortIntTimeMax;

724 if(
	gu32Sh‹tI¡TimeMax
 <(
gu32RHS1_LocRLimô
 - 11) )

726 
u32L⁄gI¡TimeMax
 = 
u32Sh‹tI¡TimeMax
 * 
u32R©io
 >> 6;

728 if(
	gu32L⁄gI¡TimeMax
 <(
gu32FuŒLöesStd
 - 
gu32RHS1_LocRLimô
 - 11))

735 
gu32RHS1
 = 
gu32FuŒLöesStd
 - 
u32L⁄gI¡TimeMax
 - 11;

736 
	ggu32RHS1
 = 
gu32RHS1
 - (gu32RHS1 -10) %4;

738 if(
	gu32Sh‹tI¡TimeMax
 <(
gu32RHS1
 - 11) )

744 
u32Sh‹tI¡TimeMax
 = 
gu32RHS1
 - 11;

750 
	gu32Sh‹tI¡TimeMax
 = 
gu32RHS1_LocRLimô
 - 11;

754 *
	gpu32I¡TimeMax
 = 
u32Sh‹tI¡TimeMax
;

760 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

762 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

764 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

765 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

766 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

767 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

768 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

769 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

770 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
NULL
;

771 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

778 #ifde‡
INIFILE_CONFIG_MODE


779 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

781 
HI_U8
 
	gi
;

783 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

785 
¥ötf
("nullÖointer when getáwb default value!\n");

789 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

791 
	ggíSís‹Mode
)

794 
WDR_MODE_NONE
:

795 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

796 
	gi
= 0; i < 4; i++)

798 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

801 
	gi
= 0; i < 6; i++)

803 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

806 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

807 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

809 
	gWDR_MODE_2To1_LINE
:

810 
WDR_MODE_2To1_FRAME
:

811 
WDR_MODE_2To1_FRAME_FULL_RATE
:

812 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

813 
	gi
= 0; i < 4; i++)

815 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

818 
	gi
= 0; i < 6; i++)

820 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

823 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

824 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

833 
AWB_CCM_S
 
	gg_°AwbCcm
 =

858 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

867 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

876 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

878 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

880 
¥ötf
("nullÖointer when getáwb default value!\n");

884 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

886 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4850;

888 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x1C2;

889 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

890 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

891 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1F3;

893 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 80;

894 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 5;

895 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -171;

896 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 181935;

897 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

898 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -136460;

900 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

902 
	ggíSís‹Mode
)

905 
WDR_MODE_NONE
:

906 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

908 
	gWDR_MODE_2To1_LINE
:

909 
WDR_MODE_2To1_FRAME
:

910 
WDR_MODE_2To1_FRAME_FULL_RATE
:

911 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

920 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

922 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

924 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

931 #ifde‡
INIFILE_CONFIG_MODE


933 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

935 i‡(
	gHI_NULL
 =
p°Def
)

937 
¥ötf
("nullÖointer when get isp default value!\n");

941 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

942 
	ggíSís‹Mode
)

945 
WDR_MODE_NONE
:

946 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

947 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

948 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

949 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

950 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

951 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

954 
	gWDR_MODE_2To1_LINE
:

955 
WDR_MODE_2To1_FRAME
:

956 
WDR_MODE_2To1_FRAME_FULL_RATE
:

957 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

958 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

959 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

960 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

961 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

962 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

963 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

967 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

968 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1520;

975 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

1006 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

1037 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

1058 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

1082 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

1130 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

1175 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

1191 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n_wdr
 =

1207 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

1251 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

1268 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

1285 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

1287 i‡(
	gHI_NULL
 =
p°Def
)

1289 
¥ötf
("nullÖointer when get isp default value!\n");

1293 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

1295 
	ggíSís‹Mode
)

1298 
WDR_MODE_NONE
:

1299 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

1300 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1301 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

1302 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

1303 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

1304 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

1305 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

1306 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1307 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1309 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

1310 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

1311 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

1312 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

1313 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1315 
	gWDR_MODE_2To1_LINE
:

1316 
WDR_MODE_2To1_FRAME
:

1317 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1318 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

1319 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1320 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

1321 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

1322 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

1323 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x06;

1324 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x08;

1325 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1326 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1328 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

1329 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

1330 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

1331 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n_wdr
, (
ISP_CMOS_RGBSHARPEN_S
));

1332 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

1333 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

1338 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

1339 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1520;

1346 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

1348 
HI_S32
 
	gi
;

1350 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

1352 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1357 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1359 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

1361 
i
=0; 
	gi
<4; i++)

1363 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xEF;

1366 if(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1368 
i
=0; 
	gi
<4; i++)

1370 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xF0;

1375 
	gi
=0; i<4; i++)

1377 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xEF;

1384 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1386 
HI_U32
 
	gu32FuŒLöes_5Fps
;

1387 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1393 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1395 
u32FuŒLöes_5Fps
 = (
IMX123_VMAX_1080P_60FPS_LINEAR
 * 60) / 5;

1397 i‡(
	gSENSOR_QXGA_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1399 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1405 
u32FuŒLöes_5Fps
 = (
IMX123_VMAX_QXGA_30FPS_LINEAR
* 30) / 5;

1414 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0x1FFFF) ? 0x1FFFF : u32FullLines_5Fps;

1416 i‡(
	gbE«bÀ
)

1418 
£ns‹_wrôe_ªgi°î
 (
GAIN_ADDR
,0x00);

1419 
£ns‹_wrôe_ªgi°î
 (
GAIN_ADDR
 + 1,0x00);

1421 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
, 
u32FuŒLöes_5Fps
 & 0xFF);

1422 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
 + 1, (
u32FuŒLöes_5Fps
 & 0xFF00) >> 8);

1423 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
 + 2, (
u32FuŒLöes_5Fps
 & 0x10000) >> 16);

1425 
£ns‹_wrôe_ªgi°î
 (
SHS1_ADDR
, 0x4);

1426 
£ns‹_wrôe_ªgi°î
 (
SHS1_ADDR
 + 1, 0x0);

1427 
£ns‹_wrôe_ªgi°î
 (
SHS1_ADDR
 + 2, 0x0);

1431 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0x1FFFF) ? 0x1FFFF : gu32FullLinesStd;

1432 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
, 
gu32FuŒLöes
 & 0xFF);

1433 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
 + 1, (
gu32FuŒLöes
 & 0xFF00) >> 8);

1434 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
 + 2, (
gu32FuŒLöes
 & 0x10000) >> 16);

1435 
	gbInô
 = 
HI_FALSE
;

1441 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1443 
	gbInô
 = 
HI_FALSE
;

1445 
	gu8Mode
)

1447 
	gWDR_MODE_NONE
:

1448 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1450 if(
	gSENSOR_QXGA_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1452 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1453 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1455 if(
	gSENSOR_1080P_60FPS_MODE
=
gu8Sís‹ImageMode
)

1457 
gu32FuŒLöesStd
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1458 
	ggu32FuŒLöes
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1465 
¥ötf
("linear mode\n");

1468 
	gWDR_MODE_2To1_LINE
:

1469 
gíSís‹Mode
 = 
WDR_MODE_2To1_LINE
;

1471 if(
	gSENSOR_QXGA_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1473 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 *2;

1474 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 *2;

1480 
¥ötf
("2to1Üine WDR mode\n");

1483 
	gWDR_MODE_2To1_FRAME
:

1484 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1485 if(
	gSENSOR_1080P_60FPS_MODE
=
gu8Sís‹ImageMode
)

1487 
gu32FuŒLöesStd
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1488 
	ggu32FuŒLöes
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1490 if(
	gSENSOR_QXGA_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1492 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_60FPS_LINEAR
;

1493 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_60FPS_LINEAR
;

1500 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1501 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1502 if(
	gSENSOR_QXGA_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1504 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1505 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1507 if(
	gSENSOR_1080P_60FPS_MODE
=
gu8Sís‹ImageMode
)

1509 
gu32FuŒLöesStd
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1510 
	ggu32FuŒLöes
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1519 
¥ötf
("NOT supportÅhis mode!\n");

1527 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1529 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1531 
	gbInô
 = 
HI_FALSE
;

1533 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1535 
¥ötf
("nullÖointer when set image mode\n");

1539 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1541 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 60)

1543 
u8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1544 if(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

1546 
gu32FuŒLöesStd
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1547 
	ggu32FuŒLöes
 = 
IMX123_VMAX_1080P_60FPS_LINEAR
;

1555 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1556 
p°Sís‹ImageMode
->
u16Width
,

1557 
p°Sís‹ImageMode
->
u16Height
,

1558 
p°Sís‹ImageMode
->
f32Fps
);

1563 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2048)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1536))

1565 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1567 
u8Sís‹ImageMode
 = 
SENSOR_QXGA_30FPS_MODE
;

1569 if(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

1571 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1572 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1574 if(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1576 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 *2;

1577 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_DOL_WDR
 *2;

1579 if(
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
)

1581 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1582 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1586 if(
	gp°Sís‹ImageMode
->
	gf32Fps
 <= 60)

1588 
u8Sís‹ImageMode
 = 
SENSOR_QXGA_60FPS_MODE
;

1590 if(
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode
)

1592 
gu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_60FPS_LINEAR
;

1593 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_60FPS_LINEAR
;

1602 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1603 
p°Sís‹ImageMode
->
u16Width
,

1604 
p°Sís‹ImageMode
->
u16Height
,

1605 
p°Sís‹ImageMode
->
f32Fps
);

1612 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1613 
p°Sís‹ImageMode
->
u16Width
,

1614 
p°Sís‹ImageMode
->
u16Height
,

1615 
p°Sís‹ImageMode
->
f32Fps
);

1619 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1621 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1627 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1633 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1639 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1641 
HI_S32
 
	gi
;

1643 i‡(
	gHI_FALSE
 =
bInô
)

1645 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_SSP_TYPE
;

1646 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1647 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 8;

1649 i‡(
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode


1650 ||
WDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
)

1652 
g_°SnsRegsInfo
.
u32RegNum
 += 3;

1654 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

1656 
g_°SnsRegsInfo
.
u32RegNum
 += 6;

1663 
	gi
 = 0; i < 
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1665 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1666 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32DevAddr
 = 0x02;

1667 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32DevAddrByãNum
 = 1;

1668 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32RegAddrByãNum
 = 1;

1669 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32D©aByãNum
 = 1;

1672 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu8DñayFrmNum
 = 0;

1673 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32RegAddr
 = 
SHS1_ADDR
;

1674 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu8DñayFrmNum
 = 0;

1675 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32RegAddr
 = 
SHS1_ADDR
 + 1;

1676 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu8DñayFrmNum
 = 0;

1677 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32RegAddr
 = 
SHS1_ADDR
 + 2;

1679 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu8DñayFrmNum
 = 0;

1680 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32RegAddr
 = 
GAIN_ADDR
;

1681 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu8DñayFrmNum
 = 0;

1682 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32RegAddr
 = 
GAIN_ADDR
 + 1;

1684 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu8DñayFrmNum
 = 0;

1685 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32RegAddr
 = 
VMAX_ADDR
;

1686 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu8DñayFrmNum
 = 0;

1687 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1688 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu8DñayFrmNum
 = 0;

1689 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32RegAddr
 = 
VMAX_ADDR
 + 2;

1691 i‡(
	gWDR_MODE_2To1_LINE
 =
gíSís‹Mode
 )

1693 
g_°SnsRegsInfo
.
a°S•D©a
[0].
u8DñayFrmNum
 = 0;

1694 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu8DñayFrmNum
 = 0;

1695 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu8DñayFrmNum
 = 0;

1697 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu8DñayFrmNum
 = 1;

1698 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32RegAddr
 = 
SHS2_ADDR
;

1699 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu8DñayFrmNum
 = 1;

1700 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32RegAddr
 = 
SHS2_ADDR
 + 1;

1701 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu8DñayFrmNum
 = 1;

1702 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32RegAddr
 = 
SHS2_ADDR
 + 2;

1704 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu8DñayFrmNum
 = 0;

1705 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu32RegAddr
 = 
VMAX_ADDR
;

1706 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu8DñayFrmNum
 = 0;

1707 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1708 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[10].
	gu8DñayFrmNum
 = 0;

1709 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[10].
	gu32RegAddr
 = 
VMAX_ADDR
 + 2;

1711 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[11].
	gu8DñayFrmNum
 = 0;

1712 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[11].
	gu32RegAddr
 = 
RHS1_ADDR
;

1713 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[12].
	gu8DñayFrmNum
 = 0;

1714 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[12].
	gu32RegAddr
 = 
RHS1_ADDR
 + 1;

1715 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[13].
	gu8DñayFrmNum
 = 0;

1716 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[13].
	gu32RegAddr
 = 
RHS1_ADDR
 + 2;

1719 i‡((
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME_FULL_RATE
 == genSensorMode))

1721 
g_°SnsRegsInfo
.
a°S•D©a
[5].
u8DñayFrmNum
 = 1;

1722 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32RegAddr
 = 
SHS1_ADDR
;

1723 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu8DñayFrmNum
 = 1;

1724 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32RegAddr
 = 
SHS1_ADDR
 + 1;

1725 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu8DñayFrmNum
 = 1;

1726 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gu32RegAddr
 = 
SHS1_ADDR
 + 2;

1728 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu8DñayFrmNum
 = 0;

1729 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[8].
	gu32RegAddr
 = 
VMAX_ADDR
;

1730 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu8DñayFrmNum
 = 0;

1731 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[9].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1732 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[10].
	gu8DñayFrmNum
 = 0;

1733 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[10].
	gu32RegAddr
 = 
VMAX_ADDR
 + 2;

1737 
	gbInô
 = 
HI_TRUE
;

1741 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1743 i‡(
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°S•D©a
[i].
u32D©a
)

1745 
g_°SnsRegsInfo
.
a°S•D©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1749 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1753 i‡((
	gWDR_MODE_2To1_FRAME
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME_FULL_RATE
 == genSensorMode))

1755 
g_°SnsRegsInfo
.
a°S•D©a
[0].
bUpd©e
 = 
HI_TRUE
;

1756 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1757 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gbUpd©e
 = 
HI_TRUE
;

1758 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gbUpd©e
 = 
HI_TRUE
;

1759 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gbUpd©e
 = 
HI_TRUE
;

1760 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[7].
	gbUpd©e
 = 
HI_TRUE
;

1764 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1766 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1769 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1770 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1776 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1778 
mem£t
(
pcName
, 0, (pcName));

1780 i‡(
	gHI_NULL
 =
pcP©h
)

1782 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1783 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1787 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1789 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1793 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1794 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1800 
HI_VOID
 
£ns‹_globÆ_öô
()

1802 
	ggu8Sís‹ImageMode
 = 
SENSOR_QXGA_30FPS_MODE
;

1803 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1804 
	ggu32FuŒLöesStd
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1805 
	ggu32FuŒLöes
 = 
IMX123_VMAX_QXGA_30FPS_LINEAR
;

1806 
	ggu32RHS1
 = 0xe6;

1808 
	gbInô
 = 
HI_FALSE
;

1809 
	gbSís‹Inô
 = 
HI_FALSE
;

1811 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1812 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1814 #ifde‡
INIFILE_CONFIG_MODE


1815 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1816 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1817 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1819 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1826 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1828 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1830 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1831 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1832 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1833 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1834 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1836 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1837 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1838 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1839 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1848 
£ns‹_ªgi°î_ˇŒback
()

1850 
ISP_DEV
 
	gI•Dev
 = 0;

1851 
HI_S32
 
	gs32Rë
;

1852 
ALG_LIB_S
 
	g°Lib
;

1853 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1854 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1855 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1857 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1858 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
IMX123_ID
, &
°I•Regi°î
);

1859 i‡(
	gs32Rë
)

1861 
¥ötf
("sensorÑegister callback function failed!\n");

1862  
	gs32Rë
;

1865 
	g°Lib
.
	gs32Id
 = 0;

1866 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1867 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1868 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX123_ID
, &
°AeRegi°î
);

1869 i‡(
	gs32Rë
)

1871 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1872  
	gs32Rë
;

1875 
	g°Lib
.
	gs32Id
 = 0;

1876 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1877 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1878 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX123_ID
, &
°AwbRegi°î
);

1879 i‡(
	gs32Rë
)

1881 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1882  
	gs32Rë
;

1888 
£ns‹_uƒegi°î_ˇŒback
()

1890 
ISP_DEV
 
	gI•Dev
 = 0;

1891 
HI_S32
 
	gs32Rë
;

1892 
ALG_LIB_S
 
	g°Lib
;

1894 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
IMX123_ID
);

1895 i‡(
	gs32Rë
)

1897 
¥ötf
("sensor unregister callback function failed!\n");

1898  
	gs32Rë
;

1901 
	g°Lib
.
	gs32Id
 = 0;

1902 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1903 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX123_ID
);

1904 i‡(
	gs32Rë
)

1906 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1907  
	gs32Rë
;

1910 
	g°Lib
.
	gs32Id
 = 0;

1911 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1912 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX123_ID
);

1913 i‡(
	gs32Rë
)

1915 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1916  
	gs32Rë
;

1922 #ifde‡
__˝lu•lus


1923 #i‡
__˝lu•lus


	@component/isp/sensor/sony_imx123/imx123_sensor_ctl.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/°©.h
>

5 
	~<sys/io˘l.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

8 
	~"hi_comm_video.h
"

10 
	~"hi_•i.h
"

13 
WDR_MODE_E
 
gíSís‹Mode
;

14 
HI_U8
 
gu8Sís‹ImageMode
;

15 
HI_BOOL
 
bSís‹Inô
;

17 
	gg_fd
= -1;

19 
	$£ns‹_•i_öô
()

21 i‡(
g_fd
 >= 0)

25 
vÆue
;

26 
ªt
 = 0;

27 
fûe_«me
[] = "/dev/spidev0.0";

29 
g_fd
 = 
	`›í
(
fûe_«me
, 0);

30 i‡(
g_fd
 < 0)

32 
	`¥ötf
("O≥¿%†îr‹!\n",
fûe_«me
);

36 
vÆue
 = 
SPI_MODE_3
 | 
SPI_LSB_FIRST
;

37 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MODE
, &
vÆue
);

38 i‡(
ªt
 < 0)

40 
	`¥ötf
("io˘»SPI_IOC_WR_MODEÉº, vÆuê%dÑë = %d\n", 
vÆue
, 
ªt
);

41  
ªt
;

44 
vÆue
 = 8;

45 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_BITS_PER_WORD
, &
vÆue
);

46 i‡(
ªt
 < 0)

48 
	`¥ötf
("io˘»SPI_IOC_WR_BITS_PER_WORDÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

49  
ªt
;

52 
vÆue
 = 2000000;

53 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
vÆue
);

54 i‡(
ªt
 < 0)

56 
	`¥ötf
("io˘»SPI_IOC_WR_MAX_SPEED_HZÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

57  
ªt
;

61 
	}
}

63 
	$£ns‹_•i_exô
()

65 i‡(
g_fd
 >= 0)

67 
	`˛o£
(
g_fd
);

68 
g_fd
 = -1;

72 
	}
}

74 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

76 
ªt
;

77 
•i_ioc_å™s„r
 
mesg
[1];

78 
tx_buf
[8] = {0};

79 
rx_buf
[8] = {0};

81 
tx_buf
[0] = (
addr
 & 0xff00) >> 8;

82 
tx_buf
[0] &= (~0x80);

83 
tx_buf
[1] = 
addr
 & 0xff;

84 
tx_buf
[2] = 
d©a
;

86 
	`mem£t
(
mesg
, 0, (mesg));

87 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

88 
mesg
[0].
Àn
 = 3;

89 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

90 
mesg
[0].
cs_ch™ge
 = 1;

92 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

93 i‡(
ªt
 < 0) {

94 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

99 
	}
}

101 
	$£ns‹_ªad_ªgi°î
(
addr
)

103 
ªt
 = 0;

104 
•i_ioc_å™s„r
 
mesg
[1];

105 
tx_buf
[8] = {0};

106 
rx_buf
[8] = {0};

108 
tx_buf
[0] = (
addr
 & 0xff00) >> 8;

109 
tx_buf
[0] |= 0x80;

110 
tx_buf
[1] = 
addr
 & 0xff;

111 
tx_buf
[2] = 0;

113 
	`mem£t
(
mesg
, 0, (mesg));

114 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

115 
mesg
[0].
Àn
 = 3;

116 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

117 
mesg
[0].
cs_ch™ge
 = 1;

119 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

120 i‡(
ªt
 < 0) {

121 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

125  
rx_buf
[2];

126 
	}
}

128 
	$dñay_ms
(
ms
) {

129 
	`u¶ìp
(
ms
*1000);

130 
	}
}

132 
	$£ns‹_¥og
(* 
rom
)

134 
i
 = 0;

136 
lookup
 = 
rom
[
i
++];

137 
addr
 = (
lookup
 >> 16) & 0xFFFF;

138 
d©a
 = 
lookup
 & 0xFFFF;

139 i‡(
addr
 == 0xFFFE) {

140 
	`dñay_ms
(
d©a
);

141 } i‡(
addr
 == 0xFFFF) {

144 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

147 
	}
}

149 
£ns‹_wdr_qxga_30_öô
();

150 
£ns‹_löór_qxga_30_öô
();

151 
£ns‹_löór_1080p60_öô
();

152 
£ns‹_löór_qxga_60_öô
();

155 
	$£ns‹_öô
()

157 
bSís‹Inô
 = 
HI_TRUE
;

159 
	`£ns‹_•i_öô
();

161 
gu8Sís‹ImageMode
)

164 
	`£ns‹_löór_1080p60_öô
();

168 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

178 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

180 
	`£ns‹_wdr_qxga_30_öô
();

184 
	`£ns‹_löór_qxga_30_öô
();

188 if(
WDR_MODE_2To1_LINE
 =
gíSís‹Mode
)

194 
	`£ns‹_löór_qxga_60_öô
();

198 
	`¥ötf
("Not supportÅhis mode\n");

199 
bSís‹Inô
 = 
HI_FALSE
;

203 
	}
}

205 
	$£ns‹_exô
()

207 
	`£ns‹_•i_exô
();

210 
	}
}

214 
	$£ns‹_löór_qxga_60_öô
()

216 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x01);

217 
	`dñay_ms
(200);

218 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x00);

219 
	`dñay_ms
(200);

221 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x01);

222 
	`dñay_ms
(200);

224 
	`£ns‹_wrôe_ªgi°î
(0x202, 0x00);

226 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x00);

228 
	`£ns‹_wrôe_ªgi°î
(0x20c, 0x00);

230 
	`£ns‹_wrôe_ªgi°î
(0x212, 0x0e);

231 
	`£ns‹_wrôe_ªgi°î
(0x213, 0x01);

233 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x08);

234 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x07);

236 
	`£ns‹_wrôe_ªgi°î
(0x21b, 0x3c);

237 
	`£ns‹_wrôe_ªgi°î
(0x21c, 0x02);

238 
	`£ns‹_wrôe_ªgi°î
(0x21e, 0x08);

239 
	`£ns‹_wrôe_ªgi°î
(0x221, 0xf0);

240 
	`£ns‹_wrôe_ªgi°î
(0x224, 0x00);

241 
	`£ns‹_wrôe_ªgi°î
(0x22e, 0xda);

242 
	`£ns‹_wrôe_ªgi°î
(0x231, 0x1c);

243 
	`£ns‹_wrôe_ªgi°î
(0x243, 0x00);

244 
	`£ns‹_wrôe_ªgi°î
(0x244, 0xb5);

245 
	`£ns‹_wrôe_ªgi°î
(0x246, 0x44);

246 
	`£ns‹_wrôe_ªgi°î
(0x249, 0x0a);

248 
	`£ns‹_wrôe_ªgi°î
(0x254, 0x61);

250 
	`£ns‹_wrôe_ªgi°î
(0x261, 0x81);

251 
	`£ns‹_wrôe_ªgi°î
(0x262, 0x00);

252 
	`£ns‹_wrôe_ªgi°î
(0x29d, 0x82);

253 
	`£ns‹_wrôe_ªgi°î
(0x29f, 0x01);

254 
	`£ns‹_wrôe_ªgi°î
(0x2b3, 0x91);

255 
	`£ns‹_wrôe_ªgi°î
(0x2c8, 0xbc);

256 
	`£ns‹_wrôe_ªgi°î
(0x2c9, 0x00);

257 
	`£ns‹_wrôe_ªgi°î
(0x2ca, 0xbc);

259 
	`£ns‹_wrôe_ªgi°î
(0x2cb, 0x00);

261 
	`£ns‹_wrôe_ªgi°î
(0x2f0, 0x0e);

262 
	`£ns‹_wrôe_ªgi°î
(0x2f1, 0x01);

263 
	`£ns‹_wrôe_ªgi°î
(0x2f4, 0x0e);

264 
	`£ns‹_wrôe_ªgi°î
(0x2f5, 0x01);

265 
	`£ns‹_wrôe_ªgi°î
(0x2f8, 0x0e);

266 
	`£ns‹_wrôe_ªgi°î
(0x2f9, 0x01);

269 
	`£ns‹_wrôe_ªgi°î
(0x303, 0x07);

270 
	`£ns‹_wrôe_ªgi°î
(0x304, 0x07);

271 
	`£ns‹_wrôe_ªgi°î
(0x306, 0x07);

272 
	`£ns‹_wrôe_ªgi°î
(0x307, 0x00);

273 
	`£ns‹_wrôe_ªgi°î
(0x308, 0x00);

274 
	`£ns‹_wrôe_ªgi°î
(0x309, 0x00);

275 
	`£ns‹_wrôe_ªgi°î
(0x30a, 0x00);

276 
	`£ns‹_wrôe_ªgi°î
(0x30b, 0x00);

277 
	`£ns‹_wrôe_ªgi°î
(0x310, 0xf2);

278 
	`£ns‹_wrôe_ªgi°î
(0x311, 0x03);

279 
	`£ns‹_wrôe_ªgi°î
(0x312, 0xeb);

280 
	`£ns‹_wrôe_ªgi°î
(0x313, 0x07);

281 
	`£ns‹_wrôe_ªgi°î
(0x314, 0xed);

282 
	`£ns‹_wrôe_ªgi°î
(0x315, 0x07);

283 
	`£ns‹_wrôe_ªgi°î
(0x326, 0x91);

284 
	`£ns‹_wrôe_ªgi°î
(0x333, 0x12);

285 
	`£ns‹_wrôe_ªgi°î
(0x334, 0x10);

286 
	`£ns‹_wrôe_ªgi°î
(0x335, 0x12);

287 
	`£ns‹_wrôe_ªgi°î
(0x336, 0x10);

288 
	`£ns‹_wrôe_ªgi°î
(0x33a, 0x0c);

289 
	`£ns‹_wrôe_ªgi°î
(0x33b, 0x0c);

290 
	`£ns‹_wrôe_ªgi°î
(0x33c, 0x0c);

291 
	`£ns‹_wrôe_ªgi°î
(0x33d, 0x0c);

292 
	`£ns‹_wrôe_ªgi°î
(0x340, 0x00);

293 
	`£ns‹_wrôe_ªgi°î
(0x341, 0x00);

294 
	`£ns‹_wrôe_ªgi°î
(0x344, 0x1e);

295 
	`£ns‹_wrôe_ªgi°î
(0x349, 0x55);

296 
	`£ns‹_wrôe_ªgi°î
(0x34b, 0x99);

297 
	`£ns‹_wrôe_ªgi°î
(0x34c, 0x99);

298 
	`£ns‹_wrôe_ªgi°î
(0x354, 0xe7);

299 
	`£ns‹_wrôe_ªgi°î
(0x35a, 0x04);

300 
	`£ns‹_wrôe_ªgi°î
(0x36c, 0x20);

301 
	`£ns‹_wrôe_ªgi°î
(0x36d, 0x09);

302 
	`£ns‹_wrôe_ªgi°î
(0x370, 0x40);

303 
	`£ns‹_wrôe_ªgi°î
(0x371, 0x14);

304 
	`£ns‹_wrôe_ªgi°î
(0x379, 0x94);

305 
	`£ns‹_wrôe_ªgi°î
(0x37a, 0x06);

307 
	`£ns‹_wrôe_ªgi°î
(0x3f6, 0x00);

311 
	`£ns‹_wrôe_ªgi°î
(0x401, 0x3c);

312 
	`£ns‹_wrôe_ªgi°î
(0x402, 0x01);

313 
	`£ns‹_wrôe_ªgi°î
(0x403, 0x0e);

314 
	`£ns‹_wrôe_ªgi°î
(0x413, 0x05);

315 
	`£ns‹_wrôe_ªgi°î
(0x41f, 0x05);

316 
	`£ns‹_wrôe_ªgi°î
(0x45f, 0x03);

317 
	`£ns‹_wrôe_ªgi°î
(0x469, 0x03);

318 
	`£ns‹_wrôe_ªgi°î
(0x4b6, 0x03);

319 
	`£ns‹_wrôe_ªgi°î
(0x4ba, 0x01);

320 
	`£ns‹_wrôe_ªgi°î
(0x4c4, 0x01);

321 
	`£ns‹_wrôe_ªgi°î
(0x4cb, 0x01);

322 
	`£ns‹_wrôe_ªgi°î
(0x4d9, 0x80);

323 
	`£ns‹_wrôe_ªgi°î
(0x4dc, 0xb0);

324 
	`£ns‹_wrôe_ªgi°î
(0x4dd, 0x13);

326 
	`£ns‹_wrôe_ªgi°î
(0x52a, 0xff);

327 
	`£ns‹_wrôe_ªgi°î
(0x52b, 0xff);

328 
	`£ns‹_wrôe_ªgi°î
(0x52c, 0xff);

329 
	`£ns‹_wrôe_ªgi°î
(0x52d, 0xff);

330 
	`£ns‹_wrôe_ªgi°î
(0x52e, 0xff);

331 
	`£ns‹_wrôe_ªgi°î
(0x52f, 0xff);

332 
	`£ns‹_wrôe_ªgi°î
(0x535, 0x50);

333 
	`£ns‹_wrôe_ªgi°î
(0x536, 0x80);

334 
	`£ns‹_wrôe_ªgi°î
(0x537, 0x1b);

335 
	`£ns‹_wrôe_ªgi°î
(0x53c, 0x01);

336 
	`£ns‹_wrôe_ªgi°î
(0x53d, 0x03);

339 
	`dñay_ms
(200);

340 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x00);

342 
	`¥ötf
("-------Sony IMX123 Sensor QXGA 60fps Linear Initial OK!-------\n");

343 
	}
}

350 
	$£ns‹_löór_qxga_30_öô
()

352 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x01);

353 
	`dñay_ms
(200);

354 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x00);

355 
	`dñay_ms
(200);

357 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x01);

358 
	`dñay_ms
(200);

360 
	`£ns‹_wrôe_ªgi°î
(0x202,0x00);

361 
	`£ns‹_wrôe_ªgi°î
(0x212,0x0e);

362 
	`£ns‹_wrôe_ªgi°î
(0x213,0x01);

363 
	`£ns‹_wrôe_ªgi°î
(0x218,0x72);

364 
	`£ns‹_wrôe_ªgi°î
(0x21b,0xdc);

365 
	`£ns‹_wrôe_ªgi°î
(0x21c,0x05);

366 
	`£ns‹_wrôe_ªgi°î
(0x21e,0x08);

367 
	`£ns‹_wrôe_ªgi°î
(0x221,0x08);

368 
	`£ns‹_wrôe_ªgi°î
(0x224,0x08);

369 
	`£ns‹_wrôe_ªgi°î
(0x227,0x08);

370 
	`£ns‹_wrôe_ªgi°î
(0x244,0xb5);

371 
	`£ns‹_wrôe_ªgi°î
(0x249,0x0a);

372 
	`£ns‹_wrôe_ªgi°î
(0x261,0xa1);

373 
	`£ns‹_wrôe_ªgi°î
(0x262,0x00);

374 
	`£ns‹_wrôe_ªgi°î
(0x29d,0x82);

375 
	`£ns‹_wrôe_ªgi°î
(0x29f,0x01);

376 
	`£ns‹_wrôe_ªgi°î
(0x2b3,0x91);

377 
	`£ns‹_wrôe_ªgi°î
(0x2f0,0x0e);

378 
	`£ns‹_wrôe_ªgi°î
(0x2f1,0x01);

379 
	`£ns‹_wrôe_ªgi°î
(0x2f4,0x0e);

380 
	`£ns‹_wrôe_ªgi°î
(0x2f5,0x01);

381 
	`£ns‹_wrôe_ªgi°î
(0x2f8,0x0e);

382 
	`£ns‹_wrôe_ªgi°î
(0x2f9,0x01);

385 
	`£ns‹_wrôe_ªgi°î
(0x303,0x3f);

386 
	`£ns‹_wrôe_ªgi°î
(0x304,0x06);

387 
	`£ns‹_wrôe_ªgi°î
(0x306,0x07);

388 
	`£ns‹_wrôe_ªgi°î
(0x307,0x00);

389 
	`£ns‹_wrôe_ªgi°î
(0x308,0x00);

390 
	`£ns‹_wrôe_ªgi°î
(0x309,0x00);

391 
	`£ns‹_wrôe_ªgi°î
(0x30a,0x00);

392 
	`£ns‹_wrôe_ªgi°î
(0x30b,0x00);

393 
	`£ns‹_wrôe_ªgi°î
(0x310,0xf2);

394 
	`£ns‹_wrôe_ªgi°î
(0x311,0x03);

395 
	`£ns‹_wrôe_ªgi°î
(0x312,0xeb);

396 
	`£ns‹_wrôe_ªgi°î
(0x313,0x07);

397 
	`£ns‹_wrôe_ªgi°î
(0x314,0xed);

398 
	`£ns‹_wrôe_ªgi°î
(0x315,0x07);

399 
	`£ns‹_wrôe_ªgi°î
(0x326,0x91);

400 
	`£ns‹_wrôe_ªgi°î
(0x333,0x12);

401 
	`£ns‹_wrôe_ªgi°î
(0x334,0x10);

402 
	`£ns‹_wrôe_ªgi°î
(0x335,0x12);

403 
	`£ns‹_wrôe_ªgi°î
(0x336,0x10);

404 
	`£ns‹_wrôe_ªgi°î
(0x33a,0x0c);

405 
	`£ns‹_wrôe_ªgi°î
(0x33b,0x0c);

406 
	`£ns‹_wrôe_ªgi°î
(0x33c,0x0c);

407 
	`£ns‹_wrôe_ªgi°î
(0x33d,0x0c);

408 
	`£ns‹_wrôe_ªgi°î
(0x340,0x00);

409 
	`£ns‹_wrôe_ªgi°î
(0x341,0x00);

410 
	`£ns‹_wrôe_ªgi°î
(0x344,0x1e);

411 
	`£ns‹_wrôe_ªgi°î
(0x349,0x55);

412 
	`£ns‹_wrôe_ªgi°î
(0x34b,0x99);

413 
	`£ns‹_wrôe_ªgi°î
(0x34c,0x99);

414 
	`£ns‹_wrôe_ªgi°î
(0x354,0xe7);

415 
	`£ns‹_wrôe_ªgi°î
(0x35a,0x04);

416 
	`£ns‹_wrôe_ªgi°î
(0x36c,0x20);

417 
	`£ns‹_wrôe_ªgi°î
(0x36d,0x09);

418 
	`£ns‹_wrôe_ªgi°î
(0x371,0x20);

419 
	`£ns‹_wrôe_ªgi°î
(0x379,0x94);

420 
	`£ns‹_wrôe_ªgi°î
(0x37a,0x06);

421 
	`£ns‹_wrôe_ªgi°î
(0x3f6,0x11);

424 
	`£ns‹_wrôe_ªgi°î
(0x401,0x3c);

425 
	`£ns‹_wrôe_ªgi°î
(0x402,0x01);

426 
	`£ns‹_wrôe_ªgi°î
(0x403,0x0e);

427 
	`£ns‹_wrôe_ªgi°î
(0x413,0x05);

428 
	`£ns‹_wrôe_ªgi°î
(0x41f,0x05);

429 
	`£ns‹_wrôe_ªgi°î
(0x45f,0x03);

430 
	`£ns‹_wrôe_ªgi°î
(0x469,0x03);

431 
	`£ns‹_wrôe_ªgi°î
(0x4b6,0x03);

432 
	`£ns‹_wrôe_ªgi°î
(0x4ba,0x01);

433 
	`£ns‹_wrôe_ªgi°î
(0x4c4,0x01);

434 
	`£ns‹_wrôe_ªgi°î
(0x4cb,0x01);

435 
	`£ns‹_wrôe_ªgi°î
(0x4d9,0x80);

436 
	`£ns‹_wrôe_ªgi°î
(0x4dc,0xb0);

437 
	`£ns‹_wrôe_ªgi°î
(0x4dd,0x13);

440 
	`£ns‹_wrôe_ªgi°î
(0x52a,0xff);

441 
	`£ns‹_wrôe_ªgi°î
(0x52b,0xff);

442 
	`£ns‹_wrôe_ªgi°î
(0x52c,0xff);

443 
	`£ns‹_wrôe_ªgi°î
(0x52d,0xff);

444 
	`£ns‹_wrôe_ªgi°î
(0x52e,0xff);

445 
	`£ns‹_wrôe_ªgi°î
(0x52f,0xff);

446 
	`£ns‹_wrôe_ªgi°î
(0x535,0x50);

447 
	`£ns‹_wrôe_ªgi°î
(0x536,0x80);

448 
	`£ns‹_wrôe_ªgi°î
(0x537,0x1b);

449 
	`£ns‹_wrôe_ªgi°î
(0x53c,0x01);

450 
	`£ns‹_wrôe_ªgi°î
(0x53d,0x03);

453 
	`dñay_ms
(200);

454 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x00);

456 
	`¥ötf
("-------Sony IMX123 Sensor QXGA 30 Linear Initial OK!-------\n");

457 
	}
}

464 
	$£ns‹_wdr_qxga_30_öô
()

466 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x01);

467 
	`dñay_ms
(200);

468 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x00);

469 
	`dñay_ms
(200);

471 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x01);

472 
	`dñay_ms
(200);

474 
	`£ns‹_wrôe_ªgi°î
(0x202, 0x00);

476 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x00);

477 
	`£ns‹_wrôe_ªgi°î
(0x20c, 0x14);

478 
	`£ns‹_wrôe_ªgi°î
(0x212, 0x0e);

479 
	`£ns‹_wrôe_ªgi°î
(0x213, 0x01);

481 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x08);

482 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x07);

484 
	`£ns‹_wrôe_ªgi°î
(0x21b, 0x3c);

485 
	`£ns‹_wrôe_ªgi°î
(0x21c, 0x02);

486 
	`£ns‹_wrôe_ªgi°î
(0x21e, 0x08);

487 
	`£ns‹_wrôe_ªgi°î
(0x221, 0xf0);

488 
	`£ns‹_wrôe_ªgi°î
(0x224, 0x00);

489 
	`£ns‹_wrôe_ªgi°î
(0x22e, 0xda);

490 
	`£ns‹_wrôe_ªgi°î
(0x231, 0x1c);

491 
	`£ns‹_wrôe_ªgi°î
(0x243, 0x00);

492 
	`£ns‹_wrôe_ªgi°î
(0x244, 0xb5);

493 
	`£ns‹_wrôe_ªgi°î
(0x246, 0x44);

494 
	`£ns‹_wrôe_ªgi°î
(0x249, 0x0a);

495 
	`£ns‹_wrôe_ªgi°î
(0x254, 0x6d);

496 
	`£ns‹_wrôe_ªgi°î
(0x261, 0x81);

497 
	`£ns‹_wrôe_ªgi°î
(0x262, 0x00);

498 
	`£ns‹_wrôe_ªgi°î
(0x29d, 0x82);

499 
	`£ns‹_wrôe_ªgi°î
(0x29f, 0x01);

500 
	`£ns‹_wrôe_ªgi°î
(0x2b3, 0x91);

501 
	`£ns‹_wrôe_ªgi°î
(0x2c8, 0xbc);

502 
	`£ns‹_wrôe_ªgi°î
(0x2c9, 0x00);

503 
	`£ns‹_wrôe_ªgi°î
(0x2ca, 0xbc);

504 
	`£ns‹_wrôe_ªgi°î
(0x2cb, 0x20);

505 
	`£ns‹_wrôe_ªgi°î
(0x2f0, 0x0e);

506 
	`£ns‹_wrôe_ªgi°î
(0x2f1, 0x01);

507 
	`£ns‹_wrôe_ªgi°î
(0x2f4, 0x0e);

508 
	`£ns‹_wrôe_ªgi°î
(0x2f5, 0x01);

509 
	`£ns‹_wrôe_ªgi°î
(0x2f8, 0x0e);

510 
	`£ns‹_wrôe_ªgi°î
(0x2f9, 0x01);

513 
	`£ns‹_wrôe_ªgi°î
(0x303, 0x07);

514 
	`£ns‹_wrôe_ªgi°î
(0x304, 0x07);

515 
	`£ns‹_wrôe_ªgi°î
(0x306, 0x07);

516 
	`£ns‹_wrôe_ªgi°î
(0x307, 0x00);

517 
	`£ns‹_wrôe_ªgi°î
(0x308, 0x00);

518 
	`£ns‹_wrôe_ªgi°î
(0x309, 0x00);

519 
	`£ns‹_wrôe_ªgi°î
(0x30a, 0x00);

520 
	`£ns‹_wrôe_ªgi°î
(0x30b, 0x00);

521 
	`£ns‹_wrôe_ªgi°î
(0x310, 0xf2);

522 
	`£ns‹_wrôe_ªgi°î
(0x311, 0x03);

523 
	`£ns‹_wrôe_ªgi°î
(0x312, 0xeb);

524 
	`£ns‹_wrôe_ªgi°î
(0x313, 0x07);

525 
	`£ns‹_wrôe_ªgi°î
(0x314, 0xed);

526 
	`£ns‹_wrôe_ªgi°î
(0x315, 0x07);

527 
	`£ns‹_wrôe_ªgi°î
(0x326, 0x91);

528 
	`£ns‹_wrôe_ªgi°î
(0x333, 0x12);

529 
	`£ns‹_wrôe_ªgi°î
(0x334, 0x10);

530 
	`£ns‹_wrôe_ªgi°î
(0x335, 0x12);

531 
	`£ns‹_wrôe_ªgi°î
(0x336, 0x10);

532 
	`£ns‹_wrôe_ªgi°î
(0x33a, 0x0c);

533 
	`£ns‹_wrôe_ªgi°î
(0x33b, 0x0c);

534 
	`£ns‹_wrôe_ªgi°î
(0x33c, 0x0c);

535 
	`£ns‹_wrôe_ªgi°î
(0x33d, 0x0c);

536 
	`£ns‹_wrôe_ªgi°î
(0x340, 0x00);

537 
	`£ns‹_wrôe_ªgi°î
(0x341, 0x00);

538 
	`£ns‹_wrôe_ªgi°î
(0x344, 0x1e);

539 
	`£ns‹_wrôe_ªgi°î
(0x349, 0x55);

540 
	`£ns‹_wrôe_ªgi°î
(0x34b, 0x99);

541 
	`£ns‹_wrôe_ªgi°î
(0x34c, 0x99);

542 
	`£ns‹_wrôe_ªgi°î
(0x354, 0xe7);

543 
	`£ns‹_wrôe_ªgi°î
(0x35a, 0x04);

544 
	`£ns‹_wrôe_ªgi°î
(0x36c, 0x20);

545 
	`£ns‹_wrôe_ªgi°î
(0x36d, 0x09);

546 
	`£ns‹_wrôe_ªgi°î
(0x370, 0x40);

547 
	`£ns‹_wrôe_ªgi°î
(0x371, 0x14);

548 
	`£ns‹_wrôe_ªgi°î
(0x379, 0x94);

549 
	`£ns‹_wrôe_ªgi°î
(0x37a, 0x06);

551 
	`£ns‹_wrôe_ªgi°î
(0x3f6, 0x00);

555 
	`£ns‹_wrôe_ªgi°î
(0x401, 0x3c);

556 
	`£ns‹_wrôe_ªgi°î
(0x402, 0x01);

557 
	`£ns‹_wrôe_ªgi°î
(0x403, 0x0e);

558 
	`£ns‹_wrôe_ªgi°î
(0x413, 0x05);

559 
	`£ns‹_wrôe_ªgi°î
(0x41f, 0x05);

560 
	`£ns‹_wrôe_ªgi°î
(0x45f, 0x03);

561 
	`£ns‹_wrôe_ªgi°î
(0x469, 0x03);

562 
	`£ns‹_wrôe_ªgi°î
(0x4b6, 0x03);

563 
	`£ns‹_wrôe_ªgi°î
(0x4ba, 0x01);

564 
	`£ns‹_wrôe_ªgi°î
(0x4c4, 0x01);

565 
	`£ns‹_wrôe_ªgi°î
(0x4cb, 0x01);

566 
	`£ns‹_wrôe_ªgi°î
(0x4d9, 0x80);

567 
	`£ns‹_wrôe_ªgi°î
(0x4dc, 0xb0);

568 
	`£ns‹_wrôe_ªgi°î
(0x4dd, 0x13);

570 
	`£ns‹_wrôe_ªgi°î
(0x52a, 0xff);

571 
	`£ns‹_wrôe_ªgi°î
(0x52b, 0xff);

572 
	`£ns‹_wrôe_ªgi°î
(0x52c, 0xff);

573 
	`£ns‹_wrôe_ªgi°î
(0x52d, 0xff);

574 
	`£ns‹_wrôe_ªgi°î
(0x52e, 0xff);

575 
	`£ns‹_wrôe_ªgi°î
(0x52f, 0xff);

576 
	`£ns‹_wrôe_ªgi°î
(0x535, 0x50);

577 
	`£ns‹_wrôe_ªgi°î
(0x536, 0x80);

578 
	`£ns‹_wrôe_ªgi°î
(0x537, 0x1b);

579 
	`£ns‹_wrôe_ªgi°î
(0x53c, 0x01);

580 
	`£ns‹_wrôe_ªgi°î
(0x53d, 0x03);

582 
	`dñay_ms
(200);

583 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x00);

585 
	`¥ötf
("-------Sony IMX123 Sensor QXGA 30 WDR Initial OK!-------\n");

587 
	}
}

593 
	$£ns‹_löór_1080p60_öô
()

595 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x01);

596 
	`dñay_ms
(200);

597 
	`£ns‹_wrôe_ªgi°î
(0x203, 0x00);

598 
	`dñay_ms
(200);

600 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x01);

601 
	`dñay_ms
(200);

603 
	`£ns‹_wrôe_ªgi°î
(0x202, 0x00);

604 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x10);

605 
	`£ns‹_wrôe_ªgi°î
(0x212, 0x0e);

606 
	`£ns‹_wrôe_ªgi°î
(0x213, 0x01);

607 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x65);

608 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x04);

609 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x4c);

610 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x04);

611 
	`£ns‹_wrôe_ªgi°î
(0x21E, 0x08);

612 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x08);

613 
	`£ns‹_wrôe_ªgi°î
(0x224, 0x08);

614 
	`£ns‹_wrôe_ªgi°î
(0x227, 0x08);

615 
	`£ns‹_wrôe_ªgi°î
(0x244, 0xb5);

616 
	`£ns‹_wrôe_ªgi°î
(0x249, 0x0a);

617 
	`£ns‹_wrôe_ªgi°î
(0x261, 0x81);

618 
	`£ns‹_wrôe_ªgi°î
(0x262, 0x00);

619 
	`£ns‹_wrôe_ªgi°î
(0x29d, 0x82);

620 
	`£ns‹_wrôe_ªgi°î
(0x29f, 0x01);

621 
	`£ns‹_wrôe_ªgi°î
(0x2b3, 0x91);

622 
	`£ns‹_wrôe_ªgi°î
(0x2f0, 0x0e);

623 
	`£ns‹_wrôe_ªgi°î
(0x2f1, 0x01);

624 
	`£ns‹_wrôe_ªgi°î
(0x2f4, 0x0e);

625 
	`£ns‹_wrôe_ªgi°î
(0x2f5, 0x01);

626 
	`£ns‹_wrôe_ªgi°î
(0x2f8, 0x0e);

627 
	`£ns‹_wrôe_ªgi°î
(0x2f9, 0x01);

630 
	`£ns‹_wrôe_ªgi°î
(0x303, 0x64);

631 
	`£ns‹_wrôe_ªgi°î
(0x304, 0x04);

632 
	`£ns‹_wrôe_ªgi°î
(0x306, 0x07);

633 
	`£ns‹_wrôe_ªgi°î
(0x307, 0x00);

634 
	`£ns‹_wrôe_ªgi°î
(0x308, 0x00);

635 
	`£ns‹_wrôe_ªgi°î
(0x309, 0x00);

636 
	`£ns‹_wrôe_ªgi°î
(0x30a, 0x00);

637 
	`£ns‹_wrôe_ªgi°î
(0x30b, 0x00);

638 
	`£ns‹_wrôe_ªgi°î
(0x310, 0xf2);

639 
	`£ns‹_wrôe_ªgi°î
(0x311, 0x03);

640 
	`£ns‹_wrôe_ªgi°î
(0x312, 0xeb);

641 
	`£ns‹_wrôe_ªgi°î
(0x313, 0x07);

642 
	`£ns‹_wrôe_ªgi°î
(0x314, 0xed);

643 
	`£ns‹_wrôe_ªgi°î
(0x315, 0x07);

644 
	`£ns‹_wrôe_ªgi°î
(0x326, 0x91);

645 
	`£ns‹_wrôe_ªgi°î
(0x330, 0x4d);

646 
	`£ns‹_wrôe_ªgi°î
(0x333, 0x12);

647 
	`£ns‹_wrôe_ªgi°î
(0x334, 0x10);

648 
	`£ns‹_wrôe_ªgi°î
(0x335, 0x12);

649 
	`£ns‹_wrôe_ªgi°î
(0x336, 0x10);

650 
	`£ns‹_wrôe_ªgi°î
(0x33a, 0x0c);

651 
	`£ns‹_wrôe_ªgi°î
(0x33b, 0x0c);

652 
	`£ns‹_wrôe_ªgi°î
(0x33c, 0x0c);

653 
	`£ns‹_wrôe_ªgi°î
(0x33d, 0x0c);

654 
	`£ns‹_wrôe_ªgi°î
(0x340, 0x00);

655 
	`£ns‹_wrôe_ªgi°î
(0x341, 0x00);

656 
	`£ns‹_wrôe_ªgi°î
(0x344, 0x1e);

657 
	`£ns‹_wrôe_ªgi°î
(0x349, 0x55);

658 
	`£ns‹_wrôe_ªgi°î
(0x34b, 0x99);

659 
	`£ns‹_wrôe_ªgi°î
(0x34c, 0x99);

660 
	`£ns‹_wrôe_ªgi°î
(0x354, 0xe7);

661 
	`£ns‹_wrôe_ªgi°î
(0x35a, 0x04);

662 
	`£ns‹_wrôe_ªgi°î
(0x36c, 0x20);

663 
	`£ns‹_wrôe_ªgi°î
(0x36d, 0x09);

664 
	`£ns‹_wrôe_ªgi°î
(0x379, 0x94);

665 
	`£ns‹_wrôe_ªgi°î
(0x37a, 0x06);

666 
	`£ns‹_wrôe_ªgi°î
(0x3eb, 0x44);

667 
	`£ns‹_wrôe_ªgi°î
(0x3f6, 0x11);

670 
	`£ns‹_wrôe_ªgi°î
(0x401, 0x3c);

671 
	`£ns‹_wrôe_ªgi°î
(0x402, 0x01);

672 
	`£ns‹_wrôe_ªgi°î
(0x403, 0x0e);

673 
	`£ns‹_wrôe_ªgi°î
(0x413, 0x05);

674 
	`£ns‹_wrôe_ªgi°î
(0x41f, 0x05);

675 
	`£ns‹_wrôe_ªgi°î
(0x45f, 0x03);

676 
	`£ns‹_wrôe_ªgi°î
(0x469, 0x03);

677 
	`£ns‹_wrôe_ªgi°î
(0x4b6, 0x03);

678 
	`£ns‹_wrôe_ªgi°î
(0x4ba, 0x01);

679 
	`£ns‹_wrôe_ªgi°î
(0x4c4, 0x01);

680 
	`£ns‹_wrôe_ªgi°î
(0x4cb, 0x01);

681 
	`£ns‹_wrôe_ªgi°î
(0x4d9, 0x80);

682 
	`£ns‹_wrôe_ªgi°î
(0x4dc, 0xb0);

683 
	`£ns‹_wrôe_ªgi°î
(0x4dd, 0x13);

685 
	`£ns‹_wrôe_ªgi°î
(0x52a, 0xff);

686 
	`£ns‹_wrôe_ªgi°î
(0x52b, 0xff);

687 
	`£ns‹_wrôe_ªgi°î
(0x52c, 0xff);

688 
	`£ns‹_wrôe_ªgi°î
(0x52d, 0xff);

689 
	`£ns‹_wrôe_ªgi°î
(0x52e, 0xff);

690 
	`£ns‹_wrôe_ªgi°î
(0x52f, 0xff);

691 
	`£ns‹_wrôe_ªgi°î
(0x535, 0x50);

692 
	`£ns‹_wrôe_ªgi°î
(0x536, 0x80);

693 
	`£ns‹_wrôe_ªgi°î
(0x537, 0x1b);

694 
	`£ns‹_wrôe_ªgi°î
(0x53c, 0x01);

695 
	`£ns‹_wrôe_ªgi°î
(0x53d, 0x03);

697 
	`dñay_ms
(200);

698 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x00);

701 
	`¥ötf
("-------Sony IMX123 Sensor 1080p60 Linear Initial OK!-------\n");

702 
	}
}

	@component/isp/sensor/sony_imx136/imx136_cmos.c

1 #i‡!
deföed
(
__IMX136_CMOS_H_
)

2 
	#__IMX136_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~"hi_comm_¢s.h
"

7 
	~"hi_comm_video.h
"

8 
	~"hi_¢s_˘æ.h
"

9 
	~"mpi_i•.h
"

10 
	~"mpi_´.h
"

11 
	~"mpi_awb.h
"

12 
	~"mpi_af.h
"

14 #ifde‡
__˝lu•lus


15 #i‡
__˝lu•lus


20 
	#EXPOSURE_ADDR
 (0x220)

21 
	#LONG_EXPOSURE_ADDR
 (0x223)

	)

22 
	#PGC_ADDR
 (0x214)

	)

23 
	#VMAX_ADDR
 (0x218)

	)

25 
	#IMX136_ID
 136

	)

31 
HI_U32
 
gu32FuŒLöesStd
 = 1125;

32 
HI_U32
 
gu32FuŒLöes
 = 1125;

33 
WDR_MODE_E
 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

35 
AWB_CCM_S
 
g_°AwbCcm
 =

56 
AWB_AGC_TABLE_S
 
g_°AwbAgcTabÀ
 =

65 
ISP_CMOS_AGC_TABLE_S
 
g_°I•AgcTabÀ
 =

92 
ISP_CMOS_NOISE_TABLE_S
 
g_°I•Noi£TabÀ
 =

122 
ISP_CMOS_DEMOSAIC_S
 
g_°I•Demoßic
 =

167 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

169 i‡(
HI_NULL
 =
p°Def
)

171 
¥ötf
("nullÖointer when get isp default value!\n");

175 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

177 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

178 
p°Def
->
°Drc
.
u32BœckLevñ
 = 0x00;

179 
p°Def
->
°Drc
.
u32WhôeLevñ
 = 0x4FF;

180 
p°Def
->
°Drc
.
u32Sl›eMax
 = 0x30;

181 
p°Def
->
°Drc
.
u32Sl›eMö
 = 0x00;

182 
p°Def
->
°Drc
.
u32V¨ün˚S∑˚
 = 0x04;

183 
p°Def
->
°Drc
.
u32V¨ün˚I¡ísôy
 = 0x01;

184 
p°Def
->
°Drc
.
u32Asymmëry
 = 0x14;

185 
p°Def
->
°Drc
.
u32BrightEnh™˚
 = 0xC8;

187 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

188 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

189 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

191 
p°Def
->
°Sís‹MaxResﬁuti⁄
.
u32MaxWidth
 = 1920;

192 
p°Def
->
°Sís‹MaxResﬁuti⁄
.
u32MaxHeight
 = 1080;

197 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

199 
HI_S32
 
i
;

201 i‡(
HI_NULL
 =
p°BœckLevñ
)

203 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

208 
p°BœckLevñ
->
bUpd©e
 = 
HI_FALSE
;

210 
i
=0; i<4; i++)

212 
p°BœckLevñ
->
au16BœckLevñ
[
i
] = 0xF0;

218 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

220 i‡(
bE«bÀ
)

224 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 0x5E);

225 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
 + 1, 0x1A);

228 
£ns‹_wrôe_ªgi°î
(
PGC_ADDR
, 0x00);

229 
£ns‹_wrôe_ªgi°î
(
PGC_ADDR
 + 1, 0x00);

233 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 0x65);

234 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
 + 1, 0x04);

240 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

242 
u8Mode
)

245 
WDR_MODE_NONE
:

246 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

250 
WDR_MODE_BUILT_IN
:

251 
gíSís‹Mode
 = 
WDR_MODE_BUILT_IN
;

256 
¥ötf
("NOT supportÅhis mode!\n");

264 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

266 i‡(
HI_NULL
 =
p°AeSnsD·
)

268 
¥ötf
("nullÖointer when getáe default value!\n");

272 
gu32FuŒLöesStd
 = 1125;

274 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

275 
p°AeSnsD·
->
au8Hi°Thªsh
[1] = 0x28;

276 
p°AeSnsD·
->
au8Hi°Thªsh
[2] = 0x60;

277 
p°AeSnsD·
->
au8Hi°Thªsh
[3] = 0x80;

279 
p°AeSnsD·
->
u8AeCom≥nßti⁄
 = 0x40;

281 
p°AeSnsD·
->
u32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

282 
p°AeSnsD·
->
u32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

283 
p°AeSnsD·
->
u32FlickîFªq
 = 0;

285 
p°AeSnsD·
->
°I¡TimeAccu
.
íAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

286 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Accuøcy
 = 1;

287 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Off£t
 = 0;

289 
p°AeSnsD·
->
u32MaxI¡Time
 = 1123;

290 
p°AeSnsD·
->
u32MöI¡Time
 = 2;

291 
p°AeSnsD·
->
u32MaxI¡TimeT¨gë
 = 65535;

292 
p°AeSnsD·
->
u32MöI¡TimeT¨gë
 = 2;

294 
p°AeSnsD·
->
°AgaöAccu
.
íAccuTy≥
 = 
AE_ACCURACY_DB
;

295 
p°AeSnsD·
->
°AgaöAccu
.
f32Accuøcy
 = 0.1;

296 
p°AeSnsD·
->
u32MaxAgaö
 = 240;

297 
p°AeSnsD·
->
u32MöAgaö
 = 0;

298 
p°AeSnsD·
->
u32MaxAgaöT¨gë
 = 240;

299 
p°AeSnsD·
->
u32MöAgaöT¨gë
 = 0;

301 
p°AeSnsD·
->
°DgaöAccu
.
íAccuTy≥
 = 
AE_ACCURACY_DB
;

302 
p°AeSnsD·
->
°DgaöAccu
.
f32Accuøcy
 = 0.1;

303 
p°AeSnsD·
->
u32MaxDgaö
 = 180;

304 
p°AeSnsD·
->
u32MöDgaö
 = 0;

305 
p°AeSnsD·
->
u32MaxDgaöT¨gë
 = 180;

306 
p°AeSnsD·
->
u32MöDgaöT¨gë
 = 0;

308 
p°AeSnsD·
->
u32ISPDgaöShi·
 = 4;

309 
p°AeSnsD·
->
u32MaxISPDgaöT¨gë
 = 1 <<Ö°AeSnsD·->
u32ISPDgaöShi·
;

310 
p°AeSnsD·
->
u32MöISPDgaöT¨gë
 = 1 <<Ö°AeSnsD·->
u32ISPDgaöShi·
;

316 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

318 i‡(30 =
f32Fps
)

321 
gu32FuŒLöesStd
 = 1125;

322 
p°AeSnsD·
->
u32MaxI¡Time
 = 1123;

323 
p°AeSnsD·
->
u32LöesPî500ms
 = 1125 * 30 / 2;

324 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 0x65);

325 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
+1, 0x04);

327 i‡(25 =
f32Fps
)

330 
gu32FuŒLöesStd
 = 1350;

331 
p°AeSnsD·
->
u32MaxI¡Time
 = 1348;

332 
p°AeSnsD·
->
u32LöesPî500ms
 = 1350 * 25 / 2;

333 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 0x46);

334 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
+1, 0x05);

341 
p°AeSnsD·
->
u32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

346 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

347 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

349 
gu32FuŒLöes
 = 
u32FuŒLöes
;

351 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, (
gu32FuŒLöes
 & 0x00ff));

352 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
+1, ((
gu32FuŒLöes
 & 0xff00) >> 8));

354 
p°AeSnsD·
->
u32MaxI¡Time
 = 
gu32FuŒLöes
 - 2;

360 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

362 
HI_U32
 
u32VÆue
 = 
gu32FuŒLöes
 - 
u32I¡Time
;

364 
£ns‹_wrôe_ªgi°î
(
EXPOSURE_ADDR
, 
u32VÆue
 & 0xFF);

365 
£ns‹_wrôe_ªgi°î
(
EXPOSURE_ADDR
 + 1, (
u32VÆue
 & 0xFF00) >> 8);

370 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

372 
HI_U32
 
u32Tmp
 = 
u32Agaö
 + 
u32Dgaö
;

374 
u32Tmp
 = u32Tmp > 0x1A4 ? 0x1A4 : u32Tmp;

376 
£ns‹_wrôe_ªgi°î
(
PGC_ADDR
, (
u32Tmp
 & 0xFF));

377 
£ns‹_wrôe_ªgi°î
(
PGC_ADDR
 + 1, (
u32Tmp
 & 0x100) >> 8);

382 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

384 i‡(
HI_NULL
 =
p°AwbSnsD·
)

386 
¥ötf
("nullÖointer when getáwb default value!\n");

390 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

392 
p°AwbSnsD·
->
u16WbRefTemp
 = 5000;

394 
p°AwbSnsD·
->
au16GaöOff£t
[0] = 0x1c5;

395 
p°AwbSnsD·
->
au16GaöOff£t
[1] = 0x100;

396 
p°AwbSnsD·
->
au16GaöOff£t
[2] = 0x100;

397 
p°AwbSnsD·
->
au16GaöOff£t
[3] = 0x1ec;

399 
p°AwbSnsD·
->
as32WbP¨a
[0] = 22;

400 
p°AwbSnsD·
->
as32WbP¨a
[1] = 141;

401 
p°AwbSnsD·
->
as32WbP¨a
[2] = -84;

402 
p°AwbSnsD·
->
as32WbP¨a
[3] = 186260;

403 
p°AwbSnsD·
->
as32WbP¨a
[4] = 128;

404 
p°AwbSnsD·
->
as32WbP¨a
[5] = -134565;

406 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

407 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

412 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

417 
HI_VOID
 
£ns‹_globÆ_öô
()

419 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

426 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

428 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

430 
p°Sís‹ExpFunc
->
p‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

431 
p°Sís‹ExpFunc
->
p‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

432 
p°Sís‹ExpFunc
->
p‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

433 
p°Sís‹ExpFunc
->
p‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

434 
p°Sís‹ExpFunc
->
p‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

435 
p°Sís‹ExpFunc
->
p‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

436 
p°Sís‹ExpFunc
->
p‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

441 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

443 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

445 
p°ExpFuncs
->
p‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

446 
p°ExpFuncs
->
p‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

447 
p°ExpFuncs
->
p‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

448 
p°ExpFuncs
->
p‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

449 
p°ExpFuncs
->
p‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

454 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

456 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

458 
p°ExpFuncs
->
p‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

463 
£ns‹_ªgi°î_ˇŒback
()

465 
ISP_DEV
 
I•Dev
 = 0;

466 
HI_S32
 
s32Rë
;

467 
ALG_LIB_S
 
°Lib
;

468 
ISP_SENSOR_REGISTER_S
 
°I•Regi°î
;

469 
AE_SENSOR_REGISTER_S
 
°AeRegi°î
;

470 
AWB_SENSOR_REGISTER_S
 
°AwbRegi°î
;

472 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

473 
s32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
IMX136_ID
, &
°I•Regi°î
);

474 i‡(
s32Rë
)

476 
¥ötf
("sensorÑegister callback function failed!\n");

477  
s32Rë
;

480 
°Lib
.
s32Id
 = 0;

481 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

482 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

483 
s32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX136_ID
, &
°AeRegi°î
);

484 i‡(
s32Rë
)

486 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

487  
s32Rë
;

490 
°Lib
.
s32Id
 = 0;

491 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

492 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

493 
s32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX136_ID
, &
°AwbRegi°î
);

494 i‡(
s32Rë
)

496 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

497  
s32Rë
;

504 #ifde‡
__˝lu•lus


505 #i‡
__˝lu•lus


	@component/isp/sensor/sony_imx136/imx136_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/io˘l.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

26 
	~"hi_•i.h
"

28 
	gg_fd
 = -1;

30 
	$£ns‹_•i_öô
()

32 
vÆue
;

33 
ªt
 = 0;

34 
fûe_«me
[] = "/dev/spidev0.0";

36 
g_fd
 = 
	`›í
(
fûe_«me
, 0);

37 i‡(
g_fd
 < 0)

39 
	`¥ötf
("O≥¿%†îr‹!\n",
fûe_«me
);

43 
vÆue
 = 
SPI_MODE_3
 | 
SPI_LSB_FIRST
;

44 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MODE
, &
vÆue
);

45 i‡(
ªt
 < 0)

47 
	`¥ötf
("io˘»SPI_IOC_WR_MODEÉº, vÆuê%dÑë = %d\n", 
vÆue
, 
ªt
);

48  
ªt
;

51 
vÆue
 = 8;

52 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_BITS_PER_WORD
, &
vÆue
);

53 i‡(
ªt
 < 0)

55 
	`¥ötf
("io˘»SPI_IOC_WR_BITS_PER_WORDÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

56  
ªt
;

59 
vÆue
 = 2000000;

60 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
vÆue
);

61 i‡(
ªt
 < 0)

63 
	`¥ötf
("io˘»SPI_IOC_WR_MAX_SPEED_HZÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

64  
ªt
;

68 
	}
}

70 
	$£ns‹_•i_exô
()

72 i‡(
g_fd
 >= 0)

74 
	`˛o£
(
g_fd
);

78 
	}
}

80 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

82 
ªt
;

83 
•i_ioc_å™s„r
 
mesg
[1];

84 
tx_buf
[8] = {0};

85 
rx_buf
[8] = {0};

87 
tx_buf
[0] = (
addr
 & 0xff00) >> 8;

88 
tx_buf
[0] &= (~0x80);

89 
tx_buf
[1] = 
addr
 & 0xff;

90 
tx_buf
[2] = 
d©a
;

94 
	`mem£t
(
mesg
, 0, (mesg));

95 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

96 
mesg
[0].
Àn
 = 3;

97 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

98 
mesg
[0].
cs_ch™ge
 = 1;

100 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

101 i‡(
ªt
 < 0) {

102 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

108 
	}
}

110 
	$£ns‹_ªad_ªgi°î
(
addr
)

112 
ªt
 = 0;

113 
•i_ioc_å™s„r
 
mesg
[1];

114 
tx_buf
[8] = {0};

115 
rx_buf
[8] = {0};

117 
tx_buf
[0] = (
addr
 & 0xff00) >> 8;

118 
tx_buf
[0] |= 0x80;

119 
tx_buf
[1] = 
addr
 & 0xff;

120 
tx_buf
[2] = 0;

122 
	`mem£t
(
mesg
, 0, (mesg));

123 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

124 
mesg
[0].
Àn
 = 3;

125 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

126 
mesg
[0].
cs_ch™ge
 = 1;

128 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

129 i‡(
ªt
 < 0) {

130 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

135  
rx_buf
[2];

136 
	}
}

138 
	$£ns‹_¥og
(* 
rom
)

140 
	}
}

142 
	$£tup_£ns‹
(
i•_mode
)

144 
	}
}

150 
	#HD1080p30Âs_12bôLVDS_4ch_Löór


	)

152 
	$£ns‹_öô
()

155 
	`£ns‹_•i_öô
();

157 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x01);

158 
	`u¶ìp
(200000);

160 
	`£ns‹_wrôe_ªgi°î
(0x205, 0x01);

161 
	`£ns‹_wrôe_ªgi°î
(0x206, 0x00);

162 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x40);

163 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x01);

164 
	`£ns‹_wrôe_ªgi°î
(0x20A, 0xF0);

165 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x65);

166 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x04);

167 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x30);

168 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x11);

169 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x08);

170 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x00);

172 
	`£ns‹_wrôe_ªgi°î
(0x238, 0x08);

173 
	`£ns‹_wrôe_ªgi°î
(0x239, 0x00);

174 
	`£ns‹_wrôe_ªgi°î
(0x23A, 0x38);

175 
	`£ns‹_wrôe_ªgi°î
(0x23B, 0x04);

176 
	`£ns‹_wrôe_ªgi°î
(0x23C, 0x08);

177 
	`£ns‹_wrôe_ªgi°î
(0x23D, 0x00);

178 
	`£ns‹_wrôe_ªgi°î
(0x23E, 0x7F);

179 
	`£ns‹_wrôe_ªgi°î
(0x23F, 0x07);

181 
	`£ns‹_wrôe_ªgi°î
(0x244, 0xE1);

182 
	`£ns‹_wrôe_ªgi°î
(0x25B, 0x00);

183 
	`£ns‹_wrôe_ªgi°î
(0x25C, 0x30);

184 
	`£ns‹_wrôe_ªgi°î
(0x25D, 0x04);

185 
	`£ns‹_wrôe_ªgi°î
(0x25E, 0x30);

186 
	`£ns‹_wrôe_ªgi°î
(0x25F, 0x04);

188 
	`£ns‹_wrôe_ªgi°î
(0x30F, 0x0E);

189 
	`£ns‹_wrôe_ªgi°î
(0x316, 0x02);

191 
	`£ns‹_wrôe_ªgi°î
(0x436, 0x71);

192 
	`£ns‹_wrôe_ªgi°î
(0x439, 0xF1);

193 
	`£ns‹_wrôe_ªgi°î
(0x441, 0xF2);

194 
	`£ns‹_wrôe_ªgi°î
(0x442, 0x21);

195 
	`£ns‹_wrôe_ªgi°î
(0x443, 0x21);

196 
	`£ns‹_wrôe_ªgi°î
(0x448, 0xF2);

197 
	`£ns‹_wrôe_ªgi°î
(0x449, 0x21);

198 
	`£ns‹_wrôe_ªgi°î
(0x44A, 0x21);

199 
	`£ns‹_wrôe_ªgi°î
(0x452, 0x01);

200 
	`£ns‹_wrôe_ªgi°î
(0x454, 0xB1);

202 
	`u¶ìp
(200000);

203 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x00);

204 
	`u¶ìp
(200000);

205 
	`£ns‹_wrôe_ªgi°î
(0x202, 0x00);

206 
	`u¶ìp
(200000);

207 
	`£ns‹_wrôe_ªgi°î
(0x249, 0x0A);

208 
	`u¶ìp
(200000);

211 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x01);

212 
	`u¶ìp
(200000);

214 
	`£ns‹_wrôe_ªgi°î
(0x205, 0x01);

215 
	`£ns‹_wrôe_ªgi°î
(0x206, 0x00);

216 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x10);

217 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x01);

218 
	`£ns‹_wrôe_ªgi°î
(0x20A, 0xF0);

219 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x65);

220 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x04);

221 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x98);

222 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x08);

223 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x08);

224 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x00);

225 
	`£ns‹_wrôe_ªgi°î
(0x244, 0xE1);

226 
	`£ns‹_wrôe_ªgi°î
(0x25B, 0x00);

227 
	`£ns‹_wrôe_ªgi°î
(0x25C, 0x30);

228 
	`£ns‹_wrôe_ªgi°î
(0x25D, 0x04);

229 
	`£ns‹_wrôe_ªgi°î
(0x25E, 0x30);

230 
	`£ns‹_wrôe_ªgi°î
(0x25F, 0x04);

232 
	`£ns‹_wrôe_ªgi°î
(0x30F, 0x0E);

233 
	`£ns‹_wrôe_ªgi°î
(0x316, 0x02);

235 
	`£ns‹_wrôe_ªgi°î
(0x436, 0x71);

236 
	`£ns‹_wrôe_ªgi°î
(0x439, 0xF1);

237 
	`£ns‹_wrôe_ªgi°î
(0x441, 0xF2);

238 
	`£ns‹_wrôe_ªgi°î
(0x442, 0x21);

239 
	`£ns‹_wrôe_ªgi°î
(0x443, 0x21);

240 
	`£ns‹_wrôe_ªgi°î
(0x448, 0xF2);

241 
	`£ns‹_wrôe_ªgi°î
(0x449, 0x21);

242 
	`£ns‹_wrôe_ªgi°î
(0x44A, 0x21);

243 
	`£ns‹_wrôe_ªgi°î
(0x452, 0x01);

244 
	`£ns‹_wrôe_ªgi°î
(0x454, 0xB1);

246 #ifde‡
HD1080p30Âs_12bôLVDS_4ch_Löór


247 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x10);

248 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x01);

249 
	`£ns‹_wrôe_ªgi°î
(0x20C, 0x00);

250 
	`£ns‹_wrôe_ªgi°î
(0x20F, 0x01);

251 
	`£ns‹_wrôe_ªgi°î
(0x210, 0x01);

252 
	`£ns‹_wrôe_ªgi°î
(0x212, 0xF0);

253 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x65);

254 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x04);

255 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x98);

256 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x08);

257 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x08);

258 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x00);

259 
	`£ns‹_wrôe_ªgi°î
(0x265, 0x20);

260 
	`£ns‹_wrôe_ªgi°î
(0x286, 0x01);

261 
	`£ns‹_wrôe_ªgi°î
(0x2CF, 0xD1);

262 
	`£ns‹_wrôe_ªgi°î
(0x2D0, 0x1B);

263 
	`£ns‹_wrôe_ªgi°î
(0x2D2, 0x5F);

264 
	`£ns‹_wrôe_ªgi°î
(0x2D3, 0x00);

265 
	`¥ötf
("-------Sony IMX136 Sensor 1080P30fps Initial OK!-------\n");

268 #ifde‡
HD1080p60Âs_12bôLVDS_4ch_Löór


269 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x10);

270 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x00);

271 
	`£ns‹_wrôe_ªgi°î
(0x20C, 0x00);

272 
	`£ns‹_wrôe_ªgi°î
(0x20F, 0x01);

273 
	`£ns‹_wrôe_ªgi°î
(0x210, 0x01);

274 
	`£ns‹_wrôe_ªgi°î
(0x212, 0xF0);

275 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x65);

276 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x04);

277 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x4C);

278 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x04);

279 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x08);

280 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x00);

281 
	`£ns‹_wrôe_ªgi°î
(0x265, 0x20);

282 
	`£ns‹_wrôe_ªgi°î
(0x286, 0x01);

283 
	`£ns‹_wrôe_ªgi°î
(0x2CF, 0xD1);

284 
	`£ns‹_wrôe_ªgi°î
(0x2D0, 0x1B);

285 
	`£ns‹_wrôe_ªgi°î
(0x2D2, 0x5F);

286 
	`£ns‹_wrôe_ªgi°î
(0x2D3, 0x00);

287 
	`¥ötf
("-------Sony IMX136 Sensor 1080P60fps Initial OK!-------\n");

290 #ifde‡
HD1080p30Âs_12bôLVDS_4ch_BuûtInWDR


291 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x10);

292 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x00);

293 
	`£ns‹_wrôe_ªgi°î
(0x20C, 0x00);

294 
	`£ns‹_wrôe_ªgi°î
(0x20F, 0x05);

295 
	`£ns‹_wrôe_ªgi°î
(0x210, 0x00);

296 
	`£ns‹_wrôe_ªgi°î
(0x212, 0x2D);

297 
	`£ns‹_wrôe_ªgi°î
(0x218, 0x65);

298 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x04);

299 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x30);

300 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x11);

301 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x1F);

302 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x04);

303 
	`£ns‹_wrôe_ªgi°î
(0x223, 0x05);

304 
	`£ns‹_wrôe_ªgi°î
(0x265, 0x00);

305 
	`£ns‹_wrôe_ªgi°î
(0x286, 0x10);

306 
	`£ns‹_wrôe_ªgi°î
(0x2CF, 0xE1);

307 
	`£ns‹_wrôe_ªgi°î
(0x2D0, 0x30);

308 
	`£ns‹_wrôe_ªgi°î
(0x2D2, 0xC4);

309 
	`£ns‹_wrôe_ªgi°î
(0x2D3, 0x01);

310 
	`¥ötf
("-------Sony IMX136 Sensor 1080P30fps Built-In WDR Initial OK!-------\n");

313 #ifde‡
HD720p30Âs_12bôLVDS_4ch_Löór


314 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x20);

315 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x02);

316 
	`£ns‹_wrôe_ªgi°î
(0x20C, 0x00);

317 
	`£ns‹_wrôe_ªgi°î
(0x20F, 0x01);

318 
	`£ns‹_wrôe_ªgi°î
(0x210, 0x01);

319 
	`£ns‹_wrôe_ªgi°î
(0x212, 0xF0);

320 
	`£ns‹_wrôe_ªgi°î
(0x218, 0xEE);

321 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x02);

322 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0xE4);

323 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x0C);

324 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x08);

325 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x00);

326 
	`£ns‹_wrôe_ªgi°î
(0x265, 0x20);

327 
	`£ns‹_wrôe_ªgi°î
(0x286, 0x01);

328 
	`£ns‹_wrôe_ªgi°î
(0x2CF, 0xD1);

329 
	`£ns‹_wrôe_ªgi°î
(0x2D0, 0x1B);

330 
	`£ns‹_wrôe_ªgi°î
(0x2D2, 0x5F);

331 
	`£ns‹_wrôe_ªgi°î
(0x2D3, 0x00);

332 
	`¥ötf
("-------Sony IMX136 Sensor 720P30fps Initial OK!-------\n");

335 #ifde‡
HD720p60Âs_12bôLVDS_4ch_Löór


336 
	`£ns‹_wrôe_ªgi°î
(0x207, 0x20);

337 
	`£ns‹_wrôe_ªgi°î
(0x209, 0x01);

338 
	`£ns‹_wrôe_ªgi°î
(0x20C, 0x00);

339 
	`£ns‹_wrôe_ªgi°î
(0x20F, 0x01);

340 
	`£ns‹_wrôe_ªgi°î
(0x210, 0x01);

341 
	`£ns‹_wrôe_ªgi°î
(0x212, 0xF0);

342 
	`£ns‹_wrôe_ªgi°î
(0x218, 0xEE);

343 
	`£ns‹_wrôe_ªgi°î
(0x219, 0x02);

344 
	`£ns‹_wrôe_ªgi°î
(0x21B, 0x72);

345 
	`£ns‹_wrôe_ªgi°î
(0x21C, 0x06);

346 
	`£ns‹_wrôe_ªgi°î
(0x220, 0x08);

347 
	`£ns‹_wrôe_ªgi°î
(0x221, 0x00);

348 
	`£ns‹_wrôe_ªgi°î
(0x265, 0x20);

349 
	`£ns‹_wrôe_ªgi°î
(0x286, 0x01);

350 
	`£ns‹_wrôe_ªgi°î
(0x2CF, 0xD1);

351 
	`£ns‹_wrôe_ªgi°î
(0x2D0, 0x1B);

352 
	`£ns‹_wrôe_ªgi°î
(0x2D2, 0x5F);

353 
	`£ns‹_wrôe_ªgi°î
(0x2D3, 0x00);

354 
	`¥ötf
("-------Sony IMX136 Sensor 720P60fps Initial OK!-------\n");

358 
	`u¶ìp
(200000);

359 
	`£ns‹_wrôe_ªgi°î
(0x200, 0x00);

360 
	`u¶ìp
(200000);

361 
	`£ns‹_wrôe_ªgi°î
(0x202, 0x00);

362 
	`u¶ìp
(200000);

363 
	`£ns‹_wrôe_ªgi°î
(0x249, 0x0A);

364 
	`u¶ìp
(200000);

366 
	}
}

368 
	$£ns‹_exô
()

370 
	`£ns‹_•i_exô
();

373 
	}
}

	@component/isp/sensor/sony_imx178/imx178_cmos.c

1 #i‡!
deföed
(
__IMX178_CMOS_H_
)

2 
	#__IMX178_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#IMX178_ID
 178

	)

26 #ifde‡
INIFILE_CONFIG_MODE


28 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

29 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

30 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

31 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

40 c⁄° 
£ns‹_i2c_addr
;

41 
£ns‹_addr_byã
;

42 
£ns‹_d©a_byã
;

44 
	#SHS1_ADDR
 (0x3034)

	)

45 
	#GAIN_ADDR
 (0x301F)

	)

46 
	#VMAX_ADDR
 (0x302C)

	)

47 
	#HMAX_ADDR
 (0x302F)

	)

49 
	#SENSOR_5M_30FPS_MODE
 (1)

	)

50 
	#SENSOR_1080P_60FPS_MODE
 (2)

	)

51 
	#INCREASE_LINES
 (0Ë

	)

52 
	#VMAX_5M30
 (2292+
INCREASE_LINES
)

	)

53 
	#VMAX_1080P60
 (1528+
INCREASE_LINES
)

	)

55 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

56 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

58 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_5M30
;

59 
HI_U32
 
	ggu32FuŒLöes
 = 
VMAX_5M30
;

60 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

61 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

63 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

64 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

66 
	#PATHLEN_MAX
 256

	)

67 
	#CMOS_CFG_INI
 "imx178_cfg.öi"

	)

68 
	gpcName
[
PATHLEN_MAX
] = "configs/imx178_cfg.ini";

71 #ifde‡
INIFILE_CONFIG_MODE


73 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

75 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

77 
¥ötf
("nullÖointer when getáe default value!\n");

81 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

82 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

83 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

85 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

86 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

87 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

89 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

90 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

92 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

93 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.1;

95 
	ggíSís‹Mode
)

98 
WDR_MODE_NONE
:

99 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

100 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

101 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

102 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

104 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

106 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

107 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

108 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

109 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

111 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

112 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

113 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

114 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

116 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

117 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

118 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

119 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

121 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

122 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

123 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

126 
	gWDR_MODE_2To1_FRAME
:

127 
WDR_MODE_2To1_FRAME_FULL_RATE
:

128 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

129 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

130 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

131 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

133 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

135 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

136 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

137 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

138 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

140 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

141 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

142 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

143 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

145 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

146 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

147 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

148 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

150 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

151 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

152 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

160 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

162 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

164 
¥ötf
("nullÖointer when getáe default value!\n");

168 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

169 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

170 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

172 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

173 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

174 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

176 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

177 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

179 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

180 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.1;

182 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

183 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

184 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

186 
	ggíSís‹Mode
)

189 
WDR_MODE_NONE
:

190 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

191 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

192 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

193 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

195 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

197 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

198 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

199 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

200 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

201 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

202 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

203 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

204 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

206 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

207 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

208 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

209 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

212 
	gWDR_MODE_2To1_FRAME
:

213 
WDR_MODE_2To1_FRAME_FULL_RATE
:

214 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

215 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

216 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

217 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

219 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

221 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

222 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

223 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

224 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

226 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

227 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

228 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

229 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

231 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

232 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

233 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

234 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

243 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

245 i‡(
	gSENSOR_5M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

247 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

249 
gu32FuŒLöesStd
 = 
VMAX_5M30
*30/
f32Fps
;

253 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

257 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

259 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

261 
gu32FuŒLöesStd
 = 
VMAX_1080P60
*60/
f32Fps
;

265 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

272 
¥ötf
("NŸ suµ‹t! gu8Sís‹ImageMode:%d, f32Fps:%f\n", 
gu8Sís‹ImageMode
, 
f32Fps
);

276 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

278 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

280 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

281 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF00) >> 8;

285 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

286 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF00) >> 8;

290 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

291 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

292 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

293 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

295 
	ggu32FuŒLöes
 = 
gu32FuŒLöesStd
;

300 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

301 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

303 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

304 
	ggu32FuŒLöes
 = 
u32FuŒLöes
;

306 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

308 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 = (
gu32FuŒLöes
 & 0xFF);

309 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF00) >> 8;

313 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

314 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF00) >> 8;

317 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 2;

323 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

325 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

326 
HI_U32
 
	gu32VÆue
 = 
gu32FuŒLöes
 - 
u32I¡Time
;

328 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

330 i‡(
bFú°
)

332 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = (
u32VÆue
 & 0xFF);

333 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

334 
	gbFú°
 = 
HI_FALSE
;

338 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

339 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

340 
	gbFú°
 = 
HI_TRUE
;

345 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

346 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

347 
	gbFú°
 = 
HI_TRUE
;

353 
HI_U32
 
	gad_gaö_èbÀ
[241]=

369 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

371 
	gi
;

373 i‡(*
	gpu32AgaöLö
 >
ad_gaö_èbÀ
[240])

375 *
pu32AgaöLö
 = 
ad_gaö_èbÀ
[240];

376 *
	gpu32AgaöDb
 = 240;

380 
	gi
 = 1; i < 241; i++)

382 i‡(*
	gpu32AgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

384 *
	gpu32AgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

385 *
	gpu32AgaöDb
 = 
i
 - 1;

393 
HI_VOID
 
cmos_dgaö_ˇlc_èbÀ
(
HI_U32
 *
pu32DgaöLö
, HI_U32 *
pu32DgaöDb
)

395 
	gi
;

397 i‡(*
	gpu32DgaöLö
 >
ad_gaö_èbÀ
[240])

399 *
pu32DgaöLö
 = 
ad_gaö_èbÀ
[240];

400 *
	gpu32DgaöDb
 = 240;

404 
	gi
 = 1; i < 241; i++)

406 i‡(*
	gpu32DgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

408 *
	gpu32DgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

409 *
	gpu32DgaöDb
 = 
i
 - 1;

417 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

420 
HI_U32
 
	gu32Tmp
 = 
u32Agaö
 + 
u32Dgaö
;

421 
	gu32Tmp
 = 
u32Tmp
 > 0x1E0 ? 0x1E0 : u32Tmp;

423 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = (
u32Tmp
 & 0xFF);

424 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = ((
u32Tmp
 & 0x100) >> 8);

430 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

432 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

434 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

438 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

440 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 2Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

447 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

449 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

451 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

452 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

453 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

454 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

455 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

456 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

457 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
cmos_dgaö_ˇlc_èbÀ
;

458 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

465 #ifde‡
INIFILE_CONFIG_MODE


467 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

469 
HI_U8
 
	gi
;

471 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

473 
¥ötf
("nullÖointer when getáwb default value!\n");

477 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

478 
	ggíSís‹Mode
)

481 
WDR_MODE_NONE
:

482 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

484 
	gi
= 0; i < 4; i++)

486 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

489 
	gi
= 0; i < 6; i++)

491 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

493 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

494 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

497 
	gWDR_MODE_2To1_FRAME
:

498 
WDR_MODE_2To1_FRAME_FULL_RATE
:

499 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

500 
	gi
= 0; i < 4; i++)

502 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

505 
	gi
= 0; i < 6; i++)

507 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

510 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

511 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

519 
AWB_CCM_S
 
	gg_°AwbCcm
 =

566 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

575 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

585 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

587 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

589 
¥ötf
("nullÖointer when getáwb default value!\n");

593 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

595 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4800;

597 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x212;

598 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

599 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

600 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1e8;

602 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 77;

603 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 67;

604 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -121;

605 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 169536;

606 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

607 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -120875;

609 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

611 
	ggíSís‹Mode
)

614 
WDR_MODE_NONE
:

615 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

618 
	gWDR_MODE_2To1_FRAME
:

619 
WDR_MODE_2To1_FRAME_FULL_RATE
:

620 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

630 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

632 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

634 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

641 #ifde‡
INIFILE_CONFIG_MODE


643 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

645 i‡(
	gHI_NULL
 =
p°Def
)

647 
¥ötf
("nullÖointer when get isp default value!\n");

651 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

653 
	ggíSís‹Mode
)

656 
WDR_MODE_NONE
:

657 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

658 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

659 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

660 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

661 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

662 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

664 
	gWDR_MODE_2To1_FRAME
:

665 
WDR_MODE_2To1_FRAME_FULL_RATE
:

666 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

667 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

668 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

669 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

670 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

671 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

672 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

676 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

677 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1944;

684 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

713 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

742 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

769 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

786 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

831 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

876 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

891 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

935 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

952 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

968 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

970 i‡(
	gHI_NULL
 =
p°Def
)

972 
¥ötf
("nullÖointer when get isp default value!\n");

976 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

977 
	ggíSís‹Mode
)

980 
WDR_MODE_NONE
:

981 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

982 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

983 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

984 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

985 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

986 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

987 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

988 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

989 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

991 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

992 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

993 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

994 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

995 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

998 
	gWDR_MODE_2To1_FRAME
:

999 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1000 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

1001 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1002 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

1003 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

1004 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

1005 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

1006 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

1007 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1008 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1010 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

1011 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

1012 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

1013 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

1014 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

1015 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1018 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

1019 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1944;

1026 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

1028 
HI_S32
 
	gi
;

1030 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

1032 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1037 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1039 
	gi
=0; i<4; i++)

1041 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xC7;

1047 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1049 
HI_U32
 
	gu32FuŒLöes_5Fps
 = 
VMAX_5M30
;

1050 
HI_U32
 
	gu32MaxExpTime_5Fps
 = 
VMAX_5M30
 - 2;

1052 i‡(
	gSENSOR_5M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1054 
u32FuŒLöes_5Fps
 = 
VMAX_5M30
 * 30 / 5;

1056 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1058 
u32FuŒLöes_5Fps
 = 
VMAX_1080P60
 * 60 / 5;

1065 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1066 
	gu32MaxExpTime_5Fps
 = 2;

1068 i‡(
	gbE«bÀ
)

1070 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 
u32FuŒLöes_5Fps
 & 0xFF);

1071 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
 + 1, (
u32FuŒLöes_5Fps
 & 0xFF00) >> 8);

1072 
£ns‹_wrôe_ªgi°î
(
SHS1_ADDR
, 
u32MaxExpTime_5Fps
 & 0xFF);

1073 
£ns‹_wrôe_ªgi°î
(
SHS1_ADDR
 +1, (
u32MaxExpTime_5Fps
 & 0xFF00) >> 8);

1074 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
, 0x00);

1075 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
 +1, 0x00);

1079 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

1080 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
, 
gu32FuŒLöesStd
 & 0xFF);

1081 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
 + 1, (
gu32FuŒLöesStd
 & 0xFF00) >> 8);

1082 
	gbInô
 = 
HI_FALSE
;

1088 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1090 
	gbInô
 = 
HI_FALSE
;

1092 
	gu8Mode
)

1094 
	gWDR_MODE_NONE
:

1095 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1096 
¥ötf
("linear mode\n");

1099 
	gWDR_MODE_2To1_FRAME
:

1100 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1102 
¥ötf
("2to1 half-rate frame WDR mode\n");

1105 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1106 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1108 
¥ötf
("2to1 full-rate frame WDR mode\n");

1112 
¥ötf
("NOT supportÅhis mode!\n");

1120 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1122 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1124 
	gbInô
 = 
HI_FALSE
;

1126 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1128 
¥ötf
("nullÖointer when set image mode\n");

1132 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1134 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 60)

1136 
u8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1140 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1141 
p°Sís‹ImageMode
->
u16Width
,

1142 
p°Sís‹ImageMode
->
u16Height
,

1143 
p°Sís‹ImageMode
->
f32Fps
);

1148 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2592)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1944))

1150 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1152 
u8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

1156 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1157 
p°Sís‹ImageMode
->
u16Width
,

1158 
p°Sís‹ImageMode
->
u16Height
,

1159 
p°Sís‹ImageMode
->
f32Fps
);

1166 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1167 
p°Sís‹ImageMode
->
u16Width
,

1168 
p°Sís‹ImageMode
->
u16Height
,

1169 
p°Sís‹ImageMode
->
f32Fps
);

1173 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1175 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1181 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1187 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1193 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1195 
HI_S32
 
	gi
;

1197 i‡(
	gHI_FALSE
 =
bInô
)

1199 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1200 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1201 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 6;

1203 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1205 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1207 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1209 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1210 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1211 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1212 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1215 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1216 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
SHS1_ADDR
;

1217 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1218 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
SHS1_ADDR
 + 1;

1219 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 1;

1220 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 
GAIN_ADDR
;

1221 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 1;

1222 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
GAIN_ADDR
 + 1;

1223 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 0;

1224 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
VMAX_ADDR
;

1225 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 0;

1226 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1228 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1230 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u8DñayFrmNum
 = 1;

1231 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
SHS1_ADDR
;

1232 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 1;

1233 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
SHS1_ADDR
 + 1;

1234 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 0;

1235 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 
VMAX_ADDR
;

1236 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 0;

1237 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1240 
	gbInô
 = 
HI_TRUE
;

1244 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1246 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1248 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1252 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1256 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1258 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1259 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1260 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gbUpd©e
 = 
HI_TRUE
;

1261 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gbUpd©e
 = 
HI_TRUE
;

1265 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1267 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1271 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1272 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1277 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1279 
mem£t
(
pcName
, 0, (pcName));

1281 i‡(
	gHI_NULL
 =
pcP©h
)

1283 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1284 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1288 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1290 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1294 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1295 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1301 
HI_VOID
 
£ns‹_globÆ_öô
()

1303 
	ggu8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

1304 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1305 
	ggu32FuŒLöesStd
 = 
VMAX_5M30
;

1306 
	ggu32FuŒLöes
 = 
VMAX_5M30
;

1307 
	gbInô
 = 
HI_FALSE
;

1308 
	gbSís‹Inô
 = 
HI_FALSE
;

1310 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1311 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1313 #ifde‡
INIFILE_CONFIG_MODE


1314 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1315 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1316 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1318 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1325 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1327 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1329 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1330 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1331 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1332 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1333 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1335 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1336 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1337 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1338 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1347 
£ns‹_ªgi°î_ˇŒback
()

1349 
ISP_DEV
 
	gI•Dev
 = 0;

1350 
HI_S32
 
	gs32Rë
;

1351 
ALG_LIB_S
 
	g°Lib
;

1352 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1353 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1354 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1356 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1357 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
IMX178_ID
, &
°I•Regi°î
);

1358 i‡(
	gs32Rë
)

1360 
¥ötf
("sensorÑegister callback function failed!\n");

1361  
	gs32Rë
;

1364 
	g°Lib
.
	gs32Id
 = 0;

1365 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1366 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1367 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
, &
°AeRegi°î
);

1368 i‡(
	gs32Rë
)

1370 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1371  
	gs32Rë
;

1374 
	g°Lib
.
	gs32Id
 = 0;

1375 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1376 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1377 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
, &
°AwbRegi°î
);

1378 i‡(
	gs32Rë
)

1380 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1381  
	gs32Rë
;

1387 
£ns‹_uƒegi°î_ˇŒback
()

1389 
ISP_DEV
 
	gI•Dev
 = 0;

1390 
HI_S32
 
	gs32Rë
;

1391 
ALG_LIB_S
 
	g°Lib
;

1393 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
IMX178_ID
);

1394 i‡(
	gs32Rë
)

1396 
¥ötf
("sensor unregister callback function failed!\n");

1397  
	gs32Rë
;

1400 
	g°Lib
.
	gs32Id
 = 0;

1401 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1402 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
);

1403 i‡(
	gs32Rë
)

1405 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1406  
	gs32Rë
;

1409 
	g°Lib
.
	gs32Id
 = 0;

1410 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1411 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
);

1412 i‡(
	gs32Rë
)

1414 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1415  
	gs32Rë
;

1421 #ifde‡
__˝lu•lus


1422 #i‡
__˝lu•lus


	@component/isp/sensor/sony_imx178/imx178_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

25 
	~"hi_comm_video.h
"

27 #ifde‡
HI_GPIO_I2C


28 
	~"gpioi2c_ex.h
"

30 
	~"hi_i2c.h
"

33 c⁄° 
	g£ns‹_i2c_addr
 = 0x34;

34 c⁄° 
	g£ns‹_addr_byã
 = 2;

35 c⁄° 
	g£ns‹_d©a_byã
 = 1;

36 
	gg_fd
 = -1;

38 
HI_U8
 
gu8Sís‹ImageMode
;

39 
HI_BOOL
 
bSís‹Inô
;

41 
	$£ns‹_i2c_öô
()

43 i‡(
g_fd
 >= 0)

47 #ifde‡
HI_GPIO_I2C


48 
ªt
;

50 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

51 if(
g_fd
 < 0)

53 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

57 
ªt
;

59 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

60 if(
g_fd
 < 0)

62 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

66 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

67 i‡(
ªt
 < 0)

69 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

70  
ªt
;

75 
	}
}

77 
	$£ns‹_i2c_exô
()

79 i‡(
g_fd
 >= 0)

81 
	`˛o£
(
g_fd
);

82 
g_fd
 = -1;

86 
	}
}

88 
	$£ns‹_ªad_ªgi°î
(
addr
)

93 
	}
}

95 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

97 #ifde‡
HI_GPIO_I2C


98 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

99 
i2c_d©a
.
ªg_addr
 = 
addr
;

100 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

101 
i2c_d©a
.
d©a
 = data;

102 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

104 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

106 i‡(
ªt
)

108 
	`¥ötf
("GPIO-I2C write faild!\n");

109  
ªt
;

112 
idx
 = 0;

113 
ªt
;

114 
buf
[8];

116 
buf
[
idx
++] = 
addr
 & 0xFF;

117 i‡(
£ns‹_addr_byã
 == 2)

119 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

120 
buf
[
idx
++] = 
addr
 >> 8;

124 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

127 i‡(
ªt
 < 0)

129 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

133 
buf
[
idx
++] = 
d©a
;

134 i‡(
£ns‹_d©a_byã
 == 2)

136 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

137 
buf
[
idx
++] = 
d©a
 >> 8;

141 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

144 i‡(
ªt
)

146 
	`¥ötf
("hi_i2c write faild!\n");

150 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

151 if(
ªt
 < 0)

153 
	`¥ötf
("I2C_WRITEÉrror!\n");

158 
	}
}

160 
	$dñay_ms
(
ms
) {

161 
	`u¶ìp
(
ms
*1000);

162 
	}
}

164 
	$£ns‹_¥og
(* 
rom
)

166 
i
 = 0;

168 
lookup
 = 
rom
[
i
++];

169 
addr
 = (
lookup
 >> 16) & 0xFFFF;

170 
d©a
 = 
lookup
 & 0xFFFF;

171 i‡(
addr
 == 0xFFFE) {

172 
	`dñay_ms
(
d©a
);

173 } i‡(
addr
 == 0xFFFF) {

176 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

179 
	}
}

181 
£ns‹_öô_5M30
();

182 
£ns‹_öô_1080p60
();

184 
	$£ns‹_öô
()

186 
	`£ns‹_i2c_öô
();

188 i‡(1 =
gu8Sís‹ImageMode
)

190 
	`£ns‹_öô_5M30
();

191 
bSís‹Inô
 = 
HI_TRUE
;

193 i‡(2 =
gu8Sís‹ImageMode
)

195 
	`£ns‹_öô_1080p60
();

196 
bSís‹Inô
 = 
HI_TRUE
;

200 
	`¥ötf
("Not supportÅhis mode\n");

202 
	}
}

204 
	$£ns‹_exô
()

206 
	`£ns‹_i2c_exô
();

209 
	}
}

211 
	$£ns‹_öô_5M30
()

214 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x07);

216 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

217 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x10);

218 
	`£ns‹_wrôe_ªgi°î
 (0x3010, 0x00);

219 
	`£ns‹_wrôe_ªgi°î
 (0x3066, 0x06);

220 
	`£ns‹_wrôe_ªgi°î
 (0x302C, 0xF4);

221 
	`£ns‹_wrôe_ªgi°î
 (0x302D, 0x08);

222 
	`£ns‹_wrôe_ªgi°î
 (0x302F, 0xE9);

223 
	`£ns‹_wrôe_ªgi°î
 (0x3030, 0x03);

224 
	`£ns‹_wrôe_ªgi°î
 (0x300D, 0x05);

225 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0x31);

226 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

229 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x30);

232 
	`£ns‹_wrôe_ªgi°î
 (0x310C, 0x00);

233 
	`£ns‹_wrôe_ªgi°î
 (0x33BE, 0x21);

234 
	`£ns‹_wrôe_ªgi°î
 (0x33BF, 0x21);

235 
	`£ns‹_wrôe_ªgi°î
 (0x33C0, 0x2C);

236 
	`£ns‹_wrôe_ªgi°î
 (0x33C1, 0x2C);

237 
	`£ns‹_wrôe_ªgi°î
 (0x33C2, 0x21);

238 
	`£ns‹_wrôe_ªgi°î
 (0x33C3, 0x2C);

239 
	`£ns‹_wrôe_ªgi°î
 (0x33C4, 0x2C);

240 
	`£ns‹_wrôe_ªgi°î
 (0x33C5, 0x00);

241 
	`£ns‹_wrôe_ªgi°î
 (0x311C, 0x34);

242 
	`£ns‹_wrôe_ªgi°î
 (0x311D, 0x28);

243 
	`£ns‹_wrôe_ªgi°î
 (0x311E, 0xAB);

244 
	`£ns‹_wrôe_ªgi°î
 (0x311F, 0x00);

245 
	`£ns‹_wrôe_ªgi°î
 (0x3120, 0x95);

246 
	`£ns‹_wrôe_ªgi°î
 (0x3121, 0x00);

247 
	`£ns‹_wrôe_ªgi°î
 (0x3122, 0xB4);

248 
	`£ns‹_wrôe_ªgi°î
 (0x3123, 0x00);

249 
	`£ns‹_wrôe_ªgi°î
 (0x3124, 0x8c);

250 
	`£ns‹_wrôe_ªgi°î
 (0x3125, 0x02);

251 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x03);

252 
	`£ns‹_wrôe_ªgi°î
 (0x312E, 0x0C);

253 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x28);

254 
	`£ns‹_wrôe_ªgi°î
 (0x3131, 0x2D);

255 
	`£ns‹_wrôe_ªgi°î
 (0x3132, 0x00);

256 
	`£ns‹_wrôe_ªgi°î
 (0x3133, 0xB4);

257 
	`£ns‹_wrôe_ªgi°î
 (0x3134, 0x00);

258 
	`£ns‹_wrôe_ªgi°î
 (0x3137, 0x50);

259 
	`£ns‹_wrôe_ªgi°î
 (0x3138, 0x08);

260 
	`£ns‹_wrôe_ªgi°î
 (0x3139, 0x00);

261 
	`£ns‹_wrôe_ªgi°î
 (0x313A, 0x07);

262 
	`£ns‹_wrôe_ªgi°î
 (0x313D, 0x05);

263 
	`£ns‹_wrôe_ªgi°î
 (0x3140, 0x06);

264 
	`£ns‹_wrôe_ªgi°î
 (0x3220, 0x8B);

265 
	`£ns‹_wrôe_ªgi°î
 (0x3221, 0x00);

266 
	`£ns‹_wrôe_ªgi°î
 (0x3222, 0x74);

267 
	`£ns‹_wrôe_ªgi°î
 (0x3223, 0x00);

268 
	`£ns‹_wrôe_ªgi°î
 (0x3226, 0xC2);

269 
	`£ns‹_wrôe_ªgi°î
 (0x3227, 0x00);

270 
	`£ns‹_wrôe_ªgi°î
 (0x32A9, 0x1B);

271 
	`£ns‹_wrôe_ªgi°î
 (0x32AA, 0x00);

272 
	`£ns‹_wrôe_ªgi°î
 (0x32B3, 0x0E);

273 
	`£ns‹_wrôe_ªgi°î
 (0x32B4, 0x00);

274 
	`£ns‹_wrôe_ªgi°î
 (0x33D6, 0x16);

275 
	`£ns‹_wrôe_ªgi°î
 (0x33D7, 0x15);

276 
	`£ns‹_wrôe_ªgi°î
 (0x33D8, 0x14);

277 
	`£ns‹_wrôe_ªgi°î
 (0x33D9, 0x10);

278 
	`£ns‹_wrôe_ªgi°î
 (0x33DA, 0x08);

281 
	`£ns‹_wrôe_ªgi°î
 (0x3011, 0x00);

282 
	`£ns‹_wrôe_ªgi°î
 (0x301B, 0x00);

283 
	`£ns‹_wrôe_ªgi°î
 (0x3037, 0x08);

284 
	`£ns‹_wrôe_ªgi°î
 (0x3038, 0x00);

285 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x00);

286 
	`£ns‹_wrôe_ªgi°î
 (0x30AD, 0x49);

287 
	`£ns‹_wrôe_ªgi°î
 (0x30AF, 0x54);

288 
	`£ns‹_wrôe_ªgi°î
 (0x30B0, 0x33);

289 
	`£ns‹_wrôe_ªgi°î
 (0x30B3, 0x0A);

290 
	`£ns‹_wrôe_ªgi°î
 (0x30C4, 0x30);

291 
	`£ns‹_wrôe_ªgi°î
 (0x3103, 0x03);

292 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x08);

293 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0x10);

294 
	`£ns‹_wrôe_ªgi°î
 (0x310F, 0x01);

295 
	`£ns‹_wrôe_ªgi°î
 (0x32E5, 0x06);

296 
	`£ns‹_wrôe_ªgi°î
 (0x32E6, 0x00);

297 
	`£ns‹_wrôe_ªgi°î
 (0x32E7, 0x1F);

298 
	`£ns‹_wrôe_ªgi°î
 (0x32E8, 0x00);

299 
	`£ns‹_wrôe_ªgi°î
 (0x32E9, 0x00);

300 
	`£ns‹_wrôe_ªgi°î
 (0x32EA, 0x00);

301 
	`£ns‹_wrôe_ªgi°î
 (0x32EB, 0x00);

302 
	`£ns‹_wrôe_ªgi°î
 (0x32EC, 0x00);

303 
	`£ns‹_wrôe_ªgi°î
 (0x32EE, 0x00);

304 
	`£ns‹_wrôe_ªgi°î
 (0x32F2, 0x02);

305 
	`£ns‹_wrôe_ªgi°î
 (0x32F4, 0x00);

306 
	`£ns‹_wrôe_ªgi°î
 (0x32F5, 0x00);

307 
	`£ns‹_wrôe_ªgi°î
 (0x32F6, 0x00);

308 
	`£ns‹_wrôe_ªgi°î
 (0x32F7, 0x00);

309 
	`£ns‹_wrôe_ªgi°î
 (0x32F8, 0x00);

310 
	`£ns‹_wrôe_ªgi°î
 (0x32FC, 0x02);

311 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x11);

312 
	`£ns‹_wrôe_ªgi°î
 (0x3338, 0x81);

313 
	`£ns‹_wrôe_ªgi°î
 (0x333D, 0x00);

314 
	`£ns‹_wrôe_ªgi°î
 (0x3362, 0x00);

315 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

316 
	`£ns‹_wrôe_ªgi°î
 (0x336E, 0x11);

317 
	`£ns‹_wrôe_ªgi°î
 (0x33B4, 0xFE);

318 
	`£ns‹_wrôe_ªgi°î
 (0x33B5, 0x06);

319 
	`£ns‹_wrôe_ªgi°î
 (0x33B9, 0x00);

322 
	`£ns‹_wrôe_ªgi°î
 (0x3034, 0x08);

323 
	`£ns‹_wrôe_ªgi°î
 (0x3035, 0x00);

324 
	`£ns‹_wrôe_ªgi°î
 (0x301F, 0xA0);

325 
	`£ns‹_wrôe_ªgi°î
 (0x3020, 0x00);

327 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

328 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x00);

329 
	`£ns‹_wrôe_ªgi°î
 (0x305E, 0x0A);

330 
	`£ns‹_wrôe_ªgi°î
 (0x3015, 0xC8);

332 
	`¥ötf
("-------Sony IMX178 Sensor 5M30fps Initial OK!-------\n");

334 
	}
}

336 
	$£ns‹_öô_1080p60
()

339 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x07);

341 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

342 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

343 
	`£ns‹_wrôe_ªgi°î
 (0x3010, 0x00);

344 
	`£ns‹_wrôe_ªgi°î
 (0x3066, 0x03);

345 
	`£ns‹_wrôe_ªgi°î
 (0x302C, 0xF8);

346 
	`£ns‹_wrôe_ªgi°î
 (0x302D, 0x05);

347 
	`£ns‹_wrôe_ªgi°î
 (0x302F, 0xEE);

348 
	`£ns‹_wrôe_ªgi°î
 (0x3030, 0x02);

349 
	`£ns‹_wrôe_ªgi°î
 (0x300D, 0x05);

350 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0x31);

351 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

354 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x30);

357 
	`£ns‹_wrôe_ªgi°î
 (0x310C, 0x00);

358 
	`£ns‹_wrôe_ªgi°î
 (0x33BE, 0x21);

359 
	`£ns‹_wrôe_ªgi°î
 (0x33BF, 0x21);

360 
	`£ns‹_wrôe_ªgi°î
 (0x33C0, 0x2C);

361 
	`£ns‹_wrôe_ªgi°î
 (0x33C1, 0x2C);

362 
	`£ns‹_wrôe_ªgi°î
 (0x33C2, 0x21);

363 
	`£ns‹_wrôe_ªgi°î
 (0x33C3, 0x2C);

364 
	`£ns‹_wrôe_ªgi°î
 (0x33C4, 0x2C);

365 
	`£ns‹_wrôe_ªgi°î
 (0x33C5, 0x00);

366 
	`£ns‹_wrôe_ªgi°î
 (0x311C, 0x34);

367 
	`£ns‹_wrôe_ªgi°î
 (0x311D, 0x28);

368 
	`£ns‹_wrôe_ªgi°î
 (0x311E, 0xAB);

369 
	`£ns‹_wrôe_ªgi°î
 (0x311F, 0x00);

370 
	`£ns‹_wrôe_ªgi°î
 (0x3120, 0x95);

371 
	`£ns‹_wrôe_ªgi°î
 (0x3121, 0x00);

372 
	`£ns‹_wrôe_ªgi°î
 (0x3122, 0xB4);

373 
	`£ns‹_wrôe_ªgi°î
 (0x3123, 0x00);

374 
	`£ns‹_wrôe_ªgi°î
 (0x3124, 0x8c);

375 
	`£ns‹_wrôe_ªgi°î
 (0x3125, 0x02);

376 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x03);

377 
	`£ns‹_wrôe_ªgi°î
 (0x312E, 0x0C);

378 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x28);

379 
	`£ns‹_wrôe_ªgi°î
 (0x3131, 0x2D);

380 
	`£ns‹_wrôe_ªgi°î
 (0x3132, 0x00);

381 
	`£ns‹_wrôe_ªgi°î
 (0x3133, 0xB4);

382 
	`£ns‹_wrôe_ªgi°î
 (0x3134, 0x00);

383 
	`£ns‹_wrôe_ªgi°î
 (0x3137, 0x50);

384 
	`£ns‹_wrôe_ªgi°î
 (0x3138, 0x08);

385 
	`£ns‹_wrôe_ªgi°î
 (0x3139, 0x00);

386 
	`£ns‹_wrôe_ªgi°î
 (0x313A, 0x07);

387 
	`£ns‹_wrôe_ªgi°î
 (0x313D, 0x05);

388 
	`£ns‹_wrôe_ªgi°î
 (0x3140, 0x06);

389 
	`£ns‹_wrôe_ªgi°î
 (0x3220, 0x8B);

390 
	`£ns‹_wrôe_ªgi°î
 (0x3221, 0x00);

391 
	`£ns‹_wrôe_ªgi°î
 (0x3222, 0x74);

392 
	`£ns‹_wrôe_ªgi°î
 (0x3223, 0x00);

393 
	`£ns‹_wrôe_ªgi°î
 (0x3226, 0xC2);

394 
	`£ns‹_wrôe_ªgi°î
 (0x3227, 0x00);

395 
	`£ns‹_wrôe_ªgi°î
 (0x32A9, 0x1B);

396 
	`£ns‹_wrôe_ªgi°î
 (0x32AA, 0x00);

397 
	`£ns‹_wrôe_ªgi°î
 (0x32B3, 0x0E);

398 
	`£ns‹_wrôe_ªgi°î
 (0x32B4, 0x00);

399 
	`£ns‹_wrôe_ªgi°î
 (0x33D6, 0x16);

400 
	`£ns‹_wrôe_ªgi°î
 (0x33D7, 0x15);

401 
	`£ns‹_wrôe_ªgi°î
 (0x33D8, 0x14);

402 
	`£ns‹_wrôe_ªgi°î
 (0x33D9, 0x10);

403 
	`£ns‹_wrôe_ªgi°î
 (0x33DA, 0x08);

406 
	`£ns‹_wrôe_ªgi°î
 (0x3011, 0x00);

407 
	`£ns‹_wrôe_ªgi°î
 (0x301B, 0x00);

408 
	`£ns‹_wrôe_ªgi°î
 (0x3037, 0x08);

409 
	`£ns‹_wrôe_ªgi°î
 (0x3038, 0x00);

410 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x00);

411 
	`£ns‹_wrôe_ªgi°î
 (0x30AD, 0x49);

412 
	`£ns‹_wrôe_ªgi°î
 (0x30AF, 0x54);

413 
	`£ns‹_wrôe_ªgi°î
 (0x30B0, 0x33);

414 
	`£ns‹_wrôe_ªgi°î
 (0x30B3, 0x0A);

415 
	`£ns‹_wrôe_ªgi°î
 (0x30C4, 0x30);

416 
	`£ns‹_wrôe_ªgi°î
 (0x3103, 0x03);

417 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x08);

418 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0x10);

419 
	`£ns‹_wrôe_ªgi°î
 (0x310F, 0x01);

420 
	`£ns‹_wrôe_ªgi°î
 (0x32E5, 0x06);

421 
	`£ns‹_wrôe_ªgi°î
 (0x32E6, 0x00);

422 
	`£ns‹_wrôe_ªgi°î
 (0x32E7, 0x1F);

423 
	`£ns‹_wrôe_ªgi°î
 (0x32E8, 0x00);

424 
	`£ns‹_wrôe_ªgi°î
 (0x32E9, 0x00);

425 
	`£ns‹_wrôe_ªgi°î
 (0x32EA, 0x00);

426 
	`£ns‹_wrôe_ªgi°î
 (0x32EB, 0x00);

427 
	`£ns‹_wrôe_ªgi°î
 (0x32EC, 0x00);

428 
	`£ns‹_wrôe_ªgi°î
 (0x32EE, 0x00);

429 
	`£ns‹_wrôe_ªgi°î
 (0x32F2, 0x02);

430 
	`£ns‹_wrôe_ªgi°î
 (0x32F4, 0x00);

431 
	`£ns‹_wrôe_ªgi°î
 (0x32F5, 0x00);

432 
	`£ns‹_wrôe_ªgi°î
 (0x32F6, 0x00);

433 
	`£ns‹_wrôe_ªgi°î
 (0x32F7, 0x00);

434 
	`£ns‹_wrôe_ªgi°î
 (0x32F8, 0x00);

435 
	`£ns‹_wrôe_ªgi°î
 (0x32FC, 0x02);

436 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x11);

437 
	`£ns‹_wrôe_ªgi°î
 (0x3338, 0x81);

438 
	`£ns‹_wrôe_ªgi°î
 (0x333D, 0x00);

439 
	`£ns‹_wrôe_ªgi°î
 (0x3362, 0x00);

440 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

441 
	`£ns‹_wrôe_ªgi°î
 (0x336E, 0x11);

442 
	`£ns‹_wrôe_ªgi°î
 (0x33B4, 0xFE);

443 
	`£ns‹_wrôe_ªgi°î
 (0x33B5, 0x06);

444 
	`£ns‹_wrôe_ªgi°î
 (0x33B9, 0x00);

447 
	`£ns‹_wrôe_ªgi°î
 (0x3034, 0x08);

448 
	`£ns‹_wrôe_ªgi°î
 (0x3035, 0x00);

449 
	`£ns‹_wrôe_ªgi°î
 (0x301F, 0xA0);

450 
	`£ns‹_wrôe_ªgi°î
 (0x3020, 0x00);

452 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

453 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x00);

454 
	`£ns‹_wrôe_ªgi°î
 (0x305E, 0x0A);

455 
	`£ns‹_wrôe_ªgi°î
 (0x3015, 0xC8);

457 
	`¥ötf
("-------Sony IMX178 Sensor 1080p60fps Initial OK!-------\n");

459 
	}
}

	@component/isp/sensor/sony_imx178_37M/imx178_cmos.c

1 #i‡!
deföed
(
__IMX178_CMOS_H_
)

2 
	#__IMX178_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#IMX178_ID
 178

	)

26 #ifde‡
INIFILE_CONFIG_MODE


28 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

29 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

30 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

31 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

40 c⁄° 
£ns‹_i2c_addr
;

41 
£ns‹_addr_byã
;

42 
£ns‹_d©a_byã
;

44 
	#SHS1_ADDR
 (0x3034)

	)

45 
	#GAIN_ADDR
 (0x301F)

	)

46 
	#VMAX_ADDR
 (0x302C)

	)

47 
	#HMAX_ADDR
 (0x302F)

	)

49 
	#SENSOR_5M_30FPS_MODE
 (1)

	)

50 
	#SENSOR_1080P_60FPS_MODE
 (2)

	)

51 
	#INCREASE_LINES
 (1Ë

	)

52 
	#VMAX_5M30
 (2475+
INCREASE_LINES
)

	)

53 
	#VMAX_1080P60
 (1650+
INCREASE_LINES
)

	)

55 
HI_U8
 
	ggu8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

56 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

58 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_5M30
;

59 
HI_U32
 
	ggu32FuŒLöes
 = 
VMAX_5M30
;

60 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

61 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

63 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

64 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

66 
	#PATHLEN_MAX
 256

	)

67 
	#CMOS_CFG_INI
 "imx178_cfg.öi"

	)

68 
	gpcName
[
PATHLEN_MAX
] = "configs/imx178_cfg.ini";

71 #ifde‡
INIFILE_CONFIG_MODE


73 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

75 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

77 
¥ötf
("nullÖointer when getáe default value!\n");

81 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

82 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

83 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

85 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

86 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

87 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

89 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

90 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

92 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

93 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.1;

95 
	ggíSís‹Mode
)

98 
WDR_MODE_NONE
:

99 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

100 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

101 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

102 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

104 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

106 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

107 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

108 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

109 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

111 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

112 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

113 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

114 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

116 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

117 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

118 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

119 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

121 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

122 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

123 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

126 
	gWDR_MODE_2To1_FRAME
:

127 
WDR_MODE_2To1_FRAME_FULL_RATE
:

128 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

129 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

130 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

131 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

133 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

135 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

136 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

137 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

138 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

140 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

141 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

142 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

143 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

145 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

146 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

147 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

148 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

150 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

151 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

152 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

160 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

162 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

164 
¥ötf
("nullÖointer when getáe default value!\n");

168 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

169 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

170 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

172 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

173 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

174 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0;

176 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

177 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.1;

179 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

180 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.1;

182 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

183 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

184 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

186 
	ggíSís‹Mode
)

189 
WDR_MODE_NONE
:

190 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

191 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

192 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

193 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

195 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

197 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

198 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

199 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

200 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

201 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

202 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

203 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

204 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

206 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

207 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

208 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

209 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

212 
	gWDR_MODE_2To1_FRAME
:

213 
WDR_MODE_2To1_FRAME_FULL_RATE
:

214 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

215 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

216 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

217 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

219 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

221 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

222 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

223 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

224 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

226 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

227 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

228 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

229 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

231 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

232 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

233 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

234 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

243 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

245 i‡(
	gSENSOR_5M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

247 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

249 
gu32FuŒLöesStd
 = 
VMAX_5M30
*30/
f32Fps
;

253 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

257 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

259 i‡((
f32Fps
 <= 60) && (f32Fps >= 0.5))

261 
gu32FuŒLöesStd
 = 
VMAX_1080P60
*60/
f32Fps
;

265 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

272 
¥ötf
("NŸ suµ‹t! gu8Sís‹ImageMode:%d, f32Fps:%f\n", 
gu8Sís‹ImageMode
, 
f32Fps
);

276 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

278 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

280 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

281 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF00) >> 8;

285 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

286 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF00) >> 8;

290 
	gp°AeSnsD·
->
	gf32Fps
 = 
f32Fps
;

291 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

292 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

293 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

295 
	ggu32FuŒLöes
 = 
gu32FuŒLöesStd
;

300 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

301 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

303 
	gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

304 
	ggu32FuŒLöes
 = 
u32FuŒLöes
;

306 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

308 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u32D©a
 = (
gu32FuŒLöes
 & 0xFF);

309 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF00) >> 8;

313 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

314 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF00) >> 8;

317 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 2;

323 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

325 
HI_BOOL
 
	gbFú°
 = 
HI_TRUE
;

326 
HI_U32
 
	gu32VÆue
 = 
gu32FuŒLöes
 - 
u32I¡Time
;

328 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

330 i‡(
bFú°
)

332 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
u32D©a
 = (
u32VÆue
 & 0xFF);

333 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

334 
	gbFú°
 = 
HI_FALSE
;

338 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

339 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

340 
	gbFú°
 = 
HI_TRUE
;

345 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

346 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

347 
	gbFú°
 = 
HI_TRUE
;

353 
HI_U32
 
	gad_gaö_èbÀ
[241]=

369 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

371 
	gi
;

373 i‡(*
	gpu32AgaöLö
 >
ad_gaö_èbÀ
[240])

375 *
pu32AgaöLö
 = 
ad_gaö_èbÀ
[240];

376 *
	gpu32AgaöDb
 = 240;

380 
	gi
 = 1; i < 241; i++)

382 i‡(*
	gpu32AgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

384 *
	gpu32AgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

385 *
	gpu32AgaöDb
 = 
i
 - 1;

393 
HI_VOID
 
cmos_dgaö_ˇlc_èbÀ
(
HI_U32
 *
pu32DgaöLö
, HI_U32 *
pu32DgaöDb
)

395 
	gi
;

397 i‡(*
	gpu32DgaöLö
 >
ad_gaö_èbÀ
[240])

399 *
pu32DgaöLö
 = 
ad_gaö_èbÀ
[240];

400 *
	gpu32DgaöDb
 = 240;

404 
	gi
 = 1; i < 241; i++)

406 i‡(*
	gpu32DgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

408 *
	gpu32DgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

409 *
	gpu32DgaöDb
 = 
i
 - 1;

417 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

420 
HI_U32
 
	gu32Tmp
 = 
u32Agaö
 + 
u32Dgaö
;

421 
	gu32Tmp
 = 
u32Tmp
 > 0x1E0 ? 0x1E0 : u32Tmp;

423 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32D©a
 = (
u32Tmp
 & 0xFF);

424 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32D©a
 = ((
u32Tmp
 & 0x100) >> 8);

430 
HI_VOID
 
cmos_gë_öâime_max
(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
)

432 if(
	gHI_NULL
 =
pu32I¡TimeMax
)

434 
¥ötf
("nullÖointer when getáe sensor IntTimeMax value!\n");

438 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

440 *
pu32I¡TimeMax
 = (
gu32FuŒLöesStd
 - 2Ë* 0x40 / 
DIV_0_TO_1
(
u32R©io
);

447 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

449 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

451 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

452 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

453 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

454 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

455 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

456 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

457 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
cmos_dgaö_ˇlc_èbÀ
;

458 
	gp°ExpFuncs
->
	gp‚_cmos_gë_öâime_max
 = 
cmos_gë_öâime_max
;

465 #ifde‡
INIFILE_CONFIG_MODE


467 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

469 
HI_U8
 
	gi
;

471 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

473 
¥ötf
("nullÖointer when getáwb default value!\n");

477 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

478 
	ggíSís‹Mode
)

481 
WDR_MODE_NONE
:

482 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[0].u16WbRefTemp;

484 
	gi
= 0; i < 4; i++)

486 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

489 
	gi
= 0; i < 6; i++)

491 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

493 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

494 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

497 
	gWDR_MODE_2To1_FRAME
:

498 
WDR_MODE_2To1_FRAME_FULL_RATE
:

499 
p°AwbSnsD·
->
u16WbRefTemp
 = 
g_AwbD·
[1].u16WbRefTemp;

500 
	gi
= 0; i < 4; i++)

502 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[1].
au16GaöOff£t
[i];

505 
	gi
= 0; i < 6; i++)

507 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[1].
as32WbP¨a
[i];

510 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[1].°Ccm, (
AWB_CCM_S
));

511 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[1].°AgcTbl, (
AWB_AGC_TABLE_S
));

519 
AWB_CCM_S
 
	gg_°AwbCcm
 =

566 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

575 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀFSWDR
 =

585 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

587 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

589 
¥ötf
("nullÖointer when getáwb default value!\n");

593 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

595 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4800;

597 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x212;

598 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

599 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

600 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1e8;

602 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 77;

603 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 67;

604 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -121;

605 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 169536;

606 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

607 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -120875;

609 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

611 
	ggíSís‹Mode
)

614 
WDR_MODE_NONE
:

615 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

618 
	gWDR_MODE_2To1_FRAME
:

619 
WDR_MODE_2To1_FRAME_FULL_RATE
:

620 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀFSWDR
, (
AWB_AGC_TABLE_S
));

630 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

632 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

634 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

641 #ifde‡
INIFILE_CONFIG_MODE


643 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

645 i‡(
	gHI_NULL
 =
p°Def
)

647 
¥ötf
("nullÖointer when get isp default value!\n");

651 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

653 
	ggíSís‹Mode
)

656 
WDR_MODE_NONE
:

657 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

658 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

659 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

660 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

661 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

662 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

664 
	gWDR_MODE_2To1_FRAME
:

665 
WDR_MODE_2To1_FRAME_FULL_RATE
:

666 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

667 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

668 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

669 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

670 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

671 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

672 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

676 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

677 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1944;

684 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

713 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀFSWDR
 =

742 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

769 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀFSWDR
 =

786 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

831 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicFSWDR
 =

876 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

891 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

935 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaFSWDR
 =

952 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„FSWDR
 =

968 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

970 i‡(
	gHI_NULL
 =
p°Def
)

972 
¥ötf
("nullÖointer when get isp default value!\n");

976 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

977 
	ggíSís‹Mode
)

980 
WDR_MODE_NONE
:

981 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

982 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

983 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

984 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

985 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

986 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

987 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

988 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

989 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

991 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

992 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

993 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

994 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

995 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

998 
	gWDR_MODE_2To1_FRAME
:

999 
WDR_MODE_2To1_FRAME_FULL_RATE
:

1000 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

1001 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

1002 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

1003 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

1004 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0xC0;

1005 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

1006 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

1007 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

1008 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

1010 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀFSWDR
, (
ISP_CMOS_AGC_TABLE_S
));

1011 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀFSWDR
, (
ISP_CMOS_NOISE_TABLE_S
));

1012 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicFSWDR
, (
ISP_CMOS_DEMOSAIC_S
));

1013 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaFSWDR
, (
ISP_CMOS_GAMMA_S
));

1014 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„FSWDR
, (
ISP_CMOS_GAMMAFE_S
));

1015 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

1018 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 2592;

1019 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1944;

1026 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

1028 
HI_S32
 
	gi
;

1030 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

1032 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

1037 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

1039 
	gi
=0; i<4; i++)

1041 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xC7;

1047 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

1049 
HI_U32
 
	gu32FuŒLöes_5Fps
 = 
VMAX_5M30
;

1050 
HI_U32
 
	gu32MaxExpTime_5Fps
 = 
VMAX_5M30
 - 2;

1052 i‡(
	gSENSOR_5M_30FPS_MODE
 =
gu8Sís‹ImageMode
)

1054 
u32FuŒLöes_5Fps
 = 
VMAX_5M30
 * 30 / 5;

1056 i‡(
	gSENSOR_1080P_60FPS_MODE
 =
gu8Sís‹ImageMode
)

1058 
u32FuŒLöes_5Fps
 = 
VMAX_1080P60
 * 60 / 5;

1065 
	gu32FuŒLöes_5Fps
 = (
u32FuŒLöes_5Fps
 > 0xFFFF) ? 0xFFFF : u32FullLines_5Fps;

1066 
	gu32MaxExpTime_5Fps
 = 2;

1068 i‡(
	gbE«bÀ
)

1070 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 
u32FuŒLöes_5Fps
 & 0xFF);

1071 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
 + 1, (
u32FuŒLöes_5Fps
 & 0xFF00) >> 8);

1072 
£ns‹_wrôe_ªgi°î
(
SHS1_ADDR
, 
u32MaxExpTime_5Fps
 & 0xFF);

1073 
£ns‹_wrôe_ªgi°î
(
SHS1_ADDR
 +1, (
u32MaxExpTime_5Fps
 & 0xFF00) >> 8);

1074 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
, 0x00);

1075 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
 +1, 0x00);

1079 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

1080 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
, 
gu32FuŒLöesStd
 & 0xFF);

1081 
£ns‹_wrôe_ªgi°î
 (
VMAX_ADDR
 + 1, (
gu32FuŒLöesStd
 & 0xFF00) >> 8);

1082 
	gbInô
 = 
HI_FALSE
;

1088 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

1090 
	gbInô
 = 
HI_FALSE
;

1092 
	gu8Mode
)

1094 
	gWDR_MODE_NONE
:

1095 
gíSís‹Mode
 = 
WDR_MODE_NONE
;

1096 
¥ötf
("linear mode\n");

1099 
	gWDR_MODE_2To1_FRAME
:

1100 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME
;

1102 
¥ötf
("2to1 half-rate frame WDR mode\n");

1105 
	gWDR_MODE_2To1_FRAME_FULL_RATE
:

1106 
gíSís‹Mode
 = 
WDR_MODE_2To1_FRAME_FULL_RATE
;

1108 
¥ötf
("2to1 full-rate frame WDR mode\n");

1112 
¥ötf
("NOT supportÅhis mode!\n");

1120 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1122 
HI_U8
 
	gu8Sís‹ImageMode
 = 
gu8Sís‹ImageMode
;

1124 
	gbInô
 = 
HI_FALSE
;

1126 i‡(
	gHI_NULL
 =
p°Sís‹ImageMode
 )

1128 
¥ötf
("nullÖointer when set image mode\n");

1132 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <1920)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1080))

1134 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 60)

1136 
u8Sís‹ImageMode
 = 
SENSOR_1080P_60FPS_MODE
;

1140 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1141 
p°Sís‹ImageMode
->
u16Width
,

1142 
p°Sís‹ImageMode
->
u16Height
,

1143 
p°Sís‹ImageMode
->
f32Fps
);

1148 if((
	gp°Sís‹ImageMode
->
	gu16Width
 <2592)&&(
p°Sís‹ImageMode
->
u16Height
 <= 1944))

1150 i‡(
p°Sís‹ImageMode
->
f32Fps
 <= 30)

1152 
u8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

1156 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1157 
p°Sís‹ImageMode
->
u16Width
,

1158 
p°Sís‹ImageMode
->
u16Height
,

1159 
p°Sís‹ImageMode
->
f32Fps
);

1166 
¥ötf
("Not support! Width:%d, Height:%d, Fps:%f\n",

1167 
p°Sís‹ImageMode
->
u16Width
,

1168 
p°Sís‹ImageMode
->
u16Height
,

1169 
p°Sís‹ImageMode
->
f32Fps
);

1173 i‡(
	gHI_FALSE
 =
bSís‹Inô
)

1175 
gu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1181 i‡(
	gu8Sís‹ImageMode
 =
gu8Sís‹ImageMode
)

1187 
	ggu8Sís‹ImageMode
 = 
u8Sís‹ImageMode
;

1193 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1195 
HI_S32
 
	gi
;

1197 i‡(
	gHI_FALSE
 =
bInô
)

1199 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_I2C_TYPE
;

1200 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1201 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 6;

1203 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1205 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1207 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1209 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1210 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu8DevAddr
 = 
£ns‹_i2c_addr
;

1211 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32AddrByãNum
 = 
£ns‹_addr_byã
;

1212 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©aByãNum
 = 
£ns‹_d©a_byã
;

1215 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu8DñayFrmNum
 = 0;

1216 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[0].
	gu32RegAddr
 = 
SHS1_ADDR
;

1217 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu8DñayFrmNum
 = 0;

1218 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gu32RegAddr
 = 
SHS1_ADDR
 + 1;

1219 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu8DñayFrmNum
 = 1;

1220 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[2].
	gu32RegAddr
 = 
GAIN_ADDR
;

1221 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu8DñayFrmNum
 = 1;

1222 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[3].
	gu32RegAddr
 = 
GAIN_ADDR
 + 1;

1223 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu8DñayFrmNum
 = 0;

1224 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
VMAX_ADDR
;

1225 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 0;

1226 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1228 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1230 
g_°SnsRegsInfo
.
a°I2cD©a
[4].
u8DñayFrmNum
 = 1;

1231 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gu32RegAddr
 = 
SHS1_ADDR
;

1232 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu8DñayFrmNum
 = 1;

1233 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gu32RegAddr
 = 
SHS1_ADDR
 + 1;

1234 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu8DñayFrmNum
 = 0;

1235 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[6].
	gu32RegAddr
 = 
VMAX_ADDR
;

1236 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu8DñayFrmNum
 = 0;

1237 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[7].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1240 
	gbInô
 = 
HI_TRUE
;

1244 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1246 i‡(
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°I2cD©a
[i].
u32D©a
)

1248 
g_°SnsRegsInfo
.
a°I2cD©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1252 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1256 i‡((
	gWDR_MODE_2To1_FRAME_FULL_RATE
 =
gíSís‹Mode
Ë|| (
WDR_MODE_2To1_FRAME
 == genSensorMode))

1258 
g_°SnsRegsInfo
.
a°I2cD©a
[0].
bUpd©e
 = 
HI_TRUE
;

1259 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[1].
	gbUpd©e
 = 
HI_TRUE
;

1260 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[4].
	gbUpd©e
 = 
HI_TRUE
;

1261 
	gg_°SnsRegsInfo
.
	ga°I2cD©a
[5].
	gbUpd©e
 = 
HI_TRUE
;

1265 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1267 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1271 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1272 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1277 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1279 
mem£t
(
pcName
, 0, (pcName));

1281 i‡(
	gHI_NULL
 =
pcP©h
)

1283 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1284 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1288 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1290 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1294 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1295 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1301 
HI_VOID
 
£ns‹_globÆ_öô
()

1303 
	ggu8Sís‹ImageMode
 = 
SENSOR_5M_30FPS_MODE
;

1304 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1305 
	ggu32FuŒLöesStd
 = 
VMAX_5M30
;

1306 
	ggu32FuŒLöes
 = 
VMAX_5M30
;

1307 
	gbInô
 = 
HI_FALSE
;

1308 
	gbSís‹Inô
 = 
HI_FALSE
;

1310 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1311 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1313 #ifde‡
INIFILE_CONFIG_MODE


1314 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1315 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1316 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1318 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1325 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1327 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1329 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1330 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1331 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1332 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1333 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1335 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1336 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1337 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1338 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1347 
£ns‹_ªgi°î_ˇŒback
()

1349 
ISP_DEV
 
	gI•Dev
 = 0;

1350 
HI_S32
 
	gs32Rë
;

1351 
ALG_LIB_S
 
	g°Lib
;

1352 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1353 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1354 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1356 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1357 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
IMX178_ID
, &
°I•Regi°î
);

1358 i‡(
	gs32Rë
)

1360 
¥ötf
("sensorÑegister callback function failed!\n");

1361  
	gs32Rë
;

1364 
	g°Lib
.
	gs32Id
 = 0;

1365 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1366 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1367 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
, &
°AeRegi°î
);

1368 i‡(
	gs32Rë
)

1370 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1371  
	gs32Rë
;

1374 
	g°Lib
.
	gs32Id
 = 0;

1375 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1376 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1377 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
, &
°AwbRegi°î
);

1378 i‡(
	gs32Rë
)

1380 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1381  
	gs32Rë
;

1387 
£ns‹_uƒegi°î_ˇŒback
()

1389 
ISP_DEV
 
	gI•Dev
 = 0;

1390 
HI_S32
 
	gs32Rë
;

1391 
ALG_LIB_S
 
	g°Lib
;

1393 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
IMX178_ID
);

1394 i‡(
	gs32Rë
)

1396 
¥ötf
("sensor unregister callback function failed!\n");

1397  
	gs32Rë
;

1400 
	g°Lib
.
	gs32Id
 = 0;

1401 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1402 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
);

1403 i‡(
	gs32Rë
)

1405 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1406  
	gs32Rë
;

1409 
	g°Lib
.
	gs32Id
 = 0;

1410 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1411 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX178_ID
);

1412 i‡(
	gs32Rë
)

1414 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1415  
	gs32Rë
;

1421 #ifde‡
__˝lu•lus


1422 #i‡
__˝lu•lus


	@component/isp/sensor/sony_imx178_37M/imx178_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

25 
	~"hi_comm_video.h
"

27 #ifde‡
HI_GPIO_I2C


28 
	~"gpioi2c_ex.h
"

30 
	~"hi_i2c.h
"

33 c⁄° 
	g£ns‹_i2c_addr
 = 0x34;

34 c⁄° 
	g£ns‹_addr_byã
 = 2;

35 c⁄° 
	g£ns‹_d©a_byã
 = 1;

36 
	gg_fd
 = -1;

38 
HI_U8
 
gu8Sís‹ImageMode
;

39 
HI_BOOL
 
bSís‹Inô
;

41 
	$£ns‹_i2c_öô
()

43 if(
g_fd
 >= 0)

47 #ifde‡
HI_GPIO_I2C


48 
ªt
;

50 
g_fd
 = 
	`›í
("/dev/gpioi2c_ex", 0);

51 if(
g_fd
 < 0)

53 
	`¥ötf
("Open gpioi2c_exÉrror!\n");

57 
ªt
;

59 
g_fd
 = 
	`›í
("/dev/i2c-0", 
O_RDWR
);

60 if(
g_fd
 < 0)

62 
	`¥ötf
("Open /dev/i2c-0Érror!\n");

66 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_SLAVE_FORCE
, 
£ns‹_i2c_addr
);

67 i‡(
ªt
 < 0)

69 
	`¥ötf
("CMD_SET_DEVÉrror!\n");

70  
ªt
;

75 
	}
}

77 
	$£ns‹_i2c_exô
()

79 i‡(
g_fd
 >= 0)

81 
	`˛o£
(
g_fd
);

82 
g_fd
 = -1;

86 
	}
}

88 
	$£ns‹_ªad_ªgi°î
(
addr
)

93 
	}
}

95 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

97 #ifde‡
HI_GPIO_I2C


98 
i2c_d©a
.
dev_addr
 = 
£ns‹_i2c_addr
;

99 
i2c_d©a
.
ªg_addr
 = 
addr
;

100 
i2c_d©a
.
addr_byã_num
 = 
£ns‹_addr_byã
;

101 
i2c_d©a
.
d©a
 = data;

102 
i2c_d©a
.
d©a_byã_num
 = 
£ns‹_d©a_byã
;

104 
ªt
 = 
	`io˘l
(
g_fd
, 
GPIO_I2C_WRITE
, &
i2c_d©a
);

106 i‡(
ªt
)

108 
	`¥ötf
("GPIO-I2C write faild!\n");

109  
ªt
;

112 
idx
 = 0;

113 
ªt
;

114 
buf
[8];

116 
buf
[
idx
++] = 
addr
 & 0xFF;

117 i‡(
£ns‹_addr_byã
 == 2)

119 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 1);

120 
buf
[
idx
++] = 
addr
 >> 8;

124 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_REG
, 0);

127 i‡(
ªt
 < 0)

129 
	`¥ötf
("CMD_SET_REG_WIDTHÉrror!\n");

133 
buf
[
idx
++] = 
d©a
;

134 i‡(
£ns‹_d©a_byã
 == 2)

136 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 1);

137 
buf
[
idx
++] = 
d©a
 >> 8;

141 
ªt
 = 
	`io˘l
(
g_fd
, 
I2C_16BIT_DATA
, 0);

144 i‡(
ªt
)

146 
	`¥ötf
("hi_i2c write faild!\n");

150 
ªt
 = 
	`wrôe
(
g_fd
, 
buf
, 
idx
);

151 if(
ªt
 < 0)

153 
	`¥ötf
("I2C_WRITEÉrror!\n");

158 
	}
}

160 
	$dñay_ms
(
ms
) {

161 
	`u¶ìp
(
ms
*1000);

162 
	}
}

164 
	$£ns‹_¥og
(* 
rom
)

166 
i
 = 0;

168 
lookup
 = 
rom
[
i
++];

169 
addr
 = (
lookup
 >> 16) & 0xFFFF;

170 
d©a
 = 
lookup
 & 0xFFFF;

171 i‡(
addr
 == 0xFFFE) {

172 
	`dñay_ms
(
d©a
);

173 } i‡(
addr
 == 0xFFFF) {

176 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

179 
	}
}

181 
£ns‹_öô_5M30
();

182 
£ns‹_öô_1080p60
();

184 
	$£ns‹_öô
()

186 
	`£ns‹_i2c_öô
();

188 i‡(1 =
gu8Sís‹ImageMode
)

190 
	`£ns‹_öô_5M30
();

191 
bSís‹Inô
 = 
HI_TRUE
;

193 i‡(2 =
gu8Sís‹ImageMode
)

195 
	`£ns‹_öô_1080p60
();

196 
bSís‹Inô
 = 
HI_TRUE
;

200 
	`¥ötf
("Not supportÅhis mode\n");

202 
	}
}

204 
	$£ns‹_exô
()

206 
	`£ns‹_i2c_exô
();

209 
	}
}

211 
	$£ns‹_öô_5M30
()

214 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x07);

216 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x00);

217 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x10);

218 
	`£ns‹_wrôe_ªgi°î
 (0x3010, 0x00);

219 
	`£ns‹_wrôe_ªgi°î
 (0x3066, 0x06);

220 
	`£ns‹_wrôe_ªgi°î
 (0x302C, 0xAB);

221 
	`£ns‹_wrôe_ªgi°î
 (0x302D, 0x09);

222 
	`£ns‹_wrôe_ªgi°î
 (0x302F, 0xE9);

223 
	`£ns‹_wrôe_ªgi°î
 (0x3030, 0x03);

224 
	`£ns‹_wrôe_ªgi°î
 (0x300D, 0x05);

225 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0x31);

226 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

229 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x30);

232 
	`£ns‹_wrôe_ªgi°î
 (0x310C, 0x00);

233 
	`£ns‹_wrôe_ªgi°î
 (0x33BE, 0x18);

234 
	`£ns‹_wrôe_ªgi°î
 (0x33BF, 0x18);

235 
	`£ns‹_wrôe_ªgi°î
 (0x33C0, 0x20);

236 
	`£ns‹_wrôe_ªgi°î
 (0x33C1, 0x20);

237 
	`£ns‹_wrôe_ªgi°î
 (0x33C2, 0x18);

238 
	`£ns‹_wrôe_ªgi°î
 (0x33C3, 0x20);

239 
	`£ns‹_wrôe_ªgi°î
 (0x33C4, 0x20);

240 
	`£ns‹_wrôe_ªgi°î
 (0x33C5, 0x00);

241 
	`£ns‹_wrôe_ªgi°î
 (0x311C, 0x34);

242 
	`£ns‹_wrôe_ªgi°î
 (0x311D, 0x28);

243 
	`£ns‹_wrôe_ªgi°î
 (0x311E, 0xAB);

244 
	`£ns‹_wrôe_ªgi°î
 (0x311F, 0x00);

245 
	`£ns‹_wrôe_ªgi°î
 (0x3120, 0x95);

246 
	`£ns‹_wrôe_ªgi°î
 (0x3121, 0x00);

247 
	`£ns‹_wrôe_ªgi°î
 (0x3122, 0xB4);

248 
	`£ns‹_wrôe_ªgi°î
 (0x3123, 0x00);

249 
	`£ns‹_wrôe_ªgi°î
 (0x3124, 0x8c);

250 
	`£ns‹_wrôe_ªgi°î
 (0x3125, 0x02);

251 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x03);

252 
	`£ns‹_wrôe_ªgi°î
 (0x312E, 0x0C);

253 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x28);

254 
	`£ns‹_wrôe_ªgi°î
 (0x3131, 0x2D);

255 
	`£ns‹_wrôe_ªgi°î
 (0x3132, 0x00);

256 
	`£ns‹_wrôe_ªgi°î
 (0x3133, 0xB4);

257 
	`£ns‹_wrôe_ªgi°î
 (0x3134, 0x00);

258 
	`£ns‹_wrôe_ªgi°î
 (0x3137, 0x50);

259 
	`£ns‹_wrôe_ªgi°î
 (0x3138, 0x08);

260 
	`£ns‹_wrôe_ªgi°î
 (0x3139, 0x00);

261 
	`£ns‹_wrôe_ªgi°î
 (0x313A, 0x07);

262 
	`£ns‹_wrôe_ªgi°î
 (0x313D, 0x05);

263 
	`£ns‹_wrôe_ªgi°î
 (0x3140, 0x06);

264 
	`£ns‹_wrôe_ªgi°î
 (0x3220, 0x8B);

265 
	`£ns‹_wrôe_ªgi°î
 (0x3221, 0x00);

266 
	`£ns‹_wrôe_ªgi°î
 (0x3222, 0x74);

267 
	`£ns‹_wrôe_ªgi°î
 (0x3223, 0x00);

268 
	`£ns‹_wrôe_ªgi°î
 (0x3226, 0xC2);

269 
	`£ns‹_wrôe_ªgi°î
 (0x3227, 0x00);

270 
	`£ns‹_wrôe_ªgi°î
 (0x32A9, 0x1B);

271 
	`£ns‹_wrôe_ªgi°î
 (0x32AA, 0x00);

272 
	`£ns‹_wrôe_ªgi°î
 (0x32B3, 0x0E);

273 
	`£ns‹_wrôe_ªgi°î
 (0x32B4, 0x00);

274 
	`£ns‹_wrôe_ªgi°î
 (0x33D6, 0x16);

275 
	`£ns‹_wrôe_ªgi°î
 (0x33D7, 0x15);

276 
	`£ns‹_wrôe_ªgi°î
 (0x33D8, 0x14);

277 
	`£ns‹_wrôe_ªgi°î
 (0x33D9, 0x10);

278 
	`£ns‹_wrôe_ªgi°î
 (0x33DA, 0x08);

281 
	`£ns‹_wrôe_ªgi°î
 (0x3011, 0x00);

282 
	`£ns‹_wrôe_ªgi°î
 (0x301B, 0x00);

283 
	`£ns‹_wrôe_ªgi°î
 (0x3037, 0x08);

284 
	`£ns‹_wrôe_ªgi°î
 (0x3038, 0x00);

285 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x00);

286 
	`£ns‹_wrôe_ªgi°î
 (0x30AD, 0x49);

287 
	`£ns‹_wrôe_ªgi°î
 (0x30AF, 0x54);

288 
	`£ns‹_wrôe_ªgi°î
 (0x30B0, 0x33);

289 
	`£ns‹_wrôe_ªgi°î
 (0x30B3, 0x0A);

290 
	`£ns‹_wrôe_ªgi°î
 (0x30C4, 0x30);

291 
	`£ns‹_wrôe_ªgi°î
 (0x3103, 0x03);

292 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x08);

293 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0x10);

294 
	`£ns‹_wrôe_ªgi°î
 (0x310F, 0x01);

295 
	`£ns‹_wrôe_ªgi°î
 (0x32E5, 0x06);

296 
	`£ns‹_wrôe_ªgi°î
 (0x32E6, 0x00);

297 
	`£ns‹_wrôe_ªgi°î
 (0x32E7, 0x1F);

298 
	`£ns‹_wrôe_ªgi°î
 (0x32E8, 0x00);

299 
	`£ns‹_wrôe_ªgi°î
 (0x32E9, 0x00);

300 
	`£ns‹_wrôe_ªgi°î
 (0x32EA, 0x00);

301 
	`£ns‹_wrôe_ªgi°î
 (0x32EB, 0x00);

302 
	`£ns‹_wrôe_ªgi°î
 (0x32EC, 0x00);

303 
	`£ns‹_wrôe_ªgi°î
 (0x32EE, 0x00);

304 
	`£ns‹_wrôe_ªgi°î
 (0x32F2, 0x02);

305 
	`£ns‹_wrôe_ªgi°î
 (0x32F4, 0x00);

306 
	`£ns‹_wrôe_ªgi°î
 (0x32F5, 0x00);

307 
	`£ns‹_wrôe_ªgi°î
 (0x32F6, 0x00);

308 
	`£ns‹_wrôe_ªgi°î
 (0x32F7, 0x00);

309 
	`£ns‹_wrôe_ªgi°î
 (0x32F8, 0x00);

310 
	`£ns‹_wrôe_ªgi°î
 (0x32FC, 0x02);

311 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x11);

312 
	`£ns‹_wrôe_ªgi°î
 (0x3338, 0x81);

313 
	`£ns‹_wrôe_ªgi°î
 (0x333D, 0x00);

314 
	`£ns‹_wrôe_ªgi°î
 (0x3362, 0x00);

315 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

316 
	`£ns‹_wrôe_ªgi°î
 (0x336E, 0x11);

317 
	`£ns‹_wrôe_ªgi°î
 (0x33B4, 0xFE);

318 
	`£ns‹_wrôe_ªgi°î
 (0x33B5, 0x06);

319 
	`£ns‹_wrôe_ªgi°î
 (0x33B9, 0x00);

322 
	`£ns‹_wrôe_ªgi°î
 (0x3034, 0x08);

323 
	`£ns‹_wrôe_ªgi°î
 (0x3035, 0x00);

324 
	`£ns‹_wrôe_ªgi°î
 (0x301F, 0xA0);

325 
	`£ns‹_wrôe_ªgi°î
 (0x3020, 0x00);

327 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

328 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x00);

329 
	`£ns‹_wrôe_ªgi°î
 (0x305E, 0x0A);

330 
	`£ns‹_wrôe_ªgi°î
 (0x3015, 0xC8);

332 
	`¥ötf
("-------Sony IMX178 Sensor 5M30fps Initial OK!-------\n");

334 
	}
}

336 
	$£ns‹_öô_1080p60
()

339 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x07);

341 
	`£ns‹_wrôe_ªgi°î
 (0x300E, 0x01);

342 
	`£ns‹_wrôe_ªgi°î
 (0x300F, 0x00);

343 
	`£ns‹_wrôe_ªgi°î
 (0x3010, 0x00);

344 
	`£ns‹_wrôe_ªgi°î
 (0x3066, 0x03);

345 
	`£ns‹_wrôe_ªgi°î
 (0x302C, 0x72);

346 
	`£ns‹_wrôe_ªgi°î
 (0x302D, 0x06);

347 
	`£ns‹_wrôe_ªgi°î
 (0x302F, 0xEE);

348 
	`£ns‹_wrôe_ªgi°î
 (0x3030, 0x02);

349 
	`£ns‹_wrôe_ªgi°î
 (0x300D, 0x05);

350 
	`£ns‹_wrôe_ªgi°î
 (0x3059, 0x31);

351 
	`£ns‹_wrôe_ªgi°î
 (0x3004, 0x03);

354 
	`£ns‹_wrôe_ªgi°î
 (0x3101, 0x30);

357 
	`£ns‹_wrôe_ªgi°î
 (0x310C, 0x00);

358 
	`£ns‹_wrôe_ªgi°î
 (0x33BE, 0x18);

359 
	`£ns‹_wrôe_ªgi°î
 (0x33BF, 0x18);

360 
	`£ns‹_wrôe_ªgi°î
 (0x33C0, 0x20);

361 
	`£ns‹_wrôe_ªgi°î
 (0x33C1, 0x20);

362 
	`£ns‹_wrôe_ªgi°î
 (0x33C2, 0x18);

363 
	`£ns‹_wrôe_ªgi°î
 (0x33C3, 0x20);

364 
	`£ns‹_wrôe_ªgi°î
 (0x33C4, 0x20);

365 
	`£ns‹_wrôe_ªgi°î
 (0x33C5, 0x00);

366 
	`£ns‹_wrôe_ªgi°î
 (0x311C, 0x34);

367 
	`£ns‹_wrôe_ªgi°î
 (0x311D, 0x28);

368 
	`£ns‹_wrôe_ªgi°î
 (0x311E, 0xAB);

369 
	`£ns‹_wrôe_ªgi°î
 (0x311F, 0x00);

370 
	`£ns‹_wrôe_ªgi°î
 (0x3120, 0x95);

371 
	`£ns‹_wrôe_ªgi°î
 (0x3121, 0x00);

372 
	`£ns‹_wrôe_ªgi°î
 (0x3122, 0xB4);

373 
	`£ns‹_wrôe_ªgi°î
 (0x3123, 0x00);

374 
	`£ns‹_wrôe_ªgi°î
 (0x3124, 0x8c);

375 
	`£ns‹_wrôe_ªgi°î
 (0x3125, 0x02);

376 
	`£ns‹_wrôe_ªgi°î
 (0x312D, 0x03);

377 
	`£ns‹_wrôe_ªgi°î
 (0x312E, 0x0C);

378 
	`£ns‹_wrôe_ªgi°î
 (0x312F, 0x28);

379 
	`£ns‹_wrôe_ªgi°î
 (0x3131, 0x2D);

380 
	`£ns‹_wrôe_ªgi°î
 (0x3132, 0x00);

381 
	`£ns‹_wrôe_ªgi°î
 (0x3133, 0xB4);

382 
	`£ns‹_wrôe_ªgi°î
 (0x3134, 0x00);

383 
	`£ns‹_wrôe_ªgi°î
 (0x3137, 0x50);

384 
	`£ns‹_wrôe_ªgi°î
 (0x3138, 0x08);

385 
	`£ns‹_wrôe_ªgi°î
 (0x3139, 0x00);

386 
	`£ns‹_wrôe_ªgi°î
 (0x313A, 0x07);

387 
	`£ns‹_wrôe_ªgi°î
 (0x313D, 0x05);

388 
	`£ns‹_wrôe_ªgi°î
 (0x3140, 0x06);

389 
	`£ns‹_wrôe_ªgi°î
 (0x3220, 0x8B);

390 
	`£ns‹_wrôe_ªgi°î
 (0x3221, 0x00);

391 
	`£ns‹_wrôe_ªgi°î
 (0x3222, 0x74);

392 
	`£ns‹_wrôe_ªgi°î
 (0x3223, 0x00);

393 
	`£ns‹_wrôe_ªgi°î
 (0x3226, 0xC2);

394 
	`£ns‹_wrôe_ªgi°î
 (0x3227, 0x00);

395 
	`£ns‹_wrôe_ªgi°î
 (0x32A9, 0x1B);

396 
	`£ns‹_wrôe_ªgi°î
 (0x32AA, 0x00);

397 
	`£ns‹_wrôe_ªgi°î
 (0x32B3, 0x0E);

398 
	`£ns‹_wrôe_ªgi°î
 (0x32B4, 0x00);

399 
	`£ns‹_wrôe_ªgi°î
 (0x33D6, 0x16);

400 
	`£ns‹_wrôe_ªgi°î
 (0x33D7, 0x15);

401 
	`£ns‹_wrôe_ªgi°î
 (0x33D8, 0x14);

402 
	`£ns‹_wrôe_ªgi°î
 (0x33D9, 0x10);

403 
	`£ns‹_wrôe_ªgi°î
 (0x33DA, 0x08);

406 
	`£ns‹_wrôe_ªgi°î
 (0x3011, 0x00);

407 
	`£ns‹_wrôe_ªgi°î
 (0x301B, 0x00);

408 
	`£ns‹_wrôe_ªgi°î
 (0x3037, 0x08);

409 
	`£ns‹_wrôe_ªgi°î
 (0x3038, 0x00);

410 
	`£ns‹_wrôe_ªgi°î
 (0x3039, 0x00);

411 
	`£ns‹_wrôe_ªgi°î
 (0x30AD, 0x49);

412 
	`£ns‹_wrôe_ªgi°î
 (0x30AF, 0x54);

413 
	`£ns‹_wrôe_ªgi°î
 (0x30B0, 0x33);

414 
	`£ns‹_wrôe_ªgi°î
 (0x30B3, 0x0A);

415 
	`£ns‹_wrôe_ªgi°î
 (0x30C4, 0x30);

416 
	`£ns‹_wrôe_ªgi°î
 (0x3103, 0x03);

417 
	`£ns‹_wrôe_ªgi°î
 (0x3104, 0x08);

418 
	`£ns‹_wrôe_ªgi°î
 (0x3107, 0x10);

419 
	`£ns‹_wrôe_ªgi°î
 (0x310F, 0x01);

420 
	`£ns‹_wrôe_ªgi°î
 (0x32E5, 0x06);

421 
	`£ns‹_wrôe_ªgi°î
 (0x32E6, 0x00);

422 
	`£ns‹_wrôe_ªgi°î
 (0x32E7, 0x1F);

423 
	`£ns‹_wrôe_ªgi°î
 (0x32E8, 0x00);

424 
	`£ns‹_wrôe_ªgi°î
 (0x32E9, 0x00);

425 
	`£ns‹_wrôe_ªgi°î
 (0x32EA, 0x00);

426 
	`£ns‹_wrôe_ªgi°î
 (0x32EB, 0x00);

427 
	`£ns‹_wrôe_ªgi°î
 (0x32EC, 0x00);

428 
	`£ns‹_wrôe_ªgi°î
 (0x32EE, 0x00);

429 
	`£ns‹_wrôe_ªgi°î
 (0x32F2, 0x02);

430 
	`£ns‹_wrôe_ªgi°î
 (0x32F4, 0x00);

431 
	`£ns‹_wrôe_ªgi°î
 (0x32F5, 0x00);

432 
	`£ns‹_wrôe_ªgi°î
 (0x32F6, 0x00);

433 
	`£ns‹_wrôe_ªgi°î
 (0x32F7, 0x00);

434 
	`£ns‹_wrôe_ªgi°î
 (0x32F8, 0x00);

435 
	`£ns‹_wrôe_ªgi°î
 (0x32FC, 0x02);

436 
	`£ns‹_wrôe_ªgi°î
 (0x3310, 0x11);

437 
	`£ns‹_wrôe_ªgi°î
 (0x3338, 0x81);

438 
	`£ns‹_wrôe_ªgi°î
 (0x333D, 0x00);

439 
	`£ns‹_wrôe_ªgi°î
 (0x3362, 0x00);

440 
	`£ns‹_wrôe_ªgi°î
 (0x336B, 0x02);

441 
	`£ns‹_wrôe_ªgi°î
 (0x336E, 0x11);

442 
	`£ns‹_wrôe_ªgi°î
 (0x33B4, 0xFE);

443 
	`£ns‹_wrôe_ªgi°î
 (0x33B5, 0x06);

444 
	`£ns‹_wrôe_ªgi°î
 (0x33B9, 0x00);

447 
	`£ns‹_wrôe_ªgi°î
 (0x3034, 0x08);

448 
	`£ns‹_wrôe_ªgi°î
 (0x3035, 0x00);

449 
	`£ns‹_wrôe_ªgi°î
 (0x301F, 0xA0);

450 
	`£ns‹_wrôe_ªgi°î
 (0x3020, 0x00);

452 
	`£ns‹_wrôe_ªgi°î
 (0x3000, 0x00);

453 
	`£ns‹_wrôe_ªgi°î
 (0x3008, 0x00);

454 
	`£ns‹_wrôe_ªgi°î
 (0x305E, 0x0A);

455 
	`£ns‹_wrôe_ªgi°î
 (0x3015, 0xC8);

457 
	`¥ötf
("-------Sony IMX178 Sensor 1080p60fps Initial OK!-------\n");

459 
	}
}

	@component/isp/sensor/sony_imx185/imx185_cmos.c

1 #i‡!
deföed
(
__IMX185_CMOS_H_
)

2 
	#__IMX185_CMOS_H_


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~"hi_comm_¢s.h
"

8 
	~"hi_comm_video.h
"

9 
	~"hi_¢s_˘æ.h
"

10 
	~"mpi_i•.h
"

11 
	~"mpi_´.h
"

12 
	~"mpi_awb.h
"

13 
	~"mpi_af.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#IMX185_ID
 185

	)

25 #ifde‡
INIFILE_CONFIG_MODE


27 
AE_SENSOR_DEFAULT_S
 
g_AeD·
[];

28 
AWB_SENSOR_DEFAULT_S
 
g_AwbD·
[];

29 
ISP_CMOS_DEFAULT_S
 
g_I•D·
[];

30 
HI_S32
 
Cmos_LﬂdINIP¨a
(c⁄° 
HI_CHAR
 *
pcName
);

39 
	#SHS1_ADDR
 (0x220)

	)

40 
	#GAIN_ADDR
 (0x214)

	)

41 
	#VMAX_ADDR
 (0x218)

	)

42 
	#HMAX_ADDR
 (0x21B)

	)

43 
	#INCREASE_LINES
 (1Ë

	)

44 
	#VMAX_1080P30
 (1125+
INCREASE_LINES
)

	)

45 
	#VMAX_1080P30_WDR
 (1125+
INCREASE_LINES
)

	)

47 
HI_BOOL
 
	gbInô
 = 
HI_FALSE
;

48 
HI_BOOL
 
	gbSís‹Inô
 = 
HI_FALSE
;

49 
HI_U32
 
	ggu32FuŒLöesStd
 = 
VMAX_1080P30
;

50 
HI_U32
 
	ggu32FuŒLöes
 = 
VMAX_1080P30
;

52 
WDR_MODE_E
 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

54 
ISP_SNS_REGS_INFO_S
 
	gg_°SnsRegsInfo
 = {0};

55 
ISP_SNS_REGS_INFO_S
 
	gg_°PªSnsRegsInfo
 = {0};

57 
	#PATHLEN_MAX
 256

	)

58 
	#CMOS_CFG_INI
 "imx185_cfg.öi"

	)

59 
	gpcName
[
PATHLEN_MAX
] = "configs/imx185_cfg.ini";

63 
ISP_AE_ROUTE_S
 
	gg°AERouãAâr
 =

74 #ifde‡
INIFILE_CONFIG_MODE


76 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

78 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

80 
¥ötf
("nullÖointer when getáe default value!\n");

84 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

85 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

86 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

88 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

89 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

90 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.1083;

92 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

93 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.3;

95 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

96 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.3;

98 
	ggíSís‹Mode
)

101 
WDR_MODE_NONE
:

102 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

103 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

104 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

105 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

107 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[0].
u8AeCom≥nßti⁄
;

109 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

110 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

111 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MaxI¡TimeT¨gë
;

112 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[0].
u32MöI¡TimeT¨gë
;

114 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

115 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

116 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[0].
u32MaxAgaöT¨gë
;

117 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[0].
u32MöAgaöT¨gë
;

119 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

120 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

121 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxDgaöT¨gë
;

122 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[0].
u32MöDgaöT¨gë
;

124 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[0].
u32ISPDgaöShi·
;

125 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MöISPDgaöT¨gë
;

126 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[0].
u32MaxISPDgaöT¨gë
;

128 
	gWDR_MODE_BUILT_IN
:

129 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xC;

130 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

131 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

132 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

134 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 
g_AeD·
[1].
u8AeCom≥nßti⁄
;

136 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 70*16;

137 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 5*16;

138 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MaxI¡TimeT¨gë
;

139 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
g_AeD·
[1].
u32MöI¡TimeT¨gë
;

141 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 1719;

143 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1719;

144 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
g_AeD·
[1].
u32MaxAgaöT¨gë
;

145 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
g_AeD·
[1].
u32MöAgaöT¨gë
;

147 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 3938;

149 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

150 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxDgaöT¨gë
;

151 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
g_AeD·
[1].
u32MöDgaöT¨gë
;

153 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 
g_AeD·
[1].
u32ISPDgaöShi·
;

154 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MöISPDgaöT¨gë
;

155 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 
g_AeD·
[1].
u32MaxISPDgaöT¨gë
;

157 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr
, (
ISP_AE_ROUTE_S
));

166 
HI_S32
 
cmos_gë_´_deÁu…
(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

168 i‡(
	gHI_NULL
 =
p°AeSnsD·
)

170 
¥ötf
("nullÖointer when getáe default value!\n");

174 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
*30/2;

175 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

176 
	gp°AeSnsD·
->
	gu32FlickîFªq
 = 0;

178 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_LINEAR
;

179 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Accuøcy
 = 1;

180 
	gp°AeSnsD·
->
	g°I¡TimeAccu
.
	gf32Off£t
 = 0.1083;

182 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

183 
	gp°AeSnsD·
->
	g°AgaöAccu
.
	gf32Accuøcy
 = 0.3;

185 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gíAccuTy≥
 = 
AE_ACCURACY_TABLE
;

186 
	gp°AeSnsD·
->
	g°DgaöAccu
.
	gf32Accuøcy
 = 0.3;

188 
	gp°AeSnsD·
->
	gu32ISPDgaöShi·
 = 8;

189 
	gp°AeSnsD·
->
	gu32MöISPDgaöT¨gë
 = 1 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

190 
	gp°AeSnsD·
->
	gu32MaxISPDgaöT¨gë
 = 8 << 
p°AeSnsD·
->
u32ISPDgaöShi·
;

192 
	ggíSís‹Mode
)

195 
WDR_MODE_NONE
:

196 
p°AeSnsD·
->
au8Hi°Thªsh
[0] = 0xd;

197 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x28;

198 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

199 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

201 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x38;

203 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 1;

204 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 2;

205 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 65535;

206 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 2;

208 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 16229;

209 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1024;

210 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxAgaö
;

211 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

213 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 16229;

214 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

215 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 
p°AeSnsD·
->
u32MaxDgaö
;

216 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

218 
	gWDR_MODE_BUILT_IN
:

219 
p°AeSnsD·
->
°I¡TimeAccu
.
f32Accuøcy
 = 16;

221 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[0] = 0xC;

222 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[1] = 0x18;

223 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[2] = 0x60;

224 
	gp°AeSnsD·
->
	gau8Hi°Thªsh
[3] = 0x80;

226 
	gp°AeSnsD·
->
	gu8AeCom≥nßti⁄
 = 0x40;

228 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 70*16;

229 
	gp°AeSnsD·
->
	gu32MöI¡Time
 = 5*16;

230 
	gp°AeSnsD·
->
	gu32MaxI¡TimeT¨gë
 = 
p°AeSnsD·
->
u32MaxI¡Time
;

231 
	gp°AeSnsD·
->
	gu32MöI¡TimeT¨gë
 = 
p°AeSnsD·
->
u32MöI¡Time
;

233 
	gp°AeSnsD·
->
	gu32MaxAgaö
 = 1719;

234 
	gp°AeSnsD·
->
	gu32MöAgaö
 = 1719;

235 
	gp°AeSnsD·
->
	gu32MaxAgaöT¨gë
 = 1719;

236 
	gp°AeSnsD·
->
	gu32MöAgaöT¨gë
 = 
p°AeSnsD·
->
u32MöAgaö
;

238 
	gp°AeSnsD·
->
	gu32MaxDgaö
 = 3938;

239 
	gp°AeSnsD·
->
	gu32MöDgaö
 = 1024;

240 
	gp°AeSnsD·
->
	gu32MaxDgaöT¨gë
 = 3938;

241 
	gp°AeSnsD·
->
	gu32MöDgaöT¨gë
 = 
p°AeSnsD·
->
u32MöDgaö
;

243 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr
, (
ISP_AE_ROUTE_S
));

254 
HI_VOID
 
cmos_Âs_£t
(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

256 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

258 i‡(30 =
f32Fps
)

260 
gu32FuŒLöesStd
 = 
VMAX_1080P30_WDR
;

261 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr
, (
ISP_AE_ROUTE_S
));

262 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 70*16;

264 i‡(25 =
f32Fps
)

266 
gu32FuŒLöesStd
 = 
VMAX_1080P30_WDR
 * 30 /
f32Fps
;

267 
mem˝y
(&
p°AeSnsD·
->
°AERouãAâr
, &
g°AERouãAâr
, (
ISP_AE_ROUTE_S
));

268 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 70*16;

272 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

275 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

277 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

279 i‡((
f32Fps
 <= 30) && (f32Fps >= 0.5))

281 
gu32FuŒLöesStd
 = 
VMAX_1080P30
*30/
f32Fps
;

285 
¥ötf
("NŸ suµ‹àFps: %f\n", 
f32Fps
);

288 
	ggu32FuŒLöesStd
 = (
gu32FuŒLöesStd
 > 0xFFFF) ? 0xFFFF : gu32FullLinesStd;

289 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöesStd
 - 2;

292 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

294 
g_°SnsRegsInfo
.
a°S•D©a
[3].
u32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

295 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

299 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32D©a
 = (
gu32FuŒLöesStd
 & 0xFF);

300 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32D©a
 = ((
gu32FuŒLöesStd
 & 0xFF00) >> 8);

303 
	gp°AeSnsD·
->
	gu32LöesPî500ms
 = 
gu32FuŒLöesStd
 * 
f32Fps
 / 2;

304 
	gp°AeSnsD·
->
	gu32FuŒLöesStd
 = 
gu32FuŒLöesStd
;

305 
	ggu32FuŒLöes
 = 
gu32FuŒLöesStd
;

310 
HI_VOID
 
cmos_¶ow_‰amî©e_£t
(
HI_U32
 
u32FuŒLöes
,

311 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
)

313 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

315 
gu32FuŒLöes
 = (
u32FuŒLöes
 > 0xFFFF) ? 0xFFFF : u32FullLines;

317 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32D©a
 = (
gu32FuŒLöes
 & 0xFF);

318 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32D©a
 = ((
gu32FuŒLöes
 & 0xFF00) >> 8);

320 
	gp°AeSnsD·
->
	gu32MaxI¡Time
 = 
gu32FuŒLöes
 - 2;

326 
HI_VOID
 
cmos_öâime_upd©e
(
HI_U32
 
u32I¡Time
)

328 
HI_U32
 
	gu32VÆue
, 
	gu32VÆueL⁄g
;

330 
	gu32VÆue
 = 
gu32FuŒLöes
 - 1 - 
u32I¡Time
;

331 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

332 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

335 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

337 
u32VÆueL⁄g
 = 
gu32FuŒLöes
 - 1 - 
u32I¡Time
;

338 
	gu32VÆue
 = 
gu32FuŒLöes
 - 1 - 
u32I¡Time
/16;

339 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32D©a
 = (
u32VÆue
 & 0xFF);

340 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32D©a
 = ((
u32VÆue
 & 0xFF00) >> 8);

341 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32D©a
 = (
u32VÆueL⁄g
 & 0xFF);

342 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32D©a
 = ((
u32VÆueL⁄g
 & 0xFF00) >> 8);

349 
HI_U32
 
	gad_gaö_èbÀ
[81]=

359 
HI_VOID
 
cmos_agaö_ˇlc_èbÀ
(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
)

361 
	gi
;

363 if((
	gHI_NULL
 =
pu32AgaöLö
Ë||(
HI_NULL
 =
pu32AgaöDb
))

365 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

369 i‡(*
	gpu32AgaöLö
 >
ad_gaö_èbÀ
[80])

371 *
pu32AgaöLö
 = 
ad_gaö_èbÀ
[80];

372 *
	gpu32AgaöDb
 = 80;

376 
	gi
 = 1; i < 81; i++)

378 i‡(*
	gpu32AgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

380 *
	gpu32AgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

381 *
	gpu32AgaöDb
 = 
i
 - 1;

389 
HI_VOID
 
cmos_dgaö_ˇlc_èbÀ
(
HI_U32
 *
pu32DgaöLö
, HI_U32 *
pu32DgaöDb
)

391 
	gi
;

393 if((
	gHI_NULL
 =
pu32DgaöLö
Ë||(
HI_NULL
 =
pu32DgaöDb
))

395 
¥ötf
("nullÖointer when getáe sensor gain info value!\n");

399 i‡(*
	gpu32DgaöLö
 >
ad_gaö_èbÀ
[80])

401 *
pu32DgaöLö
 = 
ad_gaö_èbÀ
[80];

402 *
	gpu32DgaöDb
 = 80;

406 
	gi
 = 1; i < 81; i++)

408 i‡(*
	gpu32DgaöLö
 < 
	gad_gaö_èbÀ
[
i
])

410 *
	gpu32DgaöLö
 = 
ad_gaö_èbÀ
[
i
 - 1];

411 *
	gpu32DgaöDb
 = 
i
 - 1;

419 
HI_VOID
 
cmos_gaös_upd©e
(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
)

422 
HI_U32
 
	gu32Tmp
 = 
u32Agaö
 + 
u32Dgaö
;

424 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

426 
u32Tmp
 = 
u32Dgaö
;

429 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32D©a
 = (
u32Tmp
 & 0xFF);

434 
HI_S32
 
cmos_öô_´_exp_fun˘i⁄
(
AE_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

436 
mem£t
(
p°ExpFuncs
, 0, (
AE_SENSOR_EXP_FUNC_S
));

438 
	gp°ExpFuncs
->
	gp‚_cmos_gë_´_deÁu…
 = 
cmos_gë_´_deÁu…
;

439 
	gp°ExpFuncs
->
	gp‚_cmos_Âs_£t
 = 
cmos_Âs_£t
;

440 
	gp°ExpFuncs
->
	gp‚_cmos_¶ow_‰amî©e_£t

cmos_¶ow_‰amî©e_£t
;

441 
	gp°ExpFuncs
->
	gp‚_cmos_öâime_upd©e
 = 
cmos_öâime_upd©e
;

442 
	gp°ExpFuncs
->
	gp‚_cmos_gaös_upd©e
 = 
cmos_gaös_upd©e
;

443 
	gp°ExpFuncs
->
	gp‚_cmos_agaö_ˇlc_èbÀ
 = 
cmos_agaö_ˇlc_èbÀ
;

444 
	gp°ExpFuncs
->
	gp‚_cmos_dgaö_ˇlc_èbÀ
 = 
cmos_dgaö_ˇlc_èbÀ
;

451 #ifde‡
INIFILE_CONFIG_MODE


453 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

455 
HI_U8
 
	gi
;

457 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

459 
¥ötf
("nullÖointer when getáwb default value!\n");

463 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

464 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 
g_AwbD·
[0].
u16WbRefTemp
;

466 
	gi
= 0; i < 4; i++)

468 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[
i
] = 
g_AwbD·
[0].
au16GaöOff£t
[i];

471 
	gi
= 0; i < 6; i++)

473 
	gp°AwbSnsD·
->
	gas32WbP¨a
[
i
] = 
g_AwbD·
[0].
as32WbP¨a
[i];

477 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_AwbD·
[0].°Ccm, (
AWB_CCM_S
));

478 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_AwbD·
[0].°AgcTbl, (
AWB_AGC_TABLE_S
));

485 
AWB_CCM_S
 
	gg_°AwbCcm
 =

509 
AWB_AGC_TABLE_S
 
	gg_°AwbAgcTabÀ
 =

518 
HI_S32
 
cmos_gë_awb_deÁu…
(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
)

520 i‡(
	gHI_NULL
 =
p°AwbSnsD·
)

522 
¥ötf
("nullÖointer when getáwb default value!\n");

526 
mem£t
(
p°AwbSnsD·
, 0, (
AWB_SENSOR_DEFAULT_S
));

527 
	gp°AwbSnsD·
->
	gu16WbRefTemp
 = 4900;

529 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[0] = 0x1D0;

530 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[1] = 0x100;

531 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[2] = 0x100;

532 
	gp°AwbSnsD·
->
	gau16GaöOff£t
[3] = 0x1F4;

534 
	gp°AwbSnsD·
->
	gas32WbP¨a
[0] = 21;

535 
	gp°AwbSnsD·
->
	gas32WbP¨a
[1] = 147;

536 
	gp°AwbSnsD·
->
	gas32WbP¨a
[2] = -87;

537 
	gp°AwbSnsD·
->
	gas32WbP¨a
[3] = 179332;

538 
	gp°AwbSnsD·
->
	gas32WbP¨a
[4] = 128;

539 
	gp°AwbSnsD·
->
	gas32WbP¨a
[5] = -130261;

541 
mem˝y
(&
p°AwbSnsD·
->
°Ccm
, &
g_°AwbCcm
, (
AWB_CCM_S
));

542 
mem˝y
(&
p°AwbSnsD·
->
°AgcTbl
, &
g_°AwbAgcTabÀ
, (
AWB_AGC_TABLE_S
));

549 
HI_S32
 
cmos_öô_awb_exp_fun˘i⁄
(
AWB_SENSOR_EXP_FUNC_S
 *
p°ExpFuncs
)

551 
mem£t
(
p°ExpFuncs
, 0, (
AWB_SENSOR_EXP_FUNC_S
));

553 
	gp°ExpFuncs
->
	gp‚_cmos_gë_awb_deÁu…
 = 
cmos_gë_awb_deÁu…
;

560 #ifde‡
INIFILE_CONFIG_MODE


562 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

564 i‡(
	gHI_NULL
 =
p°Def
)

566 
¥ötf
("nullÖointer when get isp default value!\n");

570 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

572 
	ggíSís‹Mode
)

575 
WDR_MODE_NONE
:

576 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[0].°Drc, (
ISP_CMOS_DRC_S
));

577 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[0].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

578 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[0].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

579 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[0].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

580 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[0].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

581 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[0].°Gamma, (
ISP_CMOS_GAMMA_S
));

583 
	gWDR_MODE_BUILT_IN
:

584 
mem˝y
(&
p°Def
->
°Drc
, &
g_I•D·
[1].°Drc, (
ISP_CMOS_DRC_S
));

585 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_I•D·
[1].°AgcTbl, (
ISP_CMOS_AGC_TABLE_S
));

586 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_I•D·
[1].°Noi£Tbl, (
ISP_CMOS_NOISE_TABLE_S
));

587 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_I•D·
[1].°Demoßic, (
ISP_CMOS_DEMOSAIC_S
));

588 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_I•D·
[1].°RgbSh¨≥n, (
ISP_CMOS_RGBSHARPEN_S
));

589 
mem˝y
(&
p°Def
->
°Gamma
, &
g_I•D·
[1].°Gamma, (
ISP_CMOS_GAMMA_S
));

590 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_I•D·
[1].°Gamma„, (
ISP_CMOS_GAMMAFE_S
));

595 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

596 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

603 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀ
 =

632 
ISP_CMOS_AGC_TABLE_S
 
	gg_°I•AgcTabÀBuûtInWDR
 =

660 
ISP_CMOS_NOISE_TABLE_S
 
	gg_°I•Noi£TabÀ
 =

692 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•Demoßic
 =

737 
ISP_CMOS_DEMOSAIC_S
 
	gg_°I•DemoßicBuûtInWDR
 =

782 
ISP_CMOS_RGBSHARPEN_S
 
	gg_°I•RgbSh¨≥n
 =

797 
ISP_CMOS_GAMMA_S
 
	gg_°I•Gamma
 =

821 
ISP_CMOS_GAMMA_S
 
	gg_°I•GammaBuûtInWDR
 =

838 
ISP_CMOS_GAMMAFE_S
 
	gg_°Gamma„BuûtInWDR
 =

857 
HI_U32
 
cmos_gë_i•_deÁu…
(
ISP_CMOS_DEFAULT_S
 *
p°Def
)

859 i‡(
	gHI_NULL
 =
p°Def
)

861 
¥ötf
("nullÖointer when get isp default value!\n");

865 
mem£t
(
p°Def
, 0, (
ISP_CMOS_DEFAULT_S
));

867 
	ggíSís‹Mode
)

870 
WDR_MODE_NONE
:

871 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_FALSE
;

872 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

873 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0x4FF;

874 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x30;

875 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

876 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x04;

877 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x01;

878 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

879 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

881 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

882 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀ
, (
ISP_CMOS_AGC_TABLE_S
));

883 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•Demoßic
, (
ISP_CMOS_DEMOSAIC_S
));

884 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•Gamma
, (
ISP_CMOS_GAMMA_S
));

885 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

887 
	gWDR_MODE_BUILT_IN
:

888 
p°Def
->
°Drc
.
bE«bÀ
 = 
HI_TRUE
;

889 
	gp°Def
->
	g°Drc
.
	gu32BœckLevñ
 = 0x00;

890 
	gp°Def
->
	g°Drc
.
	gu32WhôeLevñ
 = 0xFFF;

891 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMax
 = 0x38;

892 
	gp°Def
->
	g°Drc
.
	gu32Sl›eMö
 = 0x00;

893 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚S∑˚
 = 0x0A;

894 
	gp°Def
->
	g°Drc
.
	gu32V¨ün˚I¡ísôy
 = 0x04;

895 
	gp°Def
->
	g°Drc
.
	gu32Asymmëry
 = 0x14;

896 
	gp°Def
->
	g°Drc
.
	gu32BrightEnh™˚
 = 0xC8;

898 
mem˝y
(&
p°Def
->
°Noi£Tbl
, &
g_°I•Noi£TabÀ
, (
ISP_CMOS_NOISE_TABLE_S
));

899 
mem˝y
(&
p°Def
->
°AgcTbl
, &
g_°I•AgcTabÀBuûtInWDR
, (
ISP_CMOS_AGC_TABLE_S
));

900 
mem˝y
(&
p°Def
->
°Demoßic
, &
g_°I•DemoßicBuûtInWDR
, (
ISP_CMOS_DEMOSAIC_S
));

901 
mem˝y
(&
p°Def
->
°Gamma
, &
g_°I•GammaBuûtInWDR
, (
ISP_CMOS_GAMMA_S
));

902 
mem˝y
(&
p°Def
->
°Gamma„
, &
g_°Gamma„BuûtInWDR
, (
ISP_CMOS_GAMMAFE_S
));

903 
mem˝y
(&
p°Def
->
°RgbSh¨≥n
, &
g_°I•RgbSh¨≥n
, (
ISP_CMOS_RGBSHARPEN_S
));

907 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxWidth
 = 1920;

908 
	gp°Def
->
	g°Sís‹MaxResﬁuti⁄
.
	gu32MaxHeight
 = 1080;

915 
HI_U32
 
cmos_gë_i•_bœck_Àvñ
(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
)

917 
HI_S32
 
	gi
;

919 i‡(
	gHI_NULL
 =
p°BœckLevñ
)

921 
¥ötf
("nullÖointer when get isp blackÜevel value!\n");

926 
	gp°BœckLevñ
->
	gbUpd©e
 = 
HI_FALSE
;

928 i‡(
	gWDR_MODE_NONE
 =
gíSís‹Mode
)

930 
i
=0; 
	gi
<4; i++)

932 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xF0;

935 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

937 
i
=0; 
	gi
<4; i++)

939 
	gp°BœckLevñ
->
	gau16BœckLevñ
[
i
] = 0xEA;

948 
HI_VOID
 
cmos_£t_pixñ_dëe˘
(
HI_BOOL
 
bE«bÀ
)

950 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

955 i‡(
	gbE«bÀ
)

959 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, 0x5E);

960 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
 + 1, 0x1A);

963 
£ns‹_wrôe_ªgi°î
(
SHS1_ADDR
, 0x2);

964 
£ns‹_wrôe_ªgi°î
(
SHS1_ADDR
 + 1, 0);

965 
£ns‹_wrôe_ªgi°î
(
GAIN_ADDR
, 0x00);

969 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
, (
gu32FuŒLöesStd
 & 0xff));

970 
£ns‹_wrôe_ªgi°î
(
VMAX_ADDR
 + 1, (
gu32FuŒLöesStd
 & 0xff00)>>8);

971 
	gbInô
 = 
HI_FALSE
;

977 
HI_VOID
 
cmos_£t_wdr_mode
(
HI_U8
 
u8Mode
)

979 
	gbInô
 = 
HI_FALSE
;

981 
	gu8Mode
)

983 
	gWDR_MODE_NONE
:

984 
gu32FuŒLöesStd
 = 
VMAX_1080P30
;

985 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

986 
¥ötf
("linear mode\n");

989 
	gWDR_MODE_BUILT_IN
:

990 
gu32FuŒLöesStd
 = 
VMAX_1080P30_WDR
;

991 
	ggíSís‹Mode
 = 
WDR_MODE_BUILT_IN
;

992 
¥ötf
("Built-in WDR mode\n");

996 
¥ötf
("NOT supportÅhis mode!\n");

1003 
HI_U32
 
cmos_gë_¢s_ªgs_öfo
(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
)

1005 
HI_S32
 
	gi
;

1007 i‡(
	gHI_FALSE
 =
bInô
)

1009 
g_°SnsRegsInfo
.
íSnsTy≥
 = 
ISP_SNS_SSP_TYPE
;

1010 
	gg_°SnsRegsInfo
.
	gu8Cfg2VÆidDñayMax
 = 2;

1011 
	gg_°SnsRegsInfo
.
	gu32RegNum
 = 5;

1012 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

1014 
g_°SnsRegsInfo
.
u32RegNum
 += 2;

1017 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1019 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1020 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32DevAddr
 = 0x02;

1021 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32DevAddrByãNum
 = 1;

1022 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32RegAddrByãNum
 = 1;

1023 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32D©aByãNum
 = 1;

1025 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu8DñayFrmNum
 = 0;

1026 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[0].
	gu32RegAddr
 = 0x20;

1027 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu8DñayFrmNum
 = 0;

1028 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[1].
	gu32RegAddr
 = 0x21;

1029 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu8DñayFrmNum
 = 1;

1030 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[2].
	gu32RegAddr
 = 0x14;

1031 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu8DñayFrmNum
 = 0;

1032 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32RegAddr
 = 
VMAX_ADDR
;

1033 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu8DñayFrmNum
 = 0;

1034 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1036 i‡(
	gWDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

1038 
g_°SnsRegsInfo
.
a°S•D©a
[3].
u8DñayFrmNum
 = 0;

1039 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[3].
	gu32RegAddr
 = 0x23;

1040 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu8DñayFrmNum
 = 0;

1041 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[4].
	gu32RegAddr
 = 0x24;

1042 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu8DñayFrmNum
 = 0;

1043 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[5].
	gu32RegAddr
 = 
VMAX_ADDR
;

1044 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu8DñayFrmNum
 = 0;

1045 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[6].
	gu32RegAddr
 = 
VMAX_ADDR
 + 1;

1048 
	gbInô
 = 
HI_TRUE
;

1052 
	gi
=0; i<
	gg_°SnsRegsInfo
.
	gu32RegNum
; i++)

1054 i‡(
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gu32D©a
 =
g_°PªSnsRegsInfo
.
a°S•D©a
[i].
u32D©a
)

1056 
g_°SnsRegsInfo
.
a°S•D©a
[
i
].
bUpd©e
 = 
HI_FALSE
;

1060 
	gg_°SnsRegsInfo
.
	ga°S•D©a
[
i
].
	gbUpd©e
 = 
HI_TRUE
;

1065 i‡(
	gHI_NULL
 =
p°SnsRegsInfo
)

1067 
¥ötf
("nullÖointer when get snsÑeg info!\n");

1071 
mem˝y
(
p°SnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1072 
mem˝y
(&
g_°PªSnsRegsInfo
, &
g_°SnsRegsInfo
, (
ISP_SNS_REGS_INFO_S
));

1077 
HI_S32
 
cmos_£t_image_mode
(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
)

1080 
	gbInô
 = 
HI_FALSE
;

1085 
£ns‹_£t_öifûe_∑th
(c⁄° *
pcP©h
)

1087 
mem£t
(
pcName
, 0, (pcName));

1089 i‡(
	gHI_NULL
 =
pcP©h
)

1091 
°∫ˇt
(
pcName
, "c⁄figs/", 
°æí
("configs/"));

1092 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1096 if(
°æí
(
pcP©h
Ë> (
	gPATHLEN_MAX
 - 30))

1098 
¥ötf
("Set inifileÖath isÜarger PATHLEN_MAX!\n");

1102 
°∫ˇt
(
pcName
, 
pcP©h
, 
°æí
(pcPath));

1103 
°∫ˇt
(
pcName
, 
CMOS_CFG_INI
, (CMOS_CFG_INI));

1109 
HI_VOID
 
£ns‹_globÆ_öô
()

1111 
	gbInô
 = 
HI_FALSE
;

1112 
	gbSís‹Inô
 = 
HI_FALSE
;

1113 
	ggu32FuŒLöesStd
 = 
VMAX_1080P30
;

1114 
	ggu32FuŒLöes
 = 
VMAX_1080P30
;

1115 
	ggíSís‹Mode
 = 
WDR_MODE_NONE
;

1117 
mem£t
(&
g_°SnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1118 
mem£t
(&
g_°PªSnsRegsInfo
, 0, (
ISP_SNS_REGS_INFO_S
));

1120 #ifde‡
INIFILE_CONFIG_MODE


1121 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1122 
	gs32Rë
 = 
Cmos_LﬂdINIP¨a
(
pcName
);

1123 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1125 
¥ötf
("Cmos_LoadINIPara failed!!!!!!\n");

1133 
HI_S32
 
cmos_öô_£ns‹_exp_fun˘i⁄
(
ISP_SENSOR_EXP_FUNC_S
 *
p°Sís‹ExpFunc
)

1135 
mem£t
(
p°Sís‹ExpFunc
, 0, (
ISP_SENSOR_EXP_FUNC_S
));

1137 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_öô
 = 
£ns‹_öô
;

1138 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_exô
 = 
£ns‹_exô
;

1139 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£ns‹_globÆ_öô
 = 
£ns‹_globÆ_öô
;

1140 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_image_mode
 = 
cmos_£t_image_mode
;

1141 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_wdr_mode
 = 
cmos_£t_wdr_mode
;

1142 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_deÁu…
 = 
cmos_gë_i•_deÁu…
;

1143 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_i•_bœck_Àvñ
 = 
cmos_gë_i•_bœck_Àvñ
;

1144 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_£t_pixñ_dëe˘
 = 
cmos_£t_pixñ_dëe˘
;

1145 
	gp°Sís‹ExpFunc
->
	gp‚_cmos_gë_¢s_ªg_öfo
 = 
cmos_gë_¢s_ªgs_öfo
;

1154 
£ns‹_ªgi°î_ˇŒback
()

1156 
HI_S32
 
	gs32Rë
;

1157 
ALG_LIB_S
 
	g°Lib
;

1158 
ISP_DEV
 
	gI•Dev
=0;

1159 
ISP_SENSOR_REGISTER_S
 
	g°I•Regi°î
;

1160 
AE_SENSOR_REGISTER_S
 
	g°AeRegi°î
;

1161 
AWB_SENSOR_REGISTER_S
 
	g°AwbRegi°î
;

1163 
cmos_öô_£ns‹_exp_fun˘i⁄
(&
°I•Regi°î
.
°SnsExp
);

1164 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹RegCÆlBack
(
I•Dev
, 
IMX185_ID
, &
°I•Regi°î
);

1165 i‡(
	gs32Rë
)

1167 
¥ötf
("sensorÑegister callback function failed!\n");

1168  
	gs32Rë
;

1171 
	g°Lib
.
	gs32Id
 = 0;

1172 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1173 
cmos_öô_´_exp_fun˘i⁄
(&
°AeRegi°î
.
°SnsExp
);

1174 
	gs32Rë
 = 
HI_MPI_AE_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX185_ID
, &
°AeRegi°î
);

1175 i‡(
	gs32Rë
)

1177 
¥ötf
("sensorÑegister callback functionÅoáeÜib failed!\n");

1178  
	gs32Rë
;

1181 
	g°Lib
.
	gs32Id
 = 0;

1182 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1183 
cmos_öô_awb_exp_fun˘i⁄
(&
°AwbRegi°î
.
°SnsExp
);

1184 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹RegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX185_ID
, &
°AwbRegi°î
);

1185 i‡(
	gs32Rë
)

1187 
¥ötf
("sensorÑegister callback functionÅoáwbÜib failed!\n");

1188  
	gs32Rë
;

1194 
£ns‹_uƒegi°î_ˇŒback
()

1196 
HI_S32
 
	gs32Rë
;

1197 
ALG_LIB_S
 
	g°Lib
;

1198 
ISP_DEV
 
	gI•Dev
=0;

1200 
	gs32Rë
 = 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
I•Dev
, 
IMX185_ID
);

1201 i‡(
	gs32Rë
)

1203 
¥ötf
("sensor unregister callback function failed!\n");

1204  
	gs32Rë
;

1207 
	g°Lib
.
	gs32Id
 = 0;

1208 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
, (HI_AE_LIB_NAME));

1209 
	gs32Rë
 = 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX185_ID
);

1210 i‡(
	gs32Rë
)

1212 
¥ötf
("sensor unregister callback functionÅoáeÜib failed!\n");

1213  
	gs32Rë
;

1216 
	g°Lib
.
	gs32Id
 = 0;

1217 
°∫˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
, (HI_AWB_LIB_NAME));

1218 
	gs32Rë
 = 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
I•Dev
, &
°Lib
, 
IMX185_ID
);

1219 i‡(
	gs32Rë
)

1221 
¥ötf
("sensor unregister callback functionÅoáwbÜib failed!\n");

1222  
	gs32Rë
;

1228 #ifde‡
__˝lu•lus


1229 #i‡
__˝lu•lus


	@component/isp/sensor/sony_imx185/imx185_sensor_ctl.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/io˘l.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~"hi_comm_video.h
"

27 
	~"hi_•i.h
"

28 
WDR_MODE_E
 
gíSís‹Mode
;

29 
HI_BOOL
 
bSís‹Inô
;

30 
	gg_fd
 = -1;

32 
	$£ns‹_•i_öô
()

34 if(
g_fd
 >= 0)

38 
vÆue
;

39 
ªt
 = 0;

40 
fûe_«me
[] = "/dev/spidev0.0";

42 
g_fd
 = 
	`›í
(
fûe_«me
, 0);

43 i‡(
g_fd
 < 0)

45 
	`¥ötf
("O≥¿%†îr‹!\n",
fûe_«me
);

49 
vÆue
 = 
SPI_MODE_3
 | 
SPI_LSB_FIRST
;

50 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MODE
, &
vÆue
);

51 i‡(
ªt
 < 0)

53 
	`¥ötf
("io˘»SPI_IOC_WR_MODEÉº, vÆuê%dÑë = %d\n", 
vÆue
, 
ªt
);

54  
ªt
;

57 
vÆue
 = 8;

58 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_BITS_PER_WORD
, &
vÆue
);

59 i‡(
ªt
 < 0)

61 
	`¥ötf
("io˘»SPI_IOC_WR_BITS_PER_WORDÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

62  
ªt
;

65 
vÆue
 = 2000000;

66 
ªt
 = 
	`io˘l
(
g_fd
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
vÆue
);

67 i‡(
ªt
 < 0)

69 
	`¥ötf
("io˘»SPI_IOC_WR_MAX_SPEED_HZÉº, vÆuê%dÑë = %d\n",
vÆue
, 
ªt
);

70  
ªt
;

74 
	}
}

76 
	$£ns‹_•i_exô
()

78 i‡(
g_fd
 >= 0)

80 
	`˛o£
(
g_fd
);

81 
g_fd
 = -1;

85 
	}
}

87 
	$£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
)

89 
ªt
;

90 
•i_ioc_å™s„r
 
mesg
[1];

91 
tx_buf
[8] = {0};

92 
rx_buf
[8] = {0};

94 
tx_buf
[0] = (
addr
 & 0xff00) >> 8;

95 
tx_buf
[0] &= (~0x80);

96 
tx_buf
[1] = 
addr
 & 0xff;

97 
tx_buf
[2] = 
d©a
;

101 
	`mem£t
(
mesg
, 0, (mesg));

102 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

103 
mesg
[0].
Àn
 = 3;

104 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

105 
mesg
[0].
cs_ch™ge
 = 1;

107 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

108 i‡(
ªt
 < 0) {

109 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

115 
	}
}

117 
	$£ns‹_ªad_ªgi°î
(
addr
)

119 
ªt
 = 0;

120 
•i_ioc_å™s„r
 
mesg
[1];

121 
tx_buf
[8] = {0};

122 
rx_buf
[8] = {0};

124 
tx_buf
[0] = (
addr
 & 0xff00) >> 8;

125 
tx_buf
[0] |= 0x80;

126 
tx_buf
[1] = 
addr
 & 0xff;

127 
tx_buf
[2] = 0;

129 
	`mem£t
(
mesg
, 0, (mesg));

130 
mesg
[0].
tx_buf
 = (
__u32
)tx_buf;

131 
mesg
[0].
Àn
 = 3;

132 
mesg
[0].
rx_buf
 = (
__u32
)rx_buf;

133 
mesg
[0].
cs_ch™ge
 = 1;

135 
ªt
 = 
	`io˘l
(
g_fd
, 
	`SPI_IOC_MESSAGE
(1), 
mesg
);

136 i‡(
ªt
 < 0) {

137 
	`¥ötf
("SPI_IOC_MESSAGEÉrror \n");

142  
rx_buf
[2];

143 
	}
}

145 
	$dñay_ms
(
ms
) {

146 
	`u¶ìp
(
ms
*1000);

147 
	}
}

149 
	$£ns‹_¥og
(* 
rom
)

151 
i
 = 0;

153 
lookup
 = 
rom
[
i
++];

154 
addr
 = (
lookup
 >> 16) & 0xFFFF;

155 
d©a
 = 
lookup
 & 0xFFFF;

156 i‡(
addr
 == 0xFFFE) {

157 
	`dñay_ms
(
d©a
);

158 } i‡(
addr
 == 0xFFFF) {

161 
	`£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

164 
	}
}

166 
	$£tup_£ns‹
(
i•_mode
)

168 
	}
}

170 
£ns‹_wdr_öô
();

171 
£ns‹_löór_1080p30_öô
();

173 
	$£ns‹_öô
()

176 
	`£ns‹_•i_öô
();

178 i‡(
HI_FALSE
 =
bSís‹Inô
)

180 if(
WDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

182 
	`£ns‹_wdr_öô
();

186 
	`£ns‹_löór_1080p30_öô
();

192 if(
WDR_MODE_BUILT_IN
 =
gíSís‹Mode
)

194 
	`£ns‹_wdr_öô
();

198 
	`£ns‹_löór_1080p30_öô
();

203 
	}
}

205 
	$£ns‹_exô
()

207 
	`£ns‹_•i_exô
();

210 
	}
}

212 
	$£ns‹_löór_1080p30_öô
()

215 
	`£ns‹_wrôe_ªgi°î
 (0x200, 0x01);

217 
	`£ns‹_wrôe_ªgi°î
 (0x205, 0x01);

218 
	`£ns‹_wrôe_ªgi°î
 (0x206, 0x00);

219 
	`£ns‹_wrôe_ªgi°î
 (0x207, 0x10);

220 
	`£ns‹_wrôe_ªgi°î
 (0x209, 0x02);

221 
	`£ns‹_wrôe_ªgi°î
 (0x218, 0x65);

222 
	`£ns‹_wrôe_ªgi°î
 (0x219, 0x04);

223 
	`£ns‹_wrôe_ªgi°î
 (0x21a, 0x00);

224 
	`£ns‹_wrôe_ªgi°î
 (0x21b, 0x98);

225 
	`£ns‹_wrôe_ªgi°î
 (0x21c, 0x08);

226 
	`£ns‹_wrôe_ªgi°î
 (0x244, 0xE1);

229 
	`£ns‹_wrôe_ªgi°î
 (0x20C, 0x00);

230 
	`£ns‹_wrôe_ªgi°î
 (0x20F, 0x01);

231 
	`£ns‹_wrôe_ªgi°î
 (0x210, 0x39);

232 
	`£ns‹_wrôe_ªgi°î
 (0x212, 0x50);

233 
	`£ns‹_wrôe_ªgi°î
 (0x21E, 0x01);

234 
	`£ns‹_wrôe_ªgi°î
 (0x265, 0x20);

235 
	`£ns‹_wrôe_ªgi°î
 (0x284, 0x00);

236 
	`£ns‹_wrôe_ªgi°î
 (0x286, 0x01);

237 
	`£ns‹_wrôe_ªgi°î
 (0x2CF, 0xD1);

238 
	`£ns‹_wrôe_ªgi°î
 (0x2D0, 0x1B);

239 
	`£ns‹_wrôe_ªgi°î
 (0x2D2, 0x5F);

240 
	`£ns‹_wrôe_ªgi°î
 (0x2D3, 0x00);

243 
	`£ns‹_wrôe_ªgi°î
 (0x31D, 0x0A);

244 
	`£ns‹_wrôe_ªgi°î
 (0x323, 0x0F);

245 
	`£ns‹_wrôe_ªgi°î
 (0x347, 0x87);

246 
	`£ns‹_wrôe_ªgi°î
 (0x3E1, 0x9E);

247 
	`£ns‹_wrôe_ªgi°î
 (0x3E2, 0x01);

248 
	`£ns‹_wrôe_ªgi°î
 (0x3E5, 0x05);

249 
	`£ns‹_wrôe_ªgi°î
 (0x3E6, 0x05);

250 
	`£ns‹_wrôe_ªgi°î
 (0x3E7, 0x3A);

251 
	`£ns‹_wrôe_ªgi°î
 (0x3E8, 0x3A);

253 
	`£ns‹_wrôe_ªgi°î
 (0x503, 0x10);

254 
	`£ns‹_wrôe_ªgi°î
 (0x505, 0x03);

255 
	`£ns‹_wrôe_ªgi°î
 (0x514, 0x08);

256 
	`£ns‹_wrôe_ªgi°î
 (0x515, 0x01);

257 
	`£ns‹_wrôe_ªgi°î
 (0x516, 0x04);

258 
	`£ns‹_wrôe_ªgi°î
 (0x517, 0x04);

259 
	`£ns‹_wrôe_ªgi°î
 (0x518, 0x49);

260 
	`£ns‹_wrôe_ªgi°î
 (0x519, 0x04);

261 
	`£ns‹_wrôe_ªgi°î
 (0x52c, 0x30);

262 
	`£ns‹_wrôe_ªgi°î
 (0x52d, 0x20);

263 
	`£ns‹_wrôe_ªgi°î
 (0x52e, 0x03);

264 
	`£ns‹_wrôe_ªgi°î
 (0x53e, 0x0c);

265 
	`£ns‹_wrôe_ªgi°î
 (0x53f, 0x0c);

266 
	`£ns‹_wrôe_ªgi°î
 (0x540, 0x03);

267 
	`£ns‹_wrôe_ªgi°î
 (0x543, 0x58);

268 
	`£ns‹_wrôe_ªgi°î
 (0x544, 0x10);

269 
	`£ns‹_wrôe_ªgi°î
 (0x545, 0x30);

270 
	`£ns‹_wrôe_ªgi°î
 (0x546, 0x18);

271 
	`£ns‹_wrôe_ªgi°î
 (0x547, 0x10);

272 
	`£ns‹_wrôe_ªgi°î
 (0x548, 0x10);

273 
	`£ns‹_wrôe_ªgi°î
 (0x549, 0x48);

274 
	`£ns‹_wrôe_ªgi°î
 (0x54A, 0x28);

278 
	`£ns‹_wrôe_ªgi°î
 (0x25C, 0x20);

279 
	`£ns‹_wrôe_ªgi°î
 (0x25D, 0x00);

280 
	`£ns‹_wrôe_ªgi°î
 (0x25E, 0x18);

281 
	`£ns‹_wrôe_ªgi°î
 (0x25F, 0x00);

282 
	`£ns‹_wrôe_ªgi°î
 (0x263, 0x74);

283 
	`£ns‹_wrôe_ªgi°î
 (0x541, 0x20);

284 
	`£ns‹_wrôe_ªgi°î
 (0x542, 0x25);

285 
	`£ns‹_wrôe_ªgi°î
 (0x54E, 0xb4);

286 
	`£ns‹_wrôe_ªgi°î
 (0x54F, 0x01);

289 
	`£ns‹_wrôe_ªgi°î
 (0x20A, 0xF0);

290 
	`£ns‹_wrôe_ªgi°î
 (0x20B, 0x00);

291 
	`£ns‹_wrôe_ªgi°î
 (0x220, 0x0A);

292 
	`£ns‹_wrôe_ªgi°î
 (0x221, 0x00);

293 
	`£ns‹_wrôe_ªgi°î
 (0x222, 0x00);

294 
	`£ns‹_wrôe_ªgi°î
 (0x214, 0x34);

297 
	`£ns‹_wrôe_ªgi°î
 (0x403, 0xC8);

298 
	`£ns‹_wrôe_ªgi°î
 (0x407, 0x54);

299 
	`£ns‹_wrôe_ªgi°î
 (0x413, 0x16);

300 
	`£ns‹_wrôe_ªgi°î
 (0x415, 0xF6);

301 
	`£ns‹_wrôe_ªgi°î
 (0x41A, 0x14);

302 
	`£ns‹_wrôe_ªgi°î
 (0x41B, 0x51);

303 
	`£ns‹_wrôe_ªgi°î
 (0x429, 0xE7);

304 
	`£ns‹_wrôe_ªgi°î
 (0x42A, 0xF0);

305 
	`£ns‹_wrôe_ªgi°î
 (0x42B, 0x10);

306 
	`£ns‹_wrôe_ªgi°î
 (0x431, 0xE7);

307 
	`£ns‹_wrôe_ªgi°î
 (0x432, 0xF0);

308 
	`£ns‹_wrôe_ªgi°î
 (0x433, 0x10);

309 
	`£ns‹_wrôe_ªgi°î
 (0x43C, 0xE8);

310 
	`£ns‹_wrôe_ªgi°î
 (0x43D, 0x70);

311 
	`£ns‹_wrôe_ªgi°î
 (0x443, 0x08);

312 
	`£ns‹_wrôe_ªgi°î
 (0x444, 0xE1);

313 
	`£ns‹_wrôe_ªgi°î
 (0x445, 0x10);

314 
	`£ns‹_wrôe_ªgi°î
 (0x447, 0xE7);

315 
	`£ns‹_wrôe_ªgi°î
 (0x448, 0x60);

316 
	`£ns‹_wrôe_ªgi°î
 (0x449, 0x1E);

317 
	`£ns‹_wrôe_ªgi°î
 (0x44B, 0x00);

318 
	`£ns‹_wrôe_ªgi°î
 (0x44C, 0x41);

319 
	`£ns‹_wrôe_ªgi°î
 (0x450, 0x30);

320 
	`£ns‹_wrôe_ªgi°î
 (0x451, 0x0A);

321 
	`£ns‹_wrôe_ªgi°î
 (0x452, 0xFF);

322 
	`£ns‹_wrôe_ªgi°î
 (0x453, 0xFF);

323 
	`£ns‹_wrôe_ªgi°î
 (0x454, 0xFF);

324 
	`£ns‹_wrôe_ªgi°î
 (0x455, 0x02);

325 
	`£ns‹_wrôe_ªgi°î
 (0x457, 0xF0);

326 
	`£ns‹_wrôe_ªgi°î
 (0x45A, 0xA6);

327 
	`£ns‹_wrôe_ªgi°î
 (0x45D, 0x14);

328 
	`£ns‹_wrôe_ªgi°î
 (0x45E, 0x51);

329 
	`£ns‹_wrôe_ªgi°î
 (0x460, 0x00);

330 
	`£ns‹_wrôe_ªgi°î
 (0x461, 0x61);

331 
	`£ns‹_wrôe_ªgi°î
 (0x466, 0x30);

332 
	`£ns‹_wrôe_ªgi°î
 (0x467, 0x05);

333 
	`£ns‹_wrôe_ªgi°î
 (0x475, 0xE7);

334 
	`£ns‹_wrôe_ªgi°î
 (0x481, 0xEA);

335 
	`£ns‹_wrôe_ªgi°î
 (0x482, 0x70);

336 
	`£ns‹_wrôe_ªgi°î
 (0x485, 0xFF);

337 
	`£ns‹_wrôe_ªgi°î
 (0x48A, 0xF0);

338 
	`£ns‹_wrôe_ªgi°î
 (0x48D, 0xB6);

339 
	`£ns‹_wrôe_ªgi°î
 (0x48E, 0x40);

340 
	`£ns‹_wrôe_ªgi°î
 (0x490, 0x42);

341 
	`£ns‹_wrôe_ªgi°î
 (0x491, 0x51);

342 
	`£ns‹_wrôe_ªgi°î
 (0x492, 0x1E);

343 
	`£ns‹_wrôe_ªgi°î
 (0x494, 0xC4);

344 
	`£ns‹_wrôe_ªgi°î
 (0x495, 0x20);

345 
	`£ns‹_wrôe_ªgi°î
 (0x497, 0x50);

346 
	`£ns‹_wrôe_ªgi°î
 (0x498, 0x31);

347 
	`£ns‹_wrôe_ªgi°î
 (0x499, 0x1F);

348 
	`£ns‹_wrôe_ªgi°î
 (0x49B, 0xC0);

349 
	`£ns‹_wrôe_ªgi°î
 (0x49C, 0x60);

350 
	`£ns‹_wrôe_ªgi°î
 (0x49E, 0x4C);

351 
	`£ns‹_wrôe_ªgi°î
 (0x49F, 0x71);

352 
	`£ns‹_wrôe_ªgi°î
 (0x4A0, 0x1F);

353 
	`£ns‹_wrôe_ªgi°î
 (0x4A2, 0xB6);

354 
	`£ns‹_wrôe_ªgi°î
 (0x4A3, 0xC0);

355 
	`£ns‹_wrôe_ªgi°î
 (0x4A4, 0x0B);

356 
	`£ns‹_wrôe_ªgi°î
 (0x4A9, 0x24);

357 
	`£ns‹_wrôe_ªgi°î
 (0x4AA, 0x41);

358 
	`£ns‹_wrôe_ªgi°î
 (0x4B0, 0x25);

359 
	`£ns‹_wrôe_ªgi°î
 (0x4B1, 0x51);

360 
	`£ns‹_wrôe_ªgi°î
 (0x4B7, 0x1C);

361 
	`£ns‹_wrôe_ªgi°î
 (0x4B8, 0xC1);

362 
	`£ns‹_wrôe_ªgi°î
 (0x4B9, 0x12);

363 
	`£ns‹_wrôe_ªgi°î
 (0x4BE, 0x1D);

364 
	`£ns‹_wrôe_ªgi°î
 (0x4BF, 0xD1);

365 
	`£ns‹_wrôe_ªgi°î
 (0x4C0, 0x12);

366 
	`£ns‹_wrôe_ªgi°î
 (0x4C2, 0xA8);

367 
	`£ns‹_wrôe_ªgi°î
 (0x4C3, 0xC0);

368 
	`£ns‹_wrôe_ªgi°î
 (0x4C4, 0x0A);

369 
	`£ns‹_wrôe_ªgi°î
 (0x4C5, 0x1E);

370 
	`£ns‹_wrôe_ªgi°î
 (0x4C6, 0x21);

371 
	`£ns‹_wrôe_ªgi°î
 (0x4C9, 0xB0);

372 
	`£ns‹_wrôe_ªgi°î
 (0x4CA, 0x40);

373 
	`£ns‹_wrôe_ªgi°î
 (0x4CC, 0x26);

374 
	`£ns‹_wrôe_ªgi°î
 (0x4CD, 0xA1);

375 
	`£ns‹_wrôe_ªgi°î
 (0x4D0, 0xB6);

376 
	`£ns‹_wrôe_ªgi°î
 (0x4D1, 0xC0);

377 
	`£ns‹_wrôe_ªgi°î
 (0x4D2, 0x0B);

378 
	`£ns‹_wrôe_ªgi°î
 (0x4D4, 0xE2);

379 
	`£ns‹_wrôe_ªgi°î
 (0x4D5, 0x40);

380 
	`£ns‹_wrôe_ªgi°î
 (0x4D8, 0x4E);

381 
	`£ns‹_wrôe_ªgi°î
 (0x4D9, 0xA1);

382 
	`£ns‹_wrôe_ªgi°î
 (0x4EC, 0xF0);

384 
	`£ns‹_wrôe_ªgi°î
 (0x200, 0x00);

385 
	`£ns‹_wrôe_ªgi°î
 (0x202, 0x00);

386 
	`£ns‹_wrôe_ªgi°î
 (0x249, 0x0A);

388 
	`¥ötf
("-------Sony IMX185 Sensor 1080p30 Initial OK!-------\n");

390 
	}
}

392 
	$£ns‹_wdr_öô
()

395 
	`£ns‹_wrôe_ªgi°î
 (0x200, 0x01);

398 
	`£ns‹_wrôe_ªgi°î
 (0x205, 0x01);

399 
	`£ns‹_wrôe_ªgi°î
 (0x206, 0x00);

400 
	`£ns‹_wrôe_ªgi°î
 (0x207, 0x10);

401 
	`£ns‹_wrôe_ªgi°î
 (0x209, 0x02);

402 
	`£ns‹_wrôe_ªgi°î
 (0x20A, 0xF0);

403 
	`£ns‹_wrôe_ªgi°î
 (0x20B, 0x00);

404 
	`£ns‹_wrôe_ªgi°î
 (0x20C, 0x02);

405 
	`£ns‹_wrôe_ªgi°î
 (0x20F, 0x05);

406 
	`£ns‹_wrôe_ªgi°î
 (0x210, 0x38);

407 
	`£ns‹_wrôe_ªgi°î
 (0x212, 0x0F);

408 
	`£ns‹_wrôe_ªgi°î
 (0x214, 0x28);

409 
	`£ns‹_wrôe_ªgi°î
 (0x218, 0x65);

410 
	`£ns‹_wrôe_ªgi°î
 (0x219, 0x04);

411 
	`£ns‹_wrôe_ªgi°î
 (0x21A, 0x00);

412 
	`£ns‹_wrôe_ªgi°î
 (0x21B, 0x98);

413 
	`£ns‹_wrôe_ªgi°î
 (0x21C, 0x08);

414 
	`£ns‹_wrôe_ªgi°î
 (0x220, 0xD5);

415 
	`£ns‹_wrôe_ªgi°î
 (0x221, 0x04);

416 
	`£ns‹_wrôe_ªgi°î
 (0x222, 0x00);

417 
	`£ns‹_wrôe_ªgi°î
 (0x223, 0x07);

418 
	`£ns‹_wrôe_ªgi°î
 (0x224, 0x00);

419 
	`£ns‹_wrôe_ªgi°î
 (0x225, 0x00);

420 
	`£ns‹_wrôe_ªgi°î
 (0x244, 0xE1);

421 
	`£ns‹_wrôe_ªgi°î
 (0x265, 0x00);

422 
	`£ns‹_wrôe_ªgi°î
 (0x284, 0x0F);

423 
	`£ns‹_wrôe_ªgi°î
 (0x286, 0x10);

424 
	`£ns‹_wrôe_ªgi°î
 (0x2CF, 0xE1);

425 
	`£ns‹_wrôe_ªgi°î
 (0x2D0, 0x29);

426 
	`£ns‹_wrôe_ªgi°î
 (0x2D2, 0x9B);

427 
	`£ns‹_wrôe_ªgi°î
 (0x2D3, 0x01);

431 
	`£ns‹_wrôe_ªgi°î
 (0x21E, 0x02);

433 
	`£ns‹_wrôe_ªgi°î
 (0x25C, 0x20);

434 
	`£ns‹_wrôe_ªgi°î
 (0x25D, 0x00);

435 
	`£ns‹_wrôe_ªgi°î
 (0x25E, 0x18);

436 
	`£ns‹_wrôe_ªgi°î
 (0x25F, 0x00);

437 
	`£ns‹_wrôe_ªgi°î
 (0x263, 0x74);

439 
	`£ns‹_wrôe_ªgi°î
 (0x31D, 0x0A);

440 
	`£ns‹_wrôe_ªgi°î
 (0x323, 0x0F);

441 
	`£ns‹_wrôe_ªgi°î
 (0x347, 0x87);

442 
	`£ns‹_wrôe_ªgi°î
 (0x3E1, 0x9E);

443 
	`£ns‹_wrôe_ªgi°î
 (0x3E2, 0x01);

444 
	`£ns‹_wrôe_ªgi°î
 (0x3E5, 0x05);

445 
	`£ns‹_wrôe_ªgi°î
 (0x3E6, 0x05);

446 
	`£ns‹_wrôe_ªgi°î
 (0x3E7, 0x3A);

447 
	`£ns‹_wrôe_ªgi°î
 (0x3E8, 0x3A);

449 
	`£ns‹_wrôe_ªgi°î
 (0x541, 0x20);

450 
	`£ns‹_wrôe_ªgi°î
 (0x542, 0x25);

451 
	`£ns‹_wrôe_ªgi°î
 (0x54E, 0xB4);

452 
	`£ns‹_wrôe_ªgi°î
 (0x54F, 0x01);

453 
	`£ns‹_wrôe_ªgi°î
 (0x503, 0x10);

454 
	`£ns‹_wrôe_ªgi°î
 (0x505, 0x03);

455 
	`£ns‹_wrôe_ªgi°î
 (0x514, 0x08);

456 
	`£ns‹_wrôe_ªgi°î
 (0x515, 0x01);

457 
	`£ns‹_wrôe_ªgi°î
 (0x516, 0x04);

458 
	`£ns‹_wrôe_ªgi°î
 (0x517, 0x04);

459 
	`£ns‹_wrôe_ªgi°î
 (0x518, 0x49);

460 
	`£ns‹_wrôe_ªgi°î
 (0x519, 0x04);

461 
	`£ns‹_wrôe_ªgi°î
 (0x52c, 0x30);

462 
	`£ns‹_wrôe_ªgi°î
 (0x52d, 0x20);

463 
	`£ns‹_wrôe_ªgi°î
 (0x52e, 0x03);

464 
	`£ns‹_wrôe_ªgi°î
 (0x53e, 0x0c);

465 
	`£ns‹_wrôe_ªgi°î
 (0x53f, 0x0c);

466 
	`£ns‹_wrôe_ªgi°î
 (0x540, 0x03);

467 
	`£ns‹_wrôe_ªgi°î
 (0x543, 0x58);

468 
	`£ns‹_wrôe_ªgi°î
 (0x544, 0x10);

469 
	`£ns‹_wrôe_ªgi°î
 (0x545, 0x30);

470 
	`£ns‹_wrôe_ªgi°î
 (0x546, 0x18);

471 
	`£ns‹_wrôe_ªgi°î
 (0x547, 0x10);

472 
	`£ns‹_wrôe_ªgi°î
 (0x548, 0x10);

473 
	`£ns‹_wrôe_ªgi°î
 (0x549, 0x48);

474 
	`£ns‹_wrôe_ªgi°î
 (0x54A, 0x28);

477 
	`£ns‹_wrôe_ªgi°î
 (0x403, 0xC8);

478 
	`£ns‹_wrôe_ªgi°î
 (0x407, 0x54);

479 
	`£ns‹_wrôe_ªgi°î
 (0x413, 0x16);

480 
	`£ns‹_wrôe_ªgi°î
 (0x415, 0xF6);

481 
	`£ns‹_wrôe_ªgi°î
 (0x41A, 0x14);

482 
	`£ns‹_wrôe_ªgi°î
 (0x41B, 0x51);

483 
	`£ns‹_wrôe_ªgi°î
 (0x429, 0xE7);

484 
	`£ns‹_wrôe_ªgi°î
 (0x42A, 0xF0);

485 
	`£ns‹_wrôe_ªgi°î
 (0x42B, 0x10);

486 
	`£ns‹_wrôe_ªgi°î
 (0x431, 0xE7);

487 
	`£ns‹_wrôe_ªgi°î
 (0x432, 0xF0);

488 
	`£ns‹_wrôe_ªgi°î
 (0x433, 0x10);

489 
	`£ns‹_wrôe_ªgi°î
 (0x43C, 0xE8);

490 
	`£ns‹_wrôe_ªgi°î
 (0x43D, 0x70);

491 
	`£ns‹_wrôe_ªgi°î
 (0x443, 0x08);

492 
	`£ns‹_wrôe_ªgi°î
 (0x444, 0xE1);

493 
	`£ns‹_wrôe_ªgi°î
 (0x445, 0x10);

494 
	`£ns‹_wrôe_ªgi°î
 (0x447, 0xE7);

495 
	`£ns‹_wrôe_ªgi°î
 (0x448, 0x60);

496 
	`£ns‹_wrôe_ªgi°î
 (0x449, 0x1E);

497 
	`£ns‹_wrôe_ªgi°î
 (0x44B, 0x00);

498 
	`£ns‹_wrôe_ªgi°î
 (0x44C, 0x41);

499 
	`£ns‹_wrôe_ªgi°î
 (0x450, 0x30);

500 
	`£ns‹_wrôe_ªgi°î
 (0x451, 0x0A);

501 
	`£ns‹_wrôe_ªgi°î
 (0x452, 0xFF);

502 
	`£ns‹_wrôe_ªgi°î
 (0x453, 0xFF);

503 
	`£ns‹_wrôe_ªgi°î
 (0x454, 0xFF);

504 
	`£ns‹_wrôe_ªgi°î
 (0x455, 0x02);

505 
	`£ns‹_wrôe_ªgi°î
 (0x457, 0xF0);

506 
	`£ns‹_wrôe_ªgi°î
 (0x45A, 0xA6);

507 
	`£ns‹_wrôe_ªgi°î
 (0x45D, 0x14);

508 
	`£ns‹_wrôe_ªgi°î
 (0x45E, 0x51);

509 
	`£ns‹_wrôe_ªgi°î
 (0x460, 0x00);

510 
	`£ns‹_wrôe_ªgi°î
 (0x461, 0x61);

511 
	`£ns‹_wrôe_ªgi°î
 (0x466, 0x30);

512 
	`£ns‹_wrôe_ªgi°î
 (0x467, 0x05);

513 
	`£ns‹_wrôe_ªgi°î
 (0x475, 0xE7);

514 
	`£ns‹_wrôe_ªgi°î
 (0x481, 0xEA);

515 
	`£ns‹_wrôe_ªgi°î
 (0x482, 0x70);

516 
	`£ns‹_wrôe_ªgi°î
 (0x485, 0xFF);

517 
	`£ns‹_wrôe_ªgi°î
 (0x48A, 0xF0);

518 
	`£ns‹_wrôe_ªgi°î
 (0x48D, 0xB6);

519 
	`£ns‹_wrôe_ªgi°î
 (0x48E, 0x40);

520 
	`£ns‹_wrôe_ªgi°î
 (0x490, 0x42);

521 
	`£ns‹_wrôe_ªgi°î
 (0x491, 0x51);

522 
	`£ns‹_wrôe_ªgi°î
 (0x492, 0x1E);

523 
	`£ns‹_wrôe_ªgi°î
 (0x494, 0xC4);

524 
	`£ns‹_wrôe_ªgi°î
 (0x495, 0x20);

525 
	`£ns‹_wrôe_ªgi°î
 (0x497, 0x50);

526 
	`£ns‹_wrôe_ªgi°î
 (0x498, 0x31);

527 
	`£ns‹_wrôe_ªgi°î
 (0x499, 0x1F);

528 
	`£ns‹_wrôe_ªgi°î
 (0x49B, 0xC0);

529 
	`£ns‹_wrôe_ªgi°î
 (0x49C, 0x60);

530 
	`£ns‹_wrôe_ªgi°î
 (0x49E, 0x4C);

531 
	`£ns‹_wrôe_ªgi°î
 (0x49F, 0x71);

532 
	`£ns‹_wrôe_ªgi°î
 (0x4A0, 0x1F);

533 
	`£ns‹_wrôe_ªgi°î
 (0x4A2, 0xB6);

534 
	`£ns‹_wrôe_ªgi°î
 (0x4A3, 0xC0);

535 
	`£ns‹_wrôe_ªgi°î
 (0x4A4, 0x0B);

536 
	`£ns‹_wrôe_ªgi°î
 (0x4A9, 0x24);

537 
	`£ns‹_wrôe_ªgi°î
 (0x4AA, 0x41);

538 
	`£ns‹_wrôe_ªgi°î
 (0x4B0, 0x25);

539 
	`£ns‹_wrôe_ªgi°î
 (0x4B1, 0x51);

540 
	`£ns‹_wrôe_ªgi°î
 (0x4B7, 0x1C);

541 
	`£ns‹_wrôe_ªgi°î
 (0x4B8, 0xC1);

542 
	`£ns‹_wrôe_ªgi°î
 (0x4B9, 0x12);

543 
	`£ns‹_wrôe_ªgi°î
 (0x4BE, 0x1D);

544 
	`£ns‹_wrôe_ªgi°î
 (0x4BF, 0xD1);

545 
	`£ns‹_wrôe_ªgi°î
 (0x4C0, 0x12);

546 
	`£ns‹_wrôe_ªgi°î
 (0x4C2, 0xA8);

547 
	`£ns‹_wrôe_ªgi°î
 (0x4C3, 0xC0);

548 
	`£ns‹_wrôe_ªgi°î
 (0x4C4, 0x0A);

549 
	`£ns‹_wrôe_ªgi°î
 (0x4C5, 0x1E);

550 
	`£ns‹_wrôe_ªgi°î
 (0x4C6, 0x21);

551 
	`£ns‹_wrôe_ªgi°î
 (0x4C9, 0xB0);

552 
	`£ns‹_wrôe_ªgi°î
 (0x4CA, 0x40);

553 
	`£ns‹_wrôe_ªgi°î
 (0x4CC, 0x26);

554 
	`£ns‹_wrôe_ªgi°î
 (0x4CD, 0xA1);

555 
	`£ns‹_wrôe_ªgi°î
 (0x4D0, 0xB6);

556 
	`£ns‹_wrôe_ªgi°î
 (0x4D1, 0xC0);

557 
	`£ns‹_wrôe_ªgi°î
 (0x4D2, 0x0B);

558 
	`£ns‹_wrôe_ªgi°î
 (0x4D4, 0xE2);

559 
	`£ns‹_wrôe_ªgi°î
 (0x4D5, 0x40);

560 
	`£ns‹_wrôe_ªgi°î
 (0x4D8, 0x4E);

561 
	`£ns‹_wrôe_ªgi°î
 (0x4D9, 0xA1);

562 
	`£ns‹_wrôe_ªgi°î
 (0x4EC, 0xF0);

564 
	`£ns‹_wrôe_ªgi°î
 (0x200, 0x00);

565 
	`£ns‹_wrôe_ªgi°î
 (0x202, 0x00);

566 
	`£ns‹_wrôe_ªgi°î
 (0x249, 0x0A);

568 
	`¥ötf
("-------Sony IMX185 Sensor Built-in WDR 1080p30 Initial OK!-------\n");

570 
	}
}

	@component/pm/avs/avs.c

22 
	~<löux/ty≥s.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/sched.h
>

25 
	~<löux/dñay.h
>

26 
	~<löux/öô.h
>

27 
	~<löux/îr.h
>

28 
	~<löux/î∫o.h
>

29 
	~<löux/io.h
>

31 
	~"avs_pm.h
"

32 
	~"pm.h
"

	@component/pm/base/pm.c

1 
	~<löux/ty≥s.h
>

2 
	~<löux/kî√l.h
>

3 
	~<löux/sched.h
>

4 
	~<löux/˝u‰eq.h
>

5 
	~<löux/dñay.h
>

6 
	~<löux/öô.h
>

7 
	~<löux/îr.h
>

8 
	~<löux/î∫o.h
>

9 
	~<löux/˛k.h
>

10 
	~<löux/io.h
>

11 
	~<löux/›p.h
>

12 
	~<löux/˝u.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/ªguœt‹/c⁄sumî.h
>

15 
	~<asm/°©.h
>

16 
	~<asm/smp_∂©.h
>

17 
	~<asm/˝u.h
>

18 
	~<mach/io.h
>

19 
	~<mach/˛ock.h
>

20 
	~<mach/h¨dw¨e.h
>

22 
	~"pm.h
"

23 
	~"hi_˝u‰eq.h
"

24 
	~"˝u.h
"

25 
	~"medü.h
"

26 
	~"hi_io.h
"

27 
	~"sys_pm.h
"

29 
	gmedü_avs_í
 = 
PM_MEDIA
;

30 
PM_DC_DC_ATTR_S
 
	gg_°DcdcAâr
 = {0};

31 
__öô
 
	$pm_devi˚_öô
(
pm_devi˚
 *pm_device)

33 
ªt
;

35 i‡(
	`u∆ikñy
(!
pm_devi˚
))

36  -
EINVAL
;

38 
ªt
 = 
	`∂©f‹m_devi˚_ªgi°î
(&
pm_devi˚
->
devi˚
);

39 i‡(
ªt
)

41 
	`¥ötk
("register cpuÖm_device fail. \n");

42 
ªgi°î_devi˚_Áû
;

44 
ªt
 = 
pm_devi˚
->
	`p‚OµTabÀInô
’m_devi˚, 
NULL
);

45 i‡(
ªt
)

47 
	`¥ötk
("Init opp fail. \n");

48 
öô_›p_Áû
;

50 
ªt
 = 
	`PM_FªqèbÀInô
(&
pm_devi˚
->
devi˚
.
dev
, &pm_devi˚->
‰eq_èbÀ
);

51 i‡(
ªt
)

53 
	`¥ötk
("Init freqÅable fail. \n");

54 
öô_‰eqèbÀ_Áû
;

57 
	`muãx_öô
(&
pm_devi˚
->
‰eq_èbÀ_lock
);

59 
ªt
 = 
pm_devi˚
->
	`p‚Reguœt‹Inô
’m_devi˚, 
NULL
);

60 i‡(
ªt
)

62 
	`¥ötk
("InitÑegulator fail. \n");

63 
öô_ªguœt‹_Áû
;

66 
ªt
 = 
pm_devi˚
->
	`p‚ClockInô
(&pm_devi˚->
˛k
, &pm_devi˚->
devi˚
.
dev
);

67 i‡(
ªt
)

69 
	`¥ötk
("Init clk fail. \n");

70 
öô_˛k_Áû
;

73 
	`muãx_öô
(&
pm_devi˚
->
dvfs_lock
);

76 
ªt
 = 
pm_devi˚
->
	`p‚AvsInô
’m_devi˚, 
NULL
);

77 i‡(
ªt
)

79 
	`¥ötk
("Initávs fail. \n");

80 
öô_avs_Áû
;

82  
ªt
;

84 
öô_avs_Áû
:

85 
pm_devi˚
->
	`p‚Reguœt‹Exô
’m_devi˚, 
NULL
);

86 
öô_˛k_Áû
:

87 
pm_devi˚
->
	`p‚ClockExô
(&pm_devi˚->
˛k
, 
NULL
);

88 
öô_ªguœt‹_Áû
:

89 
	`PM_FªqèbÀExô
(&
pm_devi˚
->
devi˚
.
dev
, &pm_devi˚->
‰eq_èbÀ
);

90 
öô_‰eqèbÀ_Áû
:

91 
pm_devi˚
->
	`p‚OµTabÀExô
’m_devi˚, 
NULL
);

92 
öô_›p_Áû
:

93 
	`∂©f‹m_devi˚_uƒegi°î
(&
pm_devi˚
->
devi˚
);

94 
ªgi°î_devi˚_Áû
:

95  
ªt
;

96 
	}
}

99 
	$pm_devi˚_exô
(
pm_devi˚
 *pm_device)

101 
pm_devi˚
->
	`p‚AvsExô
’m_devi˚, 
NULL
);

103 
pm_devi˚
->
	`p‚Reguœt‹Exô
’m_devi˚, 
NULL
);

105 
pm_devi˚
->
	`p‚ClockExô
(&pm_devi˚->
˛k
, 
NULL
);

107 
	`PM_FªqèbÀExô
(&
pm_devi˚
->
devi˚
.
dev
, &pm_devi˚->
‰eq_èbÀ
);

109 
pm_devi˚
->
	`p‚OµTabÀExô
’m_devi˚, 
NULL
);

111 
	`∂©f‹m_devi˚_uƒegi°î
(&
pm_devi˚
->
devi˚
);

112 
	}
}

114 
__öô
 
	$pm_DCDCAâr_öô
(
PM_DC_DC_ATTR_S
 *
p°DcDcAâr
)

116 
ªt
 = 0;

118 
p°DcDcAâr
->
Vªf
 = 
PM_VREF
;

119 
p°DcDcAâr
->
R1
 = 
PM_R1
;

120 
p°DcDcAâr
->
R2
 = 
PM_R2
;

121 
p°DcDcAâr
->
R3
 = 
PM_R3
 + 
PM_R4
;

122 
p°DcDcAâr
->
R4
 = 
PM_R5
;

124 
p°DcDcAâr
->
Vout_ba£
 =Ö°DcDcAâr->
Vªf
 * (p°DcDcAâr->
R1
 +Ö°DcDcAâr->
R2
Ë* (p°DcDcAâr->
R3
 +Ö°DcDcAâr->
R4
);

125 
p°DcDcAâr
->
Rc⁄fig
 =Ö°DcDcAâr->
R1
 *Ö°DcDcAâr->
R2
;

126 
p°DcDcAâr
->
VﬁtC⁄fig
 = (p°DcDcAâr->
R3
 +Ö°DcDcAâr->
R4
Ë*Ö°DcDcAâr->
R2
;

129 
p°DcDcAâr
->
PwmFªqN
 = 199;

130  
ªt
;

131 
	}
}

132 
__öô
 
	$pm_öô
()

134 
ªt
;

135 
vÆue
;

136 
U_PROFILE_REG
 
¥ofûeReg
;

138 
ªt
 = 
	`pm_DCDCAâr_öô
(&
g_°DcdcAâr
);

139 if(
ªt
)

141 
	`¥ötk
("DcDcAttr init fail. \n");

142  
ªt
;

145 
ªt
 = 
	`ªguœt‹_öô
();

146 i‡(
ªt
)

148 
	`¥ötk
("regulator init fail. \n");

149  
ªt
;

153 
	`HI_RegRód
(&
¥ofûeReg
.
u32
, 
PROFILE_REG
);

154 
vÆue
 = 
¥ofûeReg
.
bôs
.
hw_¥ofûe
;

156 #ifde‡
CPU_PM


158 if((0x0 =
vÆue
)||(0x1 == value))

160 
	`¥ötk
("Cpu hasÇo independent Volt-Source.\n");

161 
	`ªguœt‹_exô
();

165 
ªt
 = 
	`˝u_pm_öô
();

166 i‡(
ªt
)

168 
	`¥ötk
("CpuÖm init fail. \n");

169 
	`ªguœt‹_exô
();

170  
ªt
;

175 #ifde‡
MEDIA_PM


176 if(
PM_MEDIA
 =
medü_avs_í
)

179 if((0x0 =
vÆue
)||(0x2 == value))

181 
	`¥ötk
("Media0 hasÇo independent Volt-Source.\n");

182 #ifde‡
CPU_PM


183 
	`˝u_pm_exô
();

185 
	`ªguœt‹_exô
();

189 
ªt
 = 
	`medü_pm_öô
();

190 i‡(
ªt
)

192 
	`¥ötk
("Media0Öm init fail. \n");

193 #ifde‡
CPU_PM


194 
	`˝u_pm_exô
();

196 
	`ªguœt‹_exô
();

197  
ªt
;

202 
	`¥ötk
("loadÖm.ko ok!.\n");

203  
ªt
;

204 
	}
}

206 
	$pm_exô
()

208 #ifde‡
MEDIA_PM


209 if(
PM_MEDIA
 =
medü_avs_í
)

211 
	`medü_pm_exô
();

214 #ifde‡
CPU_PM


215 
	`˝u_pm_exô
();

217 
	`ªguœt‹_exô
();

218 
	`¥ötk
("unloadÖm.ko ok!.\n");

219 
	}
}

221 
moduÀ_∑øm
(
medü_avs_í
, , 
S_IRUGO
);

223 
MODULE_DESCRIPTION
("pm driver for hi3516A SoCs");

224 
MODULE_LICENSE
("GPL");

225 
moduÀ_öô
(
pm_öô
);

226 
moduÀ_exô
(
pm_exô
);

	@component/pm/base/pmc.c

11 
	~<löux/io.h
>

12 
	~"pmc.h
"

13 
	~<löux/kî√l.h
>

16 
	#PMC_BASE_ADDR
 0x20270000

	)

19 
S_PMC_REGS_TYPE
 *
	gg›PMCAŒReg
 = (S_PMC_REGS_TYPE *)
IO_ADDRESS
(
PMC_BASE_ADDR
);

21 
	#RTL_Vîify_RegWrôe
(
addr
, 
p
)

	)

29 
	$iSëPERI_PMC0c‹e_pwm_≥riod
(
uc‹e_pwm_≥riod
)

31 
U_PERI_PMC0
 
o_≥ri_pmc0
;

32 
o_≥ri_pmc0
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC0
.u32;

33 
o_≥ri_pmc0
.
bôs
.
c‹e_pwm_≥riod
 = 
uc‹e_pwm_≥riod
;

34 
g›PMCAŒReg
->
PERI_PMC0
.
u32
 = 
o_≥ri_pmc0
.u32;

35 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC0
.
u32
));

38 
	}
}

46 
	$iSëPERI_PMC0c‹e_pwm_duty
(
uc‹e_pwm_duty
)

48 
U_PERI_PMC0
 
o_≥ri_pmc0
;

49 
o_≥ri_pmc0
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC0
.u32;

50 
o_≥ri_pmc0
.
bôs
.
c‹e_pwm_duty
 = 
uc‹e_pwm_duty
;

51 
g›PMCAŒReg
->
PERI_PMC0
.
u32
 = 
o_≥ri_pmc0
.u32;

52 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC0
.
u32
));

55 
	}
}

63 
	$iSëPERI_PMC1˝u_pwm_≥riod
(
u˝u_pwm_≥riod
)

65 
U_PERI_PMC1
 
o_≥ri_pmc1
;

66 
o_≥ri_pmc1
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC1
.u32;

67 
o_≥ri_pmc1
.
bôs
.
˝u_pwm_≥riod
 = 
u˝u_pwm_≥riod
;

68 
g›PMCAŒReg
->
PERI_PMC1
.
u32
 = 
o_≥ri_pmc1
.u32;

69 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC1
.
u32
));

72 
	}
}

80 
	$iSëPERI_PMC1˝u_pwm_duty
(
u˝u_pwm_duty
)

82 
U_PERI_PMC1
 
o_≥ri_pmc1
;

83 
o_≥ri_pmc1
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC1
.u32;

84 
o_≥ri_pmc1
.
bôs
.
˝u_pwm_duty
 = 
u˝u_pwm_duty
;

85 
g›PMCAŒReg
->
PERI_PMC1
.
u32
 = 
o_≥ri_pmc1
.u32;

86 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC1
.
u32
));

89 
	}
}

97 
	$iGëPERI_PMC1˝u_pwm_≥riod
()

99 
U_PERI_PMC1
 
o_≥ri_pmc1
;

100 
u˝u_pwm_≥riod
;

102 
o_≥ri_pmc1
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC1
.u32;

103 
u˝u_pwm_≥riod
 = 
o_≥ri_pmc1
.
bôs
.
˝u_pwm_≥riod
;

104  
u˝u_pwm_≥riod
;

105 
	}
}

113 
	$iGëPERI_PMC1˝u_pwm_duty
()

115 
U_PERI_PMC1
 
o_≥ri_pmc1
;

116 
u˝u_pwm_duty
;

118 
o_≥ri_pmc1
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC1
.u32;

119 
u˝u_pwm_duty
 = 
o_≥ri_pmc1
.
bôs
.
˝u_pwm_duty
;

121  
u˝u_pwm_duty
;

122 
	}
}

130 
	$iSëPERI_PMC2ddr_pwm_≥riod
(
uddr_pwm_≥riod
)

132 
U_PERI_PMC2
 
o_≥ri_pmc2
;

133 
o_≥ri_pmc2
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC2
.u32;

134 
o_≥ri_pmc2
.
bôs
.
ddr_pwm_≥riod
 = 
uddr_pwm_≥riod
;

135 
g›PMCAŒReg
->
PERI_PMC2
.
u32
 = 
o_≥ri_pmc2
.u32;

136 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC2
.
u32
));

139 
	}
}

147 
	$iSëPERI_PMC2ddr_pwm_duty
(
uddr_pwm_duty
)

149 
U_PERI_PMC2
 
o_≥ri_pmc2
;

150 
o_≥ri_pmc2
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC2
.u32;

151 
o_≥ri_pmc2
.
bôs
.
ddr_pwm_duty
 = 
uddr_pwm_duty
;

152 
g›PMCAŒReg
->
PERI_PMC2
.
u32
 = 
o_≥ri_pmc2
.u32;

153 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC2
.
u32
));

156 
	}
}

164 
	$iSëPERI_PMC3mda_pwm_≥riod
(
umda_pwm_≥riod
)

166 
U_PERI_PMC3
 
o_≥ri_pmc3
;

167 
o_≥ri_pmc3
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC3
.u32;

168 
o_≥ri_pmc3
.
bôs
.
mda_pwm_≥riod
 = 
umda_pwm_≥riod
;

169 
g›PMCAŒReg
->
PERI_PMC3
.
u32
 = 
o_≥ri_pmc3
.u32;

170 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC3
.
u32
));

173 
	}
}

181 
	$iSëPERI_PMC3mda_pwm_duty
(
umda_pwm_duty
)

183 
U_PERI_PMC3
 
o_≥ri_pmc3
;

184 
o_≥ri_pmc3
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC3
.u32;

185 
o_≥ri_pmc3
.
bôs
.
mda_pwm_duty
 = 
umda_pwm_duty
;

186 
g›PMCAŒReg
->
PERI_PMC3
.
u32
 = 
o_≥ri_pmc3
.u32;

187 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC3
.
u32
));

190 
	}
}

198 
	$iGëPERI_PMC3mda_pwm_≥riod
()

200 
U_PERI_PMC1
 
o_≥ri_pmc1
;

201 
u˝u_pwm_≥riod
;

203 
o_≥ri_pmc1
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC3
.u32;

204 
u˝u_pwm_≥riod
 = 
o_≥ri_pmc1
.
bôs
.
˝u_pwm_≥riod
;

205  
u˝u_pwm_≥riod
;

206 
	}
}

214 
	$iGëPERI_PMC3mda_pwm_duty
()

216 
U_PERI_PMC1
 
o_≥ri_pmc1
;

217 
u˝u_pwm_duty
;

219 
o_≥ri_pmc1
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC3
.u32;

220 
u˝u_pwm_duty
 = 
o_≥ri_pmc1
.
bôs
.
˝u_pwm_duty
;

222  
u˝u_pwm_duty
;

223 
	}
}

231 
	$iSëPERI_PMC4c‹e_pwm_íabÀ
(
uc‹e_pwm_íabÀ
)

233 
U_PERI_PMC4
 
o_≥ri_pmc4
;

234 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

235 
o_≥ri_pmc4
.
bôs
.
c‹e_pwm_íabÀ
 = 
uc‹e_pwm_íabÀ
;

236 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

237 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

240 
	}
}

248 
	$iSëPERI_PMC4c‹e_pwm_öv
(
uc‹e_pwm_öv
)

250 
U_PERI_PMC4
 
o_≥ri_pmc4
;

251 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

252 
o_≥ri_pmc4
.
bôs
.
c‹e_pwm_öv
 = 
uc‹e_pwm_öv
;

253 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

254 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

257 
	}
}

265 
	$iSëPERI_PMC4˝u_pwm_íabÀ
(
u˝u_pwm_íabÀ
)

267 
U_PERI_PMC4
 
o_≥ri_pmc4
;

268 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

269 
o_≥ri_pmc4
.
bôs
.
˝u_pwm_íabÀ
 = 
u˝u_pwm_íabÀ
;

270 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

271 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

274 
	}
}

276 
	$iGëPERI_PMC4˝u_pwm_íabÀ
(*
u˝u_pwm_íabÀ
)

278 *
u˝u_pwm_íabÀ
 = 
g›PMCAŒReg
->
PERI_PMC4
.
bôs
.
˝u_pwm_íabÀ
;

281 
	}
}

289 
	$iSëPERI_PMC4˝u_pwm_öv
(
u˝u_pwm_öv
)

291 
U_PERI_PMC4
 
o_≥ri_pmc4
;

292 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

293 
o_≥ri_pmc4
.
bôs
.
˝u_pwm_öv
 = 
u˝u_pwm_öv
;

294 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

295 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

298 
	}
}

306 
	$iSëPERI_PMC4ddr_pwm_íabÀ
(
uddr_pwm_íabÀ
)

308 
U_PERI_PMC4
 
o_≥ri_pmc4
;

309 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

310 
o_≥ri_pmc4
.
bôs
.
ddr_pwm_íabÀ
 = 
uddr_pwm_íabÀ
;

311 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

312 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

315 
	}
}

323 
	$iSëPERI_PMC4ddr_pwm_öv
(
uddr_pwm_öv
)

325 
U_PERI_PMC4
 
o_≥ri_pmc4
;

326 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

327 
o_≥ri_pmc4
.
bôs
.
ddr_pwm_öv
 = 
uddr_pwm_öv
;

328 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

329 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

332 
	}
}

340 
	$iSëPERI_PMC4mda_pwm_íabÀ
(
umda_pwm_íabÀ
)

342 
U_PERI_PMC4
 
o_≥ri_pmc4
;

343 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

344 
o_≥ri_pmc4
.
bôs
.
mda_pwm_íabÀ
 = 
umda_pwm_íabÀ
;

345 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

346 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

349 
	}
}

351 
	$iGëPERI_PMC4mda_pwm_íabÀ
(*
umda_pwm_íabÀ
)

353 *
umda_pwm_íabÀ
 = 
g›PMCAŒReg
->
PERI_PMC4
.
bôs
.
mda_pwm_íabÀ
;

356 
	}
}

364 
	$iSëPERI_PMC4mda_pwm_öv
(
umda_pwm_öv
)

366 
U_PERI_PMC4
 
o_≥ri_pmc4
;

367 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

368 
o_≥ri_pmc4
.
bôs
.
mda_pwm_öv
 = 
umda_pwm_öv
;

369 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

370 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

373 
	}
}

381 
	$iSëPERI_PMC4pwm0_ªu£_cfg
(
upwm0_ªu£_cfg
)

383 
U_PERI_PMC4
 
o_≥ri_pmc4
;

384 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

385 
o_≥ri_pmc4
.
bôs
.
pwm0_ªu£_cfg
 = 
upwm0_ªu£_cfg
;

386 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

387 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

390 
	}
}

398 
	$iSëPERI_PMC4pwm1_ªu£_cfg
(
upwm1_ªu£_cfg
)

400 
U_PERI_PMC4
 
o_≥ri_pmc4
;

401 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

402 
o_≥ri_pmc4
.
bôs
.
pwm1_ªu£_cfg
 = 
upwm1_ªu£_cfg
;

403 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

404 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

407 
	}
}

415 
	$iSëPERI_PMC4pwm2_ªu£_cfg
(
upwm2_ªu£_cfg
)

417 
U_PERI_PMC4
 
o_≥ri_pmc4
;

418 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

419 
o_≥ri_pmc4
.
bôs
.
pwm2_ªu£_cfg
 = 
upwm2_ªu£_cfg
;

420 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

421 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

424 
	}
}

432 
	$iSëPERI_PMC4pwm3_ªu£_cfg
(
upwm3_ªu£_cfg
)

434 
U_PERI_PMC4
 
o_≥ri_pmc4
;

435 
o_≥ri_pmc4
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC4
.u32;

436 
o_≥ri_pmc4
.
bôs
.
pwm3_ªu£_cfg
 = 
upwm3_ªu£_cfg
;

437 
g›PMCAŒReg
->
PERI_PMC4
.
u32
 = 
o_≥ri_pmc4
.u32;

438 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC4
.
u32
));

441 
	}
}

449 
	$iSëPERI_PMC5c‹e_hpm_fsm_í
(
uc‹e_hpm_fsm_í
)

451 
U_PERI_PMC5
 
o_≥ri_pmc5
;

452 
o_≥ri_pmc5
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC5
.u32;

453 
o_≥ri_pmc5
.
bôs
.
c‹e_hpm_fsm_í
 = 
uc‹e_hpm_fsm_í
;

454 
g›PMCAŒReg
->
PERI_PMC5
.
u32
 = 
o_≥ri_pmc5
.u32;

455 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC5
.
u32
));

458 
	}
}

466 
	$iSëPERI_PMC5c‹e_avs_hpm_fsm_ˇlc_mode
(
uc‹e_avs_hpm_fsm_ˇlc_mode
)

468 
U_PERI_PMC5
 
o_≥ri_pmc5
;

469 
o_≥ri_pmc5
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC5
.u32;

470 
o_≥ri_pmc5
.
bôs
.
c‹e_avs_hpm_fsm_ˇlc_mode
 = 
uc‹e_avs_hpm_fsm_ˇlc_mode
;

471 
g›PMCAŒReg
->
PERI_PMC5
.
u32
 = 
o_≥ri_pmc5
.u32;

472 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC5
.
u32
));

475 
	}
}

483 
	$iSëPERI_PMC5c‹e_avs_fsm_dec_pwm_°ï
(
uc‹e_avs_fsm_dec_pwm_°ï
)

485 
U_PERI_PMC5
 
o_≥ri_pmc5
;

486 
o_≥ri_pmc5
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC5
.u32;

487 
o_≥ri_pmc5
.
bôs
.
c‹e_avs_fsm_dec_pwm_°ï
 = 
uc‹e_avs_fsm_dec_pwm_°ï
;

488 
g›PMCAŒReg
->
PERI_PMC5
.
u32
 = 
o_≥ri_pmc5
.u32;

489 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC5
.
u32
));

492 
	}
}

500 
	$iSëPERI_PMC5c‹e_avs_fsm_öc_pwm_°ï
(
uc‹e_avs_fsm_öc_pwm_°ï
)

502 
U_PERI_PMC5
 
o_≥ri_pmc5
;

503 
o_≥ri_pmc5
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC5
.u32;

504 
o_≥ri_pmc5
.
bôs
.
c‹e_avs_fsm_öc_pwm_°ï
 = 
uc‹e_avs_fsm_öc_pwm_°ï
;

505 
g›PMCAŒReg
->
PERI_PMC5
.
u32
 = 
o_≥ri_pmc5
.u32;

506 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC5
.
u32
));

509 
	}
}

517 
	$iSëPERI_PMC6˝u_hpm_fsm_í
(
u˝u_hpm_fsm_í
)

519 
U_PERI_PMC6
 
o_≥ri_pmc6
;

520 
o_≥ri_pmc6
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC6
.u32;

521 
o_≥ri_pmc6
.
bôs
.
˝u_hpm_fsm_í
 = 
u˝u_hpm_fsm_í
;

522 
g›PMCAŒReg
->
PERI_PMC6
.
u32
 = 
o_≥ri_pmc6
.u32;

523 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC6
.
u32
));

526 
	}
}

534 
	$iSëPERI_PMC6˝u_avs_hpm_fsm_ˇlc_mode
(
u˝u_avs_hpm_fsm_ˇlc_mode
)

536 
U_PERI_PMC6
 
o_≥ri_pmc6
;

537 
o_≥ri_pmc6
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC6
.u32;

538 
o_≥ri_pmc6
.
bôs
.
˝u_avs_hpm_fsm_ˇlc_mode
 = 
u˝u_avs_hpm_fsm_ˇlc_mode
;

539 
g›PMCAŒReg
->
PERI_PMC6
.
u32
 = 
o_≥ri_pmc6
.u32;

540 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC6
.
u32
));

543 
	}
}

551 
	$iSëPERI_PMC6˝u_avs_fsm_dec_pwm_°ï
(
u˝u_avs_fsm_dec_pwm_°ï
)

553 
U_PERI_PMC6
 
o_≥ri_pmc6
;

554 
o_≥ri_pmc6
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC6
.u32;

555 
o_≥ri_pmc6
.
bôs
.
˝u_avs_fsm_dec_pwm_°ï
 = 
u˝u_avs_fsm_dec_pwm_°ï
;

556 
g›PMCAŒReg
->
PERI_PMC6
.
u32
 = 
o_≥ri_pmc6
.u32;

557 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC6
.
u32
));

560 
	}
}

568 
	$iSëPERI_PMC6˝u_avs_fsm_öc_pwm_°ï
(
u˝u_avs_fsm_öc_pwm_°ï
)

570 
U_PERI_PMC6
 
o_≥ri_pmc6
;

571 
o_≥ri_pmc6
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC6
.u32;

572 
o_≥ri_pmc6
.
bôs
.
˝u_avs_fsm_öc_pwm_°ï
 = 
u˝u_avs_fsm_öc_pwm_°ï
;

573 
g›PMCAŒReg
->
PERI_PMC6
.
u32
 = 
o_≥ri_pmc6
.u32;

574 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC6
.
u32
));

577 
	}
}

585 
	$iSëPERI_PMC7ddr_hpm_fsm_í
(
uddr_hpm_fsm_í
)

587 
U_PERI_PMC7
 
o_≥ri_pmc7
;

588 
o_≥ri_pmc7
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC7
.u32;

589 
o_≥ri_pmc7
.
bôs
.
ddr_hpm_fsm_í
 = 
uddr_hpm_fsm_í
;

590 
g›PMCAŒReg
->
PERI_PMC7
.
u32
 = 
o_≥ri_pmc7
.u32;

591 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC7
.
u32
));

594 
	}
}

602 
	$iSëPERI_PMC7ddr_avs_hpm_fsm_ˇlc_mode
(
uddr_avs_hpm_fsm_ˇlc_mode
)

604 
U_PERI_PMC7
 
o_≥ri_pmc7
;

605 
o_≥ri_pmc7
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC7
.u32;

606 
o_≥ri_pmc7
.
bôs
.
ddr_avs_hpm_fsm_ˇlc_mode
 = 
uddr_avs_hpm_fsm_ˇlc_mode
;

607 
g›PMCAŒReg
->
PERI_PMC7
.
u32
 = 
o_≥ri_pmc7
.u32;

608 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC7
.
u32
));

611 
	}
}

619 
	$iSëPERI_PMC7ddr_avs_fsm_dec_pwm_°ï
(
uddr_avs_fsm_dec_pwm_°ï
)

621 
U_PERI_PMC7
 
o_≥ri_pmc7
;

622 
o_≥ri_pmc7
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC7
.u32;

623 
o_≥ri_pmc7
.
bôs
.
ddr_avs_fsm_dec_pwm_°ï
 = 
uddr_avs_fsm_dec_pwm_°ï
;

624 
g›PMCAŒReg
->
PERI_PMC7
.
u32
 = 
o_≥ri_pmc7
.u32;

625 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC7
.
u32
));

628 
	}
}

636 
	$iSëPERI_PMC7ddr_avs_fsm_öc_pwm_°ï
(
uddr_avs_fsm_öc_pwm_°ï
)

638 
U_PERI_PMC7
 
o_≥ri_pmc7
;

639 
o_≥ri_pmc7
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC7
.u32;

640 
o_≥ri_pmc7
.
bôs
.
ddr_avs_fsm_öc_pwm_°ï
 = 
uddr_avs_fsm_öc_pwm_°ï
;

641 
g›PMCAŒReg
->
PERI_PMC7
.
u32
 = 
o_≥ri_pmc7
.u32;

642 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC7
.
u32
));

645 
	}
}

653 
	$iSëPERI_PMC8mda_hpm_fsm_í
(
umda_hpm_fsm_í
)

655 
U_PERI_PMC8
 
o_≥ri_pmc8
;

656 
o_≥ri_pmc8
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC8
.u32;

657 
o_≥ri_pmc8
.
bôs
.
mda_hpm_fsm_í
 = 
umda_hpm_fsm_í
;

658 
g›PMCAŒReg
->
PERI_PMC8
.
u32
 = 
o_≥ri_pmc8
.u32;

659 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC8
.
u32
));

662 
	}
}

670 
	$iSëPERI_PMC8mda_avs_hpm_fsm_ˇlc_mode
(
umda_avs_hpm_fsm_ˇlc_mode
)

672 
U_PERI_PMC8
 
o_≥ri_pmc8
;

673 
o_≥ri_pmc8
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC8
.u32;

674 
o_≥ri_pmc8
.
bôs
.
mda_avs_hpm_fsm_ˇlc_mode
 = 
umda_avs_hpm_fsm_ˇlc_mode
;

675 
g›PMCAŒReg
->
PERI_PMC8
.
u32
 = 
o_≥ri_pmc8
.u32;

676 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC8
.
u32
));

679 
	}
}

687 
	$iSëPERI_PMC8mda_avs_fsm_dec_pwm_°ï
(
umda_avs_fsm_dec_pwm_°ï
)

689 
U_PERI_PMC8
 
o_≥ri_pmc8
;

690 
o_≥ri_pmc8
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC8
.u32;

691 
o_≥ri_pmc8
.
bôs
.
mda_avs_fsm_dec_pwm_°ï
 = 
umda_avs_fsm_dec_pwm_°ï
;

692 
g›PMCAŒReg
->
PERI_PMC8
.
u32
 = 
o_≥ri_pmc8
.u32;

693 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC8
.
u32
));

696 
	}
}

704 
	$iSëPERI_PMC8mda_avs_fsm_öc_pwm_°ï
(
umda_avs_fsm_öc_pwm_°ï
)

706 
U_PERI_PMC8
 
o_≥ri_pmc8
;

707 
o_≥ri_pmc8
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC8
.u32;

708 
o_≥ri_pmc8
.
bôs
.
mda_avs_fsm_öc_pwm_°ï
 = 
umda_avs_fsm_öc_pwm_°ï
;

709 
g›PMCAŒReg
->
PERI_PMC8
.
u32
 = 
o_≥ri_pmc8
.u32;

710 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC8
.
u32
));

713 
	}
}

721 
	$iSëPERI_PMC10c‹e_hpm_div
(
uc‹e_hpm_div
)

723 
U_PERI_PMC10
 
o_≥ri_pmc10
;

724 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

725 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_div
 = 
uc‹e_hpm_div
;

726 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

727 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

730 
	}
}

738 
	$iSëPERI_PMC10c‹e_hpm_shi·
(
uc‹e_hpm_shi·
)

740 
U_PERI_PMC10
 
o_≥ri_pmc10
;

741 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

742 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_shi·
 = 
uc‹e_hpm_shi·
;

743 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

744 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

747 
	}
}

755 
	$iSëPERI_PMC10c‹e_hpm_off£t
(
uc‹e_hpm_off£t
)

757 
U_PERI_PMC10
 
o_≥ri_pmc10
;

758 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

759 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_off£t
 = 
uc‹e_hpm_off£t
;

760 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

761 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

764 
	}
}

772 
	$iSëPERI_PMC10c‹e_hpm_í
(
uc‹e_hpm_í
)

774 
U_PERI_PMC10
 
o_≥ri_pmc10
;

775 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

776 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_í
 = 
uc‹e_hpm_í
;

777 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

778 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

781 
	}
}

789 
	$iSëPERI_PMC10c‹e_hpm_by∑ss
(
uc‹e_hpm_by∑ss
)

791 
U_PERI_PMC10
 
o_≥ri_pmc10
;

792 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

793 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_by∑ss
 = 
uc‹e_hpm_by∑ss
;

794 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

795 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

798 
	}
}

806 
	$iSëPERI_PMC10c‹e_hpm_m⁄ô‹_í
(
uc‹e_hpm_m⁄ô‹_í
)

808 
U_PERI_PMC10
 
o_≥ri_pmc10
;

809 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

810 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_m⁄ô‹_í
 = 
uc‹e_hpm_m⁄ô‹_í
;

811 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

812 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

815 
	}
}

823 
	$iSëPERI_PMC10c‹e_hpm_§°_ªq
(
uc‹e_hpm_§°_ªq
)

825 
U_PERI_PMC10
 
o_≥ri_pmc10
;

826 
o_≥ri_pmc10
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC10
.u32;

827 
o_≥ri_pmc10
.
bôs
.
c‹e_hpm_§°_ªq
 = 
uc‹e_hpm_§°_ªq
;

828 
g›PMCAŒReg
->
PERI_PMC10
.
u32
 = 
o_≥ri_pmc10
.u32;

829 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC10
.
u32
));

832 
	}
}

840 
	$iSëPERI_PMC13c‹e_hpm_u∂imô
(
uc‹e_hpm_u∂imô
)

842 
U_PERI_PMC13
 
o_≥ri_pmc13
;

843 
o_≥ri_pmc13
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC13
.u32;

844 
o_≥ri_pmc13
.
bôs
.
c‹e_hpm_u∂imô
 = 
uc‹e_hpm_u∂imô
;

845 
g›PMCAŒReg
->
PERI_PMC13
.
u32
 = 
o_≥ri_pmc13
.u32;

846 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC13
.
u32
));

849 
	}
}

857 
	$iSëPERI_PMC13c‹e_hpm_lowlimô
(
uc‹e_hpm_lowlimô
)

859 
U_PERI_PMC13
 
o_≥ri_pmc13
;

860 
o_≥ri_pmc13
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC13
.u32;

861 
o_≥ri_pmc13
.
bôs
.
c‹e_hpm_lowlimô
 = 
uc‹e_hpm_lowlimô
;

862 
g›PMCAŒReg
->
PERI_PMC13
.
u32
 = 
o_≥ri_pmc13
.u32;

863 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC13
.
u32
));

866 
	}
}

874 
	$iSëPERI_PMC13c‹e_hpm_m⁄ô‹_≥riod
(
uc‹e_hpm_m⁄ô‹_≥riod
)

876 
U_PERI_PMC13
 
o_≥ri_pmc13
;

877 
o_≥ri_pmc13
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC13
.u32;

878 
o_≥ri_pmc13
.
bôs
.
c‹e_hpm_m⁄ô‹_≥riod
 = 
uc‹e_hpm_m⁄ô‹_≥riod
;

879 
g›PMCAŒReg
->
PERI_PMC13
.
u32
 = 
o_≥ri_pmc13
.u32;

880 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC13
.
u32
));

883 
	}
}

891 
	$iSëPERI_PMC14˝u_hpm_div
(
u˝u_hpm_div
)

893 
U_PERI_PMC14
 
o_≥ri_pmc14
;

894 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

895 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_div
 = 
u˝u_hpm_div
;

896 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

897 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

900 
	}
}

908 
	$iSëPERI_PMC14˝u_hpm_shi·
(
u˝u_hpm_shi·
)

910 
U_PERI_PMC14
 
o_≥ri_pmc14
;

911 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

912 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_shi·
 = 
u˝u_hpm_shi·
;

913 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

914 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

917 
	}
}

925 
	$iSëPERI_PMC14˝u_hpm_off£t
(
u˝u_hpm_off£t
)

927 
U_PERI_PMC14
 
o_≥ri_pmc14
;

928 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

929 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_off£t
 = 
u˝u_hpm_off£t
;

930 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

931 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

934 
	}
}

942 
	$iSëPERI_PMC14˝u_hpm_í
(
u˝u_hpm_í
)

944 
U_PERI_PMC14
 
o_≥ri_pmc14
;

945 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

946 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_í
 = 
u˝u_hpm_í
;

947 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

948 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

951 
	}
}

959 
	$iSëPERI_PMC14˝u_hpm_by∑ss
(
u˝u_hpm_by∑ss
)

961 
U_PERI_PMC14
 
o_≥ri_pmc14
;

962 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

963 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_by∑ss
 = 
u˝u_hpm_by∑ss
;

964 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

965 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

968 
	}
}

976 
	$iSëPERI_PMC14˝u_hpm_m⁄ô‹_í
(
u˝u_hpm_m⁄ô‹_í
)

978 
U_PERI_PMC14
 
o_≥ri_pmc14
;

979 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

980 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_m⁄ô‹_í
 = 
u˝u_hpm_m⁄ô‹_í
;

981 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

982 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

985 
	}
}

993 
	$iSëPERI_PMC14˝u_hpm_§°_ªq
(
u˝u_hpm_§°_ªq
)

995 
U_PERI_PMC14
 
o_≥ri_pmc14
;

996 
o_≥ri_pmc14
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC14
.u32;

997 
o_≥ri_pmc14
.
bôs
.
˝u_hpm_§°_ªq
 = 
u˝u_hpm_§°_ªq
;

998 
g›PMCAŒReg
->
PERI_PMC14
.
u32
 = 
o_≥ri_pmc14
.u32;

999 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC14
.
u32
));

1002 
	}
}

1010 
	$iSëPERI_PMC17˝u_hpm_u∂imô
(
u˝u_hpm_u∂imô
)

1012 
U_PERI_PMC17
 
o_≥ri_pmc17
;

1013 
o_≥ri_pmc17
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC17
.u32;

1014 
o_≥ri_pmc17
.
bôs
.
˝u_hpm_u∂imô
 = 
u˝u_hpm_u∂imô
;

1015 
g›PMCAŒReg
->
PERI_PMC17
.
u32
 = 
o_≥ri_pmc17
.u32;

1016 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC17
.
u32
));

1019 
	}
}

1027 
	$iSëPERI_PMC17˝u_hpm_lowlimô
(
u˝u_hpm_lowlimô
)

1029 
U_PERI_PMC17
 
o_≥ri_pmc17
;

1030 
o_≥ri_pmc17
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC17
.u32;

1031 
o_≥ri_pmc17
.
bôs
.
˝u_hpm_lowlimô
 = 
u˝u_hpm_lowlimô
;

1032 
g›PMCAŒReg
->
PERI_PMC17
.
u32
 = 
o_≥ri_pmc17
.u32;

1033 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC17
.
u32
));

1036 
	}
}

1044 
	$iSëPERI_PMC17˝u_hpm_m⁄ô‹_≥riod
(
u˝u_hpm_m⁄ô‹_≥riod
)

1046 
U_PERI_PMC17
 
o_≥ri_pmc17
;

1047 
o_≥ri_pmc17
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC17
.u32;

1048 
o_≥ri_pmc17
.
bôs
.
˝u_hpm_m⁄ô‹_≥riod
 = 
u˝u_hpm_m⁄ô‹_≥riod
;

1049 
g›PMCAŒReg
->
PERI_PMC17
.
u32
 = 
o_≥ri_pmc17
.u32;

1050 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC17
.
u32
));

1052 
	}
}

1060 
	$iSëPERI_PMC18ddr_hpm_div
(
uddr_hpm_div
)

1062 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1063 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1064 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_div
 = 
uddr_hpm_div
;

1065 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1066 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1069 
	}
}

1077 
	$iSëPERI_PMC18ddr_hpm_shi·
(
uddr_hpm_shi·
)

1079 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1080 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1081 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_shi·
 = 
uddr_hpm_shi·
;

1082 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1083 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1086 
	}
}

1094 
	$iSëPERI_PMC18ddr_hpm_off£t
(
uddr_hpm_off£t
)

1096 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1097 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1098 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_off£t
 = 
uddr_hpm_off£t
;

1099 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1100 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1103 
	}
}

1111 
	$iSëPERI_PMC18ddr_hpm_í
(
uddr_hpm_í
)

1113 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1114 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1115 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_í
 = 
uddr_hpm_í
;

1116 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1117 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1120 
	}
}

1128 
	$iSëPERI_PMC18ddr_hpm_by∑ss
(
uddr_hpm_by∑ss
)

1130 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1131 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1132 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_by∑ss
 = 
uddr_hpm_by∑ss
;

1133 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1134 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1137 
	}
}

1145 
	$iSëPERI_PMC18ddr_hpm_m⁄ô‹_í
(
uddr_hpm_m⁄ô‹_í
)

1147 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1148 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1149 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_m⁄ô‹_í
 = 
uddr_hpm_m⁄ô‹_í
;

1150 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1151 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1154 
	}
}

1162 
	$iSëPERI_PMC18ddr_hpm_§°_ªq
(
uddr_hpm_§°_ªq
)

1164 
U_PERI_PMC18
 
o_≥ri_pmc18
;

1165 
o_≥ri_pmc18
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC18
.u32;

1166 
o_≥ri_pmc18
.
bôs
.
ddr_hpm_§°_ªq
 = 
uddr_hpm_§°_ªq
;

1167 
g›PMCAŒReg
->
PERI_PMC18
.
u32
 = 
o_≥ri_pmc18
.u32;

1168 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC18
.
u32
));

1171 
	}
}

1179 
	$iSëPERI_PMC21ddr_hpm_u∂imô
(
uddr_hpm_u∂imô
)

1181 
U_PERI_PMC21
 
o_≥ri_pmc21
;

1182 
o_≥ri_pmc21
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC21
.u32;

1183 
o_≥ri_pmc21
.
bôs
.
ddr_hpm_u∂imô
 = 
uddr_hpm_u∂imô
;

1184 
g›PMCAŒReg
->
PERI_PMC21
.
u32
 = 
o_≥ri_pmc21
.u32;

1185 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC21
.
u32
));

1188 
	}
}

1196 
	$iSëPERI_PMC21ddr_hpm_lowlimô
(
uddr_hpm_lowlimô
)

1198 
U_PERI_PMC21
 
o_≥ri_pmc21
;

1199 
o_≥ri_pmc21
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC21
.u32;

1200 
o_≥ri_pmc21
.
bôs
.
ddr_hpm_lowlimô
 = 
uddr_hpm_lowlimô
;

1201 
g›PMCAŒReg
->
PERI_PMC21
.
u32
 = 
o_≥ri_pmc21
.u32;

1202 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC21
.
u32
));

1205 
	}
}

1213 
	$iSëPERI_PMC21ddr_hpm_m⁄ô‹_≥riod
(
uddr_hpm_m⁄ô‹_≥riod
)

1215 
U_PERI_PMC21
 
o_≥ri_pmc21
;

1216 
o_≥ri_pmc21
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC21
.u32;

1217 
o_≥ri_pmc21
.
bôs
.
ddr_hpm_m⁄ô‹_≥riod
 = 
uddr_hpm_m⁄ô‹_≥riod
;

1218 
g›PMCAŒReg
->
PERI_PMC21
.
u32
 = 
o_≥ri_pmc21
.u32;

1219 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC21
.
u32
));

1222 
	}
}

1230 
	$iSëPERI_PMC22mda_t›_hpm_div
(
umda_t›_hpm_div
)

1232 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1233 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1234 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_div
 = 
umda_t›_hpm_div
;

1235 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1236 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1239 
	}
}

1247 
	$iSëPERI_PMC22mda_t›_hpm_shi·
(
umda_t›_hpm_shi·
)

1249 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1250 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1251 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_shi·
 = 
umda_t›_hpm_shi·
;

1252 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1253 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1256 
	}
}

1264 
	$iSëPERI_PMC22mda_t›_hpm_off£t
(
umda_t›_hpm_off£t
)

1266 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1267 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1268 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_off£t
 = 
umda_t›_hpm_off£t
;

1269 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1270 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1273 
	}
}

1281 
	$iSëPERI_PMC22mda_t›_hpm_í
(
umda_t›_hpm_í
)

1283 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1284 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1285 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_í
 = 
umda_t›_hpm_í
;

1286 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1287 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1290 
	}
}

1298 
	$iSëPERI_PMC22mda_t›_hpm_by∑ss
(
umda_t›_hpm_by∑ss
)

1300 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1301 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1302 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_by∑ss
 = 
umda_t›_hpm_by∑ss
;

1303 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1304 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1307 
	}
}

1315 
	$iSëPERI_PMC22mda_t›_hpm_m⁄ô‹_í
(
umda_t›_hpm_m⁄ô‹_í
)

1317 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1318 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1319 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_m⁄ô‹_í
 = 
umda_t›_hpm_m⁄ô‹_í
;

1320 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1321 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1324 
	}
}

1332 
	$iSëPERI_PMC22mda_t›_hpm_§°_ªq
(
umda_t›_hpm_§°_ªq
)

1334 
U_PERI_PMC22
 
o_≥ri_pmc22
;

1335 
o_≥ri_pmc22
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC22
.u32;

1336 
o_≥ri_pmc22
.
bôs
.
mda_t›_hpm_§°_ªq
 = 
umda_t›_hpm_§°_ªq
;

1337 
g›PMCAŒReg
->
PERI_PMC22
.
u32
 = 
o_≥ri_pmc22
.u32;

1338 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC22
.
u32
));

1341 
	}
}

1349 
	$iSëPERI_PMC25mda_t›_hpm_u∂imô
(
umda_t›_hpm_u∂imô
)

1351 
U_PERI_PMC25
 
o_≥ri_pmc25
;

1352 
o_≥ri_pmc25
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC25
.u32;

1353 
o_≥ri_pmc25
.
bôs
.
mda_t›_hpm_u∂imô
 = 
umda_t›_hpm_u∂imô
;

1354 
g›PMCAŒReg
->
PERI_PMC25
.
u32
 = 
o_≥ri_pmc25
.u32;

1355 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC25
.
u32
));

1358 
	}
}

1366 
	$iSëPERI_PMC25mda_t›_hpm_lowlimô
(
umda_t›_hpm_lowlimô
)

1368 
U_PERI_PMC25
 
o_≥ri_pmc25
;

1369 
o_≥ri_pmc25
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC25
.u32;

1370 
o_≥ri_pmc25
.
bôs
.
mda_t›_hpm_lowlimô
 = 
umda_t›_hpm_lowlimô
;

1371 
g›PMCAŒReg
->
PERI_PMC25
.
u32
 = 
o_≥ri_pmc25
.u32;

1372 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC25
.
u32
));

1375 
	}
}

1383 
	$iSëPERI_PMC25mda_t›_hpm_m⁄ô‹_≥riod
(
umda_t›_hpm_m⁄ô‹_≥riod
)

1385 
U_PERI_PMC25
 
o_≥ri_pmc25
;

1386 
o_≥ri_pmc25
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC25
.u32;

1387 
o_≥ri_pmc25
.
bôs
.
mda_t›_hpm_m⁄ô‹_≥riod
 = 
umda_t›_hpm_m⁄ô‹_≥riod
;

1388 
g›PMCAŒReg
->
PERI_PMC25
.
u32
 = 
o_≥ri_pmc25
.u32;

1389 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC25
.
u32
));

1392 
	}
}

1400 
	$iSëPERI_PMC26vedu_hpm_div
(
uvedu_hpm_div
)

1402 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1403 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1404 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_div
 = 
uvedu_hpm_div
;

1405 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1406 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1409 
	}
}

1417 
	$iSëPERI_PMC26vedu_hpm_shi·
(
uvedu_hpm_shi·
)

1419 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1420 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1421 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_shi·
 = 
uvedu_hpm_shi·
;

1422 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1423 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1426 
	}
}

1434 
	$iSëPERI_PMC26vedu_hpm_off£t
(
uvedu_hpm_off£t
)

1436 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1437 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1438 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_off£t
 = 
uvedu_hpm_off£t
;

1439 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1440 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1443 
	}
}

1451 
	$iSëPERI_PMC26vedu_hpm_í
(
uvedu_hpm_í
)

1453 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1454 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1455 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_í
 = 
uvedu_hpm_í
;

1456 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1457 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1460 
	}
}

1468 
	$iSëPERI_PMC26vedu_hpm_by∑ss
(
uvedu_hpm_by∑ss
)

1470 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1471 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1472 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_by∑ss
 = 
uvedu_hpm_by∑ss
;

1473 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1474 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1477 
	}
}

1485 
	$iSëPERI_PMC26vedu_hpm_m⁄ô‹_í
(
uvedu_hpm_m⁄ô‹_í
)

1487 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1488 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1489 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_m⁄ô‹_í
 = 
uvedu_hpm_m⁄ô‹_í
;

1490 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1491 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1494 
	}
}

1502 
	$iSëPERI_PMC26vedu_hpm_§°_ªq
(
uvedu_hpm_§°_ªq
)

1504 
U_PERI_PMC26
 
o_≥ri_pmc26
;

1505 
o_≥ri_pmc26
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC26
.u32;

1506 
o_≥ri_pmc26
.
bôs
.
vedu_hpm_§°_ªq
 = 
uvedu_hpm_§°_ªq
;

1507 
g›PMCAŒReg
->
PERI_PMC26
.
u32
 = 
o_≥ri_pmc26
.u32;

1508 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC26
.
u32
));

1511 
	}
}

1519 
	$iSëPERI_PMC29vedu_hpm_u∂imô
(
uvedu_hpm_u∂imô
)

1521 
U_PERI_PMC29
 
o_≥ri_pmc29
;

1522 
o_≥ri_pmc29
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC29
.u32;

1523 
o_≥ri_pmc29
.
bôs
.
vedu_hpm_u∂imô
 = 
uvedu_hpm_u∂imô
;

1524 
g›PMCAŒReg
->
PERI_PMC29
.
u32
 = 
o_≥ri_pmc29
.u32;

1525 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC29
.
u32
));

1528 
	}
}

1536 
	$iSëPERI_PMC29vedu_hpm_lowlimô
(
uvedu_hpm_lowlimô
)

1538 
U_PERI_PMC29
 
o_≥ri_pmc29
;

1539 
o_≥ri_pmc29
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC29
.u32;

1540 
o_≥ri_pmc29
.
bôs
.
vedu_hpm_lowlimô
 = 
uvedu_hpm_lowlimô
;

1541 
g›PMCAŒReg
->
PERI_PMC29
.
u32
 = 
o_≥ri_pmc29
.u32;

1542 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC29
.
u32
));

1545 
	}
}

1553 
	$iSëPERI_PMC29vedu_hpm_m⁄ô‹_≥riod
(
uvedu_hpm_m⁄ô‹_≥riod
)

1555 
U_PERI_PMC29
 
o_≥ri_pmc29
;

1556 
o_≥ri_pmc29
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC29
.u32;

1557 
o_≥ri_pmc29
.
bôs
.
vedu_hpm_m⁄ô‹_≥riod
 = 
uvedu_hpm_m⁄ô‹_≥riod
;

1558 
g›PMCAŒReg
->
PERI_PMC29
.
u32
 = 
o_≥ri_pmc29
.u32;

1559 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC29
.
u32
));

1562 
	}
}

1570 
	$iSëPERI_PMC30vedu_hpm_m⁄ô‹_≥riod
(
uvedu_hpm_m⁄ô‹_≥riod
)

1572 
U_PERI_PMC30
 
o_≥ri_pmc30
;

1573 
o_≥ri_pmc30
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC30
.u32;

1574 
o_≥ri_pmc30
.
bôs
.
vedu_hpm_m⁄ô‹_≥riod
 = 
uvedu_hpm_m⁄ô‹_≥riod
;

1575 
g›PMCAŒReg
->
PERI_PMC30
.
u32
 = 
o_≥ri_pmc30
.u32;

1576 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC30
.
u32
));

1579 
	}
}

1587 
	$iSëPERI_PMC30mda_t›_hpm_m⁄ô‹_≥riod
(
umda_t›_hpm_m⁄ô‹_≥riod
)

1589 
U_PERI_PMC30
 
o_≥ri_pmc30
;

1590 
o_≥ri_pmc30
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC30
.u32;

1591 
o_≥ri_pmc30
.
bôs
.
mda_t›_hpm_m⁄ô‹_≥riod
 = 
umda_t›_hpm_m⁄ô‹_≥riod
;

1592 
g›PMCAŒReg
->
PERI_PMC30
.
u32
 = 
o_≥ri_pmc30
.u32;

1593 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC30
.
u32
));

1596 
	}
}

1604 
	$iSëPERI_PMC30ddr_hpm_m⁄ô‹_≥riod
(
uddr_hpm_m⁄ô‹_≥riod
)

1606 
U_PERI_PMC30
 
o_≥ri_pmc30
;

1607 
o_≥ri_pmc30
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC30
.u32;

1608 
o_≥ri_pmc30
.
bôs
.
ddr_hpm_m⁄ô‹_≥riod
 = 
uddr_hpm_m⁄ô‹_≥riod
;

1609 
g›PMCAŒReg
->
PERI_PMC30
.
u32
 = 
o_≥ri_pmc30
.u32;

1610 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC30
.
u32
));

1613 
	}
}

1621 
	$iSëPERI_PMC30˝u_hpm_m⁄ô‹_≥riod
(
u˝u_hpm_m⁄ô‹_≥riod
)

1623 
U_PERI_PMC30
 
o_≥ri_pmc30
;

1625 
o_≥ri_pmc30
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC30
.u32;

1626 
o_≥ri_pmc30
.
bôs
.
˝u_hpm_m⁄ô‹_≥riod
 = 
u˝u_hpm_m⁄ô‹_≥riod
;

1627 
g›PMCAŒReg
->
PERI_PMC30
.
u32
 = 
o_≥ri_pmc30
.u32;

1628 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC30
.
u32
));

1630 
	}
}

1638 
	$iSëPERI_PMC31c‹e_hpm_m⁄ô‹_≥riod
(
uc‹e_hpm_m⁄ô‹_≥riod
)

1640 
U_PERI_PMC31
 
o_≥ri_pmc31
;

1641 
o_≥ri_pmc31
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC31
.u32;

1642 
o_≥ri_pmc31
.
bôs
.
c‹e_hpm_m⁄ô‹_≥riod
 = 
uc‹e_hpm_m⁄ô‹_≥riod
;

1643 
g›PMCAŒReg
->
PERI_PMC31
.
u32
 = 
o_≥ri_pmc31
.u32;

1644 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC31
.
u32
));

1647 
	}
}

1655 
	$iSëPERI_PMC32˝u_ts_£l
(
u˝u_ts_£l
)

1657 
U_PERI_PMC32
 
o_≥ri_pmc32
;

1658 
o_≥ri_pmc32
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC32
.u32;

1659 
o_≥ri_pmc32
.
bôs
.
˝u_ts_£l
 = 
u˝u_ts_£l
;

1660 
g›PMCAŒReg
->
PERI_PMC32
.
u32
 = 
o_≥ri_pmc32
.u32;

1661 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC32
.
u32
));

1664 
	}
}

1672 
	$iSëPERI_PMC32˝u_ts_dly_adju°
(
u˝u_ts_dly_adju°
)

1674 
U_PERI_PMC32
 
o_≥ri_pmc32
;

1675 
o_≥ri_pmc32
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC32
.u32;

1676 
o_≥ri_pmc32
.
bôs
.
˝u_ts_dly_adju°
 = 
u˝u_ts_dly_adju°
;

1677 
g›PMCAŒReg
->
PERI_PMC32
.
u32
 = 
o_≥ri_pmc32
.u32;

1678 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC32
.
u32
));

1681 
	}
}

1689 
	$iSëPERI_PMC32˝u_ts_°ï
(
u˝u_ts_°ï
)

1691 
U_PERI_PMC32
 
o_≥ri_pmc32
;

1692 
o_≥ri_pmc32
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC32
.u32;

1693 
o_≥ri_pmc32
.
bôs
.
˝u_ts_°ï
 = 
u˝u_ts_°ï
;

1694 
g›PMCAŒReg
->
PERI_PMC32
.
u32
 = 
o_≥ri_pmc32
.u32;

1695 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC32
.
u32
));

1698 
	}
}

1706 
	$iSëPERI_PMC32˝u_ts_í
(
u˝u_ts_í
)

1708 
U_PERI_PMC32
 
o_≥ri_pmc32
;

1709 
o_≥ri_pmc32
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC32
.u32;

1710 
o_≥ri_pmc32
.
bôs
.
˝u_ts_í
 = 
u˝u_ts_í
;

1711 
g›PMCAŒReg
->
PERI_PMC32
.
u32
 = 
o_≥ri_pmc32
.u32;

1712 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC32
.
u32
));

1715 
	}
}

1723 
	$iSëPERI_PMC33ddr_ts_£l
(
uddr_ts_£l
)

1725 
U_PERI_PMC33
 
o_≥ri_pmc33
;

1726 
o_≥ri_pmc33
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC33
.u32;

1727 
o_≥ri_pmc33
.
bôs
.
ddr_ts_£l
 = 
uddr_ts_£l
;

1728 
g›PMCAŒReg
->
PERI_PMC33
.
u32
 = 
o_≥ri_pmc33
.u32;

1729 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC33
.
u32
));

1732 
	}
}

1740 
	$iSëPERI_PMC33ddr_ts_dly_adju°
(
uddr_ts_dly_adju°
)

1742 
U_PERI_PMC33
 
o_≥ri_pmc33
;

1743 
o_≥ri_pmc33
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC33
.u32;

1744 
o_≥ri_pmc33
.
bôs
.
ddr_ts_dly_adju°
 = 
uddr_ts_dly_adju°
;

1745 
g›PMCAŒReg
->
PERI_PMC33
.
u32
 = 
o_≥ri_pmc33
.u32;

1746 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC33
.
u32
));

1749 
	}
}

1757 
	$iSëPERI_PMC33ddr_ts_°ï
(
uddr_ts_°ï
)

1759 
U_PERI_PMC33
 
o_≥ri_pmc33
;

1760 
o_≥ri_pmc33
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC33
.u32;

1761 
o_≥ri_pmc33
.
bôs
.
ddr_ts_°ï
 = 
uddr_ts_°ï
;

1762 
g›PMCAŒReg
->
PERI_PMC33
.
u32
 = 
o_≥ri_pmc33
.u32;

1763 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC33
.
u32
));

1766 
	}
}

1774 
	$iSëPERI_PMC33ddr_ts_í
(
uddr_ts_í
)

1776 
U_PERI_PMC33
 
o_≥ri_pmc33
;

1777 
o_≥ri_pmc33
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC33
.u32;

1778 
o_≥ri_pmc33
.
bôs
.
ddr_ts_í
 = 
uddr_ts_í
;

1779 
g›PMCAŒReg
->
PERI_PMC33
.
u32
 = 
o_≥ri_pmc33
.u32;

1780 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC33
.
u32
));

1783 
	}
}

1791 
	$iSëPERI_PMC34c‹e_ts_£l
(
uc‹e_ts_£l
)

1793 
U_PERI_PMC34
 
o_≥ri_pmc34
;

1794 
o_≥ri_pmc34
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC34
.u32;

1795 
o_≥ri_pmc34
.
bôs
.
c‹e_ts_£l
 = 
uc‹e_ts_£l
;

1796 
g›PMCAŒReg
->
PERI_PMC34
.
u32
 = 
o_≥ri_pmc34
.u32;

1797 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC34
.
u32
));

1800 
	}
}

1808 
	$iSëPERI_PMC34c‹e_ts_dly_adju°
(
uc‹e_ts_dly_adju°
)

1810 
U_PERI_PMC34
 
o_≥ri_pmc34
;

1811 
o_≥ri_pmc34
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC34
.u32;

1812 
o_≥ri_pmc34
.
bôs
.
c‹e_ts_dly_adju°
 = 
uc‹e_ts_dly_adju°
;

1813 
g›PMCAŒReg
->
PERI_PMC34
.
u32
 = 
o_≥ri_pmc34
.u32;

1814 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC34
.
u32
));

1817 
	}
}

1825 
	$iSëPERI_PMC34c‹e_ts_°ï
(
uc‹e_ts_°ï
)

1827 
U_PERI_PMC34
 
o_≥ri_pmc34
;

1828 
o_≥ri_pmc34
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC34
.u32;

1829 
o_≥ri_pmc34
.
bôs
.
c‹e_ts_°ï
 = 
uc‹e_ts_°ï
;

1830 
g›PMCAŒReg
->
PERI_PMC34
.
u32
 = 
o_≥ri_pmc34
.u32;

1831 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC34
.
u32
));

1834 
	}
}

1842 
	$iSëPERI_PMC34c‹e_ts_í
(
uc‹e_ts_í
)

1844 
U_PERI_PMC34
 
o_≥ri_pmc34
;

1845 
o_≥ri_pmc34
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC34
.u32;

1846 
o_≥ri_pmc34
.
bôs
.
c‹e_ts_í
 = 
uc‹e_ts_í
;

1847 
g›PMCAŒReg
->
PERI_PMC34
.
u32
 = 
o_≥ri_pmc34
.u32;

1848 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC34
.
u32
));

1851 
	}
}

1859 
	$iSëPERI_PMC35mda_t›_ts_£l
(
umda_t›_ts_£l
)

1861 
U_PERI_PMC35
 
o_≥ri_pmc35
;

1862 
o_≥ri_pmc35
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC35
.u32;

1863 
o_≥ri_pmc35
.
bôs
.
mda_t›_ts_£l
 = 
umda_t›_ts_£l
;

1864 
g›PMCAŒReg
->
PERI_PMC35
.
u32
 = 
o_≥ri_pmc35
.u32;

1865 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC35
.
u32
));

1868 
	}
}

1876 
	$iSëPERI_PMC35mda_t›_ts_dly_adju°
(
umda_t›_ts_dly_adju°
)

1878 
U_PERI_PMC35
 
o_≥ri_pmc35
;

1879 
o_≥ri_pmc35
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC35
.u32;

1880 
o_≥ri_pmc35
.
bôs
.
mda_t›_ts_dly_adju°
 = 
umda_t›_ts_dly_adju°
;

1881 
g›PMCAŒReg
->
PERI_PMC35
.
u32
 = 
o_≥ri_pmc35
.u32;

1882 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC35
.
u32
));

1885 
	}
}

1893 
	$iSëPERI_PMC35mda_t›_ts_°ï
(
umda_t›_ts_°ï
)

1895 
U_PERI_PMC35
 
o_≥ri_pmc35
;

1896 
o_≥ri_pmc35
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC35
.u32;

1897 
o_≥ri_pmc35
.
bôs
.
mda_t›_ts_°ï
 = 
umda_t›_ts_°ï
;

1898 
g›PMCAŒReg
->
PERI_PMC35
.
u32
 = 
o_≥ri_pmc35
.u32;

1899 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC35
.
u32
));

1902 
	}
}

1910 
	$iSëPERI_PMC35mda_t›_ts_í
(
umda_t›_ts_í
)

1912 
U_PERI_PMC35
 
o_≥ri_pmc35
;

1913 
o_≥ri_pmc35
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC35
.u32;

1914 
o_≥ri_pmc35
.
bôs
.
mda_t›_ts_í
 = 
umda_t›_ts_í
;

1915 
g›PMCAŒReg
->
PERI_PMC35
.
u32
 = 
o_≥ri_pmc35
.u32;

1916 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC35
.
u32
));

1919 
	}
}

1927 
	$iSëPERI_PMC36vedu_ts_£l
(
uvedu_ts_£l
)

1929 
U_PERI_PMC36
 
o_≥ri_pmc36
;

1930 
o_≥ri_pmc36
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC36
.u32;

1931 
o_≥ri_pmc36
.
bôs
.
vedu_ts_£l
 = 
uvedu_ts_£l
;

1932 
g›PMCAŒReg
->
PERI_PMC36
.
u32
 = 
o_≥ri_pmc36
.u32;

1933 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC36
.
u32
));

1936 
	}
}

1944 
	$iSëPERI_PMC36vedu_ts_dly_adju°
(
uvedu_ts_dly_adju°
)

1946 
U_PERI_PMC36
 
o_≥ri_pmc36
;

1947 
o_≥ri_pmc36
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC36
.u32;

1948 
o_≥ri_pmc36
.
bôs
.
vedu_ts_dly_adju°
 = 
uvedu_ts_dly_adju°
;

1949 
g›PMCAŒReg
->
PERI_PMC36
.
u32
 = 
o_≥ri_pmc36
.u32;

1950 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC36
.
u32
));

1953 
	}
}

1961 
	$iSëPERI_PMC36vedu_ts_°ï
(
uvedu_ts_°ï
)

1963 
U_PERI_PMC36
 
o_≥ri_pmc36
;

1964 
o_≥ri_pmc36
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC36
.u32;

1965 
o_≥ri_pmc36
.
bôs
.
vedu_ts_°ï
 = 
uvedu_ts_°ï
;

1966 
g›PMCAŒReg
->
PERI_PMC36
.
u32
 = 
o_≥ri_pmc36
.u32;

1967 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC36
.
u32
));

1970 
	}
}

1978 
	$iSëPERI_PMC36vedu_ts_í
(
uvedu_ts_í
)

1980 
U_PERI_PMC36
 
o_≥ri_pmc36
;

1981 
o_≥ri_pmc36
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC36
.u32;

1982 
o_≥ri_pmc36
.
bôs
.
vedu_ts_í
 = 
uvedu_ts_í
;

1983 
g›PMCAŒReg
->
PERI_PMC36
.
u32
 = 
o_≥ri_pmc36
.u32;

1984 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC36
.
u32
));

1987 
	}
}

1995 
	$iSëPERI_PMC58pmu_addr
(
upmu_addr
)

1997 
U_PERI_PMC58
 
o_≥ri_pmc58
;

1998 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

1999 
o_≥ri_pmc58
.
bôs
.
pmu_addr
 = 
upmu_addr
;

2000 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2001 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2004 
	}
}

2012 
	$iSëPERI_PMC58pmu_ªg_rd_Æl
(
upmu_ªg_rd_Æl
)

2014 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2015 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2016 
o_≥ri_pmc58
.
bôs
.
pmu_ªg_rd_Æl
 = 
upmu_ªg_rd_Æl
;

2017 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2018 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2021 
	}
}

2022 
	$iGëPERI_PMC58pmu_ªg_rd_Æl
(*
upmu_ªg_rd_Æl
)

2024 *
upmu_ªg_rd_Æl
 = 
g›PMCAŒReg
->
PERI_PMC58
.
bôs
.
pmu_ªg_rd_Æl
;

2026 
	}
}

2034 
	$iSëPERI_PMC58pmu_ªg0_wt_ªq
(
upmu_ªg0_wt_ªq
)

2036 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2037 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2038 
o_≥ri_pmc58
.
bôs
.
pmu_ªg0_wt_ªq
 = 
upmu_ªg0_wt_ªq
;

2039 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2040 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2043 
	}
}

2051 
	$iSëPERI_PMC58pmu_ªg1_wt_ªq
(
upmu_ªg1_wt_ªq
)

2053 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2054 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2055 
o_≥ri_pmc58
.
bôs
.
pmu_ªg1_wt_ªq
 = 
upmu_ªg1_wt_ªq
;

2056 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2057 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2060 
	}
}

2068 
	$iSëPERI_PMC58pmu_ªg2_wt_ªq
(
upmu_ªg2_wt_ªq
)

2070 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2071 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2072 
o_≥ri_pmc58
.
bôs
.
pmu_ªg2_wt_ªq
 = 
upmu_ªg2_wt_ªq
;

2073 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2074 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2077 
	}
}

2085 
	$iSëPERI_PMC58pmu_ªg3_wt_ªq
(
upmu_ªg3_wt_ªq
)

2087 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2088 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2089 
o_≥ri_pmc58
.
bôs
.
pmu_ªg3_wt_ªq
 = 
upmu_ªg3_wt_ªq
;

2090 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2091 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2094 
	}
}

2095 
	$iGëPERI_PMC58pmu_ªg3_wt_ªq
(*
upmu_ªg3_wt_ªq
)

2097 *
upmu_ªg3_wt_ªq
 = 
g›PMCAŒReg
->
PERI_PMC58
.
bôs
.
pmu_ªg3_wt_ªq
;

2099 
	}
}

2107 
	$iSëPERI_PMC58pmu_ªg4_wt_ªq
(
upmu_ªg4_wt_ªq
)

2109 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2110 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2111 
o_≥ri_pmc58
.
bôs
.
pmu_ªg4_wt_ªq
 = 
upmu_ªg4_wt_ªq
;

2112 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2113 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2116 
	}
}

2117 
	$iGëPERI_PMC58pmu_ªg4_wt_ªq
(*
upmu_ªg4_wt_ªq
)

2119 *
upmu_ªg4_wt_ªq
 = 
g›PMCAŒReg
->
PERI_PMC58
.
bôs
.
pmu_ªg4_wt_ªq
;

2121 
	}
}

2129 
	$iSëPERI_PMC58pmu_ªg5_wt_ªq
(
upmu_ªg5_wt_ªq
)

2131 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2132 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2133 
o_≥ri_pmc58
.
bôs
.
pmu_ªg5_wt_ªq
 = 
upmu_ªg5_wt_ªq
;

2134 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2135 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2138 
	}
}

2139 
	$iGëPERI_PMC58pmu_ªg5_wt_ªq
(*
upmu_ªg5_wt_ªq
)

2141 *
upmu_ªg5_wt_ªq
 = 
g›PMCAŒReg
->
PERI_PMC58
.
bôs
.
pmu_ªg5_wt_ªq
;

2143 
	}
}

2151 
	$iSëPERI_PMC58pmu_ªg6_wt_ªq
(
upmu_ªg6_wt_ªq
)

2153 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2154 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2155 
o_≥ri_pmc58
.
bôs
.
pmu_ªg6_wt_ªq
 = 
upmu_ªg6_wt_ªq
;

2156 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2157 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2160 
	}
}

2168 
	$iSëPERI_PMC58pmu_ªg7_wt_ªq
(
upmu_ªg7_wt_ªq
)

2170 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2171 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2172 
o_≥ri_pmc58
.
bôs
.
pmu_ªg7_wt_ªq
 = 
upmu_ªg7_wt_ªq
;

2173 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2174 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2177 
	}
}

2179 
	$iGëPERI_PMC58pmu_ªg7_wt_ªq
(*
upmu_ªg7_wt_ªq
)

2181 *
upmu_ªg7_wt_ªq
 = 
g›PMCAŒReg
->
PERI_PMC58
.
bôs
.
pmu_ªg7_wt_ªq
;

2183 
	}
}

2191 
	$iSëPERI_PMC58i2c_öt_˛ór
(
ui2c_öt_˛ór
)

2193 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2194 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2195 
o_≥ri_pmc58
.
bôs
.
i2c_öt_˛ór
 = 
ui2c_öt_˛ór
;

2196 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2197 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2200 
	}
}

2208 
	$iSëPERI_PMC58pmc_i2c_íabÀ
(
upmc_i2c_íabÀ
)

2210 
U_PERI_PMC58
 
o_≥ri_pmc58
;

2211 
o_≥ri_pmc58
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC58
.u32;

2212 
o_≥ri_pmc58
.
bôs
.
pmc_i2c_íabÀ
 = 
upmc_i2c_íabÀ
;

2213 
g›PMCAŒReg
->
PERI_PMC58
.
u32
 = 
o_≥ri_pmc58
.u32;

2214 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC58
.
u32
));

2217 
	}
}

2219 
	$iGëPERI_PMC58pmc_i2c_íabÀ
(*
upmc_i2c_íabÀ
)

2221 *
upmc_i2c_íabÀ
 = 
g›PMCAŒReg
->
PERI_PMC58
.
bôs
.
pmc_i2c_íabÀ
;

2223 
	}
}

2231 
	$iSëPERI_PMC59pmu_ªg0
(
upmu_ªg0
)

2233 
U_PERI_PMC59
 
o_≥ri_pmc59
;

2234 
o_≥ri_pmc59
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC59
.u32;

2235 
o_≥ri_pmc59
.
bôs
.
pmu_ªg0
 = 
upmu_ªg0
;

2236 
g›PMCAŒReg
->
PERI_PMC59
.
u32
 = 
o_≥ri_pmc59
.u32;

2237 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC59
.
u32
));

2240 
	}
}

2248 
	$iSëPERI_PMC59pmu_ªg1
(
upmu_ªg1
)

2250 
U_PERI_PMC59
 
o_≥ri_pmc59
;

2251 
o_≥ri_pmc59
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC59
.u32;

2252 
o_≥ri_pmc59
.
bôs
.
pmu_ªg1
 = 
upmu_ªg1
;

2253 
g›PMCAŒReg
->
PERI_PMC59
.
u32
 = 
o_≥ri_pmc59
.u32;

2254 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC59
.
u32
));

2257 
	}
}

2265 
	$iSëPERI_PMC59pmu_ªg2
(
upmu_ªg2
)

2267 
U_PERI_PMC59
 
o_≥ri_pmc59
;

2268 
o_≥ri_pmc59
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC59
.u32;

2269 
o_≥ri_pmc59
.
bôs
.
pmu_ªg2
 = 
upmu_ªg2
;

2270 
g›PMCAŒReg
->
PERI_PMC59
.
u32
 = 
o_≥ri_pmc59
.u32;

2271 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC59
.
u32
));

2274 
	}
}

2282 
	$iSëPERI_PMC59pmu_ªg3
(
upmu_ªg3
)

2284 
U_PERI_PMC59
 
o_≥ri_pmc59
;

2285 
o_≥ri_pmc59
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC59
.u32;

2286 
o_≥ri_pmc59
.
bôs
.
pmu_ªg3
 = 
upmu_ªg3
;

2287 
g›PMCAŒReg
->
PERI_PMC59
.
u32
 = 
o_≥ri_pmc59
.u32;

2288 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC59
.
u32
));

2291 
	}
}

2292 
	$iGëPERI_PMC59pmu_ªg3
(*
upmu_ªg3
)

2294 *
upmu_ªg3
 = 
g›PMCAŒReg
->
PERI_PMC59
.
bôs
.
pmu_ªg3
;

2296 
	}
}

2304 
	$iSëPERI_PMC60pmu_ªg4
(
upmu_ªg4
)

2306 
U_PERI_PMC60
 
o_≥ri_pmc60
;

2307 
o_≥ri_pmc60
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC60
.u32;

2308 
o_≥ri_pmc60
.
bôs
.
pmu_ªg4
 = 
upmu_ªg4
;

2309 
g›PMCAŒReg
->
PERI_PMC60
.
u32
 = 
o_≥ri_pmc60
.u32;

2310 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC60
.
u32
));

2313 
	}
}

2314 
	$iGëPERI_PMC60pmu_ªg4
(*
upmu_ªg4
)

2316 *
upmu_ªg4
 = 
g›PMCAŒReg
->
PERI_PMC60
.
bôs
.
pmu_ªg4
;

2318 
	}
}

2326 
	$iSëPERI_PMC60pmu_ªg5
(
upmu_ªg5
)

2328 
U_PERI_PMC60
 
o_≥ri_pmc60
;

2329 
o_≥ri_pmc60
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC60
.u32;

2330 
o_≥ri_pmc60
.
bôs
.
pmu_ªg5
 = 
upmu_ªg5
;

2331 
g›PMCAŒReg
->
PERI_PMC60
.
u32
 = 
o_≥ri_pmc60
.u32;

2332 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC60
.
u32
));

2335 
	}
}

2337 
	$iGëPERI_PMC60pmu_ªg5
(*
upmu_ªg5
)

2339 *
upmu_ªg5
 = 
g›PMCAŒReg
->
PERI_PMC60
.
bôs
.
pmu_ªg5
;

2341 
	}
}

2349 
	$iSëPERI_PMC60pmu_ªg6
(
upmu_ªg6
)

2351 
U_PERI_PMC60
 
o_≥ri_pmc60
;

2352 
o_≥ri_pmc60
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC60
.u32;

2353 
o_≥ri_pmc60
.
bôs
.
pmu_ªg6
 = 
upmu_ªg6
;

2354 
g›PMCAŒReg
->
PERI_PMC60
.
u32
 = 
o_≥ri_pmc60
.u32;

2355 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC60
.
u32
));

2358 
	}
}

2366 
	$iSëPERI_PMC60pmu_ªg7
(
upmu_ªg7
)

2368 
U_PERI_PMC60
 
o_≥ri_pmc60
;

2369 
o_≥ri_pmc60
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC60
.u32;

2370 
o_≥ri_pmc60
.
bôs
.
pmu_ªg7
 = 
upmu_ªg7
;

2371 
g›PMCAŒReg
->
PERI_PMC60
.
u32
 = 
o_≥ri_pmc60
.u32;

2372 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC60
.
u32
));

2375 
	}
}

2383 
	$iSëPERI_PMC62pmc_i2c_l˙t
(
upmc_i2c_l˙t
)

2385 
U_PERI_PMC62
 
o_≥ri_pmc62
;

2386 
o_≥ri_pmc62
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC62
.u32;

2387 
o_≥ri_pmc62
.
bôs
.
pmc_i2c_l˙t
 = 
upmc_i2c_l˙t
;

2388 
g›PMCAŒReg
->
PERI_PMC62
.
u32
 = 
o_≥ri_pmc62
.u32;

2389 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC62
.
u32
));

2392 
	}
}

2400 
	$iSëPERI_PMC62pmc_i2c_h˙t
(
upmc_i2c_h˙t
)

2402 
U_PERI_PMC62
 
o_≥ri_pmc62
;

2403 
o_≥ri_pmc62
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC62
.u32;

2404 
o_≥ri_pmc62
.
bôs
.
pmc_i2c_h˙t
 = 
upmc_i2c_h˙t
;

2405 
g›PMCAŒReg
->
PERI_PMC62
.
u32
 = 
o_≥ri_pmc62
.u32;

2406 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC62
.
u32
));

2409 
	}
}

2417 
	$iSëPERI_PMC63pmu_avs_ªg0_mux
(
upmu_avs_ªg0_mux
)

2419 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2420 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2421 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg0_mux
 = 
upmu_avs_ªg0_mux
;

2422 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2423 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2426 
	}
}

2434 
	$iSëPERI_PMC63pmu_avs_ªg1_mux
(
upmu_avs_ªg1_mux
)

2436 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2437 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2438 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg1_mux
 = 
upmu_avs_ªg1_mux
;

2439 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2440 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2443 
	}
}

2451 
	$iSëPERI_PMC63pmu_avs_ªg2_mux
(
upmu_avs_ªg2_mux
)

2453 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2454 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2455 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg2_mux
 = 
upmu_avs_ªg2_mux
;

2456 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2457 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2460 
	}
}

2468 
	$iSëPERI_PMC63pmu_avs_ªg3_mux
(
upmu_avs_ªg3_mux
)

2470 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2471 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2472 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg3_mux
 = 
upmu_avs_ªg3_mux
;

2473 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2474 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2477 
	}
}

2485 
	$iSëPERI_PMC63pmu_avs_ªg4_mux
(
upmu_avs_ªg4_mux
)

2487 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2488 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2489 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg4_mux
 = 
upmu_avs_ªg4_mux
;

2490 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2491 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2494 
	}
}

2502 
	$iSëPERI_PMC63pmu_avs_ªg5_mux
(
upmu_avs_ªg5_mux
)

2504 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2505 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2506 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg5_mux
 = 
upmu_avs_ªg5_mux
;

2507 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2508 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2511 
	}
}

2519 
	$iSëPERI_PMC63pmu_avs_ªg6_mux
(
upmu_avs_ªg6_mux
)

2521 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2522 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2523 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg6_mux
 = 
upmu_avs_ªg6_mux
;

2524 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2525 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2528 
	}
}

2536 
	$iSëPERI_PMC63pmu_avs_ªg7_mux
(
upmu_avs_ªg7_mux
)

2538 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2539 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2540 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg7_mux
 = 
upmu_avs_ªg7_mux
;

2541 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2542 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2545 
	}
}

2553 
	$iSëPERI_PMC63pmu_avs_ªg0_í
(
upmu_avs_ªg0_í
)

2555 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2556 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2557 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg0_í
 = 
upmu_avs_ªg0_í
;

2558 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2559 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2562 
	}
}

2570 
	$iSëPERI_PMC63pmu_avs_ªg1_í
(
upmu_avs_ªg1_í
)

2572 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2573 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2574 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg1_í
 = 
upmu_avs_ªg1_í
;

2575 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2576 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2579 
	}
}

2587 
	$iSëPERI_PMC63pmu_avs_ªg2_í
(
upmu_avs_ªg2_í
)

2589 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2590 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2591 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg2_í
 = 
upmu_avs_ªg2_í
;

2592 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2593 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2596 
	}
}

2604 
	$iSëPERI_PMC63pmu_avs_ªg3_í
(
upmu_avs_ªg3_í
)

2606 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2607 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2608 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg3_í
 = 
upmu_avs_ªg3_í
;

2609 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2610 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2613 
	}
}

2621 
	$iSëPERI_PMC63pmu_avs_ªg4_í
(
upmu_avs_ªg4_í
)

2623 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2624 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2625 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg4_í
 = 
upmu_avs_ªg4_í
;

2626 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2627 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2630 
	}
}

2638 
	$iSëPERI_PMC63pmu_avs_ªg5_í
(
upmu_avs_ªg5_í
)

2640 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2641 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2642 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg5_í
 = 
upmu_avs_ªg5_í
;

2643 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2644 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2647 
	}
}

2655 
	$iSëPERI_PMC63pmu_avs_ªg6_í
(
upmu_avs_ªg6_í
)

2657 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2658 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2659 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg6_í
 = 
upmu_avs_ªg6_í
;

2660 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2661 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2664 
	}
}

2672 
	$iSëPERI_PMC63pmu_avs_ªg7_í
(
upmu_avs_ªg7_í
)

2674 
U_PERI_PMC63
 
o_≥ri_pmc63
;

2675 
o_≥ri_pmc63
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC63
.u32;

2676 
o_≥ri_pmc63
.
bôs
.
pmu_avs_ªg7_í
 = 
upmu_avs_ªg7_í
;

2677 
g›PMCAŒReg
->
PERI_PMC63
.
u32
 = 
o_≥ri_pmc63
.u32;

2678 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC63
.
u32
));

2681 
	}
}

2689 
	$iSëPERI_PMC64c‹e_ts_m⁄ô‹_≥riod
(
uc‹e_ts_m⁄ô‹_≥riod
)

2691 
U_PERI_PMC64
 
o_≥ri_pmc64
;

2692 
o_≥ri_pmc64
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC64
.u32;

2693 
o_≥ri_pmc64
.
bôs
.
c‹e_ts_m⁄ô‹_≥riod
 = 
uc‹e_ts_m⁄ô‹_≥riod
;

2694 
g›PMCAŒReg
->
PERI_PMC64
.
u32
 = 
o_≥ri_pmc64
.u32;

2695 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC64
.
u32
));

2698 
	}
}

2706 
	$iSëPERI_PMC64c‹e_ts_m⁄ô‹_í
(
uc‹e_ts_m⁄ô‹_í
)

2708 
U_PERI_PMC64
 
o_≥ri_pmc64
;

2709 
o_≥ri_pmc64
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC64
.u32;

2710 
o_≥ri_pmc64
.
bôs
.
c‹e_ts_m⁄ô‹_í
 = 
uc‹e_ts_m⁄ô‹_í
;

2711 
g›PMCAŒReg
->
PERI_PMC64
.
u32
 = 
o_≥ri_pmc64
.u32;

2712 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC64
.
u32
));

2715 
	}
}

2723 
	$iSëPERI_PMC64c‹e_ts_í_mu°_öc
(
uc‹e_ts_í_mu°_öc
)

2725 
U_PERI_PMC64
 
o_≥ri_pmc64
;

2726 
o_≥ri_pmc64
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC64
.u32;

2727 
o_≥ri_pmc64
.
bôs
.
c‹e_ts_í_mu°_öc
 = 
uc‹e_ts_í_mu°_öc
;

2728 
g›PMCAŒReg
->
PERI_PMC64
.
u32
 = 
o_≥ri_pmc64
.u32;

2729 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC64
.
u32
));

2732 
	}
}

2740 
	$iSëPERI_PMC64c‹e_avs_˘æ_£l
(
uc‹e_avs_˘æ_£l
)

2742 
U_PERI_PMC64
 
o_≥ri_pmc64
;

2743 
o_≥ri_pmc64
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC64
.u32;

2744 
o_≥ri_pmc64
.
bôs
.
c‹e_avs_˘æ_£l
 = 
uc‹e_avs_˘æ_£l
;

2745 
g›PMCAŒReg
->
PERI_PMC64
.
u32
 = 
o_≥ri_pmc64
.u32;

2746 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC64
.
u32
));

2749 
	}
}

2757 
	$iSëPERI_PMC64c‹e_avs_˘æ_mux
(
uc‹e_avs_˘æ_mux
)

2759 
U_PERI_PMC64
 
o_≥ri_pmc64
;

2760 
o_≥ri_pmc64
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC64
.u32;

2761 
o_≥ri_pmc64
.
bôs
.
c‹e_avs_˘æ_mux
 = 
uc‹e_avs_˘æ_mux
;

2762 
g›PMCAŒReg
->
PERI_PMC64
.
u32
 = 
o_≥ri_pmc64
.u32;

2763 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC64
.
u32
));

2766 
	}
}

2774 
	$iSëPERI_PMC64c‹e_ts_öc_ˇ£_£l
(
uc‹e_ts_öc_ˇ£_£l
)

2776 
U_PERI_PMC64
 
o_≥ri_pmc64
;

2777 
o_≥ri_pmc64
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC64
.u32;

2778 
o_≥ri_pmc64
.
bôs
.
c‹e_ts_öc_ˇ£_£l
 = 
uc‹e_ts_öc_ˇ£_£l
;

2779 
g›PMCAŒReg
->
PERI_PMC64
.
u32
 = 
o_≥ri_pmc64
.u32;

2780 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC64
.
u32
));

2783 
	}
}

2791 
	$iSëPERI_PMC65˝u_ts_m⁄ô‹_≥riod
(
u˝u_ts_m⁄ô‹_≥riod
)

2793 
U_PERI_PMC65
 
o_≥ri_pmc65
;

2794 
o_≥ri_pmc65
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC65
.u32;

2795 
o_≥ri_pmc65
.
bôs
.
˝u_ts_m⁄ô‹_≥riod
 = 
u˝u_ts_m⁄ô‹_≥riod
;

2796 
g›PMCAŒReg
->
PERI_PMC65
.
u32
 = 
o_≥ri_pmc65
.u32;

2797 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC65
.
u32
));

2800 
	}
}

2808 
	$iSëPERI_PMC65˝u_ts_m⁄ô‹_í
(
u˝u_ts_m⁄ô‹_í
)

2810 
U_PERI_PMC65
 
o_≥ri_pmc65
;

2811 
o_≥ri_pmc65
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC65
.u32;

2812 
o_≥ri_pmc65
.
bôs
.
˝u_ts_m⁄ô‹_í
 = 
u˝u_ts_m⁄ô‹_í
;

2813 
g›PMCAŒReg
->
PERI_PMC65
.
u32
 = 
o_≥ri_pmc65
.u32;

2814 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC65
.
u32
));

2817 
	}
}

2825 
	$iSëPERI_PMC65˝u_ts_í_mu°_öc
(
u˝u_ts_í_mu°_öc
)

2827 
U_PERI_PMC65
 
o_≥ri_pmc65
;

2828 
o_≥ri_pmc65
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC65
.u32;

2829 
o_≥ri_pmc65
.
bôs
.
˝u_ts_í_mu°_öc
 = 
u˝u_ts_í_mu°_öc
;

2830 
g›PMCAŒReg
->
PERI_PMC65
.
u32
 = 
o_≥ri_pmc65
.u32;

2831 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC65
.
u32
));

2834 
	}
}

2842 
	$iSëPERI_PMC65˝u_avs_˘æ_£l
(
u˝u_avs_˘æ_£l
)

2844 
U_PERI_PMC65
 
o_≥ri_pmc65
;

2845 
o_≥ri_pmc65
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC65
.u32;

2846 
o_≥ri_pmc65
.
bôs
.
˝u_avs_˘æ_£l
 = 
u˝u_avs_˘æ_£l
;

2847 
g›PMCAŒReg
->
PERI_PMC65
.
u32
 = 
o_≥ri_pmc65
.u32;

2848 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC65
.
u32
));

2851 
	}
}

2859 
	$iSëPERI_PMC65˝u_avs_˘æ_mux
(
u˝u_avs_˘æ_mux
)

2861 
U_PERI_PMC65
 
o_≥ri_pmc65
;

2862 
o_≥ri_pmc65
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC65
.u32;

2863 
o_≥ri_pmc65
.
bôs
.
˝u_avs_˘æ_mux
 = 
u˝u_avs_˘æ_mux
;

2864 
g›PMCAŒReg
->
PERI_PMC65
.
u32
 = 
o_≥ri_pmc65
.u32;

2865 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC65
.
u32
));

2868 
	}
}

2876 
	$iSëPERI_PMC65˝u_ts_öc_ˇ£_£l
(
u˝u_ts_öc_ˇ£_£l
)

2878 
U_PERI_PMC65
 
o_≥ri_pmc65
;

2879 
o_≥ri_pmc65
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC65
.u32;

2880 
o_≥ri_pmc65
.
bôs
.
˝u_ts_öc_ˇ£_£l
 = 
u˝u_ts_öc_ˇ£_£l
;

2881 
g›PMCAŒReg
->
PERI_PMC65
.
u32
 = 
o_≥ri_pmc65
.u32;

2882 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC65
.
u32
));

2885 
	}
}

2893 
	$iSëPERI_PMC66ddr_ts_m⁄ô‹_≥riod
(
uddr_ts_m⁄ô‹_≥riod
)

2895 
U_PERI_PMC66
 
o_≥ri_pmc66
;

2896 
o_≥ri_pmc66
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC66
.u32;

2897 
o_≥ri_pmc66
.
bôs
.
ddr_ts_m⁄ô‹_≥riod
 = 
uddr_ts_m⁄ô‹_≥riod
;

2898 
g›PMCAŒReg
->
PERI_PMC66
.
u32
 = 
o_≥ri_pmc66
.u32;

2899 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC66
.
u32
));

2902 
	}
}

2910 
	$iSëPERI_PMC66ddr_ts_m⁄ô‹_í
(
uddr_ts_m⁄ô‹_í
)

2912 
U_PERI_PMC66
 
o_≥ri_pmc66
;

2913 
o_≥ri_pmc66
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC66
.u32;

2914 
o_≥ri_pmc66
.
bôs
.
ddr_ts_m⁄ô‹_í
 = 
uddr_ts_m⁄ô‹_í
;

2915 
g›PMCAŒReg
->
PERI_PMC66
.
u32
 = 
o_≥ri_pmc66
.u32;

2916 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC66
.
u32
));

2919 
	}
}

2927 
	$iSëPERI_PMC66ddr_ts_í_mu°_öc
(
uddr_ts_í_mu°_öc
)

2929 
U_PERI_PMC66
 
o_≥ri_pmc66
;

2930 
o_≥ri_pmc66
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC66
.u32;

2931 
o_≥ri_pmc66
.
bôs
.
ddr_ts_í_mu°_öc
 = 
uddr_ts_í_mu°_öc
;

2932 
g›PMCAŒReg
->
PERI_PMC66
.
u32
 = 
o_≥ri_pmc66
.u32;

2933 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC66
.
u32
));

2936 
	}
}

2944 
	$iSëPERI_PMC66ddr_avs_˘æ_£l
(
uddr_avs_˘æ_£l
)

2946 
U_PERI_PMC66
 
o_≥ri_pmc66
;

2947 
o_≥ri_pmc66
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC66
.u32;

2948 
o_≥ri_pmc66
.
bôs
.
ddr_avs_˘æ_£l
 = 
uddr_avs_˘æ_£l
;

2949 
g›PMCAŒReg
->
PERI_PMC66
.
u32
 = 
o_≥ri_pmc66
.u32;

2950 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC66
.
u32
));

2953 
	}
}

2961 
	$iSëPERI_PMC66ddr_avs_˘æ_mux
(
uddr_avs_˘æ_mux
)

2963 
U_PERI_PMC66
 
o_≥ri_pmc66
;

2964 
o_≥ri_pmc66
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC66
.u32;

2965 
o_≥ri_pmc66
.
bôs
.
ddr_avs_˘æ_mux
 = 
uddr_avs_˘æ_mux
;

2966 
g›PMCAŒReg
->
PERI_PMC66
.
u32
 = 
o_≥ri_pmc66
.u32;

2967 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC66
.
u32
));

2970 
	}
}

2978 
	$iSëPERI_PMC66ddr_ts_öc_ˇ£_£l
(
uddr_ts_öc_ˇ£_£l
)

2980 
U_PERI_PMC66
 
o_≥ri_pmc66
;

2981 
o_≥ri_pmc66
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC66
.u32;

2982 
o_≥ri_pmc66
.
bôs
.
ddr_ts_öc_ˇ£_£l
 = 
uddr_ts_öc_ˇ£_£l
;

2983 
g›PMCAŒReg
->
PERI_PMC66
.
u32
 = 
o_≥ri_pmc66
.u32;

2984 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC66
.
u32
));

2987 
	}
}

2995 
	$iSëPERI_PMC67mda_ts_m⁄ô‹_≥riod
(
umda_ts_m⁄ô‹_≥riod
)

2997 
U_PERI_PMC67
 
o_≥ri_pmc67
;

2998 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

2999 
o_≥ri_pmc67
.
bôs
.
mda_ts_m⁄ô‹_≥riod
 = 
umda_ts_m⁄ô‹_≥riod
;

3000 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3001 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3004 
	}
}

3012 
	$iSëPERI_PMC67mda_ts_m⁄ô‹_í
(
umda_ts_m⁄ô‹_í
)

3014 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3015 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3016 
o_≥ri_pmc67
.
bôs
.
mda_ts_m⁄ô‹_í
 = 
umda_ts_m⁄ô‹_í
;

3017 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3018 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3021 
	}
}

3029 
	$iSëPERI_PMC67mda_ts_í_mu°_öc
(
umda_ts_í_mu°_öc
)

3031 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3032 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3033 
o_≥ri_pmc67
.
bôs
.
mda_ts_í_mu°_öc
 = 
umda_ts_í_mu°_öc
;

3034 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3035 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3038 
	}
}

3046 
	$iSëPERI_PMC67mda_avs_˘æ_£l
(
umda_avs_˘æ_£l
)

3048 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3049 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3050 
o_≥ri_pmc67
.
bôs
.
mda_avs_˘æ_£l
 = 
umda_avs_˘æ_£l
;

3051 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3052 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3055 
	}
}

3063 
	$iSëPERI_PMC67mda_avs_˘æ_mux
(
umda_avs_˘æ_mux
)

3065 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3066 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3067 
o_≥ri_pmc67
.
bôs
.
mda_avs_˘æ_mux
 = 
umda_avs_˘æ_mux
;

3068 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3069 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3072 
	}
}

3080 
	$iSëPERI_PMC67mda_avs_hpm_£l
(
umda_avs_hpm_£l
)

3082 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3083 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3084 
o_≥ri_pmc67
.
bôs
.
mda_avs_hpm_£l
 = 
umda_avs_hpm_£l
;

3085 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3086 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3089 
	}
}

3097 
	$iSëPERI_PMC67mda_avs_ts_£l
(
umda_avs_ts_£l
)

3099 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3100 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3101 
o_≥ri_pmc67
.
bôs
.
mda_avs_ts_£l
 = 
umda_avs_ts_£l
;

3102 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3103 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3106 
	}
}

3114 
	$iSëPERI_PMC67mda_ts_öc_ˇ£_£l
(
umda_ts_öc_ˇ£_£l
)

3116 
U_PERI_PMC67
 
o_≥ri_pmc67
;

3117 
o_≥ri_pmc67
.
u32
 = 
g›PMCAŒReg
->
PERI_PMC67
.u32;

3118 
o_≥ri_pmc67
.
bôs
.
mda_ts_öc_ˇ£_£l
 = 
umda_ts_öc_ˇ£_£l
;

3119 
g›PMCAŒReg
->
PERI_PMC67
.
u32
 = 
o_≥ri_pmc67
.u32;

3120 
	`RTL_Vîify_RegWrôe
(
PMC_BASE_ADDR
, (*)&(
g›PMCAŒReg
->
PERI_PMC67
.
u32
));

3123 
	}
}

	@component/pm/dev/cpu/avs_cpu.c

24 
	~<löux/ty≥s.h
>

25 
	~<löux/kî√l.h
>

26 
	~<löux/sched.h
>

27 
	~<löux/dñay.h
>

28 
	~<löux/öô.h
>

29 
	~<löux/îr.h
>

30 
	~<löux/î∫o.h
>

31 
	~<löux/io.h
>

32 
	~<löux/kthªad.h
>

33 
	~<löux/moduÀ.h
>

34 
	~"hi_io.h
"

36 
	~"avs_pm.h
"

37 
	~"pm.h
"

38 
	~"˝u.h
"

39 
	~"pmc.h
"

40 
	~"sys_pm.h
"

43 #ifde‡
CPU_AVS


45 
	#AVS_STEP
 10

	)

46 
	#AVS_INTERVAL
 20

	)

47 
	g˝u_avs_öãr
 = 20;

48 
	g˝u_avs_í
 = 1;

49 
moduÀ_∑øm
(
˝u_avs_öãr
, , 
S_IRUGO
);

50 
moduÀ_∑øm
(
˝u_avs_í
, , 
S_IRUGO
);

53 
HPM_VF_S
 
	g˝u_‰eq_hpm_èbÀ
[] =

55 { 
HI_VDD_CPU_OPP1_FREQ
, 
HI_VDD_CPU_OPP1_AVS_VMIN_MV
, 
HI_VDD_CPU_OPP1_AVS_HPM
, 
HI_VDD_CPU_OPP1_AVS_HPM_DIV
},

56 { 
HI_VDD_CPU_OPP2_FREQ
, 
HI_VDD_CPU_OPP2_AVS_VMIN_MV
, 
HI_VDD_CPU_OPP2_AVS_HPM
, 
HI_VDD_CPU_OPP2_AVS_HPM_DIV
},

57 { 
HI_VDD_CPU_OPP3_FREQ
, 
HI_VDD_CPU_OPP3_AVS_VMIN_MV
, 
HI_VDD_CPU_OPP3_AVS_HPM
, 
HI_VDD_CPU_OPP3_AVS_HPM_DIV
},

58 { 
HI_VDD_CPU_OPP4_FREQ
, 
HI_VDD_CPU_OPP4_AVS_VMIN_MV
, 
HI_VDD_CPU_OPP4_AVS_HPM
, 
HI_VDD_CPU_OPP4_AVS_HPM_DIV
},

59 { 
HI_VDD_CPU_OPP5_FREQ
, 
HI_VDD_CPU_OPP5_AVS_VMIN_MV
, 
HI_VDD_CPU_OPP5_AVS_HPM
, 
HI_VDD_CPU_OPP5_AVS_HPM_DIV
},

64 
	$˝u_AvsThªad
(*
Arg
)

66 
pm_devi˚
 *pm_devi˚ = (pm_devi˚ *)
Arg
;

67 
avs_dev
 *avs_dev = &(
pm_devi˚
->avs_dev);

68 
u32HpmCode
, 
u32HpmCodeAvîage
 = 0;

69 
u32RegVÆ
;

70 
s32HpmDñè
;

71 
ªt
;

73 !
	`kthªad_should_°›
())

75 
	`m¶ìp
(
˝u_avs_öãr
);

77 i‡(
Ál£
 =
avs_dev
->
avs_íabÀ
)

82 
	`muãx_lock
(&
avs_dev
->
avs_lock
);

84 #ifde‡
CPU_AVS_HPM


86 #i‚de‡
CPU_AVS_HW


88 
u32HpmCodeAvîage
 = 0;

90 
	`HI_RegRód
(&
u32RegVÆ
, 
PERI_PMC15
);

92 
u32HpmCode
 = (
u32RegVÆ
 & 
HPM_PC_RECORED_MASK
);

93 
u32HpmCodeAvîage
 +
u32HpmCode
;

95 
u32HpmCode
 = ((
u32RegVÆ
 >> 12Ë& 
HPM_PC_RECORED_MASK
);

96 
u32HpmCodeAvîage
 +
u32HpmCode
;

98 
	`HI_RegRód
(&
u32RegVÆ
, 
PERI_PMC16
);

99 
u32HpmCode
 = (
u32RegVÆ
 & 
HPM_PC_RECORED_MASK
);

101 
u32HpmCodeAvîage
 +
u32HpmCode
;

102 
u32HpmCode
 = ((
u32RegVÆ
 >> 12Ë& 
HPM_PC_RECORED_MASK
);

103 
u32HpmCodeAvîage
 +
u32HpmCode
;

105 
u32HpmCodeAvîage
 = u32HpmCodeAverage / 4;

107 
s32HpmDñè
 = 
u32HpmCodeAvîage
 - 
avs_dev
->
cur_hpm
;

110 i‡(
s32HpmDñè
 < 0x1)

114 i‡(
pm_devi˚
->
cur_vﬁt
 + 
AVS_STEP
 <
avs_dev
->
cur_vﬁt_max
)

116 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
,Öm_devi˚->
cur_vﬁt
 + 
AVS_STEP
,

117 
pm_devi˚
->
cur_vﬁt
 + 
AVS_STEP
);

118 i‡(
ªt
)

120 
	`¥ötk
("%s: scale voltÅo %u falt\n",

121 
__func__
, 
pm_devi˚
->
cur_vﬁt
 + 
AVS_STEP
);

123 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

124 #ifde‡
PM_DEBUG


125 
	`¥ötk
("%†:%d cpu cur_vﬁài†%d\n",
__FUNCTION__
,
__LINE__
,
pm_devi˚
->
cur_vﬁt
);

129 i‡(
s32HpmDñè
 >= 0xa)

132 i‡(
pm_devi˚
->
cur_vﬁt
 - 
AVS_STEP
 >
avs_dev
->
cur_vﬁt_mö
)

134 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
,Öm_devi˚->
cur_vﬁt
 - 
AVS_STEP
,

135 
pm_devi˚
->
cur_vﬁt
 - 
AVS_STEP
);

136 i‡(
ªt
)

138 
	`¥ötk
("%s: scale voltÅo %u falt\n",

139 
__func__
, 
pm_devi˚
->
cur_vﬁt
 - 
AVS_STEP
);

140  
ªt
;

142 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

143 #ifde‡
PM_DEBUG


144 
	`¥ötk
("%†:%d cpu cur_vﬁài†%d\n",
__FUNCTION__
,
__LINE__
,
pm_devi˚
->
cur_vﬁt
);

151 
	`m¶ìp
(
˝u_avs_öãr
);

162 #i‚de‡
CPU_AVS_HW


166 
	`muãx_u∆ock
(&
avs_dev
->
avs_lock
);

170 
	}
}

172 
	$˝u_AvsPau£
(
pm_devi˚
 *pm_device)

174 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

176 
avs_dev
->
avs_íabÀ
 = 
Ál£
;

178 
	`muãx_lock
(&
avs_dev
->
avs_lock
);

180 #ifde‡
CPU_AVS_HPM


182 #ifde‡
CPU_AVS_HW


183 
	`iSëPERI_PMC6˝u_hpm_fsm_í
(0);

185 
	`m¶ìp
(10);

190 #ifde‡
CPU_AVS_HW


191 
	`iSëPERI_PMC65˝u_ts_m⁄ô‹_í
(0);

193 
	`m¶ìp
(10);

197 
	}
}

200 
	$˝u_upd©e_hpm
(
avs_dev
 *avs_dev)

202 
i
;

205 
i
 = 0; i < 
avs_dev
->
max_hpm_èÀ_ödex
; i++)

207 i‡(
avs_dev
->
cur_‰eq
 =avs_dev->
‰eq_hpm_èbÀ
[
i
].
‰eq
)

209 
avs_dev
->
cur_hpm
 =ávs_dev->
‰eq_hpm_èbÀ
[
i
].
hpmªc‹d
;

210 
avs_dev
->
cur_vﬁt_mö
 =ávs_dev->
‰eq_hpm_èbÀ
[
i
].
vmö
;

211 
avs_dev
->
div
 =ávs_dev->
‰eq_hpm_èbÀ
[
i
].div;

213 
	`iSëPERI_PMC14˝u_hpm_div
(
avs_dev
->
div
);

219 
	}
}

222 
	$˝u_AvsResume
(
pm_devi˚
 *pm_device)

224 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

225 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

226 
avs_dev
->
avs_íabÀ
 = 
åue
;

228 #ifde‡
CPU_AVS_HPM


229 
	`˝u_upd©e_hpm
(
avs_dev
);

230 #ifde‡
CPU_AVS_HW


232 #ifde‡
CPU_PWM


233 
	`iSëPERI_PMC17˝u_hpm_lowlimô
(4095 );

234 
	`iSëPERI_PMC17˝u_hpm_u∂imô
(0 );

236 
	`iSëPERI_PMC6˝u_hpm_fsm_í
(1);

241 #ifde‡
CPU_AVS_HW


242 
	`iSëPERI_PMC65˝u_ts_m⁄ô‹_í
(1);

247 
	`muãx_u∆ock
(&
avs_dev
->
avs_lock
);

250 
	}
}

252 
avs_›s
 
	g˝u_avs_›s
 =

254 .
p‚AvsPau£
 = 
˝u_AvsPau£
,

255 .
	gp‚AvsResume
 = 
˝u_AvsResume
,

259 
HI_VOID
 
	$˝u_HpmInô
(
avs_dev
 *avs_dev)

262 
	`iSëPERI_PMC65˝u_avs_˘æ_£l
(0x1);

264 
	`iSëPERI_PMC14˝u_hpm_§°_ªq
(0x1);

265 
	`iSëPERI_PMC14˝u_hpm_§°_ªq
(0x0);

267 
	`iSëPERI_PMC17˝u_hpm_u∂imô
(
avs_dev
->
hpm_u∂imô
);

268 
	`iSëPERI_PMC17˝u_hpm_lowlimô
(
avs_dev
->
hpm_dow∆imô
);

269 
	`iSëPERI_PMC17˝u_hpm_m⁄ô‹_≥riod
(
avs_dev
->
high_≥riod
);

270 
	`iSëPERI_PMC30˝u_hpm_m⁄ô‹_≥riod
(
avs_dev
->
low_≥riod
);

272 
	`iSëPERI_PMC14˝u_hpm_shi·
(
avs_dev
->
shi·
);

273 
	`iSëPERI_PMC14˝u_hpm_off£t
(
avs_dev
->
off£t
);

275 
	`iSëPERI_PMC14˝u_hpm_m⁄ô‹_í
(0x1);

276 
	`iSëPERI_PMC14˝u_hpm_í
(0x1);

277 #ifde‡
CPU_AVS_HW


279 #ifde‡
CPU_PWM


280 
	`iSëPERI_PMC6˝u_avs_fsm_dec_pwm_°ï
(
avs_dev
->
hpm_pwm_dec_°ï
);

281 
	`iSëPERI_PMC6˝u_avs_fsm_öc_pwm_°ï
(
avs_dev
->
hpm_pwm_öc_°ï
);

283 
	`iSëPERI_PMC6˝u_avs_hpm_fsm_ˇlc_mode
(
avs_dev
->
hpm_fsm_mode
);

284 
	`iSëPERI_PMC6˝u_hpm_fsm_í
(0x1);

287 
	}
}

289 
HI_VOID
 
	$˝u_TsInô
(
avs_dev
 *avs_dev)

292 
	`iSëPERI_PMC65˝u_avs_˘æ_£l
(0x0);

295 
	`iSëPERI_PMC32˝u_ts_£l
(
avs_dev
->
ts_¸azy_mode
);

296 
	`iSëPERI_PMC32˝u_ts_dly_adju°
(
avs_dev
->
ts_¸azy_∑th_dly
);

297 
	`iSëPERI_PMC32˝u_ts_°ï
(
avs_dev
->
ts_code_°ï
);

298 
	`iSëPERI_PMC32˝u_ts_í
(0x1);

300 #ifde‡
CPU_AVS_HW


302 
	`iSëPERI_PMC65˝u_ts_í_mu°_öc
(
avs_dev
->
ts_avs_mode
);

304 
	`iSëPERI_PMC65˝u_ts_m⁄ô‹_≥riod
(
avs_dev
->
ts_avs_≥riod
);

305 
	`iSëPERI_PMC65˝u_ts_m⁄ô‹_í
(0x1);

308 
	}
}

310 
	$˝u_AvsInô
(
pm_devi˚
 *pm_devi˚, *
pd©a
)

312 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

314 
avs_dev
->
‰eq_hpm_èbÀ
 = 
	`kmÆloc
((
˝u_‰eq_hpm_èbÀ
), 
GFP_KERNEL
);

315 i‡(!
avs_dev
->
‰eq_hpm_èbÀ
)

317 
	`¥ötk
("malloc hpmÅableÉrr.\n");

320 
	`mem˝y
(
avs_dev
->
‰eq_hpm_èbÀ
, 
˝u_‰eq_hpm_èbÀ
, (cpu_freq_hpm_table));

321 
avs_dev
->
max_hpm_èÀ_ödex
 = 
	`ARRAY_SIZE
(
˝u_‰eq_hpm_èbÀ
);

322 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

323 
avs_dev
->
avs_›s
 = 
˝u_avs_›s
;

324 
avs_dev
->
cur_vﬁt_max
 = 
CPU_VMAX
;

325 
	`˝u_upd©e_hpm
(
avs_dev
);

326 
avs_dev
->
avs_íabÀ
 = 
åue
;

327 #ifde‡
CPU_AVS_HPM


329 
avs_dev
->
hpm_u∂imô
 = 276;

330 
avs_dev
->
hpm_dow∆imô
 = 190;

331 
avs_dev
->
high_≥riod
 = 0x1;

332 
avs_dev
->
low_≥riod
 = 0;

333 
avs_dev
->
shi·
 = 0;

334 
avs_dev
->
off£t
 = 0;

336 
avs_dev
->
hpm_pwm_dec_°ï
 = 0;

337 
avs_dev
->
hpm_pwm_öc_°ï
 = 0;

338 
avs_dev
->
hpm_fsm_mode
 = 0;

340 
	`˝u_HpmInô
(
avs_dev
);

343 
avs_dev
->
ts_¸azy_mode
 = 0;

344 
avs_dev
->
ts_¸azy_∑th_dly
 = 0;

345 
avs_dev
->
ts_code_°ï
 = 0;

347 
avs_dev
->
ts_avs_mode
 = 0;

348 
avs_dev
->
ts_avs_≥riod
 = 0;

349 
	`˝u_TsInô
(
avs_dev
);

352 
	`muãx_öô
(&
avs_dev
->
avs_lock
);

354 
avs_dev
->
p°AvsThªad
 = 
	`kthªad_¸óã
(
˝u_AvsThªad
, (*)
pm_devi˚
,

355 
pm_devi˚
->
devi˚
.
«me
);

356 i‡(
	`IS_ERR
(
avs_dev
->
p°AvsThªad
))

358 
	`¥ötk
("createávsÅhread failed.\n");

361 if(1 =
˝u_avs_í
)

363 
	`¥ötk
("cpuávsÉnable.\n");

364 
	`wake_up_¥o˚ss
(
avs_dev
->
p°AvsThªad
);

369 
	}
}

371 
	$˝u_AvsExô
(
pm_devi˚
 *pm_devi˚, *
pd©a
)

373 if(
˝u_avs_í
 == 1)

375 i‡(
pm_devi˚
->
avs_dev
.
p°AvsThªad
)

377 
	`kthªad_°›
(
pm_devi˚
->
avs_dev
.
p°AvsThªad
);

378 
pm_devi˚
->
avs_dev
.
p°AvsThªad
 = 
NULL
;

382 i‡(
pm_devi˚
->
avs_dev
.
‰eq_hpm_èbÀ
)

384 
	`k‰ì
(
pm_devi˚
->
avs_dev
.
‰eq_hpm_èbÀ
);

385 
pm_devi˚
->
avs_dev
.
‰eq_hpm_èbÀ
 = 
NULL
;

389 
	}
}

391 
	$˝u_AvsRe°‹e
(
pm_devi˚
 *pm_device)

393 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

395 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

396 
avs_dev
->
avs_›s
 = 
˝u_avs_›s
;

397 
avs_dev
->
cur_vﬁt_max
 = 
CPU_VMAX
;

398 
	`˝u_upd©e_hpm
(
avs_dev
);

399 
avs_dev
->
avs_íabÀ
 = 
åue
;

400 #ifde‡
CPU_AVS_HPM


402 
avs_dev
->
hpm_u∂imô
 = 276;

403 
avs_dev
->
hpm_dow∆imô
 = 190;

404 
avs_dev
->
high_≥riod
 = 0x1;

405 
avs_dev
->
low_≥riod
 = 0;

406 
avs_dev
->
shi·
 = 0;

407 
avs_dev
->
off£t
 = 0;

409 
avs_dev
->
hpm_pwm_dec_°ï
 = 0;

410 
avs_dev
->
hpm_pwm_öc_°ï
 = 0;

411 
avs_dev
->
hpm_fsm_mode
 = 0;

413 
	`˝u_HpmInô
(
avs_dev
);

416 
avs_dev
->
ts_¸azy_mode
 = 0;

417 
avs_dev
->
ts_¸azy_∑th_dly
 = 0;

418 
avs_dev
->
ts_code_°ï
 = 0;

420 
avs_dev
->
ts_avs_mode
 = 0;

421 
avs_dev
->
ts_avs_≥riod
 = 0;

422 
	`˝u_TsInô
(
avs_dev
);

425 
	}
}

429 
	$˝u_AvsPau£
(
pm_devi˚
 *pm_devi˚){
	}
}

431 
	$˝u_AvsResume
(
pm_devi˚
 *pm_devi˚){
	}
}

433 
avs_›s
 
	g˝u_avs_›s
 =

435 .
p‚AvsPau£
 = 
˝u_AvsPau£
,

436 .
	gp‚AvsResume
 = 
˝u_AvsResume
,

439 
	$˝u_AvsInô
(
pm_devi˚
 *pm_devi˚, *
pd©a
)

441 
pm_devi˚
->
avs_dev
.
avs_›s
 = 
˝u_avs_›s
;

443 
	}
}

444 
	$˝u_AvsExô
(
pm_devi˚
 *pm_devi˚, *
pd©a
){
	}
}

	@component/pm/dev/cpu/clock_cpu.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/î∫o.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/•ölock.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/io.h
>

22 
	~<löux/˛k.h
>

23 
	~<löux/devi˚.h
>

24 
	~<löux/˛kdev.h
>

26 
	~<mach/∂©f‹m.h
>

27 
	~<asm/˛kdev.h
>

28 
	~<mach/io.h
>

29 
	~<mach/˛ock.h
>

30 
	~<mach/óæy-debug.h
>

32 
	~"hi_m©h.h
"

33 
	~"hi_io.h
"

34 
	~"pm.h
"

35 
	~"sys_pm.h
"

36 
	~"˝u.h
"

38 
	$HI_SëCpuA∂l
(
øã
)

40 
HI_U32
 
u32Føc
, 
u32Po°div1
, 
u32Po°div2
, 
u32Fbdiv
, 
u32Refdiv
;

42 
øã
)

44 (
HI_VDD_CPU_OPP1_FREQ
):

46 
u32Føc
 = 0;

47 
u32Po°div1
 = 2;

48 
u32Po°div2
 = 1;

49 
u32Refdiv
 = 1;

50 
u32Fbdiv
 = 50;

53 (
HI_VDD_CPU_OPP2_FREQ
):

55 
u32Føc
 = 0;

56 
u32Po°div1
 = 1;

57 
u32Po°div2
 = 1;

58 
u32Refdiv
 = 24;

59 
u32Fbdiv
 = 732;

62 (
HI_VDD_CPU_OPP3_FREQ
):

64 
u32Føc
 = 0;

65 
u32Po°div1
 = 1;

66 
u32Po°div2
 = 1;

67 
u32Refdiv
 = 24;

68 
u32Fbdiv
 = 850;

71 (
HI_VDD_CPU_OPP4_FREQ
):

73 
u32Føc
 = 0;

74 
u32Po°div1
 = 1;

75 
u32Po°div2
 = 1;

76 
u32Refdiv
 = 24;

77 
u32Fbdiv
 = 500;

80 (
HI_VDD_CPU_OPP5_FREQ
):

82 
u32Føc
 = 0;

83 
u32Po°div1
 = 1;

84 
u32Po°div2
 = 1;

85 
u32Refdiv
 = 24;

86 
u32Fbdiv
 = 400;

89 (
HI_VDD_CPU_OPP6_FREQ
):

91 
u32Føc
 = 0;

92 
u32Po°div1
 = 1;

93 
u32Po°div2
 = 1;

94 
u32Refdiv
 = 24;

95 
u32Fbdiv
 = 300;

98 (
HI_VDD_CPU_OPP7_FREQ
):

100 
u32Føc
 = 0;

101 
u32Po°div1
 = 1;

102 
u32Po°div2
 = 1;

103 
u32Refdiv
 = 24;

104 
u32Fbdiv
 = 200;

107 (
HI_VDD_CPU_OPP8_FREQ
):

109 
u32Føc
 = 0;

110 
u32Po°div1
 = 1;

111 
u32Po°div2
 = 1;

112 
u32Refdiv
 = 24;

113 
u32Fbdiv
 = 100;

117 
	`¥ötk
("øã %dÇŸ bl⁄gÅÿsˇlög_avaûabÀ_‰equícõs. \n", 
øã
);

120 
	`HI_RegSëBôEx
(
u32Føc
, 0, 24, 
PERI_CRG0
);

121 
	`HI_RegSëBôEx
(
u32Po°div1
, 24, 3, 
PERI_CRG0
);

122 
	`HI_RegSëBôEx
(
u32Po°div2
, 28, 3, 
PERI_CRG0
);

123 
	`HI_RegSëBôEx
(
u32Fbdiv
, 0, 12, 
PERI_CRG1
);

124 
	`HI_RegSëBôEx
(
u32Refdiv
, 12, 6, 
PERI_CRG1
);

127 
	}
}

131 
	$˝u_˛k_£t_øã
(
˛k
 *˛k, 
øã
)

133 
˙t
 = 0;

134 
˛ùed_øã
;

137 
˛ùed_øã
 = 
	`CLIP3
(
øã
, 
˛k
->
mö_øã
, clk->
max_øã
);

138 i‡(
˛ùed_øã
 !
øã
)

140 
	`¥ötk
("w¨nög, i≈uàøã(%dËouào‡˛kÑ™ge[%d, %d]. \n", 
øã
, 
˛k
->
mö_øã
, clk->
max_øã
);

145 
	`HI_RegSëBôEx
(0x1, 8, 2, 
PERI_CRG12
);

147 
	`HI_SëCpuA∂l
(
˛ùed_øã
);

152 
vÆue
;

153 
	`HI_RegRód
(&
vÆue
, 
PERI_CRG58
);

154 i‡((
vÆue
 & 0x1Ë|| (
˙t
 >
MAX_FREQ_ADJUST_CNT
))

156 
˙t
++;

157 
	`mdñay
(1);

161 
	`mdñay
(1);

163 i‡(
˙t
 >
MAX_FREQ_ADJUST_CNT
)

165 
	`¥ötk
("cpu setÑate fail. \n");

170 
	`HI_RegSëBôEx
(0x0, 8, 2, 
PERI_CRG12
);

172 #ifde‡
PM_DEBUG


173 
	`¥ötk
("cur_øã i†%d.\n", 
˛ùed_øã
);

176 
˛k
->
øã
 = 
˛ùed_øã
;

178 
	}
}

180 
	$˝u_˛k_öô
(
˛k
 *clk)

182 
˛k_øã
;

183 
pm_devi˚
 *pm_devi˚ = 
	`˛k_to_pm_devi˚
(
˛k
);

186 
vÆue
;

187 
˝u_£l
;

188 
	`HI_RegRód
(&
vÆue
, 
PERI_CRG12
);

189 
˝u_£l
 = 
vÆue
 & 0x300;

190 if(0x100 =
˝u_£l
)

192 
˛k_øã
 = 500;

194 if(0x200 =
˝u_£l
)

196 
˛k_øã
 = 400;

200 
˝u_£l_addr0
, 
˝u_£l_addr1
;

201 
fbdiv
, 
‰ac
, 
ªfdiv
, 
p°div1
, 
p°div2
;

202 if(0x0 =
˝u_£l
)

204 
˝u_£l_addr0
 = 
PERI_CRG0
;

205 
˝u_£l_addr1
 = 
PERI_CRG1
;

210 #ifde‡
PM_DEBUG


211 
	`¥ötk
("cpu sel from Bpll. \n");

213 
˝u_£l_addr0
 = 
PERI_CRG2
;

214 
˝u_£l_addr1
 = 
PERI_CRG3
;

216 
	`HI_RegRód
(&
vÆue
, 
˝u_£l_addr0
);

217 
‰ac
 = 0xFFFFFF & 
vÆue
;

218 
p°div1
 = ((0x7 << 24Ë& 
vÆue
) >> 24;

219 
p°div2
 = ((0x7 << 28Ë& 
vÆue
) >> 28;

220 
	`HI_RegRód
(&
vÆue
, 
˝u_£l_addr1
);

221 
fbdiv
 = 0xFFF & 
vÆue
;

222 
ªfdiv
 = ((0x3F << 12Ë& 
vÆue
) >> 12;

224 
˛k_øã
 = 24 * (
fbdiv
 + (
‰ac
 >> 24)Ë/ (
ªfdiv
 * 
p°div1
 * 
p°div2
);

228 
˛k
->
øã
 = 
˛k_øã
;

229 
pm_devi˚
->
cur_øã
 = 
˛k_øã
;

230 #ifde‡
PM_DEBUG


231 
	`¥ötk
("öô cur_øã i†%d.\n", 
˛k_øã
);

234 
	}
}

236 
˛k_›s
 
	g˝u_˛ock_›s
 = {

237 .
£t_øã
 = 
˝u_˛k_£t_øã
,

238 .
	göô
 = 
˝u_˛k_öô
,

241 
	$˝u_ClockInô
(
˛k
 *˛k, *
d©a
)

243 
pm_devi˚
 *pm_devi˚ = 
	`˛k_to_pm_devi˚
(
˛k
);

245 
˛k
->
«me
 = "cpu_clk";

246 
˛k
->
›s
 = &
˝u_˛ock_›s
;

247 
˛k
->
mö_øã
 = 
pm_devi˚
->min_rate;

248 
˛k
->
max_øã
 = 
pm_devi˚
->max_rate;

250 
	`˛k_öô
(
˛k
);

252 
	}
}

254 
	$˝u_ClockExô
(
˛k
 *˛k, *
pd©a
)

256 
	`˛k_exô
(
˛k
);

257 
	}
}

259 
	$˝u_ClockRe°‹e
(
˛k
 *clk)

263 if(
˛k
->
›s
->
£t_øã
)

265 if(
˛k
->
›s
->
	`£t_øã
(˛k,˛k->
øã
) < 0)

267 
	`¥ötk
("error: media setÑate fail\n");

271 
	}
}

	@component/pm/dev/cpu/cpu.c

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


27 
	~<löux/ty≥s.h
>

28 
	~<löux/kî√l.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/sched.h
>

31 
	~<löux/˝u‰eq.h
>

32 
	~<löux/dñay.h
>

33 
	~<löux/öô.h
>

34 
	~<löux/îr.h
>

35 
	~<löux/î∫o.h
>

36 
	~<löux/˛k.h
>

37 
	~<löux/io.h
>

39 
	~"pm.h
"

40 
	~"˝u.h
"

41 
	~"hi_˝u‰eq.h
"

42 
	~"hi_dvfs.h
"

45 
cf_∂©f‹m_devi˚_ªÀa£
(
devi˚
* 
dev
){}

46 
pm_devi˚
 
hi_˝u‰eq_devi˚
 = {

47 .
devi˚
 = {

48 .
«me
 = "hisi_pm_cpu",

49 .
dev
 = {

50 .
∂©f‹m_d©a
 = 
NULL
,

51 .
ªÀa£
 = 
cf_∂©f‹m_devi˚_ªÀa£
,

54 .
p‚OµTabÀInô
 = 
˝u_OµTabÀInô
,

55 .
p‚OµTabÀExô
 = 
˝u_OµTabÀExô
,

56 .
p‚ClockInô
 = 
˝u_ClockInô
,

57 .
p‚ClockExô
 = 
˝u_ClockExô
,

58 .
p‚Reguœt‹Inô
 = 
˝u_Reguœt‹Inô
,

59 .
p‚Reguœt‹Exô
 = 
˝u_Reguœt‹Exô
,

60 .
p‚AvsInô
 = 
˝u_AvsInô
,

61 .
p‚AvsExô
 = 
˝u_AvsExô
,

64 
˝u_pm_‰ìze
(
devi˚
 *
dev
)

66 
pm_devi˚
 *
devi˚
;

67 
avs_›s
 *
˝u_avs_›s
;

68 
devi˚
 = 
to_pm_devi˚_ex
(
dev
);

69 
˝u_avs_›s
 = &
devi˚
->
avs_dev
.
avs_›s
;

71 
˝u‰eq_dißbÀ
();

72 
˝u_avs_›s
->
p‚AvsPau£
(
devi˚
);

76 
˝u_pm_ª°‹e
(
devi˚
 *
dev
)

78 
pm_devi˚
 *
devi˚
;

79 
˛k
 *clk;

80 
avs_›s
 *
˝u_avs_›s
;

82 
devi˚
 = 
to_pm_devi˚_ex
(
dev
);

83 
˛k
 =&
devi˚
->clk;

84 
˝u_avs_›s
 = &
devi˚
->
avs_dev
.
avs_›s
;

86 
˝u_Reguœt‹Re°‹e
(
devi˚
);

87 
˝u_ClockRe°‹e
(&
devi˚
->
˛k
);

88 
˝u_AvsRe°‹e
(
devi˚
);

89 
˝u_avs_›s
->
p‚AvsResume
(
devi˚
);

90 
˝u‰eq_íabÀ
();

94 
dev_pm_›s
 
˝u_pm_›s
 = {

95 .
‰ìze
 = 
˝u_pm_‰ìze
,

96 .
ª°‹e
 = 
˝u_pm_ª°‹e
,

99 
__devöô
 
˝u‰eq_¥obe
(
∂©f‹m_devi˚
 *
devi˚
)

104 
__devexô
 
˝u‰eq_ªmove
(
∂©f‹m_devi˚
 *
devi˚
)

109 
∂©f‹m_drivî
 
hi_˝u‰eq_drivî
 = {

110 .
drivî
 = {

111 .
«me
 = "hisi_pm_cpu",

112 .
ow√r
 = 
THIS_MODULE
,

113 .
pm
 = &
˝u_pm_›s
,

115 .
¥obe
 = 
˝u‰eq_¥obe
,

116 .
ªmove
 = 
__devexô_p
(
˝u‰eq_ªmove
),

120 
__öô
 
˝u_pm_öô
()

122 
ªt
;

124 
ªt
 = 
pm_devi˚_öô
(&
hi_˝u‰eq_devi˚
);

125 i‡(
ªt
)

127 
¥ötk
("cpuÖm device init fail. \n");

128 
Áû0
;

131 
ªt
 = 
˝u‰eq_öô
();

132 i‡(
ªt
)

134 
¥ötk
("register cpufreq driver fail. \n");

135 
Áû1
;

138  
∂©f‹m_drivî_ªgi°î
(&
hi_˝u‰eq_drivî
);

140 
Áû1
:

141 
pm_devi˚_exô
(&
hi_˝u‰eq_devi˚
);

142 
Áû0
:

143  
ªt
;

146 
˝u_pm_exô
()

148 
˝u‰eq_exô
();

149 
pm_devi˚_exô
(&
hi_˝u‰eq_devi˚
);

150 
∂©f‹m_drivî_uƒegi°î
(&
hi_˝u‰eq_drivî
);

153 #ifde‡
__˝lu•lus


154 #i‡
__˝lu•lus


	@component/pm/dev/cpu/include/cpu.h

19 #i‚de‡
__CPU_H__


20 
	#__CPU_H__


	)

22 
	~"pm.h
"

28 
	#HI_VDD_CPU_OPP1_MV
 1100

	)

29 
	#HI_VDD_CPU_OPP1_FREQ
 600

	)

30 
	#HI_VDD_CPU_OPP1_AVS_VMIN_MV
 940

	)

31 
	#HI_VDD_CPU_OPP1_AVS_HPM
 270

	)

32 
	#HI_VDD_CPU_OPP1_AVS_HPM_DIV
 11

	)

34 
	#HI_VDD_CPU_OPP2_MV
 1200

	)

35 
	#HI_VDD_CPU_OPP2_FREQ
 732

	)

36 
	#HI_VDD_CPU_OPP2_AVS_VMIN_MV
 1000

	)

37 
	#HI_VDD_CPU_OPP2_AVS_HPM
 325

	)

38 
	#HI_VDD_CPU_OPP2_AVS_HPM_DIV
 14

	)

40 
	#HI_VDD_CPU_OPP3_MV
 1300

	)

41 
	#HI_VDD_CPU_OPP3_FREQ
 850

	)

42 
	#HI_VDD_CPU_OPP3_AVS_VMIN_MV
 1070

	)

43 
	#HI_VDD_CPU_OPP3_AVS_HPM
 365

	)

44 
	#HI_VDD_CPU_OPP3_AVS_HPM_DIV
 16

	)

46 
	#HI_VDD_CPU_OPP4_MV
 1060

	)

47 
	#HI_VDD_CPU_OPP4_FREQ
 500

	)

48 
	#HI_VDD_CPU_OPP4_AVS_VMIN_MV
 940

	)

49 
	#HI_VDD_CPU_OPP4_AVS_HPM
 255

	)

50 
	#HI_VDD_CPU_OPP4_AVS_HPM_DIV
 10

	)

52 
	#HI_VDD_CPU_OPP5_MV
 1020

	)

53 
	#HI_VDD_CPU_OPP5_FREQ
 400

	)

54 
	#HI_VDD_CPU_OPP5_AVS_VMIN_MV
 940

	)

55 
	#HI_VDD_CPU_OPP5_AVS_HPM
 240

	)

56 
	#HI_VDD_CPU_OPP5_AVS_HPM_DIV
 8

	)

58 
	#HI_VDD_CPU_OPP6_MV
 1020

	)

59 
	#HI_VDD_CPU_OPP6_FREQ
 300

	)

60 
	#HI_VDD_CPU_OPP6_AVS_VMIN_MV
 940

	)

61 
	#HI_VDD_CPU_OPP6_AVS_HPM
 240

	)

62 
	#HI_VDD_CPU_OPP6_AVS_HPM_DIV
 6

	)

64 
	#HI_VDD_CPU_OPP7_MV
 1020

	)

65 
	#HI_VDD_CPU_OPP7_FREQ
 200

	)

66 
	#HI_VDD_CPU_OPP7_AVS_VMIN_MV
 940

	)

67 
	#HI_VDD_CPU_OPP7_AVS_HPM
 240

	)

68 
	#HI_VDD_CPU_OPP7_AVS_HPM_DIV
 4

	)

70 
	#HI_VDD_CPU_OPP8_MV
 1020

	)

71 
	#HI_VDD_CPU_OPP8_FREQ
 100

	)

72 
	#HI_VDD_CPU_OPP8_AVS_VMIN_MV
 940

	)

73 
	#HI_VDD_CPU_OPP8_AVS_HPM
 240

	)

74 
	#HI_VDD_CPU_OPP8_AVS_HPM_DIV
 2

	)

77 
	#MIN_CPU_FREQ
 
HI_VDD_CPU_OPP5_FREQ


	)

78 
	#MAX_CPU_FREQ
 
HI_VDD_CPU_OPP3_FREQ


	)

80 
	#CPU_VMAX
 1310

	)

81 
	#CPU_VMIN
 800

	)

86 
˝u_OµTabÀInô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

87 
˝u_OµTabÀExô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

89 
˝u_Reguœt‹Inô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

90 
˝u_Reguœt‹Exô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

92 
˝u_ClockInô
(
˛k
 *˛k, *
d©a
);

93 
˝u_ClockExô
(
˛k
 *˛k, *
pd©a
);

95 
˝u_AvsInô
(
pm_devi˚
 *pm_devi˚, *
pd©a
);

96 
˝u_AvsExô
(
pm_devi˚
 *pm_devi˚, *
pd©a
);

98 
˝u_pm_öô
();

99 
˝u_pm_exô
();

101 
˝u_Reguœt‹Re°‹e
(
pm_devi˚
 *pm_device);

102 
˝u_ClockRe°‹e
(
˛k
 *clk);

103 
˝u_AvsRe°‹e
(
pm_devi˚
 *pm_device);

	@component/pm/dev/cpu/opp_cpu.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/vîsi⁄.h
>

3 
	~<löux/moduÀ.h
>

4 
	~<löux/ty≥s.h
>

5 
	~<löux/î∫o.h
>

6 
	~<löux/f˙é.h
>

7 
	~<löux/mm.h
>

9 
	~"pm.h
"

10 
	~"hi_›p_d©a.h
"

11 
	~"˝u.h
"

18 
hi_›p_def
 
	g˝u_›p_èbÀ
[] = {

19 
OPP_INITIALIZER
(
åue
, 
HI_VDD_CPU_OPP1_FREQ
, 
HI_VDD_CPU_OPP1_MV
),

20 
OPP_INITIALIZER
(
åue
, 
HI_VDD_CPU_OPP2_FREQ
, 
HI_VDD_CPU_OPP2_MV
),

21 
OPP_INITIALIZER
(
åue
, 
HI_VDD_CPU_OPP3_FREQ
, 
HI_VDD_CPU_OPP3_MV
),

22 
OPP_INITIALIZER
(
åue
, 
HI_VDD_CPU_OPP4_FREQ
, 
HI_VDD_CPU_OPP4_MV
),

23 
OPP_INITIALIZER
(
åue
, 
HI_VDD_CPU_OPP5_FREQ
, 
HI_VDD_CPU_OPP5_MV
),

31 
	$˝u_OµTabÀInô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

33 
›psize
 = (
˝u_›p_èbÀ
);

34 
ªt
;

36 
pm_devi˚
->
›p_èbÀ
 = 
	`kmÆloc
(
›psize
, 
GFP_KERNEL
);

37 i‡(!
pm_devi˚
->
›p_èbÀ
)

39 
ªt
 = -
ENOMEM
;

40 
	`¥ötk
("mÆlo¯›±abÀ(%dËîr. \n", 
›psize
);

41 
îr0
;

43 
	`mem˝y
((*)
pm_devi˚
->
›p_èbÀ
, (*)
˝u_›p_èbÀ
, (cpu_opp_table));

44 
ªt
 = 
	`PM_OµInôTabÀ
(&
pm_devi˚
->
devi˚
.
dev
, 
˝u_›p_èbÀ
,

45 
	`ARRAY_SIZE
(
˝u_›p_èbÀ
));

46 i‡(
ªt
)

48 
	`¥ötk
("opptable initÉrr. \n");

49 
îr1
;

52 
pm_devi˚
->
mö_øã
 = 
MIN_CPU_FREQ
;

53 
pm_devi˚
->
max_øã
 = 
MAX_CPU_FREQ
;

57 
îr1
:

58 i‡(
pm_devi˚
->
›p_èbÀ
)

60 
	`k‰ì
(
pm_devi˚
->
›p_èbÀ
);

61 
pm_devi˚
->
›p_èbÀ
 = 
NULL
;

63 
îr0
:

64  
ªt
;

65 
	}
}

67 
	$˝u_OµTabÀExô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

69 i‡(
pm_devi˚
->
›p_èbÀ
)

71 
	`k‰ì
(
pm_devi˚
->
›p_èbÀ
);

72 
pm_devi˚
->
›p_èbÀ
 = 
NULL
;

76 
	}
}

	@component/pm/dev/cpu/regulator_cpu.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/îr.h
>

4 
	~<löux/î∫o.h
>

5 
	~<löux/li°.h
>

6 
	~<löux/•ölock.h
>

7 
	~<löux/dñay.h
>

8 
	~<löux/ªguœt‹/c⁄sumî.h
>

9 
	~<mach/io.h
>

10 
	~<löux/io.h
>

12 
	~"hi_m©h.h
"

13 
	~"pm.h
"

14 
	~"ªguœt‹.h
"

15 
	~"pmc.h
"

16 
	~"˝u.h
"

17 
	~"hi_io.h
"

18 
	~"sys_pm.h
"

20 
PM_DC_DC_ATTR_S
 
g_°DcdcAâr
;

22 
PM_PMU_ATTR_S
 
	gg_°CpuPmuAâr
 = {

23 .
mö_vﬁt
 = 800,

24 .
	g°ï
 = 10,

27 
	$hi_gë_˝u_duty
(
uvﬁt
)

29 
duty
, 
Vpwm
;

31 
Vpwm
 = 
g_°DcdcAâr
.
Vªf
 - ((
uvﬁt
 * g_°DcdcAâr.
VﬁtC⁄fig
 - g_°DcdcAâr.
Vout_ba£
Ë/ g_°DcdcAâr.
Rc⁄fig
);

32 
duty
 = 
Vpwm
 * 100 / 3300 ;

34  
duty
;

35 
	}
}

37 
	$˝u_VﬁtSˇÀ
(
uvﬁt
)

39 #ifde‡
CPU_PWM


41 
duty
;

42 
‰eqN
, 
‰eqM
;

43 
duty
 = 
	`hi_gë_˝u_duty
(
uvﬁt
);

44 
‰eqN
 = 
g_°DcdcAâr
.
PwmFªqN
;

45 
‰eqM
 = (
duty
 * (
‰eqN
 + 1)) / 100 - 1;

47 
	`iSëPERI_PMC1˝u_pwm_≥riod
(
‰eqN
);

48 
	`iSëPERI_PMC1˝u_pwm_duty
(
‰eqM
);

50 
°ï
, 
˙t
 = 0;

52 
°ï
 = (
uvﬁt
 - 
g_°CpuPmuAâr
.
mö_vﬁt
) / g_stCpuPmuAttr.step;

54 
	`iSëPERI_PMC60pmu_ªg4
(
°ï
 << 1);

55 
	`iSëPERI_PMC58pmu_ªg4_wt_ªq
(0x1);

58 
vÆue
;

59 
	`iGëPERI_PMC58pmu_ªg4_wt_ªq
(&
vÆue
);

60 i‡((!
vÆue
Ë|| (
˙t
 >
MAX_I2C_ADJUST_CNT
))

62 
˙t
++;

63 
	`mdñay
(1);

65 i‡(
˙t
 >
MAX_I2C_ADJUST_CNT
)

67 
	`¥ötk
("pmu i2c set fail. \n");

73 
	}
}

75 
	$˝u_gë_HwVﬁège
()

77 
uvﬁt
;

79 #ifde‡
CPU_PWM


81 
Vpwm
, 
duty
, 
‰eqN
, 
‰eqM
, 
Vout_ba£
;

83 
‰eqN
 = 
	`iGëPERI_PMC1˝u_pwm_≥riod
();

84 
‰eqM
 = 
	`iGëPERI_PMC1˝u_pwm_duty
();

86 
duty
 = (
‰eqM
 + 1Ë* 100 / (
‰eqN
 + 1);

87 
Vpwm
 = 3300 * 
duty
 / 100;

88 
Vout_ba£
 = 
g_°DcdcAâr
.Vout_ba£ + (g_°DcdcAâr.
Vªf
 - 
Vpwm
Ë* g_°DcdcAâr.
Rc⁄fig
;

89 
uvﬁt
 = 
Vout_ba£
 / 
g_°DcdcAâr
.
VﬁtC⁄fig
;

91 
°ï
, 
˙t
 = 0;

92 
	`iSëPERI_PMC58pmu_ªg_rd_Æl
(0x1);

95 
vÆue
;

96 
	`iGëPERI_PMC58pmu_ªg_rd_Æl
(&
vÆue
);

97 i‡((!
vÆue
Ë|| (
˙t
 >
MAX_I2C_ADJUST_CNT
))

99 
˙t
++;

100 
	`mdñay
(1);

102 i‡(
˙t
 >
MAX_I2C_ADJUST_CNT
)

104 
	`¥ötk
("pmu i2c set fail. \n");

107 
	`iGëPERI_PMC60pmu_ªg4
(&
°ï
);

109 
uvﬁt
 = (
°ï
 >> 1Ë* 10 + 
g_°CpuPmuAâr
.
mö_vﬁt
;

113  
uvﬁt
;

114 
	}
}

116 
	$hi_£t_vﬁège
(
ªguœt‹_dev
 *
rdev
,

117 
mö_uV
, 
max_uV
, *
£À˘‹
)

119 
˛ù≥d_vﬁt
;

120 
hisi_ªguœt‹_d©a
 *
pd©a
 = 
rdev
->
ªg_d©a
;

122 
˛ù≥d_vﬁt
 = 
	`CLIP3
(
mö_uV
, 
CPU_VMIN
, 
CPU_VMAX
);

125 
	`˝u_VﬁtSˇÀ
(
˛ù≥d_vﬁt
);

128 
	`m¶ìp
(20);

130 
pd©a
->
vﬁt_cur
 = 
	`˝u_gë_HwVﬁège
();

132 #ifde‡
PM_DEBUG


133 
	`¥ötk
("CPU cu∏vﬁài†%d.\n", 
pd©a
->
vﬁt_cur
);

136 
	}
}

138 
	$hi_gë_vﬁège
(
ªguœt‹_dev
 *
rdev
)

140 
hisi_ªguœt‹_d©a
 *
pd©a
 = 
rdev
->
ªg_d©a
;

142  
pd©a
->
vﬁt_cur
;

143 
	}
}

145 
	$hi_ªguœt‹_íabÀ
(
ªguœt‹_dev
 *
rdev
)

148 #ifde‡
CPU_PWM


150 
	`iSëPERI_PMC65˝u_avs_˘æ_mux
(0);

152 
	`HI_RegSëBôEx
(0x0, 0, 2, 
PERI_MUX86
);

155 
	`iSëPERI_PMC4pwm3_ªu£_cfg
(0x1);

158 
	`iSëPERI_PMC4˝u_pwm_íabÀ
(1);

161 
˙t
 = 0;

163 
	`iSëPERI_PMC65˝u_avs_˘æ_mux
(1);

166 
	`HI_RegSëBôEx
(0x2, 0, 2, 
PERI_MUX83
);

167 
	`HI_RegSëBôEx
(0x2, 0, 2, 
PERI_MUX84
);

169 
	`iSëPERI_PMC63pmu_avs_ªg4_mux
(0x1);

170 
	`iSëPERI_PMC63pmu_avs_ªg4_í
(0x1);

172 
	`iSëPERI_PMC62pmc_i2c_l˙t
(0x0F9F);

173 
	`iSëPERI_PMC62pmc_i2c_h˙t
(0x0F9F);

175 
	`iSëPERI_PMC58pmu_addr
(0x2a);

178 
	`iSëPERI_PMC58pmc_i2c_íabÀ
(0x1);

181 
	`iSëPERI_PMC60pmu_ªg7
(0x0);

182 
	`iSëPERI_PMC58pmu_ªg7_wt_ªq
(0x1);

185 
vÆue
;

186 
	`iGëPERI_PMC58pmu_ªg7_wt_ªq
(&
vÆue
);

187 i‡((!
vÆue
Ë|| (
˙t
 >
MAX_I2C_ADJUST_CNT
))

189 
˙t
++;

190 
	`mdñay
(1);

192 i‡(
˙t
 >
MAX_I2C_ADJUST_CNT
)

194 
	`¥ötk
("%s:%dÖmu i2¯£àÁû. \n", 
__FUNCTION__
, 
__LINE__
);

202 
	}
}

204 
	$hi_ªguœt‹_dißbÀ
(
ªguœt‹_dev
 *
rdev
)

206 #ifde‡
CPU_PWM


207 
	`iSëPERI_PMC4˝u_pwm_íabÀ
(0);

209 
	`iSëPERI_PMC58pmc_i2c_íabÀ
(0x0);

213 
	}
}

215 
	$hi_ªguœt‹_is_íabÀd
(
ªguœt‹_dev
 *
rdev
)

217 
bE«bÀ
;

218 #ifde‡
CPU_PWM


220 
	`iGëPERI_PMC4˝u_pwm_íabÀ
(&
bE«bÀ
);

223 
	`iGëPERI_PMC58pmc_i2c_íabÀ
(&
bE«bÀ
);

226  
bE«bÀ
;

227 
	}
}

229 
ªguœt‹_›s
 
	gªguœt‹_›s_˝u
 = {

230 .
£t_vﬁège
 = 
hi_£t_vﬁège
,

231 .
	ggë_vﬁège
 = 
hi_gë_vﬁège
,

232 .
	gíabÀ
 = 
hi_ªguœt‹_íabÀ
,

233 .
	gdißbÀ
 = 
hi_ªguœt‹_dißbÀ
,

234 .
	gis_íabÀd
 = 
hi_ªguœt‹_is_íabÀd
,

237 
ªguœt‹_desc
 
	gªguœt‹_desc_˝u
 = {

238 .
«me
 = "regulator_cpu",

239 .
	g›s
 = &
ªguœt‹_›s_˝u
,

240 .
	gid
 = 
DC_DC_CPU
,

241 .
	gty≥
 = 
REGULATOR_VOLTAGE
,

242 .
	gow√r
 = 
THIS_MODULE
,

245 
ªguœt‹_c⁄sumî_suµly
 
	gªguœt‹_suµly_˝u
 = {

246 .
dev_«me
 = "hisi_regulator.0",

247 .
	gsuµly
 = "Vcc",

250 
ªguœt‹_öô_d©a
 
	gªguœt‹_öô_d©a_˝u
 = {

251 .
c⁄°øöts
 =

253 .
mö_uV
 = 
CPU_VMIN
,

254 .
	gmax_uV
 = 
CPU_VMAX
,

255 .
	gvÆid_modes_mask
 = 
REGULATOR_MODE_NORMAL
,

256 .
	gvÆid_›s_mask
 = 
REGULATOR_CHANGE_VOLTAGE
,

258 .
	gnum_c⁄sumî_suµlõs
 = 1,

259 .
	gc⁄sumî_suµlõs
 = &
ªguœt‹_suµly_˝u
,

262 
hisi_ªguœt‹_d©a
 
	gªguœt‹_d©a_˝u
 = {

263 .
öô_d©a
 = &
ªguœt‹_öô_d©a_˝u
,

264 .
	gdesc
 = &
ªguœt‹_desc_˝u
,

265 .
	gvﬁt_cur
 = 
CPU_VMAX
,

268 
	$cf_∂©f‹m_devi˚_ªÀa£
(
devi˚
* 
dev
){
	}
}

270 
∂©f‹m_devi˚
 
	gªguœt‹_˝u
 = {

271 .
«me
 = "hisi_regulator",

272 .
	gid
 = 
DC_DC_CPU
,

273 .
	gdev
 = {

274 .
∂©f‹m_d©a
 = &
ªguœt‹_d©a_˝u
,

275 .
	gªÀa£
 = 
cf_∂©f‹m_devi˚_ªÀa£
,

279 
	$˝u_Reguœt‹Inô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

281 
ªt
;

282 
vﬁt_cur
;

284 
ªt
 = 
	`∂©f‹m_devi˚_ªgi°î
(&
ªguœt‹_˝u
);

285 i‡(
ªt
)

287 
	`¥ötk
("platform_device_register cpu fail. \n");

288 
îr0
;

290 
pm_devi˚
->
ªg
 = 
	`ªguœt‹_gë
(&
ªguœt‹_˝u
.
dev
, "Vcc");

291 i‡(
	`IS_ERR
(
pm_devi˚
->
ªg
))

293 
pm_devi˚
->
ªg
 = 
NULL
;

294 
ªt
 = -1;

295 
îr1
;

297 
	`moduÀ_put
(
THIS_MODULE
);

299 #i‚de‡
HI_FPGA


300 
vﬁt_cur
 = 
	`˝u_gë_HwVﬁège
();

302 
vﬁt_cur
 = 
CPU_VMAX
;

304 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
vﬁt_cur
, volt_cur);

305 i‡(
ªt
)

307 
	`¥ötk
("%s: sˇÀ vﬁàtÿ%u fÆt\n", 
__func__
, 
vﬁt_cur
);

308  
ªt
;

310 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

314 
îr1
:

315 
	`∂©f‹m_devi˚_uƒegi°î
(&
ªguœt‹_˝u
);

316 
îr0
:

317  
ªt
;

318 
	}
}

320 
	$˝u_Reguœt‹Exô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

322 i‡(
pm_devi˚
->
ªg
)

324 
	`åy_moduÀ_gë
(
THIS_MODULE
);

325 
	`ªguœt‹_put
(
pm_devi˚
->
ªg
);

326 
pm_devi˚
->
ªg
 = 
NULL
;

328 
	`∂©f‹m_devi˚_uƒegi°î
(&
ªguœt‹_˝u
);

329 
	}
}

331 
	$˝u_Reguœt‹Re°‹e
(
pm_devi˚
 *pm_device)

333 
ªt
;

334 
vﬁt_cur
;

335 
∂©f‹m_devi˚
 *
devi˚
=&
ªguœt‹_˝u
;

336 
ªguœt‹_dev
 *
rdev
;

337 
hisi_ªguœt‹_d©a
 *
pd©a
;

339 
rdev
 = (
ªguœt‹_dev
 *)
	`∂©f‹m_gë_drvd©a
(
devi˚
);

340 
pd©a
 = (
hisi_ªguœt‹_d©a
 *)
devi˚
->
dev
.
∂©f‹m_d©a
;

342 if(!
pd©a
->
desc
->
›s
->
	`is_íabÀd
(
rdev
))

344 
ªt
 = 
pd©a
->
desc
->
›s
->
	`íabÀ
(
rdev
);

347 #i‚de‡
HI_FPGA


348 
vﬁt_cur
 = 
	`˝u_gë_HwVﬁège
();

350 
vﬁt_cur
 = 
MEDIA_VMAX
;

352 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
vﬁt_cur
, volt_cur);

353 i‡(
ªt
)

355 
	`¥ötk
("%s: sˇÀ vﬁàtÿ%u fÆt\n", 
__func__
, 
vﬁt_cur
);

356  
ªt
;

358 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

361 
	}
}

	@component/pm/dev/media/avs_media.c

24 
	~<löux/ty≥s.h
>

25 
	~<löux/kî√l.h
>

26 
	~<löux/sched.h
>

27 
	~<löux/dñay.h
>

28 
	~<löux/öô.h
>

29 
	~<löux/îr.h
>

30 
	~<löux/î∫o.h
>

31 
	~<löux/io.h
>

32 
	~<löux/kthªad.h
>

33 
	~<mach/˛ock.h
>

34 
	~<löux/moduÀ.h
>

35 
	~"hi_io.h
"

37 
	~"›p.h
"

38 
	~"avs_pm.h
"

39 
	~"pm.h
"

40 
	~"medü.h
"

41 
	~"pmc.h
"

42 
	~"sys_pm.h
"

45 #ifde‡
MEDIA_AVS


47 
	#AVS_STEP
 10

	)

48 
	#AVS_INTERVAL
 20

	)

49 
	gmedü_avs_öãr
 = 20;

50 
moduÀ_∑øm
(
medü_avs_öãr
, , 
S_IRUGO
);

52 
HPM_VF_S
 
	gmedü_‰eq_hpm_èbÀ
[] =

54 { 
HI_VDD_MEDIA_OPP1_PROFILE
, 
HI_VDD_MEDIA_OPP1_AVS_VMIN_MV
, 
HI_VDD_MEDIA_OPP1_AVS_HPM
, 
HI_VDD_MEDIA_OPP1_AVS_HPM_DIV
},

55 { 
HI_VDD_MEDIA_OPP2_PROFILE
, 
HI_VDD_MEDIA_OPP2_AVS_VMIN_MV
, 
HI_VDD_MEDIA_OPP2_AVS_HPM
, 
HI_VDD_MEDIA_OPP2_AVS_HPM_DIV
},

56 { 
HI_VDD_MEDIA_OPP3_PROFILE
, 
HI_VDD_MEDIA_OPP3_AVS_VMIN_MV
, 
HI_VDD_MEDIA_OPP3_AVS_HPM
, 
HI_VDD_MEDIA_OPP3_AVS_HPM_DIV
},

57 { 
HI_VDD_MEDIA_OPP4_PROFILE
, 
HI_VDD_MEDIA_OPP4_AVS_VMIN_MV
, 
HI_VDD_MEDIA_OPP4_AVS_HPM
, 
HI_VDD_MEDIA_OPP4_AVS_HPM_DIV
},

59 
medü_upd©e_hpm
(
avs_dev
 *avs_dev);

60 
medü_upd©e_‰eq
(
avs_dev
 *avs_dev, 
pm_devi˚
 *pm_devi˚, 
¥ofûe
);

62 
	$medü_AvsThªad
(*
Arg
)

64 
pm_devi˚
 *pm_devi˚ = (pm_devi˚ *)
Arg
;

65 
avs_dev
 *avs_dev = &(
pm_devi˚
->avs_dev);

66 
u32HpmCode
, 
u32HpmCodeAvîage
 = 0;

67 
u32RegVÆ
;

68 
s32HpmDñè
;

69 
U_PROFILE_REG
 
¥ofûeReg
;

70 
ªt
;

72 !
	`kthªad_should_°›
())

74 
	`m¶ìp
(
medü_avs_öãr
);

76 i‡(
Ál£
 =
avs_dev
->
avs_íabÀ
)

81 
	`muãx_lock
(&
avs_dev
->
avs_lock
);

83 #ifde‡
MEDIA_AVS_HPM


85 #i‚de‡
MEDIA_AVS_HW


87 
	`HI_RegRód
(&
¥ofûeReg
.
u32
, 
PROFILE_REG
);

89 
ªt
 = 
	`medü_upd©e_‰eq
(
avs_dev
, 
pm_devi˚
, 
¥ofûeReg
.
bôs
.
sw_mda_¥ofûe
);

90 if(
ªt
)

92 
	`muãx_u∆ock
(&
avs_dev
->
avs_lock
);

95 
	`medü_upd©e_hpm
(
avs_dev
);

98 
u32HpmCodeAvîage
 = 0;

100 
	`HI_RegRód
(&
u32RegVÆ
, 
PERI_PMC23
);

102 
u32HpmCode
 = (
u32RegVÆ
 & 
HPM_PC_RECORED_MASK
);

103 
u32HpmCodeAvîage
 +
u32HpmCode
;

105 
u32HpmCode
 = ((
u32RegVÆ
 >> 12Ë& 
HPM_PC_RECORED_MASK
);

106 
u32HpmCodeAvîage
 +
u32HpmCode
;

108 
	`HI_RegRód
(&
u32RegVÆ
, 
PERI_PMC24
);

109 
u32HpmCode
 = (
u32RegVÆ
 & 
HPM_PC_RECORED_MASK
);

111 
u32HpmCodeAvîage
 +
u32HpmCode
;

112 
u32HpmCode
 = ((
u32RegVÆ
 >> 12Ë& 
HPM_PC_RECORED_MASK
);

113 
u32HpmCodeAvîage
 +
u32HpmCode
;

115 
u32HpmCodeAvîage
 = u32HpmCodeAverage / 4;

117 
s32HpmDñè
 = 
u32HpmCodeAvîage
 - 
avs_dev
->
cur_hpm
;

120 i‡(
s32HpmDñè
 <= 0x1)

123 i‡(
pm_devi˚
->
cur_vﬁt
 < 
avs_dev
->
cur_vﬁt_max
)

125 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
,Öm_devi˚->
cur_vﬁt
 + 
AVS_STEP
,

126 
pm_devi˚
->
cur_vﬁt
 + 
AVS_STEP
);

127 i‡(
ªt
)

129 
	`¥ötk
("%s: scale voltÅo %u falt\n",

130 
__func__
, 
pm_devi˚
->
cur_vﬁt
 + 
AVS_STEP
);

132 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

133 #ifde‡
PM_DEBUG


134 
	`¥ötk
("%†:%d medü cur_vﬁài†%d\n",
__FUNCTION__
,
__LINE__
,
pm_devi˚
->
cur_vﬁt
);

138 i‡(
s32HpmDñè
 >= 0x10)

141 i‡(
pm_devi˚
->
cur_vﬁt
 > 
avs_dev
->
cur_vﬁt_mö
)

143 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
,Öm_devi˚->
cur_vﬁt
 - 
AVS_STEP
,

144 
pm_devi˚
->
cur_vﬁt
 - 
AVS_STEP
);

145 i‡(
ªt
)

147 
	`¥ötk
("%s: scale voltÅo %u falt\n",

148 
__func__
, 
pm_devi˚
->
cur_vﬁt
 - 
AVS_STEP
);

149  
ªt
;

151 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

152 #ifde‡
PM_DEBUG


153 
	`¥ötk
("%†:%d medü cur_vﬁài†%d\n",
__FUNCTION__
,
__LINE__
,
pm_devi˚
->
cur_vﬁt
);

160 
	`m¶ìp
(40);

166 #i‚de‡
MEDIA_AVS_HW


170 
	`muãx_u∆ock
(&
avs_dev
->
avs_lock
);

174 
	}
}

176 
	$medü_AvsPau£
(
pm_devi˚
 *pm_device)

178 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

180 
avs_dev
->
avs_íabÀ
 = 
Ál£
;

182 
	`muãx_lock
(&
avs_dev
->
avs_lock
);

184 #ifde‡
MEDIA_AVS_HPM


186 #ifde‡
MEDIA_AVS_HW


187 
	`iSëPERI_PMC8mda_hpm_fsm_í
(0);

188 
	`m¶ìp
(10);

193 #ifde‡
MEDIA_AVS_HW


194 
	`iSëPERI_PMC67mda_ts_m⁄ô‹_í
(0);

195 
	`m¶ìp
(10);

199 
	}
}

202 
	$medü_upd©e_hpm
(
avs_dev
 *avs_dev)

204 
i
;

207 
i
 = 0; i < 
avs_dev
->
max_hpm_èÀ_ödex
; i++)

209 i‡(
avs_dev
->
cur_‰eq
 =avs_dev->
‰eq_hpm_èbÀ
[
i
].
‰eq
)

211 
avs_dev
->
cur_hpm
 =ávs_dev->
‰eq_hpm_èbÀ
[
i
].
hpmªc‹d
;

212 
avs_dev
->
cur_vﬁt_mö
 =ávs_dev->
‰eq_hpm_èbÀ
[
i
].
vmö
;

214 
avs_dev
->
div
 =ávs_dev->
‰eq_hpm_èbÀ
[
i
].div;

216 
	`iSëPERI_PMC22mda_t›_hpm_div
(
avs_dev
->
div
);

222 
	}
}

224 
	$medü_upd©e_‰eq
(
avs_dev
 *avs_dev, 
pm_devi˚
 *pm_devi˚, 
¥ofûe
)

226 
U_PROFILE_REG
 
¥ofûeReg
;

227 
sw_¥ofûe
;

228 
ªt
;

229 
vﬁt
;

230 
›p
 *opp;

231 
˛k
 *clk;

233 
sw_¥ofûe
 = 
¥ofûe
;

234 if(
sw_¥ofûe
 =
pm_devi˚
->
cur_øã
)

238 if(
MIN_MEDIA_PROFILE
 > 
sw_¥ofûe
 || 
MAX_MEDIA_PROFILE
 < sw_profile)

240 
	`¥ötk
("medüÖrofûe(%ldËi†wr⁄g!\n", 
sw_¥ofûe
);

243 #ifde‡
PM_DEBUG


244 
	`¥ötk
("sw_¥ofûe: %ld\n", 
sw_¥ofûe
);

246 
˛k
 = &
pm_devi˚
->clk;

247 
›p
 = 
	`›p_föd_‰eq_˚û
(&
pm_devi˚
->
devi˚
.
dev
, &
sw_¥ofûe
);

249 
vﬁt
 = 
	`›p_gë_vﬁège
(
›p
);

250 #ifde‡
PM_DEBUG


251 
	`¥ötk
("èrgë vﬁt: %ld, sw_¥ofûe: %ld\n", 
vﬁt
, 
sw_¥ofûe
);

253 if(
sw_¥ofûe
 > 
pm_devi˚
->
cur_øã
)

256 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
vﬁt
, volt);

257 i‡(
ªt
)

259 
	`¥ötk
("%s: scale voltÅo %ld falt\n",

260 
__func__
, 
vﬁt
);

261  
ªt
;

263 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

265 
ªt
 = 
	`˛k_£t_øã
(
˛k
, 
sw_¥ofûe
);

266 i‡(
ªt
)

268 
	`¥ötk
("%s: scale freqÅo %ld falt\n",

269 
__func__
, 
sw_¥ofûe
);

270  
ªt
;

272 
pm_devi˚
->
cur_øã
 = 
	`˛k_gë_øã
(
˛k
);

276 
ªt
 = 
	`˛k_£t_øã
(
˛k
, 
sw_¥ofûe
);

277 i‡(
ªt
)

279 
	`¥ötk
("%s: scale freqÅo %ld falt\n",

280 
__func__
, 
sw_¥ofûe
);

281  
ªt
;

283 
pm_devi˚
->
cur_øã
 = 
	`˛k_gë_øã
(
˛k
);

285 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
vﬁt
, volt);

286 i‡(
ªt
)

288 
	`¥ötk
("%s: scale voltÅo %ld falt\n",

289 
__func__
,
vﬁt
);

290  
ªt
;

292 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

295 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

297 #ifde‡
PM_DEBUG


298 
	`¥ötk
("pm_devi˚->cur_øã: %d\n", 
pm_devi˚
->
cur_øã
);

300 if(
¥ofûeReg
.
bôs
.
sw_mda_£âög
)

303 
	`HI_RegSëBôEx
(0, 21, 1, 
PROFILE_REG
);

306 
	}
}

308 
	$medü_AvsResume
(
pm_devi˚
 *pm_device)

310 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

312 
pm_devi˚
->
cur_øã
 = 
HI_VDD_MEDIA_OPP4_PROFILE
;

313 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

314 
avs_dev
->
avs_íabÀ
 = 
åue
;

316 #ifde‡
MEDIA_AVS_HPM


317 
	`medü_upd©e_hpm
(
avs_dev
);

318 #ifde‡
MEDIA_AVS_HW


320 #ifde‡
MEDIA_PWM


321 
	`iSëPERI_PMC25mda_t›_hpm_lowlimô
(
avs_dev
->
hpm_dow∆imô
);

322 
	`iSëPERI_PMC25mda_t›_hpm_u∂imô
(
avs_dev
->
hpm_u∂imô
);

324 
	`iSëPERI_PMC8mda_hpm_fsm_í
(1);

329 #ifde‡
MEDIA_AVS_HW


330 
	`iSëPERI_PMC67mda_ts_m⁄ô‹_í
(1);

335 
	`muãx_u∆ock
(&
avs_dev
->
avs_lock
);

337 
	}
}

339 
avs_›s
 
	gmedü_avs_›s
 =

341 .
p‚AvsPau£
 = 
medü_AvsPau£
,

342 .
	gp‚AvsResume
 = 
medü_AvsResume
,

345 
HI_VOID
 
	$medü_HpmInô
(
avs_dev
 *avs_dev)

348 
	`iSëPERI_PMC67mda_avs_˘æ_£l
(0x1);

351 
	`iSëPERI_PMC22mda_t›_hpm_§°_ªq
(0x1);

352 
	`iSëPERI_PMC22mda_t›_hpm_§°_ªq
(0x0);

355 
	`iSëPERI_PMC25mda_t›_hpm_u∂imô
(
avs_dev
->
hpm_u∂imô
);

356 
	`iSëPERI_PMC25mda_t›_hpm_lowlimô
(
avs_dev
->
hpm_dow∆imô
);

357 
	`iSëPERI_PMC25mda_t›_hpm_m⁄ô‹_≥riod
(
avs_dev
->
high_≥riod
);

358 
	`iSëPERI_PMC30mda_t›_hpm_m⁄ô‹_≥riod
(
avs_dev
->
low_≥riod
);

360 
	`iSëPERI_PMC22mda_t›_hpm_shi·
(
avs_dev
->
shi·
);

361 
	`iSëPERI_PMC22mda_t›_hpm_off£t
(
avs_dev
->
off£t
);

363 
	`iSëPERI_PMC22mda_t›_hpm_m⁄ô‹_í
(0x1);

364 
	`iSëPERI_PMC22mda_t›_hpm_í
(0x1);

366 #ifde‡
MEDIA_AVS_HW


368 #ifde‡
MEDIA_PWM


369 
	`iSëPERI_PMC8mda_avs_fsm_dec_pwm_°ï
(
avs_dev
->
hpm_pwm_dec_°ï
);

370 
	`iSëPERI_PMC8mda_avs_fsm_öc_pwm_°ï
(
avs_dev
->
hpm_pwm_öc_°ï
);

373 
	`iSëPERI_PMC8mda_avs_hpm_fsm_ˇlc_mode
(
avs_dev
->
hpm_fsm_mode
);

374 
	`iSëPERI_PMC8mda_hpm_fsm_í
(0x1);

377 
	}
}

379 
HI_VOID
 
	$medü_TsInô
(
avs_dev
 *avs_dev)

382 
	`iSëPERI_PMC67mda_avs_˘æ_£l
(0x0);

385 
	`iSëPERI_PMC35mda_t›_ts_£l
(
avs_dev
->
ts_¸azy_mode
);

386 
	`iSëPERI_PMC35mda_t›_ts_dly_adju°
(
avs_dev
->
ts_¸azy_∑th_dly
);

387 
	`iSëPERI_PMC35mda_t›_ts_°ï
(
avs_dev
->
ts_code_°ï
);

388 
	`iSëPERI_PMC35mda_t›_ts_í
(0x1);

390 #ifde‡
MEDIA_AVS_HW


392 
	`iSëPERI_PMC67mda_ts_í_mu°_öc
(
avs_dev
->
ts_avs_mode
);

394 
	`iSëPERI_PMC67mda_ts_m⁄ô‹_≥riod
(
avs_dev
->
ts_avs_≥riod
);

395 
	`iSëPERI_PMC67mda_ts_m⁄ô‹_í
(0x1);

398 
	}
}

401 
	$medü_AvsInô
(
pm_devi˚
 *pm_devi˚, *
pd©a
)

403 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

405 
avs_dev
->
‰eq_hpm_èbÀ
 = 
	`kmÆloc
((
medü_‰eq_hpm_èbÀ
), 
GFP_KERNEL
);

406 i‡(!
avs_dev
->
‰eq_hpm_èbÀ
)

408 
	`¥ötk
("malloc hpmÅableÉrr.\n");

411 
	`mem˝y
(
avs_dev
->
‰eq_hpm_èbÀ
, 
medü_‰eq_hpm_èbÀ
, (media_freq_hpm_table));

412 
avs_dev
->
max_hpm_èÀ_ödex
 = 
	`ARRAY_SIZE
(
medü_‰eq_hpm_èbÀ
);

413 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

414 
avs_dev
->
avs_›s
 = 
medü_avs_›s
;

415 
avs_dev
->
cur_vﬁt_max
 = 
MEDIA_VMAX
;

417 
	`medü_upd©e_hpm
(
avs_dev
);

419 
avs_dev
->
avs_íabÀ
 = 
åue
;

420 #ifde‡
MEDIA_AVS_HPM


421 
avs_dev
->
hpm_u∂imô
 = 0x20;

422 
avs_dev
->
hpm_dow∆imô
 = 0x10;

423 
avs_dev
->
high_≥riod
 = 0x1;

424 
avs_dev
->
low_≥riod
 = 0;

425 
avs_dev
->
div
 = 0xa;

426 
avs_dev
->
shi·
 = 0;

427 
avs_dev
->
off£t
 = 0;

429 
avs_dev
->
hpm_pwm_dec_°ï
 = 0;

430 
avs_dev
->
hpm_pwm_öc_°ï
 = 0;

431 
avs_dev
->
hpm_fsm_mode
 = 0;

432 
	`medü_HpmInô
(
avs_dev
);

434 
avs_dev
->
ts_¸azy_mode
 = 0;

435 
avs_dev
->
ts_¸azy_∑th_dly
 = 0;

436 
avs_dev
->
ts_code_°ï
 = 0;

438 
avs_dev
->
ts_avs_mode
 = 0;

439 
avs_dev
->
ts_avs_≥riod
 = 0;

440 
	`medü_TsInô
(
avs_dev
);

442 
	`muãx_öô
(&
avs_dev
->
avs_lock
);

443 
avs_dev
->
p°AvsThªad
 = 
	`kthªad_¸óã
(
medü_AvsThªad
, (*)
pm_devi˚
,

444 
pm_devi˚
->
devi˚
.
«me
);

445 i‡(
	`IS_ERR
(
avs_dev
->
p°AvsThªad
))

447 
	`¥ötk
("createávsÅhread failed.\n");

451 
	`wake_up_¥o˚ss
(
avs_dev
->
p°AvsThªad
);

453 
	}
}

455 
	$medü_AvsRe°‹e
(
pm_devi˚
 *pm_device)

457 
avs_dev
 *avs_dev = &
pm_devi˚
->avs_dev;

459 
avs_dev
->
cur_‰eq
 = 
pm_devi˚
->
cur_øã
;

460 
avs_dev
->
cur_vﬁt_max
 = 
MEDIA_VMAX
;

461 
	`medü_upd©e_hpm
(
avs_dev
);

463 
avs_dev
->
avs_íabÀ
 = 
åue
;

464 #ifde‡
MEDIA_AVS_HPM


465 
avs_dev
->
hpm_u∂imô
 = 0x20;

466 
avs_dev
->
hpm_dow∆imô
 = 0x10;

467 
avs_dev
->
high_≥riod
 = 0x1;

468 
avs_dev
->
low_≥riod
 = 0;

469 
avs_dev
->
div
 = 0xa;

470 
avs_dev
->
shi·
 = 0;

471 
avs_dev
->
off£t
 = 0;

473 
avs_dev
->
hpm_pwm_dec_°ï
 = 0;

474 
avs_dev
->
hpm_pwm_öc_°ï
 = 0;

475 
avs_dev
->
hpm_fsm_mode
 = 0;

476 
	`medü_HpmInô
(
avs_dev
);

478 
avs_dev
->
ts_¸azy_mode
 = 0;

479 
avs_dev
->
ts_¸azy_∑th_dly
 = 0;

480 
avs_dev
->
ts_code_°ï
 = 0;

482 
avs_dev
->
ts_avs_mode
 = 0;

483 
avs_dev
->
ts_avs_≥riod
 = 0;

484 
	`medü_TsInô
(
avs_dev
);

487 
	}
}

489 
	$medü_AvsExô
(
pm_devi˚
 *pm_devi˚, *
pd©a
)

492 i‡(
pm_devi˚
->
avs_dev
.
p°AvsThªad
)

494 
	`kthªad_°›
(
pm_devi˚
->
avs_dev
.
p°AvsThªad
);

495 
pm_devi˚
->
avs_dev
.
p°AvsThªad
 = 
NULL
;

501 
	`medü_upd©e_‰eq
(&
pm_devi˚
->
avs_dev
,Öm_devi˚, 
DEFAULT_HW_PROFILE
);

503 i‡(
pm_devi˚
->
avs_dev
.
‰eq_hpm_èbÀ
)

505 
	`k‰ì
(
pm_devi˚
->
avs_dev
.
‰eq_hpm_èbÀ
);

506 
pm_devi˚
->
avs_dev
.
‰eq_hpm_èbÀ
 = 
NULL
;

510 
	}
}

513 
	$medü_AvsPau£
(
pm_devi˚
 *pm_devi˚){
	}
}

515 
	$medü_AvsResume
(
pm_devi˚
 *pm_devi˚){
	}
}

517 
avs_›s
 
	gmedü_avs_›s
 =

519 .
p‚AvsPau£
 = 
medü_AvsPau£
,

520 .
	gp‚AvsResume
 = 
medü_AvsResume
,

523 
	$medü_AvsInô
(
pm_devi˚
 *pm_devi˚, *
pd©a
)

525 
pm_devi˚
->
avs_dev
.
avs_›s
 = 
medü_avs_›s
;

527 
	}
}

528 
	$medü_AvsExô
(
pm_devi˚
 *pm_devi˚, *
pd©a
){
	}
}

	@component/pm/dev/media/clock_media.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/î∫o.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/•ölock.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/io.h
>

22 
	~<löux/˛k.h
>

23 
	~<löux/devi˚.h
>

24 
	~<löux/˛kdev.h
>

26 
	~<mach/∂©f‹m.h
>

27 
	~<asm/˛kdev.h
>

28 
	~<mach/io.h
>

29 
	~<mach/˛ock.h
>

30 
	~<mach/óæy-debug.h
>

32 
	~"hi_m©h.h
"

33 
	~"hi_io.h
"

34 
	~"pm.h
"

35 
	~"sys_pm.h
"

36 
	~"medü.h
"

37 
	~"hi_comm⁄.h
"

39 
	gmedü_avs_¥ofûe
 = 
DEFAULT_HW_PROFILE
;

40 
moduÀ_∑øm
(
medü_avs_¥ofûe
, , 
S_IRUGO
);

44 
	$medü_˛k_£t_øã
(
˛k
 *˛k, 
øã
)

46 
˛ùed_øã
;

49 
˛ùed_øã
 = 
	`CLIP3
(
øã
, 
˛k
->
mö_øã
, clk->
max_øã
);

50 i‡(
˛ùed_øã
 !
øã
)

52 
	`¥ötk
("warning, inputÑate out of clkÑange. \n");

55 if(
˛k
->
øã
 =
˛ùed_øã
)

59 
øã
)

61 (
PROFILE_1080P_30
):

62 (
PROFILE_3M_30
):

73 
	`HI_RegSëBôEx
(0x00, 0, 2, 
PERI_CRG65
);

74 
	`HI_RegSëBôEx
(0x10, 2, 2, 
PERI_CRG11
);

76 
	`HI_RegSëBôEx
(0x2, 0, 2, 
PERI_CRG12
);

79 
	`HI_RegSëBôEx
(0xAA, 12, 8, 
PERI_CRG12
);

82 (
PROFILE_1080P_60
):

93 
	`HI_RegSëBôEx
(0x3, 0, 2, 
PERI_CRG65
);

96 
	`HI_RegSëBôEx
(0x0, 0, 2, 
PERI_CRG12
);

99 
	`HI_RegSëBôEx
(0x59, 12, 8, 
PERI_CRG12
);

102 (
PROFILE_5M_30
):

113 
	`HI_RegSëBôEx
(0x00, 0, 2, 
PERI_CRG65
);

114 
	`HI_RegSëBôEx
(0x1, 2, 2, 
PERI_CRG11
);

116 
	`HI_RegSëBôEx
(0x1, 0, 2, 
PERI_CRG12
);

118 
	`HI_RegSëBôEx
(0x4, 12, 8, 
PERI_CRG12
);

122 
	`¥ötk
("øã %dÇŸ bl⁄gÅÿsˇlög_avaûabÀ_‰equícõs. \n", 
øã
);

127 
vÆue11
, 
vÆue12
;

129 
	`HI_RegRód
(&
vÆue11
, 
PERI_CRG11
);

130 
	`HI_RegRód
(&
vÆue12
, 
PERI_CRG12
);

131 #ifde‡
PM_DEBUG


132 
	`¥ötk
("¸g 12: 0x%lx, crg 11: 0x%lx \n", 
vÆue11
, 
vÆue12
);

137 
˛k
->
øã
 = 
˛ùed_øã
;

140 
	}
}

142 
	$medü_˛k_öô
(
˛k
 *clk)

144 
hw_¥ofûe
;

145 
pm_devi˚
 *pm_devi˚ = 
	`˛k_to_pm_devi˚
(
˛k
);

149 
hw_¥ofûe
 = 
medü_avs_¥ofûe
;

152 
˛k
->
øã
 = 
hw_¥ofûe
;

153 
pm_devi˚
->
cur_øã
 = 
˛k
->
øã
;

155 
	`HI_RegSëBôEx
(
hw_¥ofûe
, 16, 4, 
PROFILE_REG
);

158 
	`HI_RegSëBôEx
(1, 20, 1, 
PROFILE_REG
);

160 
	}
}

162 
˛k_›s
 
	gmedü_˛ock_›s
 = {

163 .
£t_øã
 = 
medü_˛k_£t_øã
,

164 .
	göô
 = 
medü_˛k_öô
,

167 
	$medü_ClockInô
(
˛k
 *˛k, *
d©a
)

169 
pm_devi˚
 *pm_devi˚ = 
	`˛k_to_pm_devi˚
(
˛k
);

171 
˛k
->
«me
 = "media_clk";

172 
˛k
->
›s
 = &
medü_˛ock_›s
;

173 
˛k
->
mö_øã
 = 
pm_devi˚
->min_rate;

174 
˛k
->
max_øã
 = 
pm_devi˚
->max_rate;

176 
	`˛k_öô
(
˛k
);

177 if(
˛k
->
›s
->
£t_øã
)

179 if(
˛k
->
›s
->
	`£t_øã
(˛k,˛k->
øã
) < 0)

181 
	`¥ötk
("error: media setÑate fail\n");

185 
	}
}

187 
	$medü_ClockRe°‹e
(
˛k
 *clk)

190 
	`medü_˛k_öô
(
˛k
);

191 if(
˛k
->
›s
->
£t_øã
)

193 if(
˛k
->
›s
->
	`£t_øã
(˛k,˛k->
øã
) < 0)

195 
	`¥ötk
("error: media setÑate fail\n");

199 
	}
}

201 
	$medü_ClockExô
(
˛k
 *˛k, *
pd©a
)

204 
	`HI_RegSëBôEx
(0, 20, 1, 
PROFILE_REG
);

205 
	`˛k_exô
(
˛k
);

206 
	}
}

	@component/pm/dev/media/include/media.h

19 #i‚de‡
__MEDIA_H__


20 
	#__MEDIA_H__


	)

22 
	~"pm.h
"

30 
	#HI_VDD_MEDIA_OPP1_MV
 1030

	)

31 
	#HI_VDD_MEDIA_OPP1_PROFILE
 0

	)

32 
	#HI_VDD_MEDIA_OPP1_AVS_HPM
 245

	)

33 
	#HI_VDD_MEDIA_OPP1_AVS_VMIN_MV
 930

	)

34 
	#HI_VDD_MEDIA_OPP1_AVS_HPM_DIV
 3

	)

37 
	#HI_VDD_MEDIA_OPP2_MV
 1030

	)

38 
	#HI_VDD_MEDIA_OPP2_PROFILE
 1

	)

39 
	#HI_VDD_MEDIA_OPP2_AVS_HPM
 245

	)

40 
	#HI_VDD_MEDIA_OPP2_AVS_VMIN_MV
 930

	)

41 
	#HI_VDD_MEDIA_OPP2_AVS_HPM_DIV
 3

	)

44 
	#HI_VDD_MEDIA_OPP3_MV
 1030

	)

45 
	#HI_VDD_MEDIA_OPP3_PROFILE
 2

	)

46 
	#HI_VDD_MEDIA_OPP3_AVS_HPM
 245

	)

47 
	#HI_VDD_MEDIA_OPP3_AVS_VMIN_MV
 930

	)

48 
	#HI_VDD_MEDIA_OPP3_AVS_HPM_DIV
 4

	)

51 
	#HI_VDD_MEDIA_OPP4_MV
 1100

	)

52 
	#HI_VDD_MEDIA_OPP4_PROFILE
 3

	)

53 
	#HI_VDD_MEDIA_OPP4_AVS_HPM
 260

	)

54 
	#HI_VDD_MEDIA_OPP4_AVS_VMIN_MV
 930

	)

55 
	#HI_VDD_MEDIA_OPP4_AVS_HPM_DIV
 5

	)

57 
	#MIN_MEDIA_PROFILE
 
HI_VDD_MEDIA_OPP1_PROFILE


	)

58 
	#MAX_MEDIA_PROFILE
 
HI_VDD_MEDIA_OPP4_PROFILE


	)

59 
	#DEFAULT_HW_PROFILE
 
HI_VDD_MEDIA_OPP4_PROFILE


	)

61 
	#MEDIA_VMAX
 1310

	)

62 
	#MEDIA_VMIN
 800

	)

67 
medü_OµTabÀInô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

68 
medü_OµTabÀExô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

70 
medü_Reguœt‹Inô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

71 
medü_Reguœt‹Exô
(
pm_devi˚
 *pm_devi˚, *
pD©a
);

73 
medü_ClockInô
(
˛k
 *˛k, *
d©a
);

74 
medü_ClockExô
(
˛k
 *˛k, *
pd©a
);

76 
medü_AvsInô
(
pm_devi˚
 *pm_devi˚, *
pd©a
);

77 
medü_AvsExô
(
pm_devi˚
 *pm_devi˚, *
pd©a
);

79 
medü_pm_öô
();

80 
medü_pm_exô
();

81 
medü_Reguœt‹Re°‹e
(
pm_devi˚
 *pm_device);

82 
medü_ClockRe°‹e
(
˛k
 *clk);

83 
medü_AvsRe°‹e
(
pm_devi˚
 *pm_device);

	@component/pm/dev/media/media.c

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


27 
	~<löux/ty≥s.h
>

28 
	~<löux/kî√l.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/sched.h
>

31 
	~<löux/dñay.h
>

32 
	~<löux/öô.h
>

33 
	~<löux/îr.h
>

34 
	~<löux/î∫o.h
>

35 
	~<löux/˛k.h
>

36 
	~<löux/io.h
>

38 
	~"pm.h
"

39 
	~"hi_dvfs.h
"

40 
	~"medü.h
"

42 
cf_∂©f‹m_devi˚_ªÀa£
(
devi˚
* 
dev
){}

43 
pm_devi˚
 
hi_medü‰eq_devi˚
 = {

44 .
devi˚
 = {

45 .
«me
 = "hisi_pm_media",

46 .
dev
 = {

47 .
∂©f‹m_d©a
 = 
NULL
,

48 .
ªÀa£
 = 
cf_∂©f‹m_devi˚_ªÀa£
,

51 .
p‚OµTabÀInô
 = 
medü_OµTabÀInô
,

52 .
p‚OµTabÀExô
 = 
medü_OµTabÀExô
,

53 .
p‚ClockInô
 = 
medü_ClockInô
,

54 .
p‚ClockExô
 = 
medü_ClockExô
,

55 .
p‚Reguœt‹Inô
 = 
medü_Reguœt‹Inô
,

56 .
p‚Reguœt‹Exô
 = 
medü_Reguœt‹Exô
,

57 .
p‚AvsInô
 = 
medü_AvsInô
,

58 .
p‚AvsExô
 = 
medü_AvsExô
,

61 
medü_£t_¥ofûe
(
√w_¥ofûe
)

63 
ﬁd_¥ofûe
 = 
˛k_gë_øã
(&
hi_medü‰eq_devi˚
.
˛k
);

65  
hi_devi˚_sˇÀ
(&
hi_medü‰eq_devi˚
.
devi˚
.
dev
, 
ﬁd_¥ofûe
, 
√w_¥ofûe
);

67 
EXPORT_SYMBOL
(
medü_£t_¥ofûe
);

70 
ssize_t
 
medü_pm_¥ofûe_show
(
devi˚
 *
dev
,

71 
devi˚_©åibuã
 *
©å
, *
buf
)

73 
¥ofûe
 = 
˛k_gë_øã
(&
hi_medü‰eq_devi˚
.
˛k
);

75  
•rötf
(
buf
, "¥ofûe:%u. \n", 
¥ofûe
);

78 
ssize_t
 
medü_pm_¥ofûe_°‹e
(
devi˚
 *
dev
,

79 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

81 
¥ofûe
;

82 i‡(
k°πouöt
(
buf
, 0, &
¥ofûe
))

83  -
EINVAL
;

85 
medü_£t_¥ofûe
(
¥ofûe
);

87  
cou¡
;

91 
DEVICE_ATTR
(
pm_¥ofûe
, 
S_IRUGO
|
S_IWUSR
,

92 
medü_pm_¥ofûe_show
,

93 
medü_pm_¥ofûe_°‹e
);

95 
medü_add_sysfs
()

97 
ªsu…
;

99 
ªsu…
 = 
devi˚_¸óã_fûe
(&
hi_medü‰eq_devi˚
.
devi˚
.
dev
, &
dev_©å_pm_¥ofûe
);

100 i‡(
ªsu…
)

101  -
ENODEV
;

106 
medü_ªmove_sysfs
()

108 
devi˚_ªmove_fûe
(&
hi_medü‰eq_devi˚
.
devi˚
.
dev
, &
dev_©å_pm_¥ofûe
);

111 
medü_pm_‰ìze
(
devi˚
 *
dev
)

113 
pm_devi˚
 *
devi˚
;

114 
avs_›s
 *
medü_avs_›s
;

115 
devi˚
 = 
to_pm_devi˚_ex
(
dev
);

116 
medü_avs_›s
 = &
devi˚
->
avs_dev
.
avs_›s
;

118 
medü_avs_›s
->
p‚AvsPau£
(
devi˚
);

122 
medü_pm_ª°‹e
(
devi˚
 *
dev
)

124 
pm_devi˚
 *
devi˚
;

125 
avs_›s
 *
medü_avs_›s
;

126 
˛k
 *clk;

128 
devi˚
 = 
to_pm_devi˚_ex
(
dev
);

129 
˛k
 =&
devi˚
->clk;

130 
medü_avs_›s
 = &
devi˚
->
avs_dev
.
avs_›s
;

132 
medü_Reguœt‹Re°‹e
(
devi˚
);

133 
medü_ClockRe°‹e
(&
devi˚
->
˛k
);

134 
medü_AvsRe°‹e
(
devi˚
);

135 
medü_avs_›s
->
p‚AvsResume
(
devi˚
);

139 
dev_pm_›s
 
medü_pm_›s
 = {

140 .
‰ìze
 = 
medü_pm_‰ìze
,

141 .
ª°‹e
 = 
medü_pm_ª°‹e
,

145 
__devöô
 
medü_¥obe
(
∂©f‹m_devi˚
 *
devi˚
)

149 
__devexô
 
medü_ªmove
(
∂©f‹m_devi˚
 *
devi˚
)

154 
∂©f‹m_drivî
 
hi_medü_drivî
 = {

155 .
drivî
 = {

156 .
«me
 = "hisi_pm_media",

157 .
ow√r
 = 
THIS_MODULE
,

158 .
pm
 = &
medü_pm_›s
,

160 .
¥obe
 = 
medü_¥obe
,

161 .
ªmove
 = 
__devexô_p
(
medü_ªmove
),

165 
__öô
 
medü_pm_öô
()

167 
ªt
;

169 
ªt
 = 
pm_devi˚_öô
(&
hi_medü‰eq_devi˚
);

170 i‡(
ªt
)

172 
¥ötk
("mediaÖm device init fail. \n");

173 
Áû
;

176 
medü_add_sysfs
();

178  
∂©f‹m_drivî_ªgi°î
(&
hi_medü_drivî
);

180 
Áû
:

181  
ªt
;

184 
medü_pm_exô
()

186 
medü_ªmove_sysfs
();

187 
pm_devi˚_exô
(&
hi_medü‰eq_devi˚
);

188 
∂©f‹m_drivî_uƒegi°î
(&
hi_medü_drivî
);

191 #ifde‡
__˝lu•lus


192 #i‡
__˝lu•lus


	@component/pm/dev/media/opp_media.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/vîsi⁄.h
>

3 
	~<löux/moduÀ.h
>

4 
	~<löux/ty≥s.h
>

5 
	~<löux/î∫o.h
>

6 
	~<löux/f˙é.h
>

7 
	~<löux/mm.h
>

9 
	~"pm.h
"

10 
	~"hi_›p_d©a.h
"

11 
	~"medü.h
"

16 
hi_›p_def
 
	gmedü_›p_èbÀ
[] = {

17 
OPP_INITIALIZER
(
åue
, 
HI_VDD_MEDIA_OPP1_PROFILE
, 
HI_VDD_MEDIA_OPP1_MV
),

18 
OPP_INITIALIZER
(
åue
, 
HI_VDD_MEDIA_OPP2_PROFILE
, 
HI_VDD_MEDIA_OPP2_MV
),

19 
OPP_INITIALIZER
(
åue
, 
HI_VDD_MEDIA_OPP3_PROFILE
, 
HI_VDD_MEDIA_OPP3_MV
),

20 
OPP_INITIALIZER
(
åue
, 
HI_VDD_MEDIA_OPP4_PROFILE
, 
HI_VDD_MEDIA_OPP4_MV
),

26 
	$medü_OµTabÀInô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

28 
›psize
 = (
medü_›p_èbÀ
);

29 
ªt
;

31 
pm_devi˚
->
›p_èbÀ
 = 
	`kmÆloc
(
›psize
, 
GFP_KERNEL
);

32 i‡(!
pm_devi˚
->
›p_èbÀ
)

34 
ªt
 = -
ENOMEM
;

35 
	`¥ötk
("mÆlo¯›±abÀ(%dËîr. \n", 
›psize
);

36 
îr0
;

38 
	`mem˝y
((*)
pm_devi˚
->
›p_èbÀ
, (*)
medü_›p_èbÀ
, (media_opp_table));

39 
ªt
 = 
	`PM_OµInôTabÀ
(&
pm_devi˚
->
devi˚
.
dev
, 
medü_›p_èbÀ
,

40 
	`ARRAY_SIZE
(
medü_›p_èbÀ
));

41 i‡(
ªt
)

43 
	`¥ötk
("opptable initÉrr. \n");

44 
îr1
;

47 
pm_devi˚
->
mö_øã
 = 
MIN_MEDIA_PROFILE
;

48 
pm_devi˚
->
max_øã
 = 
MAX_MEDIA_PROFILE
;

52 
îr1
:

53 i‡(
pm_devi˚
->
›p_èbÀ
)

55 
	`k‰ì
(
pm_devi˚
->
›p_èbÀ
);

56 
pm_devi˚
->
›p_èbÀ
 = 
NULL
;

58 
îr0
:

59  
ªt
;

60 
	}
}

62 
	$medü_OµTabÀExô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

64 i‡(
pm_devi˚
->
›p_èbÀ
)

66 
	`k‰ì
(
pm_devi˚
->
›p_èbÀ
);

67 
pm_devi˚
->
›p_èbÀ
 = 
NULL
;

69 
	}
}

	@component/pm/dev/media/regulator_media.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/îr.h
>

4 
	~<löux/î∫o.h
>

5 
	~<löux/li°.h
>

6 
	~<löux/•ölock.h
>

7 
	~<löux/dñay.h
>

8 
	~<löux/io.h
>

9 
	~<löux/ªguœt‹/c⁄sumî.h
>

11 
	~"hi_m©h.h
"

12 
	~"pm.h
"

13 
	~"ªguœt‹.h
"

14 
	~"pmc.h
"

15 
	~"medü.h
"

16 
	~"hi_io.h
"

17 
	~"sys_pm.h
"

19 
PM_DC_DC_ATTR_S
 
g_°DcdcAâr
;

20 
PM_PMU_ATTR_S
 
	gg_°MedüPmuAâr
 = {

21 .
mö_vﬁt
 = 800,

22 .
	g°ï
 = 10,

25 
	$medü_gë_HwVﬁège
()

27 
uvﬁt
;

28 #ifde‡
MEDIA_PWM


29 
Vpwm
, 
duty
, 
‰eqN
, 
‰eqM
, 
Vout_ba£
;

31 
‰eqN
 = 
	`iGëPERI_PMC3mda_pwm_≥riod
();

32 
‰eqM
 = 
	`iGëPERI_PMC3mda_pwm_duty
();

34 
duty
 = (
‰eqM
 + 1Ë* 100 / (
‰eqN
 + 1);

35 
Vpwm
 = 3300 * 
duty
 / 100;

36 
Vout_ba£
 = 
g_°DcdcAâr
.Vout_ba£ + (g_°DcdcAâr.
Vªf
 - 
Vpwm
Ë* g_°DcdcAâr.
Rc⁄fig
;

37 
uvﬁt
 = 
Vout_ba£
 / 
g_°DcdcAâr
.
VﬁtC⁄fig
;

39 
°ï
, 
˙t
 = 0;

40 
	`iSëPERI_PMC58pmu_ªg_rd_Æl
(0x1);

43 
vÆue
;

44 
	`iGëPERI_PMC58pmu_ªg_rd_Æl
(&
vÆue
);

45 i‡((!
vÆue
Ë|| (
˙t
 >
MAX_I2C_ADJUST_CNT
))

47 
˙t
++;

48 
	`mdñay
(1);

50 i‡(
˙t
 >
MAX_I2C_ADJUST_CNT
)

52 
	`¥ötk
("pmu i2c set fail. \n");

55 
	`iGëPERI_PMC59pmu_ªg3
(&
°ï
);

57 
uvﬁt
 = (
°ï
 >> 1Ë* 10 + 
g_°MedüPmuAâr
.
mö_vﬁt
;

61  
uvﬁt
;

62 
	}
}

64 
	$hi_gë_medü_duty
(
uvﬁt
)

66 
duty
, 
Vpwm
;

68 
Vpwm
 = 
g_°DcdcAâr
.
Vªf
 - ((
uvﬁt
 * g_°DcdcAâr.
VﬁtC⁄fig
 - g_°DcdcAâr.
Vout_ba£
Ë/ g_°DcdcAâr.
Rc⁄fig
);

69 
duty
 = 
Vpwm
 * 100 / 3300 ;

71  
duty
;

72 
	}
}

74 
	$medü_VﬁtSˇÀ
(
uvﬁt
)

76 #ifde‡
MEDIA_PWM


78 
duty
;

79 
‰eqN
, 
‰eqM
;

80 
duty
 = 
	`hi_gë_medü_duty
(
uvﬁt
);

81 
‰eqN
 = 
g_°DcdcAâr
.
PwmFªqN
;

82 
‰eqM
 = (
duty
 * (
‰eqN
 + 1)) / 100 - 1;

84 
	`iSëPERI_PMC3mda_pwm_≥riod
(
‰eqN
);

85 
	`iSëPERI_PMC3mda_pwm_duty
(
‰eqM
);

88 
°ï
, 
˙t
 = 0;

90 
°ï
 = (
uvﬁt
 - 
g_°MedüPmuAâr
.
mö_vﬁt
) / g_stMediaPmuAttr.step;

92 
	`iSëPERI_PMC59pmu_ªg3
(
°ï
 << 1);

93 
	`iSëPERI_PMC58pmu_ªg3_wt_ªq
(0x1);

96 
vÆue
;

97 
	`iGëPERI_PMC58pmu_ªg3_wt_ªq
(&
vÆue
);

98 i‡((!
vÆue
Ë|| (
˙t
 >
MAX_I2C_ADJUST_CNT
))

100 
˙t
++;

101 
	`mdñay
(1);

103 i‡(
˙t
 >
MAX_I2C_ADJUST_CNT
)

105 
	`¥ötk
("pmu i2c set fail. \n");

111 
	}
}

112 
	$hi_£t_vﬁège
(
ªguœt‹_dev
 *
rdev
,

113 
mö_uV
, 
max_uV
, *
£À˘‹
)

115 
˛ù≥d_vﬁt
;

116 
hisi_ªguœt‹_d©a
 *
pd©a
 = 
rdev
->
ªg_d©a
;

119 
˛ù≥d_vﬁt
 = 
	`CLIP3
(
mö_uV
, 
MEDIA_VMIN
, 
MEDIA_VMAX
);

121 
	`medü_VﬁtSˇÀ
(
˛ù≥d_vﬁt
);

122 
	`m¶ìp
(20);

123 
pd©a
->
vﬁt_cur
 = 
	`medü_gë_HwVﬁège
();

125 #ifde‡
PM_DEBUG


126 
	`¥ötk
("Medü cu∏vﬁài†%d.\n", 
pd©a
->
vﬁt_cur
);

129 
	}
}

131 
	$hi_gë_vﬁège
(
ªguœt‹_dev
 *
rdev
)

133 
hisi_ªguœt‹_d©a
 *
pd©a
 = 
rdev
->
ªg_d©a
;

135  
pd©a
->
vﬁt_cur
;

136 
	}
}

138 
	$hi_ªguœt‹_íabÀ
(
ªguœt‹_dev
 *
rdev
)

141 #ifde‡
MEDIA_PWM


142 
	`iSëPERI_PMC67mda_avs_˘æ_mux
(0);

143 
	`HI_RegSëBôEx
(0x0, 0, 2, 
PERI_MUX85
);

145 
	`iSëPERI_PMC4pwm2_ªu£_cfg
(0x3);

147 
	`iSëPERI_PMC4mda_pwm_íabÀ
(1);

150 
˙t
 = 0;

151 
	`iSëPERI_PMC67mda_avs_˘æ_mux
(1);

153 
	`HI_RegSëBôEx
(0x2, 0, 2, 
PERI_MUX83
);

154 
	`HI_RegSëBôEx
(0x2, 0, 2, 
PERI_MUX84
);

156 
	`iSëPERI_PMC63pmu_avs_ªg3_mux
(0x11);

157 
	`iSëPERI_PMC63pmu_avs_ªg3_í
(0x1);

159 
	`iSëPERI_PMC62pmc_i2c_l˙t
(0x0F9F);

160 
	`iSëPERI_PMC62pmc_i2c_h˙t
(0x0F9F);

162 
	`iSëPERI_PMC58pmu_addr
(0x2a);

164 
	`iSëPERI_PMC58pmc_i2c_íabÀ
(0x1);

166 
	`iSëPERI_PMC60pmu_ªg7
(0x0);

167 
	`iSëPERI_PMC58pmu_ªg7_wt_ªq
(0x1);

170 
vÆue
;

171 
	`iGëPERI_PMC58pmu_ªg7_wt_ªq
(&
vÆue
);

172 i‡((!
vÆue
Ë|| (
˙t
 >
MAX_I2C_ADJUST_CNT
))

174 
˙t
++;

175 
	`mdñay
(1);

177 i‡(
˙t
 >
MAX_I2C_ADJUST_CNT
)

179 
	`¥ötk
("%s:%dÖmu i2¯£àÁû. \n", 
__FUNCTION__
, 
__LINE__
);

189 
	}
}

191 
	$hi_ªguœt‹_dißbÀ
(
ªguœt‹_dev
 *
rdev
)

193 #ifde‡
MEDIA_PWM


194 
	`iSëPERI_PMC4mda_pwm_íabÀ
(0);

196 
	`iSëPERI_PMC58pmc_i2c_íabÀ
(0x0);

199 
	}
}

201 
	$hi_ªguœt‹_is_íabÀd
(
ªguœt‹_dev
 *
rdev
)

203 
bE«bÀ
;

204 #ifde‡
MEDIA_PWM


206 
	`iGëPERI_PMC4mda_pwm_íabÀ
(&
bE«bÀ
);

209 
	`iGëPERI_PMC58pmc_i2c_íabÀ
(&
bE«bÀ
);

212  
bE«bÀ
;

213 
	}
}

215 
ªguœt‹_›s
 
	gªguœt‹_›s_medü
 = {

216 .
£t_vﬁège
 = 
hi_£t_vﬁège
,

217 .
	ggë_vﬁège
 = 
hi_gë_vﬁège
,

218 .
	gíabÀ
 = 
hi_ªguœt‹_íabÀ
,

219 .
	gdißbÀ
 = 
hi_ªguœt‹_dißbÀ
,

220 .
	gis_íabÀd
 = 
hi_ªguœt‹_is_íabÀd
,

223 
ªguœt‹_desc
 
	gªguœt‹_desc_medü
 = {

224 .
«me
 = "regulator_media",

225 .
	g›s
 = &
ªguœt‹_›s_medü
,

226 .
	gid
 = 
DC_DC_MEDIA
,

227 .
	gty≥
 = 
REGULATOR_VOLTAGE
,

228 .
	gow√r
 = 
THIS_MODULE
,

231 
ªguœt‹_c⁄sumî_suµly
 
	gªguœt‹_suµly_medü
 = {

232 .
dev_«me
 = "hisi_regulator.1",

233 .
	gsuµly
 = "Vcc",

236 
ªguœt‹_öô_d©a
 
	gªguœt‹_öô_d©a_medü
 = {

237 .
c⁄°øöts
 =

239 .
mö_uV
 = 
MEDIA_VMIN
,

240 .
	gmax_uV
 = 
MEDIA_VMAX
,

241 .
	gvÆid_modes_mask
 = 
REGULATOR_MODE_NORMAL
,

242 .
	gvÆid_›s_mask
 = 
REGULATOR_CHANGE_VOLTAGE
,

244 .
	gnum_c⁄sumî_suµlõs
 = 1,

245 .
	gc⁄sumî_suµlõs
 = &
ªguœt‹_suµly_medü
,

248 
hisi_ªguœt‹_d©a
 
	gªguœt‹_d©a_medü
 = {

249 .
öô_d©a
 = &
ªguœt‹_öô_d©a_medü
,

250 .
	gdesc
 = &
ªguœt‹_desc_medü
,

251 .
	gvﬁt_cur
 = 
MEDIA_VMAX
,

253 
	$cf_∂©f‹m_devi˚_ªÀa£
(
devi˚
* 
dev
){
	}
}

255 
∂©f‹m_devi˚
 
	gªguœt‹_medü
 = {

256 .
«me
 = "hisi_regulator",

257 .
	gid
 = 
DC_DC_MEDIA
,

258 .
	gdev
 = {

259 .
∂©f‹m_d©a
 = &
ªguœt‹_d©a_medü
,

260 .
	gªÀa£
 = 
cf_∂©f‹m_devi˚_ªÀa£
,

264 
	$medü_Reguœt‹Inô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

266 
ªt
;

267 
vﬁt_cur
;

268 
ªt
 = 
	`∂©f‹m_devi˚_ªgi°î
(&
ªguœt‹_medü
);

269 i‡(
ªt
)

271 
	`¥ötk
("platform_device_register media fail. \n");

272 
îr0
;

274 
pm_devi˚
->
ªg
 = 
	`ªguœt‹_gë
(&
ªguœt‹_medü
.
dev
, "Vcc");

275 i‡(
	`IS_ERR
(
pm_devi˚
->
ªg
))

277 
	`¥ötk
("%s: u«bÀÅÿgë medüÑeguœt‹\n", 
__func__
);

278 
pm_devi˚
->
ªg
 = 
NULL
;

279 
ªt
 = -1;

280 
îr1
;

282 
	`moduÀ_put
(
THIS_MODULE
);

284 #i‚de‡
HI_FPGA


285 
vﬁt_cur
 = 
	`medü_gë_HwVﬁège
();

287 
vﬁt_cur
 = 
MEDIA_VMAX
;

289 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
vﬁt_cur
, volt_cur);

290 i‡(
ªt
)

292 
	`¥ötk
("%s: sˇÀ vﬁàtÿ%u fÆt\n", 
__func__
, 
vﬁt_cur
);

293  
ªt
;

295 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

298 
îr1
:

299 
	`∂©f‹m_devi˚_uƒegi°î
(&
ªguœt‹_medü
);

300 
îr0
:

301  
ªt
;

302 
	}
}

304 
	$medü_Reguœt‹Exô
(
pm_devi˚
 *pm_devi˚, *
pD©a
)

306 i‡(
pm_devi˚
->
ªg
)

308 
	`åy_moduÀ_gë
(
THIS_MODULE
);

309 
	`ªguœt‹_put
(
pm_devi˚
->
ªg
);

311 
pm_devi˚
->
ªg
 = 
NULL
;

313 
	`∂©f‹m_devi˚_uƒegi°î
(&
ªguœt‹_medü
);

314 
	}
}

316 
	$medü_Reguœt‹Re°‹e
(
pm_devi˚
 *pm_device)

318 
ªt
;

319 
vﬁt_cur
;

320 
∂©f‹m_devi˚
 *
devi˚
=&
ªguœt‹_medü
;

321 
ªguœt‹_dev
 *
rdev
;

322 
hisi_ªguœt‹_d©a
 *
pd©a
;

324 
rdev
 = (
ªguœt‹_dev
 *)
	`∂©f‹m_gë_drvd©a
(
devi˚
);

325 
pd©a
 = (
hisi_ªguœt‹_d©a
 *)
devi˚
->
dev
.
∂©f‹m_d©a
;

327 if(!
pd©a
->
desc
->
›s
->
	`is_íabÀd
(
rdev
))

329 
ªt
 = 
pd©a
->
desc
->
›s
->
	`íabÀ
(
rdev
);

332 #i‚de‡
HI_FPGA


333 
vﬁt_cur
 = 
	`medü_gë_HwVﬁège
();

335 
vﬁt_cur
 = 
MEDIA_VMAX
;

337 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
vﬁt_cur
, volt_cur);

338 i‡(
ªt
)

340 
	`¥ötk
("%s: sˇÀ vﬁàtÿ%u fÆt\n", 
__func__
, 
vﬁt_cur
);

341  
ªt
;

343 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

346 
	}
}

	@component/pm/dvfs/hi_cpufreq.c

2 
	~<löux/ty≥s.h
>

3 
	~<löux/vîsi⁄.h
>

4 
	~<löux/kî√l.h
>

5 
	~<löux/sched.h
>

6 
	~<löux/˝u‰eq.h
>

7 
	~<löux/dñay.h
>

8 
	~<löux/öô.h
>

9 
	~<löux/îr.h
>

10 
	~<löux/î∫o.h
>

11 
	~<löux/˛k.h
>

12 
	~<löux/io.h
>

13 
	~<löux/›p.h
>

14 
	~<löux/˝u.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/ªguœt‹/c⁄sumî.h
>

18 
	~<asm/smp_∂©.h
>

19 
	~<asm/˝u.h
>

20 
	~<mach/io.h
>

21 
	~<mach/˛ock.h
>

22 
	~<mach/h¨dw¨e.h
>

24 
	~"pm.h
"

25 
	~"hi_dvfs.h
"

28 #i‚de‡
MODULE


29 
	sÕj_öfo
 {

30 
	mªf
;

31 
	m‰eq
;

34 
DEFINE_PER_CPU
(
Õj_öfo
, 
Õj_ªf
);

35 #ifde‡
CONFIG_SMP


36 
Õj_öfo
 
	gglobÆ_Õj_ªf
;

41 
pm_devi˚
 
hi_˝u‰eq_devi˚
;

43 
	$˝u‰eq_vîify_•ìd
(
˝u‰eq_pﬁicy
 *
pﬁicy
)

45 i‡(!
hi_˝u‰eq_devi˚
.
‰eq_èbÀ
)

46  -
EINVAL
;

47  
	`˝u‰eq_‰equícy_èbÀ_vîify
(
pﬁicy
, 
hi_˝u‰eq_devi˚
.
‰eq_èbÀ
);

48 
	}
}

50 
	$˝u‰eq_gë•ìd
(
˝u
)

52 
øã
;

54 i‡(
˝u
 >
NR_CPUS
)

57 
øã
 = 
	`˛k_gë_øã
(&
hi_˝u‰eq_devi˚
.
˛k
);

58  
øã
;

59 
	}
}

61 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3, 10, 0))

62 
	$hi_˝u‰eq_sˇÀ
(
devi˚
 *
dev
, 
èrgë_‰eq
,

63 
cur_‰eq
)

65 
	$hi_˝u‰eq_sˇÀ
(
devi˚
 *
dev
, 
˝u‰eq_pﬁicy
 *
pﬁicy
,

66 
èrgë_‰eq
, 
cur_‰eq
)

69 #i‚de‡
MODULE


70 
i
;

73 
ªt
;

74 
˝u‰eq_‰eqs
 
‰eqs
;

76 
‰eqs
.
√w
 = 
èrgë_‰eq
;

77 
‰eqs
.
ﬁd
 = 
	`˝u‰eq_gë•ìd
(0);

79 i‡((
‰eqs
.
ﬁd
 =‰eqs.
√w
Ë&& (
cur_‰eq
 == freqs.new))

84 
	`gë_⁄löe_˝us
();

87 
	`f‹_óch_⁄löe_˝u
(
‰eqs
.
˝u
)

88 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 10, 0))

89 
	`˝u‰eq_nŸify_å™sôi⁄
(&
‰eqs
, 
CPUFREQ_PRECHANGE
);

91 
	`˝u‰eq_nŸify_å™sôi⁄
(
pﬁicy
, &
‰eqs
, 
CPUFREQ_PRECHANGE
);

94 
ªt
 = 
	`hi_devi˚_sˇÀ
(
dev
, 
‰eqs
.
ﬁd
, fªqs.
√w
);

96 
‰eqs
.
√w
 = 
	`˝u‰eq_gë•ìd
(0);

100 #i‚de‡
MODULE


101 #ifde‡
CONFIG_SMP


107 
	`f‹_óch_possibÀ_˝u
(
i
)

109 
Õj_öfo
 *
Õj
 = &
	`≥r_˝u
(
Õj_ªf
, 
i
);

111 i‡(!
Õj
->
‰eq
)

113 
Õj
->
ªf
 = 
	`≥r_˝u
(
˝u_d©a
, 
i
).
lo›s_≥r_jiffy
;

114 
Õj
->
‰eq
 = 
‰eqs
.
ﬁd
;

117 
	`≥r_˝u
(
˝u_d©a
, 
i
).
lo›s_≥r_jiffy
 =

118 
	`˝u‰eq_sˇÀ
(
Õj
->
ªf
,Üpj->
‰eq
, 
‰eqs
.
√w
);

123 i‡(!
globÆ_Õj_ªf
.
‰eq
)

125 
globÆ_Õj_ªf
.
ªf
 = 
lo›s_≥r_jiffy
;

126 
globÆ_Õj_ªf
.
‰eq
 = 
‰eqs
.
ﬁd
;

129 
lo›s_≥r_jiffy
 = 
	`˝u‰eq_sˇÀ
(
globÆ_Õj_ªf
.
ªf
, globÆ_Õj_ªf.
‰eq
,

130 
‰eqs
.
√w
);

137 
	`f‹_óch_⁄löe_˝u
(
‰eqs
.
˝u
)

138 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 10, 0))

139 
	`˝u‰eq_nŸify_å™sôi⁄
(&
‰eqs
, 
CPUFREQ_POSTCHANGE
);

141 
	`˝u‰eq_nŸify_å™sôi⁄
(
pﬁicy
, &
‰eqs
, 
CPUFREQ_POSTCHANGE
);

144 
	`put_⁄löe_˝us
();

146  
ªt
;

147 
	}
}

149 
	$˝u‰eq_èrgë
(
˝u‰eq_pﬁicy
 *
pﬁicy
,

150 
èrgë_‰eq
, 
ªœti⁄
)

152 
˝u‰eq_‰equícy_èbÀ
 *
‰eq_èbÀ
;

153 
cuºít_èrgë_‰eq
;

154 
ödex
;

155 
ªt
 = 0;

156 if(
hi_˝u‰eq_devi˚
.
dvfs_í
 == 0)

158  -
EAGAIN
;

160 
‰eq_èbÀ
 = 
hi_˝u‰eq_devi˚
.freq_table;

161 i‡(!
‰eq_èbÀ
)

163 
	`¥ötk
("%s: cpu%d:Çÿ‰eqÅabÀ!\n", 
__func__
,

164 
pﬁicy
->
˝u
);

165  -
EINVAL
;

168 
ªt
 = 
	`˝u‰eq_‰equícy_èbÀ_èrgë
(
pﬁicy
, 
‰eq_èbÀ
, 
èrgë_‰eq
,

169 
ªœti⁄
, &
ödex
);

170 i‡(
ªt
)

172 
	`¥ötk
("%s: cpu%d:Ço freq match for %d(ret=%d)\n",

173 
__func__
, 
pﬁicy
->
˝u
, 
èrgë_‰eq
, 
ªt
);

174  
ªt
;

177 
	`muãx_lock
(&
hi_˝u‰eq_devi˚
.
‰eq_èbÀ_lock
);

179 
cuºít_èrgë_‰eq
 = 
‰eq_èbÀ
[
ödex
].
‰equícy
;

181 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 10, 0))

182 
ªt
 = 
	`hi_˝u‰eq_sˇÀ
(&
hi_˝u‰eq_devi˚
.
devi˚
.
dev
, 
cuºít_èrgë_‰eq
,

183 
pﬁicy
->
cur
);

185 
ªt
 = 
	`hi_˝u‰eq_sˇÀ
(&
hi_˝u‰eq_devi˚
.
devi˚
.
dev
, 
pﬁicy
,

186 
cuºít_èrgë_‰eq
, 
pﬁicy
->
cur
);

189 
	`muãx_u∆ock
(&
hi_˝u‰eq_devi˚
.
‰eq_èbÀ_lock
);

191  
ªt
;

192 
	}
}

194 
	$˝u‰eq_˝u_öô
(
˝u‰eq_pﬁicy
 *
pﬁicy
)

196 
ªsu…
 = 0;

198 i‡(
pﬁicy
->
˝u
 >
NR_CPUS
) {

199 
ªsu…
 = -
EINVAL
;

200 
Áû
;

203 
pﬁicy
->
cur
 =Öﬁicy->
mö
 =Öﬁicy->
max
 = 
	`˝u‰eq_gë•ìd
’ﬁicy->
˝u
);

205 
ªsu…
 = 
	`˝u‰eq_‰equícy_èbÀ_˝uöfo
(
pﬁicy
, 
hi_˝u‰eq_devi˚
.
‰eq_èbÀ
);

206 i‡(
ªsu…
)

207 
Áû
;

209 
	`˝u‰eq_‰equícy_èbÀ_gë_©å
(
hi_˝u‰eq_devi˚
.
‰eq_èbÀ
, 
pﬁicy
->
˝u
);

211 
pﬁicy
->
mö
 =Öﬁicy->
˝uöfo
.
mö_‰eq
;

212 
pﬁicy
->
max
 =Öﬁicy->
˝uöfo
.
max_‰eq
;

213 
pﬁicy
->
cur
 = 
	`˝u‰eq_gë•ìd
’ﬁicy->
˝u
);

223 #i‚de‡
MODULE


224 #ifde‡
CONFIG_SMP


225 i‡(
	`is_smp
())

227 
pﬁicy
->
sh¨ed_ty≥
 = 
CPUFREQ_SHARED_TYPE_ANY
;

228 
	`˝umask_£èŒ
(
pﬁicy
->
˝us
);

235 
pﬁicy
->
˝uöfo
.
å™sôi⁄_œãncy
 = 1000 * 1000;

238 
Áû
:

239  
ªsu…
;

240 
	}
}

242 
	$˝u‰eq_˝u_exô
(
˝u‰eq_pﬁicy
 *
pﬁicy
)

245 
	}
}

247 
‰eq_©å
 *
	g˝u‰eq_©å
[] = {

248 &
˝u‰eq_‰eq_©å_sˇlög_avaûabÀ_‰eqs
,

249 
NULL
,

252 
˝u‰eq_drivî
 
	g°Cpu‰eqDrivî
 = {

253 .
Êags
 = 
CPUFREQ_STICKY
,

254 .
	gvîify
 = 
˝u‰eq_vîify_•ìd
,

255 .
	gèrgë
 = 
˝u‰eq_èrgë
,

256 .
	ggë
 = 
˝u‰eq_gë•ìd
,

257 .
	göô
 = 
˝u‰eq_˝u_öô
,

258 .
	gexô
 = 
˝u‰eq_˝u_exô
,

259 .
	g«me
 = "cpufreq",

260 .
	g©å
 = 
˝u‰eq_©å
,

263 
__öô
 
	$˝u‰eq_öô
()

265 
	`˝u‰eq_íabÀ
();

266  
	`˝u‰eq_ªgi°î_drivî
(&
°Cpu‰eqDrivî
);

267 
	}
}

269 
	$˝u‰eq_exô
()

271 
	`˝u‰eq_dißbÀ
();

272 
	`˝u‰eq_uƒegi°î_drivî
(&
°Cpu‰eqDrivî
);

273 
	}
}

274 
	$˝u‰eq_dißbÀ
()

277 
	`muãx_lock
(&
hi_˝u‰eq_devi˚
.
dvfs_lock
);

278 
hi_˝u‰eq_devi˚
.
dvfs_í
 = 0;

279 
	`muãx_u∆ock
(&
hi_˝u‰eq_devi˚
.
dvfs_lock
);

280 
	}
}

282 
	$˝u‰eq_íabÀ
()

284 
	`muãx_lock
(&
hi_˝u‰eq_devi˚
.
dvfs_lock
);

285 
hi_˝u‰eq_devi˚
.
dvfs_í
 = 1;

286 
	`muãx_u∆ock
(&
hi_˝u‰eq_devi˚
.
dvfs_lock
);

287 
	}
}

	@component/pm/dvfs/hi_dvfs.c

14 
	~<löux/îr.h
>

15 
	~<löux/î∫o.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/∂i°.h
>

18 
	~<löux/¶ab.h
>

19 
	~"›p.h
"

21 
	~<löux/debugfs.h
>

22 
	~<löux/£q_fûe.h
>

23 
	~<löux/io.h
>

24 
	~<mach/∂©f‹m.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/dñay.h
>

27 
	~<mach/io.h
>

29 
	~<mach/˛ock.h
>

30 
	~<löux/kthªad.h
>

32 
	~"pm.h
"

33 
	~"hi_dvfs.h
"

42 
	shi_dvfs_öfo


44 
	mvﬁt
;

45 
	m√w_‰eq
;

46 
	mﬁd_‰eq
;

54 
	$_dvfs_sˇÀ
(
pm_devi˚
 *pm_devi˚, 
hi_dvfs_öfo
 *
tdvfs_öfo
)

56 
˛k
 *clk;

57 
ªt
;

59 
˛k
 = &
pm_devi˚
->clk;

61 i‡(
tdvfs_öfo
->
√w_‰eq
 =tdvfs_öfo->
ﬁd_‰eq
)

67 
pm_devi˚
->
avs_dev
.
avs_›s
.
	`p‚AvsPau£
(pm_device);

69 i‡(
tdvfs_öfo
->
√w_‰eq
 >Ådvfs_öfo->
ﬁd_‰eq
)

71 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
tdvfs_öfo
->
vﬁt
,

72 
tdvfs_öfo
->
vﬁt
);

73 i‡(
ªt
)

75 
	`¥ötk
("%s: scale voltÅo %ld falt\n",

76 
__func__
, 
tdvfs_öfo
->
vﬁt
);

77  
ªt
;

79 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

81 
ªt
 = 
	`˛k_£t_øã
(
˛k
, 
tdvfs_öfo
->
√w_‰eq
);

82 i‡(
ªt
)

84 
	`¥ötk
("%s: scale freqÅo %ld falt\n",

85 
__func__
, 
tdvfs_öfo
->
√w_‰eq
);

86  
ªt
;

88 
pm_devi˚
->
cur_øã
 = 
	`˛k_gë_øã
(
˛k
);

92 
ªt
 = 
	`˛k_£t_øã
(
˛k
, 
tdvfs_öfo
->
√w_‰eq
);

93 i‡(
ªt
)

95 
	`¥ötk
("%s: scale freqÅo %ld falt\n",

96 
__func__
, 
tdvfs_öfo
->
√w_‰eq
);

97  
ªt
;

99 
pm_devi˚
->
cur_øã
 = 
	`˛k_gë_øã
(
˛k
);

101 
ªt
 = 
	`ªguœt‹_£t_vﬁège
(
pm_devi˚
->
ªg
, 
tdvfs_öfo
->
vﬁt
,

102 
tdvfs_öfo
->
vﬁt
);

103 i‡(
ªt
)

105 
	`¥ötk
("%s: scale voltÅo %ld falt\n",

106 
__func__
, 
tdvfs_öfo
->
vﬁt
);

107  
ªt
;

109 
pm_devi˚
->
cur_vﬁt
 = 
	`ªguœt‹_gë_vﬁège
’m_devi˚->
ªg
);

112 
pm_devi˚
->
avs_dev
.
avs_›s
.
	`p‚AvsResume
(pm_device);

115  
ªt
;

116 
	}
}

132 
	$hi_devi˚_sˇÀ
(
devi˚
 *
èrgë_dev
, 
ﬁd_‰eq
,

133 
√w_‰eq
)

135 
›p
 *opp;

136 
vﬁt
, 
‰eq
 = 
√w_‰eq
;

137 
hi_dvfs_öfo
 
dvfs_öfo
;

138 
pm_devi˚
 *
devi˚
;

140 
ªt
 = 0;

141 
devi˚
 = 
	`to_pm_devi˚_ex
(
èrgë_dev
);

144 
	`muãx_lock
(&
devi˚
->
dvfs_lock
);

146 
	`rcu_ªad_lock
();

148 
›p
 = 
	`›p_föd_‰eq_˚û
(
èrgë_dev
, &
‰eq
);

151 i‡(
	`IS_ERR
(
›p
))

153 
›p
 = 
	`›p_föd_‰eq_Êo‹
(
èrgë_dev
, &
‰eq
);

156 i‡(
	`IS_ERR
(
›p
))

158 
	`rcu_ªad_u∆ock
();

159 
	`¥ötk
("%s: UnableÅo find OPP for freq%ld\n",

160 
__func__
, 
‰eq
);

161 
ªt
 = -
ENODEV
;

162 
out
;

165 
vﬁt
 = 
	`›p_gë_vﬁège
(
›p
);

167 
	`rcu_ªad_u∆ock
();

169 
dvfs_öfo
.
ﬁd_‰eq
 = old_freq;

171 
dvfs_öfo
.
√w_‰eq
 = 
‰eq
;

173 
dvfs_öfo
.
vﬁt
 = volt;

176 
ªt
 = 
	`_dvfs_sˇÀ
(
devi˚
, &
dvfs_öfo
);

178 i‡(
ªt
)

180 
	`¥ötk
("%s: scale failed %d[f=%ld, v=%ld]\n",

181 
__func__
, 
ªt
, 
‰eq
, 
vﬁt
);

187 
out
:

188 
	`muãx_u∆ock
(&
devi˚
->
dvfs_lock
);

189  
ªt
;

190 
	}
}

	@component/pm/include/avs_pm.h

19 #i‚de‡
__AVS_PM_H__


20 
	#__AVS_PM_H__


	)

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
avs_dev
;

29 
pm_devi˚
;

31 
	tp‚AvsPau£
(
	tpm_devi˚
 *);

32 
	tp‚AvsResume
(
	tpm_devi˚
 *);

34 
	savs_›s


36 
p‚AvsPau£
 *pfnAvsPause;

37 
p‚AvsResume
 *pfnAvsResume;

40 
	shiHPM_VF_S


42 
‰eq
;

43 
vmö
;

44 
hpmªc‹d
;

45 
div
;

46 } 
	tHPM_VF_S
;

48 
	savs_dev


50 
avs_íabÀ
;

52 
avs_›s
ávs_ops;

53 
èsk_°ru˘
 *
p°AvsThªad
;

54 
muãx
 
avs_lock
;

56 
cur_vﬁt_max
;

57 
cur_vﬁt_mö
;

59 
HPM_VF_S
 *
‰eq_hpm_èbÀ
;

60 
max_hpm_èÀ_ödex
;

63 
cur_‰eq
;

64 
cur_hpm
;

65 
hpm_u∂imô
;

66 
hpm_dow∆imô
;

67 
low_≥riod
;

68 
high_≥riod
;

69 
div
;

70 
shi·
;

71 
off£t
;

74 
hpm_fsm_mode
;

75 
hpm_pwm_öc_°ï
;

76 
hpm_pwm_dec_°ï
;

79 
ts_¸azy_mode
;

80 
ts_¸azy_∑th_dly
;

81 
ts_code_°ï
;

84 
ts_avs_mode
;

85 
ts_avs_≥riod
;

88 #ifde‡
__˝lu•lus


89 #i‡
__˝lu•lus


	@component/pm/include/hi_clock.h

19 #i‚de‡
__HI_CLOCK_H__


20 
	#__HI_CLOCK_H__


	)

22 
	~"pm.h
"

	@component/pm/include/hi_cpufreq.h

19 #i‚de‡
__HI_CPUFREQ_H__


20 
	#__HI_CPUFREQ_H__


	)

22 
˝u‰eq_öô
();

23 
˝u‰eq_exô
();

	@component/pm/include/hi_dvfs.h

14 #i‚de‡
__HI_DVFS_H


15 
	#__HI_DVFS_H


	)

17 
hi_devi˚_sˇÀ
(
devi˚
 *
èrgë_dev
,
ﬁd_‰eq
,
√w_‰eq
);

18 
˝u‰eq_dißbÀ
();

19 
˝u‰eq_íabÀ
();

	@component/pm/include/hi_opp_data.h

5 #i‚de‡
__HI_OPP_DATA_H__


6 
	#__HI_OPP_DATA_H__


	)

8 
	~<löux/˝u‰eq.h
>

10 
	shi_›p_def


12 
	m‰eq
;

13 
	mu_vﬁt
;

15 
boﬁ
 
	mdeÁu…_avaûabÀ
;

21 
	#OPP_INITIALIZER
(
_íabÀd
, 
_‰eq
, 
_uv
) \

23 .
deÁu…_avaûabÀ
 = 
_íabÀd
, \

24 .
‰eq
 = 
_‰eq
, \

25 .
u_vﬁt
 = 
_uv
, \

26 }

	)

28 
PM_FªqèbÀInô
(
devi˚
 *
dev
,

29 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
);

30 
PM_FªqèbÀExô
(
devi˚
 *
dev
,

31 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
);

33 
PM_OµInôTabÀ
(
devi˚
 *devi˚, 
hi_›p_def
 *
›p_def
,

34 
›p_def_size
);

	@component/pm/include/opp.h

14 #i‚de‡
__LINUX_OPP_H__


15 
	#__LINUX_OPP_H__


	)

17 
	~<löux/îr.h
>

18 
	~<löux/˝u‰eq.h
>

19 
	~<löux/nŸifõr.h
>

21 
	g›p
;

22 
	gdevi˚
;

24 
	e›p_evít
 {

25 
	mOPP_EVENT_ADD
, 
	mOPP_EVENT_ENABLE
, 
	mOPP_EVENT_DISABLE
,

29 
›p_gë_vﬁège
(
›p
 *opp);

31 
›p_gë_‰eq
(
›p
 *opp);

33 
›p_gë_›p_cou¡
(
devi˚
 *
dev
);

35 
›p
 *
›p_föd_‰eq_exa˘
(
devi˚
 *
dev
, 
‰eq
,

36 
boﬁ
 
avaûabÀ
);

38 
›p
 *
›p_föd_‰eq_Êo‹
(
devi˚
 *
dev
, *
‰eq
);

40 
›p
 *
›p_föd_‰eq_˚û
(
devi˚
 *
dev
, *
‰eq
);

42 
›p_add
(
devi˚
 *
dev
, 
‰eq
, 
u_vﬁt
);

44 
›p_íabÀ
(
devi˚
 *
dev
, 
‰eq
);

46 
›p_dißbÀ
(
devi˚
 *
dev
, 
‰eq
);

48 
§cu_nŸifõr_hód
 *
›p_gë_nŸifõr
(
devi˚
 *
dev
);

50 
›p_öô_˝u‰eq_èbÀ
(
devi˚
 *
dev
,

51 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
);

52 
›p_‰ì_˝u‰eq_èbÀ
(
devi˚
 *
dev
,

53 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
);

	@component/pm/include/pm.h

19 #i‚de‡ 
__PM_H__


20 
	#__PM_H__


	)

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	~<löux/∂©f‹m_devi˚.h
>

29 
	~<löux/of_devi˚.h
>

30 
	~<löux/˛k.h
>

31 
	~<mach/io.h
>

32 
	~<mach/˛ock.h
>

34 
	~"hi_›p_d©a.h
"

35 
	~"hi_˛ock.h
"

36 
	~"ªguœt‹.h
"

37 
	~"avs_pm.h
"

39 
	#PM_CPU
 (0x01L<<0)

	)

40 
	#PM_MEDIA
 (0x01L<<0)

	)

42 
	#PM_R1
 127

43 
	#PM_R2
 127

44 
	#PM_R3
 806

45 
	#PM_R4
 5

46 
	#PM_R5
 10

47 
	#PM_VREF
 608

48 

	)

49 
	sPM_DC_DC_ATTR_S


51 
Vªf
;

52 
R1
;

53 
R2
;

54 
R3
;

55 
R4
;

56 
PwmFªqN
;

57 
Vout_ba£
;

58 
VﬁtC⁄fig
;

59 
Rc⁄fig
;

62 
	sPM_PMU_ATTR_S


64 
mö_vﬁt
;

65 
°ï
;

71 
	#PM_TRACE
(
Àvñ
, 
fmt
...)\

	)

73 
HI_TRACE
(
Àvñ
, 
HI_ID_PM
, "[Func]:%†[Löe]:%d [Info]:", 
__FUNCTION__
, 
__LINE__
);\

74 
HI_TRACE
(
Àvñ
, 
HI_ID_PM
, ##
fmt
);\

77 
pm_devi˚
;

79 
	tp‚OµTabÀInô
(
	tpm_devi˚
 *, *);

80 
	tp‚OµTabÀExô
(
	tpm_devi˚
 *, *);

81 
	tp‚Reguœt‹Inô
(
	tpm_devi˚
 *, *);

82 
	tp‚Reguœt‹Exô
(
	tpm_devi˚
 *, *);

83 
	tp‚ClockInô
(
	t˛k
 *, *);

84 
	tp‚ClockExô
(
	t˛k
 *, *);

85 
	tp‚AvsInô
(
	tpm_devi˚
 *, *);

86 
	tp‚AvsExô
(
	tpm_devi˚
 *, *);

94 
	spm_devi˚


96 
∂©f‹m_devi˚
 
devi˚
;

99 
˝u‰eq_‰equícy_èbÀ
 *
‰eq_èbÀ
;

100 
muãx
 
‰eq_èbÀ_lock
;

102 
hi_›p_def
 *
›p_èbÀ
;

103 
p‚OµTabÀInô
 *pfnOppTableInit;

104 
p‚OµTabÀExô
 *pfnOppTableExit;

105 
mö_øã
;

106 
max_øã
;

109 
˛k
 clk;

110 
p‚ClockInô
 *pfnClockInit;

111 
p‚ClockExô
 *pfnClockExit;

112 
cur_øã
;

115 
ªguœt‹
 *
ªg
;

116 
p‚Reguœt‹Inô
 *pfnRegulatorInit;

117 
p‚Reguœt‹Exô
 *pfnRegulatorExit;

118 
cur_vﬁt
;

121 
muãx
 
dvfs_lock
;

122 
dvfs_í
;

125 
p‚AvsInô
 *pfnAvsInit;

126 
p‚AvsExô
 *pfnAvsExit;

127 
avs_dev
ávs_dev;

130 
	#to_pm_devi˚
(
x
Ë
	`c⁄èöî_of
((x), 
pm_devi˚
, 
devi˚
)

	)

131 
	#to_pm_devi˚_ex
(
x
Ë
	`to_pm_devi˚
(
	`to_∂©f‹m_devi˚
(x))

	)

132 
	#˛k_to_pm_devi˚
(
x
Ë
	`c⁄èöî_of
((x), 
pm_devi˚
, 
˛k
)

	)

134 
pm_devi˚_öô
(
pm_devi˚
 *pm_device);

135 
pm_devi˚_exô
(
pm_devi˚
 *pm_device);

140 #ifde‡
__˝lu•lus


141 #i‡
__˝lu•lus


	@component/pm/include/pmc.h

12 #i‚de‡
__PMC_H__


13 
	#__PMC_H__


	)

21 
	mc‹e_pwm_≥riod
 : 16 ;

22 
	mc‹e_pwm_duty
 : 16 ;

23 } 
	mbôs
;

26 
	mu32
;

28 } 
	tU_PERI_PMC0
;

36 
	m˝u_pwm_≥riod
 : 16 ;

37 
	m˝u_pwm_duty
 : 16 ;

38 } 
	mbôs
;

41 
	mu32
;

43 } 
	tU_PERI_PMC1
;

51 
	mddr_pwm_≥riod
 : 16 ;

52 
	mddr_pwm_duty
 : 16 ;

53 } 
	mbôs
;

56 
	mu32
;

58 } 
	tU_PERI_PMC2
;

66 
	mmda_pwm_≥riod
 : 16 ;

67 
	mmda_pwm_duty
 : 16 ;

68 } 
	mbôs
;

71 
	mu32
;

73 } 
	tU_PERI_PMC3
;

81 
	mc‹e_pwm_íabÀ
 : 1 ;

82 
	mc‹e_pwm_öv
 : 1 ;

83 
	m˝u_pwm_íabÀ
 : 1 ;

84 
	m˝u_pwm_öv
 : 1 ;

85 
	mddr_pwm_íabÀ
 : 1 ;

86 
	mddr_pwm_öv
 : 1 ;

87 
	mmda_pwm_íabÀ
 : 1 ;

88 
	mmda_pwm_öv
 : 1 ;

89 
	mpwm0_ªu£_cfg
 : 2 ;

90 
	mpwm1_ªu£_cfg
 : 2 ;

91 
	mpwm2_ªu£_cfg
 : 2 ;

92 
	mpwm3_ªu£_cfg
 : 2 ;

93 
	mª£rved_0
 : 16 ;

94 } 
	mbôs
;

97 
	mu32
;

99 } 
	tU_PERI_PMC4
;

107 
	mc‹e_hpm_fsm_í
 : 1 ;

108 
	mc‹e_avs_hpm_fsm_ˇlc_mode
 : 2 ;

109 
	mª£rved_0
 : 13 ;

110 
	mc‹e_avs_fsm_dec_pwm_°ï
 : 8 ;

111 
	mc‹e_avs_fsm_öc_pwm_°ï
 : 8 ;

112 } 
	mbôs
;

115 
	mu32
;

117 } 
	tU_PERI_PMC5
;

125 
	m˝u_hpm_fsm_í
 : 1 ;

126 
	m˝u_avs_hpm_fsm_ˇlc_mode
 : 2 ;

127 
	mª£rved_0
 : 13 ;

128 
	m˝u_avs_fsm_dec_pwm_°ï
 : 8 ;

129 
	m˝u_avs_fsm_öc_pwm_°ï
 : 8 ;

130 } 
	mbôs
;

133 
	mu32
;

135 } 
	tU_PERI_PMC6
;

143 
	mddr_hpm_fsm_í
 : 1 ;

144 
	mddr_avs_hpm_fsm_ˇlc_mode
 : 2 ;

145 
	mª£rved_0
 : 13 ;

146 
	mddr_avs_fsm_dec_pwm_°ï
 : 8 ;

147 
	mddr_avs_fsm_öc_pwm_°ï
 : 8 ;

148 } 
	mbôs
;

151 
	mu32
;

153 } 
	tU_PERI_PMC7
;

161 
	mmda_hpm_fsm_í
 : 1 ;

162 
	mmda_avs_hpm_fsm_ˇlc_mode
 : 2 ;

163 
	mª£rved_0
 : 13 ;

164 
	mmda_avs_fsm_dec_pwm_°ï
 : 8 ;

165 
	mmda_avs_fsm_öc_pwm_°ï
 : 8 ;

166 } 
	mbôs
;

169 
	mu32
;

171 } 
	tU_PERI_PMC8
;

179 
	mc‹e_avs_°©e_machöe
 : 3 ;

180 
	mª£rved_0
 : 1 ;

181 
	m˝u_avs_°©e_machöe
 : 3 ;

182 
	mª£rved_1
 : 1 ;

183 
	mddr_avs_°©e_machöe
 : 3 ;

184 
	mª£rved_2
 : 1 ;

185 
	mmda_avs_°©e_machöe
 : 3 ;

186 
	mª£rved_3
 : 17 ;

187 } 
	mbôs
;

190 
	mu32
;

192 } 
	tU_PERI_PMC9
;

200 
	mc‹e_hpm_div
 : 6 ;

201 
	mª£rved_0
 : 2 ;

202 
	mc‹e_hpm_shi·
 : 2 ;

203 
	mª£rved_1
 : 2 ;

204 
	mc‹e_hpm_off£t
 : 10 ;

205 
	mª£rved_2
 : 2 ;

206 
	mc‹e_hpm_í
 : 1 ;

207 
	mc‹e_hpm_by∑ss
 : 1 ;

208 
	mc‹e_hpm_m⁄ô‹_í
 : 1 ;

209 
	mc‹e_hpm_§°_ªq
 : 1 ;

210 
	mª£rved_3
 : 4 ;

211 } 
	mbôs
;

214 
	mu32
;

216 } 
	tU_PERI_PMC10
;

224 
	mc‹e_hpm_pc_ªc‹d0
 : 10 ;

225 
	mc‹e_hpm_pc_vÆid
 : 1 ;

226 
	mª£rved_0
 : 1 ;

227 
	mc‹e_hpm_pc_ªc‹d1
 : 10 ;

228 
	mª£rved_1
 : 2 ;

229 
	mc‹e_hpm_low_w¨nög
 : 1 ;

230 
	mc‹e_hpm_up_w¨nög
 : 1 ;

231 
	mª£rved_2
 : 6 ;

232 } 
	mbôs
;

235 
	mu32
;

237 } 
	tU_PERI_PMC11
;

245 
	mc‹e_hpm_pc_ªc‹d2
 : 10 ;

246 
	mª£rved_0
 : 2 ;

247 
	mc‹e_hpm_pc_ªc‹d3
 : 10 ;

248 
	mª£rved_1
 : 2 ;

249 
	mc‹e_hpm_rcc
 : 5 ;

250 
	mª£rved_2
 : 3 ;

251 } 
	mbôs
;

254 
	mu32
;

256 } 
	tU_PERI_PMC12
;

264 
	mc‹e_hpm_u∂imô
 : 10 ;

265 
	mª£rved_0
 : 2 ;

266 
	mc‹e_hpm_lowlimô
 : 10 ;

267 
	mª£rved_1
 : 2 ;

268 
	mc‹e_hpm_m⁄ô‹_≥riod
 : 8 ;

269 } 
	mbôs
;

272 
	mu32
;

274 } 
	tU_PERI_PMC13
;

282 
	m˝u_hpm_div
 : 6 ;

283 
	mª£rved_0
 : 2 ;

284 
	m˝u_hpm_shi·
 : 2 ;

285 
	mª£rved_1
 : 2 ;

286 
	m˝u_hpm_off£t
 : 10 ;

287 
	mª£rved_2
 : 2 ;

288 
	m˝u_hpm_í
 : 1 ;

289 
	m˝u_hpm_by∑ss
 : 1 ;

290 
	m˝u_hpm_m⁄ô‹_í
 : 1 ;

291 
	m˝u_hpm_§°_ªq
 : 1 ;

292 
	mª£rved_3
 : 4 ;

293 } 
	mbôs
;

296 
	mu32
;

298 } 
	tU_PERI_PMC14
;

306 
	m˝u_hpm_pc_ªc‹d0
 : 10 ;

307 
	m˝u_hpm_pc_vÆid
 : 1 ;

308 
	mª£rved_0
 : 1 ;

309 
	m˝u_hpm_pc_ªc‹d1
 : 10 ;

310 
	mª£rved_1
 : 2 ;

311 
	m˝u_hpm_low_w¨nög
 : 1 ;

312 
	m˝u_hpm_up_w¨nög
 : 1 ;

313 
	mª£rved_2
 : 6 ;

314 } 
	mbôs
;

317 
	mu32
;

319 } 
	tU_PERI_PMC15
;

327 
	m˝u_hpm_pc_ªc‹d2
 : 10 ;

328 
	mª£rved_0
 : 2 ;

329 
	m˝u_hpm_pc_ªc‹d3
 : 10 ;

330 
	mª£rved_1
 : 2 ;

331 
	m˝u_hpm_rcc
 : 5 ;

332 
	mª£rved_2
 : 3 ;

333 } 
	mbôs
;

336 
	mu32
;

338 } 
	tU_PERI_PMC16
;

346 
	m˝u_hpm_u∂imô
 : 10 ;

347 
	mª£rved_0
 : 2 ;

348 
	m˝u_hpm_lowlimô
 : 10 ;

349 
	mª£rved_1
 : 2 ;

350 
	m˝u_hpm_m⁄ô‹_≥riod
 : 8 ;

351 } 
	mbôs
;

354 
	mu32
;

356 } 
	tU_PERI_PMC17
;

364 
	mddr_hpm_div
 : 6 ;

365 
	mª£rved_0
 : 2 ;

366 
	mddr_hpm_shi·
 : 2 ;

367 
	mª£rved_1
 : 2 ;

368 
	mddr_hpm_off£t
 : 10 ;

369 
	mª£rved_2
 : 2 ;

370 
	mddr_hpm_í
 : 1 ;

371 
	mddr_hpm_by∑ss
 : 1 ;

372 
	mddr_hpm_m⁄ô‹_í
 : 1 ;

373 
	mddr_hpm_§°_ªq
 : 1 ;

374 
	mª£rved_3
 : 4 ;

375 } 
	mbôs
;

378 
	mu32
;

380 } 
	tU_PERI_PMC18
;

388 
	mddr_hpm_pc_ªc‹d0
 : 10 ;

389 
	mddr_hpm_pc_vÆid
 : 1 ;

390 
	mª£rved_0
 : 1 ;

391 
	mddr_hpm_pc_ªc‹d1
 : 10 ;

392 
	mª£rved_1
 : 2 ;

393 
	mddr_hpm_low_w¨nög
 : 1 ;

394 
	mddr_hpm_up_w¨nög
 : 1 ;

395 
	mª£rved_2
 : 6 ;

396 } 
	mbôs
;

399 
	mu32
;

401 } 
	tU_PERI_PMC19
;

409 
	mddr_hpm_pc_ªc‹d2
 : 10 ;

410 
	mª£rved_0
 : 2 ;

411 
	mddr_hpm_pc_ªc‹d3
 : 10 ;

412 
	mª£rved_1
 : 2 ;

413 
	mddr_hpm_rcc
 : 5 ;

414 
	mª£rved_2
 : 3 ;

415 } 
	mbôs
;

418 
	mu32
;

420 } 
	tU_PERI_PMC20
;

428 
	mddr_hpm_u∂imô
 : 10 ;

429 
	mª£rved_0
 : 2 ;

430 
	mddr_hpm_lowlimô
 : 10 ;

431 
	mª£rved_1
 : 2 ;

432 
	mddr_hpm_m⁄ô‹_≥riod
 : 8 ;

433 } 
	mbôs
;

436 
	mu32
;

438 } 
	tU_PERI_PMC21
;

446 
	mmda_t›_hpm_div
 : 6 ;

447 
	mª£rved_0
 : 2 ;

448 
	mmda_t›_hpm_shi·
 : 2 ;

449 
	mª£rved_1
 : 2 ;

450 
	mmda_t›_hpm_off£t
 : 10 ;

451 
	mª£rved_2
 : 2 ;

452 
	mmda_t›_hpm_í
 : 1 ;

453 
	mmda_t›_hpm_by∑ss
 : 1 ;

454 
	mmda_t›_hpm_m⁄ô‹_í
 : 1 ;

455 
	mmda_t›_hpm_§°_ªq
 : 1 ;

456 
	mª£rved_3
 : 4 ;

457 } 
	mbôs
;

460 
	mu32
;

462 } 
	tU_PERI_PMC22
;

470 
	mmda_t›_hpm_pc_ªc‹d0
 : 10 ;

471 
	mmda_t›_hpm_pc_vÆid
 : 1 ;

472 
	mª£rved_0
 : 1 ;

473 
	mmda_t›_hpm_pc_ªc‹d1
 : 10 ;

474 
	mª£rved_1
 : 2 ;

475 
	mmda_t›_hpm_low_w¨nög
 : 1 ;

476 
	mmda_t›_hpm_up_w¨nög
 : 1 ;

477 
	mª£rved_2
 : 6 ;

478 } 
	mbôs
;

481 
	mu32
;

483 } 
	tU_PERI_PMC23
;

491 
	mmda_t›_hpm_pc_ªc‹d2
 : 10 ;

492 
	mª£rved_0
 : 2 ;

493 
	mmda_t›_hpm_pc_ªc‹d3
 : 10 ;

494 
	mª£rved_1
 : 2 ;

495 
	mmda_t›_hpm_rcc
 : 5 ;

496 
	mª£rved_2
 : 3 ;

497 } 
	mbôs
;

500 
	mu32
;

502 } 
	tU_PERI_PMC24
;

510 
	mmda_t›_hpm_u∂imô
 : 10 ;

511 
	mª£rved_0
 : 2 ;

512 
	mmda_t›_hpm_lowlimô
 : 10 ;

513 
	mª£rved_1
 : 2 ;

514 
	mmda_t›_hpm_m⁄ô‹_≥riod
 : 8 ;

515 } 
	mbôs
;

518 
	mu32
;

520 } 
	tU_PERI_PMC25
;

528 
	mvedu_hpm_div
 : 6 ;

529 
	mª£rved_0
 : 2 ;

530 
	mvedu_hpm_shi·
 : 2 ;

531 
	mª£rved_1
 : 2 ;

532 
	mvedu_hpm_off£t
 : 10 ;

533 
	mª£rved_2
 : 2 ;

534 
	mvedu_hpm_í
 : 1 ;

535 
	mvedu_hpm_by∑ss
 : 1 ;

536 
	mvedu_hpm_m⁄ô‹_í
 : 1 ;

537 
	mvedu_hpm_§°_ªq
 : 1 ;

538 
	mª£rved_3
 : 4 ;

539 } 
	mbôs
;

542 
	mu32
;

544 } 
	tU_PERI_PMC26
;

552 
	mvedu_hpm_pc_ªc‹d0
 : 10 ;

553 
	mvedu_hpm_pc_vÆid
 : 1 ;

554 
	mª£rved_0
 : 1 ;

555 
	mvedu_hpm_pc_ªc‹d1
 : 10 ;

556 
	mª£rved_1
 : 2 ;

557 
	mvedu_hpm_low_w¨nög
 : 1 ;

558 
	mvedu_hpm_up_w¨nög
 : 1 ;

559 
	mª£rved_2
 : 6 ;

560 } 
	mbôs
;

563 
	mu32
;

565 } 
	tU_PERI_PMC27
;

573 
	mvedu_hpm_pc_ªc‹d2
 : 10 ;

574 
	mª£rved_0
 : 2 ;

575 
	mvedu_hpm_pc_ªc‹d3
 : 10 ;

576 
	mª£rved_1
 : 2 ;

577 
	mvedu_hpm_rcc
 : 5 ;

578 
	mª£rved_2
 : 3 ;

579 } 
	mbôs
;

582 
	mu32
;

584 } 
	tU_PERI_PMC28
;

592 
	mvedu_hpm_u∂imô
 : 10 ;

593 
	mª£rved_0
 : 2 ;

594 
	mvedu_hpm_lowlimô
 : 10 ;

595 
	mª£rved_1
 : 2 ;

596 
	mvedu_hpm_m⁄ô‹_≥riod
 : 8 ;

597 } 
	mbôs
;

600 
	mu32
;

602 } 
	tU_PERI_PMC29
;

610 
	mvedu_hpm_m⁄ô‹_≥riod
 : 8 ;

611 
	mmda_t›_hpm_m⁄ô‹_≥riod
 : 8 ;

612 
	mddr_hpm_m⁄ô‹_≥riod
 : 8 ;

613 
	m˝u_hpm_m⁄ô‹_≥riod
 : 8 ;

614 } 
	mbôs
;

617 
	mu32
;

619 } 
	tU_PERI_PMC30
;

627 
	mc‹e_hpm_m⁄ô‹_≥riod
 : 8 ;

628 
	mª£rved_0
 : 24 ;

629 } 
	mbôs
;

632 
	mu32
;

634 } 
	tU_PERI_PMC31
;

642 
	m˝u_ts_£l
 : 1 ;

643 
	m˝u_ts_dly_adju°
 : 4 ;

644 
	m˝u_ts_°ï
 : 2 ;

645 
	mª£rved_0
 : 1 ;

646 
	m˝u_ts_í
 : 1 ;

647 
	mª£rved_1
 : 3 ;

648 
	mª£rved_2
 : 20 ;

649 } 
	mbôs
;

652 
	mu32
;

654 } 
	tU_PERI_PMC32
;

662 
	mddr_ts_£l
 : 1 ;

663 
	mddr_ts_dly_adju°
 : 4 ;

664 
	mddr_ts_°ï
 : 2 ;

665 
	mª£rved_0
 : 1 ;

666 
	mddr_ts_í
 : 1 ;

667 
	mª£rved_1
 : 3 ;

668 
	mª£rved_2
 : 20 ;

669 } 
	mbôs
;

672 
	mu32
;

674 } 
	tU_PERI_PMC33
;

682 
	mc‹e_ts_£l
 : 1 ;

683 
	mc‹e_ts_dly_adju°
 : 4 ;

684 
	mc‹e_ts_°ï
 : 2 ;

685 
	mª£rved_0
 : 1 ;

686 
	mc‹e_ts_í
 : 1 ;

687 
	mª£rved_1
 : 3 ;

688 
	mª£rved_2
 : 20 ;

689 } 
	mbôs
;

692 
	mu32
;

694 } 
	tU_PERI_PMC34
;

702 
	mmda_t›_ts_£l
 : 1 ;

703 
	mmda_t›_ts_dly_adju°
 : 4 ;

704 
	mmda_t›_ts_°ï
 : 2 ;

705 
	mª£rved_0
 : 1 ;

706 
	mmda_t›_ts_í
 : 1 ;

707 
	mª£rved_1
 : 3 ;

708 
	mª£rved_2
 : 20 ;

709 } 
	mbôs
;

712 
	mu32
;

714 } 
	tU_PERI_PMC35
;

722 
	mvedu_ts_£l
 : 1 ;

723 
	mvedu_ts_dly_adju°
 : 4 ;

724 
	mvedu_ts_°ï
 : 2 ;

725 
	mª£rved_0
 : 1 ;

726 
	mvedu_ts_í
 : 1 ;

727 
	mª£rved_1
 : 3 ;

728 
	mª£rved_2
 : 20 ;

729 } 
	mbôs
;

732 
	mu32
;

734 } 
	tU_PERI_PMC36
;

742 
	m˝u_ts_°©
 : 11 ;

743 
	mª£rved_0
 : 5 ;

744 
	m˝u_ts_ªc‹d1
 : 11 ;

745 
	mª£rved_1
 : 5 ;

746 } 
	mbôs
;

749 
	mu32
;

751 } 
	tU_PERI_PMC37
;

759 
	m˝u_ts_ªc‹d2
 : 11 ;

760 
	mª£rved_0
 : 5 ;

761 
	m˝u_ts_ªc‹d3
 : 11 ;

762 
	mª£rved_1
 : 5 ;

763 } 
	mbôs
;

766 
	mu32
;

768 } 
	tU_PERI_PMC38
;

776 
	m˝u_ts_ªc‹d4
 : 11 ;

777 
	mª£rved_0
 : 5 ;

778 
	m˝u_ts_ªc‹d5
 : 11 ;

779 
	mª£rved_1
 : 5 ;

780 } 
	mbôs
;

783 
	mu32
;

785 } 
	tU_PERI_PMC39
;

793 
	m˝u_ts_ªc‹d6
 : 11 ;

794 
	mª£rved_0
 : 5 ;

795 
	m˝u_ts_ªc‹d7
 : 11 ;

796 
	mª£rved_1
 : 5 ;

797 } 
	mbôs
;

800 
	mu32
;

802 } 
	tU_PERI_PMC40
;

810 
	mddr_ts_°©
 : 11 ;

811 
	mª£rved_0
 : 5 ;

812 
	mddr_ts_ªc‹d1
 : 11 ;

813 
	mª£rved_1
 : 5 ;

814 } 
	mbôs
;

817 
	mu32
;

819 } 
	tU_PERI_PMC41
;

827 
	mddr_ts_ªc‹d2
 : 11 ;

828 
	mª£rved_0
 : 5 ;

829 
	mddr_ts_ªc‹d3
 : 11 ;

830 
	mª£rved_1
 : 5 ;

831 } 
	mbôs
;

834 
	mu32
;

836 } 
	tU_PERI_PMC42
;

844 
	mddr_ts_ªc‹d4
 : 11 ;

845 
	mª£rved_0
 : 5 ;

846 
	mddr_ts_ªc‹d5
 : 11 ;

847 
	mª£rved_1
 : 5 ;

848 } 
	mbôs
;

851 
	mu32
;

853 } 
	tU_PERI_PMC43
;

861 
	mddr_ts_ªc‹d6
 : 11 ;

862 
	mª£rved_0
 : 5 ;

863 
	mddr_ts_ªc‹d7
 : 11 ;

864 
	mª£rved_1
 : 5 ;

865 } 
	mbôs
;

868 
	mu32
;

870 } 
	tU_PERI_PMC44
;

878 
	mc‹e_ts_°©
 : 11 ;

879 
	mª£rved_0
 : 5 ;

880 
	mc‹e_ts_ªc‹d1
 : 11 ;

881 
	mª£rved_1
 : 5 ;

882 } 
	mbôs
;

885 
	mu32
;

887 } 
	tU_PERI_PMC45
;

895 
	mc‹e_ts_ªc‹d2
 : 11 ;

896 
	mª£rved_0
 : 5 ;

897 
	mc‹e_ts_ªc‹d3
 : 11 ;

898 
	mª£rved_1
 : 5 ;

899 } 
	mbôs
;

902 
	mu32
;

904 } 
	tU_PERI_PMC46
;

912 
	mc‹e_ts_ªc‹d4
 : 11 ;

913 
	mª£rved_0
 : 5 ;

914 
	mc‹e_ts_ªc‹d5
 : 11 ;

915 
	mª£rved_1
 : 5 ;

916 } 
	mbôs
;

919 
	mu32
;

921 } 
	tU_PERI_PMC47
;

929 
	mc‹e_ts_ªc‹d6
 : 11 ;

930 
	mª£rved_0
 : 5 ;

931 
	mc‹e_ts_ªc‹d7
 : 11 ;

932 
	mª£rved_1
 : 5 ;

933 } 
	mbôs
;

936 
	mu32
;

938 } 
	tU_PERI_PMC48
;

946 
	mmda_t›_ts_°©
 : 11 ;

947 
	mª£rved_0
 : 5 ;

948 
	mmda_t›_ts_ªc‹d1
 : 11 ;

949 
	mª£rved_1
 : 5 ;

950 } 
	mbôs
;

953 
	mu32
;

955 } 
	tU_PERI_PMC49
;

963 
	mmda_t›_ts_ªc‹d2
 : 11 ;

964 
	mª£rved_0
 : 5 ;

965 
	mmda_t›_ts_ªc‹d3
 : 11 ;

966 
	mª£rved_1
 : 5 ;

967 } 
	mbôs
;

970 
	mu32
;

972 } 
	tU_PERI_PMC50
;

980 
	mmda_t›_ts_ªc‹d4
 : 11 ;

981 
	mª£rved_0
 : 5 ;

982 
	mmda_t›_ts_ªc‹d5
 : 11 ;

983 
	mª£rved_1
 : 5 ;

984 } 
	mbôs
;

987 
	mu32
;

989 } 
	tU_PERI_PMC51
;

997 
	mmda_t›_ts_ªc‹d6
 : 11 ;

998 
	mª£rved_0
 : 5 ;

999 
	mmda_t›_ts_ªc‹d7
 : 11 ;

1000 
	mª£rved_1
 : 5 ;

1001 } 
	mbôs
;

1004 
	mu32
;

1006 } 
	tU_PERI_PMC52
;

1014 
	mvedu_ts_°©
 : 11 ;

1015 
	mª£rved_0
 : 5 ;

1016 
	mvedu_ts_ªc‹d1
 : 11 ;

1017 
	mª£rved_1
 : 5 ;

1018 } 
	mbôs
;

1021 
	mu32
;

1023 } 
	tU_PERI_PMC53
;

1031 
	mvedu_ts_ªc‹d2
 : 11 ;

1032 
	mª£rved_0
 : 5 ;

1033 
	mvedu_ts_ªc‹d3
 : 11 ;

1034 
	mª£rved_1
 : 5 ;

1035 } 
	mbôs
;

1038 
	mu32
;

1040 } 
	tU_PERI_PMC54
;

1048 
	mvedu_ts_ªc‹d4
 : 11 ;

1049 
	mª£rved_0
 : 5 ;

1050 
	mvedu_ts_ªc‹d5
 : 11 ;

1051 
	mª£rved_1
 : 5 ;

1052 } 
	mbôs
;

1055 
	mu32
;

1057 } 
	tU_PERI_PMC55
;

1065 
	mvedu_ts_ªc‹d6
 : 11 ;

1066 
	mª£rved_0
 : 5 ;

1067 
	mvedu_ts_ªc‹d7
 : 11 ;

1068 
	mª£rved_1
 : 5 ;

1069 } 
	mbôs
;

1072 
	mu32
;

1074 } 
	tU_PERI_PMC56
;

1082 
	mª£rved_0
 : 32 ;

1083 } 
	mbôs
;

1086 
	mu32
;

1088 } 
	tU_PERI_PMC57
;

1095 
	mpmu_addr
 : 7 ;

1096 
	mª£rved_0
 : 1 ;

1097 
	mpmu_ªg_rd_Æl
 : 1 ;

1098 
	mª£rved_1
 : 3 ;

1099 
	mpmu_ªg0_wt_ªq
 : 1 ;

1100 
	mpmu_ªg1_wt_ªq
 : 1 ;

1101 
	mpmu_ªg2_wt_ªq
 : 1 ;

1102 
	mpmu_ªg3_wt_ªq
 : 1 ;

1103 
	mpmu_ªg4_wt_ªq
 : 1 ;

1104 
	mpmu_ªg5_wt_ªq
 : 1 ;

1105 
	mpmu_ªg6_wt_ªq
 : 1 ;

1106 
	mpmu_ªg7_wt_ªq
 : 1 ;

1107 
	mª£rved_2
 : 10 ;

1108 
	mi2c_öt_˛ór
 : 1 ;

1109 
	mpmc_i2c_íabÀ
 : 1 ;

1110 } 
	mbôs
;

1113 
	mu32
;

1115 } 
	tU_PERI_PMC58
;

1123 
	mpmu_ªg0
 : 8 ;

1124 
	mpmu_ªg1
 : 8 ;

1125 
	mpmu_ªg2
 : 8 ;

1126 
	mpmu_ªg3
 : 8 ;

1127 } 
	mbôs
;

1130 
	mu32
;

1132 } 
	tU_PERI_PMC59
;

1140 
	mpmu_ªg4
 : 8 ;

1141 
	mpmu_ªg5
 : 8 ;

1142 
	mpmu_ªg6
 : 8 ;

1143 
	mpmu_ªg7
 : 8 ;

1144 } 
	mbôs
;

1147 
	mu32
;

1149 } 
	tU_PERI_PMC60
;

1157 
	mi2c_°›_dë
 : 1 ;

1158 
	mi2c_°¨t_dë
 : 1 ;

1159 
	mi2c_¨b_lo°
 : 1 ;

1160 
	mi2c_m°_tx_abπ
 : 1 ;

1161 
	mi2c_abπ_d©a_«ck
 : 1 ;

1162 
	mi2c_abπ_7addr_«ck
 : 1 ;

1163 
	mi2c_busy
 : 1 ;

1164 
	mi2c_m°_a˘ive
 : 1 ;

1165 
	mª£rved_0
 : 24 ;

1166 } 
	mbôs
;

1169 
	mu32
;

1171 } 
	tU_PERI_PMC61
;

1179 
	mpmc_i2c_l˙t
 : 16 ;

1180 
	mpmc_i2c_h˙t
 : 16 ;

1181 } 
	mbôs
;

1184 
	mu32
;

1186 } 
	tU_PERI_PMC62
;

1194 
	mpmu_avs_ªg0_mux
 : 2 ;

1195 
	mpmu_avs_ªg1_mux
 : 2 ;

1196 
	mpmu_avs_ªg2_mux
 : 2 ;

1197 
	mpmu_avs_ªg3_mux
 : 2 ;

1198 
	mpmu_avs_ªg4_mux
 : 2 ;

1199 
	mpmu_avs_ªg5_mux
 : 2 ;

1200 
	mpmu_avs_ªg6_mux
 : 2 ;

1201 
	mpmu_avs_ªg7_mux
 : 2 ;

1202 
	mpmu_avs_ªg0_í
 : 1 ;

1203 
	mpmu_avs_ªg1_í
 : 1 ;

1204 
	mpmu_avs_ªg2_í
 : 1 ;

1205 
	mpmu_avs_ªg3_í
 : 1 ;

1206 
	mpmu_avs_ªg4_í
 : 1 ;

1207 
	mpmu_avs_ªg5_í
 : 1 ;

1208 
	mpmu_avs_ªg6_í
 : 1 ;

1209 
	mpmu_avs_ªg7_í
 : 1 ;

1210 
	mª£rved_0
 : 8 ;

1211 } 
	mbôs
;

1214 
	mu32
;

1216 } 
	tU_PERI_PMC63
;

1224 
	mc‹e_ts_m⁄ô‹_≥riod
 : 16 ;

1225 
	mc‹e_ts_m⁄ô‹_í
 : 1 ;

1226 
	mc‹e_ts_í_mu°_öc
 : 1 ;

1227 
	mc‹e_avs_˘æ_£l
 : 1 ;

1228 
	mc‹e_avs_˘æ_mux
 : 1 ;

1229 
	mª£rved_0
 : 2 ;

1230 
	mc‹e_ts_öc_ˇ£_£l
 : 1 ;

1231 
	mª£rved_1
 : 9 ;

1232 } 
	mbôs
;

1235 
	mu32
;

1237 } 
	tU_PERI_PMC64
;

1245 
	m˝u_ts_m⁄ô‹_≥riod
 : 16 ;

1246 
	m˝u_ts_m⁄ô‹_í
 : 1 ;

1247 
	m˝u_ts_í_mu°_öc
 : 1 ;

1248 
	m˝u_avs_˘æ_£l
 : 1 ;

1249 
	m˝u_avs_˘æ_mux
 : 1 ;

1250 
	mª£rved_0
 : 2 ;

1251 
	m˝u_ts_öc_ˇ£_£l
 : 1 ;

1252 
	mª£rved_1
 : 9 ;

1253 } 
	mbôs
;

1256 
	mu32
;

1258 } 
	tU_PERI_PMC65
;

1266 
	mddr_ts_m⁄ô‹_≥riod
 : 16 ;

1267 
	mddr_ts_m⁄ô‹_í
 : 1 ;

1268 
	mddr_ts_í_mu°_öc
 : 1 ;

1269 
	mddr_avs_˘æ_£l
 : 1 ;

1270 
	mddr_avs_˘æ_mux
 : 1 ;

1271 
	mª£rved_0
 : 2 ;

1272 
	mddr_ts_öc_ˇ£_£l
 : 1 ;

1273 
	mª£rved_1
 : 9 ;

1274 } 
	mbôs
;

1277 
	mu32
;

1279 } 
	tU_PERI_PMC66
;

1287 
	mmda_ts_m⁄ô‹_≥riod
 : 16 ;

1288 
	mmda_ts_m⁄ô‹_í
 : 1 ;

1289 
	mmda_ts_í_mu°_öc
 : 1 ;

1290 
	mmda_avs_˘æ_£l
 : 1 ;

1291 
	mmda_avs_˘æ_mux
 : 1 ;

1292 
	mmda_avs_hpm_£l
 : 1 ;

1293 
	mmda_avs_ts_£l
 : 1 ;

1294 
	mmda_ts_öc_ˇ£_£l
 : 1 ;

1295 
	mª£rved_0
 : 9 ;

1296 } 
	mbôs
;

1299 
	mu32
;

1301 } 
	tU_PERI_PMC67
;

1307 vﬁ©ûê
U_PERI_PMC0
 
	mPERI_PMC0
 ;

1308 vﬁ©ûê
U_PERI_PMC1
 
	mPERI_PMC1
 ;

1309 vﬁ©ûê
U_PERI_PMC2
 
	mPERI_PMC2
 ;

1310 vﬁ©ûê
U_PERI_PMC3
 
	mPERI_PMC3
 ;

1311 vﬁ©ûê
U_PERI_PMC4
 
	mPERI_PMC4
 ;

1312 vﬁ©ûê
U_PERI_PMC5
 
	mPERI_PMC5
 ;

1313 vﬁ©ûê
U_PERI_PMC6
 
	mPERI_PMC6
 ;

1314 vﬁ©ûê
U_PERI_PMC7
 
	mPERI_PMC7
 ;

1315 vﬁ©ûê
U_PERI_PMC8
 
	mPERI_PMC8
 ;

1316 vﬁ©ûê
U_PERI_PMC9
 
	mPERI_PMC9
 ;

1317 vﬁ©ûê
U_PERI_PMC10
 
	mPERI_PMC10
 ;

1318 vﬁ©ûê
U_PERI_PMC11
 
	mPERI_PMC11
 ;

1319 vﬁ©ûê
U_PERI_PMC12
 
	mPERI_PMC12
 ;

1320 vﬁ©ûê
U_PERI_PMC13
 
	mPERI_PMC13
 ;

1321 vﬁ©ûê
U_PERI_PMC14
 
	mPERI_PMC14
 ;

1322 vﬁ©ûê
U_PERI_PMC15
 
	mPERI_PMC15
 ;

1323 vﬁ©ûê
U_PERI_PMC16
 
	mPERI_PMC16
 ;

1324 vﬁ©ûê
U_PERI_PMC17
 
	mPERI_PMC17
 ;

1325 vﬁ©ûê
U_PERI_PMC18
 
	mPERI_PMC18
 ;

1326 vﬁ©ûê
U_PERI_PMC19
 
	mPERI_PMC19
 ;

1327 vﬁ©ûê
U_PERI_PMC20
 
	mPERI_PMC20
 ;

1328 vﬁ©ûê
U_PERI_PMC21
 
	mPERI_PMC21
 ;

1329 vﬁ©ûê
U_PERI_PMC22
 
	mPERI_PMC22
 ;

1330 vﬁ©ûê
U_PERI_PMC23
 
	mPERI_PMC23
 ;

1331 vﬁ©ûê
U_PERI_PMC24
 
	mPERI_PMC24
 ;

1332 vﬁ©ûê
U_PERI_PMC25
 
	mPERI_PMC25
 ;

1333 vﬁ©ûê
U_PERI_PMC26
 
	mPERI_PMC26
 ;

1334 vﬁ©ûê
U_PERI_PMC27
 
	mPERI_PMC27
 ;

1335 vﬁ©ûê
U_PERI_PMC28
 
	mPERI_PMC28
 ;

1336 vﬁ©ûê
U_PERI_PMC29
 
	mPERI_PMC29
 ;

1337 vﬁ©ûê
U_PERI_PMC30
 
	mPERI_PMC30
 ;

1338 vﬁ©ûê
U_PERI_PMC31
 
	mPERI_PMC31
 ;

1339 vﬁ©ûê
U_PERI_PMC32
 
	mPERI_PMC32
 ;

1340 vﬁ©ûê
U_PERI_PMC33
 
	mPERI_PMC33
 ;

1341 vﬁ©ûê
U_PERI_PMC34
 
	mPERI_PMC34
 ;

1342 vﬁ©ûê
U_PERI_PMC35
 
	mPERI_PMC35
 ;

1343 vﬁ©ûê
U_PERI_PMC36
 
	mPERI_PMC36
 ;

1344 vﬁ©ûê
U_PERI_PMC37
 
	mPERI_PMC37
 ;

1345 vﬁ©ûê
U_PERI_PMC38
 
	mPERI_PMC38
 ;

1346 vﬁ©ûê
U_PERI_PMC39
 
	mPERI_PMC39
 ;

1347 vﬁ©ûê
U_PERI_PMC40
 
	mPERI_PMC40
 ;

1348 vﬁ©ûê
U_PERI_PMC41
 
	mPERI_PMC41
 ;

1349 vﬁ©ûê
U_PERI_PMC42
 
	mPERI_PMC42
 ;

1350 vﬁ©ûê
U_PERI_PMC43
 
	mPERI_PMC43
 ;

1351 vﬁ©ûê
U_PERI_PMC44
 
	mPERI_PMC44
 ;

1352 vﬁ©ûê
U_PERI_PMC45
 
	mPERI_PMC45
 ;

1353 vﬁ©ûê
U_PERI_PMC46
 
	mPERI_PMC46
 ;

1354 vﬁ©ûê
U_PERI_PMC47
 
	mPERI_PMC47
 ;

1355 vﬁ©ûê
U_PERI_PMC48
 
	mPERI_PMC48
 ;

1356 vﬁ©ûê
U_PERI_PMC49
 
	mPERI_PMC49
 ;

1357 vﬁ©ûê
U_PERI_PMC50
 
	mPERI_PMC50
 ;

1358 vﬁ©ûê
U_PERI_PMC51
 
	mPERI_PMC51
 ;

1359 vﬁ©ûê
U_PERI_PMC52
 
	mPERI_PMC52
 ;

1360 vﬁ©ûê
U_PERI_PMC53
 
	mPERI_PMC53
 ;

1361 vﬁ©ûê
U_PERI_PMC54
 
	mPERI_PMC54
 ;

1362 vﬁ©ûê
U_PERI_PMC55
 
	mPERI_PMC55
 ;

1363 vﬁ©ûê
U_PERI_PMC56
 
	mPERI_PMC56
 ;

1364 vﬁ©ûê
U_PERI_PMC57
 
	mPERI_PMC57
 ;

1365 vﬁ©ûê
U_PERI_PMC58
 
	mPERI_PMC58
 ;

1366 vﬁ©ûê
U_PERI_PMC59
 
	mPERI_PMC59
 ;

1367 vﬁ©ûê
U_PERI_PMC60
 
	mPERI_PMC60
 ;

1368 vﬁ©ûê
U_PERI_PMC61
 
	mPERI_PMC61
 ;

1369 vﬁ©ûê
U_PERI_PMC62
 
	mPERI_PMC62
 ;

1370 vﬁ©ûê
U_PERI_PMC63
 
	mPERI_PMC63
 ;

1371 vﬁ©ûê
U_PERI_PMC64
 
	mPERI_PMC64
 ;

1372 vﬁ©ûê
U_PERI_PMC65
 
	mPERI_PMC65
 ;

1373 vﬁ©ûê
U_PERI_PMC66
 
	mPERI_PMC66
 ;

1374 vﬁ©ûê
U_PERI_PMC67
 
	mPERI_PMC67
 ;

1375 } 
	tS_PMC_REGS_TYPE
;

1378 
S_PMC_REGS_TYPE
 *
g›PMCAŒReg
;

1381 
iSëPERI_PMC0c‹e_pwm_≥riod
(
uc‹e_pwm_≥riod
);

1382 
iSëPERI_PMC0c‹e_pwm_duty
(
uc‹e_pwm_duty
);

1383 
iSëPERI_PMC1˝u_pwm_≥riod
(
u˝u_pwm_≥riod
);

1384 
iSëPERI_PMC1˝u_pwm_duty
(
u˝u_pwm_duty
);

1385 
iGëPERI_PMC1˝u_pwm_≥riod
();

1386 
iGëPERI_PMC1˝u_pwm_duty
();

1387 
iSëPERI_PMC2ddr_pwm_≥riod
(
uddr_pwm_≥riod
);

1388 
iSëPERI_PMC2ddr_pwm_duty
(
uddr_pwm_duty
);

1389 
iSëPERI_PMC3mda_pwm_≥riod
(
umda_pwm_≥riod
);

1390 
iSëPERI_PMC3mda_pwm_duty
(
umda_pwm_duty
);

1391 
iGëPERI_PMC3mda_pwm_≥riod
();

1392 
iGëPERI_PMC3mda_pwm_duty
();

1393 
iSëPERI_PMC4c‹e_pwm_íabÀ
(
uc‹e_pwm_íabÀ
);

1394 
iSëPERI_PMC4c‹e_pwm_öv
(
uc‹e_pwm_öv
);

1395 
iSëPERI_PMC4˝u_pwm_íabÀ
(
u˝u_pwm_íabÀ
);

1396 
iGëPERI_PMC4˝u_pwm_íabÀ
(*
u˝u_pwm_íabÀ
);

1397 
iSëPERI_PMC4˝u_pwm_öv
(
u˝u_pwm_öv
);

1398 
iSëPERI_PMC4ddr_pwm_íabÀ
(
uddr_pwm_íabÀ
);

1399 
iSëPERI_PMC4ddr_pwm_öv
(
uddr_pwm_öv
);

1400 
iSëPERI_PMC4mda_pwm_íabÀ
(
umda_pwm_íabÀ
);

1401 
iGëPERI_PMC4mda_pwm_íabÀ
(*
umda_pwm_íabÀ
);

1402 
iSëPERI_PMC4mda_pwm_öv
(
umda_pwm_öv
);

1403 
iSëPERI_PMC4pwm0_ªu£_cfg
(
upwm0_ªu£_cfg
);

1404 
iSëPERI_PMC4pwm1_ªu£_cfg
(
upwm1_ªu£_cfg
);

1405 
iSëPERI_PMC4pwm2_ªu£_cfg
(
upwm2_ªu£_cfg
);

1406 
iSëPERI_PMC4pwm3_ªu£_cfg
(
upwm3_ªu£_cfg
);

1407 
iSëPERI_PMC5c‹e_hpm_fsm_í
(
uc‹e_hpm_fsm_í
);

1408 
iSëPERI_PMC5c‹e_avs_hpm_fsm_ˇlc_mode
(
uc‹e_avs_hpm_fsm_ˇlc_mode
);

1409 
iSëPERI_PMC5c‹e_avs_fsm_dec_pwm_°ï
(
uc‹e_avs_fsm_dec_pwm_°ï
);

1410 
iSëPERI_PMC5c‹e_avs_fsm_öc_pwm_°ï
(
uc‹e_avs_fsm_öc_pwm_°ï
);

1411 
iSëPERI_PMC6˝u_hpm_fsm_í
(
u˝u_hpm_fsm_í
);

1412 
iSëPERI_PMC6˝u_avs_hpm_fsm_ˇlc_mode
(
u˝u_avs_hpm_fsm_ˇlc_mode
);

1413 
iSëPERI_PMC6˝u_avs_fsm_dec_pwm_°ï
(
u˝u_avs_fsm_dec_pwm_°ï
);

1414 
iSëPERI_PMC6˝u_avs_fsm_öc_pwm_°ï
(
u˝u_avs_fsm_öc_pwm_°ï
);

1415 
iSëPERI_PMC7ddr_hpm_fsm_í
(
uddr_hpm_fsm_í
);

1416 
iSëPERI_PMC7ddr_avs_hpm_fsm_ˇlc_mode
(
uddr_avs_hpm_fsm_ˇlc_mode
);

1417 
iSëPERI_PMC7ddr_avs_fsm_dec_pwm_°ï
(
uddr_avs_fsm_dec_pwm_°ï
);

1418 
iSëPERI_PMC7ddr_avs_fsm_öc_pwm_°ï
(
uddr_avs_fsm_öc_pwm_°ï
);

1419 
iSëPERI_PMC8mda_hpm_fsm_í
(
umda_hpm_fsm_í
);

1420 
iSëPERI_PMC8mda_avs_hpm_fsm_ˇlc_mode
(
umda_avs_hpm_fsm_ˇlc_mode
);

1421 
iSëPERI_PMC8mda_avs_fsm_dec_pwm_°ï
(
umda_avs_fsm_dec_pwm_°ï
);

1422 
iSëPERI_PMC8mda_avs_fsm_öc_pwm_°ï
(
umda_avs_fsm_öc_pwm_°ï
);

1423 
iSëPERI_PMC10c‹e_hpm_div
(
uc‹e_hpm_div
);

1424 
iSëPERI_PMC10c‹e_hpm_shi·
(
uc‹e_hpm_shi·
);

1425 
iSëPERI_PMC10c‹e_hpm_off£t
(
uc‹e_hpm_off£t
);

1426 
iSëPERI_PMC10c‹e_hpm_í
(
uc‹e_hpm_í
);

1427 
iSëPERI_PMC10c‹e_hpm_by∑ss
(
uc‹e_hpm_by∑ss
);

1428 
iSëPERI_PMC10c‹e_hpm_m⁄ô‹_í
(
uc‹e_hpm_m⁄ô‹_í
);

1429 
iSëPERI_PMC10c‹e_hpm_§°_ªq
(
uc‹e_hpm_§°_ªq
);

1430 
iSëPERI_PMC13c‹e_hpm_u∂imô
(
uc‹e_hpm_u∂imô
);

1431 
iSëPERI_PMC13c‹e_hpm_lowlimô
(
uc‹e_hpm_lowlimô
);

1432 
iSëPERI_PMC13c‹e_hpm_m⁄ô‹_≥riod
(
uc‹e_hpm_m⁄ô‹_≥riod
);

1433 
iSëPERI_PMC14˝u_hpm_div
(
u˝u_hpm_div
);

1434 
iSëPERI_PMC14˝u_hpm_shi·
(
u˝u_hpm_shi·
);

1435 
iSëPERI_PMC14˝u_hpm_off£t
(
u˝u_hpm_off£t
);

1436 
iSëPERI_PMC14˝u_hpm_í
(
u˝u_hpm_í
);

1437 
iSëPERI_PMC14˝u_hpm_by∑ss
(
u˝u_hpm_by∑ss
);

1438 
iSëPERI_PMC14˝u_hpm_m⁄ô‹_í
(
u˝u_hpm_m⁄ô‹_í
);

1439 
iSëPERI_PMC14˝u_hpm_§°_ªq
(
u˝u_hpm_§°_ªq
);

1440 
iSëPERI_PMC17˝u_hpm_u∂imô
(
u˝u_hpm_u∂imô
);

1441 
iSëPERI_PMC17˝u_hpm_lowlimô
(
u˝u_hpm_lowlimô
);

1442 
iSëPERI_PMC17˝u_hpm_m⁄ô‹_≥riod
(
u˝u_hpm_m⁄ô‹_≥riod
);

1443 
iSëPERI_PMC18ddr_hpm_div
(
uddr_hpm_div
);

1444 
iSëPERI_PMC18ddr_hpm_shi·
(
uddr_hpm_shi·
);

1445 
iSëPERI_PMC18ddr_hpm_off£t
(
uddr_hpm_off£t
);

1446 
iSëPERI_PMC18ddr_hpm_í
(
uddr_hpm_í
);

1447 
iSëPERI_PMC18ddr_hpm_by∑ss
(
uddr_hpm_by∑ss
);

1448 
iSëPERI_PMC18ddr_hpm_m⁄ô‹_í
(
uddr_hpm_m⁄ô‹_í
);

1449 
iSëPERI_PMC18ddr_hpm_§°_ªq
(
uddr_hpm_§°_ªq
);

1450 
iSëPERI_PMC21ddr_hpm_u∂imô
(
uddr_hpm_u∂imô
);

1451 
iSëPERI_PMC21ddr_hpm_lowlimô
(
uddr_hpm_lowlimô
);

1452 
iSëPERI_PMC21ddr_hpm_m⁄ô‹_≥riod
(
uddr_hpm_m⁄ô‹_≥riod
);

1453 
iSëPERI_PMC22mda_t›_hpm_div
(
umda_t›_hpm_div
);

1454 
iSëPERI_PMC22mda_t›_hpm_shi·
(
umda_t›_hpm_shi·
);

1455 
iSëPERI_PMC22mda_t›_hpm_off£t
(
umda_t›_hpm_off£t
);

1456 
iSëPERI_PMC22mda_t›_hpm_í
(
umda_t›_hpm_í
);

1457 
iSëPERI_PMC22mda_t›_hpm_by∑ss
(
umda_t›_hpm_by∑ss
);

1458 
iSëPERI_PMC22mda_t›_hpm_m⁄ô‹_í
(
umda_t›_hpm_m⁄ô‹_í
);

1459 
iSëPERI_PMC22mda_t›_hpm_§°_ªq
(
umda_t›_hpm_§°_ªq
);

1460 
iSëPERI_PMC25mda_t›_hpm_u∂imô
(
umda_t›_hpm_u∂imô
);

1461 
iSëPERI_PMC25mda_t›_hpm_lowlimô
(
umda_t›_hpm_lowlimô
);

1462 
iSëPERI_PMC25mda_t›_hpm_m⁄ô‹_≥riod
(
umda_t›_hpm_m⁄ô‹_≥riod
);

1463 
iSëPERI_PMC26vedu_hpm_div
(
uvedu_hpm_div
);

1464 
iSëPERI_PMC26vedu_hpm_shi·
(
uvedu_hpm_shi·
);

1465 
iSëPERI_PMC26vedu_hpm_off£t
(
uvedu_hpm_off£t
);

1466 
iSëPERI_PMC26vedu_hpm_í
(
uvedu_hpm_í
);

1467 
iSëPERI_PMC26vedu_hpm_by∑ss
(
uvedu_hpm_by∑ss
);

1468 
iSëPERI_PMC26vedu_hpm_m⁄ô‹_í
(
uvedu_hpm_m⁄ô‹_í
);

1469 
iSëPERI_PMC26vedu_hpm_§°_ªq
(
uvedu_hpm_§°_ªq
);

1470 
iSëPERI_PMC29vedu_hpm_u∂imô
(
uvedu_hpm_u∂imô
);

1471 
iSëPERI_PMC29vedu_hpm_lowlimô
(
uvedu_hpm_lowlimô
);

1472 
iSëPERI_PMC29vedu_hpm_m⁄ô‹_≥riod
(
uvedu_hpm_m⁄ô‹_≥riod
);

1473 
iSëPERI_PMC30vedu_hpm_m⁄ô‹_≥riod
(
uvedu_hpm_m⁄ô‹_≥riod
);

1474 
iSëPERI_PMC30mda_t›_hpm_m⁄ô‹_≥riod
(
umda_t›_hpm_m⁄ô‹_≥riod
);

1475 
iSëPERI_PMC30ddr_hpm_m⁄ô‹_≥riod
(
uddr_hpm_m⁄ô‹_≥riod
);

1476 
iSëPERI_PMC30˝u_hpm_m⁄ô‹_≥riod
(
u˝u_hpm_m⁄ô‹_≥riod
);

1477 
iSëPERI_PMC31c‹e_hpm_m⁄ô‹_≥riod
(
uc‹e_hpm_m⁄ô‹_≥riod
);

1478 
iSëPERI_PMC32˝u_ts_£l
(
u˝u_ts_£l
);

1479 
iSëPERI_PMC32˝u_ts_dly_adju°
(
u˝u_ts_dly_adju°
);

1480 
iSëPERI_PMC32˝u_ts_°ï
(
u˝u_ts_°ï
);

1481 
iSëPERI_PMC32˝u_ts_í
(
u˝u_ts_í
);

1482 
iSëPERI_PMC33ddr_ts_£l
(
uddr_ts_£l
);

1483 
iSëPERI_PMC33ddr_ts_dly_adju°
(
uddr_ts_dly_adju°
);

1484 
iSëPERI_PMC33ddr_ts_°ï
(
uddr_ts_°ï
);

1485 
iSëPERI_PMC33ddr_ts_í
(
uddr_ts_í
);

1486 
iSëPERI_PMC34c‹e_ts_£l
(
uc‹e_ts_£l
);

1487 
iSëPERI_PMC34c‹e_ts_dly_adju°
(
uc‹e_ts_dly_adju°
);

1488 
iSëPERI_PMC34c‹e_ts_°ï
(
uc‹e_ts_°ï
);

1489 
iSëPERI_PMC34c‹e_ts_í
(
uc‹e_ts_í
);

1490 
iSëPERI_PMC35mda_t›_ts_£l
(
umda_t›_ts_£l
);

1491 
iSëPERI_PMC35mda_t›_ts_dly_adju°
(
umda_t›_ts_dly_adju°
);

1492 
iSëPERI_PMC35mda_t›_ts_°ï
(
umda_t›_ts_°ï
);

1493 
iSëPERI_PMC35mda_t›_ts_í
(
umda_t›_ts_í
);

1494 
iSëPERI_PMC36vedu_ts_£l
(
uvedu_ts_£l
);

1495 
iSëPERI_PMC36vedu_ts_dly_adju°
(
uvedu_ts_dly_adju°
);

1496 
iSëPERI_PMC36vedu_ts_°ï
(
uvedu_ts_°ï
);

1497 
iSëPERI_PMC36vedu_ts_í
(
uvedu_ts_í
);

1498 
iSëPERI_PMC58pmu_addr
(
upmu_addr
);

1499 
iSëPERI_PMC58pmu_ªg_rd_Æl
(
upmu_ªg_rd_Æl
);

1500 
iGëPERI_PMC58pmu_ªg_rd_Æl
(*
upmu_ªg_rd_Æl
);

1501 
iSëPERI_PMC58pmu_ªg0_wt_ªq
(
upmu_ªg0_wt_ªq
);

1502 
iSëPERI_PMC58pmu_ªg1_wt_ªq
(
upmu_ªg1_wt_ªq
);

1503 
iSëPERI_PMC58pmu_ªg2_wt_ªq
(
upmu_ªg2_wt_ªq
);

1504 
iSëPERI_PMC58pmu_ªg3_wt_ªq
(
upmu_ªg3_wt_ªq
);

1505 
iGëPERI_PMC58pmu_ªg3_wt_ªq
(*
upmu_ªg3_wt_ªq
);

1506 
iSëPERI_PMC58pmu_ªg4_wt_ªq
(
upmu_ªg4_wt_ªq
);

1507 
iGëPERI_PMC58pmu_ªg4_wt_ªq
(*
upmu_ªg4_wt_ªq
);

1508 
iSëPERI_PMC58pmu_ªg5_wt_ªq
(
upmu_ªg5_wt_ªq
);

1509 
iGëPERI_PMC58pmu_ªg5_wt_ªq
(*
upmu_ªg5_wt_ªq
);

1510 
iSëPERI_PMC58pmu_ªg6_wt_ªq
(
upmu_ªg6_wt_ªq
);

1511 
iSëPERI_PMC58pmu_ªg7_wt_ªq
(
upmu_ªg7_wt_ªq
);

1512 
iGëPERI_PMC58pmu_ªg7_wt_ªq
(*
upmu_ªg7_wt_ªq
);

1513 
iSëPERI_PMC58i2c_öt_˛ór
(
ui2c_öt_˛ór
);

1514 
iSëPERI_PMC58pmc_i2c_íabÀ
(
upmc_i2c_íabÀ
);

1515 
iGëPERI_PMC58pmc_i2c_íabÀ
(*
upmc_i2c_íabÀ
);

1516 
iSëPERI_PMC59pmu_ªg0
(
upmu_ªg0
);

1517 
iSëPERI_PMC59pmu_ªg1
(
upmu_ªg1
);

1518 
iSëPERI_PMC59pmu_ªg2
(
upmu_ªg2
);

1519 
iSëPERI_PMC59pmu_ªg3
(
upmu_ªg3
);

1520 
iGëPERI_PMC59pmu_ªg3
(*
upmu_ªg3
);

1521 
iSëPERI_PMC60pmu_ªg4
(
upmu_ªg4
);

1522 
iGëPERI_PMC60pmu_ªg4
(*
upmu_ªg4
);

1523 
iSëPERI_PMC60pmu_ªg5
(
upmu_ªg5
);

1524 
iGëPERI_PMC60pmu_ªg5
(*
upmu_ªg5
);

1525 
iSëPERI_PMC60pmu_ªg6
(
upmu_ªg6
);

1526 
iSëPERI_PMC60pmu_ªg7
(
upmu_ªg7
);

1527 
iSëPERI_PMC62pmc_i2c_l˙t
(
upmc_i2c_l˙t
);

1528 
iSëPERI_PMC62pmc_i2c_h˙t
(
upmc_i2c_h˙t
);

1529 
iSëPERI_PMC63pmu_avs_ªg0_mux
(
upmu_avs_ªg0_mux
);

1530 
iSëPERI_PMC63pmu_avs_ªg1_mux
(
upmu_avs_ªg1_mux
);

1531 
iSëPERI_PMC63pmu_avs_ªg2_mux
(
upmu_avs_ªg2_mux
);

1532 
iSëPERI_PMC63pmu_avs_ªg3_mux
(
upmu_avs_ªg3_mux
);

1533 
iSëPERI_PMC63pmu_avs_ªg4_mux
(
upmu_avs_ªg4_mux
);

1534 
iSëPERI_PMC63pmu_avs_ªg5_mux
(
upmu_avs_ªg5_mux
);

1535 
iSëPERI_PMC63pmu_avs_ªg6_mux
(
upmu_avs_ªg6_mux
);

1536 
iSëPERI_PMC63pmu_avs_ªg7_mux
(
upmu_avs_ªg7_mux
);

1537 
iSëPERI_PMC63pmu_avs_ªg0_í
(
upmu_avs_ªg0_í
);

1538 
iSëPERI_PMC63pmu_avs_ªg1_í
(
upmu_avs_ªg1_í
);

1539 
iSëPERI_PMC63pmu_avs_ªg2_í
(
upmu_avs_ªg2_í
);

1540 
iSëPERI_PMC63pmu_avs_ªg3_í
(
upmu_avs_ªg3_í
);

1541 
iSëPERI_PMC63pmu_avs_ªg4_í
(
upmu_avs_ªg4_í
);

1542 
iSëPERI_PMC63pmu_avs_ªg5_í
(
upmu_avs_ªg5_í
);

1543 
iSëPERI_PMC63pmu_avs_ªg6_í
(
upmu_avs_ªg6_í
);

1544 
iSëPERI_PMC63pmu_avs_ªg7_í
(
upmu_avs_ªg7_í
);

1545 
iSëPERI_PMC64c‹e_ts_m⁄ô‹_≥riod
(
uc‹e_ts_m⁄ô‹_≥riod
);

1546 
iSëPERI_PMC64c‹e_ts_m⁄ô‹_í
(
uc‹e_ts_m⁄ô‹_í
);

1547 
iSëPERI_PMC64c‹e_ts_í_mu°_öc
(
uc‹e_ts_í_mu°_öc
);

1548 
iSëPERI_PMC64c‹e_avs_˘æ_£l
(
uc‹e_avs_˘æ_£l
);

1549 
iSëPERI_PMC64c‹e_avs_˘æ_mux
(
uc‹e_avs_˘æ_mux
);

1550 
iSëPERI_PMC64c‹e_ts_öc_ˇ£_£l
(
uc‹e_ts_öc_ˇ£_£l
);

1551 
iSëPERI_PMC65˝u_ts_m⁄ô‹_≥riod
(
u˝u_ts_m⁄ô‹_≥riod
);

1552 
iSëPERI_PMC65˝u_ts_m⁄ô‹_í
(
u˝u_ts_m⁄ô‹_í
);

1553 
iSëPERI_PMC65˝u_ts_í_mu°_öc
(
u˝u_ts_í_mu°_öc
);

1554 
iSëPERI_PMC65˝u_avs_˘æ_£l
(
u˝u_avs_˘æ_£l
);

1555 
iSëPERI_PMC65˝u_avs_˘æ_mux
(
u˝u_avs_˘æ_mux
);

1556 
iSëPERI_PMC65˝u_ts_öc_ˇ£_£l
(
u˝u_ts_öc_ˇ£_£l
);

1557 
iSëPERI_PMC66ddr_ts_m⁄ô‹_≥riod
(
uddr_ts_m⁄ô‹_≥riod
);

1558 
iSëPERI_PMC66ddr_ts_m⁄ô‹_í
(
uddr_ts_m⁄ô‹_í
);

1559 
iSëPERI_PMC66ddr_ts_í_mu°_öc
(
uddr_ts_í_mu°_öc
);

1560 
iSëPERI_PMC66ddr_avs_˘æ_£l
(
uddr_avs_˘æ_£l
);

1561 
iSëPERI_PMC66ddr_avs_˘æ_mux
(
uddr_avs_˘æ_mux
);

1562 
iSëPERI_PMC66ddr_ts_öc_ˇ£_£l
(
uddr_ts_öc_ˇ£_£l
);

1563 
iSëPERI_PMC67mda_ts_m⁄ô‹_≥riod
(
umda_ts_m⁄ô‹_≥riod
);

1564 
iSëPERI_PMC67mda_ts_m⁄ô‹_í
(
umda_ts_m⁄ô‹_í
);

1565 
iSëPERI_PMC67mda_ts_í_mu°_öc
(
umda_ts_í_mu°_öc
);

1566 
iSëPERI_PMC67mda_avs_˘æ_£l
(
umda_avs_˘æ_£l
);

1567 
iSëPERI_PMC67mda_avs_˘æ_mux
(
umda_avs_˘æ_mux
);

1568 
iSëPERI_PMC67mda_avs_hpm_£l
(
umda_avs_hpm_£l
);

1569 
iSëPERI_PMC67mda_avs_ts_£l
(
umda_avs_ts_£l
);

1570 
iSëPERI_PMC67mda_ts_öc_ˇ£_£l
(
umda_ts_öc_ˇ£_£l
);

	@component/pm/include/regulator.h

19 #i‚de‡ 
__REGULATOR_H__


20 
	#__REGULATOR_H__


	)

22 
	~<löux/ªguœt‹/machöe.h
>

23 
	~<löux/ªguœt‹/drivî.h
>

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


31 
	#DC_DC_CPU
 0

	)

32 
	#DC_DC_MEDIA
 1

	)

34 
	shisi_ªguœt‹_d©a


36 
ªguœt‹_öô_d©a
 *
öô_d©a
;

37 
ªguœt‹_desc
 *
desc
;

39 
vﬁt_cur
;

42 
ªguœt‹_öô
();

43 
ªguœt‹_exô
();

45 #ifde‡
__˝lu•lus


46 #i‡
__˝lu•lus


	@component/pm/include/sys_pm.h

19 #i‚de‡
__SYS_PM_H__


20 
	#__SYS_PM_H__


	)

22 
	~<mach/io.h
>

25 
	#MAX_FREQ_ADJUST_CNT
 500

	)

26 
	#MAX_I2C_ADJUST_CNT
 500

	)

28 
	#_CRG_BASE
 
	`IO_ADDRESS
(0x20030000)

	)

29 
	#PERI_CRG0
 (
_CRG_BASE
 + 0x0)

	)

30 
	#PERI_CRG1
 (
_CRG_BASE
 + 0x4)

	)

32 
	#PERI_CRG2
 (
_CRG_BASE
 + 0x8)

	)

33 
	#PERI_CRG3
 (
_CRG_BASE
 + 0xC)

	)

34 
	#PERI_CRG11
 (
_CRG_BASE
 + 0x2C)

	)

35 
	#PERI_CRG12
 (
_CRG_BASE
 + 0x30)

	)

36 
	#PERI_CRG16
 (
_CRG_BASE
 + 0x40)

	)

37 
	#PERI_CRG18
 (
_CRG_BASE
 + 0x48)

	)

38 
	#PERI_CRG23
 (
_CRG_BASE
 + 0x5C)

	)

39 
	#PERI_CRG49
 (
_CRG_BASE
 + 0xC4)

	)

40 
	#PERI_CRG58
 (
_CRG_BASE
 + 0xE8)

	)

41 
	#PERI_CRG65
 (
_CRG_BASE
 + 0x104)

	)

44 
	#_PMC_BASE
 
	`IO_ADDRESS
(0x20270000)

	)

45 
	#PERI_PMC0
 (
_PMC_BASE
 + 0x0)

	)

46 
	#PERI_PMC1
 (
_PMC_BASE
 + 0x4)

	)

48 
	#PERI_PMC6
 (
_PMC_BASE
 + 0x18)

	)

49 
	#PERI_PMC7
 (
_PMC_BASE
 + 0x1C)

	)

50 
	#PERI_PMC9
 (
_PMC_BASE
 + 0x24)

	)

51 
	#PERI_PMC14
 (
_PMC_BASE
 + 0x38)

	)

52 
	#PERI_PMC15
 (
_PMC_BASE
 + 0x3C)

	)

53 
	#PERI_PMC16
 (
_PMC_BASE
 + 0x40)

	)

54 
	#PERI_PMC17
 (
_PMC_BASE
 + 0x44)

	)

56 
	#PERI_PMC19
 (
_PMC_BASE
 + 0x4C)

	)

57 
	#PERI_PMC20
 (
_PMC_BASE
 + 0x50)

	)

60 
	#PERI_PMC22
 (
_PMC_BASE
 + 0x58)

	)

61 
	#PERI_PMC23
 (
_PMC_BASE
 + 0x5c)

	)

62 
	#PERI_PMC24
 (
_PMC_BASE
 + 0x60)

	)

63 
	#PERI_PMC25
 (
_PMC_BASE
 + 0x64)

	)

64 
	#PERI_PMC26
 (
_PMC_BASE
 + 0x68)

	)

65 
	#PERI_PMC29
 (
_PMC_BASE
 + 0x74)

	)

66 
	#PERI_PMC31
 (
_PMC_BASE
 + 0x7c)

	)

67 
	#PERI_PMC32
 (
_PMC_BASE
 + 0x80)

	)

68 
	#PERI_PMC30
 (
_PMC_BASE
 + 0x78)

	)

69 
	#PERI_PMC33
 (
_PMC_BASE
 + 0x84)

	)

71 
	#PERI_PMC58
 (
_PMC_BASE
 + 0xE8)

	)

72 
	#PERI_PMC65
 (
_PMC_BASE
 + 0x104)

	)

73 
	#PERI_PMC67
 (
_PMC_BASE
 + 0x10C)

	)

75 
	#HPM_PC_RECORED_MASK
 0x3ff

	)

77 
	#_MUX_BASE
 
	`IO_ADDRESS
(0x200F0000)

	)

78 
	#PERI_MUX83
 (
_MUX_BASE
 + 0x14C)

	)

79 
	#PERI_MUX84
 (
_MUX_BASE
 + 0x150)

	)

80 
	#PERI_MUX85
 (
_MUX_BASE
 + 0x154)

	)

81 
	#PERI_MUX86
 (
_MUX_BASE
 + 0x158)

	)

83 
	#PROFILE_REG
 
	`IO_ADDRESS
(0x2005015C)

	)

90 
	mhw_¥ofûe
 : 4 ;

91 
	mvﬁ©ge
 : 4 ;

92 
	mvﬁ©ge_way
 : 4 ;

93 
	mhw_mda_¥ofûe
 : 4 ;

94 
	msw_mda_¥ofûe
 : 4 ;

95 
	msw_mda_avaûabÀ
 : 1 ;

96 
	msw_mda_£âög
 : 1 ;

97 
	mª£rved_0
 : 10 ;

98 } 
	mbôs
;

101 
	mu32
;

103 } 
	tU_PROFILE_REG
;

	@component/pm/opp/hi_opp_data.c

23 
	~<löux/moduÀ.h
>

25 
	~"›p.h
"

27 
	~"hi_›p_d©a.h
"

38 
	$PM_OµInôTabÀ
(
devi˚
 *devi˚, 
hi_›p_def
 *
›p_def
,

39 
›p_def_size
)

41 
i
, 
r
;

43 i‡(!
devi˚
 || !
›p_def
 || !
›p_def_size
)

45 
	`¥ötk
("%s: invÆidÖ¨ams!\n", 
__func__
);

46  -
EINVAL
;

50 
i
 = 0; i < 
›p_def_size
; i++)

53 
r
 = 
	`›p_add
(
devi˚
, 
›p_def
->
‰eq
, oµ_def->
u_vﬁt
);

54 i‡(
r
)

56 
	`¥ötk
("%s:ádd OPP %ld failed for [%d] "

58 
__func__
, 
›p_def
->
‰eq
,

59 
i
, 
r
);

63 i‡(!
›p_def
->
deÁu…_avaûabÀ
)

65 
r
 = 
	`›p_dißbÀ
(
devi˚
, 
›p_def
->
‰eq
);

68 i‡(
r
)

70 
	`¥ötk
("%s: disable %ld failed for"

72 
__func__
, 
›p_def
->
‰eq
,

73 
i
, 
r
);

77 
›p_def
++;

81 
	}
}

84 
__öô
 
	$PM_FªqèbÀInô
(
devi˚
 *
dev
,

85 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
)

87  
	`›p_öô_˝u‰eq_èbÀ
(
dev
, 
èbÀ
);

88 
	}
}

90 
	$PM_FªqèbÀExô
(
devi˚
 *
dev
,

91 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
)

93 
	`›p_‰ì_˝u‰eq_èbÀ
(
dev
, 
èbÀ
);

96 
	}
}

	@component/pm/opp/opp.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/î∫o.h
>

24 
	~<löux/îr.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/¶ab.h
>

27 
	~<löux/˝u‰eq.h
>

28 
	~<löux/devi˚.h
>

29 
	~<löux/li°.h
>

30 
	~<löux/rculi°.h
>

31 
	~<löux/rcupd©e.h
>

33 
	~"›p.h
"

68 
	s›p


70 
li°_hód
 
	mnode
;

72 
boﬁ
 
	mavaûabÀ
;

73 
	møã
;

74 
	mu_vﬁt
;

76 
devi˚_›p
 *
	mdev_›p
;

94 
	sdevi˚_›p


96 
li°_hód
 
	mnode
;

98 
devi˚
 * 
	mdev
;

99 
§cu_nŸifõr_hód
 
	mhód
;

100 
li°_hód
 
	m›p_li°
;

108 
LIST_HEAD
(
dev_›p_li°
);

111 
DEFINE_MUTEX
(
dev_›p_li°_lock
);

127 
devi˚_›p
 *
	$föd_devi˚_›p
(
devi˚
 *
dev
)

129 
devi˚_›p
 *
tmp_dev_›p
, *
dev_›p
 = 
	`ERR_PTR
(-
ENODEV
);

131 i‡(
	`u∆ikñy
(
	`IS_ERR_OR_NULL
(
dev
)))

133 
	`¥ötk
("%s: InvÆidÖ¨amëîs\n", 
__func__
);

134  
	`ERR_PTR
(-
EINVAL
);

137 
	`li°_f‹_óch_íåy_rcu
(
tmp_dev_›p
, &
dev_›p_li°
, 
node
)

139 i‡(
tmp_dev_›p
->
dev
 == dev)

141 
dev_›p
 = 
tmp_dev_›p
;

146  
dev_›p
;

147 
	}
}

164 
	$›p_gë_vﬁège
(
›p
 *opp)

166 
›p
 *
tmp_›p
;

167 
v
 = 0;

169 
tmp_›p
 = 
	`rcu_dîe„ªn˚
(
›p
);

170 i‡(
	`u∆ikñy
(
	`IS_ERR_OR_NULL
(
tmp_›p
)Ë|| !tmp_›p->
avaûabÀ
)

172 
	`¥ötk
("%s: InvÆidÖ¨amëîs\n", 
__func__
);

176 
v
 = 
tmp_›p
->
u_vﬁt
;

179  
v
;

180 
	}
}

197 
	$›p_gë_‰eq
(
›p
 *opp)

199 
›p
 *
tmp_›p
;

200 
f
 = 0;

202 
tmp_›p
 = 
	`rcu_dîe„ªn˚
(
›p
);

203 i‡(
	`u∆ikñy
(
	`IS_ERR_OR_NULL
(
tmp_›p
)Ë|| !tmp_›p->
avaûabÀ
)

205 
	`¥ötk
("%s: InvÆidÖ¨amëîs\n", 
__func__
);

209 
f
 = 
tmp_›p
->
øã
;

212  
f
;

213 
	}
}

226 
	$›p_gë_›p_cou¡
(
devi˚
 *
dev
)

228 
devi˚_›p
 *
dev_›p
;

229 
›p
 *
ãmp_›p
;

230 
cou¡
 = 0;

232 
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

233 i‡(
	`IS_ERR
(
dev_›p
))

235 
r
 = 
	`PTR_ERR
(
dev_›p
);

236 
	`¥ötk
–"OPPÇŸ found (%s)\n", 
__func__
);

237  
r
;

240 
	`li°_f‹_óch_íåy_rcu
(
ãmp_›p
, &
dev_›p
->
›p_li°
, 
node
)

242 i‡(
ãmp_›p
->
avaûabÀ
)

244 
cou¡
++;

248  
cou¡
;

249 
	}
}

274 
›p
 *
	$›p_föd_‰eq_exa˘
(
devi˚
 *
dev
, 
‰eq
,

275 
boﬁ
 
avaûabÀ
)

277 
devi˚_›p
 *
dev_›p
;

278 
›p
 *
ãmp_›p
, *›∞
	`ERR_PTR
(-
ENODEV
);

280 
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

281 i‡(
	`IS_ERR
(
dev_›p
))

283 
r
 = 
	`PTR_ERR
(
dev_›p
);

284 
	`¥ötk
–"OPPÇŸ found (%s)\n", 
__func__
);

285  
	`ERR_PTR
(
r
);

288 
	`li°_f‹_óch_íåy_rcu
(
ãmp_›p
, &
dev_›p
->
›p_li°
, 
node
)

290 i‡((
ãmp_›p
->
avaûabÀ
 ==ávailable)

291 && (
ãmp_›p
->
øã
 =
‰eq
))

293 
›p
 = 
ãmp_›p
;

298  
›p
;

299 
	}
}

318 
›p
 *
	$›p_föd_‰eq_˚û
(
devi˚
 *
dev
, *
‰eq
)

320 
devi˚_›p
 *
dev_›p
;

321 
›p
 *
ãmp_›p
, *›∞
	`ERR_PTR
(-
ENODEV
);

323 i‡(!
dev
 || !
‰eq
)

325 
	`¥ötk
("%s: InvÆidárgumíà‰eq=%p\n", 
__func__
, 
‰eq
);

326  
	`ERR_PTR
(-
EINVAL
);

329 
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

330 i‡(
	`IS_ERR
(
dev_›p
))

332  
›p
;

335 
	`li°_f‹_óch_íåy_rcu
(
ãmp_›p
, &
dev_›p
->
›p_li°
, 
node
)

337 i‡(
ãmp_›p
->
avaûabÀ
 && (ãmp_›p->
øã
 >*
‰eq
))

339 
›p
 = 
ãmp_›p
;

340 *
‰eq
 = 
›p
->
øã
;

345  
›p
;

346 
	}
}

365 
›p
 *
	$›p_föd_‰eq_Êo‹
(
devi˚
 *
dev
, *
‰eq
)

367 
devi˚_›p
 *
dev_›p
;

368 
›p
 *
ãmp_›p
, *›∞
	`ERR_PTR
(-
ENODEV
);

370 i‡(!
dev
 || !
‰eq
)

372 
	`¥ötk
("%s: InvÆidárgumíà‰eq=%p\n", 
__func__
, 
‰eq
);

373  
	`ERR_PTR
(-
EINVAL
);

376 
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

377 i‡(
	`IS_ERR
(
dev_›p
))

379  
›p
;

382 
	`li°_f‹_óch_íåy_rcu
(
ãmp_›p
, &
dev_›p
->
›p_li°
, 
node
)

384 i‡(
ãmp_›p
->
avaûabÀ
)

387 i‡(
ãmp_›p
->
øã
 > *
‰eq
)

393 
›p
 = 
ãmp_›p
;

397 i‡(!
	`IS_ERR
(
›p
))

399 *
‰eq
 = 
›p
->
øã
;

402  
›p
;

403 
	}
}

421 
	$›p_add
(
devi˚
 *
dev
, 
‰eq
, 
u_vﬁt
)

423 
devi˚_›p
 *
dev_›p
 = 
NULL
;

424 
›p
 *›p, *
√w_›p
;

425 
li°_hód
 *
hód
;

428 
√w_›p
 = 
	`kzÆloc
((
›p
), 
GFP_KERNEL
);

429 i‡(!
√w_›p
)

431 
	`¥ötk
("%s: U«bÀÅÿ¸óãÇew OPPÇode\n", 
__func__
);

432  -
ENOMEM
;

436 
	`muãx_lock
(&
dev_›p_li°_lock
);

439 
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

440 i‡(
	`IS_ERR
(
dev_›p
))

447 
dev_›p
 = 
	`kzÆloc
((
devi˚_›p
), 
GFP_KERNEL
);

448 i‡(!
dev_›p
)

450 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

451 
	`k‰ì
(
√w_›p
);

452 
	`¥ötk
("%s: UnableÅo create device OPP structure\n",

453 
__func__
);

454  -
ENOMEM
;

457 
dev_›p
->
dev
 = dev;

458 
	`§cu_öô_nŸifõr_hód
(&
dev_›p
->
hód
);

459 
	`INIT_LIST_HEAD
(&
dev_›p
->
›p_li°
);

462 
	`li°_add_rcu
(&
dev_›p
->
node
, &
dev_›p_li°
);

466 
√w_›p
->
dev_›p
 = dev_opp;

467 
√w_›p
->
øã
 = 
‰eq
;

468 
√w_›p
->
u_vﬁt
 = u_volt;

469 
√w_›p
->
avaûabÀ
 = 
åue
;

472 
hód
 = &
dev_›p
->
›p_li°
;

473 
	`li°_f‹_óch_íåy_rcu
(
›p
, &
dev_›p
->
›p_li°
, 
node
)

475 i‡(
√w_›p
->
øã
 < 
›p
->rate)

481 
hód
 = &
›p
->
node
;

485 
	`li°_add_rcu
(&
√w_›p
->
node
, 
hód
);

486 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

492 
	`§cu_nŸifõr_ˇŒ_chaö
(&
dev_›p
->
hód
, 
OPP_EVENT_ADD
, 
√w_›p
);

494 
	}
}

515 
	$›p_£t_avaûabûôy
(
devi˚
 *
dev
, 
‰eq
,

516 
boﬁ
 
avaûabûôy_ªq
)

518 
devi˚_›p
 *
tmp_dev_›p
, *
dev_›p
 = 
	`ERR_PTR
(-
ENODEV
);

519 
›p
 *
√w_›p
, *
tmp_›p
, *›∞
	`ERR_PTR
(-
ENODEV
);

520 
r
 = 0;

523 
√w_›p
 = 
	`kmÆloc
((
›p
), 
GFP_KERNEL
);

524 i‡(!
√w_›p
)

526 
	`¥ötk
("%s: U«bÀÅÿ¸óã OPP\n", 
__func__
);

527  -
ENOMEM
;

530 
	`muãx_lock
(&
dev_›p_li°_lock
);

533 
	`li°_f‹_óch_íåy
(
tmp_dev_›p
, &
dev_›p_li°
, 
node
)

535 i‡(
dev
 =
tmp_dev_›p
->dev)

537 
dev_›p
 = 
tmp_dev_›p
;

541 i‡(
	`IS_ERR
(
dev_›p
))

543 
r
 = 
	`PTR_ERR
(
dev_›p
);

544 
	`¥ötk
("%s: Devi˚ OPPÇŸ found (%d)\n", 
__func__
, 
r
);

545 
u∆ock
;

549 
	`li°_f‹_óch_íåy
(
tmp_›p
, &
dev_›p
->
›p_li°
, 
node
)

551 i‡(
tmp_›p
->
øã
 =
‰eq
)

553 
›p
 = 
tmp_›p
;

557 i‡(
	`IS_ERR
(
›p
))

559 
r
 = 
	`PTR_ERR
(
›p
);

560 
u∆ock
;

564 i‡(
›p
->
avaûabÀ
 =
avaûabûôy_ªq
)

566 
u∆ock
;

570 *
√w_›p
 = *
›p
;

573 
√w_›p
->
avaûabÀ
 = 
avaûabûôy_ªq
;

575 
	`li°_ª∂a˚_rcu
(&
›p
->
node
, &
√w_›p
->node);

576 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

577 
	`synchr⁄ize_rcu
();

580 i‡(
avaûabûôy_ªq
)

582 
	`§cu_nŸifõr_ˇŒ_chaö
(&
dev_›p
->
hód
, 
OPP_EVENT_ENABLE
,

583 
√w_›p
);

587 
	`§cu_nŸifõr_ˇŒ_chaö
(&
dev_›p
->
hód
, 
OPP_EVENT_DISABLE
,

588 
√w_›p
);

592 
√w_›p
 = 
›p
;

593 
out
;

595 
u∆ock
:

596 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

597 
out
:

598 
	`k‰ì
(
√w_›p
);

599  
r
;

600 
	}
}

617 
	$›p_íabÀ
(
devi˚
 *
dev
, 
‰eq
)

619  
	`›p_£t_avaûabûôy
(
dev
, 
‰eq
, 
åue
);

620 
	}
}

638 
	$›p_dißbÀ
(
devi˚
 *
dev
, 
‰eq
)

640  
	`›p_£t_avaûabûôy
(
dev
, 
‰eq
, 
Ál£
);

641 
	}
}

643 #ifde‡
CONFIG_CPU_FREQ


669 
	$›p_öô_˝u‰eq_èbÀ
(
devi˚
 * 
dev
,

670 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
)

672 
devi˚_›p
 *
dev_›p
;

673 
›p
 *opp;

674 
˝u‰eq_‰equícy_èbÀ
 *
‰eq_èbÀ
;

675 
i
 = 0;

678 
	`muãx_lock
(&
dev_›p_li°_lock
);

680 
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

681 i‡(
	`IS_ERR
(
dev_›p
))

683 
r
 = 
	`PTR_ERR
(
dev_›p
);

684 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

685 
	`¥ötk
("%s: Devi˚ OPPÇŸ found (%d)\n", 
__func__
, 
r
);

686  
r
;

689 
‰eq_èbÀ
 = 
	`kzÆloc
((
˝u‰eq_‰equícy_èbÀ
) *

690 (
	`›p_gë_›p_cou¡
(
dev
Ë+ 1), 
GFP_KERNEL
);

691 i‡(!
‰eq_èbÀ
)

693 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

694 
	`¥ötk
("%s: UnableÅoállocate frequencyÅable\n",

695 
__func__
);

696  -
ENOMEM
;

699 
	`li°_f‹_óch_íåy
(
›p
, &
dev_›p
->
›p_li°
, 
node
)

701 i‡(
›p
->
avaûabÀ
)

703 
‰eq_èbÀ
[
i
].
ödex
 = i;

704 
‰eq_èbÀ
[
i
].
‰equícy
 = 
›p
->
øã
;

705 
i
++;

708 
	`muãx_u∆ock
(&
dev_›p_li°_lock
);

710 
‰eq_èbÀ
[
i
].
ödex
 = i;

711 
‰eq_èbÀ
[
i
].
‰equícy
 = 
CPUFREQ_TABLE_END
;

713 *
èbÀ
 = &
‰eq_èbÀ
[0];

716 
	}
}

725 
	$›p_‰ì_˝u‰eq_èbÀ
(
devi˚
 * 
dev
,

726 
˝u‰eq_‰equícy_èbÀ
 **
èbÀ
)

728 i‡(!
èbÀ
)

733 
	`k‰ì
(*
èbÀ
);

734 *
èbÀ
 = 
NULL
;

735 
	}
}

743 
§cu_nŸifõr_hód
 *
	$›p_gë_nŸifõr
(
devi˚
 *
dev
)

745 
devi˚_›p
 *
dev_›p
 = 
	`föd_devi˚_›p
(
dev
);

747 i‡(
	`IS_ERR
(
dev_›p
))

749  
	`ERR_CAST
(
dev_›p
);

752  &
dev_›p
->
hód
;

753 
	}
}

	@component/pm/regulator/regulator.c

23 
	~<löux/kî√l.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/îr.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

28 
	~<löux/ªguœt‹/drivî.h
>

29 
	~<löux/ªguœt‹/machöe.h
>

31 
	~"ªguœt‹.h
"

33 
__devöô
 
	$ªguœt‹_¥obe
(
∂©f‹m_devi˚
 *
devi˚
)

35 
ªguœt‹_dev
 *
rdev
;

36 
hisi_ªguœt‹_d©a
 *
pd©a
 = 
devi˚
->
dev
.
∂©f‹m_d©a
;

37 
ªt
 = 0;

39 
rdev
 = 
	`ªguœt‹_ªgi°î
(
pd©a
->
desc
, &
devi˚
->
dev
,Öd©a->
öô_d©a
,Öd©a, 
NULL
);

40 i‡(
	`IS_ERR
(
rdev
))

42 
	`¥ötk
("failedÅoÑegisterÑegulator %s\n",

43 
pd©a
->
desc
->
«me
);

47 
	`∂©f‹m_£t_drvd©a
(
devi˚
, 
rdev
);

49 if(!
pd©a
->
desc
->
›s
->
	`is_íabÀd
(
rdev
))

51 
ªt
 = 
pd©a
->
desc
->
›s
->
	`íabÀ
(
rdev
);

53  
ªt
;

54 
	}
}

56 
__devexô
 
	$ªguœt‹_ªmove
(
∂©f‹m_devi˚
 *
devi˚
)

58 
ªguœt‹_dev
 *
rdev
 = 
	`∂©f‹m_gë_drvd©a
(
devi˚
);

60 
	`ªguœt‹_uƒegi°î
(
rdev
);

63 
	}
}

66 
∂©f‹m_drivî
 
	gªguœt‹_drivî
 = {

67 .
drivî
 = {

68 .
«me
 = "hisi_regulator",

69 .
	gow√r
 = 
THIS_MODULE
,

71 .
	g¥obe
 = 
ªguœt‹_¥obe
,

72 .
	gªmove
 = 
__devexô_p
(
ªguœt‹_ªmove
),

75 
__öô
 
	$ªguœt‹_öô
()

77  
	`∂©f‹m_drivî_ªgi°î
(&
ªguœt‹_drivî
);

78 
	}
}

80 
	$ªguœt‹_exô
()

82 
	`∂©f‹m_drivî_uƒegi°î
(&
ªguœt‹_drivî
);

83 
	}
}

	@extdrv/ak7756en/ak7756.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@extdrv/ak7756en/ak7756en.c

25 
	~<löux/kî√l.h
>

26 
	~<löux/vîsi⁄.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/ty≥s.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/f˙é.h
>

31 
	~<löux/mm.h
>

32 
	~<löux/¥oc_fs.h
>

33 
	~<löux/fs.h
>

34 
	~<löux/¶ab.h
>

36 
	~<löux/öô.h
>

37 
	~<asm/uac˚ss.h
>

38 
	~<mach/h¨dw¨e.h
>

39 
	~<asm/io.h
>

40 
	~<asm/sy°em.h
>

41 #i‚de‡
CONFIG_HISI_SNAPSHOT_BOOT


42 
	~<löux/miscdevi˚.h
>

44 
	~<löux/dñay.h
>

46 
	~<löux/¥oc_fs.h
>

47 
	~<löux/pﬁl.h
>

49 
	~<mach/h¨dw¨e.h
>

50 
	~<asm/bô›s.h
>

51 
	~<asm/uac˚ss.h
>

52 
	~<asm/úq.h
>

54 
	~<löux/moduÀ∑øm.h
>

55 
	~<löux/i›‹t.h
>

56 
	~<löux/öãºu±.h
>

57 
	~<löux/ªboŸ.h
>

58 
	~<löux/nŸifõr.h
>

59 
	~<löux/i2c.h
>

61 
	~"ak7756í.h
"

62 
	~"ak7756í_def.h
"

63 
	~"ak7756í_¥am.h
"

64 
	~"ak7756í_¸am.h
"

66 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


67 
	~"himedü.h
"

70 
	#CHIP_NUM
 1

	)

71 
	#DEV_NAME
 "ak7756í"

	)

72 
	#DEBUG_LEVEL
 1

	)

73 
	#DPRINTK
(
Àvñ
,
fmt
,
¨gs
...Ëdo{ if÷evñ < 
DEBUG_LEVEL
)\

	)

74 
¥ötk
(
KERN_INFO
 "%†[%†,%d]: " 
fmt
 "\n",
DEV_NAME
,
__FUNCTION__
,
__LINE__
,##
¨gs
);\

76 
	#CEILING_2_POWER
(
x
,
a
Ë–((xË+ (◊Ë- 1ËË& ( ~(◊Ë- 1ËË)

	)

79 
›í_˙t
 = 0;

81 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


82 
himedü_devi˚
 
s_°Ak7756íDevi˚
;

85 
i2c_˛õ¡
* 
ak7756_˛õ¡
;

87 
i2c_bﬂrd_öfo
 
ak7756_i2c_öfo
 =

89 
	`I2C_BOARD_INFO
("ak7756", 
AK7756EN_I2C_SLAVE_ADDR
),

90 
	}
};

91 * 
	gpu8Ak77d•RAM
 = 
NULL
;

92 * 
	gpu8PhyAk77d•CRAM
 = 
NULL
;

93 * 
	gpu8PhyAk77d•PRAM
 = 
NULL
;

95 
ak7756í_devi˚_öô
( );

97 
hi_i2c_dma_wrôe
(c⁄° 
i2c_˛õ¡
* 
˛õ¡
, 
d©a_addr
, 
ªg_addr
, 
ªg_addr_num
, 
Àngth
);

99 
	$i2c_˛õ¡_öô
()

101 
i2c_ad≠ãr
* 
i2c_ad≠
;

103 
i2c_ad≠
 = 
	`i2c_gë_ad≠ãr
(2);

104 
ak7756_˛õ¡
 = 
	`i2c_√w_devi˚
(
i2c_ad≠
, &
ak7756_i2c_öfo
);

106 
	`i2c_put_ad≠ãr
(
i2c_ad≠
);

109 
	}
}

111 
	$i2c_˛õ¡_exô
()

113 
	`i2c_uƒegi°î_devi˚
(
ak7756_˛õ¡
);

114 
	}
}

116 
	$hi_i2c_ªad_w‹d
(
devaddªss
, 
addªss
)

118 
ªt_d©a0
 = 0xFF;

119 
ªt_d©a1
 = 0xFF;

120 
ªt
;

121 
i2c_˛õ¡
* 
˛õ¡
 = 
ak7756_˛õ¡
;

122 
buf
[2];

124 
buf
[0] = 
addªss
;

125 
ªt
 = 
	`i2c_ma°î_ªcv
(
˛õ¡
, 
buf
, 2);

126 i‡(
ªt
 >= 0)

128 
ªt_d©a0
 = 
buf
[0];

129 
ªt_d©a1
 = 
buf
[1];

131 #ifde‡
DBG_AK7756EN


132 
	`¥ötk
("Func:%s,Üöe:%d,Ñë_d©a0:0x%x,Ñë_d©a1:0x%x.\n", 
__FUNCTION__
, 
__LINE__
, 
ªt_d©a0
, 
ªt_d©a1
);

135 
	}
}

138 
	$hi_i2c_ªad_byã
(
devaddªss
, 
addªss
)

140 
ªt_d©a
 = 0xFF;

141 
ªt
;

142 
i2c_˛õ¡
* 
˛õ¡
 = 
ak7756_˛õ¡
;

143 
buf
[2];

145 
buf
[0] = 
addªss
;

146 
ªt
 = 
	`i2c_ma°î_ªcv
(
˛õ¡
, 
buf
, 1);

147 i‡(
ªt
 >= 0)

149 
ªt_d©a
 = 
buf
[0];

151  
ªt_d©a
;

152 
	}
}

154 
	$hi_i2c_wrôe_byã
(
devaddªss
, 
addªss
, 
d©a
)

156 
ªt
;

157 
buf
[2];

158 
i2c_˛õ¡
* 
˛õ¡
 = 
ak7756_˛õ¡
;

160 
buf
[0] = 
addªss
;

161 
buf
[1] = 
d©a
;

163 
ªt
 = 
	`i2c_ma°î_£nd
(
˛õ¡
, 
buf
, 2);

164  
ªt
;

165 
	}
}

167 
	$ak7756í_ªad
(
chù_addr
, 
ªg_addr
)

169  
	`hi_i2c_ªad_byã
(
chù_addr
, 
ªg_addr
);

170 
	}
}

172 
	$ak7756í_wrôe
(
chù_addr
, 
ªg_addr
, 
vÆue
)

174 
	`hi_i2c_wrôe_byã
(
chù_addr
, 
ªg_addr
, 
vÆue
);

175 
	}
}

177 
	$ak7756í_dow∆ﬂd_ømd©a
( )

179 
ªt
 = 0;

181 
i2c_˛õ¡
* 
˛õ¡
 = 
ak7756_˛õ¡
;

183 #ifde‡
DBG_AK7756EN


184 
	`¥ötk
("Func:%s,Üöe:%d,Öu8PhyAk77d•CRAM :0x%p,Öu8PhyAk77d•PRAM:0x%p!\n", 
__FUNCTION__
, 
__LINE__
, 
pu8PhyAk77d•CRAM
, 
pu8PhyAk77d•PRAM
);

187 
ªt
 = 
	`hi_i2c_dma_wrôe
(
˛õ¡
, ()
pu8PhyAk77d•CRAM
, 0xB4, 1, (
ak77d•CRAM
));

188 i‡(0 !
ªt
)

190 
	`¥ötk
("Func:%s,Üöe:%d,ák7756 dow∆ﬂd d©®tÿ¸am faûed!\n", 
__FUNCTION__
, 
__LINE__
);

191  
ªt
;

193 
	`m¶ìp
(10);

198 
ªt
 = 
	`hi_i2c_dma_wrôe
(
˛õ¡
, ()
pu8PhyAk77d•PRAM
, 0xB8, 1, (
ak77d•PRAM
));

199 i‡(0 !
ªt
)

201 
	`¥ötk
("Func:%s,Üöe:%d,ák7756 dow∆ﬂd d©®tÿ¥am faûed!\n", 
__FUNCTION__
, 
__LINE__
);

202  
ªt
;

209 
	}
}

211 
	$ak7756í_ªg_dump
(
ªg_num
)

213 
i
 = 0;

214 
i
 = 0; i < 
ªg_num
; i++)

216 
	`¥ötk
("ªg%d =%x,", 
i
, 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, i + 
AK7756_READ_REG_BASEADDR
));

217 i‡(0 =((
i
 + 1) % 8))

219 
	`¥ötk
("\n");

222 
	}
}

224 
	$ak7756í_so·_ª£t
( )

234 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x00 + 
AK7756_WRITE_REG_BASEADDR
, 0x40);

246 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x02 + 
AK7756_WRITE_REG_BASEADDR
, 0x42);

249 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x03 + 
AK7756_WRITE_REG_BASEADDR
, 0x00);

252 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x04 + 
AK7756_WRITE_REG_BASEADDR
, 0x00);

255 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x05 + 
AK7756_WRITE_REG_BASEADDR
, 0x20);

258 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x06 + 
AK7756_WRITE_REG_BASEADDR
, 0x00);

261 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x07 + 
AK7756_WRITE_REG_BASEADDR
, 0x38);

264 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x08 + 
AK7756_WRITE_REG_BASEADDR
, 0x78);

267 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x09 + 
AK7756_WRITE_REG_BASEADDR
, 0x80);

270 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_WRITE_REG_BASEADDR
, 0xD0);

283 
	`m¶ìp
(10);

285 
	`ak7756í_dow∆ﬂd_ømd©a
();

286 
	`m¶ìp
(10);

291 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_WRITE_REG_BASEADDR
, 0xDC);

292 
	}
}

295 
	$ak7756í_›í
(
öode
* inode, 
fûe
* file)

297 i‡(0 =
›í_˙t
++)

303 
	}
}

306 
	$ak7756í_˛o£
(
öode
* inode, 
fûe
* file)

308 
›í_˙t
--;

311 
	}
}

313 
	$ak7756í_io˘l
(
fûe
* fûe, 
cmd
, 
¨g
)

315 
__u£r
* 
¨gp
 = (__u£r*)
¨g
;

316 
Ak7756_Cål
 
ãmp
;

317 
Ak7756_Cål
* 
Audio_Cål
 = 
NULL
;

319 
C⁄åﬁ_Regi°î0
 
Cål_Reg0
;

320 
C⁄åﬁ_Regi°î1
 
Cål_Reg1
;

321 
C⁄åﬁ_Regi°î2
 
Cål_Reg2
;

322 
C⁄åﬁ_Regi°î5
 
Cål_Reg5
;

323 
C⁄åﬁ_Regi°î6
 
Cål_Reg6
;

324 
C⁄åﬁ_Regi°î9
 
Cål_Reg9
;

325 
C⁄åﬁ_Regi°î10
 
Cål_Reg10
;

327 i‡(
NULL
 !
¨gp
)

329 i‡(
	`c›y_‰om_u£r
(&
ãmp
, 
¨gp
, (
Ak7756_Cål
)))

331  -
EFAULT
;

335 
Audio_Cål
 = &
ãmp
;

342 
cmd
)

344 
SET_AK7756_SAMPLE_RATE
:

346 #ifde‡
DBG_AK7756EN


347 
	`¥ötk
("Func:%s,Üöe:%d,ák7756í sam∂eR©ê%d\n", 
__FUNCTION__
, 
__LINE__
, 
Audio_Cål
->
Sam∂eR©e
);

349 
Cål_Reg1
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x01 + 
AK7756_READ_REG_BASEADDR
);

350 
Cål_Reg1
.
bô
.
dfs
 = 
Audio_Cål
->
Sam∂eR©e
;

351 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x01 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg1
.
b8
);

353 
SET_AK7756_DATA_BITWIDTH
:

354 i‡(
Audio_Cål
->
BôWidth
 <= 5)

356 
Cål_Reg5
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x05 + 
AK7756_READ_REG_BASEADDR
);

357 
Cål_Reg5
.
bô
.
dif
 = 
Audio_Cål
->
BôWidth
;

358 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x05 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg5
.
b8
);

360 
Cål_Reg6
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x06 + 
AK7756_READ_REG_BASEADDR
);

361 
Cål_Reg6
.
bô
.
dof1
 = 
Audio_Cål
->
BôWidth
;

362 
Cål_Reg6
.
bô
.
dof2
 = 
Audio_Cål
->
BôWidth
;

363 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x06 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg6
.
b8
);

367 
	`¥ötk
("Func:%s,Üöe:%d,ák7756í unsuµ‹àbôwidth %d.\n", 
__FUNCTION__
, 
__LINE__
, 
Audio_Cål
->
BôWidth
);

375 
SET_AK7756_TRANSFER_MODE
:

376 
Cål_Reg2
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x02 + 
AK7756_READ_REG_BASEADDR
);

377 
Cål_Reg2
.
bô
.
diÂcm
 = 
Audio_Cål
->
TønsMode
;

378 
Cål_Reg2
.
bô
.
difi2s
 = ~
Audio_Cål
->
TønsMode
;

379 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x02 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg2
.
b8
);

381 
SET_AK7756_CTRL_MODE
:

382 
Cål_Reg0
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x00 + 
AK7756_READ_REG_BASEADDR
);

383 i‡(1 =
Audio_Cål
->
CålMode
)

385 
Cål_Reg0
.
bô
.
ckm
 = 6;

389 
Cål_Reg0
.
bô
.
ckm
 = 4;

391 
Cål_Reg0
.
bô
.
bôfs
 = 
Audio_Cål
->
BôFs
;

392 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x00 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg0
.
b8
);

395 
Cål_Reg1
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x01 + 
AK7756_READ_REG_BASEADDR
);

396 
Cål_Reg1
.
bô
.
dfs
 = 
Audio_Cål
->
Sam∂eR©e
;

397 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x01 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg0
.
b8
);

399 
SET_AK7756_DAC_VOL_CTRL
:

400 
Cål_Reg9
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x09 + 
AK7756_READ_REG_BASEADDR
);

401 
Cål_Reg9
.
bô
.
mgaö
 = 
Audio_Cål
->
MicGaö
;

402 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x09 + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg9
.
b8
);

404 
SET_AK7756_ADC_POWER_SETUP
:

405 
Cål_Reg10
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_READ_REG_BASEADDR
);

406 
Cål_Reg10
.
bô
.
pmadc
 = 
Audio_Cål
->
PowîUp
;

407 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg10
.
b8
);

409 
SET_AK7756_DAC_POWER_SETUP
:

410 
Cål_Reg10
.
b8
 = 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_READ_REG_BASEADDR
);

411 
Cål_Reg10
.
bô
.
pmdac
 = 
Audio_Cål
->
PowîUp
;

412 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_WRITE_REG_BASEADDR
, 
Cål_Reg10
.
b8
);

414 
AK7756_SOFT_RESET
:

415 
	`ak7756í_so·_ª£t
();

417 
AK7756_REG_DUMP
:

418 
	`ak7756í_ªg_dump
(11);

430 
	}
}

432 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


433 
	$ak7756í_‰ìze
(
himedü_devi˚
* 
pdev
)

435 
	`¥ötk
(
KERN_ALERT
 "%† %d\n", 
__FUNCTION__
, 
__LINE__
);

438 
	}
}

440 
	$ak7756í_ª°‹e
(
himedü_devi˚
* 
pdev
)

442 i‡(
	`ak7756í_devi˚_öô
() < 0)

444 
	`¥ötk
(
KERN_ALERT
 "%† %d,ák7756í devi˚ inô faû!\n", 
__FUNCTION__
, 
__LINE__
);

448 
	`¥ötk
(
KERN_ALERT
 "%† %d\n", 
__FUNCTION__
, 
__LINE__
);

451 
	}
}

458 
fûe_›î©i⁄s
 
	gak7756í_f›s
 =

460 .
ow√r
 = 
THIS_MODULE
,

461 .
	gu∆ocked_io˘l
 = 
ak7756í_io˘l
,

462 .
	g›í
 = 
ak7756í_›í
,

463 .
	gªÀa£
 = 
ak7756í_˛o£


466 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


467 
himedü_›s
 
	g°Ak7756íDrvOps
 =

469 .
pm_‰ìze
 = 
ak7756í_‰ìze
,

470 .
	gpm_ª°‹e
 = 
ak7756í_ª°‹e


473 
miscdevi˚
 
	gak7756í_dev
 =

475 
MISC_DYNAMIC_MINOR
,

476 
DEV_NAME
,

477 &
ak7756í_f›s
,

481 
	$ak7756í_ªboŸ
(
nŸifõr_block
* 
£lf
, 
d©a
, * 
pd©a
)

484 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_WRITE_REG_BASEADDR
, 0x20);

487 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x08 + 
AK7756_WRITE_REG_BASEADDR
, 0xE0);

489 
	`¥ötk
("Func:%s,Üöe:%d, sy°emÑeboŸ######\n", 
__FUNCTION__
, 
__LINE__
);

492 
	}
}

494 
nŸifõr_block
 
	gak7756í_ªboŸ_nŸifõr
 =

496 .
nŸifõr_ˇŒ
 = 
ak7756í_ªboŸ
,

499 
	$ak7756í_devi˚_öô
( )

501 
uiBuf„rLí
 = 0;

502 
uiCRAMbuf„rLí
 = 0;

503 
uiPRAMbuf„rLí
 = 0;

506 i‡(
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x60) != 0x56)

508 
	`DPRINTK
(0, "öôák7756íÉº‹: 0x%x", 
	`ak7756í_ªad
(
AK7756EN_I2C_SLAVE_ADDR
, 0x60));

512 
uiCRAMbuf„rLí
 = 
	`CEILING_2_POWER
((
ak77d•CRAM
), 4);

513 
uiPRAMbuf„rLí
 = 
	`CEILING_2_POWER
((
ak77d•PRAM
), 4);

514 
uiBuf„rLí
 = 
uiCRAMbuf„rLí
 + 
uiPRAMbuf„rLí
;

515 
pu8Ak77d•RAM
 = (*)
	`kmÆloc
(
uiBuf„rLí
, 
GFP_KERNEL
);

517 i‡(!
pu8Ak77d•RAM
)

519 
	`¥ötk
("kmalloc Ak77dspRAM buffer fail!\n");

522 
	`mem˝y
(
pu8Ak77d•RAM
, 
ak77d•CRAM
, (ak77dspCRAM));

523 
pu8PhyAk77d•CRAM
 = (*)
	`vút_to_phys
(
pu8Ak77d•RAM
);

525 
	`mem˝y
(
pu8Ak77d•RAM
 + 
uiCRAMbuf„rLí
, 
ak77d•PRAM
, (ak77dspPRAM));

526 
pu8PhyAk77d•PRAM
 = (*)
	`vút_to_phys
(
pu8Ak77d•RAM
 + 
uiCRAMbuf„rLí
);

533 
	`ªgi°î_ªboŸ_nŸifõr
(&
ak7756í_ªboŸ_nŸifõr
);

536 
	}
}

538 
	$ak7756í_devi˚_exô
( )

541 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x0A + 
AK7756_WRITE_REG_BASEADDR
, 0x20);

544 
	`ak7756í_wrôe
(
AK7756EN_I2C_SLAVE_ADDR
, 0x08 + 
AK7756_WRITE_REG_BASEADDR
, 0xE0);

546 
	`k‰ì
(
pu8Ak77d•RAM
);

549 
	}
}

552 
__öô
 
	$ak7756í_öô
()

554 
ªt
;

556 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


557 
	`¢¥ötf
(
s_°Ak7756íDevi˚
.
devfs_«me
, (s_°Ak7756íDevi˚.devfs_«me), 
DEV_NAME
);

559 
s_°Ak7756íDevi˚
.
mö‹
 = 
HIMEDIA_DYNAMIC_MINOR
;

560 
s_°Ak7756íDevi˚
.
f›s
 = &
ak7756í_f›s
;

561 
s_°Ak7756íDevi˚
.
drv›s
 = &
°Ak7756íDrvOps
;

562 
s_°Ak7756íDevi˚
.
ow√r
 = 
THIS_MODULE
;

564 
ªt
 = 
	`himedü_ªgi°î
(&
s_°Ak7756íDevi˚
);

565 i‡(
ªt
)

567 
	`DPRINTK
(0, "couldÇotÑegisterák7756en device");

571 
ªt
 = 
	`misc_ªgi°î
(&
ak7756í_dev
);

572 i‡(
ªt
)

574 
	`DPRINTK
(0, "couldÇotÑegisterák7756en device");

579 
	`i2c_˛õ¡_öô
();

581 i‡(
	`ak7756í_devi˚_öô
() < 0)

583 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


584 
	`himedü_uƒegi°î
(&
s_°Ak7756íDevi˚
);

586 
	`misc_dîegi°î
(&
ak7756í_dev
);

589 
	`DPRINTK
(0, "ak7756en device init fail, deregister it!");

594 
	`DPRINTK
(1, "ak7756en driver init successful!");

596 
	`¥ötk
("loadák7756en.ko for Hi3516A ok!\n");

598  
ªt
;

599 
	}
}

601 
__exô
 
	$ak7756í_exô
()

603 
	`i2c_˛õ¡_exô
();

605 
	`ak7756í_devi˚_exô
();

607 
	`uƒegi°î_ªboŸ_nŸifõr
(&
ak7756í_ªboŸ_nŸifõr
);

609 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


610 
	`himedü_uƒegi°î
(&
s_°Ak7756íDevi˚
);

612 
	`misc_dîegi°î
(&
ak7756í_dev
);

615 
	`DPRINTK
(1, "deregisterák7756en");

617 
	`¥ötk
("rmmodák7756en.ko for Hi3516A ok!\n");

618 
	}
}

620 
moduÀ_öô
(
ak7756í_öô
);

621 
moduÀ_exô
(
ak7756í_exô
);

622 
MODULE_LICENSE
("GPL");

623 
MODULE_AUTHOR
("Hisilicon");

	@extdrv/ak7756en/ak7756en.h

8 #i‚de‡
_INC_AK7756EN


9 
	#_INC_AK7756EN


	)

11 
	#AK7756EN_I2C_SLAVE_ADDR
 0x30

	)

13 
	#SET_AK7756_SAMPLE_RATE
 0x1

	)

14 
	#SET_AK7756_DATA_BITWIDTH
 0x2

	)

15 
	#SET_AK7756_CTRL_MODE
 0x3

	)

16 
	#SET_AK7756_TRANSFER_MODE
 0x4

	)

17 
	#SET_AK7756_DAC_VOL_CTRL
 0x5

	)

18 
	#SET_AK7756_ADC_POWER_SETUP
 0x6

	)

19 
	#SET_AK7756_DAC_POWER_SETUP
 0x7

	)

20 
	#AK7756_REG_DUMP
 0x8

	)

21 
	#AK7756_SOFT_RESET
 0x9

	)

23 
	#AK7756_SET_8K_SAMPLERATE
 8000

	)

24 
	#AK7756_SET_16K_SAMPLERATE
 16000

	)

26 
	#AK7756_SET_SLAVE_MODE
 0

	)

27 
	#AK7756_SET_MASTER_MODE
 1

	)

29 
	#AK7756_SET_16BIT_WIDTH
 0

	)

30 
	#AK7756_SET_20BIT_WIDTH
 1

	)

31 
	#AK7756_SET_24BIT_WIDTH
 2

	)

32 
	#AK7756_SET_32BIT_WIDTH
 3

	)

34 
	#AK7756_READ_REG_BASEADDR
 0x40

	)

35 
	#AK7756_WRITE_REG_BASEADDR
 0xC0

	)

40 
	mCålMode
 : 1;

41 
	mTønsMode
 : 2;

42 
	mBôFs
 : 2;

43 
	mSam∂eR©e
 : 1;

44 
	mBôWidth
 : 3;

45 
	mMicGaö
 : 3;

46 
	mPowîUp
 : 1;

47 } 
	tAk7756_Cål
;

	@extdrv/ak7756en/ak7756en_cram.h

2 #i‚de‡
_AK77XX_DSP_CRAM_INCLUDED


3 
	#_AK77XX_DSP_CRAM_INCLUDED


	)

5 
	#_AK77XX_DSP_CRAM_BUF_SIZE
 2

	)

6 
	gak77d•CRAM
[
_AK77XX_DSP_CRAM_BUF_SIZE
] =

	@extdrv/ak7756en/ak7756en_def.h

1 #i‚de‡
_INC_AK7756EN_DEF


2 
	#_INC_AK7756EN_DEF


	)

8 
	mª£rved1
 : 2;

9 
	mbôfs
 : 2;

10 
	mckm
 : 3;

11 
	mª£rved0
 : 1;

12 } 
	mbô
;

13 
	mb8
;

14 } 
	tC⁄åﬁ_Regi°î0
;

20 
	mª£rved3
 : 1;

21 
	md•s
 : 3;

22 
	mdfs
 : 2;

23 
	mª£rved2
 : 1;

24 
	m¸˚
 : 1;

25 } 
	mbô
;

26 
	mb8
;

27 } 
	tC⁄åﬁ_Regi°î1
;

33 
	mª£rved5
 : 1;

34 
	mckr°n
 : 1;

35 
	m˝de
 : 1;

36 
	mª£rved4
 : 1;

37 
	mpcm
 : 2;

38 
	mdifi2s
 : 1;

39 
	mdiÂcm
 : 1;

40 } 
	mbô
;

41 
	mb8
;

42 } 
	tC⁄åﬁ_Regi°î2
;

48 
	mª£rved8
 : 1;

49 
	mss
 : 2;

50 
	mª£rved7
 : 1;

51 
	mb™k
 : 2;

52 
	mª£rved6
 : 1;

53 
	mwdãn
 : 1;

54 } 
	mbô
;

55 
	mb8
;

56 } 
	tC⁄åﬁ_Regi°î3
;

62 
	mª£rved10
: 1;

63 
	me„n
 : 1;

64 
	mwavp
 : 2;

65 
	mwavm
 : 1;

66 
	mª£rved9
 : 1;

67 
	md©¨am
 : 1;

68 
	mpomode
 : 1;

69 } 
	mbô
;

70 
	mb8
;

71 } 
	tC⁄åﬁ_Regi°î4
;

77 
	mª£rved11
 : 1;

78 
	mdif
 : 3;

79 
	m£ldo1
 : 2;

80 
	m£ldo2
 : 2;

81 } 
	mbô
;

82 
	mb8
;

83 } 
	tC⁄åﬁ_Regi°î5
;

89 
	mª£rved13
 : 1;

90 
	mdof1
 : 3;

91 
	mdof2
 : 2;

92 
	mª£rved12
 : 2;

93 } 
	mbô
;

94 
	mb8
;

95 } 
	tC⁄åﬁ_Regi°î6
;

101 
	mª£rved14
 : 3;

102 
	mpdaout
 : 1;

103 
	mout3e
 : 1;

104 
	m£ldo3
 : 1;

105 
	mjx0e
 : 1;

106 
	mjx1e
 : 1;

107 } 
	mbô
;

108 
	mb8
;

109 } 
	tC⁄åﬁ_Regi°î7
;

115 
	mª£rved15
 : 3;

116 
	mout1e
 : 1;

117 
	mout2e
 : 1;

118 
	mÃckí
 : 1;

119 
	mbickí
 : 1;

120 
	m£ldi2
 : 1;

121 } 
	mbô
;

122 
	mb8
;

123 } 
	tC⁄åﬁ_Regi°î8
;

129 
	mª£rved16
 : 4;

130 
	mmdif
 : 1;

131 
	mmgaö
 : 3;

132 } 
	mbô
;

133 
	mb8
;

134 } 
	tC⁄åﬁ_Regi°î9
;

140 
	mª£rved17
 : 1;

141 
	mpmosc
 : 1;

142 
	md•r°n
 : 1;

143 
	m¸°n
 : 1;

144 
	mpmmb
 : 1;

145 
	mpsdac
 : 1;

146 
	mpmdac
 : 1;

147 
	mpmadc
 : 1;

148 } 
	mbô
;

149 
	mb8
;

150 } 
	tC⁄åﬁ_Regi°î10
;

156 
	mª£rved19
 : 1;

157 
	mdls
 : 1;

158 
	mª£rved18
 : 5;

159 
	m°o
 : 1;

160 } 
	mbô
;

161 
	mb8
;

162 } 
	tC⁄åﬁ_Regi°î11
;

	@extdrv/ak7756en/ak7756en_pram.h

2 #i‚de‡
_AK77XX_DSP_PRAM_INCLUDED


3 
	#_AK77XX_DSP_PRAM_INCLUDED


	)

5 
	#_AK77XX_DSP_PRAM_BUF_SIZE
 52

	)

6 
	gak77d•PRAM
[
_AK77XX_DSP_PRAM_BUF_SIZE
] =

	@extdrv/piris/piris.c

22 
	~<löux/moduÀ.h
>

23 
	~<löux/î∫o.h
>

24 
	~<löux/miscdevi˚.h
>

25 
	~<löux/f˙é.h
>

27 
	~<löux/öô.h
>

28 
	~<löux/dñay.h
>

29 
	~<löux/¥oc_fs.h
>

30 
	~<löux/w‹kqueue.h
>

31 
	~<löux/hπimî.h
>

33 
	~<asm/uac˚ss.h
>

34 
	~<asm/sy°em.h
>

35 
	~<asm/io.h
>

37 
	~"púis.h
"

38 
	~"púis_ext.h
"

41 
	#PIRISI_ADRESS_BASE
 0x20210000

42 

	)

43 
__iomem
* 
	gªg_púisI_ba£_va
 = 0;

45 
	#HI_IO_PIRISI_ADDRESS
(
x
Ë(
ªg_púisI_ba£_va
 + ((x)-(
PIRISI_ADRESS_BASE
)))

	)

47 
	#PIRIS_CFG_REG
 
	`HI_IO_PIRISI_ADDRESS
(
PIRISI_ADRESS_BASE
 + 0x007C)

	)

48 
	#PIRIS_CTRL_REG
 
	`HI_IO_PIRISI_ADDRESS
(
PIRISI_ADRESS_BASE
 + 0x0400)

	)

50 
	#PIRIS_WRITE_REG
(
Addr
, 
VÆue
Ë((*(vﬁ©ûê*)(Addr)Ë(VÆue))

	)

51 
	#PIRIS_READ_REG
(
Addr
Ë(*(vﬁ©ûê*)(Addr))

	)

54 
	#MAX
(
a
, 
b
Ë◊ > b?á : b)

	)

55 
	#MIN
(
a
, 
b
Ë◊ < b?á : b)

	)

56 
	#MAX_MOTOR_PAHSE
 4

	)

57 
	#MAX_STEPS
 92

	)

58 
	#PIRIS_PPS
 100

	)

60 c⁄° 
	gmŸ‹_pha£_tbl
[
MAX_MOTOR_PAHSE
] = { 0x0, 0x1, 0x2, 0x3};

62 
	shiPIRIS_DEV


64 
	m§c_pos
;

65 
	mde°_pos
;

66 
	mµs
;

67 
	mpha£
;

68 c⁄° * 
	mpha£_tbl
;

69 
£m≠h‹e
 
	m£m
;

70 
timî_li°
 
	mtimî
;

71 } 
	tPIRIS_DEV
;

73 
PIRIS_DEV
* 
	gp_púis_dev
;

75 
DECLARE_COMPLETION
(
púis_comp
);

78 
	$púis_gpio_upd©e
(* 
pPúisPos
)

80 
p_púis_dev
->
de°_pos
 = *
pPúisPos
;

82 
p_púis_dev
->
µs
 = 
PIRIS_PPS
;

83 
p_púis_dev
->
µs
 = 
	`MAX
(
	`MIN
’_púis_dev->µs, 
HZ
), 1);

84 
p_púis_dev
->
timî
.
expúes
 = 
jiffõs
 + 
HZ
 /Ö_púis_dev->
µs
;

87 i‡(
p_púis_dev
->
timî
.
íåy
.
√xt
 !
NULL
)

92 
	`add_timî
(&
p_púis_dev
->
timî
);

95 
	}
}

100 
	$púis_‹igö_£t
(
PIRIS_DATA_S
* 
p°PúisD©a
)

102 
púis_pos
;

104 
púis_pos
 = 
p°PúisD©a
->
CurPos
;

106 
	`púis_gpio_upd©e
(&
púis_pos
);

109 
	`öô_com∂ëi⁄
(&
púis_comp
);

110 
	`waô_f‹_com∂ëi⁄
(&
púis_comp
);

112 i‡(
p°PúisD©a
->
ZîoIsMax
 == 1)

114 
p_púis_dev
->
§c_pos
 = 0;

115 
p_púis_dev
->
de°_pos
 = 0;

119 
p_púis_dev
->
§c_pos
 = 
p°PúisD©a
->
TŸÆSãp
 - 1;

120 
p_púis_dev
->
de°_pos
 = 
p°PúisD©a
->
TŸÆSãp
 - 1;

125 
	}
}

129 
	$púis_˛o£_£t
(
PIRIS_DATA_S
* 
p°PúisD©a
)

131 
púis_pos
;

133 
púis_pos
 = 
p°PúisD©a
->
CurPos
;

135 
	`púis_gpio_upd©e
(&
púis_pos
);

138 
	`öô_com∂ëi⁄
(&
púis_comp
);

139 
	`waô_f‹_com∂ëi⁄
(&
púis_comp
);

141 i‡(
p°PúisD©a
->
ZîoIsMax
 == 1)

143 
p_púis_dev
->
§c_pos
 = 
p°PúisD©a
->
TŸÆSãp
 - 1;

144 
p_púis_dev
->
de°_pos
 = 
p°PúisD©a
->
TŸÆSãp
 - 1;

148 
p_púis_dev
->
§c_pos
 = 0;

149 
p_púis_dev
->
de°_pos
 = 0;

154 
	}
}

159 
	$púis_›í
(
öode
* inode, 
fûe
* file)

161 
fûe
->
¥iv©e_d©a
 = 
p_púis_dev
;

165 
	}
}

167 
	$púis_˛o£
(
öode
* inode, 
fûe
* file)

170 
	}
}

173 
	$PIRIS_DRV_DißbÀ
()

175 
	`PIRIS_WRITE_REG
(
PIRIS_CTRL_REG
, 0x1F);

176 
	`PIRIS_WRITE_REG
(
PIRIS_CFG_REG
, 0x10);

178 
	}
}

181 
	$PIRIS_DRV_Wrôe
(
bôs
)

183 
bôs
)

186 
	`PIRIS_WRITE_REG
(
PIRIS_CTRL_REG
, 0x1F);

187 
	`PIRIS_WRITE_REG
(
PIRIS_CFG_REG
 , 0x15);

191 
	`PIRIS_WRITE_REG
(
PIRIS_CTRL_REG
, 0x1F);

192 
	`PIRIS_WRITE_REG
(
PIRIS_CFG_REG
 , 0x16);

196 
	`PIRIS_WRITE_REG
(
PIRIS_CTRL_REG
, 0x1F);

197 
	`PIRIS_WRITE_REG
(
PIRIS_CFG_REG
 , 0x1A);

201 
	`PIRIS_WRITE_REG
(
PIRIS_CTRL_REG
, 0x1F);

202 
	`PIRIS_WRITE_REG
(
PIRIS_CFG_REG
 , 0x19);

212 
	}
}

215 
	$púis_io˘l
(
fûe
* fûe, 
cmd
, 
¨g
)

217 
__u£r
* 
pPúisPos
;

218 
PIRIS_DATA_S
 
__u£r
* 
¨gp
;

219 
PIRIS_STATUS_E
 
__u£r
* 
pPúisSètus
;

220 
PIRIS_DEV
* 
p°PúisDev
 = (PIRIS_DEV*Ë
fûe
->
¥iv©e_d©a
;

222 
îr
 = 0;

224 i‡(
	`_IOC_TYPE
(
cmd
Ë!
PIRIS_IOC_MAGIC
)

226  -
ENOTTY
;

228 i‡(
	`_IOC_NR
(
cmd
Ë> 
PIRIS_IOC_MAXNR
)

230  -
ENOTTY
;

233 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

235 
îr
 = !
	`ac˚ss_ok
(
VERIFY_WRITE
, (
__u£r
*)
¨g
, 
	`_IOC_SIZE
(
cmd
));

237 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

239 
îr
 = !
	`ac˚ss_ok
(
VERIFY_READ
, (
__u£r
*)
¨g
, 
	`_IOC_SIZE
(
cmd
));

242 i‡(
îr
)

244  -
EFAULT
;

248 i‡(
	`down_öãºu±ibÀ
(&
p°PúisDev
->
£m
))

250  -
ERESTARTSYS
;

253 
cmd
)

255 
PIRIS_SET_ACT_ARGS
:

256 
pPúisPos
 = (
__u£r
*)
¨g
;

257 
	`púis_gpio_upd©e
(
pPúisPos
);

260 
PIRIS_SET_ORGIN
:

261 
¨gp
 = (
PIRIS_DATA_S
 
__u£r
*)
¨g
;

262 
	`púis_‹igö_£t
(
¨gp
);

265 
PIRIS_SET_CLOSE
:

266 
¨gp
 = (
PIRIS_DATA_S
 
__u£r
*)
¨g
;

267 
	`púis_˛o£_£t
(
¨gp
);

270 
PIRIS_GET_STATUS
:

271 
pPúisSètus
 = (
PIRIS_STATUS_E
 
__u£r
*)
¨g
;

273 i‡(
p°PúisDev
->
de°_pos
 !p°PúisDev->
§c_pos
)

275 *
pPúisSètus
 = 
PIRIS_BUSY
;

279 *
pPúisSètus
 = 
PIRIS_IDLE
;

289 
	`up
(&
p°PúisDev
->
£m
);

292 
	}
}

295 
fûe_›î©i⁄s
 
	gpúis_f›s
 =

297 .
ow√r
 = 
THIS_MODULE
,

298 .
	gu∆ocked_io˘l
 = 
púis_io˘l
 ,

299 .
	g›í
 = 
púis_›í
 ,

300 .
	gªÀa£
 = 
púis_˛o£
 ,

303 
miscdevi˚
 
	gg°PúisDev
 =

305 .
mö‹
 = 
MISC_DYNAMIC_MINOR
,

306 .
	g«me
 = "piris" ,

307 .
	gf›s
 = &
púis_f›s
,

310 
	$púis_timî_cb
(
¨g
)

312 
sign
 = 1;

313 
bôs
;

315 
PIRIS_DEV
* 
p°PúisDev
 = (PIRIS_DEV*)
¨g
;

317 i‡(
p°PúisDev
->
§c_pos
 =p°PúisDev->
de°_pos
)

322 
sign
 = (
p°PúisDev
->
de°_pos
 -Ö°PúisDev->
§c_pos
 < 0) ? -1 : 1;

323 
p°PúisDev
->
§c_pos
 +
sign
;

326 
p°PúisDev
->
pha£
 = (p°PúisDev->pha£ + 
MAX_MOTOR_PAHSE
 + 
sign
) % MAX_MOTOR_PAHSE;

327 
bôs
 = 
p°PúisDev
->
pha£_tbl
[p°PúisDev->
pha£
];

329 
	`PIRIS_DRV_Wrôe
(
bôs
);

331 i‡(
p°PúisDev
->
de°_pos
 =p°PúisDev->
§c_pos
)

333 
	`com∂ëe
(&
púis_comp
);

336 
p°PúisDev
->
timî
.
expúes
 = 
jiffõs
 + 
HZ
 /Ö°PúisDev->
µs
;

337 
	`add_timî
(&
p°PúisDev
->
timî
);

342 
	}
}

345 
	$hi_púis_i•_ªgi°î
()

347 
ISP_PIRIS_CALLBACK_S
 
°PúisCb
 = {0};

349 
°PúisCb
.
p‚_púis_gpio_upd©e
 = (
	`HI_S32
 (*)(
HI_S32
))
púis_gpio_upd©e
;

350 i‡(
	`CKFN_ISP_Regi°îPúisCÆlBack
())

352 
	`CALL_ISP_Regi°îPúisCÆlBack
(0, &
°PúisCb
);

356 
	`¥ötk
("registerÖiris_gpio_write_callbackÅo isp failed, hi_piris init is failed!\n");

361 
	}
}

366 
__öô
 
	$púis_öô
()

368 
ªt
;

370 
p_púis_dev
 = 
	`kmÆloc
((
PIRIS_DEV
), 
GFP_KERNEL
);

372 i‡(!
p_púis_dev
)

376 
	`mem£t
(
p_púis_dev
, 0x0, (
PIRIS_DEV
));

378 
	`£ma_öô
(&
p_púis_dev
->
£m
, 1);

379 
	`öô_com∂ëi⁄
(&
púis_comp
);

382 
	`öô_timî
(&
p_púis_dev
->
timî
);

383 
p_púis_dev
->
timî
.
fun˘i⁄
 = 
púis_timî_cb
;

384 
p_púis_dev
->
timî
.
d©a
 = ()p_piris_dev;

385 
p_púis_dev
->
timî
.
expúes
 = 
jiffõs
 + 
HZ
;

387 
p_púis_dev
->
pha£_tbl
 = 
mŸ‹_pha£_tbl
;

389 
ªg_púisI_ba£_va
 = 
	`i‹em≠_noˇche
(
PIRISI_ADRESS_BASE
, 0x10000);

390 
ªt
 = 
	`misc_ªgi°î
(&
g°PúisDev
);

392 
	`hi_púis_i•_ªgi°î
();

394 i‡(
ªt
 != 0)

396 
	`¥ötk
("ªgi°îÖúi†devi˚ faûed wôh %#x!\n", 
ªt
);

401 
	}
}

403 
__exô
 
	$púis_exô
()

405 
	`dñ_timî
(&
p_púis_dev
->
timî
);

406 
	`k‰ì
(
p_púis_dev
);

408 
	`misc_dîegi°î
(&
g°PúisDev
);

410 
	}
}

413 
moduÀ_öô
(
púis_öô
);

414 
moduÀ_exô
(
púis_exô
);

416 
MODULE_DESCRIPTION
("piris driver");

417 
MODULE_LICENSE
("GPL");

418 
MODULE_AUTHOR
("hisilicon");

	@extdrv/piris/piris.h

1 #i‚de‡
__HI_PIRIS_H__


2 
	#__HI_PIRIS_H__


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


10 
	~<löux/io˘l.h
>

13 
	ehiPIRIS_STATUS_E


15 
PIRIS_IDLE
 = 0,

16 
PIRIS_BUSY
,

18 
PIRIS_BUTT
,

19 } 
	tPIRIS_STATUS_E
;

22 
	shiPIRIS_DATA_S


24 
ZîoIsMax
;

25 
TŸÆSãp
;

26 
CurPos
;

27 } 
	tPIRIS_DATA_S
;

31 
	#PIRIS_IOC_MAGIC
 'p'

	)

33 
	#PIRIS_SET_ACT_ARGS
 
	`_IOW
(
PIRIS_IOC_MAGIC
, 1, )

	)

34 
	#PIRIS_SET_ORGIN
 
	`_IOW
(
PIRIS_IOC_MAGIC
, 2, )

	)

35 
	#PIRIS_SET_CLOSE
 
	`_IOW
(
PIRIS_IOC_MAGIC
, 3, )

	)

36 
	#PIRIS_GET_STATUS
 
	`_IOR
(
PIRIS_IOC_MAGIC
, 5, )

	)

38 
	#PIRIS_IOC_MAXNR
 5

	)

41 #ifde‡
__˝lu•lus


42 #i‡
__˝lu•lus


	@extdrv/piris/piris_ext.h

17 #i‚de‡
__PIRIS_EXT_H__


18 
	#__PIRIS_EXT_H__


	)

20 
	~"hi_ty≥.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	shiISP_PIRIS_CALLBACK_S


30 
HI_S32
 (*
p‚_púis_gpio_upd©e
)(HI_S32 
s32Pos
);

31 } 
	tISP_PIRIS_CALLBACK_S
;

33 
	shiISP_PIRIS_EXPORT_FUNC_S


35 
HI_S32
 (*
p‚ISPRegi°îPúisCÆlBack
Ë(HI_S32 
I•Dev
, 
ISP_PIRIS_CALLBACK_S
* 
p°PúisCb
);

36 } 
	tISP_PIRIS_EXPORT_FUNC_S
;

38 
ISP_PIRIS_EXPORT_FUNC_S
 
g_°I•PúisExpFunc
;

40 
	#CKFN_ISP_Regi°îPúisCÆlBack
()\

	)

41 (
	gNULL
 !
g_°I•PúisExpFunc
.
p‚ISPRegi°îPúisCÆlBack
)

42 
	#CALL_ISP_Regi°îPúisCÆlBack
(
I•Dev
,
p°PúisCb
)\

	)

43 
	gg_°I•PúisExpFunc
.
p‚ISPRegi°îPúisCÆlBack
(
I•Dev
,
p°PúisCb
)

45 #ifde‡
__˝lu•lus


46 #i‡
__˝lu•lus


	@extdrv/piris/piris_test.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/io˘l.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<uni°d.h
>

10 
	~"°rfunc.h
"

11 
	~"púis.h
"

14 
	$maö
(
¨gc
 , * 
¨gv
[])

16 
fd
 = -1;

17 
ªt
 = 0;

18 
púis_pos
;

19 
PIRIS_STATUS_E
 
°a
;

20 
°ï
 = 0;

21 
to˛o£
 = 0;

22 
i
 = 0;

23 
Te°Sam∂e
 = 0;

25 i‡(
¨gc
 < 2)

27 
	`¥ötf
("ußge: %†\¿<cmd◊:á˘i⁄, o: origö, s: sètus,Å:Åe° IRIS sam∂e)> \¿<pos> . \¿ßm∂e: %†®92\n", 
¨gv
[0],árgv[0]);

31 
fd
 = 
	`›í
("/dev/piris", 0);

32 i‡(
fd
 < 0)

34 
	`¥ötf
("OpenÖirisÉrror!\n");

39 i‡(*
¨gv
[1] == 'a')

41 
	`SåToNumbî
(
¨gv
[2], (*)&
púis_pos
);

42 
ªt
 = 
	`io˘l
(
fd
, 
PIRIS_SET_ACT_ARGS
, &
púis_pos
);

44 i‡(*
¨gv
[1] == 'o')

46 
ªt
 = 
	`io˘l
(
fd
, 
PIRIS_SET_ORGIN
, &
púis_pos
);

48 i‡(*
¨gv
[1] == 's')

50 
ªt
 = 
	`io˘l
(
fd
, 
PIRIS_GET_STATUS
, &
°a
);

52 i‡(
°a
 =
PIRIS_BUSY
)

54 
	`¥ötf
("pirisÑunning!!!\n");

58 
	`¥ötf
("piris idle!!\n");

61 i‡(*
¨gv
[1] == 't')

63 
	`SåToNumbî
(
¨gv
[2], (*)&
Te°Sam∂e
);

64 
Te°Sam∂e
)

67 
i
 = 0;

68 
°ï
 = 0;

69 
to˛o£
 = 0;

70 
i
 < 10000)

72 
	`io˘l
(
fd
, 
PIRIS_GET_STATUS
, &
°a
);

73 i‡(
°a
 !
PIRIS_BUSY
)

75 i‡(
to˛o£
 == 1)

77 
°ï
 = 92;

78 
to˛o£
 = 0;

82 
°ï
 = 0;

83 
to˛o£
 = 1;

86 
púis_pos
 = 
°ï
;

87 
	`io˘l
(
fd
, 
PIRIS_SET_ACT_ARGS
, &
púis_pos
);

88 
i
++;

93 
°ï
 = 0;

94 
to˛o£
 = 0;

95 
°ï
 != 92)

97 
	`io˘l
(
fd
, 
PIRIS_GET_STATUS
, &
°a
);

98 i‡(
°a
 !
PIRIS_BUSY
)

100 i‡(
to˛o£
 == 1)

102 
°ï
 -= 19;

103 
to˛o£
 = 0;

107 
°ï
 += 20;

108 
to˛o£
 = 1;

111 
púis_pos
 = 
°ï
;

112 
	`io˘l
(
fd
, 
PIRIS_SET_ACT_ARGS
, &
púis_pos
);

122 
	`˛o£
(
fd
);

124  
ªt
;

125 
	}
}

	@extdrv/piris/strfunc.c

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~"°rfunc.h
"

24 
©oul
(* 
°r
, * 
pulVÆue
);

25 
©oulx
(* 
°r
, * 
pulVÆue
);

48 
	$SåToNumbî
(* 
°r
 , * 
pulVÆue
)

51 i‡–*
°r
 == '0' && (*(str + 1) == 'x' || *(str + 1) == 'X') )

53 i‡(*(
°r
 + 2) == '\0')

59  
	`©oulx
(
°r
 + 2, 
pulVÆue
);

64  
	`©oul
(
°r
, 
pulVÆue
);

66 
	}
}

85 
	$©oul
(* 
°r
, * 
pulVÆue
)

87 
ulResu…
 = 0;

89 *
°r
)

91 i‡(
	`isdigô
(()*
°r
))

96 i‡((
ulResu…
 < 429496729Ë|| ((ulResu… =429496729Ë&& (*
°r
 < '6')))

98 
ulResu…
 = ulResu… * 10 + (*
°r
) - 48;

102 *
pulVÆue
 = 
ulResu…
;

108 *
pulVÆue
 = 
ulResu…
;

111 
°r
++;

113 *
pulVÆue
 = 
ulResu…
;

115 
	}
}

136 
	#ASC2NUM
(
ch
Ë(ch - '0')

	)

137 
	#HEXASC2NUM
(
ch
Ë(ch - 'A' + 10)

	)

139 
	$©oulx
(* 
°r
, * 
pulVÆue
)

141 
ulResu…
 = 0;

142 
ch
;

144 *
°r
)

146 
ch
 = 
	`touµî
(*
°r
);

147 i‡(
	`isdigô
(
ch
) || ((ch >= 'A') && (ch <= 'F' )))

149 i‡(
ulResu…
 < 0x10000000)

151 
ulResu…
 = (ulResu… << 4Ë+ ((
ch
 <'9'Ë? (
	`ASC2NUM
(ch)Ë: (
	`HEXASC2NUM
(ch)));

155 *
pulVÆue
 = 
ulResu…
;

161 *
pulVÆue
 = 
ulResu…
;

164 
°r
++;

167 *
pulVÆue
 = 
ulResu…
;

169 
	}
}

	@extdrv/piris/strfunc.h

20 #i‚de‡
__STRFUNC_H__


21 
	#__STRFUNC_H__


	)

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


30 
	#STRFMT_ADDR32
 "%#010lX"

	)

31 
	#STRFMT_ADDR32_2
 "0x%08lX"

	)

33 
SåToNumbî
(* 
°r
 , * 
ulVÆue
);

37 #ifde‡
__˝lu•lus


38 #i‡
__˝lu•lus


	@extdrv/pwm/pwm.c

22 
	~<löux/moduÀ.h
>

23 
	~<löux/î∫o.h
>

24 #i‚de‡
CONFIG_HISI_SNAPSHOT_BOOT


25 
	~<löux/miscdevi˚.h
>

27 
	~<löux/f˙é.h
>

29 
	~<löux/öô.h
>

30 
	~<löux/dñay.h
>

31 
	~<löux/¥oc_fs.h
>

32 
	~<löux/w‹kqueue.h
>

34 
	~<asm/uac˚ss.h
>

35 
	~<asm/sy°em.h
>

36 
	~<asm/io.h
>

38 
	~"pwm.h
"

39 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


40 
	~"himedü.h
"

44 
	#PWMI_ADRESS_BASE
 0x20130000

	)

46 
__iomem
* 
	gªg_pwmI_ba£_va
 = 0;

49 
	#HI_IO_PWMI_ADDRESS
(
x
Ë(
ªg_pwmI_ba£_va
 + ((x)-(
PWMI_ADRESS_BASE
)))

	)

54 
	#PWM0_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0000)

	)

55 
	#PWM0_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0004)

	)

56 
	#PWM0_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0008)

	)

57 
	#PWM0_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x000C)

	)

58 
	#PWM0_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0010)

	)

59 
	#PWM0_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0014)

	)

60 
	#PWM0_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0018)

	)

62 
	#PWM1_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0020)

	)

63 
	#PWM1_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0024)

	)

64 
	#PWM1_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0028)

	)

65 
	#PWM1_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x002C)

	)

66 
	#PWM1_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0030)

	)

67 
	#PWM1_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0034)

	)

68 
	#PWM1_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0038)

	)

70 
	#PWM2_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0040)

	)

71 
	#PWM2_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0044)

	)

72 
	#PWM2_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0048)

	)

73 
	#PWM2_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x004C)

	)

74 
	#PWM2_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0050)

	)

75 
	#PWM2_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0054)

	)

76 
	#PWM2_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0058)

	)

78 
	#PWM3_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0060)

	)

79 
	#PWM3_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0064)

	)

80 
	#PWM3_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0068)

	)

81 
	#PWM3_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x006C)

	)

82 
	#PWM3_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0070)

	)

83 
	#PWM3_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0074)

	)

84 
	#PWM3_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x0078)

	)

86 
	#PWM4_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1000)

	)

87 
	#PWM4_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1004)

	)

88 
	#PWM4_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1008)

	)

89 
	#PWM4_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x100C)

	)

90 
	#PWM4_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1010)

	)

91 
	#PWM4_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1014)

	)

92 
	#PWM4_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1018)

	)

94 
	#PWM5_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1020)

	)

95 
	#PWM5_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1024)

	)

96 
	#PWM5_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1028)

	)

97 
	#PWM5_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x102C)

	)

98 
	#PWM5_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1030)

	)

99 
	#PWM5_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1034)

	)

100 
	#PWM5_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1038)

	)

102 
	#PWM6_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1040)

	)

103 
	#PWM6_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1044)

	)

104 
	#PWM6_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1048)

	)

105 
	#PWM6_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x104C)

	)

106 
	#PWM6_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1050)

	)

107 
	#PWM6_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1054)

	)

108 
	#PWM6_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1058)

	)

110 
	#PWM7_CFG_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1060)

	)

111 
	#PWM7_CFG_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1064)

	)

112 
	#PWM7_CFG_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1068)

	)

113 
	#PWM7_CTRL_REG
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x106C)

	)

114 
	#PWM7_STATE_REG0
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1070)

	)

115 
	#PWM7_STATE_REG1
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1074)

	)

116 
	#PWM7_STATE_REG2
 
	`HI_IO_PWMI_ADDRESS
(
PWMI_ADRESS_BASE
 + 0x1078)

	)

120 
	#PWM_WRITE_REG
(
Addr
, 
VÆue
Ë((*(vﬁ©ûê*)(Addr)Ë(VÆue))

	)

121 
	#PWM_READ_REG
(
Addr
Ë(*(vﬁ©ûê*)(Addr))

	)

124 
	#PWM_NUM_MAX
 0x08

	)

125 
	#PWM_ENABLE
 0x01

	)

126 
	#PWM_DISABLE
 0x00

	)

128 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


129 
	#DEV_NAME
 "pwm"

	)

130 
himedü_devi˚
 
	gs_°PwmDevi˚
;

133 
	$PWM_DRV_DißbÀ
(
pwm_num
)

135 i‡(
pwm_num
 >
PWM_NUM_MAX
)

137 
	`¥ötk
("TheÖwmÇumber is bigÅhanÅhe max value!\n");

140 
pwm_num
)

143 
	`PWM_WRITE_REG
(
PWM0_CTRL_REG
, 
PWM_DISABLE
);

146 
	`PWM_WRITE_REG
(
PWM1_CTRL_REG
, 
PWM_DISABLE
);

149 
	`PWM_WRITE_REG
(
PWM2_CTRL_REG
, 
PWM_DISABLE
);

152 
	`PWM_WRITE_REG
(
PWM3_CTRL_REG
, 
PWM_DISABLE
);

155 
	`PWM_WRITE_REG
(
PWM4_CTRL_REG
, 
PWM_DISABLE
);

158 
	`PWM_WRITE_REG
(
PWM5_CTRL_REG
, 
PWM_DISABLE
);

161 
	`PWM_WRITE_REG
(
PWM6_CTRL_REG
, 
PWM_DISABLE
);

164 
	`PWM_WRITE_REG
(
PWM7_CTRL_REG
, 
PWM_DISABLE
);

171 
	}
}

174 
	$PWM_DRV_Wrôe
(
pwm_num
, 
duty
, 
≥riod
, 
íabÀ
)

176 i‡(
pwm_num
 >
PWM_NUM_MAX
)

178 
	`¥ötk
("TheÖwmÇumber is bigÅhanÅhe max value!\n");

181 i‡(
íabÀ
)

184 
pwm_num
)

187 
	`PWM_WRITE_REG
(
PWM0_CTRL_REG
, 
PWM_DISABLE
);

189 
	`PWM_WRITE_REG
(
PWM0_CFG_REG0
, 
≥riod
);

190 
	`PWM_WRITE_REG
(
PWM0_CFG_REG1
, 
duty
);

191 
	`PWM_WRITE_REG
(
PWM0_CFG_REG2
, 10);

193 
	`PWM_WRITE_REG
(
PWM0_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

198 
	`PWM_WRITE_REG
(
PWM1_CTRL_REG
, 
PWM_DISABLE
);

200 
	`PWM_WRITE_REG
(
PWM1_CFG_REG0
, 
≥riod
);

201 
	`PWM_WRITE_REG
(
PWM1_CFG_REG1
, 
duty
);

202 
	`PWM_WRITE_REG
(
PWM1_CFG_REG2
, 10);

204 
	`PWM_WRITE_REG
(
PWM1_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

209 
	`PWM_WRITE_REG
(
PWM2_CTRL_REG
, 
PWM_DISABLE
);

211 
	`PWM_WRITE_REG
(
PWM2_CFG_REG0
, 
≥riod
);

212 
	`PWM_WRITE_REG
(
PWM2_CFG_REG1
, 
duty
);

213 
	`PWM_WRITE_REG
(
PWM2_CFG_REG2
, 10);

215 
	`PWM_WRITE_REG
(
PWM2_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

220 
	`PWM_WRITE_REG
(
PWM3_CTRL_REG
, 
PWM_DISABLE
);

222 
	`PWM_WRITE_REG
(
PWM3_CFG_REG0
, 
≥riod
);

223 
	`PWM_WRITE_REG
(
PWM3_CFG_REG1
, 
duty
);

224 
	`PWM_WRITE_REG
(
PWM3_CFG_REG2
, 10);

226 
	`PWM_WRITE_REG
(
PWM3_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

231 
	`PWM_WRITE_REG
(
PWM4_CTRL_REG
, 
PWM_DISABLE
);

233 
	`PWM_WRITE_REG
(
PWM4_CFG_REG0
, 
≥riod
);

234 
	`PWM_WRITE_REG
(
PWM4_CFG_REG1
, 
duty
);

235 
	`PWM_WRITE_REG
(
PWM4_CFG_REG2
, 10);

237 
	`PWM_WRITE_REG
(
PWM4_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

242 
	`PWM_WRITE_REG
(
PWM5_CTRL_REG
, 
PWM_DISABLE
);

244 
	`PWM_WRITE_REG
(
PWM5_CFG_REG0
, 
≥riod
);

245 
	`PWM_WRITE_REG
(
PWM5_CFG_REG1
, 
duty
);

246 
	`PWM_WRITE_REG
(
PWM5_CFG_REG2
, 10);

248 
	`PWM_WRITE_REG
(
PWM5_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

253 
	`PWM_WRITE_REG
(
PWM6_CTRL_REG
, 
PWM_DISABLE
);

255 
	`PWM_WRITE_REG
(
PWM6_CFG_REG0
, 
≥riod
);

256 
	`PWM_WRITE_REG
(
PWM6_CFG_REG1
, 
duty
);

257 
	`PWM_WRITE_REG
(
PWM6_CFG_REG2
, 10);

259 
	`PWM_WRITE_REG
(
PWM6_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

264 
	`PWM_WRITE_REG
(
PWM7_CTRL_REG
, 
PWM_DISABLE
);

266 
	`PWM_WRITE_REG
(
PWM7_CFG_REG0
, 
≥riod
);

267 
	`PWM_WRITE_REG
(
PWM7_CFG_REG1
, 
duty
);

268 
	`PWM_WRITE_REG
(
PWM7_CFG_REG2
, 10);

270 
	`PWM_WRITE_REG
(
PWM7_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

275 
	`PWM_WRITE_REG
(
PWM0_CTRL_REG
, 
PWM_DISABLE
);

277 
	`PWM_WRITE_REG
(
PWM0_CFG_REG0
, 
≥riod
);

278 
	`PWM_WRITE_REG
(
PWM0_CFG_REG1
, 
duty
);

279 
	`PWM_WRITE_REG
(
PWM0_CFG_REG2
, 10);

281 
	`PWM_WRITE_REG
(
PWM0_CTRL_REG
, (1 << 2 | 
PWM_ENABLE
));

288 
	`PWM_DRV_DißbÀ
(
pwm_num
);

293 
	}
}

297 
	$PWM_O≥n
(
öode
* inode, 
fûe
* file)

301 
	}
}

303 
	$PWM_Clo£
(
öode
* inode, 
fûe
* file)

306 
	}
}

308 
	$PWM_Io˘l
(
fûe
* fûe, 
cmd
, 
¨g
)

310 
PWM_DATA_S
 
__u£r
* 
¨gp
 = (PWM_DATA_S __u£r*)
¨g
;

312 
PwmNum
;

313 
Duty
;

314 
Pîiod
;

315 
íabÀ
;

317 
cmd
)

319 
PWM_CMD_WRITE
:

321 
PwmNum
 = 
¨gp
->
pwm_num
;

322 
Duty
 = 
¨gp
->
duty
;

323 
Pîiod
 = 
¨gp
->
≥riod
;

324 
íabÀ
 = 
¨gp
->enable;

326 
	`PWM_DRV_Wrôe
(
PwmNum
, 
Duty
, 
Pîiod
, 
íabÀ
);

330 
PWM_CMD_READ
:

337 
	`¥ötk
("invalid ioctl command!\n");

338  -
ENOIOCTLCMD
;

343 
	}
}

345 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


346 
	$PWM_‰ìze
(
himedü_devi˚
* 
pdev
)

348 
	`¥ötk
(
KERN_ALERT
 "%† %d\n", 
__FUNCTION__
, 
__LINE__
);

350 
	}
}

352 
	$PWM_ª°‹e
(
himedü_devi˚
* 
pdev
)

354 
	`¥ötk
(
KERN_ALERT
 "%† %d\n", 
__FUNCTION__
, 
__LINE__
);

356 
	}
}

359 
fûe_›î©i⁄s
 
	gpwm_f›s
 =

361 .
ow√r
 = 
THIS_MODULE
,

362 .
	gu∆ocked_io˘l
 = 
PWM_Io˘l
 ,

363 .
	g›í
 = 
PWM_O≥n
 ,

364 .
	gªÀa£
 = 
PWM_Clo£
 ,

367 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


368 
himedü_›s
 
	g°PwmDrvOps
 =

370 .
pm_‰ìze
 = 
PWM_‰ìze
,

371 .
	gpm_ª°‹e
 = 
PWM_ª°‹e


374 
miscdevi˚
 
	gpwm_dev
 =

376 .
mö‹
 = 
MISC_DYNAMIC_MINOR
,

377 .
	g«me
 = "pwm" ,

378 .
	gf›s
 = &
pwm_f›s
,

384 
__öô
 
	$pwm_öô
()

386 
ªt
;

388 
ªg_pwmI_ba£_va
 = (
__iomem
*)
	`IO_ADDRESS
(
PWMI_ADRESS_BASE
);

390 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


391 
	`¢¥ötf
(
s_°PwmDevi˚
.
devfs_«me
, (s_°PwmDevi˚.devfs_«me), 
DEV_NAME
);

393 
s_°PwmDevi˚
.
mö‹
 = 
HIMEDIA_DYNAMIC_MINOR
;

394 
s_°PwmDevi˚
.
f›s
 = &
pwm_f›s
;

395 
s_°PwmDevi˚
.
drv›s
 = &
°PwmDrvOps
;

396 
s_°PwmDevi˚
.
ow√r
 = 
THIS_MODULE
;

398 
ªt
 = 
	`himedü_ªgi°î
(&
s_°PwmDevi˚
);

399 i‡(
ªt
)

401 
	`¥ötk
("ªgi°î i2¯devi˚ faûed wôh %#x!\n", 
ªt
);

405 
ªt
 = 
	`misc_ªgi°î
(&
pwm_dev
);

406 i‡(
ªt
 != 0)

408 
	`¥ötk
("ªgi°î i2¯devi˚ faûed wôh %#x!\n", 
ªt
);

414 
	}
}

416 
__exô
 
	$pwm_exô
()

418 
i
;

420 
i
 = 0; i < 
PWM_NUM_MAX
; i++)

422 
	`PWM_DRV_DißbÀ
(
i
);

425 
ªg_pwmI_ba£_va
 = 
NULL
;

427 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


428 
	`himedü_uƒegi°î
(&
s_°PwmDevi˚
);

430 
	`misc_dîegi°î
(&
pwm_dev
);

432 
	}
}

435 
moduÀ_öô
(
pwm_öô
);

436 
moduÀ_exô
(
pwm_exô
);

438 
MODULE_DESCRIPTION
("PWM Driver");

439 
MODULE_LICENSE
("GPL");

440 
MODULE_AUTHOR
("Hisilicon");

	@extdrv/pwm/pwm.h

1 #i‚de‡
__HI_PWM_H__


2 
	#__HI_PWM_H__


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


11 
	shiPWM_DATA_S


13 
pwm_num
;

14 
duty
;

15 
≥riod
;

16 
íabÀ
;

18 } 
	tPWM_DATA_S
;

20 
	#PWM_CMD_WRITE
 0x01

	)

21 
	#PWM_CMD_READ
 0x03

	)

24 
PWM_DRV_Wrôe
(
pwm_num
, 
duty
, 
≥riod
, 
íabÀ
);

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


	@extdrv/pwm/pwm_test.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/io˘l.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<uni°d.h
>

10 
	~"°rfunc.h
"

11 
	~"pwm.h
"

14 
	$maö
(
¨gc
 , * 
¨gv
[])

16 
fd
 = -1;

17 
ªt
 = 0;

18 
i
 = 0;

19 
PwmDúe˘‹
;

20 
Pîiod
;

21 
PWM_DATA_S
 
°PwmD©a
;

23 i‡(
¨gc
 < 3)

25 
	`¥ötf
("ußge: %† <Dúe˘‹> <Pîiod> sam∂e: %†0x56 0x0 0x28\n", 
¨gv
[0],árgv[0]);

29 
fd
 = 
	`›í
("/dev/pwm", 0);

30 i‡(
fd
 < 0)

32 
	`¥ötf
("OpenÖwmÉrror!\n");

36 i‡(
	`SåToNumbî
(
¨gv
[1], &
PwmDúe˘‹
))

38 
	`˛o£
(
fd
);

42 i‡(
	`SåToNumbî
(
¨gv
[2], &
Pîiod
))

44 
	`˛o£
(
fd
);

48 
	`¥ötf
("PWM_Dúe˘‹:0x%4x; Pîiod:0x%4x.\n", 
PwmDúe˘‹
, 
Pîiod
);

49 
°PwmD©a
.
pwm_num
 = 0;

50 
°PwmD©a
.
≥riod
 = 1000;

51 
°PwmD©a
.
íabÀ
 = 1;

53 i‡(
PwmDúe˘‹
 == 0)

55 
°PwmD©a
.
duty
 = 
Pîiod
;

59 
°PwmD©a
.
duty
 = 1;

63 
i
 < 10)

75 
°PwmD©a
.
duty
 = 420;

76 
ªt
 = 
	`io˘l
(
fd
, 
PWM_CMD_WRITE
, &
°PwmD©a
);

77 
	`¥ötf
("ªà:%d\n", 
ªt
);

78 
	`u¶ìp
(66000);

79 
°PwmD©a
.
duty
 = 610;

80 
ªt
 = 
	`io˘l
(
fd
, 
PWM_CMD_WRITE
, &
°PwmD©a
);

81 
	`¥ötf
("ªà:%d\n", 
ªt
);

82 
	`u¶ìp
(66000);

83 
i
++;

87 
	`˛o£
(
fd
);

90 
	}
}

	@extdrv/pwm/pwm_write.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/io˘l.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<uni°d.h
>

10 
	~"°rfunc.h
"

11 
	~"pwm.h
"

14 
	$maö
(
¨gc
 , * 
¨gv
[])

16 
fd
 = -1;

17 
ªt
 = 0;

19 
PwmNum
;

20 
Duty
;

21 
Pîiod
;

22 
íabÀ
;

24 
PWM_DATA_S
 
°PwmD©a
;

27 i‡(
¨gc
 < 5)

29 
	`¥ötf
("ußge: %†<PwmNum> <Duty> <Pîiod> <íabÀ>. sam∂e: %†0x56 0x0 0x28\n", 
¨gv
[0],árgv[0]);

33 
fd
 = 
	`›í
("/dev/pwm", 0);

34 i‡(
fd
 < 0)

36 
	`¥ötf
("OpenÖwmÉrror!\n");

40 i‡(
	`SåToNumbî
(
¨gv
[1], &
PwmNum
))

42 
	`˛o£
(
fd
);

46 i‡(
	`SåToNumbî
(
¨gv
[2], &
Duty
))

48 
	`˛o£
(
fd
);

52 i‡(
	`SåToNumbî
(
¨gv
[3], &
Pîiod
))

54 
	`˛o£
(
fd
);

58 i‡(
	`SåToNumbî
(
¨gv
[4], &
íabÀ
))

60 
	`˛o£
(
fd
);

64 
	`¥ötf
("PWM_NUM:0x%4x; Duty:0x%4x; Pîiod:0x%4x;íabÀ:0x%4x.\n", 
PwmNum
, 
Duty
, 
Pîiod
, 
íabÀ
);

66 
°PwmD©a
.
pwm_num
 = 
PwmNum
;

67 
°PwmD©a
.
duty
 = 
Duty
;

68 
°PwmD©a
.
≥riod
 = 
Pîiod
;

69 
°PwmD©a
.
íabÀ
 =Énable;

71 
ªt
 = 
	`io˘l
(
fd
, 
PWM_CMD_WRITE
, &
°PwmD©a
);

72 
	`¥ötf
("ªà:%d\n", 
ªt
);

76 
	`˛o£
(
fd
);

79 
	}
}

	@extdrv/pwm/strfunc.c

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~"°rfunc.h
"

24 
©oul
(* 
°r
, * 
pulVÆue
);

25 
©oulx
(* 
°r
, * 
pulVÆue
);

48 
	$SåToNumbî
(* 
°r
 , * 
pulVÆue
)

51 i‡–*
°r
 == '0' && (*(str + 1) == 'x' || *(str + 1) == 'X') )

53 i‡(*(
°r
 + 2) == '\0')

59  
	`©oulx
(
°r
 + 2, 
pulVÆue
);

64  
	`©oul
(
°r
, 
pulVÆue
);

66 
	}
}

85 
	$©oul
(* 
°r
, * 
pulVÆue
)

87 
ulResu…
 = 0;

89 *
°r
)

91 
ch
 = 
	`touµî
(*
°r
);

93 i‡(
	`isdigô
(
ch
))

98 i‡((
ulResu…
 < 429496729Ë|| ((ulResu… =429496729Ë&& (*
°r
 < '6')))

100 
ulResu…
 = ulResu… * 10 + (*
°r
) - 48;

104 *
pulVÆue
 = 
ulResu…
;

110 *
pulVÆue
 = 
ulResu…
;

113 
°r
++;

115 *
pulVÆue
 = 
ulResu…
;

117 
	}
}

138 
	#ASC2NUM
(
ch
Ë(ch - '0')

	)

139 
	#HEXASC2NUM
(
ch
Ë(ch - 'A' + 10)

	)

141 
	$©oulx
(* 
°r
, * 
pulVÆue
)

143 
ulResu…
 = 0;

144 
ch
;

146 *
°r
)

148 
ch
 = 
	`touµî
(*
°r
);

149 i‡(
	`isdigô
(
ch
) || ((ch >= 'A') && (ch <= 'F' )))

151 i‡(
ulResu…
 < 0x10000000)

153 
ulResu…
 = (ulResu… << 4Ë+ ((
ch
 <'9'Ë? (
	`ASC2NUM
(ch)Ë: (
	`HEXASC2NUM
(ch)));

157 *
pulVÆue
 = 
ulResu…
;

163 *
pulVÆue
 = 
ulResu…
;

166 
°r
++;

169 *
pulVÆue
 = 
ulResu…
;

171 
	}
}

	@extdrv/pwm/strfunc.h

20 #i‚de‡
__STRFUNC_H__


21 
	#__STRFUNC_H__


	)

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


30 
	#STRFMT_ADDR32
 "%#010lX"

	)

31 
	#STRFMT_ADDR32_2
 "0x%08lX"

	)

33 
SåToNumbî
(* 
°r
 , * 
ulVÆue
);

37 #ifde‡
__˝lu•lus


38 #i‡
__˝lu•lus


	@extdrv/sensor_i2c/isp_ext.h

17 #i‚de‡
__ISP_EXT_H__


18 
	#__ISP_EXT_H__


	)

20 
	~"hi_ty≥.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	ehiISP_BUS_TYPE_E


30 
ISP_BUS_TYPE_I2C
 = 0,

31 
ISP_BUS_TYPE_SSP
,

33 
ISP_BUS_TYPE_BUTT
,

34 } 
	tISP_BUS_TYPE_E
;

36 
	shiISP_BUS_CALLBACK_S


38 
HI_S32
 (*
p‚ISPWrôeI2CD©a
Ë(
HI_U8
 
u8DevAddr
, 
HI_U32
 
u32RegAddr
,

39 
HI_U32
 
u32RegAddrByãNum
, HI_U32 
u32D©a
, HI_U32 
u32D©aByãNum
);

40 
HI_S32
 (*
p‚ISPWrôeSSPD©a
Ë(
HI_U32
 
u32DevAddr
, HI_U32 
u32DevAddrByãNum
,

41 
HI_U32
 
u32RegAddr
, HI_U32 
u32RegAddrByãNum
, HI_U32 
u32D©a
, HI_U32 
u32D©aByãNum
);

42 } 
	tISP_BUS_CALLBACK_S
;

44 
	shiISP_EXPORT_FUNC_S


46 
HI_S32
 (*
p‚ISPRegi°îBusCÆlBack
Ë(HI_S32 
I•Dev
, 
ISP_BUS_TYPE_E
 
íTy≥
, 
ISP_BUS_CALLBACK_S
* 
p°BusCb
);

47 } 
	tISP_EXPORT_FUNC_S
;

49 
ISP_EXPORT_FUNC_S
 
g_°I•ExpFunc
;

51 
	#CKFN_ISP_Regi°îBusCÆlBack
()\

	)

52 (
	gNULL
 !
g_°I•ExpFunc
.
p‚ISPRegi°îBusCÆlBack
)

53 
	#CALL_ISP_Regi°îBusCÆlBack
(
I•Dev
,
íTy≥
,
p°BusCb
)\

	)

54 
	gg_°I•ExpFunc
.
p‚ISPRegi°îBusCÆlBack
(
I•Dev
,
íTy≥
,
p°BusCb
)

56 #ifde‡
__˝lu•lus


57 #i‡
__˝lu•lus


	@extdrv/sensor_i2c/sensor_i2c.c

1 
	~<löux/öô.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/¶ab.h
>

4 
	~<löux/°rög.h
>

5 
	~<löux/io.h
>

6 
	~<löux/i2c.h
>

8 
	~<löux/dñay.h
>

9 
	~"i•_ext.h
"

11 
i2c_bﬂrd_öfo
 
	ghi_öfo
 =

13 
I2C_BOARD_INFO
("sensor_i2c", 0x6c),

16 
i2c_˛õ¡
* 
	g£ns‹_˛õ¡
;

18 
hi_i2c_ªad
(
dev_addr
, 
ªg_addr
,

19 
ªg_addr_num
, 
d©a_byã_num
);

21 
	$hi_£ns‹_i2c_wrôe
(
dev_addr
,

22 
ªg_addr
, 
ªg_addr_num
,

23 
d©a
, 
d©a_byã_num
)

25 
tmp_buf
[8];

26 
ªt
 = 0;

27 
idx
 = 0;

28 
i2c_˛õ¡
* 
˛õ¡
 = 
£ns‹_˛õ¡
;

30 
£ns‹_˛õ¡
->
addr
 = 
dev_addr
;

33 
tmp_buf
[
idx
++] = 
ªg_addr
;

34 i‡(
ªg_addr_num
 == 2)

36 
˛õ¡
->
Êags
 |
I2C_M_16BIT_REG
;

37 
tmp_buf
[
idx
++] = (
ªg_addr
 >> 8);

41 
˛õ¡
->
Êags
 &~
I2C_M_16BIT_REG
;

45 
tmp_buf
[
idx
++] = 
d©a
;

46 i‡(
d©a_byã_num
 == 2)

48 
˛õ¡
->
Êags
 |
I2C_M_16BIT_DATA
;

49 
tmp_buf
[
idx
++] = 
d©a
 >> 8;

53 
˛õ¡
->
Êags
 &~
I2C_M_16BIT_DATA
;

56 
ªt
 = 
	`i2c_ma°î_£nd
(
˛õ¡
, 
tmp_buf
, 
idx
);

58  
ªt
;

59 
	}
}

61 
	$hi_i2c_ªad
(
dev_addr
, 
ªg_addr
,

62 
ªg_addr_num
, 
d©a_byã_num
)

64 
tmp_buf
[8];

65 
ªt
 = 0;

66 
ªt_d©a
 = 0xFF;

67 
idx
 = 0;

68 
i2c_˛õ¡
* 
˛õ¡
 = 
£ns‹_˛õ¡
;

70 
£ns‹_˛õ¡
->
addr
 = 
dev_addr
;

73 
tmp_buf
[
idx
++] = 
ªg_addr
;

74 i‡(
ªg_addr_num
 == 2)

76 
˛õ¡
->
Êags
 |
I2C_M_16BIT_REG
;

77 
tmp_buf
[
idx
++] = 
ªg_addr
 >> 8;

81 
˛õ¡
->
Êags
 &~
I2C_M_16BIT_REG
;

85 i‡(
d©a_byã_num
 == 2)

87 
˛õ¡
->
Êags
 |
I2C_M_16BIT_DATA
;

91 
˛õ¡
->
Êags
 &~
I2C_M_16BIT_DATA
;

94 
ªt
 = 
	`i2c_ma°î_ªcv
(
˛õ¡
, 
tmp_buf
, 
idx
);

95 i‡(
ªt
 >= 0)

97 i‡(
d©a_byã_num
 == 2)

99 
ªt_d©a
 = 
tmp_buf
[0] | (tmp_buf[1] << 8);

103 
ªt_d©a
 = 
tmp_buf
[0];

107  
ªt_d©a
;

108 
	}
}

110 
	$hi_dev_i•_ªgi°î
()

112 
ISP_BUS_CALLBACK_S
 
°BusCb
 = {0};

114 
°BusCb
.
p‚ISPWrôeI2CD©a
 = 
hi_£ns‹_i2c_wrôe
;

115 i‡(
	`CKFN_ISP_Regi°îBusCÆlBack
())

117 
	`CALL_ISP_Regi°îBusCÆlBack
(0, 
ISP_BUS_TYPE_I2C
, &
°BusCb
);

121 
	`¥ötk
("register i2c_write_callbackÅo isp failed, hi_i2c init is failed!\n");

126 
	}
}

128 
	$hi_dev_öô
()

130 
i2c_ad≠ãr
* 
i2c_ad≠
;

133 
i2c_ad≠
 = 
	`i2c_gë_ad≠ãr
(0);

134 
£ns‹_˛õ¡
 = 
	`i2c_√w_devi˚
(
i2c_ad≠
, &
hi_öfo
);

136 
	`i2c_put_ad≠ãr
(
i2c_ad≠
);

137 
	`hi_dev_i•_ªgi°î
();

140 
	}
}

142 
	$hi_dev_exô
()

144 
	`i2c_uƒegi°î_devi˚
(
£ns‹_˛õ¡
);

145 
	}
}

147 
moduÀ_öô
(
hi_dev_öô
);

148 
moduÀ_exô
(
hi_dev_exô
);

149 
MODULE_LICENSE
("GPL");

	@extdrv/sensor_i2c/sensor_i2c.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@extdrv/sensor_spi/isp_ext.h

17 #i‚de‡
__ISP_EXT_H__


18 
	#__ISP_EXT_H__


	)

20 
	~"hi_ty≥.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	ehiISP_BUS_TYPE_E


30 
ISP_BUS_TYPE_I2C
 = 0,

31 
ISP_BUS_TYPE_SSP
,

33 
ISP_BUS_TYPE_BUTT
,

34 } 
	tISP_BUS_TYPE_E
;

36 
	shiISP_BUS_CALLBACK_S


38 
HI_S32
 (*
p‚ISPWrôeI2CD©a
Ë(
HI_U8
 
u8DevAddr
, 
HI_U32
 
u32RegAddr
,

39 
HI_U32
 
u32RegAddrByãNum
, HI_U32 
u32D©a
, HI_U32 
u32D©aByãNum
);

40 
HI_S32
 (*
p‚ISPWrôeSSPD©a
Ë(
HI_U32
 
u32DevAddr
, HI_U32 
u32DevAddrByãNum
,

41 
HI_U32
 
u32RegAddr
, HI_U32 
u32RegAddrByãNum
, HI_U32 
u32D©a
, HI_U32 
u32D©aByãNum
);

42 } 
	tISP_BUS_CALLBACK_S
;

44 
	shiISP_EXPORT_FUNC_S


46 
HI_S32
 (*
p‚ISPRegi°îBusCÆlBack
Ë(HI_S32 
I•Dev
, 
ISP_BUS_TYPE_E
 
íTy≥
, 
ISP_BUS_CALLBACK_S
* 
p°BusCb
);

47 } 
	tISP_EXPORT_FUNC_S
;

49 
ISP_EXPORT_FUNC_S
 
g_°I•ExpFunc
;

51 
	#CKFN_ISP_Regi°îBusCÆlBack
()\

	)

52 (
	gNULL
 !
g_°I•ExpFunc
.
p‚ISPRegi°îBusCÆlBack
)

53 
	#CALL_ISP_Regi°îBusCÆlBack
(
I•Dev
,
íTy≥
,
p°BusCb
)\

	)

54 
	gg_°I•ExpFunc
.
p‚ISPRegi°îBusCÆlBack
(
I•Dev
,
íTy≥
,
p°BusCb
)

56 #ifde‡
__˝lu•lus


57 #i‡
__˝lu•lus


	@extdrv/sensor_spi/sensor_spi.c

23 
	~<löux/öô.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/io˘l.h
>

26 
	~<löux/fs.h
>

27 
	~<löux/devi˚.h
>

28 
	~<löux/îr.h
>

29 
	~<löux/li°.h
>

30 
	~<löux/î∫o.h
>

31 
	~<löux/muãx.h
>

32 
	~<löux/¶ab.h
>

33 
	~<löux/com∑t.h
>

34 
	~<löux/dñay.h
>

35 
	~<löux/•i/•i.h
>

36 
	~<asm/uac˚ss.h
>

38 
	~"i•_ext.h
"

40 
	gbus_num
 = 0;

41 
	gc¢
 = 0;

42 * 
	g£ns‹
 = "";

44 
moduÀ_∑øm
(
bus_num
, 
uöt
, 
S_IRUGO
);

45 
MODULE_PARM_DESC
(
bus_num
, "spi busÇumber");

47 
moduÀ_∑øm
(
c¢
, 
uöt
, 
S_IRUGO
);

48 
MODULE_PARM_DESC
(
c¢
, "chip selectÇumber");

51 
moduÀ_∑øm
(
£ns‹
, 
ch¨p
, 
S_IRUGO
);

52 
MODULE_PARM_DESC
(
£ns‹
, "sensorÇame");

55 
•i_ma°î
* 
	ghi_ma°î
;

56 
•i_devi˚
* 
	ghi_•i
;

57 
bus_ty≥
 
•i_bus_ty≥
;

60 
	#SPI_MSG_NUM
 20

	)

61 
	shi_•i_mesßge_s


63 
•i_å™s„r
 
	mt
;

64 
•i_mesßge
 
	mm
;

65 
	mbuf
[8];

66 } 
	t•i_mesßge_s
;

68 
	shi_•i_mesßge_öfo_s


70 
	mmsg_idx
;

71 
•i_mesßge_s
 
	m•i_msg_¨øy
[
SPI_MSG_NUM
];

72 } 
	t•i_mesßge_öfo_s
;

74 
•i_mesßge_öfo_s
 
	gg_•i_msg
 = {0};

81 
	$s•_wrôe_Æt
(
addr1
, 
addr1byãnum
,

82 
addr2
, 
addr2byãnum
,

83 
d©a
 , 
d©abyãnum
)

85 
•i_ma°î
* 
ma°î
 = 
hi_ma°î
;

86 
•i_devi˚
* 
•i
 = 
hi_•i
;

87 
•i_å™s„r
* 
t
;

88 
•i_mesßge
* 
m
;

89 * 
buf
;

90 
°©us
 = 0;

91 
Êags
;

92 
buf_idx
 = 0;

93 
idx
 = 
g_•i_msg
.
msg_idx
;

95 
g_•i_msg
.
msg_idx
++;

96 i‡(
g_•i_msg
.
msg_idx
 > 
SPI_MSG_NUM
 - 1)

98 
g_•i_msg
.
msg_idx
 = 0;

101 
buf
 = 
g_•i_msg
.
•i_msg_¨øy
[
idx
].buf;

102 
t
 = &
g_•i_msg
.
•i_msg_¨øy
[
idx
].t;

103 
m
 = &
g_•i_msg
.
•i_msg_¨øy
[
idx
].m;

106 
	`•ö_lock_úqßve
(&
ma°î
->
queue_lock
, 
Êags
);

107 i‡(
m
->
°©e
 !
NULL
)

109 
	`•ö_u∆ock_úqª°‹e
(&
ma°î
->
queue_lock
, 
Êags
);

110 
	`dev_îr
(&
•i
->
dev
, "%s, %s, %dÜöe: spi_mesßgênÿföish!\n", 
__FILE__
, 
__func__
, 
__LINE__
);

111  -
EFAULT
;

113 
	`•ö_u∆ock_úqª°‹e
(&
ma°î
->
queue_lock
, 
Êags
);

115 
•i
->
mode
 = 
SPI_MODE_3
 | 
SPI_LSB_FIRST
;

117 
	`mem£t
(
buf
, 0, (
g_•i_msg
.
•i_msg_¨øy
[
idx
].buf));

119 i‡(
	`°rcmp
(
£ns‹
, "imx117"))

121 
buf
[
buf_idx
++] = 
addr1
 & (~0x80);

126 
buf
[
buf_idx
++] = 
addr1
;

129 i‡(2 =
addr2byãnum
)

131 
buf
[
buf_idx
++] = 
addr2
 >> 8;

133 
buf
[
buf_idx
++] = 
addr2
;

135 i‡(2 =
d©abyãnum
)

137 
buf
[
buf_idx
++] = 
d©a
 >> 8;

139 
buf
[
buf_idx
++] = 
d©a
;

141 
t
->
tx_buf
 = 
buf
;

142 
t
->
rx_buf
 = 
buf
;

143 
t
->
Àn
 = 
buf_idx
;

144 
t
->
cs_ch™ge
 = 1;

145 
t
->
•ìd_hz
 = 2000000;

146 
t
->
bôs_≥r_w‹d
 = 8;

148 
	`•i_mesßge_öô
(
m
);

149 
	`•i_mesßge_add_èû
(
t
, 
m
);

150 
m
->
°©e
 = m;

151 
°©us
 = 
	`•i_async
(
•i
, 
m
);

152 i‡(
°©us
)

154 
	`dev_îr
(&
•i
->
dev
, "%s: spi_async(Ëîr‹!\n", 
__func__
);

155 
°©us
 = -
EFAULT
;

158  
°©us
;

159 
	}
}

161 
	$hi_s•_wrôe
(
addr1
, 
addr1byãnum
,

162 
addr2
, 
addr2byãnum
,

163 
d©a
 , 
d©abyãnum
)

165 i‡((
addr1byãnum
 > 1Ë|| (
addr2byãnum
 > 2Ë|| (
d©abyãnum
 > 2))

167 
	`¥ötk
("addr1_num: %d,áddr2_num: %d, data_num: %d, bit_widthÇot supportÇow.\n",

168 
addr1byãnum
, 
addr2byãnum
, 
d©abyãnum
);

173 
	`¥ötk
("addr1: 0x%x,áddr1_num: %d,áddr2: 0x%x,áddr2_num: %d, data: 0x%x, data_num: %d.\n",

174 
addr1
, 
addr1byãnum
, 
addr2
, 
addr2byãnum
, 
d©a
, 
d©abyãnum
);

176  
	`s•_wrôe_Æt
(
addr1
, 
addr1byãnum
, 
addr2
, 
addr2byãnum
, 
d©a
, 
d©abyãnum
);

177 
	}
}

183 
	$s•_ªad_Æt
(
devaddr
, 
addr
, * 
d©a
)

185 
•i_ma°î
* 
ma°î
 = 
hi_ma°î
;

186 
•i_devi˚
* 
•i
 = 
hi_•i
;

187 
°©us
 = 0;

188 
Êags
;

189 
•i_å™s„r
 
t
;

190 
•i_mesßge
 
m
;

191 
buf
[8];

192 
buf_idx
 = 0;

195 
	`•ö_lock_úqßve
(&
ma°î
->
queue_lock
, 
Êags
);

196 i‡(
m
.
°©e
 !
NULL
)

198 
	`•ö_u∆ock_úqª°‹e
(&
ma°î
->
queue_lock
, 
Êags
);

199 
	`dev_îr
(&
•i
->
dev
, "\n**********%s, %s, %dÜöe: spi_mesßgênÿföish!*********\n", 
__FILE__
, 
__func__
, 
__LINE__
);

200  -
EFAULT
;

202 
	`•ö_u∆ock_úqª°‹e
(&
ma°î
->
queue_lock
, 
Êags
);

204 
•i
->
mode
 = 
SPI_MODE_3
 | 
SPI_LSB_FIRST
;

206 
	`mem£t
(
buf
, 0, (buf));

207 
buf
[
buf_idx
++] = 
devaddr
 | 0x80;

209 
buf
[
buf_idx
++] = 
addr
;

210 
buf
[
buf_idx
++] = 0;

212 
t
.
tx_buf
 = 
buf
;

213 
t
.
rx_buf
 = 
buf
;

214 
t
.
Àn
 = 
buf_idx
;

215 
t
.
cs_ch™ge
 = 1;

216 
t
.
•ìd_hz
 = 2000000;

217 
t
.
bôs_≥r_w‹d
 = 8;

219 
	`•i_mesßge_öô
(&
m
);

220 
	`•i_mesßge_add_èû
(&
t
, &
m
);

221 
m
.
°©e
 = &m;

222 
°©us
 = 
	`•i_sync
(
•i
, &
m
);

223 i‡(
°©us
)

225 
	`dev_îr
(&
•i
->
dev
, "%s: spi_async(Ëîr‹!\n", 
__func__
);

226 
°©us
 = -
EFAULT
;

229 *
d©a
 = 
buf
[2];

231 
	`¥ötk
("func:%†rx_bu‡%#x, %#x, %#x\n", 
__func__
, 
buf
[0], buf[1], buf[2]);

232  
°©us
;

233 
	}
}

236 
	$s•_ã°
()

238 
d©a
;

239 
	`s•_wrôe_Æt
(0x2, 1, 0x14, 1, 0x34, 1);

241 
	`m¶ìp
(1);

242 
	`s•_ªad_Æt
(0x2, 0x14, &
d©a
);

243 
	}
}

246 
__öô
 
	$£ns‹_•i_dev_öô
()

248 
°©us
 = 0;

249 
•i_ma°î
* 
ma°î
;

250 
devi˚
* 
dev
;

251 
•i_«me
[128] = {0};

253 
ISP_BUS_CALLBACK_S
 
°BusCb
 = {0};

254 
°BusCb
.
p‚ISPWrôeSSPD©a
 = 
hi_s•_wrôe
;

255 i‡(
	`CKFN_ISP_Regi°îBusCÆlBack
())

257 
	`CALL_ISP_Regi°îBusCÆlBack
(0, 
ISP_BUS_TYPE_SSP
, &
°BusCb
);

261 
	`¥ötk
("register ssp_write_callbackÅo isp failed, ssp init is failed!\n");

265 
ma°î
 = 
	`•i_bu¢um_to_ma°î
(
bus_num
);

266 i‡(
ma°î
)

268 
hi_ma°î
 = 
ma°î
;

269 
	`¢¥ötf
(
•i_«me
, (•i_«me), "%s.%u", 
	`dev_«me
(&
ma°î
->
dev
), 
c¢
);

270 
dev
 = 
	`bus_föd_devi˚_by_«me
(&
•i_bus_ty≥
, 
NULL
, 
•i_«me
);

271 i‡(
dev
 =
NULL
)

273 
	`dev_îr
(
NULL
, "chù£À˘ %d ha†nŸ bì¿u£d\n", 
c¢
);

274 
°©us
 = -
ENXIO
;

275 
íd1
;

278 
hi_•i
 = 
	`to_•i_devi˚
(
dev
);

279 i‡(
hi_•i
 =
NULL
)

281 
	`dev_îr
(
dev
, "to_spi_device()Érror!\n");

282 
°©us
 = -
ENXIO
;

283 
íd1
;

288 
	`dev_îr
(
NULL
, "spi_busnum_to_master()Érror!\n");

289 
°©us
 = -
ENXIO
;

290 
íd0
;

294 
íd1
:

295 
	`put_devi˚
(
dev
);

296 
íd0
:

297  
°©us
;

298 
	}
}

300 
__exô
 
	$£ns‹_•i_dev_exô
()

302 
	`¥ötk
("%s, %s, %dÜöe\n", 
__FILE__
, 
__func__
, 
__LINE__
);

303 
	}
}

305 
moduÀ_öô
(
£ns‹_•i_dev_öô
);

306 
moduÀ_exô
(
£ns‹_•i_dev_exô
);

308 
MODULE_AUTHOR
("BVT OSDRV");

309 
MODULE_LICENSE
("GPL");

310 
MODULE_ALIAS
("sensor spidev");

	@extdrv/sensor_spi/sensor_spi.h

1 #i‚de‡
__SENSOR_SPI_H__


2 
	#__SENSOR_SPI_H__


	)

3 
s•_wrôe_Æt
(
devaddr
, 
addr
, 
d©a
);

4 
s•_ªad_Æt
(
devaddr
, 
addr
, * 
d©a
);

	@extdrv/sensor_spi/sensor_spi.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@extdrv/tlv320aic31/tlv320aic31.c

25 
	~<löux/kî√l.h
>

26 
	~<löux/vîsi⁄.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/ty≥s.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/f˙é.h
>

31 
	~<löux/mm.h
>

32 
	~<löux/¥oc_fs.h
>

33 
	~<löux/fs.h
>

34 
	~<löux/¶ab.h
>

36 
	~<löux/öô.h
>

37 
	~<asm/uac˚ss.h
>

38 
	~<mach/h¨dw¨e.h
>

39 
	~<asm/io.h
>

40 
	~<asm/sy°em.h
>

41 #i‚de‡
CONFIG_HISI_SNAPSHOT_BOOT


42 
	~<löux/miscdevi˚.h
>

44 
	~<löux/dñay.h
>

46 
	~<löux/¥oc_fs.h
>

47 
	~<löux/pﬁl.h
>

49 
	~<mach/h¨dw¨e.h
>

50 
	~<asm/bô›s.h
>

51 
	~<asm/uac˚ss.h
>

52 
	~<asm/úq.h
>

54 
	~<löux/moduÀ∑øm.h
>

55 
	~<löux/i›‹t.h
>

56 
	~<löux/öãºu±.h
>

57 
	~<löux/ªboŸ.h
>

58 
	~<löux/nŸifõr.h
>

59 
	~<löux/i2c.h
>

60 
	~<löux/i2c-dev.h
>

62 
	~"év320aic31.h
"

63 
	~"év320aic31_def.h
"

65 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


66 
	~"himedü.h
"

69 
	#CHIP_NUM
 1

	)

70 
	#DEV_NAME
 "év320aic31"

	)

71 
	#DEBUG_LEVEL
 1

	)

72 
	#DPRINTK
(
Àvñ
,
fmt
,
¨gs
...Ëdo{ if÷evñ < 
DEBUG_LEVEL
)\

	)

73 
¥ötk
(
KERN_INFO
 "%†[%†,%d]: " 
fmt
 "\n",
DEV_NAME
,
__FUNCTION__
,
__LINE__
,##
¨gs
);\

76 
IIC_devi˚_addr
[
CHIP_NUM
] = {0x30
	}
};

78 
i2c_bﬂrd_öfo
 
	ghi_öfo
 =

80 
I2C_BOARD_INFO
("tlv320aic31", 0x30),

83 
i2c_˛õ¡
* 
	gév_˛õ¡
;

86 
	g›í_˙t
 = 0;

87 
	gchù_cou¡
 = 1;

89 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


90 
himedü_devi˚
 
	gs_°Tlv320aic31Devi˚
;

93 
év320aic31_devi˚_öô
(
num
);

95 
	$év320aic31_wrôe
(
chù_addr
, 
ªg_addr
, 
vÆue
)

97 
ªt
;

98 
buf
[2];

99 
i2c_˛õ¡
* 
˛õ¡
 = 
év_˛õ¡
;

101 
buf
[0] = 
ªg_addr
;

102 
buf
[1] = 
vÆue
;

104 
ªt
 = 
	`i2c_ma°î_£nd
(
˛õ¡
, 
buf
, 2);

105  
ªt
;

106 
	}
}

108 
	$év320aic31_ªad
(
chù_addr
, 
ªg_addr
)

110 
ªt_d©a
 = 0xFF;

111 
ªt
;

112 
i2c_˛õ¡
* 
˛õ¡
 = 
év_˛õ¡
;

113 
buf
[2];

115 
buf
[0] = 
ªg_addr
;

116 
ªt
 = 
	`i2c_ma°î_ªcv
(
˛õ¡
, 
buf
, 1);

117 i‡(
ªt
 >= 0)

119 
ªt_d©a
 = 
buf
[0];

121  
ªt_d©a
;

122 
	}
}

124 
	$év320aic31_ªg_dump
(
ªg_num
)

126 
i
 = 0;

127 
i
 = 0; i < 
ªg_num
; i++)

129 
	`¥ötk
("ªg%d =%x,", 
i
, 
	`év320aic31_ªad
(
IIC_devi˚_addr
[0], i));

130 i‡((
i
 + 1) % 8 == 0)

132 
	`¥ötk
("\n");

135 
	}
}

136 
	$so·_ª£t
(
chù_num
)

139 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 0x1, 0x80);

140 
	`m¶ìp
(10);

142 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0x32);

146 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x10);

149 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x82);

150 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x1c);

151 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x2c);

152 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x8);

153 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

156 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 0xa);

159 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 2, 0xaa);

162 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 8, 0xf0);

165 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 9, 0x7);

168 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 12, 0x50);

171 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 25, 0x40);

172 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 17, 0xf);

173 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 18, 0xf0);

175 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 15, 0x0);

176 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 16, 0x0);

180 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 19, 0x04);

181 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 22, 0x04);

182 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 28, 0x0);

183 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 31, 0x0);

186 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 14, 0x80);

189 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 37, 0xc0);

195 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 41, 0x1);

198 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 42, 0x78);

201 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 43, 0x0);

204 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 44, 0x0);

206 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 47, 0x80);

211 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 64, 0x80);

216 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 38, 0x3e);

218 
	}
}

223 
	$év320aic31_›í
(
öode
* inode, 
fûe
* file)

225 i‡(0 =
›í_˙t
++)

230 
	}
}

235 
	$év320aic31_˛o£
(
öode
* inodê, 
fûe
* file)

237 
›í_˙t
--;

239 
	}
}

242 
	$év320aic31_io˘l
(
fûe
* fûe, 
cmd
, 
¨g
)

244 
__u£r
* 
¨gp
 = (__u£r*)
¨g
;

245 
chù_num
;

246 
Audio_Cål
 
ãmp
;

247 
Audio_Cål
* 
audio_˘æ
;

248 
Codec_D©≠©h_Sëup_Cål
 
codec_d©≠©h_£tup_˘æ
;

249 
DAC_OUTPUT_SWIT_CTRL
 
dac_ouçut_swô_˘æ
;

250 
DAC_POWER_CTRL
 
dac_powî_˘æ
;

251 
In1_Adc_Cål
 
ö1_adc_˘æ
 ;

252 
In2_Adc_Cål_Sam∂e
 
ö2_adc_˘æ_ßm∂e
 ;

253 
Adc_Pga_Dac_Gaö_Cål
 
adc_pga_dac_gaö_˘æ
;

254 
Löe_Hpcom_Out_Cål
 
löe_hpcom_out_˘æ
;

255 
Sîül_I¡_Cål
 
£rül_öt_˘æ
;

256 
Sîül_D©a_Off£t_Cål
 
£rül_d©a_off£t_˘æ
;

257 
Cål_Mode
 
˘æ_mode
;

259 i‡(
¨gp
 !
NULL
)

261 i‡(
	`c›y_‰om_u£r
(&
ãmp
, 
¨gp
, (
Audio_Cål
)))

263  -
EFAULT
;

266 
audio_˘æ
 = (
Audio_Cål
*)(&
ãmp
);

267 
chù_num
 = 
audio_˘æ
->chip_num;

268 
cmd
)

270 
IN2LR_2_LEFT_ADC_CTRL
:

271 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 17);

272 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2l_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
öput_Àvñ
;

273 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 17, 
ö2_adc_˘æ_ßm∂e
.
b8
);

275 
IN2LR_2_RIGTH_ADC_CTRL
:

276 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 18);

277 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2r_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
öput_Àvñ
;

278 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 18, 
ö2_adc_˘æ_ßm∂e
.
b8
);

281 
IN1L_2_LEFT_ADC_CTRL
:

282 
ö1_adc_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 19);

283 
ö1_adc_˘æ
.
bô
.
ö1_adc_öput_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

284 
ö1_adc_˘æ
.
bô
.
adc_ch_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

285 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 19, 
ö1_adc_˘æ
.
b8
);

287 
IN1R_2_RIGHT_ADC_CTRL
:

288 
ö1_adc_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 22);

289 
ö1_adc_˘æ
.
bô
.
ö1_adc_öput_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

290 
ö1_adc_˘æ
.
bô
.
adc_ch_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

291 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 22, 
ö1_adc_˘æ
.
b8
);

293 
PGAL_2_HPLOUT_VOL_CTRL
:

294 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 46);

295 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

296 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

297 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 46, 
adc_pga_dac_gaö_˘æ
.
b8
);

299 
DACL1_2_HPLOUT_VOL_CTRL
:

300 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 47);

301 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

302 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

303 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 47, 
adc_pga_dac_gaö_˘æ
.
b8
);

305 
HPLOUT_OUTPUT_LEVEL_CTRL
:

306 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 51);

307 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

308 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

309 
löe_hpcom_out_˘æ
.
bô
.
powî_°©us
 = 
audio_˘æ
->
if_powîup
;

310 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 51, 
löe_hpcom_out_˘æ
.
b8
);

312 
PGAL_2_HPLCOM_VOL_CTRL
:

313 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 53);

314 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

315 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

316 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 53, 
adc_pga_dac_gaö_˘æ
.
b8
);

318 
DACL1_2_HPLCOM_VOL_CTRL
:

319 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 54);

320 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

321 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

322 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 54, 
adc_pga_dac_gaö_˘æ
.
b8
);

324 
HPLCOM_OUTPUT_LEVEL_CTRL
:

325 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 58);

326 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

327 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

328 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 58, 
löe_hpcom_out_˘æ
.
b8
);

330 
PGAR_2_HPROUT_VOL_CTRL
:

331 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 63);

332 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

333 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

334 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 63, 
adc_pga_dac_gaö_˘æ
.
b8
);

336 
DACR1_2_HPROUT_VOL_CTRL
:

337 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 64);

338 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

339 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

340 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 64, 
adc_pga_dac_gaö_˘æ
.
b8
);

342 
HPROUT_OUTPUT_LEVEL_CTRL
:

343 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 65);

344 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

345 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

346 
löe_hpcom_out_˘æ
.
bô
.
powî_°©us
 = 
audio_˘æ
->
if_powîup
;

347 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 65, 
löe_hpcom_out_˘æ
.
b8
);

349 
PGAR_2_HPRCOM_VOL_CTRL
:

350 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 70);

351 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

352 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

353 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 70, 
adc_pga_dac_gaö_˘æ
.
b8
);

355 
DACR1_2_HPRCOM_VOL_CTRL
:

356 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 71);

357 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

358 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

359 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 71, 
adc_pga_dac_gaö_˘æ
.
b8
);

361 
HPRCOM_OUTPUT_LEVEL_CTRL
:

362 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 72);

363 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

364 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

365 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 72, 
löe_hpcom_out_˘æ
.
b8
);

367 
PGAL_2_LEFT_LOP_VOL_CTRL
:

368 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 81);

369 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

370 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

371 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 81, 
adc_pga_dac_gaö_˘æ
.
b8
);

373 
DACL1_2_LEFT_LOP_VOL_CTRL
:

374 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 82);

375 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

376 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

377 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 82, 
adc_pga_dac_gaö_˘æ
.
b8
);

379 
LEFT_LOP_OUTPUT_LEVEL_CTRL
:

380 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 86);

381 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

382 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

383 
löe_hpcom_out_˘æ
.
bô
.
powî_°©us
 = 
audio_˘æ
->
if_powîup
;

384 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 86, 
löe_hpcom_out_˘æ
.
b8
);

386 
PGAR_2_RIGHT_LOP_VOL_CTRL
:

387 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 91);

388 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

389 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

390 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 91, 
adc_pga_dac_gaö_˘æ
.
b8
);

392 
DACR1_2_RIGHT_LOP_VOL_CTRL
:

393 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 92);

394 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

395 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

396 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 92, 
adc_pga_dac_gaö_˘æ
.
b8
);

398 
RIGHT_LOP_OUTPUT_LEVEL_CTRL
:

399 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 93);

400 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

401 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

402 
löe_hpcom_out_˘æ
.
bô
.
powî_°©us
 = 
audio_˘æ
->
if_powîup
;

403 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 93, 
löe_hpcom_out_˘æ
.
b8
);

405 
SET_ADC_SAMPLE
:

406 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 2);

407 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2l_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
ßm∂e
;

408 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 2, 
ö2_adc_˘æ_ßm∂e
.
b8
);

410 
SET_DAC_SAMPLE
:

411 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 2);

412 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2r_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
ßm∂e
;

413 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 2, 
ö2_adc_˘æ_ßm∂e
.
b8
);

416 
SET_DATA_LENGTH
:

417 
£rül_öt_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 9);;

418 
£rül_öt_˘æ
.
bô
.
d©a_Àngth
 = 
audio_˘æ
->data_length;

421 
SET_TRANSFER_MODE
:

422 
£rül_öt_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 9);

423 
£rül_öt_˘æ
.
bô
.
å™s„r_mode
 = 
audio_˘æ
->
å™s_mode
;

424 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 9, 
£rül_öt_˘æ
.
b8
);

426 
SET_CTRL_MODE
:

429 
˘æ_mode
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 8);

430 
˘æ_mode
.
bô
.
bô_˛ock_dic_˘æ
 = 
audio_˘æ
->ctrl_mode;

431 
˘æ_mode
.
bô
.
w‹k_˛ock_dic_˘æ
 = 
audio_˘æ
->ctrl_mode;

432 
˘æ_mode
.
bô
.
bô_w‹k_dri_˘æ
 = 
audio_˘æ
->ctrl_mode;

433 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 8, 
˘æ_mode
.
b8
);

436 i‡(1 =
audio_˘æ
->
˘æ_mode


437 || (
AC31_SET_48K_SAMPLERATE
 !
audio_˘æ
->
ßm∂e
 && 
AC31_SET_44_1K_SAMPLERATE
 !=áudio_ctrl->sample))

440 i‡((1 =
audio_˘æ
->
if_44100hz_£rõs
))

443 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x81);

444 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x1c);

445 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x36);

446 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0xb0);

447 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

448 
codec_d©≠©h_£tup_˘æ
.
b8
 |= 0x80;

449 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

450 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

451 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 101, 0x0);

452 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0xc2);

457 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x81);

458 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x20);

459 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x0);

460 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x0);

461 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

462 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

463 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

464 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

465 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 101, 0x0);

466 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0xc2);

472 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0x22);

473 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

474 i‡((1 =
audio_˘æ
->
if_44100hz_£rõs
))

476 
codec_d©≠©h_£tup_˘æ
.
b8
 |= 0x80;

480 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

482 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

484 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x81);

485 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 32 << 2);

486 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x0);

487 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x0);

488 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 101, 0x0);

489 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x2);

494 
audio_˘æ
->
ßm∂eR©e
)

501 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x81);

502 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x30);

503 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x0);

504 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x0);

505 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

506 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

507 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

508 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

509 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 101, 0x0);

510 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0xc2);

518 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x81);

519 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x20);

520 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x0);

521 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x0);

522 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

523 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

524 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

525 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

526 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 101, 0x0);

527 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0xc2);

535 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x81);

536 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x20);

537 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x00);

538 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x00);

539 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

540 
codec_d©≠©h_£tup_˘æ
.
b8
 |= 0x80;

541 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

542 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

543 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 101, 0x0);

544 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0xc2);

549 
	`¥ötk
("aic31 unsuµ‹àßm∂eR©ê%d\n", 
audio_˘æ
->
ßm∂eR©e
);

555 
LEFT_DAC_VOL_CTRL
:

556 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 43);

557 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

558 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

559 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 43, 
adc_pga_dac_gaö_˘æ
.
b8
);

561 
RIGHT_DAC_VOL_CTRL
:

562 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 44);

563 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

564 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

565 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 44, 
adc_pga_dac_gaö_˘æ
.
b8
);

567 
LEFT_DAC_POWER_SETUP
:

568 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

569 
codec_d©≠©h_£tup_˘æ
.
bô
.
À·_dac_d©≠©h_˘æ
 = 
audio_˘æ
->
if_powîup
;

570 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

571 
dac_powî_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 37);

572 
dac_powî_˘æ
.
bô
.
À·_dac_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

573 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 37, 
dac_powî_˘æ
.
b8
);

575 
RIGHT_DAC_POWER_SETUP
:

576 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 7);

577 
codec_d©≠©h_£tup_˘æ
.
bô
.
right_dac_d©≠©h_˘æ
 = 
audio_˘æ
->
if_powîup
;

578 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 
codec_d©≠©h_£tup_˘æ
.
b8
);

579 
dac_powî_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 37);

580 
dac_powî_˘æ
.
bô
.
right_dac_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

581 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 37, 
dac_powî_˘æ
.
b8
);

583 
DAC_OUT_SWITCH_CTRL
:

584 
dac_ouçut_swô_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 41);

585 
dac_ouçut_swô_˘æ
.
bô
.
À·_dac_swi_˘æ
 = 
audio_˘æ
->
dac_∑th
;

586 
dac_ouçut_swô_˘æ
.
bô
.
right_dac_swi_˘æ
 = 
audio_˘æ
->
dac_∑th
;

587 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 41, 
dac_ouçut_swô_˘æ
.
b8
);

589 
LEFT_ADC_PGA_CTRL
:

590 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 15);

591 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

592 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

593 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 15, 
adc_pga_dac_gaö_˘æ
.
b8
);

595 
RIGHT_ADC_PGA_CTRL
:

596 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 16);

597 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

598 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

599 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 16, 
adc_pga_dac_gaö_˘æ
.
b8
);

601 
SET_SERIAL_DATA_OFFSET
:

602 
£rül_d©a_off£t_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
], 10);

603 
£rül_d©a_off£t_˘æ
.
bô
.
£rül_d©a_off£t
 = 
audio_˘æ
->
d©a_off£t
;

604 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 10, 
£rül_d©a_off£t_˘æ
.
b8
);

606 
SOFT_RESET
:

608 
	`so·_ª£t
(
chù_num
);

610 
TLV320AIC31_REG_DUMP
:

611 
	`év320aic31_ªg_dump
(102);

617 
	}
}

619 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


620 
	$év320aic31_‰ìze
(
himedü_devi˚
* 
pdev
)

622 
	`¥ötk
(
KERN_ALERT
 "%† %d\n", 
__FUNCTION__
, 
__LINE__
);

624 
	}
}

626 
	$év320aic31_ª°‹e
(
himedü_devi˚
* 
pdev
)

628 
i
;

630 
i
 = 0; i < 
chù_cou¡
; i++)

632 i‡(
	`év320aic31_devi˚_öô
(
i
) < 0)

634 
	`¥ötk
(
KERN_ALERT
 "%† %d,Ålv320aic31 devi˚ inô faû!\n", 
__FUNCTION__
, 
__LINE__
);

638 
	`¥ötk
(
KERN_ALERT
 "%† %d\n", 
__FUNCTION__
, 
__LINE__
);

640 
	}
}

647 
fûe_›î©i⁄s
 
	gév320aic31_f›s
 =

649 .
ow√r
 = 
THIS_MODULE
,

650 .
	gu∆ocked_io˘l
 = 
év320aic31_io˘l
,

651 .
	g›í
 = 
év320aic31_›í
,

652 .
	gªÀa£
 = 
év320aic31_˛o£


655 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


656 
himedü_›s
 
	g°Tlv320aic31DrvOps
 =

658 .
pm_‰ìze
 = 
év320aic31_‰ìze
,

659 .
	gpm_ª°‹e
 = 
év320aic31_ª°‹e


662 
miscdevi˚
 
	gév320aic31_dev
 =

664 
MISC_DYNAMIC_MINOR
,

665 
DEV_NAME
,

666 &
év320aic31_f›s
,

670 
	$£t_chù_cou¡
(c⁄° * 
vÆ
, c⁄° 
kî√l_∑øm
* 
kp
)

672 
ªt
;

673 
chù_cou¡
;

675 
ªt
 = 
	`k°πoöt
(
vÆ
, 10, &
chù_cou¡
);

676 i‡(
ªt
 < 0)

678  -
EINVAL
;

681 i‡(
chù_cou¡
 < 0 || chù_cou¡ > 
CHIP_NUM
)

683 
	`¥ötk
("chù_cou¡%dÉº. \n", 
chù_cou¡
);

684  -
EINVAL
;

687 
	}
}

689 
kî√l_∑øm_›s
 
	gÆv320_∑ø_›s
 =

691 .
£t
 = 
£t_chù_cou¡
,

695 
moduÀ_∑øm
(
chù_cou¡
, , 0);

697 
moduÀ_∑øm_cb
(
chù_cou¡
, &
Æv320_∑ø_›s
, &chip_count, 0644);

700 
MODULE_PARM_DESC
(
chù_cou¡
, "theÇum we device usesÅheÅlv320aic31,default 1");

702 
	$év320aic31_ªboŸ
(
nŸifõr_block
* 
£lf
, 
d©a
, * 
pd©a
)

704 
i
;

706 
i
 = 0; i < 
chù_cou¡
; i++)

709 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
i
], 51, 0x04);

712 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
i
], 65, 0x04);

715 
	`¥ötk
("Func:%s,Üöe:%d######\n", 
__FUNCTION__
, 
__LINE__
);

717 
	}
}

719 
nŸifõr_block
 
	gév320aic31_ªboŸ_nŸifõr
 =

721 .
nŸifõr_ˇŒ
 = 
év320aic31_ªboŸ
,

724 
	$év320aic31_devi˚_öô
(
num
)

727 
ãmp
 = 0;

728 
ãmp
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
num
], 0x2);

729 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[0], 0x2, 0xaa);

730 i‡–
	`év320aic31_ªad
(
IIC_devi˚_addr
[
num
], 0x2) != 0xaa)

732 
	`DPRINTK
(0, "öôáic31(%dËîr‹", 
num
);

735 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
num
], 0x2, 
ãmp
);

737 
	`so·_ª£t
(
num
);

740 
	`ªgi°î_ªboŸ_nŸifõr
(&
év320aic31_ªboŸ_nŸifõr
);

743 
	}
}

745 
	$év320aic31_devi˚_exô
(
num
)

748 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
num
], 51, 0x04);

751 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
num
], 65, 0x04);

754 
	}
}

756 
	$i2c_˛õ¡_öô
()

758 
i2c_ad≠ãr
* 
i2c_ad≠
;

761 
i2c_ad≠
 = 
	`i2c_gë_ad≠ãr
(2);

762 
év_˛õ¡
 = 
	`i2c_√w_devi˚
(
i2c_ad≠
, &
hi_öfo
);

764 
	`i2c_put_ad≠ãr
(
i2c_ad≠
);

767 
	}
}

769 
	$i2c_˛õ¡_exô
()

771 
	`i2c_uƒegi°î_devi˚
(
év_˛õ¡
);

772 
	}
}

774 
__öô
 
	$év320aic31_öô
()

776 
i
, 
ªt
;

778 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


779 
	`¢¥ötf
(
s_°Tlv320aic31Devi˚
.
devfs_«me
, (s_°Tlv320aic31Devi˚.devfs_«me), 
DEV_NAME
);

781 
s_°Tlv320aic31Devi˚
.
mö‹
 = 
HIMEDIA_DYNAMIC_MINOR
;

782 
s_°Tlv320aic31Devi˚
.
f›s
 = &
év320aic31_f›s
;

783 
s_°Tlv320aic31Devi˚
.
drv›s
 = &
°Tlv320aic31DrvOps
;

784 
s_°Tlv320aic31Devi˚
.
ow√r
 = 
THIS_MODULE
;

786 
ªt
 = 
	`himedü_ªgi°î
(&
s_°Tlv320aic31Devi˚
);

787 i‡(
ªt
)

789 
	`DPRINTK
(0, "couldÇotÑegisterÅlv320aic31 device");

793 
ªt
 = 
	`misc_ªgi°î
(&
év320aic31_dev
);

794 i‡(
ªt
)

796 
	`DPRINTK
(0, "couldÇotÑegisterÅlv320aic31 device");

801 
	`i2c_˛õ¡_öô
();

802 
i
 = 0; i < 
chù_cou¡
; i++)

804 i‡(
	`év320aic31_devi˚_öô
(
i
) < 0)

806 
öô_Áû
;

809 
	`DPRINTK
(1, "tlv320aic31 driver init successful!");

810 
	`¥ötk
("loadÅlv320aic31.ko for Hi3516A ok!\n");

811  
ªt
;

812 
öô_Áû
:

813 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


814 
	`himedü_uƒegi°î
(&
s_°Tlv320aic31Devi˚
);

816 
	`misc_dîegi°î
(&
év320aic31_dev
);

818 
	`DPRINTK
(0, "tlv320aic31 device init fail,deregister it!");

820 
	}
}

822 
__exô
 
	$év320aic31_exô
()

824 
i
;

826 
i
 = 0; i < 
chù_cou¡
; i++)

828 
	`év320aic31_devi˚_exô
(
i
);

831 
	`uƒegi°î_ªboŸ_nŸifõr
(&
év320aic31_ªboŸ_nŸifõr
);

833 #ifde‡
CONFIG_HISI_SNAPSHOT_BOOT


834 
	`himedü_uƒegi°î
(&
s_°Tlv320aic31Devi˚
);

836 
	`misc_dîegi°î
(&
év320aic31_dev
);

839 
	`i2c_˛õ¡_exô
();

841 
	`DPRINTK
(1, "deregisterÅlv320aic31");

842 
	`¥ötk
("rmmodÅlv320aic31.ko for Hi3516A ok!\n");

843 
	}
}

845 
moduÀ_öô
(
év320aic31_öô
);

846 
moduÀ_exô
(
év320aic31_exô
);

847 
MODULE_LICENSE
("GPL");

848 
MODULE_AUTHOR
("Hisilicon");

	@extdrv/tlv320aic31/tlv320aic31.h

8 #i‚de‡
_INC_TLV320AIC31


9 
	#_INC_TLV320AIC31


	)

11 
	#IN2LR_2_LEFT_ADC_CTRL
 0x0

	)

12 
	#IN2LR_2_RIGTH_ADC_CTRL
 0x1

	)

13 
	#IN1L_2_LEFT_ADC_CTRL
 0x2

	)

14 
	#IN1R_2_RIGHT_ADC_CTRL
 0x3

	)

15 
	#PGAL_2_HPLOUT_VOL_CTRL
 0x4

	)

16 
	#PGAR_2_HPLOUT_VOL_CTRL
 0x5

	)

17 
	#DACL1_2_HPLOUT_VOL_CTRL
 0x6

	)

18 
	#DACR1_2_HPLOUT_VOL_CTRL
 0x7

	)

19 
	#HPLOUT_OUTPUT_LEVEL_CTRL
 0x8

	)

20 
	#PGAL_2_HPLCOM_VOL_CTRL
 0x9

	)

21 
	#PGAR_2_HPLCOM_VOL_CTRL
 0xa

	)

22 
	#DACL1_2_HPLCOM_VOL_CTRL
 0xb

	)

23 
	#DACR1_2_HPLCOM_VOL_CTRL
 0xc

	)

24 
	#HPLCOM_OUTPUT_LEVEL_CTRL
 0xd

	)

25 
	#PGAR_2_HPROUT_VOL_CTRL
 0xf

	)

26 
	#DACR1_2_HPROUT_VOL_CTRL
 0x10

	)

27 
	#HPROUT_OUTPUT_LEVEL_CTRL
 0x11

	)

28 
	#PGAR_2_HPRCOM_VOL_CTRL
 0x12

	)

29 
	#DACR1_2_HPRCOM_VOL_CTRL
 0X13

	)

30 
	#HPRCOM_OUTPUT_LEVEL_CTRL
 0x14

	)

31 
	#PGAL_2_LEFT_LOP_VOL_CTRL
 0x15

	)

32 
	#DACL1_2_LEFT_LOP_VOL_CTRL
 0x16

	)

33 
	#LEFT_LOP_OUTPUT_LEVEL_CTRL
 0x17

	)

34 
	#PGAR_2_RIGHT_LOP_VOL_CTRL
 0x18

	)

35 
	#DACR1_2_RIGHT_LOP_VOL_CTRL
 0x19

	)

36 
	#RIGHT_LOP_OUTPUT_LEVEL_CTRL
 0x20

	)

37 
	#SET_ADC_SAMPLE
 0x21

	)

38 
	#SET_DAC_SAMPLE
 0x22

	)

39 
	#SET_DATA_LENGTH
 0x23

	)

40 
	#SET_CTRL_MODE
 0x24

	)

41 
	#LEFT_DAC_VOL_CTRL
 0x25

	)

42 
	#RIGHT_DAC_VOL_CTRL
 0x26

	)

43 
	#LEFT_DAC_POWER_SETUP
 0x27

	)

44 
	#RIGHT_DAC_POWER_SETUP
 0x28

	)

45 
	#DAC_OUT_SWITCH_CTRL
 0x29

	)

46 
	#LEFT_ADC_PGA_CTRL
 0x30

	)

47 
	#RIGHT_ADC_PGA_CTRL
 0x31

	)

48 
	#TLV320AIC31_REG_DUMP
 0x32

	)

49 
	#SOFT_RESET
 0x33

	)

50 
	#SET_TRANSFER_MODE
 0x34

	)

51 
	#SET_SERIAL_DATA_OFFSET
 0X35

	)

66 
	#AC31_SET_8K_SAMPLERATE
 0xa

	)

67 
	#AC31_SET_12K_SAMPLERATE
 0x6

	)

68 
	#AC31_SET_16K_SAMPLERATE
 0x4

	)

69 
	#AC31_SET_24K_SAMPLERATE
 0x2

	)

70 
	#AC31_SET_32K_SAMPLERATE
 0x1

	)

71 
	#AC31_SET_48K_SAMPLERATE
 0x0

	)

73 
	#AC31_SET_11_025K_SAMPLERATE
 0x6

	)

74 
	#AC31_SET_22_05K_SAMPLERATE
 0x2

	)

75 
	#AC31_SET_44_1K_SAMPLERATE
 0x0

	)

77 
	#AC31_SET_SLAVE_MODE
 0

	)

78 
	#AC31_SET_MASTER_MODE
 1

	)

80 
	#AC31_SET_16BIT_WIDTH
 0

	)

81 
	#AC31_SET_20BIT_WIDTH
 1

	)

82 
	#AC31_SET_24BIT_WIDTH
 2

	)

83 
	#AC31_SET_32BIT_WIDTH
 3

	)

88 
	eAudio_In_


90 
	mIN1L
 = 0,

91 
	mIN1R
 = 1,

92 
	mIN2L
 = 2,

93 
	mIN2R
 = 3,

94 } 
	tAudio_In
;

95 
	eAudio_Out_


97 
	mLINE_OUT_R
 = 0,

98 
	mLINE_OUT_L
,

99 
	mHPL
,

100 
	mHPR
,

101 } 
	tAudio_Out
;

104 
	mchù_num
: 3;

105 
	maudio_ö_out
: 2;

106 
	mif_muã_rouã
: 1;

107 
	mif_powîup
: 1;

108 
	möput_Àvñ
: 7;

109 
	mßm∂e
: 4;

110 
	mif_44100hz_£rõs
: 1;

111 
	md©a_Àngth
: 2;

112 
	m˘æ_mode
: 1;

113 
	mdac_∑th
: 2;

114 
	må™s_mode
: 2;

115 
	mª£rved
 : 6;

116 
	md©a_off£t
: 8;

117 
	mßm∂eR©e
;

118 } 
	tAudio_Cål
;

	@extdrv/tlv320aic31/tlv320aic31_def.h

1 #i‚de‡
_INC_TLV320AIC31_DEF


2 
	#_INC_TLV320AIC31_DEF


	)

9 
	mª£rved2
 : 4;

10 
	mbô_w‹k_dri_˘æ
: 1;

11 
	mª£rved1
: 1;

12 
	mw‹k_˛ock_dic_˘æ
: 1;

13 
	mbô_˛ock_dic_˘æ
: 1;

14 } 
	mbô
;

15 
	mb8
;

16 } 
	tCål_Mode
;

22 
	möput_vﬁ_Àvñ_˘æ
: 7;

23 
	mif_muã_rouã
: 1;

24 } 
	mbô
;

25 
	mb8
;

26 } 
	tAdc_Pga_Dac_Gaö_Cål
;

32 
	mö2r_adc_öput_Àvñ_ßm∂e
: 4;

33 
	mö2l_adc_öput_Àvñ_ßm∂e
: 4;

34 } 
	mbô
;

35 
	mb8
;

36 } 
	tIn2_Adc_Cål_Sam∂e
;

42 
	madc_pga_°ï_˘æ
: 2;

43 
	madc_ch_powî_˘æ
: 1;

44 
	mö1_adc_öput_Àvñ
: 4;

45 
	mmode
: 1;

46 } 
	mbô
;

47 
	mb8
;

48 } 
	tIn1_Adc_Cål
;

54 
	mª£rved
: 4;

55 
	md©a_Àngth
: 2;

56 
	må™s„r_mode
: 2;

57 } 
	mbô
;

58 
	mb8
;

59 } 
	tSîül_I¡_Cål
;

65 
	mpowî_°©us
: 1;

66 
	mvﬁ_˘æ_°©us
: 1;

67 
	mpowî_down_˘æ
: 1;

68 
	mif_muã
: 1;

69 
	mouçut_Àvñ
: 4;

70 } 
	mbô
;

71 
	mb8
;

72 } 
	tLöe_Hpcom_Out_Cål
;

77 
	mª£rved1
: 1;

78 
	mright_dac_d©≠©h_˘æ
: 2;

79 
	mÀ·_dac_d©≠©h_˘æ
: 2;

80 
	mª£rved2
: 3;

81 } 
	mbô
;

82 
	mb8
;

83 } 
	tCodec_D©≠©h_Sëup_Cål
;

88 
	mª£rved
: 6;

89 
	mright_dac_powî_˘æ
: 1;

90 
	mÀ·_dac_powî_˘æ
: 1;

91 } 
	mbô
;

92 
	mb8
;

93 } 
	tDAC_POWER_CTRL
;

98 
	mª£rved
: 4;

99 
	mright_dac_swi_˘æ
: 2;

100 
	mÀ·_dac_swi_˘æ
: 2;

101 } 
	mbô
;

102 
	mb8
;

103 } 
	tDAC_OUTPUT_SWIT_CTRL
;

109 
	m£rül_d©a_off£t
: 8;

110 } 
	mbô
;

111 
	mb8
;

112 } 
	tSîül_D©a_Off£t_Cål
;

	@extdrv/tlv320aic31/tlv_320aic31.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@include/acodec.h

1 #i‚de‡
_ACODEC_H_


2 
	#_ACODEC_H_


	)

4 
	#IOC_TYPE_ACODEC
 'A'

	)

6 
	ehiACODEC_FS_E
 {

7 
	mACODEC_FS_48000
 = 0x1a,

8 
	mACODEC_FS_24000
 = 0x19,

9 
	mACODEC_FS_12000
 = 0x18,

11 
	mACODEC_FS_44100
 = 0x1a,

12 
	mACODEC_FS_22050
 = 0x19,

13 
	mACODEC_FS_11025
 = 0x18,

15 
	mACODEC_FS_32000
 = 0x1a,

16 
	mACODEC_FS_16000
 = 0x19,

17 
	mACODEC_FS_8000
 = 0x18,

19 
	mACODEC_FS_BUTT
 = 0x1b,

20 } 
	tACODEC_FS_E
;

22 
	ehiACODEC_MIXER_E
 {

24 
	mACODEC_MIXER_MICIN_D
 = 0x0,

25 
	mACODEC_MIXER_MICIN
 = 0x1,

26 
	mACODEC_MIXER_MICLINE_D
 = 0x2,

27 
	mACODEC_MIXER_LINEIN
 = 0x3,

28 
	mACODEC_MIXER_LINEIN_D
 = 0x4,

30 
	mACODEC_MIXER_BUTT
,

31 } 
	tACODEC_MIXER_E
;

35 
	mvﬁ_˘æ
;

37 
	mvﬁ_˘æ_muã
;

38 } 
	tACODEC_VOL_CTRL
;

40 
	ehiACODEC_IOCTL_E
 {

41 
	mIOC_NR_SOFT_RESET_CTRL
 = 0x0,

42 
	mIOC_NR_POWER_DOWN_CTRL
,

53 
	mIOC_NR_SET_INPUT_VOL
 ,

62 
	mIOC_NR_SET_OUTPUT_VOL
,

63 
	mIOC_NR_GET_INPUT_VOL
,

64 
	mIOC_NR_GET_OUTPUT_VOL
,

66 
	mIOC_NR_SET_I2S1_FS
,

67 
	mIOC_NR_SET_MIXER_MIC
,

68 
	mIOC_NR_SEL_DAC_CLK
,

69 
	mIOC_NR_SEL_ANA_MCLK
,

70 
	mIOC_NR_SET_GAIN_MICL
,

71 
	mIOC_NR_SET_GAIN_MICR
,

72 
	mIOC_NR_SET_DACL_VOL
,

73 
	mIOC_NR_SET_DACR_VOL
,

74 
	mIOC_NR_SET_ADCL_VOL
,

75 
	mIOC_NR_SET_ADCR_VOL
,

76 
	mIOC_NR_SET_MICL_MUTE
,

77 
	mIOC_NR_SET_MICR_MUTE
,

78 
	mIOC_NR_SET_DACL_MUTE
,

79 
	mIOC_NR_SET_DACR_MUTE
,

80 
	mIOC_NR_DAC_SOFT_MUTE
,

81 
	mIOC_NR_DAC_SOFT_UNMUTE
,

83 
	mIOC_NR_GET_GAIN_MICL
,

84 
	mIOC_NR_GET_GAIN_MICR
,

85 
	mIOC_NR_GET_DACL_VOL
,

86 
	mIOC_NR_GET_DACR_VOL
,

87 
	mIOC_NR_GET_ADCL_VOL
,

88 
	mIOC_NR_GET_ADCR_VOL
,

90 
	mIOC_NR_SET_PD_DACL
,

91 
	mIOC_NR_SET_PD_DACR
,

92 
	mIOC_NR_SET_PD_ADCL
,

93 
	mIOC_NR_SET_PD_ADCR
,

95 
	mIOC_NR_DACL_SEL_TRACK
,

96 
	mIOC_NR_DACR_SEL_TRACK
,

97 
	mIOC_NR_ADCL_SEL_TRACK
,

98 
	mIOC_NR_ADCR_SEL_TRACK
,

99 
	mIOC_NR_SET_DAC_DE_EMPHASIS
,

100 
	mIOC_NR_SET_ADC_HP_FILTER
,

101 
	mIOC_NR_DAC_POP_FREE
,

102 
	mIOC_NR_DAC_SOFT_MUTE_RATE
,

104 
	mIOC_NR_DAC_SEL_I2S
,

105 
	mIOC_NR_ADC_SEL_I2S
,

106 
	mIOC_NR_SET_I2S1_DATAWIDTH
,

107 
	mIOC_NR_SET_I2S2_DATAWIDTH
,

108 
	mIOC_NR_SET_I2S2_FS
,

109 
	mIOC_NR_SET_DACR2DACL_VOL
,

110 
	mIOC_NR_SET_DACL2DACR_VOL
,

111 
	mIOC_NR_SET_ADCR2DACL_VOL
,

112 
	mIOC_NR_SET_ADCL2DACR_VOL
,

113 
	mIOC_NR_SET_ADCR2DACR_VOL
,

114 
	mIOC_NR_SET_ADCL2DACL_VOL
,

115 } 
	tACODEC_IOCTL_E
;

118 
	#ACODEC_SOFT_RESET_CTRL
 \

	)

119 
	$_IO
(
IOC_TYPE_ACODEC
, 
IOC_NR_SOFT_RESET_CTRL
)

120 
	#ACODEC_POWER_DOWN_CTRL
 \

	)

121 
	$_IO
(
IOC_TYPE_ACODEC
, 
IOC_NR_POWER_DOWN_CTRL
)

123 
	#ACODEC_SET_I2S1_FS
 \

	)

124 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S1_FS
, )

126 
	#ACODEC_SET_MIXER_MIC
 \

	)

127 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_MIXER_MIC
, )

129 
	#ACODEC_SET_GAIN_MICL
 \

	)

130 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_GAIN_MICL
, )

132 
	#ACODEC_SET_GAIN_MICR
 \

	)

133 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_GAIN_MICR
, )

135 
	#ACODEC_SET_DACL_VOL
 \

	)

136 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACL_VOL
, 
ACODEC_VOL_CTRL
)

138 
	#ACODEC_SET_DACR_VOL
 \

	)

139 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACR_VOL
, 
ACODEC_VOL_CTRL
)

141 
	#ACODEC_SET_ADCL_VOL
 \

	)

142 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCL_VOL
, 
ACODEC_VOL_CTRL
)

144 
	#ACODEC_SET_ADCR_VOL
 \

	)

145 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCR_VOL
, 
ACODEC_VOL_CTRL
)

147 
	#ACODEC_SET_MICL_MUTE
 \

	)

148 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_MICL_MUTE
, )

150 
	#ACODEC_SET_MICR_MUTE
 \

	)

151 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_MICR_MUTE
, )

153 
	#ACODEC_SET_DACL_MUTE
 \

	)

154 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACL_MUTE
, )

156 
	#ACODEC_SET_DACR_MUTE
 \

	)

157 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACR_MUTE
, )

159 
	#ACODEC_DAC_SOFT_MUTE
 \

	)

160 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SOFT_MUTE
, )

162 
	#ACODEC_DAC_SOFT_UNMUTE
 \

	)

163 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SOFT_UNMUTE
, )

165 
	#ACODEC_GET_GAIN_MICL
 \

	)

166 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_GAIN_MICL
, )

167 
	#ACODEC_GET_GAIN_MICR
 \

	)

168 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_GAIN_MICR
, )

169 
	#ACODEC_GET_DACL_VOL
 \

	)

170 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_DACL_VOL
, 
ACODEC_VOL_CTRL
)

171 
	#ACODEC_GET_DACR_VOL
 \

	)

172 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_DACR_VOL
, 
ACODEC_VOL_CTRL
)

173 
	#ACODEC_GET_ADCL_VOL
 \

	)

174 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_ADCL_VOL
, 
ACODEC_VOL_CTRL
)

175 
	#ACODEC_GET_ADCR_VOL
 \

	)

176 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_ADCR_VOL
, 
ACODEC_VOL_CTRL
)

179 
	#ACODEC_SET_PD_DACL
 \

	)

180 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_DACL
, )

182 
	#ACODEC_SET_PD_DACR
 \

	)

183 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_DACR
, )

185 
	#ACODEC_SET_PD_ADCL
 \

	)

186 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_ADCL
, )

188 
	#ACODEC_SET_PD_ADCR
 \

	)

189 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_ADCR
, )

193 
	#ACODEC_SEL_DAC_CLK
 \

	)

194 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SEL_DAC_CLK
, )

196 
	#ACODEC_SEL_ANA_MCLK
 \

	)

197 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SEL_ANA_MCLK
, )

198 
	#ACODEC_DACL_SEL_TRACK
 \

	)

199 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DACL_SEL_TRACK
, )

200 
	#ACODEC_DACR_SEL_TRACK
 \

	)

201 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DACR_SEL_TRACK
, )

202 
	#ACODEC_ADCL_SEL_TRACK
 \

	)

203 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_ADCL_SEL_TRACK
, )

204 
	#ACODEC_ADCR_SEL_TRACK
 \

	)

205 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_ADCR_SEL_TRACK
, )

206 
	#ACODEC_SET_DAC_DE_EMPHASIS
 \

	)

207 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DAC_DE_EMPHASIS
, )

208 
	#ACODEC_SET_ADC_HP_FILTER
 \

	)

209 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADC_HP_FILTER
, )

210 
	#ACODEC_DAC_POP_FREE
 \

	)

211 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_POP_FREE
, )

212 
	#ACODEC_DAC_SOFT_MUTE_RATE
 \

	)

213 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SOFT_MUTE_RATE
, )

214 
	#ACODEC_SET_INPUT_VOL
 \

	)

215 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_INPUT_VOL
, )

216 
	#ACODEC_SET_OUTPUT_VOL
 \

	)

217 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_OUTPUT_VOL
, )

218 
	#ACODEC_GET_INPUT_VOL
 \

	)

219 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_INPUT_VOL
, )

220 
	#ACODEC_GET_OUTPUT_VOL
 \

	)

221 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_OUTPUT_VOL
, )

224 
	#ACODEC_DAC_SEL_I2S
 \

	)

225 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SEL_I2S
, )

226 
	#ACODEC_ADC_SEL_I2S
 \

	)

227 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_ADC_SEL_I2S
, )

228 
	#ACODEC_SET_I2S1_DATAWIDTH
 \

	)

229 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S1_DATAWIDTH
, )

230 
	#ACODEC_SET_I2S2_DATAWIDTH
 \

	)

231 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S2_DATAWIDTH
, )

232 
	#ACODEC_SET_I2S2_FS
 \

	)

233 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S2_FS
, )

234 
	#ACODEC_SET_DACR2DACL_VOL
 \

	)

235 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACR2DACL_VOL
, 
ACODEC_VOL_CTRL
)

236 
	#ACODEC_SET_DACL2DACR_VOL
 \

	)

237 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACL2DACR_VOL
, 
ACODEC_VOL_CTRL
)

238 
	#ACODEC_SET_ADCL2DACL_VOL
 \

	)

239 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCL2DACL_VOL
, 
ACODEC_VOL_CTRL
)

240 
	#ACODEC_SET_ADCR2DACL_VOL
 \

	)

241 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCR2DACL_VOL
, 
ACODEC_VOL_CTRL
)

242 
	#ACODEC_SET_ADCL2DACR_VOL
 \

	)

243 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCL2DACR_VOL
, 
ACODEC_VOL_CTRL
)

244 
	#ACODEC_SET_ADCR2DACR_VOL
 \

	)

245 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCR2DACR_VOL
, 
ACODEC_VOL_CTRL
)

	@include/dictionary.h

23 #i‚de‡
_DICTIONARY_H_


24 
	#_DICTIONARY_H_


	)

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 #i‡
HI_OS_TYPE
 =
HI_OS_LINUX


34 
	~<uni°d.h
>

37 #ifde‡
__˝lu•lus


38 #i‡
__˝lu•lus


60 
	#CL_NSBC
 1

	)

61 
	#CL_AKLR
 2

	)

62 
	#CL_CLINE
 3

	)

63 
	#CL_SLINE
 4

	)

65 
	s_di˘i⁄¨y_
 {

66 
n
 ;

67 
size
 ;

68 ** 
vÆ
 ;

69 ** 
key
 ;

70 * 
hash
 ;

73 
commN
;

74 
commSize
;

75 ** 
commít
;

76 * 
commHash
;

77 * 
commPœ˚
;

83 } 
	tdi˘i⁄¨y
 ;

89 * 
mem_doubÀ
(* 
±r
, 
size
);

102 
di˘i⁄¨y_hash
(c⁄° * 
key
);

115 
di˘i⁄¨y
 * 
di˘i⁄¨y_√w
(
size
);

126 
di˘i⁄¨y_dñ
(
di˘i⁄¨y
 * 
vd
);

142 * 
di˘i⁄¨y_gë
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, * 
def
);

157 
di˘i⁄¨y_gëch¨
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
def
) ;

172 
di˘i⁄¨y_gëöt
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
def
);

187 
di˘i⁄¨y_gëdoubÀ
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
def
);

213 
di˘i⁄¨y_£t
(c⁄° 
di˘i⁄¨y
 * 
vd
, c⁄° * 
key
, c⁄° * 
vÆ
);

214 
di˘i⁄¨y_add
(
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° * 
vÆ
);

226 
di˘i⁄¨y_un£t
(
di˘i⁄¨y
 * 
d
, c⁄° * 
key
);

241 
di˘i⁄¨y_£töt
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
vÆ
);

255 
di˘i⁄¨y_£tdoubÀ
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
vÆ
);

269 
di˘i⁄¨y_dump
(
di˘i⁄¨y
 * 
d
, 
FILE
 * 
out
);

270 #ifde‡
__˝lu•lus


271 #i‡
__˝lu•lus


	@include/hi_ae_comm.h

17 #i‚de‡
__HI_AE_COMM_H__


18 
	#__HI_AE_COMM_H__


	)

20 
	~"hi_ty≥.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	#HI_AE_LIB_NAME
 "hisi_´_lib"

	)

31 
	ehiAE_CTRL_CMD_E


33 
AE_DEBUG_ATTR_SET
,

34 
AE_DEBUG_ATTR_GET
,

36 
AE_CTRL_BUTT
,

37 } 
	tAE_CTRL_CMD_E
;

39 
	shiAE_DBG_ATTR_S


41 
HI_U32
 
u32MaxI¡Time
;

42 
HI_U32
 
u32MöI¡Time
;

43 
HI_U32
 
u32MaxAgaö
;

44 
HI_U32
 
u32MöAgaö
;

45 
HI_U32
 
u32MaxDgaö
;

46 
HI_U32
 
u32MöDgaö
;

47 
HI_U32
 
u32MaxI•Dgaö
;

48 
HI_U32
 
u32MöI•Dgaö
;

49 
HI_U32
 
u32MaxSysGaö
;

50 
HI_U32
 
u32MöSysGaö
;

51 
HI_U32
 
u32Com≥nßti⁄
;

52 
HI_U32
 
u32EVBüs
;

53 
HI_BOOL
 
bM™uÆExposuªEn
;

54 
HI_BOOL
 
bM™uÆTimeEn
;

55 
HI_BOOL
 
bM™uÆAgaöEn
;

56 
HI_BOOL
 
bM™uÆDgaöEn
;

57 
HI_BOOL
 
bM™uÆI•DgaöEn
;

58 
HI_U32
 
u32M™uÆExposuªLöes
;

59 
HI_U32
 
u32M™uÆAgaö
;

60 
HI_U32
 
u32M™uÆDgaö
;

61 
HI_U32
 
u32M™uÆI•Dgaö
;

62 
HI_U32
 
au32AeWeights
[255];

63 }
	tAE_DBG_ATTR_S
;

65 
	shiAE_DBG_STATUS_S


67 
HI_U32
 
u32FrmNumBgn
;

68 
HI_U32
 
u32FuŒLöes
;

69 
HI_U32
 
u32I¡Time
;

70 
HI_U32
 
u32Agaö
;

71 
HI_U32
 
u32Dgaö
;

72 
HI_U32
 
u32I•Dgaö
;

73 
HI_U32
 
u32IrisFNOLö
;

74 
HI_U64
 
u64Exposuª
;

75 
HI_U32
 
u32In¸emít
;

76 
HI_S32
 
s32Hi°Eº‹
;

77 
HI_S32
 
s32Hi°OriAvîage
;

78 
HI_S32
 
s32LumaOff£t
;

79 
HI_U32
 
u32Iso
;

80 }
	tAE_DBG_STATUS_S
;

89 
	ehiAE_ACCURACY_E


91 
AE_ACCURACY_DB
 = 0,

92 
AE_ACCURACY_LINEAR
,

93 
AE_ACCURACY_TABLE
,

95 
AE_ACCURACY_BUTT
,

96 } 
	tAE_ACCURACY_E
;

98 
	shiAE_ACCURACY_S


100 
AE_ACCURACY_E
 
íAccuTy≥
;

101 
f32Accuøcy
;

102 
f32Off£t
;

103 } 
	tAE_ACCURACY_S
;

105 
	shiAE_SENSOR_DEFAULT_S


107 
HI_U8
 
au8Hi°Thªsh
[4];

108 
HI_U8
 
u8AeCom≥nßti⁄
;

110 
HI_U32
 
u32LöesPî500ms
;

111 
HI_U32
 
u32FlickîFªq
;

112 
HI_FLOAT
 
f32Fps
;

113 
HI_U32
 
u32InôExposuª
;

115 
HI_U32
 
u32FuŒLöesStd
;

116 
HI_U32
 
u32MaxI¡Time
;

117 
HI_U32
 
u32MöI¡Time
;

118 
HI_U32
 
u32MaxI¡TimeT¨gë
;

119 
HI_U32
 
u32MöI¡TimeT¨gë
;

120 
AE_ACCURACY_S
 
°I¡TimeAccu
;

122 
HI_U32
 
u32MaxAgaö
;

123 
HI_U32
 
u32MöAgaö
;

124 
HI_U32
 
u32MaxAgaöT¨gë
;

125 
HI_U32
 
u32MöAgaöT¨gë
;

126 
AE_ACCURACY_S
 
°AgaöAccu
;

128 
HI_U32
 
u32MaxDgaö
;

129 
HI_U32
 
u32MöDgaö
;

130 
HI_U32
 
u32MaxDgaöT¨gë
;

131 
HI_U32
 
u32MöDgaöT¨gë
;

132 
AE_ACCURACY_S
 
°DgaöAccu
;

134 
HI_U32
 
u32MaxISPDgaöT¨gë
;

135 
HI_U32
 
u32MöISPDgaöT¨gë
;

136 
HI_U32
 
u32ISPDgaöShi·
;

138 
ISP_AE_ROUTE_S
 
°AERouãAâr
;

139 
HI_BOOL
 
bAERouãExVÆid
;

140 
ISP_AE_ROUTE_EX_S
 
°AERouãAârEx
;

142 
HI_U8
 
u16M™R©ioE«bÀ
;

143 
HI_U32
 
u32R©io
;

145 
ISP_IRIS_TYPE_E
 
íIrisTy≥
;

146 
ISP_PIRIS_ATTR_S
 
°PúisAâr
;

147 } 
	tAE_SENSOR_DEFAULT_S
;

150 
	shiAE_SENSOR_EXP_FUNC_S


152 
HI_S32
(*
p‚_cmos_gë_´_deÁu…
)(
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
);

155 
HI_VOID
(*
p‚_cmos_Âs_£t
)(
HI_FLOAT
 
f32Fps
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
);

156 
HI_VOID
(*
p‚_cmos_¶ow_‰amî©e_£t
)(
HI_U32
 
u32FuŒLöes
, 
AE_SENSOR_DEFAULT_S
 *
p°AeSnsD·
);

159 
HI_VOID
(*
p‚_cmos_öâime_upd©e
)(
HI_U32
 
u32I¡Time
);

160 
HI_VOID
(*
p‚_cmos_gaös_upd©e
)(
HI_U32
 
u32Agaö
, HI_U32 
u32Dgaö
);

162 
HI_VOID
 (*
p‚_cmos_agaö_ˇlc_èbÀ
)(
HI_U32
 *
pu32AgaöLö
, HI_U32 *
pu32AgaöDb
);

163 
HI_VOID
 (*
p‚_cmos_dgaö_ˇlc_èbÀ
)(
HI_U32
 *
pu32DgaöLö
, HI_U32 *
pu32DgaöDb
);

165 
HI_VOID
 (*
p‚_cmos_gë_öâime_max
)(
HI_U32
 
u32R©io
, HI_U32 *
pu32I¡TimeMax
);

167 } 
	tAE_SENSOR_EXP_FUNC_S
;

169 
	shiAE_SENSOR_REGISTER_S


171 
AE_SENSOR_EXP_FUNC_S
 
°SnsExp
;

172 } 
	tAE_SENSOR_REGISTER_S
;

175 #ifde‡
__˝lu•lus


176 #i‡
__˝lu•lus


	@include/hi_af_comm.h

17 #i‚de‡
__HI_AF_COMM_H__


18 
	#__HI_AF_COMM_H__


	)

20 
	~"hi_ty≥.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	#HI_AF_LIB_NAME
 "hisi_af_lib"

	)

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


	@include/hi_awb_comm.h

17 #i‚de‡
__HI_AWB_COMM_H__


18 
	#__HI_AWB_COMM_H__


	)

20 
	~"hi_ty≥.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	#HI_AWB_LIB_NAME
 "hisi_awb_lib"

	)

31 
	ehiAWB_CTRL_CMD_E


33 
AWB_SATURATION_SET
,

34 
AWB_SATURATION_GET
,

36 
AWB_DEBUG_ATTR_SET
,

37 
AWB_DEBUG_ATTR_GET
,

39 
AWB_CTRL_BUTT
,

40 } 
	tAWB_CTRL_CMD_E
;

42 
	shiAWB_DBG_ATTR_S


44 
HI_U16
 
u16WhôeLevñ
;

45 
HI_U16
 
u16BœckLevñ
;

46 
HI_U16
 
u16CrMax
;

47 
HI_U16
 
u16CrMö
;

48 
HI_U16
 
u16CbMax
;

49 
HI_U16
 
u16CbMö
;

50 
HI_U16
 
u16CrHigh
;

51 
HI_U16
 
u16CrLow
;

52 
HI_U16
 
u16CbHigh
;

53 
HI_U16
 
u16CbLow
;

54 
HI_U16
 
u16RawWhôeLevñ
;

55 
HI_U16
 
u16RawBœckLevñ
;

56 
HI_U16
 
u16RawCrMax
;

57 
HI_U16
 
u16RawCrMö
;

58 
HI_U16
 
u16RawCbMax
;

59 
HI_U16
 
u16RawCbMö
;

60 
HI_U16
 
u16RawCrHigh
;

61 
HI_U16
 
u16RawCrLow
;

62 
HI_U16
 
u16RawCbHigh
;

63 
HI_U16
 
u16RawCbLow
;

65 
HI_U16
 
u16WDRMode
;

66 
HI_U16
 
u16E«bÀ
;

67 
HI_U16
 
u16M™uÆE«bÀ
;

68 
HI_U16
 
u16Z⁄e
;

69 
HI_U16
 
u16HighTemp
;

70 
HI_U16
 
u16LowTemp
;

71 
HI_U16
 
u16RefTemp
;

72 
HI_U16
 
u16RgaöBa£
;

73 
HI_U16
 
u16GgaöBa£
;

74 
HI_U16
 
u16BgaöBa£
;

75 
HI_S32
 
s32p1
;

76 
HI_S32
 
s32p2
;

77 
HI_S32
 
s32q
;

78 
HI_S32
 
s32a
;

79 
HI_S32
 
s32c
;

81 
HI_U16
 
u16M™S©E«bÀ
;

82 
HI_U16
 
u16S©T¨gë
;

83 } 
	tAWB_DBG_ATTR_S
;

85 
	shiAWB_ZONE_DBG_S


87 
HI_U16
 
u16Sum
;

88 
HI_U16
 
u16Rg
;

89 
HI_U16
 
u16Bg
;

90 
HI_U16
 
u16Cou¡AŒ
;

91 
HI_U16
 
u16Cou¡Mö
;

92 
HI_U16
 
u16Cou¡Max
;

93 
HI_U16
 
u16RawRAvg
;

94 
HI_U16
 
u16RawGAvg
;

95 
HI_U16
 
u16RawBAvg
;

96 
HI_U16
 
u16TK
;

97 
HI_U16
 
u16Weight
;

98 
HI_S16
 
s16Shi·
;

99 }
	tAWB_ZONE_DBG_S
;

101 
	shiAWB_DBG_STATUS_S


103 
HI_U32
 
u32FrmNumBgn
;

104 
HI_U32
 
u32GlobÆSum
;

105 
HI_U16
 
u16GlobÆRgSè
;

106 
HI_U16
 
u16GlobÆBgSè
;

107 
HI_U16
 
u16GlobÆCou¡AŒ
;

108 
HI_U16
 
u16GlobÆCou¡Mö
;

109 
HI_U16
 
u16GlobÆCou¡Max
;

110 
HI_U16
 
u16GlobÆRAvg
;

111 
HI_U16
 
u16GlobÆGAvg
;

112 
HI_U16
 
u16GlobÆBAvg
;

113 
HI_U16
 
u16TK
;

114 
HI_U16
 
u16Rgaö
;

115 
HI_U16
 
u16Ggaö
;

116 
HI_U16
 
u16Bgaö
;

117 
HI_U16
 
au16CCM
[9];

119 
HI_U32
 
au32Hi°Info
[256];

120 
AWB_ZONE_DBG_S
 
a°Z⁄eDebug
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

122 
HI_U32
 
u32FrmNumEnd
;

123 } 
	tAWB_DBG_STATUS_S
;

126 
	shiAWB_CCM_S


128 
HI_U16
 
u16HighCﬁ‹Temp
;

129 
HI_U16
 
au16HighCCM
[9];

130 
HI_U16
 
u16MidCﬁ‹Temp
;

131 
HI_U16
 
au16MidCCM
[9];

132 
HI_U16
 
u16LowCﬁ‹Temp
;

133 
HI_U16
 
au16LowCCM
[9];

134 }
	tAWB_CCM_S
;

136 
	shiAWB_AGC_TABLE_S


138 
HI_BOOL
 
bVÆid
;

140 
HI_U8
 
au8S©uøti⁄
[16];

141 } 
	tAWB_AGC_TABLE_S
;

143 
	shiAWB_SENSOR_DEFAULT_S


145 
HI_U16
 
u16WbRefTemp
;

146 
HI_U16
 
au16GaöOff£t
[4];

147 
HI_S32
 
as32WbP¨a
[6];

149 
AWB_AGC_TABLE_S
 
°AgcTbl
;

150 
AWB_CCM_S
 
°Ccm
;

151 } 
	tAWB_SENSOR_DEFAULT_S
;

153 
	shiAWB_SENSOR_EXP_FUNC_S


155 
HI_S32
(*
p‚_cmos_gë_awb_deÁu…
)(
AWB_SENSOR_DEFAULT_S
 *
p°AwbSnsD·
);

156 } 
	tAWB_SENSOR_EXP_FUNC_S
;

158 
	shiAWB_SENSOR_REGISTER_S


160 
AWB_SENSOR_EXP_FUNC_S
 
°SnsExp
;

161 } 
	tAWB_SENSOR_REGISTER_S
;

163 #ifde‡
__˝lu•lus


164 #i‡
__˝lu•lus


	@include/hi_comm_3a.h

18 #i‚de‡
__HI_COMM_3A_H__


19 
	#__HI_COMM_3A_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_comm_i•.h
"

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


31 
	#IS_LINEAR_MODE
(
mode
Ë(
WDR_MODE_NONE
 =(mode))

	)

32 
	#IS_WDR_MODE
(
mode
Ë((!
	`IS_LINEAR_MODE
(mode)Ë&& ((modeË< 
WDR_MODE_BUTT
))

	)

33 
	#IS_BUILT_IN_WDR_MODE
(
mode
Ë(
WDR_MODE_BUILT_IN
 =(mode))

	)

34 
	#IS_FS_WDR_MODE
(
mode
Ë((!
	`IS_LINEAR_MODE
(mode))&& (!
	`IS_BUILT_IN_WDR_MODE
(mode)Ë&& ((modeË< 
WDR_MODE_BUTT
))

	)

35 
	#IS_2to1_WDR_MODE
(
mode
Ë((
WDR_MODE_2To1_FRAME
 =(mode)Ë|| (
WDR_MODE_2To1_FRAME_FULL_RATE
 =(mode)Ë|| (
WDR_MODE_2To1_LINE
 =(mode)))

	)

36 
	#IS_3to1_WDR_MODE
(
mode
Ë((
WDR_MODE_3To1_FRAME
 =(mode)Ë|| (
WDR_MODE_3To1_FRAME_FULL_RATE
 =(mode)Ë|| (
WDR_MODE_3To1_LINE
 =(mode)))

	)

37 
	#IS_4to1_WDR_MODE
(
mode
Ë((
WDR_MODE_4To1_FRAME
 =(mode)Ë|| (
WDR_MODE_4To1_FRAME_FULL_RATE
 =(mode)Ë|| (
WDR_MODE_4To1_LINE
 =(mode)))

	)

38 
	#IS_FULL_WDR_MODE
(
mode
Ë((
WDR_MODE_2To1_FRAME_FULL_RATE
 =(mode)Ë|| (
WDR_MODE_3To1_FRAME_FULL_RATE
 =(mode)Ë|| (
WDR_MODE_4To1_FRAME_FULL_RATE
 =(mode)))

	)

39 
	#IS_HALF_WDR_MODE
(
mode
Ë((
WDR_MODE_2To1_FRAME
 =(mode)Ë|| (
WDR_MODE_3To1_FRAME
 =(mode)Ë|| (
WDR_MODE_4To1_FRAME
 =(mode)))

	)

40 
	#IS_LINE_WDR_MODE
(
mode
Ë((
WDR_MODE_2To1_LINE
 =(mode)Ë|| (
WDR_MODE_3To1_LINE
 =(mode)Ë|| (
WDR_MODE_4To1_LINE
 =(mode)))

	)

42 
	#MAX_REGISTER_ALG_LIB_NUM
 2

	)

44 
	ehiISP_ALG_MOD_E


46 
ISP_ALG_AE
 = 0,

47 
ISP_ALG_AF
,

48 
ISP_ALG_AWB
,

50 
ISP_ALG_BLC
,

51 
ISP_ALG_DP
,

52 
ISP_ALG_DRC
,

53 
ISP_ALG_DEMOSAIC
,

54 
ISP_ALG_GAMMA
,

55 
ISP_ALG_GAMMAFE
,

56 
ISP_ALG_GE
,

58 
ISP_ALG_NR
,

59 
ISP_ALG_SHARPEN
,

60 
ISP_ALG_SHADING
,

61 
ISP_ALG_FømeWDR
,

62 
ISP_ALG_FPN
,

63 
ISP_ALG_DEHAZE
,

64 
ISP_ALG_ACM
,

65 
ISP_ALG_BUTT
,

66 } 
	tISP_ALG_MOD_E
;

68 
	ehiISP_CTRL_CMD_E


70 
ISP_WDR_MODE_SET
 = 8000,

71 
ISP_PROC_WRITE
,

73 
ISP_AE_FPS_BASE_SET
,

75 
ISP_AWB_ISO_SET
,

76 
ISP_CHANGE_IMAGE_MODE_SET
,

77 
ISP_DCFINFO_GET
,

78 
ISP_AWB_INTTIME_SET
,

80 
ISP_CTRL_CMD_BUTT
,

81 } 
	tISP_CTRL_CMD_E
;

83 
	shiISP_CTRL_PROC_WRITE_S


85 
HI_CHAR
 *
pcProcBuff
;

86 
HI_U32
 
u32BuffLí
;

87 
HI_U32
 
u32WrôeLí
;

88 } 
	tISP_CTRL_PROC_WRITE_S
;

92 
	shiISP_AE_PARAM_S


94 
SENSOR_ID
 
Sís‹Id
;

95 
HI_U8
 
u8WDRMode
;

96 
HI_FLOAT
 
f32Fps
;

98 
HI_S32
 
s32Rsv
;

99 } 
	tISP_AE_PARAM_S
;

102 
	shiISP_AE_STAT_1_S


104 
HI_U8
 
au8MëîögHi°Thªsh
[4];

105 
HI_U16
 
au16MëîögHi°
[4];

106 } 
	tISP_AE_STAT_1_S
;

108 
	shiISP_AE_STAT_2_S


110 
HI_U8
 
au8MëîögHi°Thªsh
[4];

111 
HI_U16
 
au16MëîögMemAº¨y
[
AE_ZONE_ROW
][
AE_ZONE_COLUMN
][5];

112 } 
	tISP_AE_STAT_2_S
;

114 
	shiISP_AE_STAT_3_S


116 
HI_U32
 
au32Hi°ogømMemAºay
[256];

117 } 
	tISP_AE_STAT_3_S
;

119 
	shiISP_AE_STAT_4_S


121 
HI_U16
 
u16GlobÆAvgR
;

122 
HI_U16
 
u16GlobÆAvgGr
;

123 
HI_U16
 
u16GlobÆAvgGb
;

124 
HI_U16
 
u16GlobÆAvgB
;

125 } 
	tISP_AE_STAT_4_S
;

127 
	shiISP_AE_STAT_5_S


129 
HI_U16
 
au16Z⁄eAvg
[
AE_ZONE_ROW
][
AE_ZONE_COLUMN
][4];

130 } 
	tISP_AE_STAT_5_S
;

133 
	shiISP_AE_INFO_S


135 
HI_U32
 
u32FømeC¡
;

137 
ISP_AE_STAT_1_S
 *
p°AeSèt1
;

138 
ISP_AE_STAT_2_S
 *
p°AeSèt2
;

139 
ISP_AE_STAT_3_S
 *
p°AeSèt3
;

140 
ISP_AE_STAT_4_S
 *
p°AeSèt4
;

141 
ISP_AE_STAT_5_S
 *
p°AeSèt5
;

142 } 
	tISP_AE_INFO_S
;

144 
	shiISP_AE_STAT_ATTR_S


146 
HI_BOOL
 
bCh™ge
;

148 
HI_U8
 
au8MëîögHi°Thªsh
[4];

149 
HI_U8
 
au8WeightTabÀ
[
AE_ZONE_ROW
][
AE_ZONE_COLUMN
];

150 } 
	tISP_AE_STAT_ATTR_S
;

153 
	shiISP_AE_RESULT_S


155 
HI_U32
 
u32I¡Time
[4];

156 
HI_U32
 
u32I•Dgaö
;

157 
HI_U32
 
u32Iso
;

158 
HI_U8
 
u8AERunI¡îvÆ
;

160 
HI_BOOL
 
bPúisVÆid
;

161 
HI_S32
 
s32PúisPos
;

163 
ISP_AE_STAT_ATTR_S
 
°SètAâr
;

164 } 
	tISP_AE_RESULT_S
;

166 
	shiISP_AE_EXP_FUNC_S


168 
HI_S32
 (*
p‚_´_öô
)(HI_S32 
s32H™dÀ
, c⁄° 
ISP_AE_PARAM_S
 *
p°AeP¨am
);

169 
HI_S32
 (*
p‚_´_run
)(HI_S32 
s32H™dÀ
,

170 c⁄° 
ISP_AE_INFO_S
 *
p°AeInfo
,

171 
ISP_AE_RESULT_S
 *
p°AeResu…
,

172 
HI_S32
 
s32Rsv


174 
HI_S32
 (*
p‚_´_˘æ
)(HI_S32 
s32H™dÀ
, 
HI_U32
 
u32Cmd
, 
HI_VOID
 *
pVÆue
);

175 
HI_S32
 (*
p‚_´_exô
)(HI_S32 
s32H™dÀ
);

176 } 
	tISP_AE_EXP_FUNC_S
;

178 
	shiISP_AE_REGISTER_S


180 
ISP_AE_EXP_FUNC_S
 
°AeExpFunc
;

181 } 
	tISP_AE_REGISTER_S
;

186 
	shiISP_AWB_PARAM_S


188 
SENSOR_ID
 
Sís‹Id
;

189 
HI_U8
 
u8WDRMode
;

191 
HI_S32
 
s32Rsv
;

192 } 
	tISP_AWB_PARAM_S
;

195 
	shiISP_AWB_STAT_1_S


197 
HI_U16
 
u16MëîögAwbRg
;

198 
HI_U16
 
u16MëîögAwbBg
;

199 
HI_U32
 
u32MëîögAwbSum
;

200 } 
	tISP_AWB_STAT_1_S
;

202 
	shiISP_AWB_STAT_2_S


204 
HI_U16
 
au16MëîögMemAºayRg
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

205 
HI_U16
 
au16MëîögMemAºayBg
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

206 
HI_U16
 
au16MëîögMemAºaySum
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

207 } 
	tISP_AWB_STAT_2_S
;

209 
	shiISP_AWB_STAT_3_S


211 
HI_U16
 
u16MëîögAwbAvgR
;

212 
HI_U16
 
u16MëîögAwbAvgG
;

213 
HI_U16
 
u16MëîögAwbAvgB
;

214 
HI_U16
 
u16MëîögAwbCou¡AŒ
;

215 
HI_U16
 
u16MëîögAwbCou¡Mö
;

216 
HI_U16
 
u16MëîögAwbCou¡Max
;

217 } 
	tISP_AWB_STAT_3_S
;

219 
	shiISP_AWB_STAT_4_S


221 
HI_U16
 
au16MëîögMemAºayAvgR
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

222 
HI_U16
 
au16MëîögMemAºayAvgG
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

223 
HI_U16
 
au16MëîögMemAºayAvgB
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

224 
HI_U16
 
au16MëîögMemAºayCou¡AŒ
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

225 
HI_U16
 
au16MëîögMemAºayCou¡Mö
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

226 
HI_U16
 
au16MëîögMemAºayCou¡Max
[
AWB_ZONE_ROW
 * 
AWB_ZONE_COLUMN
];

227 } 
	tISP_AWB_STAT_4_S
;

229 
	shiISP_AWB_INFO_S


231 
HI_U32
 
u32FømeC¡
;

233 
ISP_AWB_STAT_1_S
 *
p°AwbSèt1
;

234 
ISP_AWB_STAT_2_S
 *
p°AwbSèt2
;

235 
ISP_AWB_STAT_3_S
 *
p°AwbSèt3
;

236 
ISP_AWB_STAT_4_S
 *
p°AwbSèt4
;

237 } 
	tISP_AWB_INFO_S
;

240 
	shiISP_AWB_STAT_ATTR_S


242 
HI_BOOL
 
bCh™ge
;

244 
HI_U16
 
u16MëîögWhôeLevñAwb
;

245 
HI_U16
 
u16MëîögBœckLevñAwb
;

246 
HI_U16
 
u16MëîögCrRefMaxAwb
;

247 
HI_U16
 
u16MëîögCbRefMaxAwb
;

248 
HI_U16
 
u16MëîögCrRefMöAwb
;

249 
HI_U16
 
u16MëîögCbRefMöAwb
;

250 
HI_U16
 
u16MëîögCrRefHighAwb
;

251 
HI_U16
 
u16MëîögCrRefLowAwb
;

252 
HI_U16
 
u16MëîögCbRefHighAwb
;

253 
HI_U16
 
u16MëîögCbRefLowAwb
;

254 } 
	tISP_AWB_STAT_ATTR_S
;

256 
	shiISP_AWB_RAW_STAT_ATTR_S


258 
HI_BOOL
 
bCh™ge
;

259 
HI_BOOL
 
bAboveWhôeLevñClù
;

260 
HI_BOOL
 
bBñowBœckLevñClù
;

262 
HI_U16
 
u16MëîögWhôeLevñAwb
;

263 
HI_U16
 
u16MëîögBœckLevñAwb
;

264 
HI_U16
 
u16MëîögCrRefMaxAwb
;

265 
HI_U16
 
u16MëîögCbRefMaxAwb
;

266 
HI_U16
 
u16MëîögCrRefMöAwb
;

267 
HI_U16
 
u16MëîögCbRefMöAwb
;

268 
HI_U16
 
u16MëîögCrRefHighAwb
;

269 
HI_U16
 
u16MëîögCrRefLowAwb
;

270 
HI_U16
 
u16MëîögCbRefHighAwb
;

271 
HI_U16
 
u16MëîögCbRefLowAwb
;

272 } 
	tISP_AWB_RAW_STAT_ATTR_S
;

276 
	shiISP_AWB_RESULT_S


278 
HI_U32
 
au32WhôeBÆ™˚Gaö
[4];

279 
HI_U16
 
au16Cﬁ‹M©rix
[9];

281 
ISP_AWB_STAT_ATTR_S
 
°SètAâr
;

282 
ISP_AWB_RAW_STAT_ATTR_S
 
°RawSètAâr
;

283 } 
	tISP_AWB_RESULT_S
;

285 
	shiISP_AWB_EXP_FUNC_S


287 
HI_S32
 (*
p‚_awb_öô
)(HI_S32 
s32H™dÀ
, c⁄° 
ISP_AWB_PARAM_S
 *
p°AwbP¨am
);

288 
HI_S32
 (*
p‚_awb_run
)(HI_S32 
s32H™dÀ
,

289 c⁄° 
ISP_AWB_INFO_S
 *
p°AwbInfo
,

290 
ISP_AWB_RESULT_S
 *
p°AwbResu…
,

291 
HI_S32
 
s32Rsv


293 
HI_S32
 (*
p‚_awb_˘æ
)(HI_S32 
s32H™dÀ
, 
HI_U32
 
u32Cmd
, 
HI_VOID
 *
pVÆue
);

294 
HI_S32
 (*
p‚_awb_exô
)(HI_S32 
s32H™dÀ
);

295 } 
	tISP_AWB_EXP_FUNC_S
;

297 
	shiISP_AWB_REGISTER_S


299 
ISP_AWB_EXP_FUNC_S
 
°AwbExpFunc
;

300 } 
	tISP_AWB_REGISTER_S
;

305 
	shiISP_AF_PARAM_S


307 
SENSOR_ID
 
Sís‹Id
;

308 
HI_U8
 
u8WDRMode
;

310 
HI_S32
 
s32Rsv
;

311 } 
	tISP_AF_PARAM_S
;

314 
	shiISP_AF_ZONE_S


316 
HI_U16
 
u16v1
;

317 
HI_U16
 
u16h1
;

318 
HI_U16
 
u16v2
;

319 
HI_U16
 
u16h2
;

320 
HI_U16
 
u16y
;

321 } 
	tISP_AF_ZONE_S
;

322 
	shiISP_AF_STAT_S


324 
ISP_AF_ZONE_S
 
°Z⁄eMërics
[
AF_ZONE_ROW
][
AF_ZONE_COLUMN
];

325 } 
	tISP_AF_STAT_S
;

327 
	shiISP_AF_INFO_S


329 
HI_U32
 
u32FømeC¡
;

331 
ISP_AF_STAT_S
 *
°AfSèt
;

332 } 
	tISP_AF_INFO_S
;

335 
	shiISP_AF_RESULT_S


337 
HI_S32
 
s32Rsv
;

338 } 
	tISP_AF_RESULT_S
;

340 
	shiISP_AF_EXP_FUNC_S


342 
HI_S32
 (*
p‚_af_öô
)(HI_S32 
s32H™dÀ
, c⁄° 
ISP_AF_PARAM_S
 *
p°AfP¨am
);

343 
HI_S32
 (*
p‚_af_run
)(HI_S32 
s32H™dÀ
,

344 c⁄° 
ISP_AF_INFO_S
 *
p°AfInfo
,

345 
ISP_AF_RESULT_S
 *
p°AfResu…
,

346 
HI_S32
 
s32Rsv


348 
HI_S32
 (*
p‚_af_˘æ
)(HI_S32 
s32H™dÀ
, 
HI_U32
 
u32Cmd
, 
HI_VOID
 *
pVÆue
);

349 
HI_S32
 (*
p‚_af_exô
)(HI_S32 
s32H™dÀ
);

350 } 
	tISP_AF_EXP_FUNC_S
;

352 
	shiISP_AF_REGISTER_S


354 
ISP_AF_EXP_FUNC_S
 
°AfExpFunc
;

355 } 
	tISP_AF_REGISTER_S
;

357 
	shiALG_LIB_S


359 
HI_S32
 
s32Id
;

360 
HI_CHAR
 
acLibName
[20];

361 } 
	tALG_LIB_S
;

363 
	shiISP_BIND_ATTR_S


365 
SENSOR_ID
 
Sís‹Id
;

366 
ALG_LIB_S
 
°AeLib
;

367 
ALG_LIB_S
 
°AfLib
;

368 
ALG_LIB_S
 
°AwbLib
;

369 } 
	tISP_BIND_ATTR_S
;

371 #ifde‡
__˝lu•lus


372 #i‡
__˝lu•lus


	@include/hi_comm_adec.h

23 #i‚de‡ 
__HI_COMM_ADEC_H__


24 
	#__HI_COMM_ADEC_H__


	)

27 
	~"hi_ty≥.h
"

28 
	~"hi_comm⁄.h
"

29 
	~"hi_comm_aio.h
"

31 #ifde‡
__˝lu•lus


32 #i‡
__˝lu•lus


37 
	shiADEC_ATTR_G711_S


39 
HI_U32
 
ªsv
;

40 }
	tADEC_ATTR_G711_S
;

42 
	shiADEC_ATTR_G726_S


44 
G726_BPS_E
 
íG726bps
;

45 }
	tADEC_ATTR_G726_S
;

47 
	shiADEC_ATTR_ADPCM_S


49 
ADPCM_TYPE_E
 
íADPCMTy≥
;

50 }
	tADEC_ATTR_ADPCM_S
;

52 
	shiADEC_ATTR_LPCM_S


54 
HI_U32
 
ªsv
;

55 }
	tADEC_ATTR_LPCM_S
;

57 
	ehiADEC_MODE_E


59 
ADEC_MODE_PACK
 = 0,

65 
ADEC_MODE_STREAM
 ,

69 
ADEC_MODE_BUTT


70 }
	tADEC_MODE_E
;

72 
	shiADEC_CH_ATTR_S


74 
PAYLOAD_TYPE_E
 
íTy≥
;

75 
HI_U32
 
u32BufSize
;

76 
ADEC_MODE_E
 
íMode
;

77 
HI_VOID
 *
pVÆue
;

78 }
	tADEC_CHN_ATTR_S
;

80 
	shiADEC_DECODER_S


82 
PAYLOAD_TYPE_E
 
íTy≥
;

83 
HI_CHAR
 
aszName
[16];

84 
HI_S32
 (*
p‚O≥nDecodî
)(
HI_VOID
 *
pDecodîAâr
, HI_VOID **
µDecodî
);

85 
HI_S32
 (*
p‚DecodeFrm
)(
HI_VOID
 *
pDecodî
, 
HI_U8
 **
pu8Inbuf
,HI_S32 *
ps32Le·Byã
,

86 
HI_U16
 *
pu16Outbuf
,
HI_U32
 *
pu32OutLí
,HI_U32 *
pu32Chns
);

87 
HI_S32
 (*
p‚GëFrmInfo
)(
HI_VOID
 *
pDecodî
, HI_VOID *
pInfo
);

88 
HI_S32
 (*
p‚Clo£Decodî
)(
HI_VOID
 *
pDecodî
);

89 
HI_S32
 (*
p‚Re£tDecodî
)(
HI_VOID
 *
pDecodî
);

90 } 
	tADEC_DECODER_S
;

92 
	ehiEN_ADEC_ERR_CODE_E


94 
ADEC_ERR_DECODER_ERR
 = 64,

95 
ADEC_ERR_BUF_LACK
,

96 
ADEC_ERR_VOICE_DEC_TYPE
,

97 
ADEC_ERR_VOICE_DEC_FRAMESIZE
,

98 
ADEC_ERR_VOICE_DEC_FRAMETYPE
,

99 
ADEC_ERR_VOICE_INVALID_DEVICE
,

100 
ADEC_ERR_VOICE_INVALID_INBUF
,

101 
ADEC_ERR_VOICE_INVALID_OUTBUF
,

102 
ADEC_ERR_VOICE_TRANS_DEVICE
,

103 
ADEC_ERR_VOICE_TRANS_TYPE
,

105 } 
	tEN_ADEC_ERR_CODE_E
;

109 
	#HI_ERR_ADEC_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

111 
	#HI_ERR_ADEC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

113 
	#HI_ERR_ADEC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

115 
	#HI_ERR_ADEC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

117 
	#HI_ERR_ADEC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

119 
	#HI_ERR_ADEC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

121 
	#HI_ERR_ADEC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

123 
	#HI_ERR_ADEC_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

125 
	#HI_ERR_ADEC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

127 
	#HI_ERR_ADEC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

129 
	#HI_ERR_ADEC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

131 
	#HI_ERR_ADEC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

133 
	#HI_ERR_ADEC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

135 
	#HI_ERR_ADEC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

137 
	#HI_ERR_ADEC_DECODER_ERR
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_DECODER_ERR
)

	)

139 
	#HI_ERR_ADEC_BUF_LACK
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_BUF_LACK
)

	)

143 
	#HI_ERR_ADEC_DEC_TYPE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_DEC_TYPE
)

	)

144 
	#HI_ERR_ADEC_DEC_FRAMESIZE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_DEC_FRAMESIZE
)

	)

145 
	#HI_ERR_ADEC_DEC_FRAMETYPE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_DEC_FRAMETYPE
)

	)

146 
	#HI_ERR_ADEC_INVALID_DEVICE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_INVALID_DEVICE
)

	)

147 
	#HI_ERR_ADEC_INVALID_INBUF
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_INVALID_INBUF
)

	)

148 
	#HI_ERR_ADEC_INVALID_OUTBUF
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_INVALID_OUTBUF
)

	)

149 
	#HI_ERR_ADEC_TRANS_DEVICE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_TRANS_DEVICE
)

	)

150 
	#HI_ERR_ADEC_TRANS_TYPE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_TRANS_TYPE
)

	)

155 #ifde‡
__˝lu•lus


156 #i‡
__˝lu•lus


	@include/hi_comm_aenc.h

23 #i‚de‡ 
__HI_COMM_AENC_H__


24 
	#__HI_COMM_AENC_H__


	)

26 
	~"hi_ty≥.h
"

27 
	~"hi_comm⁄.h
"

28 
	~"hi_comm_aio.h
"

31 #ifde‡
__˝lu•lus


32 #i‡
__˝lu•lus


37 
	shiAENC_ATTR_G711_S


39 
HI_U32
 
ªsv
;

40 }
	tAENC_ATTR_G711_S
;

42 
	shiAENC_ATTR_G726_S


44 
G726_BPS_E
 
íG726bps
;

45 }
	tAENC_ATTR_G726_S
;

47 
	shiAENC_ATTR_ADPCM_S


49 
ADPCM_TYPE_E
 
íADPCMTy≥
;

50 }
	tAENC_ATTR_ADPCM_S
;

52 
	shiAENC_ATTR_LPCM_S


54 
HI_U32
 
ªsv
;

55 }
	tAENC_ATTR_LPCM_S
;

57 
	shiAENC_ENCODER_S


59 
PAYLOAD_TYPE_E
 
íTy≥
;

60 
HI_U32
 
u32MaxFrmLí
;

61 
HI_CHAR
 
aszName
[16];

62 
HI_S32
 (*
p‚O≥nEncodî
)(
HI_VOID
 *
pEncodîAâr
, HI_VOID **
µEncodî
);

63 
HI_S32
 (*
p‚EncodeFrm
)(
HI_VOID
 *
pEncodî
, c⁄° 
AUDIO_FRAME_S
 *
p°D©a
,

64 
HI_U8
 *
pu8Outbuf
,
HI_U32
 *
pu32OutLí
);

65 
HI_S32
 (*
p‚Clo£Encodî
)(
HI_VOID
 *
pEncodî
);

66 } 
	tAENC_ENCODER_S
;

68 
	shiAENC_CHN_ATTR_S


70 
PAYLOAD_TYPE_E
 
íTy≥
;

71 
HI_U32
 
u32PtNumPîFrm
;

72 
HI_U32
 
u32BufSize
;

73 
HI_VOID
 *
pVÆue
;

74 }
	tAENC_CHN_ATTR_S
;

76 
	ehiEN_AENC_ERR_CODE_E


78 
AENC_ERR_ENCODER_ERR
 = 64 ,

79 
AENC_ERR_VQEW_ERR
 = 65 ,

81 } 
	tEN_AENC_ERR_CODE_E
;

85 
	#HI_ERR_AENC_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

87 
	#HI_ERR_AENC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

89 
	#HI_ERR_AENC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

91 
	#HI_ERR_AENC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

93 
	#HI_ERR_AENC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

95 
	#HI_ERR_AENC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

97 
	#HI_ERR_AENC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

99 
	#HI_ERR_AENC_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

101 
	#HI_ERR_AENC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

103 
	#HI_ERR_AENC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

105 
	#HI_ERR_AENC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

107 
	#HI_ERR_AENC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

109 
	#HI_ERR_AENC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

111 
	#HI_ERR_AENC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

113 
	#HI_ERR_AENC_ENCODER_ERR
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
AENC_ERR_ENCODER_ERR
)

	)

115 
	#HI_ERR_AENC_VQEW_ERR
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
AENC_ERR_VQEW_ERR
)

	)

118 #ifde‡
__˝lu•lus


119 #i‡
__˝lu•lus


	@include/hi_comm_ai.h

18 #i‚de‡
__HI_COMM_AI_H__


19 
	#__HI_COMM_AI_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


29 #ifde‡
__˝lu•lus


30 #i‡
__˝lu•lus


	@include/hi_comm_aio.h

18 #i‚de‡
__HI_COMM_AIO_H__


19 
	#__HI_COMM_AIO_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_î∫o.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


31 
	#MAX_AUDIO_FRAME_NUM
 50

	)

32 
	#MAX_AUDIO_POINT_BYTES
 4

	)

34 
	#MAX_VOICE_POINT_NUM
 480

	)

36 
	#MAX_AUDIO_POINT_NUM
 2048

	)

37 
	#MAX_AO_POINT_NUM
 4096

	)

38 
	#MIN_AUDIO_POINT_NUM
 80

	)

39 
	#MAX_AI_POINT_NUM
 2048

	)

42 
	#MAX_AUDIO_FRAME_LEN
 (
MAX_AUDIO_POINT_BYTES
*
MAX_AO_POINT_NUM
)

	)

45 
	#MAX_AUDIO_STREAM_LEN
 
MAX_AUDIO_FRAME_LEN


	)

47 
	#MAX_AI_USRFRM_DEPTH
 30

	)

50 
	#VQE_EQ_BAND_NUM
 10

	)

53 
	ehiAUDIO_SAMPLE_RATE_E


55 
AUDIO_SAMPLE_RATE_8000
 = 8000,

56 
AUDIO_SAMPLE_RATE_12000
 = 12000,

57 
AUDIO_SAMPLE_RATE_11025
 = 11025,

58 
AUDIO_SAMPLE_RATE_16000
 = 16000,

59 
AUDIO_SAMPLE_RATE_22050
 = 22050,

60 
AUDIO_SAMPLE_RATE_24000
 = 24000,

61 
AUDIO_SAMPLE_RATE_32000
 = 32000,

62 
AUDIO_SAMPLE_RATE_44100
 = 44100,

63 
AUDIO_SAMPLE_RATE_48000
 = 48000,

64 
AUDIO_SAMPLE_RATE_BUTT
,

65 } 
	tAUDIO_SAMPLE_RATE_E
;

67 
	ehiAUDIO_BIT_WIDTH_E


69 
AUDIO_BIT_WIDTH_8
 = 0,

70 
AUDIO_BIT_WIDTH_16
 = 1,

71 
AUDIO_BIT_WIDTH_24
 = 2,

72 
AUDIO_BIT_WIDTH_BUTT
,

73 } 
	tAUDIO_BIT_WIDTH_E
;

75 
	ehiAIO_MODE_E


77 
AIO_MODE_I2S_MASTER
 = 0,

78 
AIO_MODE_I2S_SLAVE
,

79 
AIO_MODE_PCM_SLAVE_STD
,

80 
AIO_MODE_PCM_SLAVE_NSTD
,

81 
AIO_MODE_PCM_MASTER_STD
,

82 
AIO_MODE_PCM_MASTER_NSTD
,

83 
AIO_MODE_BUTT


84 } 
	tAIO_MODE_E
;

86 
	ehiAIO_SOUND_MODE_E


88 
AUDIO_SOUND_MODE_MONO
 =0,

89 
AUDIO_SOUND_MODE_STEREO
 =1,

90 
AUDIO_SOUND_MODE_BUTT


91 } 
	tAUDIO_SOUND_MODE_E
;

110 
	ehiG726_BPS_E


112 
G726_16K
 = 0,

113 
G726_24K
,

114 
G726_32K
,

115 
G726_40K
,

116 
MEDIA_G726_16K
,

117 
MEDIA_G726_24K
,

118 
MEDIA_G726_32K
,

119 
MEDIA_G726_40K
,

120 
G726_BUTT
,

121 } 
	tG726_BPS_E
;

123 
	ehiADPCM_TYPE_E


127 
ADPCM_TYPE_DVI4
 = 0,

128 
ADPCM_TYPE_IMA
,

129 
ADPCM_TYPE_ORG_DVI4
,

130 
ADPCM_TYPE_BUTT
,

131 } 
	tADPCM_TYPE_E
;

133 
	#AI_EXPAND
 0x01

	)

134 
	#AI_CUT
 0x02

	)

136 
	shiAIO_ATTR_S


138 
AUDIO_SAMPLE_RATE_E
 
íSam∂î©e
;

139 
AUDIO_BIT_WIDTH_E
 
íBôwidth
;

140 
AIO_MODE_E
 
íW‹kmode
;

141 
AUDIO_SOUND_MODE_E
 
íSoundmode
;

142 
HI_U32
 
u32EXFœg
;

143 
HI_U32
 
u32FrmNum
;

144 
HI_U32
 
u32PtNumPîFrm
;

146 
HI_U32
 
u32ChnC¡
;

147 
HI_U32
 
u32ClkSñ
;

150 } 
	tAIO_ATTR_S
;

152 
	shiAI_CHN_PARAM_S


154 
HI_U32
 
u32U§FrmDïth
;

155 } 
	tAI_CHN_PARAM_S
;

157 
	shiAUDIO_FRAME_S


159 
AUDIO_BIT_WIDTH_E
 
íBôwidth
;

160 
AUDIO_SOUND_MODE_E
 
íSoundmode
;

161 
HI_VOID
 *
pVúAddr
[2];

162 
HI_U32
 
u32PhyAddr
[2];

163 
HI_U64
 
u64TimeSèmp
;

164 
HI_U32
 
u32Seq
;

165 
HI_U32
 
u32Lí
;

166 
HI_U32
 
u32PoﬁId
[2];

167 } 
	tAUDIO_FRAME_S
;

169 
	shiAEC_FRAME_S


171 
AUDIO_FRAME_S
 
°RefFøme
;

172 
HI_BOOL
 
bVÆid
;

173 
HI_BOOL
 
bSysBöd
;

174 } 
	tAEC_FRAME_S
;

176 
	shiAUDIO_FRAME_COMBINE_S


178 
AUDIO_FRAME_S
 
°Frm
;

179 
AEC_FRAME_S
 
°RefFrm
;

180 } 
	tAUDIO_FRAME_COMBINE_S
;

182 
	shiAUDIO_FRAME_INFO_S


184 
AUDIO_FRAME_S
 *
p°Føme
;

185 
HI_U32
 
u32Id
;

186 } 
	tAUDIO_FRAME_INFO_S
;

188 
	shiAUDIO_STREAM_S


190 
HI_U8
 *
pSåóm
;

191 
HI_U32
 
u32PhyAddr
;

192 
HI_U32
 
u32Lí
;

193 
HI_U64
 
u64TimeSèmp
;

194 
HI_U32
 
u32Seq
;

195 } 
	tAUDIO_STREAM_S
;

197 
	shiAUDIO_RESAMPLE_ATTR_S


199 
HI_U32
 
u32InPoötNum
;

200 
AUDIO_SAMPLE_RATE_E
 
íInSam∂eR©e
;

201 
AUDIO_SAMPLE_RATE_E
 
íOutSam∂eR©e
;

202 } 
	tAUDIO_RESAMPLE_ATTR_S
;

204 
	shiAO_CHN_STATE_S


206 
HI_U32
 
u32ChnTŸÆNum
;

207 
HI_U32
 
u32ChnFªeNum
;

208 
HI_U32
 
u32ChnBusyNum
;

209 } 
	tAO_CHN_STATE_S
;

211 
	shiAIO_RESMP_INFO_S


213 
HI_BOOL
 
bReSmpE«bÀ
;

214 
AUDIO_RESAMPLE_ATTR_S
 
°ResmpAâr
;

215 } 
	tAIO_RESMP_INFO_S
;

217 
	ehiAUDIO_TRACK_MODE_E


219 
AUDIO_TRACK_NORMAL
 = 0,

220 
AUDIO_TRACK_BOTH_LEFT
 = 1,

221 
AUDIO_TRACK_BOTH_RIGHT
 = 2,

222 
AUDIO_TRACK_EXCHANGE
 = 3,

223 
AUDIO_TRACK_MIX
 = 4,

224 
AUDIO_TRACK_LEFT_MUTE
 = 5,

225 
AUDIO_TRACK_RIGHT_MUTE
 = 6,

226 
AUDIO_TRACK_BOTH_MUTE
 = 7,

228 
AUDIO_TRACK_BUTT


229 } 
	tAUDIO_TRACK_MODE_E
;

231 
	ehiAUDIO_CLKDIR_E


233 
AUDIO_CLKDIR_RISE
 = 0,

234 
AUDIO_CLKDIR_FALL
 = 1,

236 
AUDIO_CLKDIR_BUTT


237 } 
	tAUDIO_CLKDIR_E
;

239 
	ehiAUDIO_FADE_RATE_E


241 
AUDIO_FADE_RATE_1
 = 0,

242 
AUDIO_FADE_RATE_2
 = 1,

243 
AUDIO_FADE_RATE_4
 = 2,

244 
AUDIO_FADE_RATE_8
 = 3,

245 
AUDIO_FADE_RATE_16
 = 4,

246 
AUDIO_FADE_RATE_32
 = 5,

247 
AUDIO_FADE_RATE_64
 = 6,

248 
AUDIO_FADE_RATE_128
 = 7,

250 
AUDIO_FADE_RATE_BUTT


251 } 
	tAUDIO_FADE_RATE_E
;

253 
	shiAUDIO_FADE_S


255 
HI_BOOL
 
bFade
;

256 
AUDIO_FADE_RATE_E
 
íFadeInR©e
;

257 
AUDIO_FADE_RATE_E
 
íFadeOutR©e
;

258 } 
	tAUDIO_FADE_S
;

259 
	ehiAUDIO_AEC_MODE_E


261 
AUDIO_AEC_MODE_CLOSE
 = 0,

262 
AUDIO_AEC_MODE_OPEN
 = 1,

264 
AUDIO_AEC_MODE_BUTT


265 } 
	tAUDIO_AEC_MODE_E
;

268 
	shiAUDIO_AGC_CONFIG_S


270 
HI_BOOL
 
bU§Mode
;

272 
HI_S8
 
s8T¨gëLevñ
;

273 
HI_S8
 
s8Noi£Flo‹
;

274 
HI_S8
 
s8MaxGaö
;

275 
HI_S8
 
s8Adju°S≥ed
;

277 
HI_S8
 
s8Im¥oveSNR
;

278 
HI_S8
 
s8U£HighPassFût
;

279 
HI_S8
 
s8OuçutMode
;

280 
HI_S16
 
s16Noi£SupSwôch
;

283 
HI_S32
 
s32Re£rved
;

284 } 
	tAUDIO_AGC_CONFIG_S
;

287 
	shiAI_AEC_CONFIG_S


289 
HI_BOOL
 
bU§Mode
;

290 
HI_S8
 
s8CngMode
;

291 
HI_S32
 
s32Re£rved
;

292 } 
	tAI_AEC_CONFIG_S
;

295 
	shiAUDIO_ANR_CONFIG_S


297 
HI_BOOL
 
bU§Mode
;

299 
HI_S16
 
s16NrI¡ísôy
;

300 
HI_S16
 
s16Noi£DbThr
;

301 
HI_S8
 
s8SpProSwôch
;

303 
HI_S32
 
s32Re£rved
;

304 } 
	tAUDIO_ANR_CONFIG_S
;

307 
	ehiAUDIO_HPF_FREQ_E


309 
AUDIO_HPF_FREQ_80
 = 80,

310 
AUDIO_HPF_FREQ_120
 = 120,

311 
AUDIO_HPF_FREQ_150
 = 150,

312 
AUDIO_HPF_FREQ_BUTT
,

313 } 
	tAUDIO_HPF_FREQ_E
;

315 
	shiAUDIO_HPF_CONFIG_S


317 
HI_BOOL
 
bU§Mode
;

318 
AUDIO_HPF_FREQ_E
 
íHpfFªq
;

319 } 
	tAUDIO_HPF_CONFIG_S
;

321 
	shiAI_RNR_CONFIG_S


323 
HI_BOOL
 
bU§Mode
;

325 
HI_S32
 
s32NrMode
;

327 
HI_S32
 
s32MaxNrLevñ
;

329 
HI_S32
 
s32Noi£Thªsh
;

330 } 
	tAI_RNR_CONFIG_S
;

332 
	shiAUDIO_EQ_CONFIG_S


334 
HI_S8
 
s8GaödB
[
VQE_EQ_BAND_NUM
];

335 
HI_S32
 
s32Re£rved
;

336 } 
	tAUDIO_EQ_CONFIG_S
;

340 
	ehiVQE_WORKSTATE_E


342 
VQE_WORKSTATE_COMMON
 = 0,

343 
VQE_WORKSTATE_MUSIC
 = 1,

344 
VQE_WORKSTATE_NOISY
 = 2,

345 } 
	tVQE_WORKSTATE_E
;

348 
	shiAI_VQE_CONFIG_S


350 
HI_S32
 
bHpfO≥n
;

351 
HI_S32
 
bAecO≥n
;

352 
HI_S32
 
bAƒO≥n
;

353 
HI_S32
 
bRƒO≥n
;

354 
HI_S32
 
bAgcO≥n
;

355 
HI_S32
 
bEqO≥n
;

357 
HI_S32
 
s32W‹kSam∂eR©e
;

358 
HI_S32
 
s32FømeSam∂e
;

359 
VQE_WORKSTATE_E
 
íW‹k°©e
;

362 
AUDIO_HPF_CONFIG_S
 
°HpfCfg
;

363 
AI_AEC_CONFIG_S
 
°AecCfg
;

364 
AUDIO_ANR_CONFIG_S
 
°AƒCfg
;

365 
AI_RNR_CONFIG_S
 
°RƒCfg
;

366 
AUDIO_AGC_CONFIG_S
 
°AgcCfg
;

367 
AUDIO_EQ_CONFIG_S
 
°EqCfg
;

368 } 
	tAI_VQE_CONFIG_S
;

370 
	shiAO_VQE_CONFIG_S


372 
HI_S32
 
bHpfO≥n
;

373 
HI_S32
 
bAƒO≥n
;

374 
HI_S32
 
bAgcO≥n
;

375 
HI_S32
 
bEqO≥n
;

377 
HI_S32
 
s32W‹kSam∂eR©e
;

378 
HI_S32
 
s32FømeSam∂e
;

379 
VQE_WORKSTATE_E
 
íW‹k°©e
;

381 
AUDIO_HPF_CONFIG_S
 
°HpfCfg
;

382 
AUDIO_ANR_CONFIG_S
 
°AƒCfg
;

383 
AUDIO_AGC_CONFIG_S
 
°AgcCfg
;

384 
AUDIO_EQ_CONFIG_S
 
°EqCfg
;

385 } 
	tAO_VQE_CONFIG_S
;

388 
	shiAI_VQE_INFO_S


390 
HI_BOOL
 
bVqeE«bÀ
;

391 
AI_VQE_CONFIG_S
 
°AiVqeCfg
;

392 } 
	tAI_VQE_INFO_S
;

394 
	shiAO_VQE_INFO_S


396 
HI_BOOL
 
bVqeE«bÀ
;

397 
AO_VQE_CONFIG_S
 
°AoVqeCfg
;

398 } 
	tAO_VQE_INFO_S
;

401 
	shiAI_INNER_CODEC_STATE_S


403 
HI_BOOL
 
bMicI∆
;

404 
HI_BOOL
 
bMicIƒ
;

405 } 
	tAI_INNER_CODEC_STATE_S
;

408 
	shiAUDIO_SAVE_FILE_INFO_S


410 
HI_BOOL
 
bCfg
;

411 
HI_CHAR
 
aFûeP©h
[256];

412 
HI_CHAR
 
aFûeName
[256];

413 
HI_U32
 
u32FûeSize
;

414 } 
	tAUDIO_SAVE_FILE_INFO_S
;

418 
	#HI_ERR_AI_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

420 
	#HI_ERR_AI_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

422 
	#HI_ERR_AI_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

424 
	#HI_ERR_AI_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

426 
	#HI_ERR_AI_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

428 
	#HI_ERR_AI_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

430 
	#HI_ERR_AI_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

432 
	#HI_ERR_AI_NOT_ENABLED
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

434 
	#HI_ERR_AI_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

436 
	#HI_ERR_AI_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

438 
	#HI_ERR_AI_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

440 
	#HI_ERR_AI_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

442 
	#HI_ERR_AI_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

444 
	#HI_ERR_AI_BUSY
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

447 
	#HI_ERR_AO_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

449 
	#HI_ERR_AO_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

451 
	#HI_ERR_AO_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

453 
	#HI_ERR_AO_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

455 
	#HI_ERR_AO_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

457 
	#HI_ERR_AO_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

459 
	#HI_ERR_AO_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

461 
	#HI_ERR_AO_NOT_ENABLED
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

463 
	#HI_ERR_AO_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

465 
	#HI_ERR_AO_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

467 
	#HI_ERR_AO_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

469 
	#HI_ERR_AO_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

471 
	#HI_ERR_AO_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

473 
	#HI_ERR_AO_BUSY
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

476 #ifde‡
__˝lu•lus


477 #i‡
__˝lu•lus


	@include/hi_comm_ao.h

18 #i‚de‡
__HI_COMM_AO_H__


19 
	#__HI_COMM_AO_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


	@include/hi_comm_isp.h

22 #i‚de‡
__HI_COMM_ISP_H__


23 
	#__HI_COMM_ISP_H__


	)

25 
	~"hi_ty≥.h
"

26 
	~"hi_î∫o.h
"

27 
	~"hi_comm⁄.h
"

28 
	~"hi_i•_debug.h
"

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


41 
	#VREG_MAX_NUM
 (16)

	)

43 
	#AE_ZONE_ROW
 (15)

	)

44 
	#AE_ZONE_COLUMN
 (17)

	)

45 
	#AWB_ZONE_ROW
 (15)

	)

46 
	#AWB_ZONE_COLUMN
 (17)

	)

47 
	#AF_ZONE_ROW
 (15)

	)

48 
	#AF_ZONE_COLUMN
 (17)

	)

49 
	#LIGHTSOURCE_NUM
 (4)

	)

51 
	#STATIC_DP_COUNT_MAX
 (4096)

	)

52 
	#GAMMA_NODE_NUM
 (257)

	)

53 
	#GAMMA_FE0_NODE_NUM
 (33)

	)

54 
	#GAMMA_FE1_NODE_NUM
 (257)

	)

55 
	#SHADING_NODE_NUM_MAX
 (129)

	)

56 
	#NP_NODE_NUM_MAX
 (128)

	)

58 
	#DEFOG_ZONE_ROW
 (16)

	)

59 
	#DEFOG_ZONE_COLUMN
 (15)

	)

60 
	#DEFOG_ZONE_NUM
 (240)

	)

61 
	#DEFOG_MAX_ZONE_NUM
 (256)

	)

63 
	#ISP_AUTO_STENGTH_NUM
 (16)

	)

65 
	#ISP_MAX_SNS_REGS
 (16)

	)

66 
	#ISP_MAX_DEV_NUM
 (1)

	)

68 
	#ISP_REG_SIZE_BIN
 (0x4000)

	)

69 
	#ISP_VREG_SIZE_BIN
 (0x3000)

	)

70 
	#AE_LIB_VREG_SIZE_BIN
 (0x1000)

	)

71 
	#AWB_LIB_VREG_SIZE_BIN
 (0x1000)

	)

72 
	#ALG_LIB_VREG_SIZE_BIN
 (0x200)

	)

74 
	#AI_MAX_STEP_FNO_NUM
 (1024)

	)

81 
	ehiISP_ERR_CODE_E


83 
ERR_ISP_NOT_INIT
 = 0x40,

84 
ERR_ISP_MEM_NOT_INIT
 = 0x41,

85 
ERR_ISP_ATTR_NOT_CFG
 = 0x42,

86 
ERR_ISP_SNS_UNREGISTER
 = 0x43,

87 
ERR_ISP_INVALID_ADDR
 = 0x44,

88 
ERR_ISP_NOMEM
 = 0x45,

89 } 
	tISP_ERR_CODE_E
;

91 
	#HI_ERR_ISP_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

92 
	#HI_ERR_ISP_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

93 
	#HI_ERR_ISP_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

95 
	#HI_ERR_ISP_NOT_INIT
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
ERR_ISP_NOT_INIT
)

	)

96 
	#HI_ERR_ISP_MEM_NOT_INIT
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
ERR_ISP_MEM_NOT_INIT
)

	)

97 
	#HI_ERR_ISP_ATTR_NOT_CFG
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
ERR_ISP_ATTR_NOT_CFG
)

	)

98 
	#HI_ERR_ISP_SNS_UNREGISTER
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
ERR_ISP_SNS_UNREGISTER
)

	)

99 
	#HI_ERR_ISP_INVALID_ADDR
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
ERR_ISP_INVALID_ADDR
)

	)

100 
	#HI_ERR_ISP_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_ISP
, 
EN_ERR_LEVEL_ERROR
, 
ERR_ISP_NOMEM
)

	)

103 
	ehiISP_OP_TYPE_E


105 
OP_TYPE_AUTO
 = 0,

106 
OP_TYPE_MANUAL
 = 1,

107 
OP_TYPE_BUTT


108 } 
	tISP_OP_TYPE_E
;

110 
	ehiISP_STATE_E


112 
ISP_STATE_INIT
 = 0,

113 
ISP_STATE_SUCCESS
 = 1,

114 
ISP_STATE_TIMEOUT
 = 2,

115 
ISP_STATE_BUTT


116 } 
	tISP_STATUS_E
;

118 
	ehiISP_BAYER_FORMAT_E


120 
BAYER_RGGB
 = 0,

121 
BAYER_GRBG
 = 1,

122 
BAYER_GBRG
 = 2,

123 
BAYER_BGGR
 = 3,

124 
BAYER_BUTT


125 } 
	tISP_BAYER_FORMAT_E
;

126 
	shiISP_PUB_ATTR_S


128 
RECT_S
 
°WndRe˘
;

129 
HI_FLOAT
 
f32FømeR©e
;

130 
ISP_BAYER_FORMAT_E
 
íBayî
;

131 } 
	tISP_PUB_ATTR_S
;

133 
	ehiISP_FMW_STATE_E


135 
ISP_FMW_STATE_RUN
 = 0,

136 
ISP_FMW_STATE_FREEZE
,

137 
ISP_FMW_STATE_BUTT


138 } 
	tISP_FMW_STATE_E
;

140 
	shiISP_WDR_MODE_S


142 
WDR_MODE_E
 
íWDRMode
;

143 } 
	tISP_WDR_MODE_S
;

145 
	uhiISP_MODULE_CTRL_U


147 
HI_U32
 
u32Key
;

150 
HI_U32
 
bôBy∑ssVideoTe°
 : 1 ;

151 
HI_U32
 
bôBy∑ssBÆ™˚Fe
 : 1 ;

152 
HI_U32
 
bôBy∑ssISPDGaö
 : 1 ;

153 
HI_U32
 
bôBy∑ssGammaFe
 : 1 ;

154 
HI_U32
 
bôBy∑ssCros°ÆkR
 : 1 ;

155 
HI_U32
 
bôBy∑ssDPC
 : 1 ;

156 
HI_U32
 
bôBy∑ssNR
 : 1 ;

157 
HI_U32
 
bôRsv1
 : 1 ;

158 
HI_U32
 
bôBy∑ssWBGaö
 : 1 ;

159 
HI_U32
 
bôBy∑ssShadög
 : 1 ;

160 
HI_U32
 
bôRsv2
 : 1 ;

161 
HI_U32
 
bôBy∑ssDRC
 : 1 ;

162 
HI_U32
 
bôBy∑ssDemoßic
 : 1 ;

163 
HI_U32
 
bôBy∑ssCﬁ‹M©rix
: 1 ;

164 
HI_U32
 
bôBy∑ssGamma
 : 1 ;

165 
HI_U32
 
bôBy∑ssFSWDR
 : 1 ;

166 
HI_U32
 
bôGammaFePosôi⁄
 : 1 ;

167 
HI_U32
 
bô2Rsv3
 : 2 ;

168 
HI_U32
 
bôBy∑ssCsC⁄v
 : 1 ;

169 
HI_U32
 
bô2Rsv4
 : 2 ;

170 
HI_U32
 
bôBy∑ssSh¨≥n
 : 1 ;

171 
HI_U32
 
bôChnSwôch
 : 1 ;

172 
HI_U32
 
bô2By∑ssMode
 : 2 ;

173 
HI_U32
 
bôBy∑ssAŒ
 : 1 ;

174 
HI_U32
 
bô5Rsv5
 : 5 ;

176 }
	tISP_MODULE_CTRL_U
;

179 
	ehiISP_COMBINE_MODE_E


181 
FS_WDR_COMBINE_SHORT_FIRST
 = 0,

182 
FS_WDR_COMBINE_LONG_FIRST
 = 1,

183 
FS_WDR_COMBINE_BUTT


184 } 
	tISP_COMBINE_MODE_E
;

185 
	shiISP_WDR_FS_ATTR_S


187 
HI_BOOL
 
bMŸi⁄Comp
;

188 
HI_U16
 
u16Sh‹tThªsh
;

190 
HI_U16
 
u16L⁄gThªsh
;

192 
ISP_COMBINE_MODE_E
 
íFSWDRComMode
;

193 } 
	tISP_WDR_FS_ATTR_S
;

196 
	shiISP_DRC_MANUAL_ATTR_S


198 
HI_U32
 
u32Såígth
;

200 } 
	tISP_DRC_MANUAL_ATTR_S
;

201 
	shiISP_DRC_AUTO_ATTR_S


203 
HI_U32
 
u32Såígth
;

207 } 
	tISP_DRC_AUTO_ATTR_S
;

209 
	shiISP_DRC_ATTR_S


211 
HI_BOOL
 
bE«bÀ
;

212 
HI_U32
 
u32Sl›eMax
;

213 
HI_U32
 
u32Sl›eMö
;

214 
HI_U32
 
u32WhôeLevñ
;

215 
HI_U32
 
u32BœckLevñ
;

216 
HI_U32
 
u32V¨ün˚S∑˚
;

217 
HI_U32
 
u32V¨ün˚I¡ísôy
;

219 
HI_U32
 
u32Asymmëry
;

220 
HI_U32
 
u32BrightEnh™˚
;

222 
ISP_OP_TYPE_E
 
íOpTy≥
;

223 
ISP_DRC_MANUAL_ATTR_S
 
°M™uÆ
;

224 
ISP_DRC_AUTO_ATTR_S
 
°Auto
;

225 } 
	tISP_DRC_ATTR_S
;

227 
	ehiISP_STATIC_DP_TYPE_E
{

228 
ISP_STATIC_DP_BRIGHT
 = 0x0,

229 
ISP_STATIC_DP_DARK
,

230 
ISP_STATIC_DP_BUTT


231 } 
	tISP_STATIC_DP_TYPE_E
;

233 
	shiISP_DP_STATIC_CALIBRATE_S


235 
HI_BOOL
 
bE«bÀ
;

236 
HI_BOOL
 
bE«bÀDëe˘
;

238 
ISP_STATIC_DP_TYPE_E
 
íSèticDPTy≥
;

239 
HI_U8
 
u8SèπThªsh
;

240 
HI_U16
 
u16Cou¡Max
;

241 
HI_U16
 
u16Cou¡Mö
;

242 
HI_U16
 
u16TimeLimô
;

244 
HI_U32
 
u32TabÀ
[
STATIC_DP_COUNT_MAX
];

245 
HI_U8
 
u8FöishThªsh
;

246 
HI_U16
 
u16Cou¡
;

247 
ISP_STATUS_E
 
íSètus
;

248 } 
	tISP_DP_STATIC_CALIBRATE_S
;

250 
	shiISP_DP_DYNAMIC_ATTR_S


252 
HI_BOOL
 
bE«bÀ
;

254 
HI_U16
 
u16Sl›e
;

255 
HI_U16
 
u16Thªsh
;

256 
HI_U16
 
u16LöeThªsh
;

257 
HI_U16
 
u16HpThªsh
;

258 
HI_U8
 
u8BÀndR©io
;

259 } 
	tISP_DP_DYNAMIC_ATTR_S
;

261 
	shiISP_DP_STATIC_ATTR_S


263 
HI_BOOL
 
bE«bÀ
;

264 
HI_U16
 
u16BrightCou¡
;

265 
HI_U16
 
u16D¨kCou¡
;

266 
HI_U32
 
au32BrightTabÀ
[
STATIC_DP_COUNT_MAX
];

268 
HI_U32
 
au32D¨kTabÀ
[
STATIC_DP_COUNT_MAX
];

270 
HI_BOOL
 
bShow
;

271 } 
	tISP_DP_STATIC_ATTR_S
;

273 
	shiISP_DP_ATTR_S


275 
ISP_DP_DYNAMIC_ATTR_S
 
°Dy«micAâr
;

276 
ISP_DP_STATIC_ATTR_S
 
°SèticAâr
;

277 } 
	tISP_DP_ATTR_S
;

279 
	shiISP_DIS_ATTR_S


281 
HI_BOOL
 
bE«bÀ
;

282 } 
	tISP_DIS_ATTR_S
;

284 
	shiISP_SHADING_RADIAL_S


286 
HI_U16
 
u16OffCíãr
;

287 
POINT_S
 
°Cíãr
;

288 
HI_U32
 
u32TabÀ
[
SHADING_NODE_NUM_MAX
];

289 } 
	tISP_SHADING_RADIAL_S
;

290 
	shiISP_SHADING_ATTR_S


292 
HI_BOOL
 
bE«bÀ
;

294 
HI_U16
 
u16TabÀNodeNum
;

295 
ISP_SHADING_RADIAL_S
 
a°RadülShadög
[3];

296 } 
	tISP_SHADING_ATTR_S
;

298 
	shiISP_NR_MANUAL_ATTR_S


300 
HI_U8
 
u8Thªsh
;

301 
HI_U8
 
u8ThªshL⁄g
;

302 } 
	tISP_NR_MANUAL_ATTR_S
;

303 
	shiISP_NR_AUTO_ATTR_S


305 
HI_U8
 
au8Thªsh
[
ISP_AUTO_STENGTH_NUM
];

306 } 
	tISP_NR_AUTO_ATTR_S
;

307 
	shiISP_NR_ATTR_S


309 
HI_BOOL
 
bE«bÀ
;

310 
ISP_OP_TYPE_E
 
íOpTy≥
;

311 
ISP_NR_MANUAL_ATTR_S
 
°M™uÆ
;

312 
ISP_NR_AUTO_ATTR_S
 
°Auto
;

313 } 
	tISP_NR_ATTR_S
;

316 
	shiISP_NP_TABLE_S


318 
HI_U8
 
au8NPTabÀ
[
NP_NODE_NUM_MAX
];

319 } 
	tISP_NP_TABLE_S
;

321 
	ehiISP_GAMMA_CURVE_TYPE_E


323 
ISP_GAMMA_CURVE_DEFAULT
 = 0x0,

324 
ISP_GAMMA_CURVE_SRGB
,

325 
ISP_GAMMA_CURVE_USER_DEFINE
,

326 
ISP_GAMMA_CURVE_BUTT


327 } 
	tISP_GAMMA_CURVE_TYPE_E
;

328 
	shiISP_GAMMA_ATTR_S


330 
HI_BOOL
 
bE«bÀ
;

332 
ISP_GAMMA_CURVE_TYPE_E
 
íCurveTy≥
;

333 
HI_U16
 
u16TabÀ
[
GAMMA_NODE_NUM
];

334 } 
	tISP_GAMMA_ATTR_S
;

336 
	shiISP_GAMMAFE_ATTR_S


338 
HI_BOOL
 
bE«bÀ
;

340 
HI_U16
 
u16TabÀ
[
GAMMA_FE0_NODE_NUM
 + 
GAMMA_FE1_NODE_NUM
];

341 } 
	tISP_GAMMAFE_ATTR_S
;

343 
	shiISP_SHARPEN_MANUAL_ATTR_S


345 
HI_U8
 
u8Sh¨≥nD
;

346 
HI_U8
 
u8Sh¨≥nUd
;

347 
HI_U8
 
u8Sh¨≥nRGB
;

348 } 
	tISP_SHARPEN_MANUAL_ATTR_S
;

349 
	shiISP_SHARPEN_AUTO_ATTR_S


351 
HI_U8
 
au8Sh¨≥nD
[
ISP_AUTO_STENGTH_NUM
];

352 
HI_U8
 
au8Sh¨≥nUd
[
ISP_AUTO_STENGTH_NUM
];

353 
HI_U8
 
au8Sh¨≥nRGB
[
ISP_AUTO_STENGTH_NUM
];

354 } 
	tISP_SHARPEN_AUTO_ATTR_S
;

356 
	shiISP_RGBSHARPEN_ATTR_S


358 
HI_U8
 
u8LutC‹e
;

359 
HI_U8
 
u8LutSåígth
;

360 
HI_U8
 
u8LutMagnôude
;

361 } 
	tISP_RGBSHARPEN_ATTR_S
;

363 
	shiISP_SHARPEN_ATTR_S


365 
HI_BOOL
 
bE«bÀ
;

366 
ISP_OP_TYPE_E
 
íOpTy≥
;

367 
ISP_SHARPEN_MANUAL_ATTR_S
 
°M™uÆ
;

368 
ISP_SHARPEN_AUTO_ATTR_S
 
°Auto
;

370 
ISP_RGBSHARPEN_ATTR_S
 
°RGBSh¨≥nAâr
;

371 } 
	tISP_SHARPEN_ATTR_S
;

374 
	shiISP_CR_ATTR_S


376 
HI_BOOL
 
bE«bÀ
;

377 
HI_U8
 
au8Såígth
[
ISP_AUTO_STENGTH_NUM
];

378 
HI_U8
 
u8Sísôivôy
;

379 
HI_U16
 
u16Thªshﬁd
;

380 
HI_U16
 
u16Sl›e
;

381 }
	tISP_CR_ATTR_S
;

383 
	shiISP_ANTI_FALSECOLOR_S


385 
HI_U8
 
u8Såígth
;

387 } 
	tISP_ANTI_FALSECOLOR_S
;

389 
	ehiISP_DEMOSAIC_CFG_E


391 
ISP_DEMOSAIC_CFG_DEFAULT
 = 0,

392 
ISP_DEMOSAIC_CFG_VH
,

393 
ISP_DEMOSAIC_CFG_AA
,

394 
ISP_DEMOSAIC_CFG_VA
,

395 
ISP_DEMOSAIC_CFG_UU
,

397 
ISP_DEMOSAIC_CFG_BUTT
,

398 } 
	tISP_DEMOSAIC_CFG_E
;

400 
	shiISP_DEMOSAIC_ATTR_S


402 
HI_U8
 
u8VhSl›e
;

403 
HI_U8
 
u8AaSl›e
;

404 
HI_U8
 
u8VaSl›e
;

405 
HI_U8
 
u8UuSl›e
;

406 
HI_U16
 
u16VhThªsh
;

407 
HI_U16
 
u16AaThªsh
;

408 
HI_U16
 
u16VaThªsh
;

409 
HI_U16
 
u16UuThªsh
;

410 
ISP_DEMOSAIC_CFG_E
 
íCfgTy≥
;

411 
HI_U8
 
au8LumThªsh
[
ISP_AUTO_STENGTH_NUM
];

412 
HI_U8
 
au8NpOff£t
[
ISP_AUTO_STENGTH_NUM
];

413 }
	tISP_DEMOSAIC_ATTR_S
;

415 
	shiISP_BLACK_LEVEL_S


417 
HI_U16
 
au16BœckLevñ
[4];

418 } 
	tISP_BLACK_LEVEL_S
;

421 
	ehiISP_FPN_TYPE_E


423 
ISP_FPN_TYPE_FRAME
 = 0,

424 
ISP_FPN_TYPE_LINE
 = 1,

425 
ISP_FPN_TYPE_BUTT


426 }
	tISP_FPN_TYPE_E
;

428 
	shiISP_FPN_FRAME_INFO_S


430 
HI_U32
 
u32Iso
;

431 
HI_U32
 
u32Off£t
;

432 
HI_U32
 
u32FrmSize
;

433 
VIDEO_FRAME_INFO_S
 
°F≤Føme
;

434 }
	tISP_FPN_FRAME_INFO_S
;

436 
	shiISP_FPN_CALIBRATE_ATTR_S


438 
HI_U32
 
u32Thªshﬁd
;

439 
HI_U32
 
u32FømeNum
;

440 
ISP_FPN_TYPE_E
 
íF≤Ty≥
;

441 
ISP_FPN_FRAME_INFO_S
 
°F≤CÆiFøme
;

442 }
	tISP_FPN_CALIBRATE_ATTR_S
;

444 
	shiISP_FPN_MANUAL_ATTR_S


446 
HI_U32
 
u32Såígth
;

447 }
	tISP_FPN_MANUAL_ATTR_S
;

449 
	shiISP_FPN_AUTO_ATTR_S


451 
HI_U32
 
u32Såígth
;

452 }
	tISP_FPN_AUTO_ATTR_S
;

454 
	shiISP_FPN_ATTR_S


456 
HI_BOOL
 
bE«bÀ
;

457 
ISP_OP_TYPE_E
 
íOpTy≥
;

458 
ISP_FPN_TYPE_E
 
íF≤Ty≥
;

459 
ISP_FPN_FRAME_INFO_S
 
°F≤FrmInfo
;

460 
ISP_FPN_MANUAL_ATTR_S
 
°M™uÆ
;

461 
ISP_FPN_AUTO_ATTR_S
 
°Auto
;

462 }
	tISP_FPN_ATTR_S
;

465 
	shiISP_DEFOG_MANUAL_ATTR_S


467 
HI_U8
 
u8°ªngth
;

468 }
	tISP_DEFOG_MANUAL_ATTR_S
;

470 
	shiISP_DEFOG_AUTO_ATTR_S


472 
HI_U8
 
u8°ªngth
;

473 }
	tISP_DEFOG_AUTO_ATTR_S
;

475 
	shiISP_DEFOG_ATTR_S


477 
HI_BOOL
 
bE«bÀ
;

478 
HI_U8
 
u8H‹iz⁄èlBlock
;

479 
HI_U8
 
u8VîtiˇlBlock
;

480 
ISP_OP_TYPE_E
 
íOpTy≥
;

481 
ISP_DEFOG_MANUAL_ATTR_S
 
°M™uÆ
;

482 
ISP_DEFOG_AUTO_ATTR_S
 
°Auto
;

483 }
	tISP_DEFOG_ATTR_S
;

487 
	ehiISP_ACM_MODE_E


489 
ISP_ACM_MODE_BLUE
 = 0,

490 
ISP_ACM_MODE_GREEN
 ,

491 
ISP_ACM_MODE_BG
 ,

492 
ISP_ACM_MODE_SKIN
 ,

493 
ISP_ACM_MODE_VIVID
 ,

494 
ISP_ACM_MODE_BUTT


496 } 
	tISP_ACM_MODE_E
;

500 
HI_BOOL
 
bE«bÀ
 ;

501 
HI_BOOL
 
bDemoE«bÀ
 ;

502 
ISP_ACM_MODE_E
 
íMode
 ;

503 
HI_U32
 
u32Såëch
 ;

504 
HI_U32
 
u32ClùR™ge
 ;

505 
HI_U32
 
u32AcmClùOrWøp
;

506 
HI_U32
 
u32Cb¸Thr
 ;

507 
HI_U32
 
u32GaöLuma
 ;

508 
HI_U32
 
u32GaöHue
 ;

509 
HI_U32
 
u32GaöS©
 ;

511 
	tISP_ACM_ATTR_S
;

513 
	#ACM_Y_NUM
 5

	)

514 
	#ACM_H_NUM
 29

	)

515 
	#ACM_S_NUM
 7

	)

517 
	shi_ISP_ACM_LUT_S


519 
HI_S16
 
as16Y
[
ACM_Y_NUM
][
ACM_S_NUM
][
ACM_H_NUM
];

520 
HI_S16
 
as16H
[
ACM_Y_NUM
][
ACM_S_NUM
][
ACM_H_NUM
];

521 
HI_S16
 
as16S
[
ACM_Y_NUM
][
ACM_S_NUM
][
ACM_H_NUM
];

522 }
	tISP_ACM_LUT_S
;

524 
	shi_ISP_ACM_COEF_S


526 
ISP_ACM_LUT_S
 
°Lut
;

527 
ISP_ACM_MODE_E
 
íMode
;

528 }
	tISP_ACM_COEF_S
;

530 
	shiISP_INNER_STATE_INFO_S


532 
HI_U32
 
u32DRCSåígthA˘uÆ
;

533 
HI_U32
 
u32NRSåígthA˘uÆ
;

534 
HI_U32
 
u32Sh¨≥nSåígthDA˘uÆ
;

535 
HI_U32
 
u32Sh¨≥nSåígthUdA˘uÆ
;

536 
HI_U32
 
u32Sh¨≥nSåígthRGBA˘uÆ
;

537 
HI_U32
 
u32DefogSåígthA˘uÆ
;

538 
HI_U32
 
u32WDRExpR©ioA˘uÆ
;

540 
HI_BOOL
 
bWDRSwôchFöish
;

541 
HI_BOOL
 
bResSwôchFöish
;

542 } 
	tISP_INNER_STATE_INFO_S
;

545 
	ehiISP_AE_SWITCH_E


547 
ISP_AE_AFTER_STATIC_WB
 = 0,

548 
ISP_AE_FROM_SENSOR_CHANNEL_1
 ,

549 
ISP_AE_AFTER_SHADING
 ,

550 
ISP_AE_AFTER_GAMMA_FE
 ,

551 
ISP_AE_AFTER_DRC
 ,

552 
ISP_AE_FROM_SENSOR_CHANNEL_2
 ,

553 
ISP_AE_AFTER_WDR_STITCH
 ,

554 
ISP_AE_AFTER_BLC_CHANNEL_2
,

555 
ISP_AE_SWITCH_BUTT


556 } 
	tISP_AE_SWITCH_E
;

559 
	ehiISP_AE_HIST_SWITCH_E


561 
ISP_AE_HIST_SAME_AS_AE
 = 0,

562 
ISP_AE_HIST_FROM_SENSOR_CHANNEL_1
 ,

563 
ISP_AE_HIST_AFTER_SHADING
 ,

564 
ISP_AE_HIST_AFTER_GAMMA_FE
 ,

565 
ISP_AE_HIST_AFTER_DRC
 ,

566 
ISP_AE_HIST_FROM_SENSOR_CHANNEL_2
 ,

567 
ISP_AE_HIST_AFTER_WDR_STITCH
 ,

568 
ISP_AE_HIST_AFTER_BLC_CHANNEL_2
,

569 
ISP_AE_HIST_SWITCH_BUTT


570 } 
	tISP_AE_HIST_SWITCH_E
;

574 
	shiISP_AE_STATISTICS_CFG_S


576 
HI_U8
 
au8Hi°Thªsh
[4];

577 
ISP_AE_SWITCH_E
 
íAESwôch
;

583 
ISP_AE_HIST_SWITCH_E
 
íHi°Swôch
;

589 
ISP_AE_SWITCH_E
 
íAESumSwôch
;

594 } 
	tISP_AE_STATISTICS_CFG_S
;

596 
	shiISP_WB_STATISTICS_CFG_PARA_S


598 
HI_U16
 
u16WhôeLevñ
;

599 
HI_U16
 
u16BœckLevñ
;

600 
HI_U16
 
u16CbMax
;

601 
HI_U16
 
u16CbMö
;

602 
HI_U16
 
u16CrMax
;

603 
HI_U16
 
u16CrMö
;

604 
HI_U16
 
u16CbHigh
;

605 
HI_U16
 
u16CbLow
;

606 
HI_U16
 
u16CrHigh
;

607 
HI_U16
 
u16CrLow
;

608 } 
	tISP_WB_STATISTICS_CFG_PARA_S
;

609 
	shiISP_WB_STATISTICS_CFG_S


611 
ISP_WB_STATISTICS_CFG_PARA_S
 
°BayîCfg
;

612 
ISP_WB_STATISTICS_CFG_PARA_S
 
°RGBCfg
;

613 } 
	tISP_WB_STATISTICS_CFG_S
;

615 
	ehiISP_AF_PEAK_MODE_E


617 
ISP_AF_STA_NORM
 = 0,

618 
ISP_AF_STA_PEAK
 ,

619 
ISP_AF_STA_BUTT


620 }
	tISP_AF_PEAK_MODE_E
;

622 
	ehiISP_AF_SQU_MODE_E


624 
ISP_AF_STA_SUM_NORM
 = 0,

625 
ISP_AF_STA_SUM_SQU
 ,

626 
ISP_AF_STA_SUM_BUTT


627 }
	tISP_AF_SQU_MODE_E
;

629 
	shiISP_AF_CFG_S


631 
HI_BOOL
 
bE«bÀ
;

632 
HI_U16
 
u16Hwnd
;

633 
HI_U16
 
u16Vwnd
;

634 
HI_U16
 
u16Hsize
;

635 
HI_U16
 
u16Vsize
;

636 
ISP_AF_PEAK_MODE_E
 
íPókMode
;

637 
ISP_AF_SQU_MODE_E
 
íSquMode
;

638 }
	tISP_AF_CFG_S
;

640 
	shiISP_AF_H_PARAM_S


642 
HI_BOOL
 
abIIREn
[3];

643 
HI_S16
 
as16IIRGaö
[7];

644 
HI_U16
 
au16IIRShi·
[4];

645 
HI_U16
 
u16IIRThd
;

646 }
	tISP_AF_H_PARAM_S
;

648 
	shiISP_AF_V_PARAM_S


650 
HI_S16
 
as16FIRH
[5];

651 
HI_U16
 
u16FIRThd
;

652 }
	tISP_AF_V_PARAM_S
;

654 
	shiISP_AF_FV_PARAM_S


656 
HI_U16
 
u16AccShi·Y
;

657 
HI_U16
 
au16AccShi·H
[2];

658 
HI_U16
 
au16AccShi·V
[2];

659 }
	tISP_AF_FV_PARAM_S
;

661 
	shiISP_FOCUS_STATISTICS_CFG_S


663 
ISP_AF_CFG_S
 
°C⁄fig
;

664 
ISP_AF_H_PARAM_S
 
°HP¨am_IIR0
;

665 
ISP_AF_H_PARAM_S
 
°HP¨am_IIR1
;

666 
ISP_AF_V_PARAM_S
 
°VP¨am_FIR0
;

667 
ISP_AF_V_PARAM_S
 
°VP¨am_FIR1
;

668 
ISP_AF_FV_PARAM_S
 
°FVP¨am
;

669 } 
	tISP_FOCUS_STATISTICS_CFG_S
;

671 
	uhiISP_STATISTICS_CTRL_U


673 
HI_U32
 
u32Key
;

676 
HI_U32
 
bô1AeSèt1
 : 1 ;

677 
HI_U32
 
bô1AeSèt2
 : 1 ;

678 
HI_U32
 
bô1AeSèt3
 : 1 ;

679 
HI_U32
 
bô1AeSèt4
 : 1 ;

680 
HI_U32
 
bô1AeSèt5
 : 1 ;

681 
HI_U32
 
bô1AwbSèt1
 : 1 ;

682 
HI_U32
 
bô1AwbSèt2
 : 1 ;

683 
HI_U32
 
bô1AwbSèt3
 : 1 ;

684 
HI_U32
 
bô1AwbSèt4
 : 1 ;

685 
HI_U32
 
bô1AfSèt
 : 1 ;

686 
HI_U32
 
bô22Rsv
 : 22;

688 }
	tISP_STATISTICS_CTRL_U
;

690 
	shiISP_STATISTICS_CFG_S


692 
ISP_STATISTICS_CTRL_U
 
unKey
;

693 
ISP_AE_STATISTICS_CFG_S
 
°AECfg
;

694 
ISP_WB_STATISTICS_CFG_S
 
°WBCfg
;

695 
ISP_FOCUS_STATISTICS_CFG_S
 
°FocusCfg
;

696 } 
	tISP_STATISTICS_CFG_S
;

699 
	shiISP_AE_STATISTICS_S


701 
HI_U16
 
au16Hi°5VÆue
[5];

702 
HI_U16
 
au16Z⁄eHi°5VÆue
[
AE_ZONE_ROW
][
AE_ZONE_COLUMN
][5];

703 
HI_U32
 
au32Hi°256VÆue
[256];

704 
HI_U16
 
au16GlobÆAvg
[4];

705 
HI_U16
 
au16Z⁄eAvg
[
AE_ZONE_ROW
][
AE_ZONE_COLUMN
][4];

706 }
	tISP_AE_STATISTICS_S
;

708 
	shiISP_WB_BAYER_STATISTICS_S


710 
HI_U16
 
u16GlobÆR
;

711 
HI_U16
 
u16GlobÆG
;

712 
HI_U16
 
u16GlobÆB
;

713 
HI_U16
 
u16Cou¡AŒ
;

714 
HI_U16
 
u16Cou¡Mö
;

715 
HI_U16
 
u16Cou¡Max
;

717 
HI_U16
 
au16Z⁄eAvgR
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

718 
HI_U16
 
au16Z⁄eAvgG
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

719 
HI_U16
 
au16Z⁄eAvgB
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

720 
HI_U16
 
au16Z⁄eCou¡AŒ
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

721 
HI_U16
 
au16Z⁄eCou¡Mö
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

722 
HI_U16
 
au16Z⁄eCou¡Max
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

723 } 
	tISP_WB_BAYER_STATISTICS_INFO_S
;

725 
	shiISP_WB_RGB_STATISTICS_S


727 
HI_U16
 
u16GlobÆGR
;

728 
HI_U16
 
u16GlobÆGB
;

729 
HI_U32
 
u32GlobÆSum
;

731 
HI_U16
 
au16Z⁄eGR
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

732 
HI_U16
 
au16Z⁄eGB
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

733 
HI_U32
 
au32Z⁄eSum
[
AWB_ZONE_ROW
][
AWB_ZONE_COLUMN
];

734 } 
	tISP_WB_RGB_STATISTICS_INFO_S
;

736 
	shiISP_WB_STATISTICS_S


738 
ISP_WB_BAYER_STATISTICS_INFO_S
 
°BayîSèti°ics
;

739 
ISP_WB_RGB_STATISTICS_INFO_S
 
°RGBSèti°ics
;

740 } 
	tISP_WB_STATISTICS_S
;

742 
	shiISP_FOCUS_ZONE_S


744 
HI_U16
 
u16v1
;

745 
HI_U16
 
u16h1
;

746 
HI_U16
 
u16v2
;

747 
HI_U16
 
u16h2
;

748 
HI_U16
 
u16y
;

749 } 
	tISP_FOCUS_ZONE_S
;

750 
	shiISP_FOCUS_STATISTICS_S


752 
ISP_FOCUS_ZONE_S
 
°Z⁄eMërics
[
AF_ZONE_ROW
][
AF_ZONE_COLUMN
];

753 } 
	tISP_FOCUS_STATISTICS_S
;

755 
	shiISP_STATISTICS_S


757 
ISP_AE_STATISTICS_S
 
°AESèt
;

758 
ISP_WB_STATISTICS_S
 
°WBSèt
;

759 
ISP_FOCUS_STATISTICS_S
 
°FocusSèt
;

760 } 
	tISP_STATISTICS_S
;

764 
	shiISP_DEBUG_INFO_S


766 
HI_BOOL
 
bDebugEn
;

767 
HI_U32
 
u32PhyAddr
;

768 
HI_U32
 
u32Dïth
;

769 } 
	tISP_DEBUG_INFO_S
;

771 
	shiISP_DBG_ATTR_S


773 
HI_U32
 
u32Rsv
;

774 } 
	tISP_DBG_ATTR_S
;

776 
	shiISP_DBG_STATUS_S


778 
HI_U32
 
u32FrmNumBgn
;

779 
HI_U32
 
u32Rsv
;

780 
HI_U32
 
u32FrmNumEnd
;

781 } 
	tISP_DBG_STATUS_S
;

783 
	ehiISP_SNS_TYPE_E


785 
ISP_SNS_I2C_TYPE
 = 0,

786 
ISP_SNS_SSP_TYPE
,

788 
ISP_SNS_TYPE_BUTT
,

789 } 
	tISP_SNS_TYPE_E
;

791 
	shiISP_I2C_DATA_S


793 
HI_BOOL
 
bUpd©e
;

794 
HI_U8
 
u8DñayFrmNum
;

796 
HI_U8
 
u8DevAddr
;

797 
HI_U32
 
u32RegAddr
;

798 
HI_U32
 
u32AddrByãNum
;

799 
HI_U32
 
u32D©a
;

800 
HI_U32
 
u32D©aByãNum
;

801 } 
	tISP_I2C_DATA_S
;

803 
	shiISP_SSP_DATA_S


805 
HI_BOOL
 
bUpd©e
;

806 
HI_U8
 
u8DñayFrmNum
;

808 
HI_U32
 
u32DevAddr
;

809 
HI_U32
 
u32DevAddrByãNum
;

810 
HI_U32
 
u32RegAddr
;

811 
HI_U32
 
u32RegAddrByãNum
;

812 
HI_U32
 
u32D©a
;

813 
HI_U32
 
u32D©aByãNum
;

814 } 
	tISP_SSP_DATA_S
;

816 
	shiISP_SNS_REGS_INFO_S


818 
ISP_SNS_TYPE_E
 
íSnsTy≥
;

819 
HI_U32
 
u32RegNum
;

820 
HI_U8
 
u8Cfg2VÆidDñayMax
;

824 
ISP_I2C_DATA_S
 
a°I2cD©a
[
ISP_MAX_SNS_REGS
];

825 
ISP_SSP_DATA_S
 
a°S•D©a
[
ISP_MAX_SNS_REGS
];

827 } 
	tISP_SNS_REGS_INFO_S
;

829 
	shiISP_VD_INFO_S


831 
HI_U32
 
u32Re£rved
;

832 }
	tISP_VD_INFO_S
;

835 
	shiISP_REG_ATTR_S


837 
HI_U32
 
u32I•RegAddr
;

838 
HI_U32
 
u32I•RegSize
;

839 
HI_U32
 
u32I•ExtRegAddr
;

840 
HI_U32
 
u32I•ExtRegSize
;

841 
HI_U32
 
u32AeExtRegAddr
;

842 
HI_U32
 
u32AeExtRegSize
;

843 
HI_U32
 
u32AwbExtRegAddr
;

844 
HI_U32
 
u32AwbExtRegSize
;

845 } 
	tISP_REG_ATTR_S
;

851 
	ehiISP_IRIS_TYPE_E


853 
ISP_IRIS_DC_TYPE
 = 0,

854 
ISP_IRIS_P_TYPE
,

856 
ISP_IRIS_TYPE_BUTT
,

857 } 
	tISP_IRIS_TYPE_E
;

859 
	ehiISP_IRIS_F_NO_E


861 
ISP_IRIS_F_NO_32_0
 = 0,

862 
ISP_IRIS_F_NO_22_0
,

863 
ISP_IRIS_F_NO_16_0
,

864 
ISP_IRIS_F_NO_11_0
,

865 
ISP_IRIS_F_NO_8_0
,

866 
ISP_IRIS_F_NO_5_6
,

867 
ISP_IRIS_F_NO_4_0
,

868 
ISP_IRIS_F_NO_2_8
,

869 
ISP_IRIS_F_NO_2_0
,

870 
ISP_IRIS_F_NO_1_4
,

871 
ISP_IRIS_F_NO_1_0
,

873 
ISP_IRIS_F_NO_BUTT
,

874 } 
	tISP_IRIS_F_NO_E
;

876 
	shiISP_DCIRIS_ATTR_S


878 
HI_S32
 
s32Kp
;

879 
HI_S32
 
s32Ki
;

880 
HI_S32
 
s32Kd
;

881 
HI_U32
 
u32MöPwmDuty
;

882 
HI_U32
 
u32MaxPwmDuty
;

883 
HI_U32
 
u32O≥nPwmDuty
;

884 } 
	tISP_DCIRIS_ATTR_S
;

886 
	shiISP_PIRIS_ATTR_S


888 
HI_BOOL
 
bSãpFNOTabÀCh™ge
;

889 
HI_BOOL
 
bZîoIsMax
;

890 
HI_U16
 
u16TŸÆSãp
;

891 
HI_U16
 
u16SãpCou¡
;

893 
HI_U16
 
au16SãpFNOTabÀ
[
AI_MAX_STEP_FNO_NUM
];

894 
ISP_IRIS_F_NO_E
 
íMaxIrisFNOT¨gë
;

895 
ISP_IRIS_F_NO_E
 
íMöIrisFNOT¨gë
;

896 } 
	tISP_PIRIS_ATTR_S
;

899 
	shiISP_MI_ATTR_S


901 
HI_U32
 
u32HﬁdVÆue
;

902 
ISP_IRIS_F_NO_E
 
íIrisFNO
;

903 } 
	tISP_MI_ATTR_S
;

905 
	ehiISP_IRIS_STATUS_E


907 
ISP_IRIS_KEEP
 = 0,

908 
ISP_IRIS_OPEN
 = 1,

909 
ISP_IRIS_CLOSE
 = 2,

910 
ISP_IRIS_BUTT


911 } 
	tISP_IRIS_STATUS_E
;

913 
	shiISP_IRIS_ATTR_S


915 
HI_BOOL
 
bE«bÀ
;

916 
ISP_OP_TYPE_E
 
íOpTy≥
;

917 
ISP_IRIS_TYPE_E
 
íIrisTy≥
;

918 
ISP_IRIS_STATUS_E
 
íIrisSètus
;

919 
ISP_MI_ATTR_S
 
°MIAâr
;

920 } 
	tISP_IRIS_ATTR_S
;

925 
	ehiISP_AE_MODE_E


927 
AE_MODE_SLOW_SHUTTER
 = 0,

928 
AE_MODE_FIX_FRAME_RATE
 = 1,

929 
AE_MODE_BUTT


930 } 
	tISP_AE_MODE_E
;

932 
	ehiISP_AE_STRATEGY_E


934 
AE_EXP_HIGHLIGHT_PRIOR
 = 0,

935 
AE_EXP_LOWLIGHT_PRIOR
 = 1,

936 
AE_STRATEGY_MODE_BUTT


937 } 
	tISP_AE_STRATEGY_E
;

939 
	shiISP_AE_RANGE_S


941 
HI_U32
 
u32Max
;

942 
HI_U32
 
u32Mö
;

943 } 
	tISP_AE_RANGE_S
;

945 
	shiISP_AE_DELAY_S


947 
HI_U16
 
u16BœckDñayFøme
;

948 
HI_U16
 
u16WhôeDñayFøme
;

949 } 
	tISP_AE_DELAY_S
;

951 
	ehiISP_ANTIFLICKER_MODE_E


955 
ISP_ANTIFLICKER_NORMAL_MODE
 = 0x0,

958 
ISP_ANTIFLICKER_AUTO_MODE
 = 0x1,

960 
ISP_ANTIFLICKER_MODE_BUTT


961 }
	tISP_ANTIFLICKER_MODE_E
;

963 
	shiISP_ANTIFLICKER_S


965 
HI_BOOL
 
bE«bÀ
;

966 
HI_U8
 
u8Fªquícy
;

967 
ISP_ANTIFLICKER_MODE_E
 
íMode
;

968 } 
	tISP_ANTIFLICKER_S
;

970 
	shiISP_SUBFLICKER_S


972 
HI_BOOL
 
bE«bÀ
;

978 
HI_U8
 
u8LumaDiff
;

979 } 
	tISP_SUBFLICKER_S
;

981 
	shiISP_AE_ATTR_S


984 
ISP_AE_RANGE_S
 
°ExpTimeR™ge
;

985 
ISP_AE_RANGE_S
 
°AGaöR™ge
;

986 
ISP_AE_RANGE_S
 
°DGaöR™ge
;

987 
ISP_AE_RANGE_S
 
°ISPDGaöR™ge
;

988 
ISP_AE_RANGE_S
 
°SysGaöR™ge
;

989 
HI_U32
 
u32GaöThªshﬁd
;

991 
HI_U8
 
u8S≥ed
;

992 
HI_U8
 
u8Tﬁî™˚
;

993 
HI_U8
 
u8Com≥nßti⁄
;

994 
HI_U16
 
u16EVBüs
;

995 
ISP_AE_STRATEGY_E
 
íAESå©egyMode
;

996 
HI_U16
 
u16Hi°R©ioSl›e
;

997 
HI_U8
 
u8MaxHi°Off£t
;

999 
ISP_AE_MODE_E
 
íAEMode
;

1000 
ISP_ANTIFLICKER_S
 
°A¡iÊickî
;

1001 
ISP_SUBFLICKER_S
 
°SubÊickî
;

1002 
ISP_AE_DELAY_S
 
°AEDñayAâr
;

1004 
HI_BOOL
 
bM™uÆExpVÆue
;

1005 
HI_U32
 
u32ExpVÆue
;

1008 
HI_U8
 
au8Weight
[
AE_ZONE_ROW
][
AE_ZONE_COLUMN
];

1009 } 
	tISP_AE_ATTR_S
;

1011 
	shiISP_ME_ATTR_S


1013 
ISP_OP_TYPE_E
 
íExpTimeOpTy≥
;

1014 
ISP_OP_TYPE_E
 
íAGaöOpTy≥
;

1015 
ISP_OP_TYPE_E
 
íDGaöOpTy≥
;

1016 
ISP_OP_TYPE_E
 
íISPDGaöOpTy≥
;

1018 
HI_U32
 
u32ExpTime
;

1019 
HI_U32
 
u32AGaö
;

1020 
HI_U32
 
u32DGaö
;

1021 
HI_U32
 
u32ISPDGaö
;

1022 } 
	tISP_ME_ATTR_S
;

1024 
	shiISP_EXPOSURE_ATTR_S


1026 
HI_BOOL
 
bByPass
;

1027 
ISP_OP_TYPE_E
 
íOpTy≥
;

1028 
HI_U8
 
u8AERunI¡îvÆ
;

1029 
HI_BOOL
 
bHi°SètAdju°
;

1031 
HI_BOOL
 
bAERouãExVÆid
;

1032 
ISP_ME_ATTR_S
 
°M™uÆ
;

1033 
ISP_AE_ATTR_S
 
°Auto
;

1034 } 
	tISP_EXPOSURE_ATTR_S
;

1036 
	shiISP_WDR_EXPOSURE_ATTR_S


1038 
ISP_OP_TYPE_E
 
íExpR©ioTy≥
;

1039 
HI_U32
 
u32ExpR©io
;

1042 
HI_U32
 
u32ExpR©ioMax
;

1045 } 
	tISP_WDR_EXPOSURE_ATTR_S
;

1047 
	#ISP_AE_ROUTE_MAX_NODES
 16

	)

1048 
	shiISP_AE_ROUTE_NODE_S


1050 
HI_U32
 
u32I¡Time
;

1051 
HI_U32
 
u32SysGaö
;

1052 
ISP_IRIS_F_NO_E
 
íIrisFNO
;

1053 } 
	tISP_AE_ROUTE_NODE_S
;

1055 
	shiISP_AE_ROUTE_S


1057 
HI_U32
 
u32TŸÆNum
;

1058 
ISP_AE_ROUTE_NODE_S
 
a°RouãNode
[
ISP_AE_ROUTE_MAX_NODES
];

1059 } 
	tISP_AE_ROUTE_S
;

1061 
	#ISP_AE_ROUTE_EX_MAX_NODES
 16

	)

1062 
	shiISP_AE_ROUTE_EX_NODE_S


1064 
HI_U32
 
u32I¡Time
;

1065 
HI_U32
 
u32Agaö
;

1066 
HI_U32
 
u32Dgaö
;

1067 
HI_U32
 
u32I•Dgaö
;

1068 
ISP_IRIS_F_NO_E
 
íIrisFNO
;

1069 } 
	tISP_AE_ROUTE_EX_NODE_S
;

1071 
	shiISP_AE_ROUTE_EX_S


1073 
HI_U32
 
u32TŸÆNum
;

1074 
ISP_AE_ROUTE_EX_NODE_S
 
a°RouãExNode
[
ISP_AE_ROUTE_EX_MAX_NODES
];

1075 } 
	tISP_AE_ROUTE_EX_S
;

1078 
	shiISP_EXP_INFO_S


1080 
HI_U32
 
u32ExpTime
;

1081 
HI_U32
 
u32AGaö
;

1082 
HI_U32
 
u32DGaö
;

1083 
HI_U32
 
u32ISPDGaö
;

1084 
HI_U32
 
u32Exposuª
;

1085 
HI_BOOL
 
bExposuªIsMAX
;

1086 
HI_S16
 
s16Hi°Eº‹
;

1087 
HI_U32
 
u32AE_Hi°256VÆue
[256];

1088 
HI_U16
 
u16AE_Hi°5VÆue
[5];

1089 
HI_U8
 
u8AveLum
;

1090 
HI_U32
 
u32LöesPî500ms
;

1091 
HI_U32
 
u32PúisFNO
;

1092 
HI_U32
 
u32Fps
;

1093 
ISP_AE_ROUTE_S
 
°AERouã
;

1094 
ISP_AE_ROUTE_EX_S
 
°AERouãEx
;

1095 }
	tISP_EXP_INFO_S
;

1099 
	ehiISP_AWB_ALG_TYPE_E


1101 
AWB_ALG_LOWCOST
 = 0,

1102 
AWB_ALG_ADVANCE
 = 1,

1103 
AWB_ALG_BUTT


1104 } 
	tISP_AWB_ALG_TYPE_E
;

1106 
	shiISP_AWB_CT_LIMIT_ATTR_S


1108 
HI_BOOL
 
bE«bÀ
;

1109 
ISP_OP_TYPE_E
 
íOpTy≥
;

1111 
HI_U16
 
u16HighRgLimô
;

1112 
HI_U16
 
u16HighBgLimô
;

1113 
HI_U16
 
u16LowRgLimô
;

1114 
HI_U16
 
u16LowBgLimô
;

1115 } 
	tISP_AWB_CT_LIMIT_ATTR_S
;

1117 
	shiISP_AWB_IN_OUT_ATTR_S


1119 
HI_BOOL
 
bE«bÀ
;

1120 
ISP_OP_TYPE_E
 
íOpTy≥
;

1121 
HI_BOOL
 
bOutdo‹Sètus
;

1122 
HI_U32
 
u32OutThªsh
;

1123 
HI_U16
 
u16LowSèπ
;

1124 
HI_U16
 
u16LowSt›
;

1125 
HI_U16
 
u16HighSèπ
;

1126 
HI_U16
 
u16HighSt›
;

1127 
HI_BOOL
 
bGªíEnh™˚En
;

1128 } 
	tISP_AWB_IN_OUT_ATTR_S
;

1130 
	shiISP_AWB_CBCR_TRACK_ATTR_S


1132 
HI_BOOL
 
bE«bÀ
;

1134 
HI_U16
 
au16CrMax
[
ISP_AUTO_STENGTH_NUM
];

1135 
HI_U16
 
au16CrMö
[
ISP_AUTO_STENGTH_NUM
];

1136 
HI_U16
 
au16CbMax
[
ISP_AUTO_STENGTH_NUM
];

1137 
HI_U16
 
au16CbMö
[
ISP_AUTO_STENGTH_NUM
];

1138 } 
	tISP_AWB_CBCR_TRACK_ATTR_S
;

1140 
	shiISP_AWB_LUM_HISTGRAM_ATTR_S


1142 
HI_BOOL
 
bE«bÀ
;

1143 
ISP_OP_TYPE_E
 
íOpTy≥
;

1144 
HI_U8
 
au8Hi°Thªsh
[6];

1145 
HI_U16
 
au16Hi°Wt
[6];

1146 } 
	tISP_AWB_LUM_HISTGRAM_ATTR_S
;

1148 
	shiISP_AWB_LIGHTSOURCE_INFO_S


1150 
HI_U16
 
u16WhôeRgaö
;

1151 
HI_U16
 
u16WhôeBgaö
;

1152 
HI_U16
 
u16ExpQu™t
;

1153 
HI_U8
 
u8LightSètus
;

1154 
HI_U8
 
u8Radius
;

1155 } 
	tISP_AWB_EXTRA_LIGHTSOURCE_INFO_S
;

1157 
	shiISP_AWB_ATTR_EX_S


1159 
HI_U8
 
u8Tﬁî™˚
;

1160 
HI_U8
 
u8Z⁄eRadius
;

1161 
HI_U16
 
u16CurveLLimô
;

1162 
HI_U16
 
u16CurveRLimô
;

1164 
HI_BOOL
 
bExåaLightEn
;

1165 
ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S
 
°LightInfo
[4];

1166 
ISP_AWB_IN_OUT_ATTR_S
 
°InOrOut
;

1168 
HI_BOOL
 
bMu…iLightSour˚En
;

1170 } 
	tISP_AWB_ATTR_EX_S
;

1172 
	shiISP_AWB_ATTR_S


1174 
HI_BOOL
 
bE«bÀ
;

1176 
HI_U16
 
u16RefCﬁ‹Temp
;

1177 
HI_U16
 
au16SèticWB
[4];

1178 
HI_S32
 
as32CurveP¨a
[6];

1180 
ISP_AWB_ALG_TYPE_E
 
íAlgTy≥
;

1182 
HI_U8
 
u8RGSåígth
;

1183 
HI_U8
 
u8BGSåígth
;

1184 
HI_U16
 
u16S≥ed
;

1185 
HI_U16
 
u16Z⁄eSñ
;

1186 
HI_U16
 
u16HighCﬁ‹Temp
;

1187 
HI_U16
 
u16LowCﬁ‹Temp
;

1188 
ISP_AWB_CT_LIMIT_ATTR_S
 
°CTLimô
;

1189 
HI_BOOL
 
bShi·LimôEn
;

1190 
HI_U8
 
u8Shi·Limô
;

1191 
HI_BOOL
 
bGaöN‹mEn
;

1193 
ISP_AWB_CBCR_TRACK_ATTR_S
 
°CbCrTøck
;

1194 
ISP_AWB_LUM_HISTGRAM_ATTR_S
 
°LumaHi°
;

1195 } 
	tISP_AWB_ATTR_S
;

1197 
	shiISP_MWB_ATTR_S


1199 
HI_U16
 
u16Rgaö
;

1200 
HI_U16
 
u16Grgaö
;

1201 
HI_U16
 
u16Gbgaö
;

1202 
HI_U16
 
u16Bgaö
;

1203 } 
	tISP_MWB_ATTR_S
;

1205 
	shiISP_WB_ATTR_S


1207 
HI_BOOL
 
bByPass
;

1208 
ISP_OP_TYPE_E
 
íOpTy≥
;

1209 
ISP_MWB_ATTR_S
 
°M™uÆ
;

1210 
ISP_AWB_ATTR_S
 
°Auto
;

1211 } 
	tISP_WB_ATTR_S
;

1213 
	shiISP_COLORMATRIX_MANUAL_S


1215 
HI_BOOL
 
bS©En
;

1216 
HI_U16
 
au16CCM
[9];

1217 } 
	tISP_COLORMATRIX_MANUAL_S
;

1219 
	shiISP_COLORMATRIX_AUTO_S


1221 
HI_BOOL
 
bISOA˘En
;

1222 
HI_BOOL
 
bTempA˘En
;

1224 
HI_U16
 
u16HighCﬁ‹Temp
;

1225 
HI_U16
 
au16HighCCM
[9];

1226 
HI_U16
 
u16MidCﬁ‹Temp
;

1227 
HI_U16
 
au16MidCCM
[9];

1228 
HI_U16
 
u16LowCﬁ‹Temp
;

1229 
HI_U16
 
au16LowCCM
[9];

1230 } 
	tISP_COLORMATRIX_AUTO_S
;

1232 
	shiISP_COLORMATRIX_ATTR_S


1234 
ISP_OP_TYPE_E
 
íOpTy≥
;

1235 
ISP_COLORMATRIX_MANUAL_S
 
°M™uÆ
;

1236 
ISP_COLORMATRIX_AUTO_S
 
°Auto
;

1237 }
	tISP_COLORMATRIX_ATTR_S
;

1239 
	shiISP_SATURATION_MANUAL_S


1241 
HI_U8
 
u8S©uøti⁄
;

1242 } 
	tISP_SATURATION_MANUAL_S
;

1244 
	shiISP_SATURATION_AUTO_S


1246 
HI_U8
 
au8S©
[
ISP_AUTO_STENGTH_NUM
];

1247 } 
	tISP_SATURATION_AUTO_S
;

1249 
	shiISP_SATURATION_ATTR_S


1251 
ISP_OP_TYPE_E
 
íOpTy≥
;

1252 
ISP_SATURATION_MANUAL_S
 
°M™uÆ
;

1253 
ISP_SATURATION_AUTO_S
 
°Auto
;

1254 }
	tISP_SATURATION_ATTR_S
;

1256 
	shiISP_COLOR_TONE_ATTR_S


1258 
HI_U16
 
u16RedCa°Gaö
;

1259 
HI_U16
 
u16GªíCa°Gaö
;

1260 
HI_U16
 
u16BlueCa°Gaö
;

1261 } 
	tISP_COLOR_TONE_ATTR_S
;

1263 
	shiISP_WB_INFO_S


1265 
HI_U16
 
u16Rgaö
;

1266 
HI_U16
 
u16Grgaö
;

1267 
HI_U16
 
u16Gbgaö
;

1268 
HI_U16
 
u16Bgaö
;

1269 
HI_U16
 
u16S©uøti⁄
;

1270 
HI_U16
 
u16Cﬁ‹Temp
;

1271 
HI_U16
 
au16CCM
[9];

1272 }
	tISP_WB_INFO_S
;

1276 
	shiISP_AF_ATTR_S


1278 
HI_S32
 
s32Di°™˚Max
;

1279 
HI_S32
 
s32Di°™˚Mö
;

1282 
HI_U8
 
u8Weight
[
AF_ZONE_ROW
][
AF_ZONE_COLUMN
];

1283 } 
	tISP_AF_ATTR_S
;

1284 
	shiISP_MF_ATTR_S


1286 
HI_S32
 
s32DeÁu…S≥ed
;

1287 } 
	tISP_MF_ATTR_S
;

1288 
	shiISP_FOCUS_ATTR_S


1290 
ISP_OP_TYPE_E
 
íOpTy≥
;

1291 
ISP_MF_ATTR_S
 
°M™uÆ
;

1292 
ISP_AF_ATTR_S
 
°Auto
;

1293 } 
	tISP_FOCUS_ATTR_S
;

1296 #ifde‡
__˝lu•lus


1297 #i‡
__˝lu•lus


	@include/hi_comm_ive.h

20 #i‚de‡
_HI_COMM_IVE_H_


21 
	#_HI_COMM_IVE_H_


	)

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
	~"hi_ty≥.h
"

30 
	~"hi_î∫o.h
"

38 
	tHI_U0Q8
;

39 
	tHI_U1Q7
;

40 
	tHI_U5Q3
;

43 
	tHI_U0Q16
;

44 
	tHI_U4Q12
;

45 
	tHI_U6Q10
;

46 
	tHI_U8Q8
;

47 
	tHI_U12Q4
;

48 
	tHI_U14Q2
;

51 
	tHI_S9Q7
;

52 
	tHI_S14Q2
;

53 
	tHI_S1Q15
;

56 
	tHI_U22Q10
;

57 
	tHI_U25Q7
;

60 
	tHI_S25Q7
;

61 
	tHI_S16Q16
;

68 
	tHI_U8Q4F4
;

71 
	tHI_FLOAT
;

73 
	tHI_DOUBLE
;

79 
	ehiIVE_IMAGE_TYPE_E


81 
IVE_IMAGE_TYPE_U8C1
 = 0x0,

82 
IVE_IMAGE_TYPE_S8C1
 = 0x1,

84 
IVE_IMAGE_TYPE_YUV420SP
 = 0x2,

85 
IVE_IMAGE_TYPE_YUV422SP
 = 0x3,

86 
IVE_IMAGE_TYPE_YUV420P
 = 0x4,

87 
IVE_IMAGE_TYPE_YUV422P
 = 0x5,

89 
IVE_IMAGE_TYPE_S8C2_PACKAGE
 = 0x6,

90 
IVE_IMAGE_TYPE_S8C2_PLANAR
 = 0x7,

92 
IVE_IMAGE_TYPE_S16C1
 = 0x8,

93 
IVE_IMAGE_TYPE_U16C1
 = 0x9,

95 
IVE_IMAGE_TYPE_U8C3_PACKAGE
 = 0xa,

96 
IVE_IMAGE_TYPE_U8C3_PLANAR
 = 0xb,

98 
IVE_IMAGE_TYPE_S32C1
 = 0xc,

99 
IVE_IMAGE_TYPE_U32C1
 = 0xd,

101 
IVE_IMAGE_TYPE_S64C1
 = 0xe,

102 
IVE_IMAGE_TYPE_U64C1
 = 0xf,

104 
IVE_IMAGE_TYPE_BUTT


106 }
	tIVE_IMAGE_TYPE_E
;

112 
	shiIVE_IMAGE_S


114 
IVE_IMAGE_TYPE_E
 
íTy≥
;

116 
HI_U32
 
u32PhyAddr
[3];

117 
HI_U8
 *
pu8VúAddr
[3];

119 
HI_U16
 
u16Såide
[3];

120 
HI_U16
 
u16Width
;

121 
HI_U16
 
u16Height
;

123 
HI_U16
 
u16Re£rved
;

124 }
	tIVE_IMAGE_S
;

126 
IVE_IMAGE_S
 
	tIVE_SRC_IMAGE_S
;

127 
IVE_IMAGE_S
 
	tIVE_DST_IMAGE_S
;

133 
	shiIVE_MEM_INFO_S


135 
HI_U32
 
u32PhyAddr
;

136 
HI_U8
 *
pu8VúAddr
;

137 
HI_U32
 
u32Size
;

138 }
	tIVE_MEM_INFO_S
;

139 
IVE_MEM_INFO_S
 
	tIVE_SRC_MEM_INFO_S
;

140 
IVE_MEM_INFO_S
 
	tIVE_DST_MEM_INFO_S
;

145 
	shiIVE_DATA_S


147 
HI_U32
 
u32PhyAddr
;

148 
HI_U8
 *
pu8VúAddr
;

150 
HI_U16
 
u16Såide
;

151 
HI_U16
 
u16Width
;

152 
HI_U16
 
u16Height
;

154 
HI_U16
 
u16Re£rved
;

155 }
	tIVE_DATA_S
;

156 
IVE_DATA_S
 
	tIVE_SRC_DATA_S
;

157 
IVE_DATA_S
 
	tIVE_DST_DATA_S
;

163 
	uhiIVE_8BIT_U


165 
HI_S8
 
s8VÆ
;

166 
HI_U8
 
u8VÆ
;

167 }
	tIVE_8BIT_U
;

172 
	shiIVE_POINT_U16_S


174 
HI_U16
 
u16X
;

175 
HI_U16
 
u16Y
;

176 }
	tIVE_POINT_U16_S
;

181 
	shiIVE_POINT_S25Q7_S


183 
HI_S25Q7
 
s25q7X
;

184 
HI_S25Q7
 
s25q7Y
;

185 }
	tIVE_POINT_S25Q7_S
;

190 
	shiIVE_RECT_U16_S


192 
HI_U16
 
u16X
;

193 
HI_U16
 
u16Y
;

194 
HI_U16
 
u16Width
;

195 
HI_U16
 
u16Height
;

196 }
	tIVE_RECT_U16_S
;

198 
	shiIVE_LOOK_UP_TABLE_S


200 
IVE_MEM_INFO_S
 
°TabÀ
;

201 
HI_U16
 
u16EÀmNum
;

203 
HI_U8
 
u8TabInPªci
;

204 
HI_U8
 
u8TabOutN‹m
;

206 
HI_S32
 
s32TabInLowî
;

207 
HI_S32
 
s32TabInUµî
;

208 }
	tIVE_LOOK_UP_TABLE_S
;

211 
	ehiEN_IVE_ERR_CODE_E


213 
ERR_IVE_SYS_TIMEOUT
 = 0x40,

214 
ERR_IVE_QUERY_TIMEOUT
 = 0x41,

215 
ERR_IVE_OPEN_FILE
 = 0x42,

216 
ERR_IVE_READ_FILE
 = 0x43,

217 
ERR_IVE_WRITE_FILE
 = 0x44,

219 
ERR_IVE_BUTT


220 }
	tEN_IVE_ERR_CODE_E
;

222 
	ehiEN_FD_ERR_CODE_E


224 
ERR_FD_SYS_TIMEOUT
 = 0x40,

225 
ERR_FD_CFG
 = 0x41,

226 
ERR_FD_FACE_NUM_OVER
 = 0x42,

228 
ERR_FD_BUTT


229 }
	tEN_FD_ERR_CODE_E
;

232 
	#HI_ERR_IVE_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

234 
	#HI_ERR_IVE_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

236 
	#HI_ERR_IVE_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

238 
	#HI_ERR_IVE_EXIST
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

240 
	#HI_ERR_IVE_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

242 
	#HI_ERR_IVE_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

244 
	#HI_ERR_IVE_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

246 
	#HI_ERR_IVE_NOT_SURPPORT
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

248 
	#HI_ERR_IVE_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

250 
	#HI_ERR_IVE_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

252 
	#HI_ERR_IVE_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

254 
	#HI_ERR_IVE_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

256 
	#HI_ERR_IVE_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

259 
	#HI_ERR_IVE_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

262 
	#HI_ERR_IVE_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

264 
	#HI_ERR_IVE_BUSY
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

267 
	#HI_ERR_IVE_SYS_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
ERR_IVE_SYS_TIMEOUT
)

	)

269 
	#HI_ERR_IVE_QUERY_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
ERR_IVE_QUERY_TIMEOUT
)

	)

271 
	#HI_ERR_IVE_OPEN_FILE
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
ERR_IVE_OPEN_FILE
)

	)

273 
	#HI_ERR_IVE_READ_FILE
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
ERR_IVE_READ_FILE
)

	)

275 
	#HI_ERR_IVE_WRITE_FILE
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
ERR_IVE_WRITE_FILE
)

	)

278 
	#HI_ERR_FD_SYS_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_FD
, 
EN_ERR_LEVEL_ERROR
, 
ERR_FD_SYS_TIMEOUT
)

	)

280 
	#HI_ERR_FD_CFG
 
	`HI_DEF_ERR
(
HI_ID_FD
, 
EN_ERR_LEVEL_ERROR
, 
ERR_FD_CFG
)

	)

282 
	#HI_ERR_FD_FACE_NUM_OVER
 
	`HI_DEF_ERR
(
HI_ID_FD
, 
EN_ERR_LEVEL_ERROR
, 
ERR_FD_FACE_NUM_OVER
)

	)

285 
	#HI_ERR_ODT_EXIST
 
	`HI_DEF_ERR
(
HI_ID_ODT
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

287 
	#HI_ERR_ODT_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_ODT
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

289 
	#HI_ERR_ODT_BUSY
 
	`HI_DEF_ERR
(
HI_ID_ODT
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

290 #ifde‡
__˝lu•lus


291 #i‡
__˝lu•lus


	@include/hi_comm_pciv.h

18 #i‚de‡
__HI_COMM_PCIV_H__


19 
	#__HI_COMM_PCIV_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_comm⁄.h
"

23 
	~"hi_î∫o.h
"

24 
	~"hi_comm_video.h
"

25 
	~"hi_comm_vdec.h
"

26 
	~"hi_comm_vpss.h
"

28 #ifde‡
__˝lu•lus


29 #i‡
__˝lu•lus


34 
HI_S32
 
	tPCIV_CHN
;

36 
	#PCIV_MAX_BUF_NUM
 16

	)

37 
	#PCIV_MAX_CHIPNUM
 32

	)

39 
	#MAKE_DWORD
(
high
,
low
Ë((÷ow)&0x0000ffff)|((high)<<16))

	)

40 
	#HIGH_WORD
(
x
Ë(((x)&0xffff0000)>>16)

	)

41 
	#LOW_WORD
(
x
Ë((x)&0x0000ffff)

	)

44 
	shiPCIV_VIDEVICE_S


46 
VI_DEV
 
viDev
;

47 
VI_CHN
 
viChn
;

48 } 
	tPCIV_VIDEVICE_S
;

51 
	shiPCIV_VODEVICE_S


53 
VO_DEV
 
voDev
;

54 
VO_CHN
 
voChn
;

55 } 
	tPCIV_VODEVICE_S
;

58 
	shiPCIV_VDECDEVICE_S


60 
VDEC_CHN
 
vdecChn
;

61 } 
	tPCIV_VDECDEVICE_S
;

64 
	shiPCIV_VPSSDEVICE_S


66 
VPSS_GRP
 
vpssGΩ
;

67 
VPSS_CHN
 
vpssChn
;

68 } 
	tPCIV_VPSSDEVICE_S
;

71 
	ehiPCIV_BIND_TYPE_E


73 
PCIV_BIND_VI
 = 0,

74 
PCIV_BIND_VO
 = 1,

75 
PCIV_BIND_VDEC
 = 2,

76 
PCIV_BIND_VPSS
 = 3,

77 
PCIV_BIND_BUTT


78 } 
	tPCIV_BIND_TYPE_E
;

81 
	shiPCI_BIND_OBJ_S


83 
HI_BOOL
 
bVpssSíd
;

84 
PCIV_BIND_TYPE_E
 
íTy≥
;

87 
PCIV_VIDEVICE_S
 
viDevi˚
;

88 
PCIV_VODEVICE_S
 
voDevi˚
;

89 
PCIV_VDECDEVICE_S
 
vdecDevi˚
;

90 
PCIV_VPSSDEVICE_S
 
vpssDevi˚
;

91 } 
unAâachObj
;

92 } 
	tPCIV_BIND_OBJ_S
;

95 
	shiPCIV_REMOTE_OBJ_S


97 
HI_S32
 
s32ChùId
;

98 
PCIV_CHN
 
pcivChn
;

99 } 
	tPCIV_REMOTE_OBJ_S
;

102 
	shiPCIV_PIC_ATTR_S


104 
HI_U32
 
u32Width
;

105 
HI_U32
 
u32Height
;

106 
HI_U32
 
u32Såide
[3];

107 
VIDEO_FIELD_E
 
u32Fõld
;

108 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

109 } 
	tPCIV_PIC_ATTR_S
;

113 
	shiPCIV_ATTR_S


115 
PCIV_PIC_ATTR_S
 
°PicAâr
;

116 
HI_S32
 
s32BufChù
;

117 
HI_U32
 
u32BlkSize
;

118 
HI_U32
 
u32Cou¡
;

119 
HI_U32
 
u32PhyAddr
[
PCIV_MAX_BUF_NUM
];

120 
PCIV_REMOTE_OBJ_S
 
°RemŸeObj
;

121 } 
	tPCIV_ATTR_S
;

124 
	#PCIV_MAX_VBCOUNT
 8

	)

127 
	shiPCIV_WINVBCFG_S


129 
HI_U32
 
u32PoﬁCou¡
;

130 
HI_U32
 
u32BlkSize
[
PCIV_MAX_VBCOUNT
];

131 
HI_U32
 
u32BlkCou¡
[
PCIV_MAX_VBCOUNT
];

132 } 
	tPCIV_WINVBCFG_S
;

134 
	shiPCIV_BASEWINDOW_S


136 
HI_S32
 
s32ChùId
;

137 
HI_U32
 
u32NpWöBa£
;

138 
HI_U32
 
u32PfWöBa£
;

139 
HI_U32
 
u32CfgWöBa£
;

140 
HI_U32
 
u32PfAHBAddr
;

141 } 
	tPCIV_BASEWINDOW_S
;

143 
	#PCIV_MAX_DMABLK
 128

	)

144 
	shiPCIV_DMA_BLOCK_S


146 
HI_U32
 
u32SrcAddr
;

147 
HI_U32
 
u32D°Addr
;

148 
HI_U32
 
u32BlkSize
;

149 } 
	tPCIV_DMA_BLOCK_S
;

151 
	shiPCIV_DMA_TASK_S


153 
HI_U32
 
u32Cou¡
;

154 
HI_BOOL
 
bRód
;

155 
PCIV_DMA_BLOCK_S
 *
pBlock
;

156 } 
	tPCIV_DMA_TASK_S
;

162 
	#PCIV_MSGPORT_KERNEL
 80

	)

168 
	#PCIV_MSGPORT_MAXPORT
 100

	)

169 
	#PCIV_MSGPORT_TIME
 79

	)

170 
	#PCIV_MSGPORT_USERCMD
 81

	)

171 
	#PCIV_MSGPORT_USERNOTIFY2HOST
 82

	)

172 
	#PCIV_MSGPORT_USERNOTIFY2SLAVE
 83

	)

173 
	#PCIV_MSGPORT_USERNOTIFY2HOST_VDEC
 84

	)

174 
	#PCIV_MSGPORT_USERNOTIFY2SLAVE_VDEC
 85

	)

175 
	#PCIV_MAXVO_BIND
 4

	)

178 
	ehiPCIV_FILTER_TYPE_E


180 
PCIV_FILTER_TYPE_NORM
,

181 
PCIV_FILTER_TYPE_EX
,

182 
PCIV_FILTER_TYPE_EX2
,

184 
PCIV_FILTER_TYPE_BUTT


185 } 
	tPCIV_FILTER_TYPE_E
;

187 
	ehiPCIV_PIC_FIELD_E


189 
PCIV_FIELD_TOP
,

190 
PCIV_FIELD_BOTTOM
,

191 
PCIV_FIELD_BOTH
,

193 
PCIV_FIELD_BUTT


194 } 
	tPCIV_PIC_FIELD_E
;

200 
	shiPCIV_PREPROC_CFG_S


202 
PCIV_PIC_FIELD_E
 
íFõldSñ
;

203 
PCIV_FILTER_TYPE_E
 
íFûãrTy≥
;

204 } 
	tPCIV_PREPROC_CFG_S
;

209 
	shiPCIV_TIME_SYNC_S


211 
timevÆ
 
°SysTime
;

212 
HI_U64
 
u64PtsBa£
;

213 
HI_U32
 
u32ReqTagId
;

214 } 
	tPCIV_TIME_SYNC_S
;

218 
	#HI_ERR_PCIV_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

220 
	#HI_ERR_PCIV_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

222 
	#HI_ERR_PCIV_EXIST
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

224 
	#HI_ERR_PCIV_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

226 
	#HI_ERR_PCIV_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

228 
	#HI_ERR_PCIV_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

230 
	#HI_ERR_PCIV_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

232 
	#HI_ERR_PCIV_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

234 
	#HI_ERR_PCIV_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

236 
	#HI_ERR_PCIV_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

238 
	#HI_ERR_PCIV_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

240 
	#HI_ERR_PCIV_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

242 
	#HI_ERR_PCIV_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

244 
	#HI_ERR_PCIV_BUSY
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

245 
	#HI_ERR_PCIV_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUTT
+1)

	)

247 
	#PCIV_TRACE
(
Àvñ
, 
fmt
...)\

249 
	`HI_TRACE
(
Àvñ
, 
HI_ID_PCIV
,"[Func]:%†[Löe]:%d [Info]:", 
__FUNCTION__
, 
__LINE__
);\

250 
	`HI_TRACE
(
Àvñ
,
HI_ID_PCIV
,##
fmt
);\

251 }0)

	)

253 
	#PCIV_CHECK_CHNID
(
ChnID
)\

255 if(((
ChnID
Ë< 0Ë|| ((ChnIDË>
PCIV_MAX_CHN_NUM
))\

257 
	`PCIV_TRACE
(
HI_DBG_ERR
, "övÆid ch¿id:%d \n", 
ChnID
);\

258  
HI_ERR_PCIV_INVALID_CHNID
;\

260 }0)

	)

262 
	#PCIV_CHECK_PTR
(
±r
)\

264 if(
NULL
 =(
±r
))\

266  
HI_ERR_PCIV_NULL_PTR
;\

268 }0)

	)

271 #ifde‡
__˝lu•lus


272 #i‡
__˝lu•lus


	@include/hi_comm_rc.h

15 #i‚de‡
__HI_COMM_RC_H__


16 
	#__HI_COMM_RC_H__


	)

18 
	~"hi_deföes.h
"

20 #ifde‡
__˝lu•lus


21 #i‡
__˝lu•lus


26 
HI_U32
 
	tHI_FR32
;

28 
	ehiVENC_RC_MODE_E


30 
VENC_RC_MODE_H264CBR
 = 1,

31 
VENC_RC_MODE_H264VBR
,

32 
VENC_RC_MODE_H264ABR
,

33 
VENC_RC_MODE_H264FIXQP
,

35 
VENC_RC_MODE_MJPEGCBR
,

36 
VENC_RC_MODE_MJPEGVBR
,

37 
VENC_RC_MODE_MJPEGABR
,

38 
VENC_RC_MODE_MJPEGFIXQP
,

40 
VENC_RC_MODE_MPEG4CBR
,

41 
VENC_RC_MODE_MPEG4VBR
,

42 
VENC_RC_MODE_MPEG4ABR
,

43 
VENC_RC_MODE_MPEG4FIXQP
,

45 
VENC_RC_MODE_H265CBR
,

46 
VENC_RC_MODE_H265VBR
,

47 
VENC_RC_MODE_H265FIXQP
,

49 
VENC_RC_MODE_BUTT
,

51 }
	tVENC_RC_MODE_E
;

54 
	shiVENC_ATTR_H264_FIXQP_S


56 
HI_U32
 
u32G›
;

57 
HI_U32
 
u32SrcFrmR©e
;

58 
HI_FR32
 
‰32D°FrmR©e
 ;

59 
HI_U32
 
u32IQp
;

60 
HI_U32
 
u32PQp
;

61 } 
	tVENC_ATTR_H264_FIXQP_S
;

63 
	shiVENC_ATTR_H264_CBR_S


65 
HI_U32
 
u32G›
;

66 
HI_U32
 
u32SètTime
;

67 
HI_U32
 
u32SrcFrmR©e
;

68 
HI_FR32
 
‰32D°FrmR©e
 ;

69 
HI_U32
 
u32BôR©e
;

70 
HI_U32
 
u32Flu˘u©eLevñ
;

71 } 
	tVENC_ATTR_H264_CBR_S
;

73 
	shiVENC_ATTR_H264_VBR_S


75 
HI_U32
 
u32G›
;

76 
HI_U32
 
u32SètTime
;

77 
HI_U32
 
u32SrcFrmR©e
;

78 
HI_FR32
 
‰32D°FrmR©e
 ;

79 
HI_U32
 
u32MaxBôR©e
;

80 
HI_U32
 
u32MaxQp
;

81 
HI_U32
 
u32MöQp
;

82 }
	tVENC_ATTR_H264_VBR_S
;

84 
	shiVENC_ATTR_H264_ABR_S


86 
HI_U32
 
u32G›
;

87 
HI_U32
 
u32SètTime
;

88 
HI_U32
 
u32SrcFrmR©e
;

89 
HI_FR32
 
‰32D°FrmR©e
 ;

90 
HI_U32
 
u32AvgBôR©e
;

91 
HI_U32
 
u32MaxBôR©e
;

92 }
	tVENC_ATTR_H264_ABR_S
;

94 
hiVENC_ATTR_H264_CBR_S
 
	tVENC_ATTR_H265_CBR_S
;

95 
hiVENC_ATTR_H264_VBR_S
 
	tVENC_ATTR_H265_VBR_S
;

96 
hiVENC_ATTR_H264_FIXQP_S
 
	tVENC_ATTR_H265_FIXQP_S
;

100 
	shiVENC_ATTR_MPEG4_FIXQP_S


102 
HI_U32
 
u32G›
;

103 
HI_U32
 
u32SrcFrmR©e
;

104 
HI_FR32
 
‰32D°FrmR©e
 ;

105 
HI_U32
 
u32IQp
;

106 
HI_U32
 
u32PQp
;

107 }
	tVENC_ATTR_MPEG4_FIXQP_S
;

109 
	shiVENC_ATTR_MPEG4_CBR_S


111 
HI_U32
 
u32G›
;

112 
HI_U32
 
u32SètTime
;

113 
HI_U32
 
u32SrcFrmR©e
;

114 
HI_FR32
 
‰32D°FrmR©e
 ;

115 
HI_U32
 
u32BôR©e
;

116 
HI_U32
 
u32Flu˘u©eLevñ
;

117 }
	tVENC_ATTR_MPEG4_CBR_S
;

119 
	shiVENC_ATTR_MPEG4_VBR_S


121 
HI_U32
 
u32G›
;

122 
HI_U32
 
u32SètTime
;

123 
HI_U32
 
u32SrcFrmR©e
;

124 
HI_FR32
 
‰32D°FrmR©e
 ;

125 
HI_U32
 
u32MaxBôR©e
;

126 
HI_U32
 
u32MaxQp
;

127 
HI_U32
 
u32MöQp
;

128 }
	tVENC_ATTR_MPEG4_VBR_S
;

130 
	shiVENC_ATTR_MJPEG_FIXQP_S


132 
HI_U32
 
u32SrcFrmR©e
;

133 
HI_FR32
 
‰32D°FrmR©e
;

134 
HI_U32
 
u32QÁ˘‹
;

135 }
	tVENC_ATTR_MJPEG_FIXQP_S
;

137 
	shiVENC_ATTR_MJPEG_CBR_S


139 
HI_U32
 
u32SètTime
;

140 
HI_U32
 
u32SrcFrmR©e
;

141 
HI_FR32
 
‰32D°FrmR©e
 ;

142 
HI_U32
 
u32BôR©e
;

143 
HI_U32
 
u32Flu˘u©eLevñ
;

144 } 
	tVENC_ATTR_MJPEG_CBR_S
;

146 
	shiVENC_ATTR_MJPEG_VBR_S


148 
HI_U32
 
u32SètTime
;

149 
HI_U32
 
u32SrcFrmR©e
;

150 
HI_FR32
 
‰32D°FrmR©e
;

151 
HI_U32
 
u32MaxBôR©e
;

152 
HI_U32
 
u32MaxQÁ˘‹
;

153 
HI_U32
 
u32MöQÁ˘‹
;

154 }
	tVENC_ATTR_MJPEG_VBR_S
;

156 
	shiVENC_RC_ATTR_S


158 
VENC_RC_MODE_E
 
íRcMode
;

161 
VENC_ATTR_H264_CBR_S
 
°AârH264Cbr
;

162 
VENC_ATTR_H264_VBR_S
 
°AârH264Vbr
;

163 
VENC_ATTR_H264_FIXQP_S
 
°AârH264FixQp
;

164 
VENC_ATTR_H264_ABR_S
 
°AârH264Abr
;

166 
VENC_ATTR_MPEG4_CBR_S
 
°AârM≥g4Cbr
;

167 
VENC_ATTR_MPEG4_FIXQP_S
 
°AârM≥g4FixQp
;

168 
VENC_ATTR_MPEG4_VBR_S
 
°AârM≥g4Vbr
;

170 
VENC_ATTR_MJPEG_CBR_S
 
°AârMj≥geCbr
;

171 
VENC_ATTR_MJPEG_FIXQP_S
 
°AârMj≥geFixQp
;

172 
VENC_ATTR_MJPEG_VBR_S
 
°AârMj≥geVbr
;

174 
VENC_ATTR_H265_CBR_S
 
°AârH265Cbr
;

175 
VENC_ATTR_H265_VBR_S
 
°AârH265Vbr
;

176 
VENC_ATTR_H265_FIXQP_S
 
°AârH265FixQp
;

178 
HI_VOID
* 
pRcAâr
 ;

180 }
	tVENC_RC_ATTR_S
;

182 
	ehiRC_SUPERFRM_MODE_E


184 
SUPERFRM_NONE
,

185 
SUPERFRM_DISCARD
,

186 
SUPERFRM_REENCODE
,

187 
SUPERFRM_BUTT


188 }
	tVENC_SUPERFRM_MODE_E
;

190 
	shiVENC_PARAM_H264_CBR_S


192 
HI_U32
 
u32MöI¥›
;

193 
HI_U32
 
u32MaxI¥›
;

194 
HI_U32
 
u32MaxQp
;

195 
HI_U32
 
u32MöQp
;

196 
HI_S32
 
s32IPQPDñè
;

197 
HI_S32
 
s32QuÆôyLevñ
;

198 
HI_S32
 
s32MaxReEncodeTimes
;

199 
HI_U32
 
u32MöIQp
;

200 }
	tVENC_PARAM_H264_CBR_S
;

202 
	shiVENC_PARAM_H264_VBR_S


204 
HI_S32
 
s32IPQPDñè
;

205 
HI_S32
 
s32Ch™gePos
;

207 
HI_U32
 
u32MöI¥›
;

208 
HI_U32
 
u32MaxI¥›
;

209 
HI_U32
 
u32MöIQP
;

210 }
	tVENC_PARAM_H264_VBR_S
;

214 
	shiVENC_PARAM_MJPEG_CBR_S


216 
HI_U32
 
u32MaxQÁ˘‹
;

217 
HI_U32
 
u32MöQÁ˘‹
;

218 
HI_U32
 
u32RQR©io
[
RC_RQRATIO_SIZE
];

221 }
	tVENC_PARAM_MJPEG_CBR_S
;

223 
	shiVENC_PARAM_MJPEG_VBR_S


225 
HI_S32
 
s32DñèQÁ˘‹
;

227 
HI_S32
 
s32Ch™gePos
;

229 }
	tVENC_PARAM_MJPEG_VBR_S
;

231 
	shiVENC_PARAM_MPEG4_CBR_S


233 
HI_U32
 
u32MöI¥›
;

234 
HI_U32
 
u32MaxI¥›
;

236 
HI_U32
 
u32MaxQp
;

237 
HI_U32
 
u32MöQp
;

238 
HI_U32
 
u32MaxPPDñèQp
;

239 
HI_U32
 
u32MaxIPDñèQp
;

240 
HI_S32
 
s32IPQPDñè
;

242 
HI_U32
 
u32RQR©io
[
RC_RQRATIO_SIZE
];

244 }
	tVENC_PARAM_MPEG4_CBR_S
;

246 
	shiVENC_PARAM_MPEG4_VBR_S


248 
HI_S32
 
s32IPQPDñè
;

250 
HI_S32
 
s32Ch™gePos
;

253 
HI_U32
 
u32MöI¥›
;

254 
HI_U32
 
u32MaxI¥›
;

255 }
	tVENC_PARAM_MPEG4_VBR_S
;

257 
hiVENC_PARAM_H264_CBR_S
 
	tVENC_PARAM_H265_CBR_S
;

258 
hiVENC_PARAM_H264_VBR_S
 
	tVENC_PARAM_H265_VBR_S
;

261 
	shiVENC_RC_PARAM_S


263 
HI_U32
 
u32ThrdI
[
RC_TEXTURE_THR_SIZE
];

264 
HI_U32
 
u32ThrdP
[
RC_TEXTURE_THR_SIZE
];

265 
HI_U32
 
u32RowQpDñè
;

268 
VENC_PARAM_H264_CBR_S
 
°P¨amH264Cbr
;

269 
VENC_PARAM_H264_VBR_S
 
°P¨amH264VBR
;

270 
VENC_PARAM_MJPEG_CBR_S
 
°P¨amMj≥gCbr
;

271 
VENC_PARAM_MJPEG_VBR_S
 
°P¨amMj≥gVbr
;

272 
VENC_PARAM_MPEG4_CBR_S
 
°P¨amM≥g4Cbr
;

273 
VENC_PARAM_MPEG4_VBR_S
 
°P¨amM≥g4Vbr
;

274 
VENC_PARAM_H265_CBR_S
 
°P¨amH265Cbr
;

275 
VENC_PARAM_H265_VBR_S
 
°P¨amH265Vbr
;

278 
HI_VOID
* 
pRcP¨am
;

279 }
	tVENC_RC_PARAM_S
;

283 
	ehiVENC_FRAMELOST_MODE_E


285 
FRMLOST_NORMAL
,

286 
FRMLOST_PSKIP
,

287 
FRMLOST_BUTT
,

288 }
	tVENC_FRAMELOST_MODE_E
;

290 
	shiVENC_PARAM_FRAMELOST_S


292 
HI_BOOL
 
bFrmLo°O≥n
;

294 
HI_U32
 
u32FrmLo°BpsThr
;

295 
VENC_FRAMELOST_MODE_E
 
íFrmLo°Mode
;

296 
HI_U32
 
u32EncFrmG≠s
;

297 }
	tVENC_PARAM_FRAMELOST_S
;

300 
	shiVENC_SUPERFRAME_CFG_S


302 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

303 
HI_U32
 
u32Su≥rIFrmBôsThr
;

305 
HI_U32
 
u32Su≥rPFrmBôsThr
;

306 
HI_U32
 
u32Su≥rBFrmBôsThr
;

307 }
	tVENC_SUPERFRAME_CFG_S
;

309 
	ehiVENC_RC_PRIORITY_E


311 
VENC_RC_PRIORITY_BITRATE_FIRST
 = 1,

312 
VENC_RC_PRIORITY_FRAMEBITS_FIRST
,

314 
VENC_RC_PRIORITY_BUTT
,

315 } 
	tVENC_RC_PRIORITY_E
;

318 #ifde‡
__˝lu•lus


319 #i‡
__˝lu•lus


	@include/hi_comm_region.h

24 #i‚de‡
__HI_COMM_REGION_H__


25 
	#__HI_COMM_REGION_H__


	)

27 
	~"hi_comm⁄.h
"

28 
	~"hi_comm_video.h
"

29 
	~"hi_î∫o.h
"

30 
	~"hi_deföes.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


43 
HI_U32
 
	tRGN_HANDLE
;

46 
	ehiRGN_TYPE_E


48 
OVERLAY_RGN
 = 0,

49 
COVER_RGN
,

50 
COVEREX_RGN
,

51 
OVERLAYEX_RGN
,

52 
RGN_BUTT


53 } 
	tRGN_TYPE_E
;

55 
	ehiINVERT_COLOR_MODE_E


57 
LESSTHAN_LUM_THRESH
 = 0,

58 
MORETHAN_LUM_THRESH
,

59 
INVERT_COLOR_BUTT


60 }
	tINVERT_COLOR_MODE_E
;

62 
	shiOVERLAY_QP_INFO_S


64 
HI_BOOL
 
bAbsQp
;

65 
HI_S32
 
s32Qp
;

66 
HI_BOOL
 
bQpDißbÀ
;

67 }
	tOVERLAY_QP_INFO_S
;

69 
	shiOVERLAY_INVERT_COLOR_S


71 
SIZE_S
 
°InvCﬁAªa
;

72 
HI_U32
 
u32LumThªsh
;

73 
INVERT_COLOR_MODE_E
 
íChgMod
;

74 
HI_BOOL
 
bInvCﬁEn
;

75 }
	tOVERLAY_INVERT_COLOR_S
;

77 
	shiOVERLAY_ATTR_S


80 
PIXEL_FORMAT_E
 
íPixñFmt
;

83 
HI_U32
 
u32BgCﬁ‹
;

86 
SIZE_S
 
°Size
;

87 }
	tOVERLAY_ATTR_S
;

89 
	shiOVERLAY_CHN_ATTR_S


92 
POINT_S
 
°Poöt
;

98 
HI_U32
 
u32FgAÕha
;

104 
HI_U32
 
u32BgAÕha
;

106 
HI_U32
 
u32Layî
;

108 
OVERLAY_QP_INFO_S
 
°QpInfo
;

110 
OVERLAY_INVERT_COLOR_S
 
°InvîtCﬁ‹
;

111 }
	tOVERLAY_CHN_ATTR_S
;

113 
	ehiRGN_AREA_TYPE_E


115 
AREA_RECT
 = 0,

116 
AREA_QUAD_RANGLE
,

117 
AREA_BUTT


118 } 
	tRGN_AREA_TYPE_E
;

120 
	shiRGN_QUADRANGLE_S


122 
HI_BOOL
 
bSﬁid
;

123 
HI_U32
 
u32Thick
;

124 
POINT_S
 
°Poöt
[4];

125 } 
	tRGN_QUADRANGLE_S
;

127 
	shiCOVER_CHN_ATTR_S


129 
RGN_AREA_TYPE_E
 
íCovîTy≥
;

132 
RECT_S
 
°Re˘
;

133 
RGN_QUADRANGLE_S
 
°QuadR™gÀ
;

135 
HI_U32
 
u32Cﬁ‹
;

136 
HI_U32
 
u32Layî
;

137 }
	tCOVER_CHN_ATTR_S
;

139 
	shiCOVEREX_CHN_ATTR_S


141 
RGN_AREA_TYPE_E
 
íCovîTy≥
;

144 
RECT_S
 
°Re˘
;

145 
RGN_QUADRANGLE_S
 
°QuadR™gÀ
;

147 
HI_U32
 
u32Cﬁ‹
;

148 
HI_U32
 
u32Layî
;

149 }
	tCOVEREX_CHN_ATTR_S
;

151 
	shiOVERLAYEX_COMM_ATTR_S


153 
PIXEL_FORMAT_E
 
íPixñFmt
;

156 
HI_U32
 
u32BgCﬁ‹
;

159 
SIZE_S
 
°Size
;

160 }
	tOVERLAYEX_ATTR_S
;

162 
	shiOVERLAYEX_CHN_ATTR_S


165 
POINT_S
 
°Poöt
;

171 
HI_U32
 
u32FgAÕha
;

177 
HI_U32
 
u32BgAÕha
;

179 
HI_U32
 
u32Layî
;

180 }
	tOVERLAYEX_CHN_ATTR_S
;

182 
	uhiRGN_ATTR_U


184 
OVERLAY_ATTR_S
 
°Ovîœy
;

185 
OVERLAYEX_ATTR_S
 
°OvîœyEx
;

186 } 
	tRGN_ATTR_U
;

188 
	uhiRGN_CHN_ATTR_U


190 
OVERLAY_CHN_ATTR_S
 
°OvîœyChn
;

191 
COVER_CHN_ATTR_S
 
°CovîChn
;

192 
COVEREX_CHN_ATTR_S
 
°CovîExChn
;

193 
OVERLAYEX_CHN_ATTR_S
 
°OvîœyExChn
;

194 } 
	tRGN_CHN_ATTR_U
;

197 
	shiRGN_ATTR_S


199 
RGN_TYPE_E
 
íTy≥
;

200 
RGN_ATTR_U
 
unAâr
;

201 } 
	tRGN_ATTR_S
;

204 
	shiRGN_CHN_ATTR_S


206 
HI_BOOL
 
bShow
;

207 
RGN_TYPE_E
 
íTy≥
;

208 
RGN_CHN_ATTR_U
 
unChnAâr
;

209 } 
	tRGN_CHN_ATTR_S
;

213 
	#RGN_MAX_BMP_UPDATE_NUM
 16

	)

215 
	shiRGN_BMP_UPDATE_S


217 
POINT_S
 
°Poöt
;

218 
BITMAP_S
 
°Bmp
;

219 
HI_U32
 
u32Såide
;

220 } 
	tRGN_BMP_UPDATE_S
;

222 
	shiRGN_BMP_UPDATE_CFG_S


224 
HI_U32
 
u32BmpC¡
;

225 
RGN_BMP_UPDATE_S
 
a°BmpUpd©e
[
RGN_MAX_BMP_UPDATE_NUM
];

226 } 
	tRGN_BMP_UPDATE_CFG_S
;

228 
	shiRGN_CANVAS_INFO_S


230 
HI_U32
 
u32PhyAddr
;

231 
HI_U32
 
u32VútAddr
;

232 
SIZE_S
 
°Size
;

233 
HI_U32
 
u32Såide
;

234 
PIXEL_FORMAT_E
 
íPixñFmt
;

235 } 
	tRGN_CANVAS_INFO_S
;

240 
	#HI_ERR_RGN_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

242 
	#HI_ERR_RGN_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

244 
	#HI_ERR_RGN_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

246 
	#HI_ERR_RGN_EXIST
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

248 
	#HI_ERR_RGN_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

250 
	#HI_ERR_RGN_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

252 
	#HI_ERR_RGN_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

254 
	#HI_ERR_RGN_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

256 
	#HI_ERR_RGN_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

258 
	#HI_ERR_RGN_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

260 
	#HI_ERR_RGN_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

262 
	#HI_ERR_RGN_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

264 
	#HI_ERR_RGN_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

266 
	#HI_ERR_RGN_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

268 
	#HI_ERR_RGN_BUSY
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

273 
	#HI_ERR_RGN_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

276 #ifde‡
__˝lu•lus


277 #i‡
__˝lu•lus


	@include/hi_comm_sns.h

18 #i‚de‡
__HI_COMM_SNS_H__


19 
	#__HI_COMM_SNS_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_comm⁄.h
"

23 
	~"hi_comm_i•.h
"

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


31 
	shiISP_CMOS_BLACK_LEVEL_S


33 
HI_BOOL
 
bUpd©e
;

35 
HI_U16
 
au16BœckLevñ
[4];

36 } 
	tISP_CMOS_BLACK_LEVEL_S
;

38 
	shiISP_CMOS_AGC_TABLE_S


40 
HI_BOOL
 
bVÆid
;

42 
HI_U8
 
au8Sh¨≥nA…D
[16];

43 
HI_U8
 
au8Sh¨≥nA…Ud
[16];

44 
HI_U8
 
au8SƒThªsh
[16];

45 
HI_U8
 
au8DemoßicLumThªsh
[16];

46 
HI_U8
 
au8DemoßicNpOff£t
[16];

47 
HI_U8
 
au8GeSåígth
[16];

48 
HI_U8
 
au8Sh¨≥nRGB
[16];

49 } 
	tISP_CMOS_AGC_TABLE_S
;

51 
	shiISP_CMOS_NOISE_TABLE_S


53 
HI_BOOL
 
bVÆid
;

55 
HI_U8
 
au8Noi£ProfûeWeightLut
[128];

56 
HI_U8
 
au8DemoßicWeightLut
[128];

57 } 
	tISP_CMOS_NOISE_TABLE_S
;

59 
	shiISP_CMOS_DEMOSAIC_S


61 
HI_BOOL
 
bVÆid
;

63 
HI_U8
 
u8VhSl›e
;

64 
HI_U8
 
u8AaSl›e
;

65 
HI_U8
 
u8VaSl›e
;

66 
HI_U8
 
u8UuSl›e
;

67 
HI_U8
 
u8S©Sl›e
;

68 
HI_U8
 
u8AcSl›e
;

69 
HI_U8
 
u8FcSl›e
;

70 
HI_U16
 
u16VhThªsh
;

71 
HI_U16
 
u16AaThªsh
;

72 
HI_U16
 
u16VaThªsh
;

73 
HI_U16
 
u16UuThªsh
;

74 
HI_U16
 
u16S©Thªsh
;

75 
HI_U16
 
u16AcThªsh
;

76 } 
	tISP_CMOS_DEMOSAIC_S
;

78 
	shiISP_CMOS_RGBSHARPEN_S


80 
HI_BOOL
 
bVÆid
;

82 
HI_U8
 
u8LutC‹e
;

83 
HI_U8
 
u8LutSåígth
;

84 
HI_U8
 
u8LutMagnôude
;

85 } 
	tISP_CMOS_RGBSHARPEN_S
;

87 
	shiISP_CMOS_DRC_S


89 
HI_BOOL
 
bE«bÀ
;

90 
HI_U32
 
u32BœckLevñ
;

91 
HI_U32
 
u32WhôeLevñ
;

92 
HI_U32
 
u32Sl›eMax
;

93 
HI_U32
 
u32Sl›eMö
;

94 
HI_U32
 
u32V¨ün˚S∑˚
;

95 
HI_U32
 
u32V¨ün˚I¡ísôy
;

96 
HI_U32
 
u32Asymmëry
;

97 
HI_U32
 
u32BrightEnh™˚
;

98 } 
	tISP_CMOS_DRC_S
;

101 
	#GAMMA_FE0_LUT_SIZE
 33

	)

102 
	#GAMMA_FE1_LUT_SIZE
 257

	)

103 
	shiISP_CMOS_GAMMAFE_S


105 
HI_BOOL
 
bVÆid
;

107 
HI_U16
 
au16Gamma„0
[
GAMMA_FE0_LUT_SIZE
];

108 
HI_U16
 
au16Gamma„1
[
GAMMA_FE1_LUT_SIZE
];

109 } 
	tISP_CMOS_GAMMAFE_S
;

111 
	#CMOS_SHADING_TABLE_NODE_NUMBER_MAX
 (129)

	)

112 
	shiISP_CMOS_SHADING_S


114 
HI_BOOL
 
bVÆid
;

116 
HI_U16
 
u16RCíãrX
;

117 
HI_U16
 
u16RCíãrY
;

118 
HI_U16
 
u16GCíãrX
;

119 
HI_U16
 
u16GCíãrY
;

120 
HI_U16
 
u16BCíãrX
;

121 
HI_U16
 
u16BCíãrY
;

123 
HI_U16
 
au16RShadögTbl
[
CMOS_SHADING_TABLE_NODE_NUMBER_MAX
];

124 
HI_U16
 
au16GShadögTbl
[
CMOS_SHADING_TABLE_NODE_NUMBER_MAX
];

125 
HI_U16
 
au16BShadögTbl
[
CMOS_SHADING_TABLE_NODE_NUMBER_MAX
];

127 
HI_U16
 
u16ROffCíãr
;

128 
HI_U16
 
u16GOffCíãr
;

129 
HI_U16
 
u16BOffCíãr
;

131 
HI_U16
 
u16TblNodeNum
;

132 } 
	tISP_CMOS_SHADING_S
;

134 
	#GAMMA_NODE_NUMBER
 257

	)

135 
	shiISP_CMOS_GAMMA_S


137 
HI_BOOL
 
bVÆid
;

139 
HI_U16
 
au16Gamma
[
GAMMA_NODE_NUMBER
];

140 } 
	tISP_CMOS_GAMMA_S
;

142 
	shiISP_CMOS_SENSOR_MAX_RESOLUTION_S


144 
HI_U32
 
u32MaxWidth
;

145 
HI_U32
 
u32MaxHeight
;

146 }
	tISP_CMOS_SENSOR_MAX_RESOLUTION_S
;

148 
	shiISP_CMOS_DEFAULT_S


150 
ISP_CMOS_DRC_S
 
°Drc
;

151 
ISP_CMOS_AGC_TABLE_S
 
°AgcTbl
;

152 
ISP_CMOS_NOISE_TABLE_S
 
°Noi£Tbl
;

153 
ISP_CMOS_DEMOSAIC_S
 
°Demoßic
;

154 
ISP_CMOS_GAMMAFE_S
 
°Gamma„
;

155 
ISP_CMOS_GAMMA_S
 
°Gamma
;

156 
ISP_CMOS_SHADING_S
 
°Shadög
;

157 
ISP_CMOS_RGBSHARPEN_S
 
°RgbSh¨≥n
;

159 
ISP_CMOS_SENSOR_MAX_RESOLUTION_S
 
°Sís‹MaxResﬁuti⁄
;

160 } 
	tISP_CMOS_DEFAULT_S
;

162 
	shiISP_CMOS_SENSOR_IMAGE_MODE_S


164 
HI_U16
 
u16Width
;

165 
HI_U16
 
u16Height
;

166 
HI_FLOAT
 
f32Fps
;

167 }
	tISP_CMOS_SENSOR_IMAGE_MODE_S
;

169 
	shiISP_SENSOR_EXP_FUNC_S


171 
HI_VOID
(*
p‚_cmos_£ns‹_öô
)(HI_VOID);

172 
HI_VOID
(*
p‚_cmos_£ns‹_exô
)(HI_VOID);

173 
HI_VOID
(*
p‚_cmos_£ns‹_globÆ_öô
)(HI_VOID);

174 
HI_S32
(*
p‚_cmos_£t_image_mode
)(
ISP_CMOS_SENSOR_IMAGE_MODE_S
 *
p°Sís‹ImageMode
);

175 
HI_VOID
(*
p‚_cmos_£t_wdr_mode
)(
HI_U8
 
u8Mode
);

178 
HI_U32
(*
p‚_cmos_gë_i•_deÁu…
)(
ISP_CMOS_DEFAULT_S
 *
p°Def
);

179 
HI_U32
(*
p‚_cmos_gë_i•_bœck_Àvñ
)(
ISP_CMOS_BLACK_LEVEL_S
 *
p°BœckLevñ
);

180 
HI_U32
(*
p‚_cmos_gë_¢s_ªg_öfo
)(
ISP_SNS_REGS_INFO_S
 *
p°SnsRegsInfo
);

183 
HI_VOID
(*
p‚_cmos_£t_pixñ_dëe˘
)(
HI_BOOL
 
bE«bÀ
);

184 } 
	tISP_SENSOR_EXP_FUNC_S
;

186 
	shiISP_SENSOR_REGISTER_S


188 
ISP_SENSOR_EXP_FUNC_S
 
°SnsExp
;

189 } 
	tISP_SENSOR_REGISTER_S
;

192 #ifde‡
__˝lu•lus


193 #i‡
__˝lu•lus


	@include/hi_comm_sys.h

29 #i‚de‡
__HI_COMM_SYS_H__


30 
	#__HI_COMM_SYS_H__


	)

32 
	~"hi_ty≥.h
"

33 
	~"hi_î∫o.h
"

34 
	~"hi_debug.h
"

36 #ifde‡
__˝lu•lus


37 #i‡
__˝lu•lus


42 
	#HI_TRACE_SYS
(
Àvñ
, 
fmt
...Ë
	`HI_TRACE
÷evñ, 
HI_ID_SYS
,##fmt)

	)

43 
	shiMPP_SYS_CONF_S


48 
HI_U32
 
u32AlignWidth
;

50 } 
	tMPP_SYS_CONF_S
;

52 
	shiSYS_VIRMEM_INFO_S


54 
HI_U32
 
u32PhyAddr
;

55 
HI_BOOL
 
bCached
;

56 } 
	tSYS_VIRMEM_INFO_S
;

59 
	#HI_ERR_SYS_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

60 
	#HI_ERR_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

61 
	#HI_ERR_SYS_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

62 
	#HI_ERR_SYS_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

63 
	#HI_ERR_SYS_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

64 
	#HI_ERR_SYS_BUSY
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

65 
	#HI_ERR_SYS_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

68 #ifde‡
__˝lu•lus


69 #i‡
__˝lu•lus


	@include/hi_comm_vb.h

32 #i‚de‡
__HI_COMM_VB_H__


33 
	#__HI_COMM_VB_H__


	)

35 
	~"hi_ty≥.h
"

36 
	~"hi_î∫o.h
"

37 
	~"hi_debug.h
"

39 #ifde‡
__˝lu•lus


40 #i‡
__˝lu•lus


45 
	#VB_MAX_POOLS
 256

	)

46 
	#VB_MAX_COMM_POOLS
 16

	)

47 
	#VB_MAX_MOD_COMM_POOLS
 16

	)

51 
	#VB_MAX_USER
 22

	)

53 
	ehiVB_UID_E


55 
VB_UID_VIU
 = 0,

56 
VB_UID_VOU
 = 1,

57 
VB_UID_VGS
 = 2,

58 
VB_UID_VENC
 = 3,

59 
VB_UID_VDEC
 = 4,

60 
VB_UID_VDA
 = 5,

61 
VB_UID_H264E
 = 6,

62 
VB_UID_JPEGE
 = 7,

63 
VB_UID_MPEG4E
 = 8,

64 
VB_UID_H264D
 = 9,

65 
VB_UID_JPEGD
 = 10,

66 
VB_UID_MPEG4D
 = 11,

67 
VB_UID_VPSS
 = 12,

68 
VB_UID_GRP
 = 13,

69 
VB_UID_MPI
 = 14,

70 
VB_UID_PCIV
 = 15,

71 
VB_UID_AI
 = 16,

72 
VB_UID_AENC
 = 17,

73 
VB_UID_RC
 = 18,

74 
VB_UID_VFMW
 = 19,

75 
VB_UID_USER
 = 20,

76 
VB_UID_H265E
 = 21,

77 
VB_UID_BUTT


79 } 
	tVB_UID_E
;

81 
	#VB_INVALID_POOLID
 (-1UL)

	)

82 
	#VB_INVALID_HANDLE
 (-1UL)

	)

85 
	#POOL_OWNER_COMMON
 -1

	)

88 
	#POOL_OWNER_PRIVATE
 -2

	)

90 
	ehiPOOL_TYPE_E


92 
POOL_TYPE_COMMON
 = 0,

93 
POOL_TYPE_PRIVATE
 = 1,

94 
POOL_TYPE_MODULE_COMMON
 = 2,

95 
POOL_TYPE_BUTT


96 } 
	tPOOL_TYPE_E
;

98 
HI_U32
 
	tVB_POOL
;

99 
HI_U32
 
	tVB_BLK
;

101 
	#RESERVE_MMZ_NAME
 "wödow"

	)

103 
	shiVB_CONF_S


105 
HI_U32
 
u32MaxPoﬁC¡
;

106 
	shiVB_CPOOL_S


108 
HI_U32
 
u32BlkSize
;

109 
HI_U32
 
u32BlkC¡
;

110 
HI_CHAR
 
acMmzName
[
MAX_MMZ_NAME_LEN
];

111 }
a°CommPoﬁ
[
VB_MAX_COMM_POOLS
];

112 } 
	tVB_CONF_S
;

114 
	shiVB_POOL_STATUS_S


116 
HI_U32
 
bIsCommPoﬁ
;

117 
HI_U32
 
u32BlkC¡
;

118 
HI_U32
 
u32FªeBlkC¡
;

119 }
	tVB_POOL_STATUS_S
;

121 
	#VB_SUPPLEMENT_JPEG_MASK
 0x1

	)

123 
	shiVB_SUPPLEMENT_CONF_S


125 
HI_U32
 
u32SuµÀmítC⁄f
;

126 }
	tVB_SUPPLEMENT_CONF_S
;

129 
	#HI_ERR_VB_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

130 
	#HI_ERR_VB_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

131 
	#HI_ERR_VB_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

132 
	#HI_ERR_VB_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

133 
	#HI_ERR_VB_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

134 
	#HI_ERR_VB_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

135 
	#HI_ERR_VB_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

136 
	#HI_ERR_VB_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

138 
	#HI_ERR_VB_2MPOOLS
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUTT
 + 1)

	)

140 
	#HI_TRACE_VB
(
Àvñ
,
fmt
...Ë
	`HI_TRACE
÷evñ, 
HI_ID_VB
,##fmt)

	)

142 #ifde‡
__˝lu•lus


143 #i‡
__˝lu•lus


	@include/hi_comm_vda.h

23 #i‚de‡
__HI_COMM_VDA_H__


24 
	#__HI_COMM_VDA_H__


	)

26 
	~"hi_ty≥.h
"

27 
	~"hi_debug.h
"

28 
	~"hi_comm_video.h
"

29 
	~"hi_comm⁄.h
"

30 
	~"hi_î∫o.h
"

31 
	~"hi_deföes.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


41 
	shiVDA_OBJ_S


43 
HI_U16
 
u16Le·
;

44 
HI_U16
 
u16T›
;

45 
HI_U16
 
u16Right
;

46 
HI_U16
 
u16BŸtom
;

47 }
	tVDA_OBJ_S
;

50 
	ehiVDA_REF_MODE_E


52 
VDA_REF_MODE_DYNAMIC
 = 0,

53 
VDA_REF_MODE_STATIC
,

54 
VDA_REF_MODE_USER
,

55 
VDA_REF_MODE_BUTT


56 }
	tVDA_REF_MODE_E
;

59 
	ehiVDA_ALG_E


61 
VDA_ALG_BG
 = 0,

62 
VDA_ALG_REF
,

63 
VDA_ALG_BUTT


64 }
	tVDA_ALG_E
;

67 
	ehiVDA_MB_SIZE_E


69 
VDA_MB_8PIXEL
,

70 
VDA_MB_16PIXEL
,

71 
VDA_MB_BUTT


72 }
	tVDA_MB_SIZE_E
;

75 
	ehiVDA_MB_SADBITS_E


77 
VDA_MB_SAD_8BIT
 = 0,

78 
VDA_MB_SAD_16BIT
,

79 
VDA_MB_SAD_BUTT


80 } 
	tVDA_MB_SADBITS_E
;

84 
	shiVDA_OD_RGN_ATTR_S


87 
RECT_S
 
°Re˘
;

97 
HI_U32
 
u32SadTh
;

98 
HI_U32
 
u32AªaTh
;

99 
HI_U32
 
u32OccC¡Th
;

100 
HI_U32
 
u32UnOccC¡Th
;

101 }
	tVDA_OD_RGN_ATTR_S
;

104 
	shiVDA_MD_ATTR_S


107 
VDA_ALG_E
 
íVdaAlg
;

108 
VDA_MB_SIZE_E
 
íMbSize
;

109 
VDA_MB_SADBITS_E
 
íMbSadBôs
;

110 
VDA_REF_MODE_E
 
íRefMode
;

111 
HI_U32
 
u32MdBufNum
;

114 
HI_U32
 
u32VdaI¡vl
;

116 
HI_U32
 
u32BgUpSrcWgt
;

121 
HI_U32
 
u32SadTh
;

122 
HI_U32
 
u32ObjNumMax
;

123 }
	tVDA_MD_ATTR_S
;

126 
	#VDA_OD_RGN_NUM_MAX
 4

	)

129 
	shiVDA_OD_ATTR_S


131 
HI_U32
 
u32RgnNum
;

132 
VDA_OD_RGN_ATTR_S
 
a°OdRgnAâr
[
VDA_OD_RGN_NUM_MAX
];

135 
VDA_ALG_E
 
íVdaAlg
;

136 
VDA_MB_SIZE_E
 
íMbSize
;

137 
VDA_MB_SADBITS_E
 
íMbSadBôs
;

138 
VDA_REF_MODE_E
 
íRefMode
;

141 
HI_U32
 
u32VdaI¡vl
;

142 
HI_U32
 
u32BgUpSrcWgt
;

145 }
	tVDA_OD_ATTR_S
;

149 
	ehiVDA_WORK_MODE_E


151 
VDA_WORK_MODE_MD
 = 0,

152 
VDA_WORK_MODE_OD
,

153 
VDA_WORK_MODE_BUTT


154 }
	tVDA_WORK_MODE_E
;

158 
	uhiVDA_WORK_MODE_ATTR_U


160 
VDA_MD_ATTR_S
 
°MdAâr
;

161 
VDA_OD_ATTR_S
 
°OdAâr
;

162 }
	tVDA_WORK_MODE_ATTR_U
;

166 
	shiVDA_CHN_ATTR_S


168 
VDA_WORK_MODE_E
 
íW‹kMode
;

169 
VDA_WORK_MODE_ATTR_U
 
unAâr
;

170 
HI_U32
 
u32Width
;

171 
HI_U32
 
u32Height
;

172 }
	tVDA_CHN_ATTR_S
;

176 
	shiVDA_MB_SAD_DATA_S


178 
HI_VOID
 *
pAddr
;

179 
HI_U32
 
u32Såide
;

180 
VDA_MB_SADBITS_E
 
íMbSadBôs
;

181 }
	tVDA_MB_SAD_DATA_S
;

184 
	shiVDA_OBJ_DATA_S


186 
HI_U32
 
u32ObjNum
;

187 
VDA_OBJ_S
 *
p°Addr
;

189 
HI_U32
 
u32IndexOfMaxObj
;

190 
HI_U32
 
u32SizeOfMaxObj
;

191 
HI_U32
 
u32SizeOfTŸÆObj
;

192 }
	tVDA_OBJ_DATA_S
;

196 
	shiVDA_MD_DATA_S


198 
HI_BOOL
 
bMbSadVÆid
;

199 
VDA_MB_SAD_DATA_S
 
°MbSadD©a
;

201 
HI_BOOL
 
bObjVÆid
;

202 
VDA_OBJ_DATA_S
 
°ObjD©a
;

204 
HI_BOOL
 
bPñsNumVÆid
;

205 
HI_U32
 
u32AœrmPixC¡
;

206 }
	tVDA_MD_DATA_S
;

210 
	shiVDA_OD_DATA_S


212 
HI_U32
 
u32RgnNum
;

213 
HI_BOOL
 
abRgnAœrm
[
VDA_OD_RGN_NUM_MAX
];

214 }
	tVDA_OD_DATA_S
;

218 
	uhiVDA_DATA_U


220 
VDA_MD_DATA_S
 
°MdD©a
;

221 
VDA_OD_DATA_S
 
°OdD©a
;

222 }
	tVDA_DATA_U
;

226 
	shiVDA_DATA_S


228 
VDA_WORK_MODE_E
 
íW‹kMode
;

229 
VDA_DATA_U
 
unD©a
;

230 
VDA_MB_SIZE_E
 
íMbSize
;

231 
HI_U32
 
u32MbWidth
;

232 
HI_U32
 
u32MbHeight
;

233 
HI_U64
 
u64Pts
;

234 }
	tVDA_DATA_S
;

238 
	shiVDA_CHN_STAT_S


240 
HI_BOOL
 
bSèπRecvPic
;

241 
HI_U32
 
u32Le·Pic
;

242 
HI_U32
 
u32Le·R°
;

243 }
	tVDA_CHN_STAT_S
;

246 
	#HI_ERR_VDA_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

248 
	#HI_ERR_VDA_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

250 
	#HI_ERR_VDA_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

252 
	#HI_ERR_VDA_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

254 
	#HI_ERR_VDA_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

256 
	#HI_ERR_VDA_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

258 
	#HI_ERR_VDA_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

260 
	#HI_ERR_VDA_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

262 
	#HI_ERR_VDA_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

264 
	#HI_ERR_VDA_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

266 
	#HI_ERR_VDA_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

268 
	#HI_ERR_VDA_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

270 
	#HI_ERR_VDA_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

272 
	#HI_ERR_VDA_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

274 
	#HI_ERR_VDA_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

279 
	#HI_ERR_VDA_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

281 #ifde‡
__˝lu•lus


282 #i‡
__˝lu•lus


	@include/hi_comm_vdec.h

18 #i‚de‡ 
__HI_COMM_VDEC_H__


19 
	#__HI_COMM_VDEC_H__


	)

20 
	~"hi_ty≥.h
"

21 
	~"hi_comm⁄.h
"

22 
	~"hi_î∫o.h
"

23 
	~"hi_comm_video.h
"

24 
	~"hi_deföes.h
"

26 #ifde‡
__˝lu•lus


27 #i‡
__˝lu•lus


34 
	#HI_IO_BLOCK
 
HI_TRUE


	)

35 
	#HI_IO_NOBLOCK
 
HI_FALSE


	)

38 
	shiVDEC_CHN_LUM_S


40 
HI_U64
 
u64LumPixSum
;

41 
HI_U32
 
u32LumPixAvîage
;

42 
HI_U64
 
u64Pts
;

43 } 
	tVDEC_CHN_LUM_S
;

46 
	ehiVIDEO_MODE_E


48 
VIDEO_MODE_STREAM
 = 0,

49 
VIDEO_MODE_FRAME
 ,

50 
VIDEO_MODE_BUTT


51 }
	tVIDEO_MODE_E
;

54 
	shiVDEC_ATTR_JPEG_S


56 
VIDEO_MODE_E
 
íMode
;

57 }
	tVDEC_ATTR_JPEG_S
,*
	tPTR_VDEC_ATTR_JPEG_S
;

60 
	shiVDEC_ATTR_VIDEO_S


62 
HI_U32
 
u32RefFømeNum
;

63 
VIDEO_MODE_E
 
íMode
;

64 
HI_S32
 
s32Suµ‹tBFøme
;

65 }
	tVDEC_ATTR_VIDEO_S
,*
	tPTR_VDEC_ATTR_VIDEO_S
;

68 
	shiVDEC_CHN_ATTR_S


70 
PAYLOAD_TYPE_E
 
íTy≥
;

71 
HI_U32
 
u32BufSize
 ;

72 
HI_U32
 
u32Pri‹ôy
 ;

73 
HI_U32
 
u32PicWidth
 ;

74 
HI_U32
 
u32PicHeight
 ;

77 
VDEC_ATTR_JPEG_S
 
°VdecJ≥gAâr
;

78 
VDEC_ATTR_VIDEO_S
 
°VdecVideoAâr
;

80 }
	tVDEC_CHN_ATTR_S
;

83 
	shiVDEC_STREAM_S


85 
HI_U8
* 
pu8Addr
;

86 
HI_U32
 
u32Lí
;

87 
HI_U64
 
u64PTS
;

88 
HI_BOOL
 
bEndOfFøme
;

89 
HI_BOOL
 
bEndOfSåóm
;

90 }
	tVDEC_STREAM_S
;

92 
	shiVDEC_USERDATA_S
{

93 
HI_U8
* 
pu8Addr
;

94 
HI_U32
 
u32PhyAddr
;

95 
HI_U32
 
u32Lí
;

96 
HI_BOOL
 
bVÆid
;

97 }
	tVDEC_USERDATA_S
;

100 
	shi_VDEC_DECODE_ERROR_S


102 
HI_S32
 
s32F‹m©Eº
;

103 
HI_S32
 
s32PicSizeEºSë
;

104 
HI_S32
 
s32SåómUn•π
;

105 
HI_S32
 
s32PackEº
;

106 
HI_S32
 
s32Pπ˛NumEºSë
;

107 
HI_S32
 
s32RefEºSë
;

108 
HI_S32
 
s32PicBufSizeEºSë
;

109 }
	tVDEC_DECODE_ERROR_S
;

112 
	shiVDEC_CHN_STAT_S


114 
PAYLOAD_TYPE_E
 
íTy≥
;

115 
HI_U32
 
u32Le·SåómByãs
;

116 
HI_U32
 
u32Le·SåómFømes
;

117 
HI_U32
 
u32Le·Pics
;

118 
HI_BOOL
 
bSèπRecvSåóm
;

119 
HI_U32
 
u32RecvSåómFømes
;

120 
HI_U32
 
u32DecodeSåómFømes
;

121 
VDEC_DECODE_ERROR_S
 
°VdecDecEº
;

122 }
	tVDEC_CHN_STAT_S
;

128 
	shiVDEC_CHN_PARAM_S


130 
HI_S32
 
s32Ch™EºThr
;

131 
HI_S32
 
s32Ch™SåmOFThr
;

132 
HI_S32
 
s32DecMode
;

133 
HI_S32
 
s32DecOrdîOuçut
;

134 
VIDEO_FORMAT_E
 
íVideoF‹m©
;

135 
COMPRESS_MODE_E
 
íCom¥essMode
;

136 }
	tVDEC_CHN_PARAM_S
;

138 
	shiVDEC_PRTCL_PARAM_S


140 
HI_S32
 
s32MaxSli˚Num
;

141 
HI_S32
 
s32MaxSpsNum
;

142 
HI_S32
 
s32MaxPpsNum
;

143 
HI_S32
 
s32Di•œyFømeNum
;

144 }
	tVDEC_PRTCL_PARAM_S
;

150 
	shiJPEGD_STREAM_PACKET_S


152 
HI_U32
 
PhyAddr
[2];

153 
HI_VOID
* 
VúAddr
[2];

154 
HI_U32
 
Lígth
[2];

155 
HI_U64
 
Pts
;

156 
HI_U32
 
Index
;

158 } 
	tUSR_STREAM_PACKET_S
;

161 
	shiUSR_MEM_DESC_S


163 
HI_U32
 
u32PhyAddr
;

164 
HI_U32
 
u32Lígth
;

165 } 
	tUSR_MEM_DESC_S
;

167 
	ehiJPEGD_DECODE_ERROR_E


169 
JPEGD_ERR_NONE
 = 0,

170 
JPEGD_ERR_STREAM
,

171 
JPEGD_ERR_PIC_SIZE
,

172 
JPEGD_ERR_PICBUF_SIZE
,

173 
JPEGD_ERR_FORMAT
,

174 
VIDEO_ERR_BULL


175 }
	tJPEGD_DECODE_ERROR_E
;

178 
	ehiVDEC_JPG_COLOR_FMT_E


180 
JPG_COLOR_FMT_YCBCR400
,

181 
JPG_COLOR_FMT_YCBCR420
 = 3,

182 
JPG_COLOR_FMT_YCBCR422BHP
,

183 
JPG_COLOR_FMT_YCBCR422BVP
,

184 
JPG_COLOR_FMT_YCBCR444
,

185 
JPG_COLOR_FMT_BUTT


186 } 
	tVDEC_JPG_COLOR_FMT_E
;

190 
VDEC_JPG_COLOR_FMT_E
 
íFmt
;

192 
HI_S32
 
s32IsFømeVÆid
;

193 
HI_U64
 
u64LuPixSum
;

194 
HI_U64
 
Pts
;

195 
HI_S32
 
s32IsSemiPœ«r
;

197 
HI_S32
 
s32YWidth
;

198 
HI_S32
 
s32YHeight
;

200 
HI_S32
 
s32LumaPhyAddr
;

201 
HI_S32
 
s32LumaSåide
;

203 
HI_S32
 
s32CbPhyAddr
;

204 
HI_S32
 
s32CrPhyAddr
;

205 
HI_S32
 
s32ChromSåide
;

206 
HI_S32
 
s32ChromCrSåide
;

207 } 
	tVDEC_FRAME_DESC_S
;

212 
	#HI_ERR_VDEC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

214 
	#HI_ERR_VDEC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

216 
	#HI_ERR_VDEC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

218 
	#HI_ERR_VDEC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

220 
	#HI_ERR_VDEC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

222 
	#HI_ERR_VDEC_NOT_SURPPORT
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

224 
	#HI_ERR_VDEC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

226 
	#HI_ERR_VDEC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

228 
	#HI_ERR_VDEC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

230 
	#HI_ERR_VDEC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

232 
	#HI_ERR_VDEC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

234 
	#HI_ERR_VDEC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

236 
	#HI_ERR_VDEC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

238 
	#HI_ERR_VDEC_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

241 
	#HI_ERR_VDEC_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

249 #ifde‡
__˝lu•lus


250 #i‡
__˝lu•lus


	@include/hi_comm_venc.h

15 #i‚de‡
__HI_COMM_VENC_H__


16 
	#__HI_COMM_VENC_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


24 
	~"hi_ty≥.h
"

25 
	~"hi_comm⁄.h
"

26 
	~"hi_î∫o.h
"

27 
	~"hi_comm_video.h
"

28 
	~"hi_comm_rc.h
"

33 
	#HI_ERR_VENC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

35 
	#HI_ERR_VENC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

37 
	#HI_ERR_VENC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

39 
	#HI_ERR_VENC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

41 
	#HI_ERR_VENC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

43 
	#HI_ERR_VENC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

45 
	#HI_ERR_VENC_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

47 
	#HI_ERR_VENC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

49 
	#HI_ERR_VENC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

51 
	#HI_ERR_VENC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

53 
	#HI_ERR_VENC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

55 
	#HI_ERR_VENC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

57 
	#HI_ERR_VENC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

59 
	#HI_ERR_VENC_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

63 
	ehiH264E_NALU_TYPE_E


65 
H264E_NALU_PSLICE
 = 1,

66 
H264E_NALU_ISLICE
 = 5,

67 
H264E_NALU_SEI
 = 6,

68 
H264E_NALU_SPS
 = 7,

69 
H264E_NALU_PPS
 = 8,

70 
H264E_NALU_IPSLICE
 = 9,

71 
H264E_NALU_BUTT


72 } 
	tH264E_NALU_TYPE_E
;

75 
	ehiH265E_NALU_TYPE_E


77 
H265E_NALU_PSLICE
 = 1,

78 
H265E_NALU_ISLICE
 = 19,

79 
H265E_NALU_VPS
 = 32,

80 
H265E_NALU_SPS
 = 33,

81 
H265E_NALU_PPS
 = 34,

82 
H265E_NALU_SEI
 = 39,

84 
H265E_NALU_BUTT


85 } 
	tH265E_NALU_TYPE_E
;

88 
	ehiH264E_REFSLICE_TYPE_E


90 
H264E_REFSLICE_FOR_1X
 = 1,

91 
H264E_REFSLICE_FOR_2X
 = 2,

92 
H264E_REFSLICE_FOR_4X
 = 5,

93 
H264E_REFSLICE_FOR_BUTT


94 } 
	tH264E_REFSLICE_TYPE_E
;

97 
	ehiJPEGE_PACK_TYPE_E


99 
JPEGE_PACK_ECS
 = 5,

100 
JPEGE_PACK_APP
 = 6,

101 
JPEGE_PACK_VDO
 = 7,

102 
JPEGE_PACK_PIC
 = 8,

103 
JPEGE_PACK_BUTT


104 } 
	tJPEGE_PACK_TYPE_E
;

107 
	ehiMPEG4E_PACK_TYPE_E


109 
MPEG4E_PACK_VOP_P
 = 1,

110 
MPEG4E_PACK_VOP_I
 = 5,

111 
MPEG4E_PACK_VOS
 = 6,

112 
MPEG4E_PACK_VO
 = 7,

113 
MPEG4E_PACK_VOL
 = 8,

114 
MPEG4E_PACK_GVOP
 = 9

115 } 
	tMPEG4E_PACK_TYPE_E
;

118 
	uhiVENC_DATA_TYPE_U


120 
H264E_NALU_TYPE_E
 
íH264ETy≥
;

121 
JPEGE_PACK_TYPE_E
 
íJPEGETy≥
;

122 
MPEG4E_PACK_TYPE_E
 
íMPEG4ETy≥
;

123 
H265E_NALU_TYPE_E
 
íH265ETy≥
;

124 }
	tVENC_DATA_TYPE_U
;

126 
	shiVENC_PACK_INFO_S


128 
VENC_DATA_TYPE_U
 
u32PackTy≥
;

129 
HI_U32
 
u32PackOff£t
;

130 
HI_U32
 
u32PackLígth
;

131 }
	tVENC_PACK_INFO_S
;

134 
	shiVENC_PACK_S


136 
HI_U32
 
u32PhyAddr
;

137 
HI_U8
 *
pu8Addr
;

138 
HI_U32
 
u32Lí
;

140 
HI_U64
 
u64PTS
;

141 
HI_BOOL
 
bFømeEnd
;

143 
VENC_DATA_TYPE_U
 
D©aTy≥
;

144 
HI_U32
 
u32Off£t
;

146 
HI_U32
 
u32D©aNum
;

147 
VENC_PACK_INFO_S
 
°PackInfo
[8];

148 }
	tVENC_PACK_S
;

150 
	ehiH264E_REF_TYPE_E


152 
BASE_IDRSLICE
 = 0,

153 
BASE_PSLICE_REFBYBASE
,

154 
BASE_PSLICE_REFBYENHANCE
,

155 
ENHANCE_PSLICE_REFBYENHANCE
,

156 
ENHANCE_PSLICE_NOTFORREF
,

157 
ENHANCE_PSLICE_BUTT


158 } 
	tH264E_REF_TYPE_E
;

160 
hiH264E_REF_TYPE_E
 
	tH265E_REF_TYPE_E
;

162 
	shiVENC_STREAM_INFO_H264_S


164 
HI_U32
 
u32PicByãsNum
;

165 
HI_U32
 
u32PSkùMbNum
;

166 
HI_U32
 
u32IpcmMbNum
;

167 
HI_U32
 
u32I¡î16x8MbNum
;

168 
HI_U32
 
u32I¡î16x16MbNum
;

169 
HI_U32
 
u32I¡î8x16MbNum
;

170 
HI_U32
 
u32I¡î8x8MbNum
;

171 
HI_U32
 
u32I¡ø16MbNum
;

172 
HI_U32
 
u32I¡ø8MbNum
;

173 
HI_U32
 
u32I¡ø4MbNum
;

175 
H264E_REFSLICE_TYPE_E
 
íRefSli˚Ty≥
;

176 
H264E_REF_TYPE_E
 
íRefTy≥
;

177 
HI_U32
 
u32Upd©eAârC¡
;

178 
HI_U32
 
u32SèπQp
;

179 }
	tVENC_STREAM_INFO_H264_S
;

181 
	shiVENC_STREAM_INFO_H265_S


183 
HI_U32
 
u32PicByãsNum
;

184 
HI_U32
 
u32I¡î64x64CuNum
;

185 
HI_U32
 
u32I¡î32x32CuNum
;

186 
HI_U32
 
u32I¡î16x16CuNum
;

187 
HI_U32
 
u32I¡î8x8CuNum
;

188 
HI_U32
 
u32I¡ø32x32CuNum
;

189 
HI_U32
 
u32I¡ø16x16CuNum
;

190 
HI_U32
 
u32I¡ø8x8CuNum
;

191 
HI_U32
 
u32I¡ø4x4CuNum
;

192 
H265E_REF_TYPE_E
 
íRefTy≥
;

193 
HI_U32
 
u32Upd©eAârC¡
;

194 
HI_U32
 
u32SèπQp
;

195 }
	tVENC_STREAM_INFO_H265_S
;

197 
	shiVENC_STREAM_INFO_JPEG_S


199 
HI_U32
 
u32PicByãsNum
;

200 
HI_U32
 
u32Upd©eAârC¡
;

201 
HI_U32
 
u32QÁ˘‹
;

202 }
	tVENC_STREAM_INFO_JPEG_S
;

204 
	shiVENC_STREAM_INFO_MPEG4_S


206 
HI_U32
 
u32PicByãsNum
;

207 
HI_U32
 
u32Upd©eAârC¡
;

208 }
	tVENC_STREAM_INFO_MPEG4_S
;

210 
	shiVENC_STREAM_S


212 
VENC_PACK_S
 *
p°Pack
;

213 
HI_U32
 
u32PackCou¡
;

214 
HI_U32
 
u32Seq
;

218 
VENC_STREAM_INFO_H264_S
 
°H264Info
;

219 
VENC_STREAM_INFO_JPEG_S
 
°J≥gInfo
;

220 
VENC_STREAM_INFO_MPEG4_S
 
°M≥g4Info
;

221 
VENC_STREAM_INFO_H265_S
 
°H265Info
;

223 }
	tVENC_STREAM_S
;

225 
	shiVENC_ATTR_H264_S


227 
HI_U32
 
u32MaxPicWidth
;

228 
HI_U32
 
u32MaxPicHeight
;

230 
HI_U32
 
u32BufSize
;

231 
HI_U32
 
u32Profûe
;

232 
HI_BOOL
 
bByFøme
;

235 
HI_U32
 
u32PicWidth
;

236 
HI_U32
 
u32PicHeight
;

238 
HI_U32
 
u32BFømeNum
;

239 
HI_U32
 
u32RefNum
;

241 }
	tVENC_ATTR_H264_S
;

243 
	shiVENC_ATTR_H265_S


245 
HI_U32
 
u32MaxPicWidth
;

246 
HI_U32
 
u32MaxPicHeight
;

248 
HI_U32
 
u32BufSize
;

249 
HI_U32
 
u32Profûe
;

250 
HI_BOOL
 
bByFøme
;

253 
HI_U32
 
u32PicWidth
;

254 
HI_U32
 
u32PicHeight
;

256 
HI_U32
 
u32BFømeNum
;

257 
HI_U32
 
u32RefNum
;

258 }
	tVENC_ATTR_H265_S
;

260 
	shiVENC_ATTR_MJPEG_S


262 
HI_U32
 
u32MaxPicWidth
;

263 
HI_U32
 
u32MaxPicHeight
;

264 
HI_U32
 
u32BufSize
;

265 
HI_BOOL
 
bByFøme
;

268 
HI_U32
 
u32PicWidth
;

269 
HI_U32
 
u32PicHeight
;

271 }
	tVENC_ATTR_MJPEG_S
;

273 
	shiVENC_ATTR_JPEG_S


275 
HI_U32
 
u32MaxPicWidth
;

276 
HI_U32
 
u32MaxPicHeight
;

277 
HI_U32
 
u32BufSize
;

278 
HI_BOOL
 
bByFøme
;

281 
HI_U32
 
u32PicWidth
;

282 
HI_U32
 
u32PicHeight
;

283 
HI_BOOL
 
bSuµ‹tDCF
;

285 }
	tVENC_ATTR_JPEG_S
;

288 
	shiVENC_ATTR_MPEG4_S


290 
HI_U32
 
u32MaxPicWidth
;

291 
HI_U32
 
u32MaxPicHeight
;

293 
HI_U32
 
u32BufSize
;

294 
HI_BOOL
 
bByFøme
;

297 
HI_U32
 
u32PicWidth
;

298 
HI_U32
 
u32PicHeight
;

299 }
	tVENC_ATTR_MPEG4_S
;

301 
	shiVENC_ATTR_S


303 
PAYLOAD_TYPE_E
 
íTy≥
;

306 
VENC_ATTR_H264_S
 
°AârH264e
;

307 
VENC_ATTR_MJPEG_S
 
°AârMj≥g
;

308 
VENC_ATTR_JPEG_S
 
°AârJ≥g
;

309 
VENC_ATTR_MPEG4_S
 
°AârM≥g4
;

310 
VENC_ATTR_H265_S
 
°AârH265e
;

312 }
	tVENC_ATTR_S
;

314 
	shiVENC_CHN_ATTR_S


316 
VENC_ATTR_S
 
°VeAâr
;

317 
VENC_RC_ATTR_S
 
°RcAâr
;

318 }
	tVENC_CHN_ATTR_S
;

320 
	shiVENC_CHN_STAT_S


322 
HI_U32
 
u32Le·Pics
;

323 
HI_U32
 
u32Le·SåómByãs
;

324 
HI_U32
 
u32Le·SåómFømes
;

325 
HI_U32
 
u32CurPacks
;

326 
HI_U32
 
u32Le·RecvPics
;

327 
HI_U32
 
u32Le·EncPics
;

328 }
	tVENC_CHN_STAT_S
;

332 
	shiVENC_PARAM_H264_SLICE_SPLIT_S


334 
HI_BOOL
 
bS∂ôE«bÀ
;

335 
HI_U32
 
u32S∂ôMode
;

336 
HI_U32
 
u32Sli˚Size
;

338 } 
	tVENC_PARAM_H264_SLICE_SPLIT_S
;

340 
	shiVENC_PARAM_H264_INTER_PRED_S


343 
HI_U32
 
u32HWSize
;

345 
HI_U32
 
u32VWSize
;

349 
HI_BOOL
 
bI¡î16x16PªdEn
;

350 
HI_BOOL
 
bI¡î16x8PªdEn
;

351 
HI_BOOL
 
bI¡î8x16PªdEn
;

352 
HI_BOOL
 
bI¡î8x8PªdEn
;

353 
HI_BOOL
 
bExãdgeEn
;

354 } 
	tVENC_PARAM_H264_INTER_PRED_S
;

356 
	shiVENC_PARAM_H264_INTRA_PRED_S


359 
HI_BOOL
 
bI¡ø16x16PªdEn
;

360 
HI_BOOL
 
bI¡øNxNPªdEn
;

362 
HI_U32
 
c⁄°øöed_öåa_¥ed_Êag
;

363 
HI_BOOL
 
bIpcmEn
;

364 }
	tVENC_PARAM_H264_INTRA_PRED_S
;

366 
	shiVENC_PARAM_H264_TRANS_S


368 
HI_U32
 
u32I¡øTønsMode
;

369 
HI_U32
 
u32I¡îTønsMode
;

371 
HI_BOOL
 
bSˇlögLi°VÆid
;

373 
HI_U8
 
I¡îSˇlögLi°8X8
[64];

374 
HI_U8
 
I¡øSˇlögLi°8X8
[64];

376 
HI_S32
 
chroma_qp_ödex_off£t
;

377 }
	tVENC_PARAM_H264_TRANS_S
;

379 
	shiVENC_PARAM_H264_ENTROPY_S


381 
HI_U32
 
u32E¡r›yEncModeI
;

382 
HI_U32
 
u32E¡r›yEncModeP
;

383 
HI_U32
 
ˇbac_°uff_í
;

384 
HI_U32
 
Cabac_öô_idc
;

385 }
	tVENC_PARAM_H264_ENTROPY_S
;

387 
	shiVENC_PARAM_H264_POC_S


389 
HI_U32
 
pic_‹dî_˙t_ty≥
;

391 }
	tVENC_PARAM_H264_POC_S
;

393 
	shiVENC_PARAM_H264_DBLK_S


395 
HI_U32
 
dißbÀ_deblockög_fûãr_idc
;

396 
HI_S32
 
¶i˚_Æpha_c0_off£t_div2
;

397 
HI_S32
 
¶i˚_bëa_off£t_div2
;

398 }
	tVENC_PARAM_H264_DBLK_S
;

402 
	shiVENC_PARAM_H264_VUI_TIME_INFO_S


404 
HI_U8
 
timög_öfo_¥e£¡_Êag
;

405 
HI_U8
 
fixed_‰ame_øã_Êag
;

406 
HI_U32
 
num_unôs_ö_tick
;

407 
HI_U32
 
time_sˇÀ
;

409 }
	tVENC_PARAM_VUI_H264_TIME_INFO_S
;

411 
	shiVENC_PARAM_VUI_ASPECT_RATIO_S


413 
HI_U8
 
a•e˘_øtio_öfo_¥e£¡_Êag
;

414 
HI_U8
 
a•e˘_øtio_idc
;

415 
HI_U8
 
ovîsˇn_öfo_¥e£¡_Êag
;

416 
HI_U8
 
ovîsˇn_≠¥›rüã_Êag
;

417 
HI_U16
 
ßr_width
;

418 
HI_U16
 
ßr_height
 ;

419 }
	tVENC_PARAM_VUI_ASPECT_RATIO_S
;

422 
	shiVENC_PARAM_VUI_VIDEO_SIGNAL_S


424 
HI_U8
 
video_sig«l_ty≥_¥e£¡_Êag
 ;

425 
HI_U8
 
video_f‹m©
 ;

426 
HI_U8
 
video_fuŒ_ønge_Êag
;

427 
HI_U8
 
cﬁour_des¸ùti⁄_¥e£¡_Êag
 ;

428 
HI_U8
 
cﬁour_¥im¨õs
 ;

429 
HI_U8
 
å™s„r_ch¨a˘îi°ics
;

430 
HI_U8
 
m©rix_c€fficõ¡s
;

431 }
	tVENC_PARAM_VUI_VIDEO_SIGNAL_S
;

435 
	shiVENC_PARAM_H264_VUI_S


437 
VENC_PARAM_VUI_ASPECT_RATIO_S
 
°VuiA•e˘R©io
;

438 
VENC_PARAM_VUI_H264_TIME_INFO_S
 
°VuiTimeInfo
;

439 
VENC_PARAM_VUI_VIDEO_SIGNAL_S
 
°VuiVideoSig«l
;

440 }
	tVENC_PARAM_H264_VUI_S
;

443 
	shiVENC_PARAM_JPEG_S


445 
HI_U32
 
u32QÁ˘‹
;

447 
HI_U8
 
u8YQt
[64];

448 
HI_U8
 
u8CbQt
[64];

449 
HI_U8
 
u8CrQt
[64];

451 
HI_U32
 
u32MCUPîECS
;

452 } 
	tVENC_PARAM_JPEG_S
;

454 
	shiVENC_PARAM_MJPEG_S


456 
HI_U8
 
u8YQt
[64];

457 
HI_U8
 
u8CbQt
[64];

458 
HI_U8
 
u8CrQt
[64];

460 
HI_U32
 
u32MCUPîECS
;

461 } 
	tVENC_PARAM_MJPEG_S
;

466 
	shiVENC_ROI_CFG_S


468 
HI_U32
 
u32Index
;

469 
HI_BOOL
 
bE«bÀ
;

470 
HI_BOOL
 
bAbsQp
;

471 
HI_S32
 
s32Qp
;

472 
RECT_S
 
°Re˘
;

473 }
	tVENC_ROI_CFG_S
;

476 
	shiVENC_ROIBG_FRAME_RATE_S


478 
HI_S32
 
s32SrcFrmR©e
;

479 
HI_S32
 
s32D°FrmR©e
;

480 }
	tVENC_ROIBG_FRAME_RATE_S
;

483 
	shiVENC_COLOR2GREY_S


485 
HI_BOOL
 
bCﬁ‹2Gªy
;

486 }
	tVENC_COLOR2GREY_S
;

488 
	shiVENC_CROP_CFG_S


490 
HI_BOOL
 
bE«bÀ
;

491 
RECT_S
 
°Re˘
;

492 }
	tVENC_CROP_CFG_S
;

495 
	shiVENC_FRAME_RATE_S


497 
HI_S32
 
s32SrcFrmR©e
;

498 
HI_S32
 
s32D°FrmR©e
;

499 } 
	tVENC_FRAME_RATE_S
;

501 
	shiVENC_PARAM_REF_S


503 
HI_U32
 
u32Ba£
;

504 
HI_U32
 
u32Enh™˚
;

505 
HI_BOOL
 
bE«bÀPªd
;

506 } 
	tVENC_PARAM_REF_S
;

509 
	ehiH264E_IDR_PIC_ID_MODE_E


511 
H264E_IDR_PIC_ID_MODE_AUTO
 = 0,

512 
H264E_IDR_PIC_ID_MODE_USR
,

513 
H264E_IDR_PIC_ID_MODE_BUTT
,

514 }
	tH264E_IDR_PIC_ID_MODE_E
;

516 
	shiVENC_H264_IDRPICID_CFG_S


518 
H264E_IDR_PIC_ID_MODE_E
 
íH264eIdrPicIdMode
;

519 
HI_U32
 
u32H264eIdrPicId
;

520 } 
	tVENC_H264_IDRPICID_CFG_S
;

523 
	ehiVENC_JPEG_SNAP_MODE_E


525 
JPEG_SNAP_ALL
 = 0,

526 
JPEG_SNAP_FLASH
 = 1,

527 
JPEG_SNAP_BUTT
,

529 }
	tVENC_JPEG_SNAP_MODE_E
;

531 
	shiVENC_RECV_PIC_PARAM_S


533 
HI_S32
 
s32RecvPicNum
;

534 } 
	tVENC_RECV_PIC_PARAM_S
;

536 
	shiVENC_STREAM_BUF_INFO_S


538 
HI_U32
 
u32PhyAddr
;

539 
HI_VOID
 *
pU£rAddr
;

540 
HI_U32
 
u32BufSize
;

541 } 
	tVENC_STREAM_BUF_INFO_S
;

544 
	shiVENC_PARAM_H265_SLICE_SPLIT_S


546 
HI_BOOL
 
bS∂ôE«bÀ
;

547 
HI_U32
 
u32S∂ôMode
;

548 
HI_U32
 
u32Sli˚Size
;

550 
HI_U32
 
lo›_fûãr_a¸oss_¶i˚s_íabÀd_Êag
;

551 } 
	tVENC_PARAM_H265_SLICE_SPLIT_S
;

553 
	shiVENC_PARAM_H265_INTER_PRED_S


556 
HI_U32
 
u32HWSize
;

558 
HI_U32
 
u32VWSize
;

562 
HI_BOOL
 
bI¡î16x16PªdEn
;

563 
HI_BOOL
 
bI¡î16x8PªdEn
;

564 
HI_BOOL
 
bI¡î8x16PªdEn
;

565 
HI_BOOL
 
bI¡î8x8PªdEn
;

566 
HI_BOOL
 
bExãdgeEn
;

567 } 
	tVENC_PARAM_H265_INTER_PRED_S
;

569 
	shiVENC_PARAM_H265_INTRA_PRED_S


572 
HI_BOOL
 
bI¡ø16x16PªdEn
;

573 
HI_BOOL
 
bI¡øNxNPªdEn
;

575 
HI_U32
 
c⁄°øöed_öåa_¥ed_Êag
;

576 
HI_U32
 
pcm_íabÀd_Êag
;

577 }
	tVENC_PARAM_H265_INTRA_PRED_S
;

579 
	shiVENC_PARAM_H265_PU_S


581 
HI_BOOL
 
bPu32x32En
;

582 
HI_BOOL
 
bPu16x16En
;

583 
HI_BOOL
 
bPu8x8En
;

584 
HI_BOOL
 
bPu4x4En
;

587 
HI_U32
 
c⁄°øöed_öåa_¥ed_Êag
;

588 
HI_U32
 
°r⁄g_öåa_smoŸhög_íabÀd_Êag
;

589 
HI_U32
 
pcm_íabÀd_Êag
;

590 
HI_U32
 
pcm_lo›_fûãr_dißbÀd_Êag
;

593 
HI_U32
 
u32MaxNumMîgeC™d
;

595 }
	tVENC_PARAM_H265_PU_S
;

598 
	shiVENC_PARAM_H265_TRANS_S


600 
HI_U32
 
å™squ™t_by∑ss_íabÀd_Êag
;

601 
HI_U32
 
å™sf‹m_skù_íabÀd_Êag
;

602 
HI_S32
 
cb_qp_off£t
;

603 
HI_S32
 
¸_qp_off£t
;

604 } 
	tVENC_PARAM_H265_TRANS_S
;

606 
	shiVENC_PARAM_H265_ENTROPY_S


608 
HI_U32
 
ˇbac_öô_Êag
;

609 }
	tVENC_PARAM_H265_ENTROPY_S
;

611 
	shiVENC_PARAM_H265_DBLK_S


613 
HI_U32
 
¶i˚_deblockög_fûãr_dißbÀd_Êag
;

614 
HI_S32
 
¶i˚_bëa_off£t_div2
;

615 
HI_S32
 
¶i˚_tc_off£t_div2
;

616 }
	tVENC_PARAM_H265_DBLK_S
;

618 
	shiVENC_PARAM_H265_SAO_S


620 
HI_U32
 
¶i˚_ßo_luma_Êag
;

621 
HI_U32
 
¶i˚_ßo_chroma_Êag
;

622 }
	tVENC_PARAM_H265_SAO_S
;

625 
	shiVENC_PARAM_H265_TIMING_S


627 
HI_S32
 
timög_öfo_¥e£¡_Êag
;

628 
HI_S32
 
num_unôs_ö_tick
;

629 
HI_S32
 
time_sˇÀ
;

630 
HI_U32
 
num_ticks_poc_diff_⁄e
;

631 }
	tVENC_PARAM_H265_TIMING_S
;

633 
	shiVENC_PARAM_INTRA_REFRESH_S


635 
HI_BOOL
 
bRe‰eshE«bÀ
;

636 
HI_BOOL
 
bISli˚E«bÀ
;

637 
HI_U32
 
u32Re‰eshLöeNum
;

638 
HI_U32
 
u32ReqIQp
;

639 }
	tVENC_PARAM_INTRA_REFRESH_S
;

643 #ifde‡
__˝lu•lus


644 #i‡
__˝lu•lus


	@include/hi_comm_vgs.h

15 #i‚de‡
__HI_COMM_VGS_H__


16 
	#__HI_COMM_VGS_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


24 
	~"hi_ty≥.h
"

25 
	~"hi_comm⁄.h
"

26 
	~"hi_î∫o.h
"

27 
	~"hi_comm_video.h
"

30 
	#HI_ERR_VGS_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

31 
	#HI_ERR_VGS_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

32 
	#HI_ERR_VGS_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

33 
	#HI_ERR_VGS_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

34 
	#HI_ERR_VGS_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

35 
	#HI_ERR_VGS_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

36 
	#HI_ERR_VGS_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

37 
	#HI_ERR_VGS_NOT_PERMITTED
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

39 
HI_S32
 
	tVGS_HANDLE
;

41 
	shiVGS_TASK_ATTR_S


43 
VIDEO_FRAME_INFO_S
 
°ImgIn
;

44 
VIDEO_FRAME_INFO_S
 
°ImgOut
;

45 
HI_U32
 
au32¥iv©eD©a
[4];

46 
HI_U32
 
ª£rved
;

47 } 
	tVGS_TASK_ATTR_S
;

49 
	shiVGS_DRAW_LINE_S


51 
POINT_S
 
°SèπPoöt
;

52 
POINT_S
 
°EndPoöt
;

54 
HI_U32
 
u32Thick
;

55 
HI_U32
 
u32Cﬁ‹
;

56 } 
	tVGS_DRAW_LINE_S
;

58 
	ehiVGS_COVER_TYPE_E


60 
COVER_RECT
 = 0,

61 
COVER_QUAD_RANGLE
,

62 
COVER_BUTT


63 } 
	tVGS_COVER_TYPE_E
;

65 
	shiVGS_QUADRANGLE_COVER_S


67 
HI_BOOL
 
bSﬁid
;

68 
HI_U32
 
u32Thick
;

69 
POINT_S
 
°Poöt
[4];

70 } 
	tVGS_QUADRANGLE_COVER_S
;

72 
	shiVGS_ADD_COVER_S


74 
VGS_COVER_TYPE_E
 
íCovîTy≥
;

77 
RECT_S
 
°D°Re˘
;

78 
VGS_QUADRANGLE_COVER_S
 
°QuadR™gÀ
;

81 
HI_U32
 
u32Cﬁ‹
;

82 } 
	tVGS_ADD_COVER_S
;

84 
	shiVGS_ADD_OSD_S


86 
RECT_S
 
°Re˘
;

87 
HI_U32
 
u32BgCﬁ‹
;

88 
PIXEL_FORMAT_E
 
íPixñFmt
;

89 
HI_U32
 
u32PhyAddr
;

90 
HI_U32
 
u32Såide
;

91 
HI_U32
 
u32BgAÕha
;

92 
HI_U32
 
u32FgAÕha
;

93 } 
	tVGS_ADD_OSD_S
;

96 #ifde‡
__˝lu•lus


97 #i‡
__˝lu•lus


	@include/hi_comm_vi.h

25 #i‚de‡
__HI_COMM_VI_H__


26 
	#__HI_COMM_VI_H__


	)

28 
	~"hi_comm⁄.h
"

29 
	~"hi_î∫o.h
"

30 
	~"hi_comm_video.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


40 
	#VI_INVALID_FRMRATE
 (-1UL)

	)

41 
	#VIU_MAX_USER_FRAME_DEPTH
 8

	)

43 
	ehiEN_VIU_ERR_CODE_E


45 
ERR_VI_FAILED_NOTENABLE
 = 64,

46 
ERR_VI_FAILED_NOTDISABLE
,

47 
ERR_VI_FAILED_CHNOTDISABLE
,

48 
ERR_VI_CFG_TIMEOUT
,

49 
ERR_VI_NORM_UNMATCH
,

50 
ERR_VI_INVALID_WAYID
,

51 
ERR_VI_INVALID_PHYCHNID
,

52 
ERR_VI_FAILED_NOTBIND
,

53 
ERR_VI_FAILED_BINDED
,

54 } 
	tEN_VIU_ERR_CODE_E
;

56 
	#HI_ERR_VI_INVALID_PARA
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

57 
	#HI_ERR_VI_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

58 
	#HI_ERR_VI_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

59 
	#HI_ERR_VI_INVALID_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

60 
	#HI_ERR_VI_FAILED_NOTCONFIG
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

61 
	#HI_ERR_VI_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

62 
	#HI_ERR_VI_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

63 
	#HI_ERR_VI_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

64 
	#HI_ERR_VI_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

65 
	#HI_ERR_VI_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

66 
	#HI_ERR_VI_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

67 
	#HI_ERR_VI_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

69 
	#HI_ERR_VI_FAILED_NOTENABLE
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_NOTENABLE
)

	)

70 
	#HI_ERR_VI_FAILED_NOTDISABLE
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_NOTDISABLE
)

	)

71 
	#HI_ERR_VI_FAILED_CHNOTDISABLE
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_CHNOTDISABLE
)

	)

72 
	#HI_ERR_VI_CFG_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_CFG_TIMEOUT
)

	)

73 
	#HI_ERR_VI_NORM_UNMATCH
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_NORM_UNMATCH
)

	)

74 
	#HI_ERR_VI_INVALID_WAYID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_INVALID_WAYID
)

	)

75 
	#HI_ERR_VI_INVALID_PHYCHNID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_INVALID_PHYCHNID
)

	)

76 
	#HI_ERR_VI_FAILED_NOTBIND
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_NOTBIND
)

	)

77 
	#HI_ERR_VI_FAILED_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_BINDED
)

	)

81 
	#SUBCHN
(
ViChn
Ë(ViCh¿+ 16)

	)

84 
	#VI_CAS_CHN_1
 32

	)

85 
	#VI_CAS_CHN_2
 33

	)

89 
	ehiVI_INTF_MODE_E


91 
VI_MODE_BT656
 = 0,

92 
VI_MODE_BT601
,

93 
VI_MODE_DIGITAL_CAMERA
,

94 
VI_MODE_BT1120_STANDARD
,

95 
VI_MODE_BT1120_INTERLEAVED
,

96 
VI_MODE_MIPI
,

97 
VI_MODE_LVDS
,

98 
VI_MODE_HISPI
,

100 
VI_MODE_BUTT


101 } 
	tVI_INTF_MODE_E
;

105 
	ehiVI_INPUT_MODE_E


107 
VI_INPUT_MODE_BT656
 = 0,

108 
VI_INPUT_MODE_BT601
,

109 
VI_INPUT_MODE_DIGITAL_CAMERA
,

110 
VI_INPUT_MODE_INTERLEAVED
,

111 
VI_INPUT_MODE_MIPI
,

112 
VI_INPUT_MODE_LVDS
,

113 
VI_INPUT_MODE_HISPI
,

115 
VI_INPUT_MODE_BUTT


116 } 
	tVI_INPUT_MODE_E
;

118 
	ehiVI_WORK_MODE_E


120 
VI_WORK_MODE_1Mu…ùÀx
 = 0,

121 
VI_WORK_MODE_2Mu…ùÀx
,

122 
VI_WORK_MODE_4Mu…ùÀx
,

124 
VI_WORK_MODE_BUTT


125 } 
	tVI_WORK_MODE_E
;

130 
	ehiVI_SCAN_MODE_E


132 
VI_SCAN_INTERLACED
 = 0,

133 
VI_SCAN_PROGRESSIVE
,

135 
VI_SCAN_BUTT
,

136 } 
	tVI_SCAN_MODE_E
;

138 
	ehiVI_DATA_YUV_SEQ_E


141 
VI_INPUT_DATA_VUVU
 = 0,

142 
VI_INPUT_DATA_UVUV
,

145 
VI_INPUT_DATA_UYVY
 = 0,

146 
VI_INPUT_DATA_VYUY
,

147 
VI_INPUT_DATA_YUYV
,

148 
VI_INPUT_DATA_YVYU
,

150 
VI_DATA_YUV_BUTT


151 } 
	tVI_DATA_YUV_SEQ_E
;

153 
	ehiVI_CLK_EDGE_E


155 
VI_CLK_EDGE_SINGLE_UP
 = 0,

156 
VI_CLK_EDGE_SINGLE_DOWN
,

159 
VI_CLK_EDGE_BUTT


160 } 
	tVI_CLK_EDGE_E
;

162 
	ehiVI_COMP_MODE_E


164 
VI_COMP_MODE_SINGLE
 = 0,

165 
VI_COMP_MODE_DOUBLE
 = 1,

166 
VI_COMP_MODE_BUTT
,

167 }
	tVI_COMP_MODE_E
;

170 
	ehiVI_COMBINE_MODE_E


172 
VI_COMBINE_COMPOSITE
 = 0,

173 
VI_COMBINE_SEPARATE
,

174 
VI_COMBINE_BUTT
,

175 } 
	tVI_COMBINE_MODE_E
;

178 
	ehiVI_VSYNC_E


180 
VI_VSYNC_FIELD
 = 0,

181 
VI_VSYNC_PULSE
,

182 } 
	tVI_VSYNC_E
;

185 
	ehiVI_VSYNC_NEG_E


187 
VI_VSYNC_NEG_HIGH
 = 0,

189 
VI_VSYNC_NEG_LOW


191 } 
	tVI_VSYNC_NEG_E
;

194 
	ehiVI_HSYNC_E


196 
VI_HSYNC_VALID_SINGNAL
 = 0,

197 
VI_HSYNC_PULSE
,

198 } 
	tVI_HSYNC_E
;

201 
	ehiVI_HSYNC_NEG_E


203 
VI_HSYNC_NEG_HIGH
 = 0,

205 
VI_HSYNC_NEG_LOW


207 } 
	tVI_HSYNC_NEG_E
;

210 
	ehiVI_VSYNC_VALID_E


212 
VI_VSYNC_NORM_PULSE
 = 0,

213 
VI_VSYNC_VALID_SINGAL
,

214 } 
	tVI_VSYNC_VALID_E
;

217 
	ehiVI_VSYNC_VALID_NEG_E


219 
VI_VSYNC_VALID_NEG_HIGH
 = 0,

221 
VI_VSYNC_VALID_NEG_LOW


223 } 
	tVI_VSYNC_VALID_NEG_E
;

228 
	shiVI_TIMING_BLANK_S


230 
HI_U32
 
u32HsyncHfb
 ;

231 
HI_U32
 
u32HsyncA˘
 ;

232 
HI_U32
 
u32HsyncHbb
 ;

233 
HI_U32
 
u32VsyncVfb
 ;

234 
HI_U32
 
u32VsyncVa˘
 ;

235 
HI_U32
 
u32VsyncVbb
 ;

236 
HI_U32
 
u32VsyncVbfb
 ;

237 
HI_U32
 
u32VsyncVba˘
 ;

238 
HI_U32
 
u32VsyncVbbb
 ;

239 }
	tVI_TIMING_BLANK_S
;

242 
	shiVI_SYNC_CFG_S


244 
VI_VSYNC_E
 
íVsync
;

245 
VI_VSYNC_NEG_E
 
íVsyncNeg
;

246 
VI_HSYNC_E
 
íHsync
;

247 
VI_HSYNC_NEG_E
 
íHsyncNeg
;

248 
VI_VSYNC_VALID_E
 
íVsyncVÆid
;

249 
VI_VSYNC_VALID_NEG_E
 
íVsyncVÆidNeg
;

250 
VI_TIMING_BLANK_S
 
°TimögBœnk
;

251 } 
	tVI_SYNC_CFG_S
;

254 
	ehiBT656_FIXCODE_E


256 
BT656_FIXCODE_1
 = 0,

257 
BT656_FIXCODE_0


258 }
	tBT656_FIXCODE_E
;

261 
	ehiBT656_FIELD_POLAR_E


263 
BT656_FIELD_POLAR_STD
 = 0,

264 
BT656_FIELD_POLAR_NSTD


265 }
	tBT656_FIELD_POLAR_E
;

267 
	shiVI_BT656_SYNC_CFG_S


269 
BT656_FIXCODE_E
 
íFixCode
;

270 
BT656_FIELD_POLAR_E
 
íFõldPﬁ¨
;

271 }
	tVI_BT656_SYNC_CFG_S
;

273 
	ehiVI_VBI_LOCAL_E


275 
VI_VBI_LOCAL_ODD_FRONT
 = 0,

276 
VI_VBI_LOCAL_ODD_END
,

277 
VI_VBI_LOCAL_EVEN_FRONT
,

278 
VI_VBI_LOCAL_EVEN_END
,

279 
VI_VBI_LOCAL_BUTT


280 } 
	tVI_VBI_LOCAL_E
;

282 
	shiVI_VBI_ATTR_S


284 
VI_VBI_LOCAL_E
 
íLoˇl
;

285 
HI_S32
 
s32X
;

286 
HI_S32
 
s32Y
;

287 
HI_U32
 
u32Lí
;

288 } 
	tVI_VBI_ATTR_S
;

290 
	ehiVI_DATA_TYPE_E


292 
VI_DATA_TYPE_YUV
 = 0,

293 
VI_DATA_TYPE_RGB
 = 1,

294 
VI_DATA_TYPE_BUTT


295 } 
	tVI_DATA_TYPE_E
;

297 
	ehiVI_DATA_PATH_E


299 
VI_PATH_BYPASS
 = 0,

300 
VI_PATH_ISP
 = 1,

301 
VI_PATH_RAW
 = 2,

302 
VI_PATH_BUTT


303 }
	tVI_DATA_PATH_E
;

306 
	shiVI_DEV_ATTR_EX_S


308 
VI_INPUT_MODE_E
 
íI≈utMode
;

309 
VI_WORK_MODE_E
 
íW‹kMode
;

311 
VI_COMBINE_MODE_E
 
íComböeMode
;

312 
VI_COMP_MODE_E
 
íCompMode
;

313 
VI_CLK_EDGE_E
 
íClkEdge
;

315 
HI_U32
 
au32CompMask
[2];

317 
VI_SCAN_MODE_E
 
íSˇnMode
;

318 
HI_S32
 
s32AdChnId
[4];

320 
VI_DATA_YUV_SEQ_E
 
íD©aSeq
;

321 
VI_SYNC_CFG_S
 
°SynCfg
;

323 
VI_BT656_SYNC_CFG_S
 
°BT656SynCfg
;

325 
VI_DATA_PATH_E
 
íD©aP©h
;

326 
VI_DATA_TYPE_E
 
íI≈utD©aTy≥
;

328 
HI_BOOL
 
bD©aRev
;

330 
RECT_S
 
°DevRe˘
;

331 } 
	tVI_DEV_ATTR_EX_S
;

334 
	shiVI_DEV_ATTR_S


336 
VI_INTF_MODE_E
 
íI¡fMode
;

337 
VI_WORK_MODE_E
 
íW‹kMode
;

339 
HI_U32
 
au32CompMask
[2];

340 
VI_SCAN_MODE_E
 
íSˇnMode
;

341 
HI_S32
 
s32AdChnId
[4];

344 
VI_DATA_YUV_SEQ_E
 
íD©aSeq
;

345 
VI_SYNC_CFG_S
 
°SynCfg
;

347 
VI_DATA_PATH_E
 
íD©aP©h
;

348 
VI_DATA_TYPE_E
 
íI≈utD©aTy≥
;

350 
HI_BOOL
 
bD©aRev
;

352 
RECT_S
 
°DevRe˘
;

353 } 
	tVI_DEV_ATTR_S
;

356 
	shiVI_CHN_BIND_ATTR_S


358 
VI_DEV
 
ViDev
;

359 
VI_WAY
 
ViWay
;

360 } 
	tVI_CHN_BIND_ATTR_S
;

364 
	shiVI_WAY_ATTR_S


366 
HI_S32
 
s32AdChnId
;

367 } 
	tVI_WAY_ATTR_S
;

371 
	ehiVI_CAPSEL_E


373 
VI_CAPSEL_TOP
 = 0,

374 
VI_CAPSEL_BOTTOM
,

375 
VI_CAPSEL_BOTH
,

376 
VI_CAPSEL_BUTT


377 } 
	tVI_CAPSEL_E
;

381 
	shiVI_CHN_ATTR_S


383 
RECT_S
 
°C≠Re˘
;

387 
SIZE_S
 
°De°Size
;

394 
VI_CAPSEL_E
 
íC≠Sñ
;

396 
PIXEL_FORMAT_E
 
íPixF‹m©
;

398 
COMPRESS_MODE_E
 
íCom¥essMode
;

400 
HI_BOOL
 
bMúr‹
;

401 
HI_BOOL
 
bFlù
;

402 
HI_S32
 
s32SrcFømeR©e
;

403 
HI_S32
 
s32D°FømeR©e
;

404 } 
	tVI_CHN_ATTR_S
;

407 
	shiVI_CHN_STAT_S


409 
HI_BOOL
 
bE«bÀ
;

410 
HI_U32
 
u32I¡C¡
;

411 
HI_U32
 
u32FrmR©e
;

412 
HI_U32
 
u32Lo°I¡
;

413 
HI_U32
 
u32VbFaû
;

414 
HI_U32
 
u32PicWidth
;

415 
HI_U32
 
u32PicHeight
;

416 } 
	tVI_CHN_STAT_S
;

418 
	ehi_VI_USERPIC_MODE_E


420 
VI_USERPIC_MODE_PIC
 = 0,

421 
VI_USERPIC_MODE_BGC
,

422 
VI_USERPIC_MODE_BUTT
,

423 } 
	tVI_USERPIC_MODE_E
;

425 
	shiVI_USERPIC_BGC_S


427 
HI_U32
 
u32BgCﬁ‹
;

428 } 
	tVI_USERPIC_BGC_S
;

430 
	shiVI_USERPIC_ATTR_S


432 
HI_BOOL
 
bPub
;

433 
VI_USERPIC_MODE_E
 
íU§PicMode
;

436 
VIDEO_FRAME_INFO_S
 
°U§PicFrm
;

437 
VI_USERPIC_BGC_S
 
°U§PicBg
;

438 }
unU§Pic
;

439 } 
	tVI_USERPIC_ATTR_S
;

441 
	ehiVI_FLASH_MODE_E


443 
VI_FLASH_ONCE
 = 0,

444 
VI_FLASH_FREQ
 = 1,

445 
VI_FLASH_MODE_BUTT


446 }
	tVI_FLASH_MODE_E
;

448 
	shiVI_FlASH_CONFIG_S


450 
VI_FLASH_MODE_E
 
íFœshMode
;

452 
HI_U32
 
u32SèπTime
;

453 
HI_U32
 
u32Duøti⁄
;

454 
HI_U32
 
u32C≠FrmIndex
;

455 
HI_U32
 
u32I¡îvÆ
;

456 }
	tVI_FLASH_CONFIG_S
;

458 
	shiVI_EXT_CHN_ATTR_S


460 
VI_CHN
 
s32BödChn
;

461 
SIZE_S
 
°De°Size
;

463 
HI_S32
 
s32SrcFømeR©e
;

464 
HI_S32
 
s32D°FømeR©e
;

465 
PIXEL_FORMAT_E
 
íPixF‹m©
;

466 
COMPRESS_MODE_E
 
íCom¥essMode
;

467 }
	tVI_EXT_CHN_ATTR_S
;

470 
	shiVI_LDC_ATTR_S


472 
HI_BOOL
 
bE«bÀ
;

473 
LDC_ATTR_S
 
°Aâr
;

474 }
	tVI_LDC_ATTR_S
;

476 
	shiVI_CHN_LUM_S


478 
HI_U32
 
u32Lum
;

479 
HI_U64
 
u64Pts
;

480 } 
	tVI_CHN_LUM_S
;

482 
	ehiVI_CSC_TYPE_E


484 
VI_CSC_TYPE_601
 = 0,

485 
VI_CSC_TYPE_709
,

486 
VI_CSC_TYPE_BUTT
,

487 } 
	tVI_CSC_TYPE_E
;

489 
	shiVI_CSC_ATTR_S


491 
VI_CSC_TYPE_E
 
íViCscTy≥
;

492 
HI_U32
 
u32LumaVÆ
;

493 
HI_U32
 
u32C⁄åVÆ
;

494 
HI_U32
 
u32HueVÆ
;

495 
HI_U32
 
u32S©uVÆ
;

496 } 
	tVI_CSC_ATTR_S
;

498 
	ehiVI_RAW_READ_MODE_E


500 
READ_MODE_CYCLE
 = 0x0,

501 
READ_MODE_LAST_FRAME
,

502 
READ_MODE_ONECE
,

504 
READ_MODE_BUTT


505 }
	tVI_RAW_READ_MODE_E
;

507 
	shiVI_RAW_FRAME_INFO_S


509 
HI_U32
 
u32PoﬁId
;

510 
HI_U32
 
u32PhyAddr
;

511 
HI_VOID
 *
pVúAddr
;

512 }
	tVI_RAW_FRAME_INFO_S
;

514 
	#RAW_READ_MAX_FRAME_NUM
 30

	)

517 
VIDEO_FRAME_INFO_S
 
°Føme
;

518 }
	tVI_RAW_DATA_INFO_S
;

520 
	shiVI_DCI_PARAM_S


522 
HI_BOOL
 
bE«bÀ
;

523 
HI_U32
 
u32BœckGaö
;

524 
HI_U32
 
u32C⁄åa°Gaö
;

525 
HI_U32
 
u32LightGaö
;

526 } 
	tVI_DCI_PARAM_S
;

528 
	shiVI_ISP_WDR_ATTR_S


530 
WDR_MODE_E
 
íWDRMode
;

531 
HI_BOOL
 
bCom¥ess
;

532 }
	tVI_WDR_ATTR_S
;

534 
	ehiVI_DUMP_TYPE_E


536 
VI_DUMP_TYPE_RAW
 = 0,

537 
VI_DUMP_TYPE_IR
 = 1,

538 
VI_DUMP_TYPE_YUV
 = 2,

539 
VI_DUMP_TYPE_RGB
 = 3,

540 
VI_DUMP_TYPE_BUTT


541 }
	tVI_DUMP_TYPE_E
;

543 
	shiVI_DUMP_ATTR_S


545 
VI_DUMP_TYPE_E
 
íDumpTy≥
;

546 }
	tVI_DUMP_ATTR_S
;

548 #ifde‡
__˝lu•lus


549 #i‡
__˝lu•lus


	@include/hi_comm_video.h

24 #i‚de‡
__HI_COMM_VIDEO_H__


25 
	#__HI_COMM_VIDEO_H__


	)

27 
	~"hi_ty≥.h
"

28 
	~"hi_comm⁄.h
"

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


36 
	ehiPIC_SIZE_E


38 
PIC_QCIF
 = 0,

39 
PIC_CIF
,

40 
PIC_2CIF
,

41 
PIC_HD1
,

42 
PIC_D1
,

43 
PIC_960H
,

45 
PIC_QVGA
,

46 
PIC_VGA
,

47 
PIC_XGA
,

48 
PIC_SXGA
,

49 
PIC_UXGA
,

50 
PIC_QXGA
,

52 
PIC_WVGA
,

53 
PIC_WSXGA
,

54 
PIC_WUXGA
,

55 
PIC_WQXGA
,

57 
PIC_HD720
,

58 
PIC_HD1080
,

59 
PIC_2304x1296
,

60 
PIC_2592x1520
,

61 
PIC_5M
,

62 
PIC_UHD4K
,

64 
PIC_BUTT


65 } 
	tPIC_SIZE_E
;

67 
	ehiVIDEO_NORM_E


69 
VIDEO_ENCODING_MODE_PAL
 = 0,

70 
VIDEO_ENCODING_MODE_NTSC
,

71 
VIDEO_ENCODING_MODE_AUTO
,

72 
VIDEO_ENCODING_MODE_BUTT


73 } 
	tVIDEO_NORM_E
;

75 
	ehiVIDEO_CONTROL_MODE_E


77 
VIDEO_CONTROL_MODE_SLAVER
 = 0,

78 
VIDEO_CONTROL_MODE_MASTER
,

79 
VIDEO_CONTROL_MODE_BUTT


80 } 
	tVIDEO_CONTROL_MODE_E
;

83 
	ehiPIXEL_FORMAT_E


85 
PIXEL_FORMAT_RGB_1BPP
 = 0,

86 
PIXEL_FORMAT_RGB_2BPP
,

87 
PIXEL_FORMAT_RGB_4BPP
,

88 
PIXEL_FORMAT_RGB_8BPP
,

89 
PIXEL_FORMAT_RGB_444
,

91 
PIXEL_FORMAT_RGB_4444
,

92 
PIXEL_FORMAT_RGB_555
,

93 
PIXEL_FORMAT_RGB_565
,

94 
PIXEL_FORMAT_RGB_1555
,

97 
PIXEL_FORMAT_RGB_888
,

98 
PIXEL_FORMAT_RGB_8888
,

100 
PIXEL_FORMAT_RGB_PLANAR_888
,

101 
PIXEL_FORMAT_RGB_BAYER_8BPP
,

102 
PIXEL_FORMAT_RGB_BAYER_10BPP
,

103 
PIXEL_FORMAT_RGB_BAYER_12BPP
,

104 
PIXEL_FORMAT_RGB_BAYER_14BPP
,

106 
PIXEL_FORMAT_RGB_BAYER
,

108 
PIXEL_FORMAT_YUV_A422
,

109 
PIXEL_FORMAT_YUV_A444
,

111 
PIXEL_FORMAT_YUV_PLANAR_422
,

112 
PIXEL_FORMAT_YUV_PLANAR_420
,

114 
PIXEL_FORMAT_YUV_PLANAR_444
,

116 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

117 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
,

118 
PIXEL_FORMAT_YUV_SEMIPLANAR_444
,

120 
PIXEL_FORMAT_UYVY_PACKAGE_422
,

121 
PIXEL_FORMAT_YUYV_PACKAGE_422
,

122 
PIXEL_FORMAT_VYUY_PACKAGE_422
,

123 
PIXEL_FORMAT_YCbCr_PLANAR
,

125 
PIXEL_FORMAT_SINGLE
,

127 
PIXEL_FORMAT_BUTT


128 } 
	tPIXEL_FORMAT_E
;

130 
	shiVIDEO_VBI_INFO_S


132 
HI_U32
 
au32D©a
[
VIU_MAX_VBI_LEN
];

133 
HI_U32
 
u32Lí
;

134 } 
	tVIDEO_VBI_INFO_S
;

136 
	ehiVIDEO_FIELD_E


138 
VIDEO_FIELD_TOP
 = 0x1,

139 
VIDEO_FIELD_BOTTOM
 = 0x2,

140 
VIDEO_FIELD_INTERLACED
 = 0x3,

141 
VIDEO_FIELD_FRAME
 = 0x4,

143 
VIDEO_FIELD_BUTT


144 } 
	tVIDEO_FIELD_E
;

146 
	ehiVIDEO_FORMAT_E


148 
VIDEO_FORMAT_LINEAR
 = 0x0,

149 
VIDEO_FORMAT_TILE
 = 0x1,

150 
VIDEO_FORMAT_TILE64
 = 0x2,

152 
VIDEO_FORMAT_BUTT


153 } 
	tVIDEO_FORMAT_E
;

155 
	ehiCOMPRESS_MODE_E


157 
COMPRESS_MODE_NONE
 = 0x0,

158 
COMPRESS_MODE_SEG
 = 0x1,

159 
COMPRESS_MODE_SEG128
 = 0x2,

160 
COMPRESS_MODE_LINE
 = 0x3,

161 
COMPRESS_MODE_FRAME
 = 0x4,

163 
COMPRESS_MODE_BUTT


164 } 
	tCOMPRESS_MODE_E
;

166 
	ehiVIDEO_DISPLAY_MODE_E


168 
VIDEO_DISPLAY_MODE_PREVIEW
 = 0x0,

169 
VIDEO_DISPLAY_MODE_PLAYBACK
 = 0x1,

171 
VIDEO_DISPLAY_MODE_BUTT


172 } 
	tVIDEO_DISPLAY_MODE_E
;

175 
	#DCF_DRSCRIPTION_LENGTH
 32

	)

176 
	#DCF_CAPTURE_TIME_LENGTH
 20

	)

178 
	shiISP_DCF_INFO_S


180 
HI_U8
 
au8ImageDes¸ùti⁄
[
DCF_DRSCRIPTION_LENGTH
];

181 
HI_U8
 
au8Make
[
DCF_DRSCRIPTION_LENGTH
];

182 
HI_U8
 
au8Modñ
[
DCF_DRSCRIPTION_LENGTH
];

183 
HI_U8
 
au8So·w¨e
[
DCF_DRSCRIPTION_LENGTH
];

185 
HI_U16
 
u16ISOS≥edR©ögs
;

186 
HI_U32
 
u32FNumbî
;

187 
HI_U32
 
u32MaxA≥πuªVÆue
;

188 
HI_U32
 
u32ExposuªTime
;

189 
HI_U32
 
u32ExposuªBüsVÆue
;

190 
HI_U8
 
u8ExposuªProgøm
;

193 
HI_U8
 
u8MëîögMode
;

195 
HI_U8
 
u8LightSour˚
;

198 
HI_U32
 
u32FoˇlLígth
;

199 
HI_U8
 
u8S˚√Ty≥
;

200 
HI_U8
 
u8Cu°omRídîed
;

202 
HI_U8
 
u8ExposuªMode
;

204 
HI_U8
 
u8WhôeBÆ™˚
;

206 
HI_U8
 
u8FoˇlLígthIn35mmFûm
;

207 
HI_U8
 
u8S˚√C≠tuªTy≥
;

208 
HI_U8
 
u8GaöC⁄åﬁ
;

209 
HI_U8
 
u8C⁄åa°
;

211 
HI_U8
 
u8S©uøti⁄
;

213 
HI_U8
 
u8Sh¨≤ess
;

215 } 
	tISP_DCF_INFO_S
;

217 
	shiJPEG_DCF_S


219 
HI_U8
 
au8C≠tuªTime
[
DCF_CAPTURE_TIME_LENGTH
];

220 
HI_U8
 
bFœsh
;

221 
HI_U32
 
u32DigôÆZoomR©io
;

223 
ISP_DCF_INFO_S
 
°I•DCFInfo
;

225 } 
	tJPEG_DCF_S
;

227 
	ehiFRAME_FLASH_TYPE_E


229 
FRAME_FLASH_OFF
 = 0,

230 
FRAME_FLASH_ON
 = 1,

231 
FRAME_FLASH_BUTT
,

232 } 
	tFRAME_FLASH_TYPE_E
;

234 
	shiVIDEO_SUPPLEMENT_S


236 
FRAME_FLASH_TYPE_E
 
íFœshTy≥
;

237 
HI_U32
 
u32J≥gDcfPhyAddr
;

238 
HI_VOID
* 
pJ≥gDcfVúAddr
;

240 } 
	tVIDEO_SUPPLEMENT_S
;

242 
	shiVIDEO_FRAME_S


244 
HI_U32
 
u32Width
;

245 
HI_U32
 
u32Height
;

246 
VIDEO_FIELD_E
 
u32Fõld
;

247 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

249 
VIDEO_FORMAT_E
 
íVideoF‹m©
;

250 
COMPRESS_MODE_E
 
íCom¥essMode
;

252 
HI_U32
 
u32PhyAddr
[3];

253 
HI_VOID
* 
pVúAddr
[3];

254 
HI_U32
 
u32Såide
[3];

256 
HI_U32
 
u32HódîPhyAddr
[3];

257 
HI_VOID
* 
pHódîVúAddr
[3];

258 
HI_U32
 
u32HódîSåide
[3];

260 
HI_S16
 
s16Off£tT›
;

261 
HI_S16
 
s16Off£tBŸtom
;

262 
HI_S16
 
s16Off£tLe·
;

263 
HI_S16
 
s16Off£tRight
;

265 
HI_U64
 
u64±s
;

266 
HI_U32
 
u32TimeRef
;

268 
HI_U32
 
u32Priv©eD©a
;

269 
VIDEO_SUPPLEMENT_S
 
°SuµÀmít
;

270 } 
	tVIDEO_FRAME_S
;

272 
	shiVIDEO_FRAME_INFO_S


274 
VIDEO_FRAME_S
 
°VFøme
;

275 
HI_U32
 
u32PoﬁId
;

276 } 
	tVIDEO_FRAME_INFO_S
;

278 
	shiBITMAP_S


280 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

281 
HI_U32
 
u32Width
;

282 
HI_U32
 
u32Height
;

283 
HI_VOID
* 
pD©a
;

284 } 
	tBITMAP_S
;

287 
	shiVI_MIXCAP_STAT_S


289 
HI_BOOL
 
bMixC≠Mode
;

290 
HI_BOOL
 
bHasDownSˇÀ
;

291 } 
	tVI_MIXCAP_STAT_S
;

294 
	shiVI_FRAME_INFO_S


296 
VI_MIXCAP_STAT_S
 
°MixC≠Sèã
;

297 
VIDEO_FRAME_INFO_S
 
°ViFrmInfo
;

298 } 
	tVI_FRAME_INFO_S
;

300 
	ehiLDC_VIEW_TYPE_E


302 
LDC_VIEW_TYPE_ALL
 = 0,

303 
LDC_VIEW_TYPE_CROP
,

306 
LDC_VIEW_TYPE_BUTT
,

307 } 
	tLDC_VIEW_TYPE_E
;

309 
	shiLDC_ATTR_S


311 
LDC_VIEW_TYPE_E
 
íVõwTy≥
;

312 
HI_S32
 
s32CíãrXOff£t
;

313 
HI_S32
 
s32CíãrYOff£t
;

314 
HI_S32
 
s32R©io
;

315 } 
	tLDC_ATTR_S
;

317 
	ehiWDR_MODE_E


319 
WDR_MODE_NONE
 = 0,

320 
WDR_MODE_BUILT_IN
,

322 
WDR_MODE_2To1_LINE
,

323 
WDR_MODE_2To1_FRAME
,

324 
WDR_MODE_2To1_FRAME_FULL_RATE
,

326 
WDR_MODE_3To1_LINE
,

327 
WDR_MODE_3To1_FRAME
,

328 
WDR_MODE_3To1_FRAME_FULL_RATE
,

330 
WDR_MODE_4To1_LINE
,

331 
WDR_MODE_4To1_FRAME
,

332 
WDR_MODE_4To1_FRAME_FULL_RATE
,

334 
WDR_MODE_BUTT
,

335 } 
	tWDR_MODE_E
;

337 #ifde‡
__˝lu•lus


338 #i‡
__˝lu•lus


	@include/hi_comm_vo.h

18 #i‚de‡
__HI_COMM_VO_H__


19 
	#__HI_COMM_VO_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_comm⁄.h
"

23 
	~"hi_comm_video.h
"

25 
	#VO_DEF_CHN_BUF_LEN
 8

	)

26 
	#VO_DEF_DISP_BUF_LEN
 5

	)

27 
	#VO_DEF_VIRT_BUF_LEN
 3

	)

29 #ifde‡
__˝lu•lus


30 #i‡
__˝lu•lus


35 
	ehiEN_VOU_ERR_CODE_E


37 
EN_ERR_VO_DEV_NOT_CONFIG
 = 0x40,

38 
EN_ERR_VO_DEV_NOT_ENABLE
 = 0x41,

39 
EN_ERR_VO_DEV_HAS_ENABLED
 = 0x42,

40 
EN_ERR_VO_DEV_HAS_BINDED
 = 0x43,

41 
EN_ERR_VO_DEV_NOT_BINDED
 = 0x44,

43 
ERR_VO_NOT_ENABLE
 = 0x45,

44 
ERR_VO_NOT_DISABLE
 = 0x46,

45 
ERR_VO_NOT_CONFIG
 = 0x47,

47 
ERR_VO_CHN_NOT_DISABLE
 = 0x48,

48 
ERR_VO_CHN_NOT_ENABLE
 = 0x49,

49 
ERR_VO_CHN_NOT_CONFIG
 = 0x4a,

50 
ERR_VO_CHN_NOT_ALLOC
 = 0x4b,

52 
ERR_VO_CCD_INVALID_PAT
 = 0x4c,

53 
ERR_VO_CCD_INVALID_POS
 = 0x4d,

55 
ERR_VO_WAIT_TIMEOUT
 = 0x4e,

56 
ERR_VO_INVALID_VFRAME
 = 0x4f,

57 
ERR_VO_INVALID_RECT_PARA
 = 0x50,

58 
ERR_VO_SETBEGIN_ALREADY
 = 0x51,

59 
ERR_VO_SETBEGIN_NOTYET
 = 0x52,

60 
ERR_VO_SETEND_ALREADY
 = 0x53,

61 
ERR_VO_SETEND_NOTYET
 = 0x54,

63 
ERR_VO_GRP_INVALID_ID
 = 0x55,

64 
ERR_VO_GRP_NOT_CREATE
 = 0x56,

65 
ERR_VO_GRP_HAS_CREATED
 = 0x57,

66 
ERR_VO_GRP_NOT_DESTROY
 = 0x58,

67 
ERR_VO_GRP_CHN_FULL
 = 0x59,

68 
ERR_VO_GRP_CHN_EMPTY
 = 0x5a,

69 
ERR_VO_GRP_CHN_NOT_EMPTY
 = 0x5b,

70 
ERR_VO_GRP_INVALID_SYN_MODE
 = 0x5c,

71 
ERR_VO_GRP_INVALID_BASE_PTS
 = 0x5d,

72 
ERR_VO_GRP_NOT_START
 = 0x5e,

73 
ERR_VO_GRP_NOT_STOP
 = 0x5f,

74 
ERR_VO_GRP_INVALID_FRMRATE
 = 0x60,

75 
ERR_VO_GRP_CHN_HAS_REG
 = 0x61,

76 
ERR_VO_GRP_CHN_NOT_REG
 = 0x62,

77 
ERR_VO_GRP_CHN_NOT_UNREG
 = 0x63,

78 
ERR_VO_GRP_BASE_NOT_CFG
 = 0x64,

80 
ERR_GFX_NOT_DISABLE
 = 0x65,

81 
ERR_GFX_NOT_BIND
 = 0x66,

82 
ERR_GFX_NOT_UNBIND
 = 0x67,

83 
ERR_GFX_INVALID_ID
 = 0x68,

85 
ERR_VO_WBC_NOT_DISABLE
 = 0x69,

86 
ERR_VO_WBC_NOT_CONFIG
 = 0x6a,

88 
ERR_VO_CHN_AREA_OVERLAP
 = 0x6b,

90 
EN_ERR_INVALID_WBCID
 = 0x6c,

91 
EN_ERR_INVALID_LAYERID
 = 0x6d,

92 
EN_ERR_VO_VIDEO_HAS_BINDED
 = 0x6e,

93 
EN_ERR_VO_VIDEO_NOT_BINDED
 = 0x6f,

94 
ERR_VO_WBC_HAS_BIND
 = 0x70,

95 
ERR_VO_WBC_HAS_CONFIG
 = 0x71,

96 
ERR_VO_WBC_NOT_BIND
 = 0x72,

99 
ERR_VO_BUTT


101 }
	tEN_VOU_ERR_CODE_E
;

104 
	#HI_ERR_VO_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

105 
	#HI_ERR_VO_NO_MEM
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

106 
	#HI_ERR_VO_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

107 
	#HI_ERR_VO_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

108 
	#HI_ERR_VO_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

109 
	#HI_ERR_VO_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

110 
	#HI_ERR_VO_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

111 
	#HI_ERR_VO_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

112 
	#HI_ERR_VO_NOT_PERMIT
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

113 
	#HI_ERR_VO_INVALID_WBCID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_WBCID
)

	)

114 
	#HI_ERR_VO_INVALID_LAYERID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_LAYERID
)

	)

118 
	#HI_ERR_VO_DEV_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_NOT_CONFIG
)

	)

119 
	#HI_ERR_VO_DEV_NOT_ENABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_NOT_ENABLE
)

	)

120 
	#HI_ERR_VO_DEV_HAS_ENABLED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_HAS_ENABLED
)

	)

121 
	#HI_ERR_VO_DEV_HAS_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_HAS_BINDED
)

	)

122 
	#HI_ERR_VO_DEV_NOT_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_NOT_BINDED
)

	)

125 
	#HI_ERR_VO_VIDEO_NOT_ENABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_NOT_ENABLE
)

	)

126 
	#HI_ERR_VO_VIDEO_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_NOT_DISABLE
)

	)

127 
	#HI_ERR_VO_VIDEO_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_NOT_CONFIG
)

	)

128 
	#HI_ERR_VO_VIDEO_HAS_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_VIDEO_HAS_BINDED
)

	)

129 
	#HI_ERR_VO_VIDEO_NOT_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_VIDEO_NOT_BINDED
)

	)

132 
	#HI_ERR_VO_WBC_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_NOT_DISABLE
)

	)

133 
	#HI_ERR_VO_WBC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_NOT_CONFIG
)

	)

134 
	#HI_ERR_VO_WBC_HAS_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_HAS_CONFIG
)

	)

135 
	#HI_ERR_VO_WBC_NOT_BIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_NOT_BIND
)

	)

136 
	#HI_ERR_VO_WBC_HAS_BIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_HAS_BIND
)

	)

139 
	#HI_ERR_VO_CHN_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_DISABLE
)

	)

140 
	#HI_ERR_VO_CHN_NOT_ENABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_ENABLE
)

	)

141 
	#HI_ERR_VO_CHN_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_CONFIG
)

	)

142 
	#HI_ERR_VO_CHN_NOT_ALLOC
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_ALLOC
)

	)

143 
	#HI_ERR_VO_CHN_AREA_OVERLAP
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_AREA_OVERLAP
)

	)

147 
	#HI_ERR_VO_INVALID_PATTERN
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CCD_INVALID_PAT
)

	)

148 
	#HI_ERR_VO_INVALID_POSITION
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CCD_INVALID_POS
)

	)

151 
	#HI_ERR_VO_WAIT_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WAIT_TIMEOUT
)

	)

152 
	#HI_ERR_VO_INVALID_VFRAME
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_INVALID_VFRAME
)

	)

153 
	#HI_ERR_VO_INVALID_RECT_PARA
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_INVALID_RECT_PARA
)

	)

154 
	#HI_ERR_VO_SETBEGIN_ALREADY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETBEGIN_ALREADY
)

	)

155 
	#HI_ERR_VO_SETBEGIN_NOTYET
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETBEGIN_NOTYET
)

	)

156 
	#HI_ERR_VO_SETEND_ALREADY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETEND_ALREADY
)

	)

157 
	#HI_ERR_VO_SETEND_NOTYET
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETEND_NOTYET
)

	)

160 
	#HI_ERR_VO_GRP_INVALID_ID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_ID
)

	)

161 
	#HI_ERR_VO_GRP_NOT_CREATE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_CREATE
)

	)

162 
	#HI_ERR_VO_GRP_HAS_CREATED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_HAS_CREATED
)

	)

163 
	#HI_ERR_VO_GRP_NOT_DESTROY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_DESTROY
)

	)

164 
	#HI_ERR_VO_GRP_CHN_FULL
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_FULL
)

	)

165 
	#HI_ERR_VO_GRP_CHN_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_EMPTY
)

	)

166 
	#HI_ERR_VO_GRP_CHN_NOT_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_NOT_EMPTY
)

	)

167 
	#HI_ERR_VO_GRP_INVALID_SYN_MODE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_SYN_MODE
)

	)

168 
	#HI_ERR_VO_GRP_INVALID_BASE_PTS
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_BASE_PTS
)

	)

169 
	#HI_ERR_VO_GRP_NOT_START
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_START
)

	)

170 
	#HI_ERR_VO_GRP_NOT_STOP
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_STOP
)

	)

171 
	#HI_ERR_VO_GRP_INVALID_FRMRATE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_FRMRATE
)

	)

172 
	#HI_ERR_VO_GRP_CHN_HAS_REG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_HAS_REG
)

	)

173 
	#HI_ERR_VO_GRP_CHN_NOT_REG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_NOT_REG
)

	)

174 
	#HI_ERR_VO_GRP_CHN_NOT_UNREG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_NOT_UNREG
)

	)

175 
	#HI_ERR_VO_GRP_BASE_NOT_CFG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_BASE_NOT_CFG
)

	)

179 
	#HI_ERR_VO_GFX_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_NOT_DISABLE
)

	)

180 
	#HI_ERR_VO_GFX_NOT_BIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_NOT_BIND
)

	)

181 
	#HI_ERR_VO_GFX_NOT_UNBIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_NOT_UNBIND
)

	)

182 
	#HI_ERR_VO_GFX_INVALID_ID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_INVALID_ID
)

	)

185 
	#VO_INTF_CVBS
 (0x01L<<0)

	)

186 
	#VO_INTF_YPBPR
 (0x01L<<1)

	)

187 
	#VO_INTF_VGA
 (0x01L<<2)

	)

188 
	#VO_INTF_BT656
 (0x01L<<3)

	)

189 
	#VO_INTF_BT1120
 (0x01L<<4)

	)

190 
	#VO_INTF_HDMI
 (0x01L<<5)

	)

191 
	#VO_INTF_LCD
 (0x01L<<6)

	)

192 
	#VO_INTF_BT656_H
 (0x01L<<7)

	)

193 
	#VO_INTF_BT656_L
 (0x01L<<8)

	)

194 
	#VO_INTF_LCD_6BIT
 (0x01L<<9)

	)

195 
	#VO_INTF_LCD_8BIT
 (0x01L<<10)

	)

196 
	#VO_INTF_LCD_16BIT
 (0x01L<<11)

	)

203 
	#VO_DEFAULT_CHN
 -1

	)

208 
HI_S32
 
	tVO_INTF_TYPE_E
;

212 
	ehiVO_INTF_SYNC_E


214 
VO_OUTPUT_PAL
 = 0,

215 
VO_OUTPUT_NTSC
,

217 
VO_OUTPUT_1080P24
,

218 
VO_OUTPUT_1080P25
,

219 
VO_OUTPUT_1080P30
,

221 
VO_OUTPUT_720P50
,

222 
VO_OUTPUT_720P60
,

223 
VO_OUTPUT_1080I50
,

224 
VO_OUTPUT_1080I60
,

225 
VO_OUTPUT_1080P50
,

226 
VO_OUTPUT_1080P60
,

228 
VO_OUTPUT_576P50
,

229 
VO_OUTPUT_480P60
,

231 
VO_OUTPUT_800x600_60
,

232 
VO_OUTPUT_1024x768_60
,

233 
VO_OUTPUT_1280x1024_60
,

234 
VO_OUTPUT_1366x768_60
,

235 
VO_OUTPUT_1440x900_60
,

236 
VO_OUTPUT_1280x800_60
,

237 
VO_OUTPUT_1600x1200_60
,

238 
VO_OUTPUT_1680x1050_60
,

239 
VO_OUTPUT_1920x1200_60
,

240 
VO_OUTPUT_640x480_60
,

241 
VO_OUTPUT_960H_PAL
,

242 
VO_OUTPUT_960H_NTSC
,

243 
VO_OUTPUT_320X240_30
,

244 
VO_OUTPUT_320X240_50
,

245 
VO_OUTPUT_240X320_50
,

246 
VO_OUTPUT_240X320_60
,

247 
VO_OUTPUT_USER
,

248 
VO_OUTPUT_BUTT


250 } 
	tVO_INTF_SYNC_E
;

252 
	ehiVO_DISPLAY_FIELD_E


254 
VO_FIELD_TOP
,

255 
VO_FIELD_BOTTOM
,

256 
VO_FIELD_BOTH
,

257 
VO_FIELD_BUTT


258 } 
	tVO_DISPLAY_FIELD_E
;

260 
	ehiVOU_ZOOM_IN_E


262 
VOU_ZOOM_IN_RECT
 = 0,

263 
VOU_ZOOM_IN_RATIO
,

264 
VOU_ZOOM_IN_BUTT


265 } 
	tVOU_ZOOM_IN_E
;

267 
	ehiVO_CSC_MATRIX_E


269 
VO_CSC_MATRIX_IDENTITY
 = 0,

271 
VO_CSC_MATRIX_BT601_TO_BT709
,

272 
VO_CSC_MATRIX_BT709_TO_BT601
,

274 
VO_CSC_MATRIX_BT601_TO_RGB_PC
,

275 
VO_CSC_MATRIX_BT709_TO_RGB_PC
,

277 
VO_CSC_MATRIX_RGB_TO_BT601_PC
,

278 
VO_CSC_MATRIX_RGB_TO_BT709_PC
,

280 
VO_CSC_MATRIX_BUTT


281 } 
	tVO_CSC_MATRIX_E
;

283 
	shiVO_CHN_ATTR_S


285 
HI_U32
 
u32Pri‹ôy
;

286 
RECT_S
 
°Re˘
;

287 
HI_BOOL
 
bDeÊickî
;

288 }
	tVO_CHN_ATTR_S
;

290 
	shiVO_BORDER_S


292 
HI_BOOL
 
bB‹dîEn
;

293 
BORDER_S
 
°B‹dî
;

294 }
	tVO_BORDER_S
;

297 
	shiVO_QUERY_STATUS_S


299 
HI_U32
 
u32ChnBufU£d
;

300 } 
	tVO_QUERY_STATUS_S
;

302 
	sègVO_SYNC_INFO_S


304 
HI_BOOL
 
bSynm
;

305 
HI_BOOL
 
bI›
;

306 
HI_U8
 
u8I¡fb
;

308 
HI_U16
 
u16Va˘
 ;

309 
HI_U16
 
u16Vbb
;

310 
HI_U16
 
u16Vfb
;

312 
HI_U16
 
u16Ha˘
;

313 
HI_U16
 
u16Hbb
;

314 
HI_U16
 
u16Hfb
;

315 
HI_U16
 
u16Hmid
;

317 
HI_U16
 
u16Bva˘
;

318 
HI_U16
 
u16Bvbb
;

319 
HI_U16
 
u16Bvfb
;

321 
HI_U16
 
u16Hpw
;

322 
HI_U16
 
u16Vpw
;

324 
HI_BOOL
 
bIdv
;

325 
HI_BOOL
 
bIhs
;

326 
HI_BOOL
 
bIvs
;

328 } 
	tVO_SYNC_INFO_S
;

330 
	shiVO_PUB_ATTR_S


332 
HI_U32
 
u32BgCﬁ‹
;

333 
VO_INTF_TYPE_E
 
íI¡fTy≥
;

334 
VO_INTF_SYNC_E
 
íI¡fSync
;

335 
VO_SYNC_INFO_S
 
°SyncInfo
;

336 } 
	tVO_PUB_ATTR_S
;

340 
	shiVO_CHN_VFRAME_TIMEOUT_S


342 
VIDEO_FRAME_INFO_S
 
°VFøme
;

343 
HI_S32
 
s32MûliSec
;

344 } 
	tVO_CHN_VFRAME_TIMEOUT_S
;

346 
	shiVO_SCREEN_VFRAME_TIMEOUT_S


348 
VIDEO_FRAME_INFO_S
 
°VFøme
;

349 
HI_S32
 
s32MûliSec
;

350 } 
	tVO_SCREEN_VFRAME_TIMEOUT_S
;

352 
	shiVO_USR_SEND_TIMEOUT_S


354 
VIDEO_FRAME_INFO_S
 
°VFøme
;

355 
HI_S32
 
s32MûliSec
;

356 } 
	tVO_USR_SEND_TIMEOUT_S
;

359 
	ehiVO_PART_MODE_E


361 
VO_PART_MODE_SINGLE
 = 0,

362 
VO_PART_MODE_MULTI
 = 1,

363 
VO_PART_MODE_BUTT


365 } 
	tVO_PART_MODE_E
;

367 
	shiVO_VIDEO_LAYER_ATTR_S


369 
RECT_S
 
°Di•Re˘
;

370 
SIZE_S
 
°ImageSize
;

371 
HI_U32
 
u32Di•FrmRt
;

372 
PIXEL_FORMAT_E
 
íPixF‹m©
;

373 
HI_BOOL
 
bDoubÀFøme
;

374 
HI_BOOL
 
bClu°îMode
;

375 } 
	tVO_VIDEO_LAYER_ATTR_S
;

377 
	ehiVOU_LAYER_DDR_E


379 
VOU_LAYER_DDR0
 = 0,

380 
VOU_LAYER_DDR1
 = 1,

381 
VOU_LAYER_DDR_BUTT


382 }
	tVOU_LAYER_DDR_E
;

384 
	shiVO_ZOOM_RATIO_S


386 
HI_U32
 
u32XR©io
;

387 
HI_U32
 
u32YR©io
;

388 
HI_U32
 
u32WR©io
;

389 
HI_U32
 
u32HR©io
;

390 } 
	tVO_ZOOM_RATIO_S
;

392 
	shiVO_ZOOM_ATTR_S


394 
VOU_ZOOM_IN_E
 
íZoomTy≥
;

397 
RECT_S
 
°ZoomRe˘
;

398 
VO_ZOOM_RATIO_S
 
°ZoomR©io
;

400 } 
	tVO_ZOOM_ATTR_S
;

402 
	shiVO_CSC_S


404 
VO_CSC_MATRIX_E
 
íCscM©rix
;

405 
HI_U32
 
u32Luma
;

406 
HI_U32
 
u32C⁄åa°
;

407 
HI_U32
 
u32Hue
;

408 
HI_U32
 
u32S©u©uª
;

409 } 
	tVO_CSC_S
;

412 
	shiVO_REGION_INFO_S


414 
RECT_S
 *
p°Regi⁄
;

415 
HI_U32
 
u32Regi⁄Num
;

416 }
	tVO_REGION_INFO_S
;

418 
	shiVO_REGION_LUMA_S


420 
VO_REGION_INFO_S
 
°Regi⁄Info
;

421 
HI_U32
* 
pu32LumaD©a
;

422 
HI_S32
 
s32MûliSec
;

425 }
	tVO_REGION_LUMA_S
;

427 #ifde‡
__˝lu•lus


428 #i‡
__˝lu•lus


	@include/hi_comm_vpss.h

21 #i‚de‡
__HI_COMM_VPSS_H__


22 
	#__HI_COMM_VPSS_H__


	)

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


31 
	~"hi_ty≥.h
"

32 
	~"hi_comm⁄.h
"

33 
	~"hi_î∫o.h
"

34 
	~"hi_comm_video.h
"

36 
	#HI_ERR_VPSS_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

37 
	#HI_ERR_VPSS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

38 
	#HI_ERR_VPSS_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

39 
	#HI_ERR_VPSS_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

40 
	#HI_ERR_VPSS_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

41 
	#HI_ERR_VPSS_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

42 
	#HI_ERR_VPSS_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

43 
	#HI_ERR_VPSS_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

44 
	#HI_ERR_VPSS_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

45 
	#HI_ERR_VPSS_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

46 
	#HI_ERR_VPSS_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

47 
	#HI_ERR_VPSS_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

48 
	#HI_ERR_VPSS_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

51 
HI_S32
 
	tVPSS_GRP
;

52 
HI_S32
 
	tVPSS_CHN
;

54 
	#VPSS_INVALID_FRMRATE
 (-1UL)

	)

55 
	#VPSS_CHN0
 0

	)

56 
	#VPSS_CHN1
 1

	)

57 
	#VPSS_CHN2
 2

	)

58 
	#VPSS_CHN3
 3

	)

59 
	#VPSS_INVALID_CHN
 -1

	)

62 
	ehiVPSS_DIE_MODE_E


64 
VPSS_DIE_MODE_AUTO
 = 0,

65 
VPSS_DIE_MODE_NODIE
 = 1,

66 
VPSS_DIE_MODE_DIE
 = 2,

67 
VPSS_DIE_MODE_BUTT


68 }
	tVPSS_DIE_MODE_E
;

71 
	shiVPSS_CHN_ATTR_S


73 
HI_BOOL
 
bSpEn
;

74 
HI_BOOL
 
bB‹dîEn
;

75 
HI_BOOL
 
bMúr‹
;

76 
HI_BOOL
 
bFlù
;

77 
HI_S32
 
s32SrcFømeR©e
;

78 
HI_S32
 
s32D°FømeR©e
;

79 
BORDER_S
 
°B‹dî
;

80 }
	tVPSS_CHN_ATTR_S
;

82 
	shiVPSS_GRP_PARAM_S


84 
HI_U32
 
u32C⁄åa°
;

86 
HI_S32
 
s32GlobÆSåígth
;

87 
HI_S32
 
s32IeSåígth
;

88 
HI_S32
 
s32YSFSåígth
;

89 
HI_S32
 
s32YTFSåígth
;

90 
HI_S32
 
s32CSFSåígth
;

91 
HI_S32
 
s32CTFSåígth
;

92 
HI_S32
 
s32MŸi⁄Limí
;

93 }
	tVPSS_GRP_PARAM_S
;

98 
HI_U8
 
Chroma_SF_Såígth
;

100 
HI_U8
 
Chroma_TF_Såígth
;

103 
HI_U16
 
IE_Po°Fœg
;

107 
HI_U16
 
IE_Såígth
;

119 
HI_U16
 
Luma_MŸi⁄Thªsh
;

122 
HI_U8
 
Luma_SF_MoveAªa
;

124 
HI_U8
 
Luma_SF_StûlAªa
;

126 
HI_U8
 
Luma_TF_Såígth
;

128 
HI_U8
 
DeS™d_Såígth
;

129 } 
	tVPSS_GRP_PARAM_V2_S
;

131 
VPSS_GRP_PARAM_V2_S
 
	ttVµNRsEx
;

133 
	shiVPSS_GRP_VPPNRS_S


135 
tss
, 
sfc
, 
tfc
;

136 
sfs
, 
tfs
, 
mdz
, 
õs
;

138 }
	tVPSS_GRP_VPPNRS_S
;

140 
	shiVPSS_GRP_VPPNRZ_S


142 
SFS
, 
SFS1
, 
SPS1
,
SPT1
, 
TFP1
,
TFR1
,
SBF1
, 
MDDZ
, 
MAAT
, 
SFC
;

143 
TFS
, 
SFS2
, 
SPS2
,
SPT2
, 
TFP2
,
TFR2
,
SBF2
, 
MATH
, 
MATW
, 
TFC
;

145 }
	tVPSS_GRP_VPPNRZ_S
;

147 
	shiVPSS_GRP_VPPNRX_S


149 
StSåígth
, 
StProS∑ti
, 
StProTempo
, 
StBa£Fªq
;

150 
TFS
, 
TFP
, 
TFQ
, 
TFR
, 
SHP
, 
MDDZ
, 
MATH
;

152 }
	tVPSS_GRP_VPPNRX_S
;

154 
	shiVPSS_GRP_LEVEL2_PARAM_S


156 
VPSS_GRP_VPPNRS_S
 *
pNrS
;

157 
VPSS_GRP_VPPNRZ_S
 *
pNrZ
;

158 
VPSS_GRP_VPPNRX_S
 *
pNrX
;

159 }
	tVPSS_GRP_LEVEL2_PARAM_S
;

161 
	shiVPSS_GRP_VPPNRXCORE_S


163 
HI_U8
 
SBS
 ;

164 
HI_U8
 
SDS
 , 
_ª£rved_b_
 : 6;

165 
HI_U8
 
SBF
:2;

167 
HI_U8
 
MiBaTFP
;

168 
HI_U8
 
MiDaTFP
;

170 
HI_U8
 
HiBaTFP
;

171 
HI_U8
 
HiDaTFP
, 
_ª£rved_B_
[3];

173 
HI_U16
 
MDDZ
 : 7;

174 
HI_U16
 
TFP
 : 6, 
_ª£rved_b0_
 : 1;

175 
HI_U16
 
MaTFP
 : 2;

177 
HI_U16
 
TFR
 : 5;

178 
HI_U16
 
TFS
 : 4;

180 
HI_U16
 
SHP
 : 7;

181 
HI_U16
 
MaTFR
 : 5;

183 
HI_U16
 
MaTFS
 : 4;

184 
HI_U16
 
MaSHP
 : 7;

185 } 
	tVPSS_GRP_VPPNRXCORE_S
;

187 
	shiVPSS_GRP_VPPNRXEX_S


189 
HI_U32
 
ISO
;

191 
VPSS_GRP_VPPNRXCORE_S
 
°Unô
[3];

193 
HI_U8
 
SFC
;

194 
HI_U8
 
Po°SBS
;

195 
HI_U8
 
Po°SDS
;

196 
HI_U8
 
Po°SHP
;

198 
HI_U8
 
Po°ROW
 : 5, 
_ª£rved_b1_
 : 3;

199 
HI_U8
 
Po°SFS
 : 4, 
_ª£rved_b2_
 : 1;

200 
HI_U8
 
MATW
 : 3;

201 
HI_U16
 
MATH
 : 9;

202 
HI_U16
 
MABW
 : 1;

203 
HI_U16
 
TFC
 : 6;

204 }
	tVPSS_GRP_VPPNRXEX_S
;

210 
ISO
;

212 
HI_U8
 
SFC
, 
TFC
, 
_ª£rved_B_
[3];

214 
HI_U8
 
SHPi
, 
SBSi
,
SBTi
, 
SDSi
,
SDTi
, 
MDZi
;

215 
HI_U8
 
SHPj
, 
SBSj
,
SBTj
, 
SDSj
,
SDTj
, 
MDZj
;

216 
HI_U8
 
SHPk
, 
SBSk
,
SBTk
, 
SDSk
,
SDTk
;

218 
HI_U16
 
SBFi
 : 2, 
SBFj
 : 2, 
SBFk
 : 2, 
MATH
 : 10;

219 
HI_U16
 
TFSi
 : 4, 
TFSj
 : 4, 
TFSk
 : 4, 
PSFS
 : 4;

220 
HI_U16
 
TFRi
 : 5, 
TFRj
 : 5, 
TFRk
 : 5, 
Po°
 : 1;

221 } 
	tVPSS_GRP_VPPNRBCORE_S
;

222 
VPSS_GRP_VPPNRBCORE_S
 
	ttVµNRbC‹e
;

226 
VPSS_GRP_VPPNRBCORE_S
 
iNRb
;

228 
HI_U8
 
MDAF
 : 3, 
Po°ROW
 : 5;

229 
HI_U8
 
MATW
 : 2, 
ExTfThr
 : 5;

230 
HI_U8
 
MABW
 : 1, 
TextThr
;

231 
HI_U8
 
MTFS
;

233 } 
	tVPSS_GRP_VPPNRBEX_S
;

234 
VPSS_GRP_VPPNRBEX_S
 
	ttVµNRbEx
;

238 
	ehiVPSS_CROP_COORDINATE_E


240 
VPSS_CROP_RATIO_COOR
 = 0,

241 
VPSS_CROP_ABS_COOR


242 }
	tVPSS_CROP_COORDINATE_E
;

245 
	shiVPSS_CROP_INFO_S


247 
HI_BOOL
 
bE«bÀ
;

248 
VPSS_CROP_COORDINATE_E
 
íCr›Co‹dö©e
;

249 
RECT_S
 
°Cr›Re˘
;

250 }
	tVPSS_CROP_INFO_S
;

252 
	shiVPSS_LDC_ATTR_S


254 
HI_BOOL
 
bE«bÀ
;

255 
LDC_ATTR_S
 
°Aâr
;

256 }
	tVPSS_LDC_ATTR_S
;

259 
	shiVPSS_GRP_ATTR_S


262 
HI_U32
 
u32MaxW
;

263 
HI_U32
 
u32MaxH
;

264 
PIXEL_FORMAT_E
 
íPixFmt
;

266 
HI_BOOL
 
bIeEn
;

267 
HI_BOOL
 
bDciEn
;

268 
HI_BOOL
 
bNrEn
;

269 
HI_BOOL
 
bHi°En
;

270 
VPSS_DIE_MODE_E
 
íDõMode
;

271 }
	tVPSS_GRP_ATTR_S
;

274 
	ehiVPSS_CHN_MODE_E


276 
VPSS_CHN_MODE_AUTO
 = 0,

277 
VPSS_CHN_MODE_USER
 =1

278 }
	tVPSS_CHN_MODE_E
;

281 
	shiVPSS_CHN_MODE_S


283 
VPSS_CHN_MODE_E
 
íChnMode
;

284 
HI_U32
 
u32Width
;

285 
HI_U32
 
u32Height
;

286 
HI_BOOL
 
bDoubÀ
;

287 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

288 
COMPRESS_MODE_E
 
íCom¥essMode
;

290 }
	tVPSS_CHN_MODE_S
;

292 
	shiVPSS_FRAME_TIMEOUT_S


294 
VIDEO_FRAME_INFO_S
 
°VideoFøme
;

295 
HI_S32
 
s32MûliSec
;

296 }
	tVPSS_FRAME_TIMEOUT_S
;

298 
	shiVPSS_GET_GRP_FRAME_S


300 
HI_U32
 
u32FømeIndex
;

301 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
;

302 }
	tVPSS_GET_GRP_FRAME_S
;

305 
	shiVPSS_CHN_PARAM_S


307 
HI_U32
 
u32SpSåígth
;

308 } 
	tVPSS_CHN_PARAM_S
;

311 
	shiVPSS_FRAME_RATE_S


313 
HI_S32
 
s32SrcFrmR©e
;

314 
HI_S32
 
s32D°FrmR©e
;

315 } 
	tVPSS_FRAME_RATE_S
;

318 
	shiVPSS_EXT_CHN_ATTR_S


320 
VPSS_CHN
 
s32BödChn
;

321 
HI_U32
 
u32Width
;

322 
HI_U32
 
u32Height
;

323 
HI_S32
 
s32SrcFømeR©e
;

324 
HI_S32
 
s32D°FømeR©e
;

325 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

326 
COMPRESS_MODE_E
 
íCom¥essMode
;

327 }
	tVPSS_EXT_CHN_ATTR_S
;

329 
	shiVPSS_REGION_INFO_S


331 
RECT_S
 *
p°Regi⁄
;

332 
HI_U32
 
u32Regi⁄Num
;

333 }
	tVPSS_REGION_INFO_S
;

335 
	shiVPSS_GET_REGION_LUMA_S


337 
VPSS_REGION_INFO_S
 
°Regi⁄Info
;

338 
HI_U32
* 
pu32LumaD©a
;

339 
HI_S32
 
s32MûliSec
;

342 }
	tVPSS_GET_REGION_LUMA_S
;

345 
	ehiVPSS_COVER_TYPE_E


347 
VPSS_AREA_RECT
 = 0,

348 
VPSS_AREA_QUAD_RANGLE
,

349 
VPSS_AREA_BUTT


350 } 
	tVPSS_COVER_TYPE_E
;

352 
	ehiVPSS_REF_SEL_MODE_E


354 
VPSS_REF_FROM_RFR
 = 0,

355 
VPSS_REF_FROM_CHN0
 = 1,

356 
VPSS_REF_FROM_BUTT


358 }
	tVPSS_REF_SEL_MODE_E
;

360 
	shiVPSS_LOW_DELAY_INFO_S


362 
HI_BOOL
 
bE«bÀ
;

363 
HI_U32
 
u32LöeC¡
;

365 }
	tVPSS_LOW_DELAY_INFO_S
;

367 #ifde‡
__˝lu•lus


368 #i‡
__˝lu•lus


	@include/hi_common.h

27 #i‚de‡
__HI_COMMON_H__


28 
	#__HI_COMMON_H__


	)

30 
	~"hi_ty≥.h
"

31 
	~"hi_m©h.h
"

32 
	~"hi_deföes.h
"

33 
	~"hi_comm_video.h
"

35 #ifde‡
__˝lu•lus


36 #i‡
__˝lu•lus


41 #i‚de‡
VER_X


42 
	#VER_X
 1

	)

45 #i‚de‡
VER_Y


46 
	#VER_Y
 0

	)

49 #i‚de‡
VER_Z


50 
	#VER_Z
 0

	)

53 #i‚de‡
VER_P


54 
	#VER_P
 0

	)

57 #i‚de‡
VER_B


58 
	#VER_B
 0

	)

61 #ifde‡
HI_DEBUG


62 
	#VER_D
 " Debug"

	)

64 
	#VER_D
 " Rñó£"

	)

67 
	#__MK_VERSION
(
x
,
y
,
z
,
p
,
b
Ë#x"."#y"."#z"."#p" B0"#b

	)

68 
	#MK_VERSION
(
x
,
y
,
z
,
p
,
b
Ë
	`__MK_VERSION
(x,y,z,p,b)

	)

69 
	#MPP_VERSION
 
CHIP_NAME
 
MPP_VER_PRIX
 
	`MK_VERSION
(
VER_X
,
VER_Y
,
VER_Z
,
VER_P
,
VER_B
Ë
VER_D


	)

71 
	#VERSION_NAME_MAXLEN
 64

	)

72 
	shiMPP_VERSION_S


74 
HI_CHAR
 
aVîsi⁄
[
VERSION_NAME_MAXLEN
];

75 } 
	tMPP_VERSION_S
;

77 
	shiPOINT_S


79 
HI_S32
 
s32X
;

80 
HI_S32
 
s32Y
;

81 } 
	tPOINT_S
;

83 
	shiSIZE_S


85 
HI_U32
 
u32Width
;

86 
HI_U32
 
u32Height
;

87 } 
	tSIZE_S
;

89 
	shiRECT_S


91 
HI_S32
 
s32X
;

92 
HI_S32
 
s32Y
;

93 
HI_U32
 
u32Width
;

94 
HI_U32
 
u32Height
;

95 } 
	tRECT_S
;

97 
	shiCROP_INFO_S


99 
HI_BOOL
 
bE«bÀ
;

100 
RECT_S
 
°Re˘
;

101 } 
	tCROP_INFO_S
;

103 
	ehiROTATE_E


105 
ROTATE_NONE
 = 0,

106 
ROTATE_90
 = 1,

107 
ROTATE_180
 = 2,

108 
ROTATE_270
 = 3,

109 
ROTATE_BUTT


110 } 
	tROTATE_E
;

112 
	shiBORDER_S


114 
HI_U32
 
u32T›Width
;

115 
HI_U32
 
u32BŸtomWidth
;

116 
HI_U32
 
u32Le·Width
;

117 
HI_U32
 
u32RightWidth
;

118 
HI_U32
 
u32Cﬁ‹
;

119 } 
	tBORDER_S
;

121 
HI_S32
 
	tAI_CHN
;

122 
HI_S32
 
	tAO_CHN
;

123 
HI_S32
 
	tAENC_CHN
;

124 
HI_S32
 
	tADEC_CHN
;

125 
HI_S32
 
	tAUDIO_DEV
;

126 
HI_S32
 
	tAVENC_CHN
;

127 
HI_S32
 
	tVI_DEV
;

128 
HI_S32
 
	tVI_WAY
;

129 
HI_S32
 
	tVI_CHN
;

130 
HI_S32
 
	tVO_DEV
;

131 
HI_S32
 
	tVO_LAYER
;

132 
HI_S32
 
	tVO_CHN
;

133 
HI_S32
 
	tVO_WBC
;

134 
HI_S32
 
	tGRAPHIC_LAYER
;

135 
HI_S32
 
	tVENC_CHN
;

136 
HI_S32
 
	tVDEC_CHN
;

137 
HI_S32
 
	tVENC_GRP
;

138 
HI_S32
 
	tVO_GRP
;

139 
HI_S32
 
	tVDA_CHN
;

140 
HI_S32
 
	tIVE_HANDLE
;

141 
HI_S32
 
	tISP_DEV
;

142 
HI_S32
 
	tSENSOR_ID
;

143 
HI_S32
 
	tFD_HANDLE
;

144 
HI_S32
 
	tMD_CHN
;

146 
	#HI_INVALID_CHN
 (-1)

	)

147 
	#HI_INVALID_WAY
 (-1)

	)

148 
	#HI_INVALID_LAYER
 (-1)

	)

149 
	#HI_INVALID_DEV
 (-1)

	)

150 
	#HI_INVALID_HANDLE
 (-1)

	)

151 
	#HI_INVALID_VALUE
 (-1)

	)

152 
	#HI_INVALID_TYPE
 (-1)

	)

154 
	ehiMOD_ID_E


156 
HI_ID_CMPI
 = 0,

157 
HI_ID_VB
 = 1,

158 
HI_ID_SYS
 = 2,

159 
HI_ID_RGN
 = 3,

160 
HI_ID_CHNL
 = 4,

161 
HI_ID_VDEC
 = 5,

162 
HI_ID_GROUP
 = 6,

163 
HI_ID_VPSS
 = 7,

164 
HI_ID_VENC
 = 8,

165 
HI_ID_VDA
 = 9,

166 
HI_ID_H264E
 = 10,

167 
HI_ID_JPEGE
 = 11,

168 
HI_ID_MPEG4E
 = 12,

169 
HI_ID_H264D
 = 13,

170 
HI_ID_JPEGD
 = 14,

171 
HI_ID_VOU
 = 15,

172 
HI_ID_VIU
 = 16,

173 
HI_ID_DSU
 = 17,

174 
HI_ID_VALG
 = 18,

175 
HI_ID_RC
 = 19,

176 
HI_ID_AIO
 = 20,

177 
HI_ID_AI
 = 21,

178 
HI_ID_AO
 = 22,

179 
HI_ID_AENC
 = 23,

180 
HI_ID_ADEC
 = 24,

181 
HI_ID_AVENC
 = 25,

182 
HI_ID_PCIV
 = 26,

183 
HI_ID_PCIVFMW
 = 27,

184 
HI_ID_ISP
 = 28,

185 
HI_ID_IVE
 = 29,

187 
HI_ID_DCCM
 = 31,

188 
HI_ID_DCCS
 = 32,

189 
HI_ID_PROC
 = 33,

190 
HI_ID_LOG
 = 34,

191 
HI_ID_MST_LOG
 = 35,

192 
HI_ID_VD
 = 36,

194 
HI_ID_VCMP
 = 38,

195 
HI_ID_FB
 = 39,

196 
HI_ID_HDMI
 = 40,

197 
HI_ID_VOIE
 = 41,

198 
HI_ID_TDE
 = 42,

199 
HI_ID_USR
 = 43,

200 
HI_ID_VEDU
 = 44,

201 
HI_ID_VGS
 = 45,

202 
HI_ID_H265E
 = 46,

203 
HI_ID_FD
 = 47,

204 
HI_ID_ODT
 = 48,

205 
HI_ID_VQA
 = 49,

206 
HI_ID_LPR
 = 50,

208 
HI_ID_BUTT
,

209 } 
	tMOD_ID_E
;

211 
	shiMPP_CHN_S


213 
MOD_ID_E
 
íModId
;

214 
HI_S32
 
s32DevId
;

215 
HI_S32
 
s32ChnId
;

216 } 
	tMPP_CHN_S
;

219 
	ehiPROFILE_TYPE_E


221 
PROFILE_1080P_30
 = 0,

222 
PROFILE_3M_30
,

223 
PROFILE_1080P_60
,

224 
PROFILE_5M_30
,

225 
PROFILE_BUTT
,

226 } 
	tPROFILE_TYPE_E
;

228 
	#MPP_MOD_VIU
 "vi"

	)

229 
	#MPP_MOD_VOU
 "vo"

	)

230 
	#MPP_MOD_HDMI
 "hdmi"

	)

231 
	#MPP_MOD_DSU
 "dsu"

	)

232 
	#MPP_MOD_VGS
 "vgs"

	)

234 
	#MPP_MOD_CHNL
 "ch∆"

	)

235 
	#MPP_MOD_VENC
 "víc"

	)

236 
	#MPP_MOD_GRP
 "gΩ"

	)

237 
	#MPP_MOD_VDA
 "vda"

	)

238 
	#MPP_MOD_VPSS
 "vpss"

	)

239 
	#MPP_MOD_RGN
 "rgn"

	)

240 
	#MPP_MOD_IVE
 "ive"

	)

241 
	#MPP_MOD_FD
 "fd"

	)

243 
	#MPP_MOD_H264E
 "h264e"

	)

244 
	#MPP_MOD_H265E
 "h265e"

	)

245 
	#MPP_MOD_JPEGE
 "j≥ge"

	)

246 
	#MPP_MOD_MPEG4E
 "m≥g4e"

	)

248 
	#MPP_MOD_VDEC
 "vdec"

	)

249 
	#MPP_MOD_H264D
 "h264d"

	)

250 
	#MPP_MOD_JPEGD
 "j≥gd"

	)

252 
	#MPP_MOD_AI
 "ai"

	)

253 
	#MPP_MOD_AO
 "ao"

	)

254 
	#MPP_MOD_AENC
 "´nc"

	)

255 
	#MPP_MOD_ADEC
 "adec"

	)

256 
	#MPP_MOD_AIO
 "aio"

	)

257 
	#MPP_MOD_ACODEC
 "acodec"

	)

259 
	#MPP_MOD_VB
 "vb"

	)

260 
	#MPP_MOD_SYS
 "sys"

	)

261 
	#MPP_MOD_CMPI
 "cmpi"

	)

263 
	#MPP_MOD_PCIV
 "pciv"

	)

264 
	#MPP_MOD_PCIVFMW
 "pcivfmw"

	)

266 
	#MPP_MOD_PROC
 "¥oc"

	)

267 
	#MPP_MOD_LOG
 "logmµ"

	)

268 
	#MPP_MOD_MST_LOG
 "m°log"

	)

270 
	#MPP_MOD_DCCM
 "dccm"

	)

271 
	#MPP_MOD_DCCS
 "dccs"

	)

273 
	#MPP_MOD_VCMP
 "vcmp"

	)

274 
	#MPP_MOD_FB
 "fb"

	)

276 
	#MPP_MOD_RC
 "rc"

	)

278 
	#MPP_MOD_VOIE
 "voõ"

	)

280 
	#MPP_MOD_TDE
 "tde"

	)

281 
	#MPP_MOD_ISP
 "i•"

	)

282 
	#MPP_MOD_USR
 "u§"

	)

287 
PT_PCMU
 = 0,

288 
PT_1016
 = 1,

289 
PT_G721
 = 2,

290 
PT_GSM
 = 3,

291 
PT_G723
 = 4,

292 
PT_DVI4_8K
 = 5,

293 
PT_DVI4_16K
 = 6,

294 
PT_LPC
 = 7,

295 
PT_PCMA
 = 8,

296 
PT_G722
 = 9,

297 
PT_S16BE_STEREO
 = 10,

298 
PT_S16BE_MONO
 = 11,

299 
PT_QCELP
 = 12,

300 
PT_CN
 = 13,

301 
PT_MPEGAUDIO
 = 14,

302 
PT_G728
 = 15,

303 
PT_DVI4_3
 = 16,

304 
PT_DVI4_4
 = 17,

305 
PT_G729
 = 18,

306 
PT_G711A
 = 19,

307 
PT_G711U
 = 20,

308 
PT_G726
 = 21,

309 
PT_G729A
 = 22,

310 
PT_LPCM
 = 23,

311 
PT_CñB
 = 25,

312 
PT_JPEG
 = 26,

313 
PT_CUSM
 = 27,

314 
PT_NV
 = 28,

315 
PT_PICW
 = 29,

316 
PT_CPV
 = 30,

317 
PT_H261
 = 31,

318 
PT_MPEGVIDEO
 = 32,

319 
PT_MPEG2TS
 = 33,

320 
PT_H263
 = 34,

321 
PT_SPEG
 = 35,

322 
PT_MPEG2VIDEO
 = 36,

323 
PT_AAC
 = 37,

324 
PT_WMA9STD
 = 38,

325 
PT_HEAAC
 = 39,

326 
PT_PCM_VOICE
 = 40,

327 
PT_PCM_AUDIO
 = 41,

328 
PT_AACLC
 = 42,

329 
PT_MP3
 = 43,

330 
PT_ADPCMA
 = 49,

331 
PT_AEC
 = 50,

332 
PT_X_LD
 = 95,

333 
PT_H264
 = 96,

334 
PT_D_GSM_HR
 = 200,

335 
PT_D_GSM_EFR
 = 201,

336 
PT_D_L8
 = 202,

337 
PT_D_RED
 = 203,

338 
PT_D_VDVI
 = 204,

339 
PT_D_BT656
 = 220,

340 
PT_D_H263_1998
 = 221,

341 
PT_D_MP1S
 = 222,

342 
PT_D_MP2P
 = 223,

343 
PT_D_BMPEG
 = 224,

344 
PT_MP4VIDEO
 = 230,

345 
PT_MP4AUDIO
 = 237,

346 
PT_VC1
 = 238,

347 
PT_JVC_ASF
 = 255,

348 
PT_D_AVI
 = 256,

349 
PT_DIVX3
 = 257,

350 
PT_AVS
 = 258,

351 
PT_REAL8
 = 259,

352 
PT_REAL9
 = 260,

353 
PT_VP6
 = 261,

354 
PT_VP6F
 = 262,

355 
PT_VP6A
 = 263,

356 
PT_SORENSON
 = 264,

357 
PT_H265
 = 265,

358 
PT_MAX
 = 266,

360 
PT_AMR
 = 1001,

361 
PT_MJPEG
 = 1002,

362 
PT_AMRWB
 = 1003,

363 
PT_BUTT


364 } 
	tPAYLOAD_TYPE_E
;

366 #ifde‡
__˝lu•lus


367 #i‡
__˝lu•lus


	@include/hi_debug.h

36 #i‚de‡
__HI_DEBUG_H__


37 
	#__HI_DEBUG_H__


	)

39 #i‚de‡
__KERNEL__


40 
	~<°d¨g.h
>

43 
	~"hi_ty≥.h
"

44 
	~"hi_comm⁄.h
"

46 #ifde‡
__˝lu•lus


47 #i‡
__˝lu•lus


52 
	#_EX__FILE_LINE
(
fxx
,
lxx
Ë"[Fûe]:"fxx"\n[Löe]:"#lxx"\n[Info]:"

	)

53 
	#EX__FILE_LINE
(
fxx
,
lxx
Ë
	`_EX__FILE_LINE
(fxx,lxx)

	)

54 
	#__FILE_LINE__
 
	`EX__FILE_LINE
(
__FILE__
, 
__LINE__
)

	)

56 
	#HI_DBG_EMERG
 0

	)

57 
	#HI_DBG_ALERT
 1

	)

58 
	#HI_DBG_CRIT
 2

	)

59 
	#HI_DBG_ERR
 3

	)

60 
	#HI_DBG_WARN
 4

	)

61 
	#HI_DBG_NOTICE
 5

	)

62 
	#HI_DBG_INFO
 6

	)

63 
	#HI_DBG_DEBUG
 7

	)

65 
	shiLOG_LEVEL_CONF_S


67 
MOD_ID_E
 
íModId
;

68 
HI_S32
 
s32Levñ
;

69 
HI_CHAR
 
cModName
[16];

70 } 
	tLOG_LEVEL_CONF_S
;

72 #i‚de‡
__KERNEL__


77 
	#HI_PRINT
 
¥ötf


	)

82 
	#HI_ASSERT
(
ex¥
) \

84 i‡(!(
ex¥
)) { \

85 
	`¥ötf
("\nASSERT failedát:\n"\

90 
__FILE__
,
__FUNCTION__
, 
__LINE__
, #expr);\

91 
	`_exô
(-1);\

93 }0)

	)

98 
	#HI_TRACE
(
Àvñ
, 
íModId
, 
fmt
...Ë
	`Ârötf
(
°dîr
,##fmt)

	)

100 
	#HI_ASSERT
(
ex¥
)

	)

101 
	#HI_TRACE
(
Àvñ
, 
íModId
, 
fmt
...)

	)

109 
	#HI_PRINT
 
¥ötk


	)

111 
HI_S32
 
HI_ChkLogLevñ
(HI_S32 
s32LevÀ
, 
MOD_ID_E
 
íModId
);

112 
asmlökage
 
HI_LOG
(
HI_S32
 
Àvñ
, 
MOD_ID_E
 
íModId
,c⁄° *
fmt
, ...);

117 
	#HI_ASSERT
(
ex¥
) \

119 i‡(!(
ex¥
)) { \

120 
	`∑nic
("\nASSERT failedát:\n" \

125 
__FILE__
,
__FUNCTION__
, 
__LINE__
, #expr);\

127 }0)

	)

132 
	#HI_TRACE
 
HI_LOG


	)

134 
	#HI_ASSERT
(
ex¥
)

	)

135 
	#HI_TRACE
(
Àvñ
, 
íModId
, 
fmt
...)

	)

140 #ifde‡
__˝lu•lus


141 #i‡
__˝lu•lus


	@include/hi_defines.h

13 #i‚de‡
__HI_DEFINES_H__


14 
	#__HI_DEFINES_H__


	)

16 #ifde‡
__˝lu•lus


17 #i‡
__˝lu•lus


23 
	#HI3516A_V100
 0x3516A100

	)

25 
	#HI35xx_Vxxx
 0x35000000

	)

27 #i‚de‡
HICHIP


28 
	#HICHIP
 
HI3516A_V100


	)

31 #i‡
HICHIP
==
HI3516A_V100


32 
	#CHIP_NAME
 "Hi3516A"

	)

33 
	#MPP_VER_PRIX
 "_MPP_V"

	)

34 #ñi‡
HICHIP
==
HI35xx_Vxxx


35 #îr‹ 
HuHu
, 
I
 
am
 
™
 
dummy
 
chù


37 #îr‹ 
HICHIP
 
deföe
 
may
 
be
 
îr‹


40 
	#LINE_LEN_BIT
 5

	)

41 
	#LINE_LEN
 (1<<
LINE_LEN_BIT
)

	)

42 
	#LINE_BASE_MASK
 (~(
LINE_LEN
-1))

	)

43 
ölöe
 
InvÆid©eDˇche
(
addr
, 
Àn
)

45 
íd
;

49 
addr
 &
LINE_BASE_MASK
;

50 
Àn
 >>
LINE_LEN_BIT
;

51 
íd
 = 
addr
 + 
Àn
*
LINE_LEN
;

53 
addr
 !
íd
)

55 
asm
("m¸Ö15, 0, %0, c7, c6, 1"::"r"(
addr
));

56 
addr
 +
LINE_LEN
;

61 
ölöe
 
FlushDˇche
(
addr
, 
Àn
)

63 
íd
;

68 
addr
 &
LINE_BASE_MASK
;

69 
Àn
 >>
LINE_LEN_BIT
;

70 
íd
 = 
addr
 + 
Àn
*
LINE_LEN
;

72 
addr
 !
íd
)

74 
asm
("m¸Ö15, 0, %0, c7, c10, 1"::"r"(
addr
));

75 
addr
 +
LINE_LEN
;

80 
	#DEFAULT_ALIGN
 16

	)

81 
	#MAX_MMZ_NAME_LEN
 16

	)

83 
	#MAX_NODE_NUM
 16

	)

86 
	#VDA_MAX_NODE_NUM
 32

	)

87 
	#VDA_MAX_INTERNAL
 256

	)

88 
	#VDA_CHN_NUM_MAX
 32

	)

89 
	#VDA_MAX_WIDTH
 960

	)

90 
	#VDA_MAX_HEIGHT
 960

	)

91 
	#VDA_MIN_WIDTH
 32

	)

92 
	#VDA_MIN_HEIGHT
 32

	)

95 
	#VENC_MAX_NAME_LEN
 16

	)

96 
	#VENC_MAX_CHN_NUM
 16

	)

97 
	#VENC_MAX_GRP_NUM
 16

	)

98 
	#H264E_MAX_WIDTH
 2592

	)

99 
	#H264E_MAX_HEIGHT
 2592

	)

100 
	#H264E_MIN_WIDTH
 160

	)

101 
	#H264E_MIN_HEIGHT
 64

	)

102 
	#H265E_MAX_WIDTH
 2592

	)

103 
	#H265E_MAX_HEIGHT
 2592

	)

104 
	#H265E_MIN_WIDTH
 128

	)

105 
	#H265E_MIN_HEIGHT
 128

	)

106 
	#JPEGE_MAX_WIDTH
 8192

	)

107 
	#JPEGE_MAX_HEIGHT
 8192

	)

108 
	#JPEGE_MIN_WIDTH
 32

	)

109 
	#JPEGE_MIN_HEIGHT
 32

	)

110 
	#VENC_MAX_ROI_NUM
 8

	)

111 
	#H264E_MIN_HW_INDEX
 0

	)

112 
	#H264E_MAX_HW_INDEX
 11

	)

113 
	#H264E_MIN_VW_INDEX
 0

	)

114 
	#H264E_MAX_VW_INDEX
 3

	)

120 
	#RC_TEXTURE_THR_SIZE
 12

	)

121 
	#RC_RQRATIO_SIZE
 8

	)

125 
	#VDEC_MAX_CHN_NUM
 0

	)

129 
	#RGN_MIN_WIDTH
 2

	)

130 
	#RGN_MIN_HEIGHT
 2

	)

131 
	#RGN_MAX_WIDTH
 2592

	)

132 
	#RGN_MAX_HEIGHT
 2592

	)

133 
	#RGN_ALIGN
 2

	)

135 
	#RGN_HANDLE_MAX
 1024

	)

137 
	#COVER_MAX_NUM_VI
 0

	)

138 
	#COVEREX_MAX_NUM_VI
 16

	)

139 
	#OVERLAY_MAX_NUM_VI
 0

	)

140 
	#OVERLAYEX_MAX_NUM_VI
 16

	)

142 
	#OVERLAY_MAX_NUM_VENC
 8

	)

144 
	#COVER_MAX_NUM_VPSS
 8

	)

145 
	#COVEREX_MAX_NUM_VPSS
 8

	)

146 
	#OVERLAY_MAX_NUM_VPSS
 1

	)

147 
	#OVERLAYEX_MAX_NUM_VPSS
 8

	)

149 
	#OVERLAYEX_MAX_NUM_VGS
 1

	)

150 
	#COVER_MAX_NUM_VGS
 1

	)

153 
	#COVEREX_MAX_NUM_VO
 1

	)

154 
	#OVERLAYEX_MAX_NUM_VO
 1

	)

156 
	#OVERLAYEX_MAX_NUM_PCIV
 0

	)

163 
	#VIU_MAX_DEV_NUM
 1

	)

164 
	#VIU_MAX_WAY_NUM_PER_DEV
 1

	)

165 
	#VIU_MAX_CHN_NUM_PER_DEV
 1

	)

166 
	#VIU_MAX_PHYCHN_NUM
 1

	)

167 
	#VIU_MAX_RAWCHN_NUM
 1

	)

168 
	#VIU_EXT_CHN_START
 
VIU_MAX_PHYCHN_NUM


	)

169 
	#VIU_MAX_EXT_CHN_NUM
 16

	)

170 
	#VIU_MAX_EXTCHN_BIND_PER_CHN
 8

	)

172 
	#VIU_MAX_CHN_NUM
 (
VIU_MAX_PHYCHN_NUM
 + 
VIU_MAX_EXT_CHN_NUM
)

	)

173 
	#VIU_MAX_UFLIST_NUM
 (
VIU_MAX_CHN_NUM
 + 
VIU_MAX_RAWCHN_NUM
)

	)

175 
	#VIU_CHNID_DEV_FACTOR
 2

	)

178 
	#VIU_MAX_CAS_CHN_NUM
 2

	)

179 
	#VIU_SUB_CHN_START
 16

	)

180 
	#VIU_CAS_CHN_START
 32

	)

183 
	#VIU_MAX_VBI_NUM
 2

	)

185 
	#VIU_MAX_VBI_LEN
 8

	)

187 
	#VO_MIN_CHN_WIDTH
 32

	)

188 
	#VO_MIN_CHN_HEIGHT
 32

	)

190 
	#VO_MAX_ZOOM_RATIO
 1000

	)

192 
	#VO_MAX_DEV_NUM
 1

	)

193 
	#VO_MAX_LAYER_NUM
 1

	)

194 
	#PIP_MAX_CHN_NUM
 8

	)

195 
	#VHD_MAX_CHN_NUM
 32

	)

196 
	#VO_MAX_CHN_NUM
 
VHD_MAX_CHN_NUM


	)

197 
	#VO_MAX_LAYER_IN_DEV
 1

	)

198 
	#VO_MIN_CHN_LINE
 3

	)

201 
	#VO_MAX_GFX_LAYER_PER_DEV
 1

	)

202 
	#VO_MAX_GRAPHICS_LAYER_NUM
 1

	)

203 
	#MDDRC_ZONE_MAX_NUM
 32

	)

205 
	#VO_MAX_PRIORITY
 2

	)

206 
	#VO_MIN_TOLERATE
 1

	)

207 
	#VO_MAX_TOLERATE
 100000

	)

209 
	#AI_DEV_MAX_NUM
 1

	)

210 
	#AO_DEV_MIN_NUM
 0

	)

211 
	#AO_DEV_MAX_NUM
 1

	)

212 
	#AIO_MAX_NUM
 1

	)

213 
	#AIO_MAX_CHN_NUM
 16

	)

214 
	#AENC_MAX_CHN_NUM
 32

	)

215 
	#ADEC_MAX_CHN_NUM
 32

	)

218 
	#VPSS_MAX_GRP_NUM
 128

	)

220 
	#VPSS_MAX_PHY_CHN_NUM
 4

	)

221 
	#VPSS_MAX_EXT_CHN_NUM
 8

	)

222 
	#VPSS_MAX_CHN_NUM
 (
VPSS_MAX_PHY_CHN_NUM
 + 
VPSS_MAX_EXT_CHN_NUM
)

	)

224 
	#VPSS_BSTR_CHN
 0

	)

225 
	#VPSS_LSTR_CHN
 1

	)

226 
	#VPSS_PRE0_CHN
 2

	)

228 
	#VPSS_COVER_POINT_NUM
 4

	)

231 
	#PCIV_MAX_CHN_NUM
 0

	)

243 
	#VB_W_ALIGN
 16

	)

244 
	#VB_H_ALIGN
 2

	)

245 
	#VB_HEADER_STRIDE
 16

	)

246 
	#VB_ALIGN
(
x
, 
a
Ë(◊Ë* (((xË+ (aË- 1Ë/ (a)))

	)

248 
	#VB_PIC_Y_HEADER_SIZE
(
Width
, 
Height
, 
size
)\

250 
size
 = 
VB_HEADER_STRIDE
 * (
Height
);\

251 }0)

	)

253 
	#VB_PIC_HEADER_SIZE
(
Width
, 
Height
, 
Ty≥
, 
size
)\

255 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
Ty≥
)\

257 
size
 = 
VB_HEADER_STRIDE
 * (
Height
) * 2;\

261 
size
 = (
VB_HEADER_STRIDE
 * (
Height
) * 3) >> 1;\

263 }0)

	)

265 
	#VB_PIC_BLK_SIZE
(
Width
, 
Height
, 
Ty≥
, 
size
)\

267 
u32AlignWidth
;\

268 
u32AlignHeight
;\

269 
u32HódSize
;\

270 
u32AlignWidth
 = 
	`VB_ALIGN
(
Width
, 16);\

271 
u32AlignHeight

	`VB_ALIGN
(
Height
, 2);\

272 
u32HódSize
 = 
VB_HEADER_STRIDE
 * 
u32AlignHeight
; \

273 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
Ty≥
)\

275 
size
 = (
u32AlignWidth
 * 
u32AlignHeight
 + 
u32HódSize
) * 2;\

277 i‡(
PIXEL_FORMAT_SINGLE
 =
Ty≥
)\

279 
size
 = (
u32AlignWidth
 * 
u32AlignHeight
 + 
u32HódSize
);\

283 
size
 = ((
u32AlignWidth
 * 
u32AlignHeight
 + 
u32HódSize
) * 3) >> 1;\

285 }0)

	)

287 
	#VIU_GET_RAW_CHN
(
ViDev
, 
RawChn
)\

289 
RawChn
 = 
VIU_MAX_CHN_NUM
 + 
ViDev
;\

290 }0)

	)

292 #ifde‡
__˝lu•lus


293 #i‡
__˝lu•lus


	@include/hi_errno.h

34 #i‚de‡
__HI_ERRNO_H__


35 
	#__HI_ERRNO_H__


	)

37 
	~"hi_debug.h
"

39 #ifde‡
__˝lu•lus


40 #i‡
__˝lu•lus


50 
	#HI_ERR_APPID
 (0x80000000L + 0x20000000L)

	)

52 
	ehiERR_LEVEL_E


54 
EN_ERR_LEVEL_DEBUG
 = 0,

55 
EN_ERR_LEVEL_INFO
,

56 
EN_ERR_LEVEL_NOTICE
,

57 
EN_ERR_LEVEL_WARNING
,

58 
EN_ERR_LEVEL_ERROR
,

59 
EN_ERR_LEVEL_CRIT
,

60 
EN_ERR_LEVEL_ALERT
,

61 
EN_ERR_LEVEL_FATAL
,

62 
EN_ERR_LEVEL_BUTT


63 }
	tERR_LEVEL_E
;

73 
	#HI_DEF_ERR
–
moduÀ
, 
Àvñ
, 
îrid
) \

74 ((
HI_S32
)–(
HI_ERR_APPID
Ë| ((
moduÀ
Ë<< 16 ) | ((
Àvñ
)<<13Ë| (
îrid
Ë))

	)

79 
	ehiEN_ERR_CODE_E


81 
EN_ERR_INVALID_DEVID
 = 1,

82 
EN_ERR_INVALID_CHNID
 = 2,

83 
EN_ERR_ILLEGAL_PARAM
 = 3,

85 
EN_ERR_EXIST
 = 4,

86 
EN_ERR_UNEXIST
 = 5,

88 
EN_ERR_NULL_PTR
 = 6,

90 
EN_ERR_NOT_CONFIG
 = 7,

93 
EN_ERR_NOT_SUPPORT
 = 8,

94 
EN_ERR_NOT_PERM
 = 9,

97 
EN_ERR_NOMEM
 = 12,

98 
EN_ERR_NOBUF
 = 13,

100 
EN_ERR_BUF_EMPTY
 = 14,

101 
EN_ERR_BUF_FULL
 = 15,

103 
EN_ERR_SYS_NOTREADY
 = 16,

107 
EN_ERR_BADADDR
 = 17,

110 
EN_ERR_BUSY
 = 18,

113 
EN_ERR_BUTT
 = 63,

115 }
	tEN_ERR_CODE_E
;

124 #ifde‡
__˝lu•lus


125 #i‡
__˝lu•lus


	@include/hi_i2c.h

1 #i‚de‡
_HI_I2C_H


2 
	#_HI_I2C_H


	)

12 
	#I2C_RETRIES
 0x0701

	)

14 
	#I2C_TIMEOUT
 0x0702

	)

19 
	#I2C_SLAVE
 0x0703

	)

20 
	#I2C_SLAVE_FORCE
 0x0706

	)

22 
	#I2C_TENBIT
 0x0704

	)

24 
	#I2C_FUNCS
 0x0705

	)

26 
	#I2C_RDWR
 0x0707

	)

28 
	#I2C_PEC
 0x0708

	)

29 
	#I2C_SMBUS
 0x0720

	)

30 
	#I2C_16BIT_REG
 0x0709

	)

31 
	#I2C_16BIT_DATA
 0x070®

	)

33 
	shiI2C_DATA_S


35 
	mdev_addr
;

36 
	mªg_addr
;

37 
	maddr_byã_num
;

38 
	md©a
;

39 
	md©a_byã_num
;

40 }
	tI2C_DATA_S
;

	@include/hi_io.h

1 #i‚de‡
__HI_IO_H__


2 
	#__HI_IO_H__


	)

4 
	~"hi_ty≥.h
"

6 #ifde‡
__˝lu•lus


12 
HI_U8
 
IO_READ8
(
HI_U32
 
u32Addr
);

13 
HI_S32
 
IO_WRITE8
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

14 
HI_U16
 
IO_READ16
(
HI_U32
 
u32Addr
);

15 
HI_S32
 
IO_WRITE16
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

16 
HI_U32
 
IO_READ32
(HI_U32 
u32Addr
);

17 
HI_S32
 
IO_WRITE32
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

18 
HI_U32
 
ISP_Mm≠
();

19 
HI_U32
 
ISP_Munm≠
();

20 
HI_U32
 
ISP_GëExtRegAddr
();

25 
__ölöe
 
HI_VOID
 
HI_RegWrôe32
(
vÆue
, 
mask
,

26 
HI_U32
 
addr
)

28 
t
;

30 
t
 = 
ªadl
(
addr
);

31 
t
 &~
mask
;

32 
t
 |
vÆue
 & 
mask
;

33 
wrôñ
(
t
, 
addr
);

36 
__ölöe
 
HI_VOID
 
HI_RegSëBôEx
(
vÆue
, 
off£t
,

37 
Àngth
, 
addr
)

39 
mask
;

40 
mask
 = ((1 << 
Àngth
Ë- 1Ë<< 
off£t
;

41 
vÆue
 = vÆuê<< 
off£t
;

42 
HI_RegWrôe32
(
vÆue
, 
mask
, 
addr
);

45 
__ölöe
 
HI_VOID
 
HI_RegRód
(*
pvÆue
, 
addr
)

47 *
pvÆue
 = 
ªadl
(
addr
);

50 
	#REG_ACCESS_WIDTH
 0

51 
	#EXT_REG_BASE
 0x10200

	)

52 
	#ISP_REG_BASE_ADDR
 0x205a0000

	)

54 
	#EXT_REG_BASE_ISP
 0x8000

	)

55 
	#EXT_REG_BASE_VIU
 0x8400

	)

56 
	#EXT_REG_BASE_VPP
 0x8600

	)

57 
	#EXT_REG_BASE_VEDU
 0x8800

	)

58 
	#EXT_REG_BASE_VOU
 0x8A00

	)

62 
	#__IO_CALC_ADDRESS_DYNAMIC
(
BASE
, 
OFFSET
Ë((
HI_U32
)(((BASE >
EXT_REG_BASE
)? 0 : 
ISP_REG_BASE_ADDR
Ë+ ((((BASE >EXT_REG_BASE)? (BASE - EXT_REG_BASEË: BASEË+ OFFSET)<<
REG_ACCESS_WIDTH
)))

	)

64 
	#IORD_32DIRECT
(
BASE
, 
OFFSET
Ë
	`IO_READ32
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)))

	)

65 
	#IORD_16DIRECT
(
BASE
, 
OFFSET
Ë
	`IO_READ16
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)))

	)

66 
	#IORD_8DIRECT
(
BASE
, 
OFFSET
Ë
	`IO_READ8
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)))

	)

68 
	#IOWR_32DIRECT
(
BASE
, 
OFFSET
, 
DATA
Ë
	`IO_WRITE32
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)), (DATA))

	)

69 
	#IOWR_16DIRECT
(
BASE
, 
OFFSET
, 
DATA
Ë
	`IO_WRITE16
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)), (DATA))

	)

70 
	#IOWR_8DIRECT
(
BASE
, 
OFFSET
, 
DATA
Ë
	`IO_WRITE8
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)), (DATA))

	)

73 #ifde‡
__˝lu•lus


	@include/hi_isp_bin.h

18 #i‚de‡
__HI_ISP_BIN_H__


19 
	#__HI_ISP_BIN_H__


	)

21 
	~"hi_ty≥.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


32 
	#MAX_BIN_REG_NUM
 6

	)

37 
	shiISP_BIN_REG_ATTR_S


39 
HI_U32
 
u32Addr
;

40 
HI_U8
 
u8SèπBô
;

41 
HI_U8
 
u8EndBô
;

42 } 
	tISP_BIN_REG_ATTR_S
;

48 
ISP_BIN_REG_ATTR_S
 
g_a°I•BöRegAâr
[
MAX_BIN_REG_NUM
] =

62 #ifde‡
__˝lu•lus


63 #i‡
__˝lu•lus


	@include/hi_isp_debug.h

18 #i‚de‡
__HI_ISP_DEBUG_H__


19 
	#__HI_ISP_DEBUG_H__


	)

21 
	~"hi_debug.h
"

24 
	#PRINT_DEBUG_INFO


	)

28 
	#PRINT_INFO_2FILE


	)

31 
	#ISP_TRACE
(
Àvñ
, 
fmt
...)\

33 
	`HI_TRACE
(
Àvñ
,
HI_ID_ISP
,"[Func]:%†[Löe]:%d [Info]:",
__FUNCTION__
, 
__LINE__
);\

34 
	`HI_TRACE
(
Àvñ
,
HI_ID_ISP
,##
fmt
);\

35 }0)

	)

38 
	#DIV_0_TO_1
(
a
Ë–(0 =◊)Ë? 1 : (aË)

	)

	@include/hi_ive.h

16 #i‚de‡
_HI_IVE_H_


17 
	#_HI_IVE_H_


	)

19 #ifde‡
__˝lu•lus


20 #i‡
__˝lu•lus


25 
	~"hi_comm_ive.h
"

27 
	~"hi_comm⁄.h
"

30 
	#IVE_HIST_NUM
 256

	)

31 
	#IVE_MAP_NUM
 256

	)

32 
	#IVE_MAX_REGION_NUM
 254

	)

33 
	#IVE_ST_MAX_CORNER_NUM
 200

	)

38 
	ehiIVE_DMA_MODE_E


40 
IVE_DMA_MODE_DIRECT_COPY
 = 0x0,

41 
IVE_DMA_MODE_INTERVAL_COPY
 = 0x1,

42 
IVE_DMA_MODE_SET_3BYTE
 = 0x2,

43 
IVE_DMA_MODE_SET_8BYTE
 = 0x3,

44 
IVE_DMA_MODE_BUTT


45 }
	tIVE_DMA_MODE_E
;

50 
	shiIVE_DMA_CTRL_S


52 
IVE_DMA_MODE_E
 
íMode
;

53 
HI_U64
 
u64VÆ
;

54 
HI_U8
 
u8H‹SegSize
;

55 
HI_U8
 
u8EÀmSize
;

56 
HI_U8
 
u8VîSegRows
;

57 }
	tIVE_DMA_CTRL_S
;

64 
	shiIVE_FILTER_CTRL_S


66 
HI_S8
 
as8Mask
[25];

67 
HI_U8
 
u8N‹m
;

68 }
	tIVE_FILTER_CTRL_S
;

74 
	ehiIVE_CSC_MODE_E


76 
IVE_CSC_MODE_VIDEO_BT601_YUV2RGB
 = 0x0,

77 
IVE_CSC_MODE_VIDEO_BT709_YUV2RGB
 = 0x1,

78 
IVE_CSC_MODE_PIC_BT601_YUV2RGB
 = 0x2,

79 
IVE_CSC_MODE_PIC_BT709_YUV2RGB
 = 0x3,

81 
IVE_CSC_MODE_PIC_BT601_YUV2HSV
 = 0x4,

82 
IVE_CSC_MODE_PIC_BT709_YUV2HSV
 = 0x5,

84 
IVE_CSC_MODE_PIC_BT601_YUV2LAB
 = 0x6,

85 
IVE_CSC_MODE_PIC_BT709_YUV2LAB
 = 0x7,

87 
IVE_CSC_MODE_VIDEO_BT601_RGB2YUV
 = 0x8,

88 
IVE_CSC_MODE_VIDEO_BT709_RGB2YUV
 = 0x9,

89 
IVE_CSC_MODE_PIC_BT601_RGB2YUV
 = 0xa,

90 
IVE_CSC_MODE_PIC_BT709_RGB2YUV
 = 0xb,

92 
IVE_CSC_MODE_BUTT


93 }
	tIVE_CSC_MODE_E
;

101 
	shiIVE_CSC_CTRL_S


103 
IVE_CSC_MODE_E
 
íMode
;

104 }
	tIVE_CSC_CTRL_S
;

112 
	shiIVE_FILTER_AND_CSC_CTRL_S


114 
IVE_CSC_MODE_E
 
íMode
;

115 
HI_S8
 
as8Mask
[25];

116 
HI_U8
 
u8N‹m
;

117 }
	tIVE_FILTER_AND_CSC_CTRL_S
;

122 
	ehiIVE_SOBEL_OUT_CTRL_E


124 
IVE_SOBEL_OUT_CTRL_BOTH
 = 0x0,

125 
IVE_SOBEL_OUT_CTRL_HOR
 = 0x1,

126 
IVE_SOBEL_OUT_CTRL_VER
 = 0x2,

127 
IVE_SOBEL_OUT_CTRL_BUTT


128 }
	tIVE_SOBEL_OUT_CTRL_E
;

134 
	shiIVE_SOBEL_CTRL_S


136 
IVE_SOBEL_OUT_CTRL_E
 
íOutCål
;

137 
HI_S8
 
as8Mask
[25];

138 }
	tIVE_SOBEL_CTRL_S
;

144 
	ehiIVE_MAG_AND_ANG_OUT_CTRL_E


146 
IVE_MAG_AND_ANG_OUT_CTRL_MAG
 = 0x0,

147 
IVE_MAG_AND_ANG_OUT_CTRL_MAG_AND_ANG
 = 0x1,

148 
IVE_MAG_AND_ANG_OUT_CTRL_BUTT


149 }
	tIVE_MAG_AND_ANG_OUT_CTRL_E
;

154 
	shiIVE_MAG_AND_ANG_CTRL_S


156 
IVE_MAG_AND_ANG_OUT_CTRL_E
 
íOutCål
;

157 
HI_U16
 
u16Thr
;

158 
HI_S8
 
as8Mask
[25];

159 }
	tIVE_MAG_AND_ANG_CTRL_S
;

164 
	shiIVE_DILATE_CTRL_S


166 
HI_U8
 
au8Mask
[25];

167 }
	tIVE_DILATE_CTRL_S
;

172 
	shiIVE_ERODE_CTRL_S


174 
HI_U8
 
au8Mask
[25];

175 }
	tIVE_ERODE_CTRL_S
;

181 
	ehiIVE_THRESH_MODE_E


183 
IVE_THRESH_MODE_BINARY
 = 0x0,

184 
IVE_THRESH_MODE_TRUNC
 = 0x1,

185 
IVE_THRESH_MODE_TO_MINVAL
 = 0x2,

187 
IVE_THRESH_MODE_MIN_MID_MAX
 = 0x3,

188 
IVE_THRESH_MODE_ORI_MID_MAX
 = 0x4,

189 
IVE_THRESH_MODE_MIN_MID_ORI
 = 0x5,

190 
IVE_THRESH_MODE_MIN_ORI_MAX
 = 0x6,

191 
IVE_THRESH_MODE_ORI_MID_ORI
 = 0x7,

193 
IVE_THRESH_MODE_BUTT


194 }
	tIVE_THRESH_MODE_E
;

200 
	shiIVE_THRESH_CTRL_S


202 
IVE_THRESH_MODE_E
 
íMode
;

203 
HI_U8
 
u8LowThr
;

204 
HI_U8
 
u8HighThr
;

205 
HI_U8
 
u8MöVÆ
;

206 
HI_U8
 
u8MidVÆ
;

207 
HI_U8
 
u8MaxVÆ
;

208 }
	tIVE_THRESH_CTRL_S
;

213 
	ehiIVE_SUB_MODE_E


215 
IVE_SUB_MODE_ABS
 = 0x0,

216 
IVE_SUB_MODE_SHIFT
 = 0x1,

217 
IVE_SUB_MODE_BUTT


218 }
	tIVE_SUB_MODE_E
;

223 
	shiIVE_SUB_CTRL_S


225 
IVE_SUB_MODE_E
 
íMode
;

226 }
	tIVE_SUB_CTRL_S
;

233 
	ehiIVE_INTEG_OUT_CTRL_E


235 
IVE_INTEG_OUT_CTRL_COMBINE
 = 0x0,

236 
IVE_INTEG_OUT_CTRL_SUM
 = 0x1,

237 
IVE_INTEG_OUT_CTRL_SQSUM
 = 0x2,

238 
IVE_INTEG_OUT_CTRL_BUTT


239 }
	tIVE_INTEG_OUT_CTRL_E
;

244 
	shiIVE_INTEG_CTRL_S


246 
IVE_INTEG_OUT_CTRL_E
 
íOutCål
;

247 }
	tIVE_INTEG_CTRL_S
;

252 
	ehiIVE_THRESH_S16_MODE_E


254 
IVE_THRESH_S16_MODE_S16_TO_S8_MIN_MID_MAX
 = 0x0,

255 
IVE_THRESH_S16_MODE_S16_TO_S8_MIN_ORI_MAX
 = 0x1,

256 
IVE_THRESH_S16_MODE_S16_TO_U8_MIN_MID_MAX
 = 0x2,

257 
IVE_THRESH_S16_MODE_S16_TO_U8_MIN_ORI_MAX
 = 0x3,

259 
IVE_THRESH_S16_MODE_BUTT


260 }
	tIVE_THRESH_S16_MODE_E
;

265 
	shiIVE_THRESH_S16_CTRL_S


267 
IVE_THRESH_S16_MODE_E
 
íMode
;

268 
HI_S16
 
s16LowThr
;

269 
HI_S16
 
s16HighThr
;

270 
IVE_8BIT_U
 
un8MöVÆ
;

271 
IVE_8BIT_U
 
un8MidVÆ
;

272 
IVE_8BIT_U
 
un8MaxVÆ
;

273 }
	tIVE_THRESH_S16_CTRL_S
;

278 
	ehiIVE_THRESH_U16_MODE_E


280 
IVE_THRESH_U16_MODE_U16_TO_U8_MIN_MID_MAX
 = 0x0,

281 
IVE_THRESH_U16_MODE_U16_TO_U8_MIN_ORI_MAX
 = 0x1,

283 
IVE_THRESH_U16_MODE_BUTT


284 }
	tIVE_THRESH_U16_MODE_E
;

289 
	shiIVE_THRESH_U16_CTRL_S


291 
IVE_THRESH_U16_MODE_E
 
íMode
;

292 
HI_U16
 
u16LowThr
;

293 
HI_U16
 
u16HighThr
;

294 
HI_U8
 
u8MöVÆ
;

295 
HI_U8
 
u8MidVÆ
;

296 
HI_U8
 
u8MaxVÆ
;

297 }
	tIVE_THRESH_U16_CTRL_S
;

302 
	ehiIVE_16BIT_TO_8BIT_MODE_E


304 
IVE_16BIT_TO_8BIT_MODE_S16_TO_S8
 = 0x0,

305 
IVE_16BIT_TO_8BIT_MODE_S16_TO_U8_ABS
 = 0x1,

306 
IVE_16BIT_TO_8BIT_MODE_S16_TO_U8_BIAS
 = 0x2,

307 
IVE_16BIT_TO_8BIT_MODE_U16_TO_U8
 = 0x3,

309 
IVE_16BIT_TO_8BIT_MODE_BUTT


310 }
	tIVE_16BIT_TO_8BIT_MODE_E
;

315 
	shiIVE_16BIT_TO_8BIT_CTRL_S


317 
IVE_16BIT_TO_8BIT_MODE_E
 
íMode
;

318 
HI_U16
 
u16Díomö©‹
;

319 
HI_U8
 
u8Numî©‹
;

320 
HI_S8
 
s8Büs
;

321 }
	tIVE_16BIT_TO_8BIT_CTRL_S
;

326 
	ehiIVE_ORD_STAT_FILTER_MODE_E


328 
IVE_ORD_STAT_FILTER_MODE_MEDIAN
 = 0x0,

329 
IVE_ORD_STAT_FILTER_MODE_MAX
 = 0x1,

330 
IVE_ORD_STAT_FILTER_MODE_MIN
 = 0x2,

332 
IVE_ORD_STAT_FILTER_MODE_BUTT


333 }
	tIVE_ORD_STAT_FILTER_MODE_E
;

338 
	shiIVE_ORD_STAT_FILTER_CTRL_S


340 
IVE_ORD_STAT_FILTER_MODE_E
 
íMode
;

342 }
	tIVE_ORD_STAT_FILTER_CTRL_S
;

347 
	shiIVE_MAP_LUT_MEM_S


349 
HI_U8
 
au8M≠
[
IVE_MAP_NUM
];

350 }
	tIVE_MAP_LUT_MEM_S
;

355 
	shiIVE_EQUALIZE_HIST_CTRL_MEM_S


357 
HI_U32
 
au32Hi°
[
IVE_HIST_NUM
];

358 
HI_U8
 
au8M≠
[
IVE_MAP_NUM
];

359 }
	tIVE_EQUALIZE_HIST_CTRL_MEM_S
;

364 
	shiIVE_EQUALIZE_HIST_CTRL_S


366 
IVE_MEM_INFO_S
 
°Mem
;

367 }
	tIVE_EQUALIZE_HIST_CTRL_S
;

372 
	shiIVE_ADD_CTRL_S


374 
HI_U0Q16
 
u0q16X
;

375 
HI_U0Q16
 
u0q16Y
;

376 }
	tIVE_ADD_CTRL_S
;

381 
	shiIVE_NCC_DST_MEM_S


383 
HI_U64
 
u64Numî©‹
;

384 
HI_U64
 
u64QuadSum1
;

385 
HI_U64
 
u64QuadSum2
;

386 
HI_U8
 
u8Re£rved
[8];

387 }
	tIVE_NCC_DST_MEM_S
;

392 
	shiIVE_REGION_S


394 
HI_U32
 
u32Aªa
;

395 
HI_U16
 
u16Le·
;

396 
HI_U16
 
u16Right
;

397 
HI_U16
 
u16T›
;

398 
HI_U16
 
u16BŸtom
;

399 }
	tIVE_REGION_S
;

404 
	shiIVE_CCBLOB_S


406 
HI_U16
 
u16CurAªaThr
;

407 
HI_S8
 
s8LabñSètus
;

408 
HI_U8
 
u8Regi⁄Num
;

409 
IVE_REGION_S
 
a°Regi⁄
[
IVE_MAX_REGION_NUM
];

410 }
	tIVE_CCBLOB_S
;

415 
	shiIVE_CCL_CTRL_S


417 
HI_U16
 
u16InôAªaThr
;

418 
HI_U16
 
u16Sãp
;

419 }
	tIVE_CCL_CTRL_S
;

424 
	shiIVE_GMM_CTRL_S


426 
HI_U22Q10
 
u22q10Noi£V¨
;

427 
HI_U22Q10
 
u22q10MaxV¨
;

428 
HI_U22Q10
 
u22q10MöV¨
;

429 
HI_U0Q16
 
u0q16Ló∫R©e
;

430 
HI_U0Q16
 
u0q16BgR©io
;

431 
HI_U8Q8
 
u8q8V¨Thr
;

432 
HI_U0Q16
 
u0q16InôWeight
;

433 
HI_U8
 
u8ModñNum
;

434 }
	tIVE_GMM_CTRL_S
;

439 
	shiIVE_CANNY_HYS_EDGE_CTRL_S


441 
IVE_MEM_INFO_S
 
°Mem
;

442 
HI_U16
 
u16LowThr
;

443 
HI_U16
 
u16HighThr
;

444 
HI_S8
 
as8Mask
[25];

445 } 
	tIVE_CANNY_HYS_EDGE_CTRL_S
;

450 
	shiIVE_CANNY_STACK_SIZE_S


452 
HI_U32
 
u32SèckSize
;

453 
HI_U8
 
u8Re£rved
[12];

454 }
	tIVE_CANNY_STACK_SIZE_S
;

459 
	ehiIVE_LBP_CMP_MODE_E


461 
IVE_LBP_CMP_MODE_NORMAL
 = 0x0,

462 
IVE_LBP_CMP_MODE_ABS
 = 0x1,

464 
IVE_LBP_CMP_MODE_BUTT


465 }
	tIVE_LBP_CMP_MODE_E
;

470 
	shiIVE_LBP_CTRL_S


472 
IVE_LBP_CMP_MODE_E
 
íMode
;

473 
IVE_8BIT_U
 
un8BôThr
;

474 }
	tIVE_LBP_CTRL_S
;

479 
	ehiIVE_NORM_GRAD_OUT_CTRL_E


481 
IVE_NORM_GRAD_OUT_CTRL_HOR_AND_VER
 = 0x0,

482 
IVE_NORM_GRAD_OUT_CTRL_HOR
 = 0x1,

483 
IVE_NORM_GRAD_OUT_CTRL_VER
 = 0x2,

484 
IVE_NORM_GRAD_OUT_CTRL_COMBINE
 = 0x3,

486 
IVE_NORM_GRAD_OUT_CTRL_BUTT


487 }
	tIVE_NORM_GRAD_OUT_CTRL_E
;

492 
	shiIVE_NORM_GRAD_CTRL_S


494 
IVE_NORM_GRAD_OUT_CTRL_E
 
íOutCål
;

495 
HI_S8
 
as8Mask
[25];

496 
HI_U8
 
u8N‹m
;

497 }
	tIVE_NORM_GRAD_CTRL_S
;

502 
	shiIVE_MV_S9Q7_S


504 
HI_S32
 
s32Sètus
;

505 
HI_S9Q7
 
s9q7Dx
;

506 
HI_S9Q7
 
s9q7Dy
;

507 }
	tIVE_MV_S9Q7_S
;

509 
	shiIVE_LK_OPTICAL_FLOW_CTRL_S


511 
HI_U16
 
u16C‹√rNum
;

512 
HI_U0Q8
 
u0q8MöEigThr
;

513 
HI_U8
 
u8IãrCou¡
;

514 
HI_U0Q8
 
u0q8Epsû⁄
;

515 }
	tIVE_LK_OPTICAL_FLOW_CTRL_S
;

517 
	shiIVE_ST_MAX_EIG_S


519 
HI_U16
 
u16MaxEig
;

520 
HI_U8
 
u8Re£rved
[14];

521 }
	tIVE_ST_MAX_EIG_S
;

526 
	shiIVE_ST_CANDI_CORNER_CTRL_S


528 
IVE_MEM_INFO_S
 
°Mem
;

529 
HI_U0Q8
 
u0q8QuÆôyLevñ
;

530 }
	tIVE_ST_CANDI_CORNER_CTRL_S
;

532 
	shiIVE_ST_CORNER_INFO_S


534 
HI_U16
 
u16C‹√rNum
;

535 
IVE_POINT_U16_S
 
a°C‹√r
[
IVE_ST_MAX_CORNER_NUM
];

536 }
	tIVE_ST_CORNER_INFO_S
;

538 
	shiIVE_ST_CORNER_CTRL_S


540 
HI_U16
 
u16MaxC‹√rNum
;

541 
HI_U16
 
u16MöDi°
;

542 }
	tIVE_ST_CORNER_CTRL_S
;

547 
	ehiIVE_GRAD_FG_MODE_E


549 
IVE_GRAD_FG_MODE_USE_CUR_GRAD
 = 0x0,

550 
IVE_GRAD_FG_MODE_FIND_MIN_GRAD
 = 0x1,

552 
IVE_GRAD_FG_MODE_BUTT


553 }
	tIVE_GRAD_FG_MODE_E
;

558 
	shiIVE_GRAD_FG_CTRL_S


560 
IVE_GRAD_FG_MODE_E
 
íMode
;

561 
HI_U16
 
u16EdwFa˘‹
;

562 
HI_U8
 
u8CæC€fThr
;

563 
HI_U8
 
u8MagCæThr
;

564 
HI_U8
 
u8MöMagDiff
;

565 
HI_U8
 
u8Noi£VÆ
;

566 
HI_U8
 
u8EdwD¨k
;

567 }
	tIVE_GRAD_FG_CTRL_S
;

569 
	shiIVE_CANDI_BG_PIX_S


571 
HI_U8Q4F4
 
u8q4f4Món
;

572 
HI_U16
 
u16SèπTime
;

573 
HI_U16
 
u16SumAc˚ssTime
;

574 
HI_U16
 
u16Sh‹tKìpTime
;

575 
HI_U8
 
u8ChgC⁄d
;

576 
HI_U8
 
u8PŸíBgLi„
;

577 }
	tIVE_CANDI_BG_PIX_S
;

579 
	shiIVE_WORK_BG_PIX_S


581 
HI_U8Q4F4
 
u8q4f4Món
;

582 
HI_U16
 
u16AccTime
;

583 
HI_U8
 
u8PªGøy
;

584 
HI_U5Q3
 
u5q3DiffThr
;

585 
HI_U8
 
u8AccFœg
;

586 
HI_U8
 
u8BgGøy
[3];

587 }
	tIVE_WORK_BG_PIX_S
;

589 
	shiIVE_BG_LIFE_S


591 
HI_U8
 
u8W‹kBgLi„
[3];

592 
HI_U8
 
u8C™diBgLi„
;

593 }
	tIVE_BG_LIFE_S
;

595 
	shiIVE_BG_MODEL_PIX_S


597 
IVE_WORK_BG_PIX_S
 
°W‹kBgPixñ
;

598 
IVE_CANDI_BG_PIX_S
 
°C™diPixñ
;

599 
IVE_BG_LIFE_S
 
°BgLi„
;

600 }
	tIVE_BG_MODEL_PIX_S
;

602 
	shiIVE_FG_STAT_DATA_S


604 
HI_U32
 
u32PixNum
;

605 
HI_U32
 
u32SumLum
;

606 
HI_U8
 
u8Re£rved
[8];

607 }
	tIVE_FG_STAT_DATA_S
;

609 
	shiIVE_BG_STAT_DATA_S


611 
HI_U32
 
u32PixNum
;

612 
HI_U32
 
u32SumLum
;

613 
HI_U8
 
u8Re£rved
[8];

614 }
	tIVE_BG_STAT_DATA_S
;

616 
	shiIVE_MATCH_BG_MODEL_CTRL_S


618 
HI_U32
 
u32CurFrmNum
;

619 
HI_U32
 
u32PªFrmNum
;

620 
HI_U16
 
u16TimeThr
;

622 
HI_U8
 
u8DiffThrCæC€f
;

623 
HI_U8
 
u8DiffMaxThr
;

624 
HI_U8
 
u8DiffMöThr
;

625 
HI_U8
 
u8DiffThrInc
;

626 
HI_U8
 
u8Fa°Ló∫R©e
;

627 
HI_U8
 
u8DëChgRegi⁄
;

628 }
	tIVE_MATCH_BG_MODEL_CTRL_S
;

630 
	shiIVE_UPDATE_BG_MODEL_CTRL_S


632 
HI_U32
 
u32CurFrmNum
;

633 
HI_U32
 
u32PªChkTime
;

634 
HI_U32
 
u32FrmChkPîiod
;

636 
HI_U32
 
u32InôMöTime
;

637 
HI_U32
 
u32StyBgMöBÀndTime
;

638 
HI_U32
 
u32StyBgMaxBÀndTime
;

639 
HI_U32
 
u32DynBgMöBÀndTime
;

640 
HI_U32
 
u32SèticDëMöTime
;

641 
HI_U16
 
u16FgMaxFadeTime
;

642 
HI_U16
 
u16BgMaxFadeTime
;

644 
HI_U8
 
u8StyBgAccTimeR©eThr
;

645 
HI_U8
 
u8ChgBgAccTimeR©eThr
;

646 
HI_U8
 
u8DynBgAccTimeThr
;

647 
HI_U8
 
u8DynBgDïth
;

648 
HI_U8
 
u8BgEffSèR©eThr
;

650 
HI_U8
 
u8Ac˚BgLó∫
;

651 
HI_U8
 
u8DëChgRegi⁄
;

652 } 
	tIVE_UPDATE_BG_MODEL_CTRL_S
;

655 
	ehiIVE_ANN_MLP_ACTIV_FUNC_E


657 
IVE_ANN_MLP_ACTIV_FUNC_IDENTITY
 = 0x0,

658 
IVE_ANN_MLP_ACTIV_FUNC_SIGMOID_SYM
 = 0x1,

659 
IVE_ANN_MLP_ACTIV_FUNC_GAUSSIAN
 = 0x2,

661 
IVE_ANN_MLP_ACTIV_FUNC_BUTT


662 }
	tIVE_ANN_MLP_ACTIV_FUNC_E
;

664 
	shiIVE_ANN_MLP_MODEL_S


666 
IVE_ANN_MLP_ACTIV_FUNC_E
 
íA˘ivFunc
;

667 
IVE_MEM_INFO_S
 
°Weight
;

668 
HI_U32
 
u32TŸÆWeightSize
;

670 
HI_U16
 
au16LayîCou¡
[8];

671 
HI_U16
 
u16MaxCou¡
;

672 
HI_U8
 
u8LayîNum
;

673 }
	tIVE_ANN_MLP_MODEL_S
;

675 
	ehiIVE_SVM_TYPE_E


677 
IVE_SVM_TYPE_C_SVC
 = 0x0,

678 
IVE_SVM_TYPE_NU_SVC
 = 0x1,

680 
IVE_SVM_TYPE_BUTT


681 }
	tIVE_SVM_TYPE_E
;

683 
	ehiIVE_SVM_KERNEL_TYPE_E


685 
IVE_SVM_KERNEL_TYPE_LINEAR
 = 0x0,

686 
IVE_SVM_KERNEL_TYPE_POLY
 = 0x1,

687 
IVE_SVM_KERNEL_TYPE_RBF
 = 0x2,

688 
IVE_SVM_KERNEL_TYPE_SIGMOID
 = 0x3,

690 
IVE_SVM_KERNEL_TYPE_BUTT


691 }
	tIVE_SVM_KERNEL_TYPE_E
;

693 
	shiIVE_SVM_MODEL_S


695 
IVE_SVM_TYPE_E
 
íTy≥
;

696 
IVE_SVM_KERNEL_TYPE_E
 
íKî√lTy≥
;

698 
IVE_MEM_INFO_S
 
°Sv
;

699 
IVE_MEM_INFO_S
 
°Df
;

700 
HI_U32
 
u32TŸÆDfSize
;

702 
HI_U16
 
u16FótuªDim
;

703 
HI_U16
 
u16SvTŸÆ
;

704 
HI_U8
 
u8CœssCou¡
;

705 }
	tIVE_SVM_MODEL_S
;

710 
	ehiIVE_SAD_MODE_E


712 
IVE_SAD_MODE_MB_4X4
 = 0x0,

713 
IVE_SAD_MODE_MB_8X8
 = 0x1,

714 
IVE_SAD_MODE_MB_16X16
 = 0x2,

716 
IVE_SAD_MODE_BUTT


717 }
	tIVE_SAD_MODE_E
;

721 
	ehiIVE_SAD_OUT_CTRL_E


723 
IVE_SAD_OUT_CTRL_16BIT_BOTH
 = 0x0,

724 
IVE_SAD_OUT_CTRL_8BIT_BOTH
 = 0x1,

725 
IVE_SAD_OUT_CTRL_16BIT_SAD
 = 0x2,

726 
IVE_SAD_OUT_CTRL_8BIT_SAD
 = 0x3,

727 
IVE_SAD_OUT_CTRL_THRESH
 = 0x4,

729 
IVE_SAD_OUT_CTRL_BUTT


730 }
	tIVE_SAD_OUT_CTRL_E
;

734 
	shiIVE_SAD_CTRL_S


736 
IVE_SAD_MODE_E
 
íMode
;

737 
IVE_SAD_OUT_CTRL_E
 
íOutCål
;

738 
HI_U16
 
u16Thr
;

739 
HI_U8
 
u8MöVÆ
;

740 
HI_U8
 
u8MaxVÆ
;

741 }
	tIVE_SAD_CTRL_S
;

743 #ifde‡
__˝lu•lus


744 #i‡
__˝lu•lus


	@include/hi_math.h

27 #i‚de‡
__HI_MATH_H__


28 
	#__HI_MATH_H__


	)

30 
	~"hi_ty≥.h
"

32 #ifde‡
__˝lu•lus


33 #i‡
__˝lu•lus


43 
	#ABS
(
x
Ë–(xË>0 ? (xË: (-(x)Ë)

	)

44 
	#SIGN
(
x
Ë–(xË>0 ? 1 : -1 )

	)

45 
	#CMP
(
x
,
y
Ë(((xË=(y)Ë? 0 : (((xË> (y)Ë? 1 : -1))

	)

55 
	#MAX2
(
x
,
y
Ë–(x)>(yË? (x):(yË)

	)

56 
	#MIN2
(
x
,
y
Ë–(x)<(yË? (x):(yË)

	)

57 
	#MAX3
(
x
,
y
,
z
Ë–(x)>(yË? 
	`MAX2
(x,zË: MAX2(y,zË)

	)

58 
	#MIN3
(
x
,
y
,
z
Ë–(x)<(yË? 
	`MIN2
(x,zË: MIN2(y,zË)

	)

59 
	#MEDIAN
(
x
,
y
,
z
Ë(((x)+(y)+(zË- 
	`MAX3
(x,y,z)Ë- 
	`MIN3
(x,y,zË)

	)

60 
	#MEAN2
(
x
,
y
Ë(((x)+(y)Ë>> 1 )

	)

68 
	#CLIP3
(
x
,
mö
,
max
Ë–(x)< (möË? (möË: ((x)>(max)?(max):(x)Ë)

	)

69 
	#WRAP_MAX
(
x
,
max
,
mö
Ë–(x)>=(maxË? (möË: (xË)

	)

70 
	#WRAP_MIN
(
x
,
mö
,
max
Ë–(x)<=(möË? (maxË: (xË)

	)

71 
	#VALUE_BETWEEN
(
x
,
mö
,
max
Ë(((x)>=(mö)Ë&& ((xË<(max)))

	)

83 
	#MULTI_OF_2_POWER
(
x
,
a
Ë(!((xË& (◊Ë- 1ËË)

	)

84 
	#CEILING_2_POWER
(
x
,
a
Ë–((xË+ (◊Ë- 1ËË& ( ~(◊Ë- 1ËË)

	)

85 
	#FLOOR_2_POWER
(
x
,
a
Ë–(xË& (~(◊Ë- 1ËË)

	)

86 
	#HIALIGN
(
x
, 
a
Ë(◊Ë* (((xË+ (aË- 1Ë/ (a)))

	)

87 
	#HICEILING
(
x
, 
a
Ë(((x)+◊)-1)/◊))

	)

95 
	#SPAN
(
ty≥
, 
begö
, 
íd
)\

97 
ty≥
 
b
 = (
begö
); \

98 
ty≥
 
e
 = (
íd
); \

99 (
ty≥
)((
b
 >
e
) ? (b -É) : (b + ((~((type)0))-e))); \

100 })

	)

106 
	#ENDIAN32
–
x
 ) \

107 ––(
x
) << 24 ) | \

108 ––(
x
) & 0x0000ff00 ) << 8 ) | \

109 ––(
x
) & 0x00ff0000 ) >> 8 ) | \

110 ––(
x
Ë>> 24 ) & 0x000000f‡Ë)

	)

112 
__ölöe
 
HI_BOOL
 
IS_LITTLE_END
()

114 
	uunEND_TEST_U


116 
HI_CHAR
 
cTe°
[4];

117 
HI_U32
 
u32Te°
;

118 } 
unEndTe°
;

120 
unEndTe°
.
cTe°
[0] = 0x01;

121 
unEndTe°
.
cTe°
[1] = 0x02;

122 
unEndTe°
.
cTe°
[2] = 0x03;

123 
unEndTe°
.
cTe°
[3] = 0x04;

125  (
unEndTe°
.
u32Te°
 > 0x01020304Ë? (
HI_TRUE
Ë: (
HI_FALSE
);

137 
	#FRACTION32
(
de
,
nu
Ë–((deË<< 16Ë| (nuË)

	)

138 
	#NUMERATOR32
(
x
Ë–(xË& 0xffff)

	)

139 
	#DENOMINATOR32
(
x
Ë–(xË>> 16 )

	)

147 
	#RGB
(
r
,
g
,
b
Ë(((‘Ë& 0xffË<< 16Ë| (((gË& 0xffË<< 8Ë| ((bË& 0xff))

	)

148 
	#RGB_R
(
c
Ë–((cË& 0xff0000Ë>> 16)

	)

149 
	#RGB_G
(
c
Ë–((cË& 0xff00Ë>> 8)

	)

150 
	#RGB_B
(
c
Ë–(cË& 0xff)

	)

158 
	#YUV
(
y
,
u
,
v
Ë((((yË& 0xffË<< 16Ë| (((uË& 0xffË<< 8Ë| ((vË& 0xff))

	)

159 
	#YUV_Y
(
c
Ë–((cË& 0xff0000Ë>> 16)

	)

160 
	#YUV_U
(
c
Ë–((cË& 0xff00Ë>> 8)

	)

161 
	#YUV_V
(
c
Ë–(cË& 0xff)

	)

167 
__ölöe
 
HI_VOID
 
Rgb2Yc
(
HI_U8
 
r
, HI_U8 
g
, HI_U8 
b
, HI_U8 * 
py
, HI_U8 * 
pcb
, HI_U8 * 
p¸
)

170 *
py
 = (
HI_U8
)(((
r
*66+
g
*129+
b
*25) >> 8) + 16);

173 *
pcb
 = (
HI_U8
)((((
b
*112-
r
*38)-
g
*74) >> 8) + 128);

176 *
p¸
 = (
HI_U8
)((((
r
*112-
g
*94)-
b
*18) >> 8) + 128);

179 
__ölöe
 
HI_U32
 
Rgb2Yuv
(HI_U32 
u32Rgb
)

181 
HI_U8
 
y
,
u
,
v
;

183 
Rgb2Yc
(
RGB_R
(
u32Rgb
), 
RGB_G
(u32Rgb), 
RGB_B
(u32Rgb), &
y
, &
u
, &
v
);

185  
YUV
(
y
,
u
,
v
);

191 
__ölöe
 
HI_VOID
 
GëYCFromRGB
(
HI_U32
 
rgb
, HI_U32 * 
pY
, HI_U32 * 
pC
)

193 
HI_U8
 
y
, 
cb
, 
¸
;

194 
HI_U32
 
cﬁ‹_y
, 
cﬁ‹_c
, 
tmp
;

196 
Rgb2Yc
(
RGB_R
(
rgb
), 
RGB_G
‘gb), 
RGB_B
‘gb), &
y
, &
cb
, &
¸
);

198 
tmp
 = 
y
 & 0xFF;

199 
cﬁ‹_y
 = (
tmp
<<24) + (tmp<<16) + (tmp<<8) +Åmp;

201 
tmp
 = 
cb
 & 0xFF;

202 
cﬁ‹_c
 = (
tmp
<<24) + (tmp<<8);

204 
tmp
 = 
¸
 & 0xFF;

205 
cﬁ‹_c
 = cﬁ‹_¯+ (
tmp
<<16) +Åmp;

207 *
pY
 = 
cﬁ‹_y
;

208 *
pC
 = 
cﬁ‹_c
;

223 
	shiFPS_CTRL_S


225 
HI_U32
 
u32FÂs
;

226 
HI_U32
 
u32TÂs
;

227 
HI_U32
 
u32FrmKey
;

228 } 
	tFPS_CTRL_S
;

230 
__ölöe
 
HI_VOID
 
InôFps
(
FPS_CTRL_S
 *
pFrmCål
, 
HI_U32
 
u32FuŒFps
,

231 
HI_U32
 
u32TagFps
)

233 
pFrmCål
->
u32FÂs
 = 
u32FuŒFps
;

234 
pFrmCål
->
u32TÂs
 = 
u32TagFps
;

235 
pFrmCål
->
u32FrmKey
 = 0;

238 
__ölöe
 
HI_BOOL
 
FpsC⁄åﬁ
(
FPS_CTRL_S
 *
pFrmCål
)

240 
HI_BOOL
 
bRëu∫
 = 
HI_FALSE
;

242 
pFrmCål
->
u32FrmKey
 +pFrmCål->
u32TÂs
;

243 i‡(
pFrmCål
->
u32FrmKey
 >pFrmCål->
u32FÂs
)

245 
pFrmCål
->
u32FrmKey
 -pFrmCål->
u32FÂs
;

246 
bRëu∫
 = 
HI_TRUE
;

249  
bRëu∫
;

256 #ifde‡
__KERNEL__


257 
	~<löux/time.h
>

259 
	~<sys/time.h
>

261 
__ölöe
 
HI_U32
 
GëSysTimeBySec
()

263 
timevÆ
 
°Time
;

264 #ifde‡
__KERNEL__


265 
do_gëtimeofday
(&
°Time
);

267 
gëtimeofday
(&
°Time
, 
NULL
);

269  
°Time
.
tv_£c
;

272 
__ölöe
 
HI_U64
 
GëSysTimeByU£c
()

274 
timevÆ
 
°Time
;

275 #ifde‡
__KERNEL__


276 
do_gëtimeofday
(&
°Time
);

278 
gëtimeofday
(&
°Time
, 
NULL
);

280  (
°Time
.
tv_£c
 * 1000000LLUË+ stTime.
tv_u£c
;

284 #ifde‡
__˝lu•lus


285 #i‡
__˝lu•lus


	@include/hi_mipi.h

1 #i‚de‡
__HI_MIPI__


2 
	#__HI_MIPI__


	)

4 
	~"hi_ty≥.h
"

6 
	tMIPI_PHY
;

7 
	tCOMBO_LINK
;

9 
	#LVDS_MIN_WIDTH
 32

	)

10 
	#LVDS_MIN_HEIGHT
 32

	)

12 
	#COMBO_MAX_LINK_NUM
 2

	)

13 
	#COMBO_MAX_LANE_NUM
 8

	)

14 
	#LANE_NUM_PER_LINK
 4

	)

17 
	#MIPI_LANE_NUM
 
COMBO_MAX_LANE_NUM


	)

18 
	#LVDS_LANE_NUM
 
COMBO_MAX_LANE_NUM


	)

21 
	#WDR_VC_NUM
 4

	)

22 
	#SYNC_CODE_NUM
 4

	)

25 
	#COMBO_LINK_INT_DEF
 (0x00200000)

	)

26 
	#COMBO_LINK_INT_MASK
 ~(0x300000)

	)

29 
	#MIPI_INT1_INT_DEF
 (0x1000fff0)

	)

32 
	#MIPI_INT2_INT_DEF
 (0xf000)

	)

35 
	#MIPI_INT_MASK
 0x0

	)

39 #ifde‡
HI_MIPI_DEBUG


41 
	#HI_MSG
(
x
...) \

43 
	`¥ötk
("%s->%d: ", 
__FUNCTION__
, 
__LINE__
); \

44 
	`¥ötk
(
x
); \

45 
	`¥ötk
("\n"); \

46 } 0)

	)

49 
	#HI_MSG
(
¨gs
...Ëdÿ{ } 0)

	)

52 
	#HI_ERR
(
x
...) \

54 
	`¥ötk
(
KERN_ALERT
 "%s(%d): ", 
__FUNCTION__
, 
__LINE__
); \

55 
	`¥ötk
(
KERN_ALERT
 
x
); \

56 
	`¥ötk
(
KERN_ALERT
 "\n"); \

57 } 0)

	)

62 
	mMIPI_VC0_NO_MATCH
 = 0x1 << 4,

63 
	mMIPI_VC1_NO_MATCH
 = 0x1 << 5,

64 
	mMIPI_VC2_NO_MATCH
 = 0x1 << 6,

65 
	mMIPI_VC3_NO_MATCH
 = 0x1 << 7,

67 
	mMIPI_VC0_ORDER_ERR
 = 0x1 << 8,

68 
	mMIPI_VC1_ORDER_ERR
 = 0x1 << 9,

69 
	mMIPI_VC2_ORDER_ERR
 = 0x1 << 10,

70 
	mMIPI_VC3_ORDER_ERR
 = 0x1 << 11,

72 
	mMIPI_VC0_FRAME_CRC
 = 0x1 << 12,

73 
	mMIPI_VC1_FRAME_CRC
 = 0x1 << 13,

74 
	mMIPI_VC2_FRAME_CRC
 = 0x1 << 14,

75 
	mMIPI_VC3_FRAME_CRC
 = 0x1 << 15,

76 
	mMIPI_HEADER_ERR
 = 0x1 << 28,

77 } 
	tMIPI_INT_ERR
;

81 
	mMIPI_VC0_INVALID_DT
 = 0x1 << 12,

82 
	mMIPI_VC1_INVALID_DT
 = 0x1 << 13,

83 
	mMIPI_VC2_INVALID_DT
 = 0x1 << 14,

84 
	mMIPI_VC3_INVALID_DT
 = 0x1 << 15,

85 } 
	tMIPI_INT2_ERR
;

89 
	mMIPI_ESC_CLK
 = 0x1 << 0,

90 
	mMIPI_ESC_D0
 = 0x1 << 1,

91 
	mMIPI_ESC_D1
 = 0x1 << 2,

92 
	mMIPI_ESC_D2
 = 0x1 << 3,

93 
	mMIPI_ESC_D3
 = 0x1 << 4,

95 
	mMIPI_TIMEOUT_CLK
 = 0x1 << 8,

96 
	mMIPI_TIMEOUT_D0
 = 0x1 << 9,

97 
	mMIPI_TIMEOUT_D1
 = 0x1 << 10,

98 
	mMIPI_TIMEOUT_D2
 = 0x1 << 11,

99 
	mMIPI_TIMEOUT_D3
 = 0x1 << 12,

101 
	mMIPI_VSYNC_ERR
 = 0x1 << 21,

102 } 
	tLINK_INT_STAT
;

106 
	mLANE0_SYNC_ERR
 = 0x1,

107 
	mLANE1_SYNC_ERR
 = 0x2,

108 
	mLANE2_SYNC_ERR
 = 0x4,

109 
	mLANE3_SYNC_ERR
 = 0x8,

110 
	mLANE4_SYNC_ERR
 = 0x10,

111 
	mLANE5_SYNC_ERR
 = 0x20,

112 
	mLANE6_SYNC_ERR
 = 0x40,

113 
	mLANE7_SYNC_ERR
 = 0x80,

115 
	mPHY0_LINE_SYNC_ERR
 = 0x100,

116 
	mPHY0_FRAME_SYNC_ERR
 = 0x200,

117 
	mPHY1_LINE_SYNC_ERR
 = 0x400,

118 
	mPHY1_FRAME_SYNC_ERR
 = 0x800,

119 
	mLINK_SYNC_ERR
 = 0x3F0000,

120 } 
	tLVDS_SYNC_INTR_ERR
;

124 
	mOUTPUT_DATA_WIDTH_2BIT
 = 0,

125 
	mOUTPUT_DATA_WIDTH_4BIT
,

126 
	mOUTPUT_DATA_WIDTH_8BIT
,

127 
	mOUTPUT_DATA_WIDTH_BUTT


128 } 
	touçut_d©a_width
;

132 
	mCLK_UP_EDGE
 = 0,

133 
	mCLK_DOWN_EDGE
,

134 
	mCLK_EDGE_BUTT


135 } 
	t˛k_edge
;

139 
	mOUTPUT_NORM_MSB
 = 0,

140 
	mOUTPUT_REVERSE_MSB
,

141 
	mOUTPUT_MSB_BUTT


142 } 
	touçut_msb
;

146 
	mINPUT_MODE_MIPI
 = 0x0,

147 
	mINPUT_MODE_SUBLVDS
 = 0x1,

148 
	mINPUT_MODE_LVDS
 = 0x2,

149 
	mINPUT_MODE_HISPI
 = 0x3,

150 
	mINPUT_MODE_CMOS_18V
 = 0x4,

151 
	mINPUT_MODE_CMOS_33V
 = 0x5,

152 
	mINPUT_MODE_BT1120
 = 0x6,

153 
	mINPUT_MODE_BYPASS
 = 0x7,

155 
	mINPUT_MODE_BUTT


156 } 
	töput_mode_t
;

160 
	mWORK_MODE_LVDS
 = 0x0,

161 
	mWORK_MODE_MIPI
 = 0x1,

162 
	mWORK_MODE_CMOS_18V
 = 0x2,

163 
	mWORK_MODE_CMOS_33V
 = 0x4,

164 
	mWORK_MODE_BT1120
 = 0x4,

165 
	mWORK_MODE_BUTT


166 } 
	tw‹k_mode_t
;

170 
	mwidth
;

171 
	mheight
;

172 } 
	timg_size_t
;

176 
	mHI_WDR_MODE_NONE
 = 0x0,

177 
	mHI_WDR_MODE_2F
 = 0x1,

178 
	mHI_WDR_MODE_3F
 = 0x2,

179 
	mHI_WDR_MODE_4F
 = 0x3,

180 
	mHI_WDR_MODE_DOL_2F
 = 0x4,

181 
	mHI_WDR_MODE_DOL_3F
 = 0x5,

182 
	mHI_WDR_MODE_DOL_4F
 = 0x6,

183 
	mHI_WDR_MODE_BUTT


184 } 
	twdr_mode_e
;

188 
	mLVDS_ENDIAN_LITTLE
 = 0x0,

189 
	mLVDS_ENDIAN_BIG
 = 0x1,

190 
	mLVDS_ENDIAN_BUTT


191 } 
	tlvds_bô_ídün
;

195 
	mLVDS_SYNC_MODE_SOL
 = 0,

196 
	mLVDS_SYNC_MODE_SAV
,

197 
	mLVDS_SYNC_MODE_BUTT


198 } 
	tlvds_sync_mode_e
;

202 
	mRAW_DATA_8BIT
 = 0,

203 
	mRAW_DATA_10BIT
,

204 
	mRAW_DATA_12BIT
,

205 
	mRAW_DATA_14BIT
,

206 
	mRAW_DATA_BUTT


207 } 
	tøw_d©a_ty≥_e
;

211 
img_size_t
 
	mimg_size
;

212 
wdr_mode_e
 
	mwdr_mode
;

213 
lvds_sync_mode_e
 
	msync_mode
;

214 
øw_d©a_ty≥_e
 
	møw_d©a_ty≥
;

215 
lvds_bô_ídün
 
	md©a_ídün
;

216 
lvds_bô_ídün
 
	msync_code_ídün
;

217 
	mœ√_id
[
LVDS_LANE_NUM
];

222 
	msync_code
[
LVDS_LANE_NUM
][
WDR_VC_NUM
][
SYNC_CODE_NUM
];

223 } 
	tlvds_dev_©å_t
;

227 
øw_d©a_ty≥_e
 
	møw_d©a_ty≥
;

228 
	mœ√_id
[
MIPI_LANE_NUM
];

229 } 
	tmùi_dev_©å_t
;

233 
öput_mode_t
 
	möput_mode
;

237 
mùi_dev_©å_t
 
	mmùi_©å
;

238 
lvds_dev_©å_t
 
	mlvds_©å
;

240 } 
	tcombo_dev_©å_t
;

243 
	#HI_MIPI_IOC_MAGIC
 'm'

	)

246 
	#HI_MIPI_SET_DEV_ATTR
 
	`_IOW
(
HI_MIPI_IOC_MAGIC
, 0x01, 
combo_dev_©å_t
)

	)

249 
	#HI_MIPI_SET_OUTPUT_CLK_EDGE
 
	`_IOW
(
HI_MIPI_IOC_MAGIC
, 0x02, 
HI_BOOL
)

	)

252 
	#HI_MIPI_SET_OUTPUT_MSB
 
	`_IOW
(
HI_MIPI_IOC_MAGIC
, 0x03, 
HI_BOOL
)

	)

	@include/hi_sns_ctrl.h

18 #i‚de‡
__HI_SNS_CTRL_H__


19 
	#__HI_SNS_CTRL_H__


	)

21 
	~"hi_ty≥.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
£ns‹_öô
();

30 
£ns‹_exô
();

32 
£ns‹_¥og
(*
rom
);

33 
£ns‹_wrôe_ªgi°î
(
addr
, 
d©a
);

34 
£ns‹_ªad_ªgi°î
(
addr
);

35 
£ns‹_wrôe_ªgi°î_bô
(
addr
, 
d©a
, 
mask
);

36 
£ns‹_ªgi°î_ˇŒback
();

37 
£ns‹_uƒegi°î_ˇŒback
();

38 
£ns‹_£t_öifûe_∑th
(c⁄° 
HI_CHAR
 *
pcP©h
);

40 #ifde‡
__˝lu•lus


41 #i‡
__˝lu•lus


	@include/hi_spi.h

1 #i‚de‡
__HI_SPI_H__


2 
	#__HI_SPI_H__


	)

4 
	t__u64
;

5 
	t__u32
;

6 
	t__u16
;

7 
	t__u8
;

13 
	#SPI_CPHA
 0x01

	)

14 
	#SPI_CPOL
 0x02

	)

16 
	#SPI_MODE_0
 (0|0)

	)

17 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

18 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

19 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

21 
	#SPI_CS_HIGH
 0x04

	)

22 
	#SPI_LSB_FIRST
 0x08

	)

23 
	#SPI_3WIRE
 0x10

	)

24 
	#SPI_LOOP
 0x20

	)

25 
	#SPI_NO_CS
 0x40

	)

26 
	#SPI_READY
 0x80

	)

32 
	#SPI_IOC_MAGIC
 'k'

	)

67 
	s•i_ioc_å™s„r
 {

68 
__u64
 
	mtx_buf
;

69 
__u64
 
	mrx_buf
;

71 
__u32
 
	mÀn
;

72 
__u32
 
	m•ìd_hz
;

74 
__u16
 
	mdñay_u£cs
;

75 
__u8
 
	mbôs_≥r_w‹d
;

76 
__u8
 
	mcs_ch™ge
;

77 
__u32
 
	m∑d
;

89 
	#SPI_MSGSIZE
(
N
) \

90 ((((
N
)*( (
•i_ioc_å™s„r
))Ë< (1 << 
_IOC_SIZEBITS
)) \

91 ? ((
N
)*( (
•i_ioc_å™s„r
))Ë: 0)

	)

92 
	#SPI_IOC_MESSAGE
(
N
Ë
	`_IOW
(
SPI_IOC_MAGIC
, 0, [
	`SPI_MSGSIZE
(N)])

	)

96 
	#SPI_IOC_RD_MODE
 
	`_IOR
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

97 
	#SPI_IOC_WR_MODE
 
	`_IOW
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

100 
	#SPI_IOC_RD_LSB_FIRST
 
	`_IOR
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

101 
	#SPI_IOC_WR_LSB_FIRST
 
	`_IOW
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

104 
	#SPI_IOC_RD_BITS_PER_WORD
 
	`_IOR
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

105 
	#SPI_IOC_WR_BITS_PER_WORD
 
	`_IOW
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

108 
	#SPI_IOC_RD_MAX_SPEED_HZ
 
	`_IOR
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

109 
	#SPI_IOC_WR_MAX_SPEED_HZ
 
	`_IOW
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

	@include/hi_tde_api.h

12 #i‚de‡
_HI_API_TDE2_H_


13 
	#_HI_API_TDE2_H_


	)

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	~"hi_ty≥.h
"

22 
	~"hi_tde_ty≥.h
"

24 
	#HI_TDE_O≥n
 
HI_TDE2_O≥n


	)

25 
	#HI_TDE_Clo£
 
HI_TDE2_Clo£


	)

26 
	#HI_TDE_BegöJob
 
HI_TDE2_BegöJob


	)

40 
HI_S32
 
HI_TDE2_O≥n
(
HI_VOID
);

50 
HI_VOID
 
HI_TDE2_Clo£
(HI_VOID);

60 
TDE_HANDLE
 
HI_TDE2_BegöJob
(
HI_VOID
);

73 
HI_S32
 
HI_TDE2_EndJob
(
TDE_HANDLE
 
s32H™dÀ
, 
HI_BOOL
 
bSync
, HI_BOOL 
bBlock
, 
HI_U32
 
u32TimeOut
);

83 
HI_S32
 
HI_TDE2_C™˚lJob
(
TDE_HANDLE
 
s32H™dÀ
);

93 
HI_S32
 
HI_TDE2_WaôF‹D⁄e
(
TDE_HANDLE
 
s32H™dÀ
);

103 
HI_S32
 
HI_TDE2_WaôAŒD⁄e
(
HI_VOID
);

114 
HI_S32
 
HI_TDE2_Re£t
(
HI_VOID
);

128 
HI_S32
 
HI_TDE2_QuickC›y
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°Src
, 
TDE2_RECT_S
 *
p°SrcRe˘
,

129 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
);

142 
HI_S32
 
HI_TDE2_QuickFûl
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
,

143 
HI_U32
 
u32FûlD©a
);

157 
HI_S32
 
HI_TDE2_QuickResize
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°Src
, 
TDE2_RECT_S
 *
p°SrcRe˘
,

158 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
);

172 
HI_S32
 
HI_TDE2_QuickDeÊickî
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°Src
, 
TDE2_RECT_S
 *
p°SrcRe˘
,

173 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
);

191 
HI_S32
 
HI_TDE2_Bôblô
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
 *
p°BackGroundRe˘
,

192 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
, TDE2_SURFACE_S* 
p°D°
,

193 
TDE2_RECT_S
 *
p°D°Re˘
, 
TDE2_OPT_S
* 
p°O±
);

210 
HI_S32
 
HI_TDE2_SﬁidDøw
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
,

211 
TDE2_SURFACE_S
 *
p°D°
,

212 
TDE2_RECT_S
 *
p°D°Re˘
, 
TDE2_FILLCOLOR_S
 *
p°FûlCﬁ‹
,

213 
TDE2_OPT_S
 *
p°O±
);

228 
HI_S32
 
HI_TDE2_MbBlô
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_MB_S
* 
p°MB
, 
TDE2_RECT_S
 *
p°MbRe˘
, 
TDE2_SURFACE_S
* 
p°D°
, TDE2_RECT_S *
p°D°Re˘
,

229 
TDE2_MBOPT_S
* 
p°MbO±
);

250 
HI_S32
 
HI_TDE2_Bôm≠MaskR›
(
TDE_HANDLE
 
s32H™dÀ
,

251 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
 *
p°BackGroundRe˘
,

252 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
,

253 
TDE2_SURFACE_S
* 
p°Mask
, 
TDE2_RECT_S
 *
p°MaskRe˘
,

254 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
,

255 
TDE2_ROP_CODE_E
 
íR›Code_Cﬁ‹
, TDE2_ROP_CODE_E 
íR›Code_AÕha
);

276 
HI_S32
 
HI_TDE2_Bôm≠MaskBÀnd
(
TDE_HANDLE
 
s32H™dÀ
,

277 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
 *
p°BackGroundRe˘
,

278 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
,

279 
TDE2_SURFACE_S
* 
p°Mask
, 
TDE2_RECT_S
 *
p°MaskRe˘
,

280 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
,

281 
HI_U8
 
u8AÕha
, 
TDE2_ALUCMD_E
 
íBÀndMode
);

293 
HI_S32
 
HI_TDE2_SëDeÊickîLevñ
(
TDE_DEFLICKER_LEVEL_E
 
íDeÊickîLevñ
);

303 
HI_S32
 
HI_TDE2_GëDeÊickîLevñ
(
TDE_DEFLICKER_LEVEL_E
 *
pDeÊickîLevñ
);

313 
HI_S32
 
HI_TDE2_SëAÕhaThªshﬁdVÆue
(
HI_U8
 
u8ThªshﬁdVÆue
);

323 
HI_S32
 
HI_TDE2_GëAÕhaThªshﬁdVÆue
(
HI_U8
 *
pu8ThªshﬁdVÆue
);

333 
HI_S32
 
HI_TDE2_SëAÕhaThªshﬁdSèã
(
HI_BOOL
 
bEnAÕhaThªshﬁd
);

343 
HI_S32
 
HI_TDE2_GëAÕhaThªshﬁdSèã
(
HI_BOOL
 * 
p_bEnAÕhaThªshﬁd
);

360 
HI_S32
 
HI_TDE2_P©ã∫Fûl
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
 *
p°BackGround
,

361 
TDE2_RECT_S
 *
p°BackGroundRe˘
, 
TDE2_SURFACE_S
 *
p°F‹eGround
,

362 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
, 
TDE2_SURFACE_S
 *
p°D°
,

363 
TDE2_RECT_S
 *
p°D°Re˘
, 
TDE2_PATTERN_FILL_OPT_S
 *
p°O±
);

373 
HI_S32
 
HI_TDE2_E«bÀRegi⁄DeÊickî
(
HI_BOOL
 
bRegi⁄DeÊickî
);

383 
HI_S32
 
HI_TDE2_Mu…iBÀndög
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE_SURFACE_LIST_S
 *
p°SurÁ˚Li°
);

386 #ifde‡
__˝lu•lus


387 #i‡
__˝lu•lus


	@include/hi_tde_errcode.h

13 #i‚de‡
__TDE_ERRCODE_H__


14 
	#__TDE_ERRCODE_H__


	)

17 
	~"hi_ty≥.h
"

19 #ifde‡
__˝lu•lus


20 #i‡
__˝lu•lus


27 
	#HI_ERR_TDE_BASE
 ((
HI_S32
)–((0x80UL + 0x20UL)<<24Ë| (100 << 16 ) | (4 << 13Ë| 1 ))

	)

31 
HI_ERR_TDE_DEV_NOT_OPEN
 = 
HI_ERR_TDE_BASE
,

32 
HI_ERR_TDE_DEV_OPEN_FAILED
,

33 
HI_ERR_TDE_NULL_PTR
,

34 
HI_ERR_TDE_NO_MEM
,

35 
HI_ERR_TDE_INVALID_HANDLE
,

36 
HI_ERR_TDE_INVALID_PARA
,

37 
HI_ERR_TDE_NOT_ALIGNED
,

38 
HI_ERR_TDE_MINIFICATION
,

39 
HI_ERR_TDE_CLIP_AREA
,

40 
HI_ERR_TDE_JOB_TIMEOUT
,

41 
HI_ERR_TDE_UNSUPPORTED_OPERATION
,

42 
HI_ERR_TDE_QUERY_TIMEOUT
,

43 
HI_ERR_TDE_INTERRUPT


47 #ifde‡
__˝lu•lus


48 #i‡
__˝lu•lus


	@include/hi_tde_type.h

19 #i‚de‡
__TDE_TYPE_H__


20 
	#__TDE_TYPE_H__


	)

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
	~"hi_tde_îrcode.h
"

35 
HI_S32
 
	tTDE_HANDLE
;

38 
HI_VOID
 (* 
	tTDE_FUNC_CB
Ë(
	tHI_VOID
 *
	tpP¨aml
, HI_VOID *
	tpP¨amr
);

42 
	ehiTDE2_COLOR_FMT_E


44 
TDE2_COLOR_FMT_RGB444
 = 0,

45 
TDE2_COLOR_FMT_BGR444
,

46 
TDE2_COLOR_FMT_RGB555
,

47 
TDE2_COLOR_FMT_BGR555
,

48 
TDE2_COLOR_FMT_RGB565
,

49 
TDE2_COLOR_FMT_BGR565
,

50 
TDE2_COLOR_FMT_RGB888
,

51 
TDE2_COLOR_FMT_BGR888
,

52 
TDE2_COLOR_FMT_ARGB4444
,

53 
TDE2_COLOR_FMT_ABGR4444
,

54 
TDE2_COLOR_FMT_RGBA4444
,

55 
TDE2_COLOR_FMT_BGRA4444
,

56 
TDE2_COLOR_FMT_ARGB1555
,

57 
TDE2_COLOR_FMT_ABGR1555
,

58 
TDE2_COLOR_FMT_RGBA1555
,

59 
TDE2_COLOR_FMT_BGRA1555
,

60 
TDE2_COLOR_FMT_ARGB8565
,

61 
TDE2_COLOR_FMT_ABGR8565
,

62 
TDE2_COLOR_FMT_RGBA8565
,

63 
TDE2_COLOR_FMT_BGRA8565
,

64 
TDE2_COLOR_FMT_ARGB8888
,

65 
TDE2_COLOR_FMT_ABGR8888
,

66 
TDE2_COLOR_FMT_RGBA8888
,

67 
TDE2_COLOR_FMT_BGRA8888
,

68 
TDE2_COLOR_FMT_RABG8888
,

69 
TDE2_COLOR_FMT_CLUT1
,

70 
TDE2_COLOR_FMT_CLUT2
,

71 
TDE2_COLOR_FMT_CLUT4
,

72 
TDE2_COLOR_FMT_CLUT8
,

73 
TDE2_COLOR_FMT_ACLUT44
,

74 
TDE2_COLOR_FMT_ACLUT88
,

75 
TDE2_COLOR_FMT_A1
,

76 
TDE2_COLOR_FMT_A8
,

77 
TDE2_COLOR_FMT_YCbCr888
,

78 
TDE2_COLOR_FMT_AYCbCr8888
,

79 
TDE2_COLOR_FMT_YCbCr422
,

80 
TDE2_COLOR_FMT_byã
,

81 
TDE2_COLOR_FMT_hÆfw‹d
,

82 
TDE2_COLOR_FMT_JPG_YCbCr400MBP
,

83 
TDE2_COLOR_FMT_JPG_YCbCr422MBHP
,

84 
TDE2_COLOR_FMT_JPG_YCbCr422MBVP
,

85 
TDE2_COLOR_FMT_MP1_YCbCr420MBP
,

86 
TDE2_COLOR_FMT_MP2_YCbCr420MBP
,

87 
TDE2_COLOR_FMT_MP2_YCbCr420MBI
,

88 
TDE2_COLOR_FMT_JPG_YCbCr420MBP
,

89 
TDE2_COLOR_FMT_JPG_YCbCr444MBP
,

90 
TDE2_COLOR_FMT_BUTT


91 } 
	tTDE2_COLOR_FMT_E
;

94 
	ehiTDE2_MB_COLORFMT_E


96 
TDE2_MB_COLOR_FMT_JPG_YCbCr400MBP
 = 0,

97 
TDE2_MB_COLOR_FMT_JPG_YCbCr422MBHP
,

98 
TDE2_MB_COLOR_FMT_JPG_YCbCr422MBVP
,

99 
TDE2_MB_COLOR_FMT_MP1_YCbCr420MBP
,

100 
TDE2_MB_COLOR_FMT_MP2_YCbCr420MBP
,

101 
TDE2_MB_COLOR_FMT_MP2_YCbCr420MBI
,

102 
TDE2_MB_COLOR_FMT_JPG_YCbCr420MBP
,

103 
TDE2_MB_COLOR_FMT_JPG_YCbCr444MBP
,

104 
TDE2_MB_COLOR_FMT_BUTT


105 } 
	tTDE2_MB_COLOR_FMT_E
;

108 
	shiTDE2_SURFACE_S


111 
HI_U32
 
u32PhyAddr
;

114 
TDE2_COLOR_FMT_E
 
íCﬁ‹Fmt
;

117 
HI_U32
 
u32Height
;

120 
HI_U32
 
u32Width
;

123 
HI_U32
 
u32Såide
;

126 
HI_U8
* 
pu8ClutPhyAddr
;

129 
HI_BOOL
 
bYCbCrClut
;

132 
HI_BOOL
 
bAÕhaMax255
;

135 
HI_BOOL
 
bAÕhaExt1555
;

136 
HI_U8
 
u8AÕha0
;

137 
HI_U8
 
u8AÕha1
;

139 
HI_U32
 
u32CbCrPhyAddr
;

140 
HI_U32
 
u32CbCrSåide
;

141 } 
	tTDE2_SURFACE_S
;

144 
	shiTDE2_MB_S


146 
TDE2_MB_COLOR_FMT_E
 
íMbFmt
;

147 
HI_U32
 
u32YPhyAddr
;

148 
HI_U32
 
u32YWidth
;

149 
HI_U32
 
u32YHeight
;

150 
HI_U32
 
u32YSåide
;

151 
HI_U32
 
u32CbCrPhyAddr
;

152 
HI_U32
 
u32CbCrSåide
;

153 } 
	tTDE2_MB_S
;

155 
	shiTDE2_RECT_S


157 
HI_S32
 
s32Xpos
;

158 
HI_S32
 
s32Ypos
;

159 
HI_U32
 
u32Width
;

160 
HI_U32
 
u32Height
;

161 } 
	tTDE2_RECT_S
;

164 
	ehiTDE2_ALUCMD_E


166 
TDE2_ALUCMD_NONE
 = 0x0,

167 
TDE2_ALUCMD_BLEND
 = 0x1,

168 
TDE2_ALUCMD_ROP
 = 0x2,

169 
TDE2_ALUCMD_COLORIZE
 = 0x4,

170 
TDE2_ALUCMD_BUTT
 = 0x8

171 } 
	tTDE2_ALUCMD_E
;

174 
	ehiTDE2_ROP_CODE_E


176 
TDE2_ROP_BLACK
 = 0,

177 
TDE2_ROP_NOTMERGEPEN
,

178 
TDE2_ROP_MASKNOTPEN
,

179 
TDE2_ROP_NOTCOPYPEN
,

180 
TDE2_ROP_MASKPENNOT
,

181 
TDE2_ROP_NOT
,

182 
TDE2_ROP_XORPEN
,

183 
TDE2_ROP_NOTMASKPEN
,

184 
TDE2_ROP_MASKPEN
,

185 
TDE2_ROP_NOTXORPEN
,

186 
TDE2_ROP_NOP
,

187 
TDE2_ROP_MERGENOTPEN
,

188 
TDE2_ROP_COPYPEN
,

189 
TDE2_ROP_MERGEPENNOT
,

190 
TDE2_ROP_MERGEPEN
,

191 
TDE2_ROP_WHITE
,

192 
TDE2_ROP_BUTT


193 } 
	tTDE2_ROP_CODE_E
;

196 
	ehiTDE2_MIRROR_E


198 
TDE2_MIRROR_NONE
 = 0,

199 
TDE2_MIRROR_HORIZONTAL
,

200 
TDE2_MIRROR_VERTICAL
,

201 
TDE2_MIRROR_BOTH
,

202 
TDE2_MIRROR_BUTT


203 } 
	tTDE2_MIRROR_E
;

206 
	ehiTDE2_CLIPMODE_E


208 
TDE2_CLIPMODE_NONE
 = 0,

209 
TDE2_CLIPMODE_INSIDE
,

210 
TDE2_CLIPMODE_OUTSIDE
,

211 
TDE2_CLIPMODE_BUTT


212 } 
	tTDE2_CLIPMODE_E
;

215 
	ehiTDE2_MBRESIZE_E


217 
TDE2_MBRESIZE_NONE
 = 0,

218 
TDE2_MBRESIZE_QUALITY_LOW
,

219 
TDE2_MBRESIZE_QUALITY_MIDDLE
,

220 
TDE2_MBRESIZE_QUALITY_HIGH
,

221 
TDE2_MBRESIZE_BUTT


222 } 
	tTDE2_MBRESIZE_E
;

225 
	shiTDE2_FILLCOLOR_S


227 
TDE2_COLOR_FMT_E
 
íCﬁ‹Fmt
;

228 
HI_U32
 
u32FûlCﬁ‹
;

229 } 
	tTDE2_FILLCOLOR_S
;

232 
	ehiTDE2_COLORKEY_MODE_E


234 
TDE2_COLORKEY_MODE_NONE
 = 0,

235 
TDE2_COLORKEY_MODE_FOREGROUND
,

236 
TDE2_COLORKEY_MODE_BACKGROUND
,

237 
TDE2_COLORKEY_MODE_BUTT


238 } 
	tTDE2_COLORKEY_MODE_E
;

241 
	shiTDE2_COLORKEY_COMP_S


243 
HI_U8
 
u8CompMö
;

244 
HI_U8
 
u8CompMax
;

245 
HI_U8
 
bCompOut
;

246 
HI_U8
 
bCompIgn‹e
;

247 
HI_U8
 
u8CompMask
;

248 
HI_U8
 
u8Re£rved
;

249 
HI_U8
 
u8Re£rved1
;

250 
HI_U8
 
u8Re£rved2
;

251 } 
	tTDE2_COLORKEY_COMP_S
;

254 
	uhiTDE2_COLORKEY_U


258 
TDE2_COLORKEY_COMP_S
 
°AÕha
;

259 
TDE2_COLORKEY_COMP_S
 
°Red
;

260 
TDE2_COLORKEY_COMP_S
 
°Gªí
;

261 
TDE2_COLORKEY_COMP_S
 
°Blue
;

262 } 
°ruCkARGB
;

265 
TDE2_COLORKEY_COMP_S
 
°AÕha
;

266 
TDE2_COLORKEY_COMP_S
 
°Y
;

267 
TDE2_COLORKEY_COMP_S
 
°Cb
;

268 
TDE2_COLORKEY_COMP_S
 
°Cr
;

269 } 
°ruCkYCbCr
;

272 
TDE2_COLORKEY_COMP_S
 
°AÕha
;

273 
TDE2_COLORKEY_COMP_S
 
°Clut
;

274 } 
°ruCkClut
;

275 } 
	tTDE2_COLORKEY_U
;

278 
	ehiTDE2_OUTALPHA_FROM_E


280 
TDE2_OUTALPHA_FROM_NORM
 = 0,

282 
TDE2_OUTALPHA_FROM_BACKGROUND
,

283 
TDE2_OUTALPHA_FROM_FOREGROUND
,

284 
TDE2_OUTALPHA_FROM_GLOBALALPHA
,

285 
TDE2_OUTALPHA_FROM_BUTT


286 } 
	tTDE2_OUTALPHA_FROM_E
;

289 
	ehiTDE2_FILTER_MODE_E


291 
TDE2_FILTER_MODE_COLOR
 = 0,

292 
TDE2_FILTER_MODE_ALPHA
,

293 
TDE2_FILTER_MODE_BOTH
,

294 
TDE2_FILTER_MODE_BUTT


295 } 
	tTDE2_FILTER_MODE_E
;

298 
	ehiTDE2_DEFLICKER_MODE_E


300 
TDE2_DEFLICKER_MODE_NONE
 = 0,

301 
TDE2_DEFLICKER_MODE_RGB
,

302 
TDE2_DEFLICKER_MODE_BOTH
,

303 
TDE2_DEFLICKER_MODE_BUTT


304 }
	tTDE2_DEFLICKER_MODE_E
;

307 
	ehiTDE2_BLEND_MODE_E


309 
TDE2_BLEND_ZERO
 = 0x0,

310 
TDE2_BLEND_ONE
,

311 
TDE2_BLEND_SRC2COLOR
,

312 
TDE2_BLEND_INVSRC2COLOR
,

313 
TDE2_BLEND_SRC2ALPHA
,

314 
TDE2_BLEND_INVSRC2ALPHA
,

315 
TDE2_BLEND_SRC1COLOR
,

316 
TDE2_BLEND_INVSRC1COLOR
,

317 
TDE2_BLEND_SRC1ALPHA
,

318 
TDE2_BLEND_INVSRC1ALPHA
,

319 
TDE2_BLEND_SRC2ALPHASAT
,

320 
TDE2_BLEND_BUTT


321 }
	tTDE2_BLEND_MODE_E
;

327 
	ehiTDE2_BLENDCMD_E


329 
TDE2_BLENDCMD_NONE
 = 0x0,

330 
TDE2_BLENDCMD_CLEAR
,

331 
TDE2_BLENDCMD_SRC
,

332 
TDE2_BLENDCMD_SRCOVER
,

333 
TDE2_BLENDCMD_DSTOVER
,

334 
TDE2_BLENDCMD_SRCIN
,

335 
TDE2_BLENDCMD_DSTIN
,

336 
TDE2_BLENDCMD_SRCOUT
,

337 
TDE2_BLENDCMD_DSTOUT
,

338 
TDE2_BLENDCMD_SRCATOP
,

339 
TDE2_BLENDCMD_DSTATOP
,

340 
TDE2_BLENDCMD_ADD
,

341 
TDE2_BLENDCMD_XOR
,

342 
TDE2_BLENDCMD_DST
,

343 
TDE2_BLENDCMD_CONFIG
,

344 
TDE2_BLENDCMD_BUTT


345 }
	tTDE2_BLENDCMD_E
;

348 
	shiTDE2_BLEND_OPT_S


350 
HI_BOOL
 
bGlobÆAÕhaE«bÀ
;

351 
HI_BOOL
 
bPixñAÕhaE«bÀ
;

352 
HI_BOOL
 
bSrc1AÕhaPªmu…i
;

353 
HI_BOOL
 
bSrc2AÕhaPªmu…i
;

354 
TDE2_BLENDCMD_E
 
eBÀndCmd
;

355 
TDE2_BLEND_MODE_E
 
eSrc1BÀndMode
;

356 
TDE2_BLEND_MODE_E
 
eSrc2BÀndMode
;

357 }
	tTDE2_BLEND_OPT_S
;

360 
	shiTDE2_CSC_OPT_S


362 
HI_BOOL
 
bICSCU£rE«bÀ
;

363 
HI_BOOL
 
bICSCP¨amRñﬂd
;

364 
HI_BOOL
 
bOCSCU£rE«bÀ
;

365 
HI_BOOL
 
bOCSCP¨amRñﬂd
;

366 
HI_U32
 
u32ICSCP¨amAddr
;

367 
HI_U32
 
u32OCSCP¨amAddr
;

368 }
	tTDE2_CSC_OPT_S
;

371 
	shiTDE2_OPT_S


374 
TDE2_ALUCMD_E
 
íAluCmd
;

377 
TDE2_ROP_CODE_E
 
íR›Code_Cﬁ‹
;

380 
TDE2_ROP_CODE_E
 
íR›Code_AÕha
;

383 
TDE2_COLORKEY_MODE_E
 
íCﬁ‹KeyMode
;

386 
TDE2_COLORKEY_U
 
unCﬁ‹KeyVÆue
;

389 
TDE2_CLIPMODE_E
 
íClùMode
;

392 
TDE2_RECT_S
 
°ClùRe˘
;

395 
TDE2_DEFLICKER_MODE_E
 
íDeÊickîMode
;

398 
HI_BOOL
 
bResize
;

401 
TDE2_FILTER_MODE_E
 
íFûãrMode
;

404 
TDE2_MIRROR_E
 
íMúr‹
;

407 
HI_BOOL
 
bClutRñﬂd
;

410 
HI_U8
 
u8GlobÆAÕha
;

413 
TDE2_OUTALPHA_FROM_E
 
íOutAÕhaFrom
;

415 
HI_U32
 
u32Cﬁ‹ize
;

417 
TDE2_BLEND_OPT_S
 
°BÀndO±
;

419 
TDE2_CSC_OPT_S
 
°CscO±
;

420 } 
	tTDE2_OPT_S
;

424 
	shiTDE2_MBOPT_S


427 
TDE2_CLIPMODE_E
 
íClùMode
;

430 
TDE2_RECT_S
 
°ClùRe˘
;

433 
HI_BOOL
 
bDeÊickî
;

436 
TDE2_MBRESIZE_E
 
íResize
;

439 
HI_BOOL
 
bSëOutAÕha
;

440 
HI_U8
 
u8OutAÕha
;

441 } 
	tTDE2_MBOPT_S
;

444 
	shiTDE2_PATTERN_FILL_OPT_S


446 
TDE2_ALUCMD_E
 
íAluCmd
;

448 
TDE2_ROP_CODE_E
 
íR›Code_Cﬁ‹
;

450 
TDE2_ROP_CODE_E
 
íR›Code_AÕha
;

452 
TDE2_COLORKEY_MODE_E
 
íCﬁ‹KeyMode
;

454 
TDE2_COLORKEY_U
 
unCﬁ‹KeyVÆue
;

456 
TDE2_CLIPMODE_E
 
íClùMode
;

458 
TDE2_RECT_S
 
°ClùRe˘
;

460 
HI_BOOL
 
bClutRñﬂd
;

462 
HI_U8
 
u8GlobÆAÕha
;

464 
TDE2_OUTALPHA_FROM_E
 
íOutAÕhaFrom
;

466 
HI_U32
 
u32Cﬁ‹ize
;

468 
TDE2_BLEND_OPT_S
 
°BÀndO±
;

470 
TDE2_CSC_OPT_S
 
°CscO±
;

472 }
	tTDE2_PATTERN_FILL_OPT_S
;

477 
	ehiTDE_DEFLICKER_LEVEL_E


479 
TDE_DEFLICKER_AUTO
 = 0,

480 
TDE_DEFLICKER_LOW
,

481 
TDE_DEFLICKER_MIDDLE
,

482 
TDE_DEFLICKER_HIGH
,

483 
TDE_DEFLICKER_BUTT


484 }
	tTDE_DEFLICKER_LEVEL_E
;

487 
	shiTDE_COMPOSOR_S


489 
TDE2_SURFACE_S
 
°SrcSurÁ˚
;

490 
TDE2_RECT_S
 
°InRe˘
;

491 
TDE2_RECT_S
 
°OutRe˘
;

492 
TDE2_OPT_S
 
°O±
;

493 }
	tTDE_COMPOSOR_S
;

496 
	shiTDE_SURFACE_LIST_S


498 
HI_U32
 
u32SurÁ˚Num
;

499 
TDE2_SURFACE_S
 *
pD°SurÁ˚
;

500 
TDE_COMPOSOR_S
 *
p°Compos‹
;

501 }
	tTDE_SURFACE_LIST_S
;

502 #ifde‡
__˝lu•lus


503 #i‡
__˝lu•lus


	@include/hi_type.h

30 #i‚de‡
__HI_TYPE_H__


31 
	#__HI_TYPE_H__


	)

34 #ifde‡
__˝lu•lus


35 #i‡
__˝lu•lus


44 
	tHI_U8
;

45 
	tHI_U16
;

46 
	tHI_U32
;

48 sig√d 
	tHI_S8
;

49 
	tHI_S16
;

50 
	tHI_S32
;

56 
	tHI_U0Q8
;

57 
	tHI_U1Q7
;

58 
	tHI_U5Q3
;

61 
	tHI_U0Q16
;

62 
	tHI_U4Q12
;

63 
	tHI_U6Q10
;

64 
	tHI_U8Q8
;

65 
	tHI_U12Q4
;

66 
	tHI_U14Q2
;

69 
	tHI_S9Q7
;

70 
	tHI_S14Q2
;

71 
	tHI_S1Q15
;

74 
	tHI_U22Q10
;

75 
	tHI_U25Q7
;

78 
	tHI_S25Q7
;

79 
	tHI_S16Q16
;

86 
	tHI_U8Q4F4
;

89 
	tHI_FLOAT
;

91 
	tHI_DOUBLE
;

94 #i‚de‡
_M_IX86


95 
	tHI_U64
;

96 
	tHI_S64
;

98 
__öt64
 
	tHI_U64
;

99 
__öt64
 
	tHI_S64
;

102 
	tHI_CHAR
;

103 
	#HI_VOID
 

	)

109 
HI_FALSE
 = 0,

110 
HI_TRUE
 = 1,

111 } 
	tHI_BOOL
;

113 #i‚de‡
NULL


114 
	#NULL
 0L

	)

117 
	#HI_NULL
 0L

	)

118 
	#HI_SUCCESS
 0

	)

119 
	#HI_FAILURE
 (-1)

	)

122 #ifde‡
__˝lu•lus


123 #i‡
__˝lu•lus


	@include/hi_vreg.h

18 #i‚de‡
__HI_VREG_H__


19 
	#__HI_VREG_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_comm_i•.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


30 
	#REG_ACCESS_WIDTH_1
 0

	)

31 
	#REG_ACCESS_WIDTH
 0

	)

43 
	#ISP_REG_BASE
 0x205A0000

	)

44 
	#ISP_REG_SIZE
 0xffff

	)

46 
	#VI_REG_BASE
 0x20580000

	)

47 
	#VI_REG_SIZE
 0x20000

	)

49 
	#VREG_SIZE_ALIGN
 0x1000

	)

51 
	#EXT_REG_BASE
 0x10000

	)

53 
	#ISP_VREG_BASE
 0x10000

	)

54 
	#ISP_VREG_SIZE
 (
VREG_SIZE_ALIGN
 << 4)

	)

56 
	#AE_LIB_VREG_BASE
(
id
Ë(0x20000 + 
VREG_SIZE_ALIGN
 * (id))

	)

57 
	#AWB_LIB_VREG_BASE
(
id
Ë(0x30000 + 
VREG_SIZE_ALIGN
 * (id))

	)

58 
	#AF_LIB_VREG_BASE
(
id
Ë(0x40000 + 
VREG_SIZE_ALIGN
 * (id))

	)

59 
	#ALG_LIB_VREG_SIZE
 (
VREG_SIZE_ALIGN
)

	)

60 
	#MAX_ALG_LIB_VREG_NUM
 (1 << 4)

	)

62 
	#HISI_AE_LIB_EXTREG_ID_0
 0

	)

63 
	#HISI_AE_LIB_EXTREG_ID_1
 1

	)

65 
	#HISI_AWB_LIB_EXTREG_ID_0
 0

	)

66 
	#HISI_AWB_LIB_EXTREG_ID_1
 1

	)

68 
	#VIU_VREG_BASE
 0x80000

	)

69 
	#VPP_VREG_BASE
 0x90000

	)

70 
	#VEDU_VREG_BASE
 0xa0000

	)

71 
	#VOU_VREG_BASE
 0xb0000

	)

73 
HI_S32
 
VReg_Inô
(
HI_U32
 
u32Ba£Addr
, HI_U32 
u32Size
);

74 
HI_S32
 
VReg_Exô
(
HI_U32
 
u32Ba£Addr
, HI_U32 
u32Size
);

75 
HI_S32
 
VReg_Rñó£AŒ
(
HI_VOID
);

76 
HI_U32
 
VReg_GëVútAddr
(HI_U32 
u32Ba£Addr
);

77 
HI_VOID
 
VReg_Munm≠
(HI_VOID);

78 
HI_U32
 
IO_READ32
(HI_U32 
u32Addr
);

79 
HI_S32
 
IO_WRITE32
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

80 
HI_U16
 
IO_READ16
(
HI_U32
 
u32Addr
);

81 
HI_S32
 
IO_WRITE16
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

82 
HI_U8
 
IO_READ8
(
HI_U32
 
u32Addr
);

83 
HI_S32
 
IO_WRITE8
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

87 
	#__IO_CALC_ADDRESS_DYNAMIC
(
BASE
Ë(
HI_U32
)(((BASE >
EXT_REG_BASE
Ë? 0 : 
ISP_REG_BASE
Ë+ (BASE))

	)

89 
	#IORD_32DIRECT
(
BASE
Ë
	`IO_READ32
(
	`__IO_CALC_ADDRESS_DYNAMIC
(BASE))

	)

90 
	#IORD_16DIRECT
(
BASE
Ë
	`IO_READ16
(
	`__IO_CALC_ADDRESS_DYNAMIC
(BASE))

	)

91 
	#IORD_8DIRECT
(
BASE
Ë
	`IO_READ8
(
	`__IO_CALC_ADDRESS_DYNAMIC
(BASE))

	)

93 
	#IOWR_32DIRECT
(
BASE
, 
DATA
Ë
	`IO_WRITE32
(
	`__IO_CALC_ADDRESS_DYNAMIC
(BASE), (DATA))

	)

94 
	#IOWR_16DIRECT
(
BASE
, 
DATA
Ë
	`IO_WRITE16
(
	`__IO_CALC_ADDRESS_DYNAMIC
(BASE), (DATA))

	)

95 
	#IOWR_8DIRECT
(
BASE
, 
DATA
Ë
	`IO_WRITE8
(
	`__IO_CALC_ADDRESS_DYNAMIC
(BASE), (DATA))

	)

100 
HI_U32
 
IO_READ32_VI
(HI_U32 
u32Addr
);

101 
HI_S32
 
IO_WRITE32_VI
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

103 
	#__IO_CALC_ADDRESS_DYNAMIC_VI
(
BASE
Ë(
HI_U32
)((
VI_REG_BASE
Ë+ (BASE))

	)

104 
	#IORD_32DIRECT_VI
(
BASE
Ë
	`IO_READ32_VI
(
	`__IO_CALC_ADDRESS_DYNAMIC_VI
(BASE))

	)

105 
	#IOWR_32DIRECT_VI
(
BASE
, 
DATA
Ë
	`IO_WRITE32_VI
(
	`__IO_CALC_ADDRESS_DYNAMIC_VI
(BASE), (DATA))

	)

108 #ifde‡
__˝lu•lus


109 #i‡
__˝lu•lus


	@include/hifb.h

18 #i‚de‡
__HIFB_H__


19 
	#__HIFB_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


27 
	~"hi_ty≥.h
"

28 
	~<löux/fb.h
>

31 
	#IOC_TYPE_HIFB
 'F'

	)

33 
	#FBIOGET_COLORKEY_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 90, 
HIFB_COLORKEY_S
)

	)

35 
	#FBIOPUT_COLORKEY_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 91, 
HIFB_COLORKEY_S
)

	)

37 
	#FBIOGET_ALPHA_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 92, 
HIFB_ALPHA_S
)

	)

39 
	#FBIOPUT_ALPHA_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 93, 
HIFB_ALPHA_S
)

	)

41 
	#FBIOGET_SCREEN_ORIGIN_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 94, 
HIFB_POINT_S
)

	)

43 
	#FBIOPUT_SCREEN_ORIGIN_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 95, 
HIFB_POINT_S
)

	)

45 
	#FBIOGET_DEFLICKER_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 98, 
HIFB_DEFLICKER_S
)

	)

47 
	#FBIOPUT_DEFLICKER_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 99, 
HIFB_DEFLICKER_S
)

	)

49 
	#FBIOGET_VBLANK_HIFB
 
	`_IO
(
IOC_TYPE_HIFB
, 100)

	)

51 
	#FBIOPUT_SHOW_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 101, 
HI_BOOL
)

	)

53 
	#FBIOGET_SHOW_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 102, 
HI_BOOL
)

	)

55 
	#FBIOGET_CAPABILITY_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 103, 
HIFB_CAPABILITY_S
)

	)

57 
	#FBIOPUT_SCREENSIZE
 
	`_IOW
(
IOC_TYPE_HIFB
, 130, 
HIFB_SIZE_S
*)

	)

59 
	#FBIOGET_SCREENSIZE
 
	`_IOR
(
IOC_TYPE_HIFB
, 131, 
HIFB_SIZE_S
*)

	)

62 
	#FBIOFLIP_SURFACE
 
	`_IOW
(
IOC_TYPE_HIFB
, 132, 
HIFB_SURFACEEX_S
)

	)

65 
	#FBIOPUT_COMPRESSION_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 133, 
HI_BOOL
)

	)

67 
	#FBIOGET_COMPRESSION_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 134, 
HI_BOOL
)

	)

72 
HI_U32
 
u32Width
;

73 
HI_U32
 
u32Height
;

74 }
	tHIFB_SIZE_S
;

76 
ölöe
 
HI_U8
 
hifb_rgb
(c⁄° 
fb_bôfõld
* 
pBô
, 
HI_S32
 
cﬁ‹
)

78  ((
HI_U8
)((((
HI_U32
)
cﬁ‹
)>>
pBô
->
off£t
Ë<< (8-pBô->
Àngth
)) +

79 ((
HI_U8
)(((
HI_U32
)(
cﬁ‹
)>>
pBô
->
off£t
Ë<< (8-pBô->
Àngth
)) >>ÖBit->length));

82 
ölöe
 
HI_S32
 
hifb_cﬁ‹2key
(c⁄° 
fb_v¨_s¸ìnöfo
* 
pV¨
, HI_S32 
cﬁ‹
)

84 i‡(
pV¨
->
bôs_≥r_pixñ
 <= 8)

86  
cﬁ‹
;

90 
HI_U8
 
r
, 
g
, 
b
;

91 
r
 = 
hifb_rgb
(&
pV¨
->
ªd
, 
cﬁ‹
);

92 
g
 = 
hifb_rgb
(&
pV¨
->
gªí
, 
cﬁ‹
);

93 
b
 = 
hifb_rgb
(&
pV¨
->
blue
, 
cﬁ‹
);

94  (
r
<<16Ë+ (
g
<<8Ë+ 
b
;

100 
HI_BOOL
 
bKeyE«bÀ
;

101 
HI_U32
 
u32Key
;

102 }
	tHIFB_COLORKEY_S
;

106 
HI_S32
 
x
;

107 
HI_S32
 
y
;

108 
HI_S32
 
w
;

109 
HI_S32
 
h
;

110 } 
	tHIFB_RECT
;

114 
HI_S32
 
s32XPos
;

115 
HI_S32
 
s32YPos
;

116 }
	tHIFB_POINT_S
;

118 
	shiHIFB_DEFLICKER_S


120 
HI_U32
 
u32HDfLevñ
;

121 
HI_U32
 
u32VDfLevñ
;

122 
HI_U8
 *
pu8HDfC€f
;

123 
HI_U8
 *
pu8VDfC€f
;

124 }
	tHIFB_DEFLICKER_S
;

129 
HI_BOOL
 
bAÕhaE«bÀ
;

130 
HI_BOOL
 
bAÕhaCh™√l
;

131 
HI_U8
 
u8AÕha0
;

132 
HI_U8
 
u8AÕha1
;

133 
HI_U8
 
u8GlobÆAÕha
;

134 
HI_U8
 
u8Re£rved
;

135 }
	tHIFB_ALPHA_S
;

139 
HIFB_FMT_RGB565
 = 0,

140 
HIFB_FMT_RGB888
,

142 
HIFB_FMT_KRGB444
,

143 
HIFB_FMT_KRGB555
,

144 
HIFB_FMT_KRGB888
,

146 
HIFB_FMT_ARGB4444
,

147 
HIFB_FMT_ARGB1555
,

148 
HIFB_FMT_ARGB8888
,

149 
HIFB_FMT_ARGB8565
,

151 
HIFB_FMT_RGBA4444
,

152 
HIFB_FMT_RGBA5551
,

153 
HIFB_FMT_RGBA5658
,

154 
HIFB_FMT_RGBA8888
,

156 
HIFB_FMT_BGR565
,

157 
HIFB_FMT_BGR888
,

158 
HIFB_FMT_ABGR4444
,

159 
HIFB_FMT_ABGR1555
,

160 
HIFB_FMT_ABGR8888
,

161 
HIFB_FMT_ABGR8565
,

162 
HIFB_FMT_KBGR444
,

163 
HIFB_FMT_KBGR555
,

164 
HIFB_FMT_KBGR888
,

166 
HIFB_FMT_1BPP
,

167 
HIFB_FMT_2BPP
,

168 
HIFB_FMT_4BPP
,

169 
HIFB_FMT_8BPP
,

170 
HIFB_FMT_ACLUT44
,

171 
HIFB_FMT_ACLUT88
,

172 
HIFB_FMT_PUYVY
,

173 
HIFB_FMT_PYUYV
,

174 
HIFB_FMT_PYVYU
,

175 
HIFB_FMT_YUV888
,

176 
HIFB_FMT_AYUV8888
,

177 
HIFB_FMT_YUVA8888
,

178 
HIFB_FMT_BUTT


179 }
	tHIFB_COLOR_FMT_E
;

183 
HI_BOOL
 
bKeyRgb
;

184 
HI_BOOL
 
bKeyAÕha
;

185 
HI_BOOL
 
bGlobÆAÕha
;

186 
HI_BOOL
 
bCm≠
;

187 
HI_BOOL
 
bHasCm≠Reg
;

188 
HI_BOOL
 
bCﬁFmt
[
HIFB_FMT_BUTT
];

189 
HI_BOOL
 
bVoSˇÀ
;

190 
HI_BOOL
 
bLayîSuµ‹ãd
;

191 
HI_U32
 
u32MaxWidth
;

192 
HI_U32
 
u32MaxHeight
;

193 
HI_U32
 
u32MöWidth
;

194 
HI_U32
 
u32MöHeight
;

195 
HI_U32
 
u32VDefLevñ
;

196 
HI_U32
 
u32HDefLevñ
;

197 
HI_BOOL
 
bDcmp
;

198 
HI_BOOL
 
bPªMul
;

199 }
	tHIFB_CAPABILITY_S
;

204 
HIFB_LAYER_BUF_DOUBLE
 = 0x0,

205 
HIFB_LAYER_BUF_ONE
 = 0x1,

206 
HIFB_LAYER_BUF_NONE
 = 0x2,

207 
HIFB_LAYER_BUF_DOUBLE_IMMEDIATE
=0x3,

208 
HIFB_LAYER_BUF_BUTT


209 } 
	tHIFB_LAYER_BUF_E
;

214 
HI_U32
 
u32PhyAddr
;

215 
HI_U32
 
u32Width
;

216 
HI_U32
 
u32Height
;

217 
HI_U32
 
u32Pôch
;

218 
HIFB_COLOR_FMT_E
 
íFmt
;

219 }
	tHIFB_SURFACE_S
;

223 
HI_U32
 
u32PhyAddr
;

224 
HIFB_ALPHA_S
 
°AÕha
;

225 
HIFB_COLORKEY_S
 
°Cﬁ‹key
;

226 }
	tHIFB_SURFACEEX_S
;

231 
HIFB_SURFACE_S
 
°C™vas
;

232 
HIFB_RECT
 
Upd©eRe˘
;

233 }
	tHIFB_BUFFER_S
;

238 
HIFB_SURFACE_S
 
°Curs‹
;

239 
HIFB_POINT_S
 
°HŸPos
;

240 } 
	tHIFB_CURSOR_S
;

245 
HI_U32
 
u32SèπSe˘i⁄
;

246 
HI_U32
 
u32Z⁄eNums
;

247 } 
	tHIFB_DDRZONE_S
;

251 
	#FBIOPUT_CURSOR_INFO
 
	`_IOW
(
IOC_TYPE_HIFB
, 104, 
HIFB_CURSOR_S
 *)

	)

252 
	#FBIOGET_CURSOR_INFO
 
	`_IOW
(
IOC_TYPE_HIFB
, 105, 
HIFB_CURSOR_S
 *)

	)

254 
	#FBIOPUT_CURSOR_STATE
 
	`_IOW
(
IOC_TYPE_HIFB
, 106, 
HI_BOOL
 *)

	)

255 
	#FBIOGET_CURSOR_STATE
 
	`_IOW
(
IOC_TYPE_HIFB
, 107, 
HI_BOOL
 *)

	)

257 
	#FBIOPUT_CURSOR_POS
 
	`_IOW
(
IOC_TYPE_HIFB
, 108, 
HIFB_POINT_S
 *)

	)

258 
	#FBIOGET_CURSOR_POS
 
	`_IOR
(
IOC_TYPE_HIFB
, 109, 
HIFB_POINT_S
 *)

	)

260 
	#FBIOPUT_CURSOR_COLORKEY
 
	`_IOR
(
IOC_TYPE_HIFB
, 110, 
HIFB_COLORKEY_S
 *)

	)

261 
	#FBIOGET_CURSOR_COLORKEY
 
	`_IOW
(
IOC_TYPE_HIFB
, 111, 
HIFB_COLORKEY_S
 *)

	)

262 
	#FBIOPUT_CURSOR_ALPHA
 
	`_IOR
(
IOC_TYPE_HIFB
, 112, 
HIFB_ALPHA_S
 *)

	)

263 
	#FBIOGET_CURSOR_ALPHA
 
	`_IOW
(
IOC_TYPE_HIFB
, 113, 
HIFB_ALPHA_S
 *)

	)

267 
	#FBIOPUT_CURSOR_ATTCHCURSOR
 
	`_IOW
(
IOC_TYPE_HIFB
, 114, 
HI_U32
 *)

	)

268 
	#FBIOPUT_CURSOR_DETACHCURSOR
 
	`_IOW
(
IOC_TYPE_HIFB
, 115, 
HI_U32
 *)

	)

274 
HIFB_LAYER_ANTIFLICKER_NONE
 = 0x0,

275 
HIFB_LAYER_ANTIFLICKER_LOW
 = 0x1,

276 
HIFB_LAYER_ANTIFLICKER_MIDDLE
 = 0x2,

277 
HIFB_LAYER_ANTIFLICKER_HIGH
 = 0x3,

278 
HIFB_LAYER_ANTIFLICKER_AUTO
 = 0x4,

279 
HIFB_LAYER_ANTIFLICKER_BUTT


280 }
	tHIFB_LAYER_ANTIFLICKER_LEVEL_E
;

285 
HIFB_MIRROR_NONE
 = 0x0,

286 
HIFB_MIRROR_HORIZONTAL
 = 0x1,

287 
HIFB_MIRROR_VERTICAL
 = 0x2,

288 
HIFB_MIRROR_BOTH
= 0x3,

289 
HIFB_MIRROR_BUTT


290 }
	tHIFB_MIRROR_MODE_E
;

295 
HIFB_LAYERMASK_BUFMODE
 = 0x1,

296 
HIFB_LAYERMASK_ANTIFLICKER_MODE
 = 0x2,

297 
HIFB_LAYERMASK_POS
 = 0x4,

298 
HIFB_LAYERMASK_CANVASSIZE
 = 0x8,

299 
HIFB_LAYERMASK_DISPSIZE
 = 0x10,

300 
HIFB_LAYERMASK_SCREENSIZE
 = 0x20,

301 
HIFB_LAYERMASK_BMUL
 = 0x40,

302 
HIFB_LAYERMASK_BUTT


303 }
	tHIFB_LAYER_INFO_MASKBIT
;

308 
HIFB_LAYER_BUF_E
 
BufMode
;

309 
HIFB_LAYER_ANTIFLICKER_LEVEL_E
 
eA¡iÊickîLevñ
;

310 
HI_S32
 
s32XPos
;

311 
HI_S32
 
s32YPos
;

312 
HI_S32
 
u32C™vasWidth
;

313 
HI_S32
 
u32C™vasHeight
;

314 
HI_U32
 
u32Di•œyWidth
;

315 
HI_U32
 
u32Di•œyHeight
;

316 
HI_U32
 
u32S¸ìnWidth
;

317 
HI_U32
 
u32S¸ìnHeight
;

318 
HI_BOOL
 
bPªMul
;

319 
HI_U32
 
u32Mask
;

320 }
	tHIFB_LAYER_INFO_S
;

323 
	#FBIOPUT_LAYER_INFO
 
	`_IOW
(
IOC_TYPE_HIFB
, 120, 
HIFB_LAYER_INFO_S
*)

	)

325 
	#FBIOGET_LAYER_INFO
 
	`_IOR
(
IOC_TYPE_HIFB
, 121, 
HIFB_LAYER_INFO_S
*)

	)

327 
	#FBIOGET_CANVAS_BUFFER
 
	`_IOR
(
IOC_TYPE_HIFB
, 123, 
HIFB_BUFFER_S
*)

	)

329 
	#FBIO_REFRESH
 
	`_IOW
(
IOC_TYPE_HIFB
, 124, 
HIFB_BUFFER_S
*)

	)

332 
	#FBIO_WAITFOR_FREFRESH_DONE
 
	`_IO
(
IOC_TYPE_HIFB
, 125)

	)

335 
	#FBIOPUT_MIRROR_MODE
 
	`_IOW
(
IOC_TYPE_HIFB
, 126, 
HIFB_MIRROR_MODE_E
*)

	)

337 
	#FBIOGET_MIRROR_MODE
 
	`_IOW
(
IOC_TYPE_HIFB
, 127, 
HIFB_MIRROR_MODE_E
*)

	)

341 
	#FBIOPUT_MDDRDETECT_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 135, 
HIFB_DDRZONE_S
*)

	)

343 
	#FBIOGET_MDDRDETECT_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 136, 
HIFB_DDRZONE_S
*)

	)

348 #ifde‡
__˝lu•lus


349 #i‡
__˝lu•lus


	@include/himedia.h

1 #i‚de‡
_LINUX_HIMEDIA_DEVICE_H_


2 
	#_LINUX_HIMEDIA_DEVICE_H_


	)

4 
	~<löux/moduÀ.h
>

5 
	~<löux/maj‹.h
>

6 
	~<löux/devi˚.h
>

8 
	#HIMEDIA_DEVICE_MAJOR
 218

	)

9 
	#HIMEDIA_DYNAMIC_MINOR
 255

	)

11 
	ghimedü_devi˚
;

13 
	shimedü_›s
 {

15 (*
	mpm_¥ï¨e
)(
	mhimedü_devi˚
 *);

16 (*
	mpm_com∂ëe
)(
	mhimedü_devi˚
 *);

18 (*
	mpm_su•íd
)(
	mhimedü_devi˚
 *);

19 (*
	mpm_ªsume
)(
	mhimedü_devi˚
 *);

21 (*
	mpm_‰ìze
)(
	mhimedü_devi˚
 *);

22 (*
	mpm_thaw
)(
	mhimedü_devi˚
 *);

23 (*
	mpm_powîoff
)(
	mhimedü_devi˚
 *);

24 (*
	mpm_ª°‹e
)(
	mhimedü_devi˚
 *);

26 (*
	mpm_su•íd_œã
)(
	mhimedü_devi˚
 *);

27 (*
	mpm_ªsume_óæy
)(
	mhimedü_devi˚
 *);

28 (*
	mpm_‰ìze_œã
)(
	mhimedü_devi˚
 *);

29 (*
	mpm_thaw_óæy
)(
	mhimedü_devi˚
 *);

30 (*
	mpm_powîoff_œã
)(
	mhimedü_devi˚
 *);

31 (*
	mpm_ª°‹e_óæy
)(
	mhimedü_devi˚
 *);

33 (*
	mpm_su•íd_noúq
)(
	mhimedü_devi˚
 *);

34 (*
	mpm_ªsume_noúq
)(
	mhimedü_devi˚
 *);

36 (*
	mpm_‰ìze_noúq
)(
	mhimedü_devi˚
 *);

37 (*
	mpm_thaw_noúq
)(
	mhimedü_devi˚
 *);

38 (*
	mpm_powîoff_noúq
)(
	mhimedü_devi˚
 *);

39 (*
	mpm_ª°‹e_noúq
)(
	mhimedü_devi˚
 *);

42 
	shimedü_drivî
{

43 
devi˚_drivî
 
	mdrivî
;

44 
himedü_›s
 *
	m›s
;

45 
	m«me
[1];

48 
	#to_himedü_drivî
(
drv
) \

49 
	`c⁄èöî_of
((
drv
), 
himedü_drivî
, 
drivî
)

	)

51 
	shimedü_devi˚
 {

52 
li°_hód
 
	mli°
;

54 
	#MAX_LEN
 32

	)

55 
	mdevfs_«me
[
MAX_LEN
];

57 
	mmö‹
;

59 
devi˚
 
	mdevi˚
;

61 
moduÀ
 *
	mow√r
;

63 c⁄° 
fûe_›î©i⁄s
 *
	mf›s
;

65 
himedü_›s
 *
	mdrv›s
;

68 
himedü_drivî
 *
	mdrivî
;

72 
	#to_himedü_devi˚
(
dev
) \

73 
	`c⁄èöî_of
((
dev
), 
himedü_devi˚
, 
devi˚
)

	)

75 
himedü_ªgi°î
(
himedü_devi˚
 *
pdev
);

77 
himedü_uƒegi°î
(
himedü_devi˚
 *
pdev
);

79 
	#MODULE_ALIAS_HIMEDIA
(
mö‹
) \

80 
	`MODULE_ALIAS
("himedü-ch¨-maj‹-" 
	`__°rögify
(
HIMEDIA_DEVICE_MAJOR
) \

81 "-" 
	`__°rögify
(
mö‹
))

	)

	@include/iniparser.h

13 #i‚de‡
_INIPARSER_H_


14 
	#_INIPARSER_H_


	)

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

32 
	~"di˘i⁄¨y.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


39 
	#KVCSIZE
 512

	)

42 
öù¨£r_add_íåy
(

43 
di˘i⁄¨y
 * 
d
,

44 c⁄° * 
£c
,

45 c⁄° * 
key
,

46 c⁄° * 
vÆ
);

67 
öù¨£r_gën£c
(c⁄° 
di˘i⁄¨y
 * 
d
);

85 * 
öù¨£r_gë£˙ame
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° 
n
);

100 
öù¨£r_dump_öi
(c⁄° 
di˘i⁄¨y
 * 
d
, 
FILE
 * 
f
);

115 
öù¨£r_dump
(
di˘i⁄¨y
 * 
d
, 
FILE
 * 
f
);

135 * 
öù¨£r_gë°r
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
);

153 * 
öù¨£r_gë°rög
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, * 
def
);

168 
öù¨£r_gëöt
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
nŸfound
);

183 
öù¨£r_gëdoubÀ
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
nŸfound
);

217 
öù¨£r_gëboﬁón
(c⁄° 
di˘i⁄¨y
 * 
d
, c⁄° * 
key
, c⁄° 
nŸfound
);

234 
öù¨£r_£t°r
(c⁄° 
di˘i⁄¨y
 * 
öi
, c⁄° * 
íåy
, c⁄° * 
vÆ
);

246 
öù¨£r_un£t
(
di˘i⁄¨y
 * 
öi
, c⁄° * 
íåy
);

260 
öù¨£r_föd_íåy
(c⁄° 
di˘i⁄¨y
 * 
öi
, c⁄° * 
íåy
) ;

277 
di˘i⁄¨y
 * 
öù¨£r_lﬂd
(c⁄° * 
ööame
);

281 
öù¨£r_add_commít
(

282 
di˘i⁄¨y
 *
d
,

283 c⁄° *
£c
,

284 c⁄° *
key
,

285 c⁄° *
commít
,

286 c⁄° 
∂a˚
);

300 
öù¨£r_‰ìdi˘
(
di˘i⁄¨y
 * 
d
);

302 
öù¨£r_£c_gëNLowLevî
(c⁄° 
di˘i⁄¨y
 * 
d
,c⁄° * 
U≥rLevî
);

303 * 
öù¨£r_£c_gëLowLevî
(c⁄° 
di˘i⁄¨y
 * 
d
,c⁄° * 
UpLevî
, 
n
);

304 
öù¨£r_mem_¥ötf
(c⁄° 
di˘i⁄¨y
 * 
d
);

306 #ifde‡
__˝lu•lus


307 #i‡
__˝lu•lus


	@include/list.h

32 #i‚de‡
_HPT_LIST_H_


33 
	#_HPT_LIST_H_


	)

35 #i‚de‡
_LINUX_LIST_H


37 #i‚de‡
HPT_INLINE


38 
	#HPT_INLINE
 
__ölöe


	)

41 
	tHPT_UPTR
;

43 
	sli°_hód
 {

44 
li°_hód
 *
	m√xt
, *
	m¥ev
;

47 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

49 
	#INIT_LIST_HEAD
(
±r
Ëdÿ{ (±r)->
√xt
 = (±r); (±r)->
¥ev
 = (±r); } 0)

	)

51 
HPT_INLINE
 
	$__li°_add
(
li°_hód
 * 
_√w
, li°_hód * 
¥ev
, li°_hód * 
√xt
)

53 
√xt
->
¥ev
 = 
_√w
;

54 
_√w
->
√xt
 =Çext;

55 
_√w
->
¥ev
 =Örev;

56 
¥ev
->
√xt
 = 
_√w
;

57 
	}
}

59 
HPT_INLINE
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
hód
)

61 
	`__li°_add
(
_√w
, 
hód
, hód->
√xt
);

62 
	}
}

64 
HPT_INLINE
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
hód
)

66 
	`__li°_add
(
_√w
, 
hód
->
¥ev
, head);

67 
	}
}

69 
HPT_INLINE
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

71 
√xt
->
¥ev
 =Örev;

72 
¥ev
->
√xt
 =Çext;

73 
	}
}

75 
HPT_INLINE
 
	$li°_dñ
(
li°_hód
 *
íåy
)

77 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

78 
	}
}

80 
HPT_INLINE
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

82 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

83 
	`INIT_LIST_HEAD
(
íåy
);

84 
	}
}

86 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

88 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

89 
	`li°_add
(
li°
, 
hód
);

90 
	}
}

92 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

93 
li°_hód
 *
hód
)

95 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

96 
	`li°_add_èû
(
li°
, 
hód
);

97 
	}
}

99 
HPT_INLINE
 
	$li°_em±y
(
li°_hód
 *
hód
)

101  
hód
->
√xt
 == head;

102 
	}
}

104 
HPT_INLINE
 
	$__li°_•li˚
(
li°_hód
 *
li°
,

105 
li°_hód
 *
hód
)

107 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

108 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

109 
li°_hód
 *
©
 = 
hód
->
√xt
;

111 
fú°
->
¥ev
 = 
hód
;

112 
hód
->
√xt
 = 
fú°
;

114 
œ°
->
√xt
 = 
©
;

115 
©
->
¥ev
 = 
œ°
;

116 
	}
}

118 
HPT_INLINE
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

120 i‡(!
	`li°_em±y
(
li°
))

121 
	`__li°_•li˚
(
li°
, 
hód
);

122 
	}
}

124 
HPT_INLINE
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
, li°_hód *
hód
)

126 i‡(!
	`li°_em±y
(
li°
)) {

127 
	`__li°_•li˚
(
li°
, 
hód
);

128 
	`INIT_LIST_HEAD
(
li°
);

130 
	}
}

134 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

135 ((
ty≥
 *)(()(
±r
)-(()(&(—y≥ *)1)->
membî
Ë- 1)))

	)

137 
	#li°_f‹_óch
(
pos
, 
hód
) \

138 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

140 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

141 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

142 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

144 
	#gë_fú°_ôem
(
©èched
, 
ty≥
, 
membî
) \

145 ((
ty≥
 *)((*)((
©èched
)->
√xt
)-(
HPT_UPTR
)(&(—y≥ *)0)->
membî
)))

	)

	@include/mpi_adec.h

16 #i‚de‡
__MPI_ADEC_H__


17 
	#__MPI_ADEC_H__


	)

19 
	~"hi_comm⁄.h
"

20 
	~"hi_comm_aio.h
"

21 
	~"hi_comm_adec.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_ADEC_Cª©eChn
(
ADEC_CHN
 
AdChn
, 
ADEC_CHN_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_ADEC_De°royChn
(
ADEC_CHN
 
AdChn
);

33 
HI_S32
 
HI_MPI_ADEC_SídSåóm
(
ADEC_CHN
 
AdChn
, c⁄° 
AUDIO_STREAM_S
 *
p°Såóm
, 
HI_BOOL
 
bBlock
);

35 
HI_S32
 
HI_MPI_ADEC_CÀ¨ChnBuf
(
ADEC_CHN
 
AdChn
);

37 
HI_S32
 
HI_MPI_ADEC_Regei°îDecodî
(HI_S32 *
ps32H™dÀ
, 
ADEC_DECODER_S
 *
p°Decodî
);

38 
HI_S32
 
HI_MPI_ADEC_UnRegi°îDecodî
(HI_S32 
s32H™dÀ
);

40 
HI_S32
 
HI_MPI_ADEC_GëFøme
(
ADEC_CHN
 
AdChn
, 
AUDIO_FRAME_INFO_S
 *
p°FrmInfo
, 
HI_BOOL
 
bBlock
);

41 
HI_S32
 
HI_MPI_ADEC_Rñó£Føme
(
ADEC_CHN
 
AdChn
, 
AUDIO_FRAME_INFO_S
 *
p°FrmInfo
);

42 
HI_S32
 
HI_MPI_ADEC_SídEndOfSåóm
(
ADEC_CHN
 
AdChn
, 
HI_BOOL
 
bIn°™t
);

46 #ifde‡
__˝lu•lus


47 #i‡
__˝lu•lus


	@include/mpi_ae.h

17 #i‚de‡
__MPI_AE_H__


18 
	#__MPI_AE_H__


	)

20 
	~"hi_comm_i•.h
"

21 
	~"hi_comm_3a.h
"

22 
	~"hi_´_comm.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


32 
HI_S32
 
HI_MPI_AE_Regi°î
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AeLib
);

33 
HI_S32
 
HI_MPI_AE_UnRegi°î
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AeLib
);

36 
HI_S32
 
HI_MPI_AE_Sís‹RegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AeLib
, 
SENSOR_ID
 
Sís‹Id
,

37 
AE_SENSOR_REGISTER_S
 *
p°Regi°î
);

38 
HI_S32
 
HI_MPI_AE_Sís‹UnRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AeLib
, 
SENSOR_ID
 
Sís‹Id
);

40 
HI_S32
 
HI_MPI_ISP_SëExposuªAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_EXPOSURE_ATTR_S
 *
p°ExpAâr
);

41 
HI_S32
 
HI_MPI_ISP_GëExposuªAâr
(
ISP_DEV
 
I•Dev
, 
ISP_EXPOSURE_ATTR_S
 *
p°ExpAâr
);

43 
HI_S32
 
HI_MPI_ISP_SëWDRExposuªAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_WDR_EXPOSURE_ATTR_S
 *
p°WDRExpAâr
);

44 
HI_S32
 
HI_MPI_ISP_GëWDRExposuªAâr
(
ISP_DEV
 
I•Dev
, 
ISP_WDR_EXPOSURE_ATTR_S
 *
p°WDRExpAâr
);

46 
HI_S32
 
HI_MPI_ISP_SëAERouãAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_AE_ROUTE_S
 *
p°AERouãAâr
);

47 
HI_S32
 
HI_MPI_ISP_GëAERouãAâr
(
ISP_DEV
 
I•Dev
, 
ISP_AE_ROUTE_S
 *
p°AERouãAâr
);

49 
HI_S32
 
HI_MPI_ISP_QuîyExposuªInfo
(
ISP_DEV
 
I•Dev
, 
ISP_EXP_INFO_S
 *
p°ExpInfo
);

51 
HI_S32
 
HI_MPI_ISP_SëIrisAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_IRIS_ATTR_S
 *
p°IrisAâr
);

52 
HI_S32
 
HI_MPI_ISP_GëIrisAâr
(
ISP_DEV
 
I•Dev
, 
ISP_IRIS_ATTR_S
 *
p°IrisAâr
);

54 
HI_S32
 
HI_MPI_ISP_SëDcúisAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DCIRIS_ATTR_S
 *
p°DcúisAâr
);

55 
HI_S32
 
HI_MPI_ISP_GëDcúisAâr
(
ISP_DEV
 
I•Dev
, 
ISP_DCIRIS_ATTR_S
 *
p°DcúisAâr
);

57 
HI_S32
 
HI_MPI_ISP_SëPúisAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_PIRIS_ATTR_S
 *
p°PúisAâr
);

58 
HI_S32
 
HI_MPI_ISP_GëPúisAâr
(
ISP_DEV
 
I•Dev
, 
ISP_PIRIS_ATTR_S
 *
p°PúisAâr
);

60 
HI_S32
 
HI_MPI_ISP_SëAERouãAârEx
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_AE_ROUTE_EX_S
 *
p°AERouãAârEx
);

61 
HI_S32
 
HI_MPI_ISP_GëAERouãAârEx
(
ISP_DEV
 
I•Dev
, 
ISP_AE_ROUTE_EX_S
 *
p°AERouãAârEx
);

66 #ifde‡
__˝lu•lus


67 #i‡
__˝lu•lus


	@include/mpi_aenc.h

16 #i‚de‡
__MPI_AENC_H__


17 
	#__MPI_AENC_H__


	)

19 
	~"hi_comm⁄.h
"

20 
	~"hi_comm_aio.h
"

21 
	~"hi_comm_´nc.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
	#AENC_ADAPT_MAGIC
 0Xfcfcfcfc

	)

32 
HI_S32
 
HI_MPI_AENC_Cª©eChn
(
AENC_CHN
 
AeChn
, c⁄° 
AENC_CHN_ATTR_S
 *
p°Aâr
);

33 
HI_S32
 
HI_MPI_AENC_De°royChn
(
AENC_CHN
 
AeChn
);

35 
HI_S32
 
HI_MPI_AENC_SídFøme
(
AENC_CHN
 
AeChn
, c⁄° 
AUDIO_FRAME_S
 *
p°Frm
, c⁄° 
AEC_FRAME_S
 *
p°AecFrm
);

37 
HI_S32
 
HI_MPI_AENC_GëSåóm
(
AENC_CHN
 
AeChn
, 
AUDIO_STREAM_S
 *
p°Såóm
, HI_S32 
s32MûliSec
);

38 
HI_S32
 
HI_MPI_AENC_Rñó£Såóm
(
AENC_CHN
 
AeChn
, c⁄° 
AUDIO_STREAM_S
 *
p°Såóm
);

40 
HI_S32
 
HI_MPI_AENC_GëFd
(
AENC_CHN
 
AeChn
);

42 
HI_S32
 
HI_MPI_AENC_Regei°îEncodî
(HI_S32 *
ps32H™dÀ
, 
AENC_ENCODER_S
 *
p°Encodî
);

43 
HI_S32
 
HI_MPI_AENC_UnRegi°îEncodî
(HI_S32 
s32H™dÀ
);

45 
HI_S32
 
HI_MPI_AENC_SaveFûe
(
AENC_CHN
 
AeChn
, 
AUDIO_SAVE_FILE_INFO_S
 *
p°SaveFûeInfo
);

48 #ifde‡
__˝lu•lus


49 #i‡
__˝lu•lus


	@include/mpi_af.h

17 #i‚de‡
__MPI_AF_H__


18 
	#__MPI_AF_H__


	)

20 
	~"hi_comm_i•.h
"

21 
	~"hi_comm_3a.h
"

22 
	~"hi_af_comm.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


31 
HI_S32
 
HI_MPI_AF_Regi°î
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AfLib
);

32 
HI_S32
 
HI_MPI_AF_UnRegi°î
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AfLib
);

36 
HI_S32
 
hi_af_£ns‹_ªgi°î_cb
(
ALG_LIB_S
 *
p°AfLib
, 
SENSOR_ID
 
Sís‹Id
,

37 
CMOS_ISP_AF_DEFAULT_S
 *
p°SnsD·
, 
SENSOR_AF_EXP_FUNC_S
 *
p°SnsExp
);

41 
HI_S32
 
HI_MPI_ISP_SëFocusTy≥
(
ISP_DEV
 
I•Dev
, 
ISP_OP_TYPE_E
 
íFocusTy≥
);

42 
HI_S32
 
HI_MPI_ISP_GëFocusTy≥
(
ISP_DEV
 
I•Dev
, 
ISP_OP_TYPE_E
 *
≥nFocusTy≥
);

44 
HI_S32
 
HI_MPI_ISP_SëAFAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_AF_ATTR_S
 *
p°AFAâr
);

45 
HI_S32
 
HI_MPI_ISP_GëAFAâr
(
ISP_DEV
 
I•Dev
, 
ISP_AF_ATTR_S
 *
p°AFAâr
);

47 
HI_S32
 
HI_MPI_ISP_SëMFAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_MF_ATTR_S
 *
p°MFAâr
);

48 
HI_S32
 
HI_MPI_ISP_GëMFAâr
(
ISP_DEV
 
I•Dev
, 
ISP_MF_ATTR_S
 *
p°MFAâr
);

50 
HI_S32
 
HI_MPI_ISP_M™uÆFocusMove
(
ISP_DEV
 
I•Dev
, HI_S32 
s32MoveSãps
);

53 #ifde‡
__˝lu•lus


54 #i‡
__˝lu•lus


	@include/mpi_ai.h

16 #i‚de‡
__MPI_AI_H__


17 
	#__MPI_AI_H__


	)

19 
	~"hi_ty≥.h
"

20 
	~"hi_comm⁄.h
"

21 
	~"hi_comm_aio.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_AI_SëPubAâr
(
AUDIO_DEV
 
AudioDevId
, c⁄° 
AIO_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_AI_GëPubAâr
(
AUDIO_DEV
 
AudioDevId
, 
AIO_ATTR_S
 *
p°Aâr
);

33 
HI_S32
 
HI_MPI_AI_E«bÀ
(
AUDIO_DEV
 
AudioDevId
);

34 
HI_S32
 
HI_MPI_AI_DißbÀ
(
AUDIO_DEV
 
AudioDevId
);

36 
HI_S32
 
HI_MPI_AI_E«bÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

37 
HI_S32
 
HI_MPI_AI_DißbÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

39 
HI_S32
 
HI_MPI_AI_GëFøme
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_FRAME_S
 *
p°Frm
, 
AEC_FRAME_S
 *
p°AecFrm
, HI_S32 
s32MûliSec
);

40 
HI_S32
 
HI_MPI_AI_Rñó£Føme
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_FRAME_S
 *
p°Frm
, 
AEC_FRAME_S
 *
p°AecFrm
);

42 
HI_S32
 
HI_MPI_AI_SëChnP¨am
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AI_CHN_PARAM_S
 *
p°ChnP¨am
);

43 
HI_S32
 
HI_MPI_AI_GëChnP¨am
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AI_CHN_PARAM_S
 *
p°ChnP¨am
);

45 
HI_S32
 
HI_MPI_AI_SëVqeAâr
(
AUDIO_DEV
 
AiDevId
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDevId
, 
AO_CHN
 
AoChn
, 
AI_VQE_CONFIG_S
 *
p°VqeC⁄fig
);

46 
HI_S32
 
HI_MPI_AI_GëVqeAâr
(
AUDIO_DEV
 
AiDevId
, 
AI_CHN
 
AiChn
, 
AI_VQE_CONFIG_S
 *
p°VqeC⁄fig
);

47 
HI_S32
 
HI_MPI_AI_E«bÀVqe
(
AUDIO_DEV
 
AiDevId
, 
AI_CHN
 
AiChn
);

48 
HI_S32
 
HI_MPI_AI_DißbÀVqe
(
AUDIO_DEV
 
AiDevId
, 
AI_CHN
 
AiChn
);

50 
HI_S32
 
HI_MPI_AI_E«bÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_SAMPLE_RATE_E
 
íOutSam∂eR©e
);

51 
HI_S32
 
HI_MPI_AI_DißbÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

53 
HI_S32
 
HI_MPI_AI_SëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 
íTøckMode
);

54 
HI_S32
 
HI_MPI_AI_GëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 *
≥nTøckMode
);

55 
HI_S32
 
HI_MPI_AI_SaveFûe
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_SAVE_FILE_INFO_S
 *
p°SaveFûeInfo
);

57 
HI_S32
 
HI_MPI_AI_CÃPubAâr
(
AUDIO_DEV
 
AudioDevId
);

59 
HI_S32
 
HI_MPI_AI_GëFd
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

61 
HI_S32
 
HI_MPI_AI_SëVqeVﬁume
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, HI_S32 
s32VﬁumeDb
);

62 
HI_S32
 
HI_MPI_AI_GëVqeVﬁume
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, HI_S32 *
ps32VﬁumeDb
);

64 #ifde‡
__˝lu•lus


65 #i‡
__˝lu•lus


	@include/mpi_ao.h

16 #i‚de‡
__MPI_AO_H__


17 
	#__MPI_AO_H__


	)

19 
	~"hi_ty≥.h
"

20 
	~"hi_comm⁄.h
"

21 
	~"hi_comm_aio.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_AO_SëPubAâr
(
AUDIO_DEV
 
AudioDevId
, c⁄° 
AIO_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_AO_GëPubAâr
(
AUDIO_DEV
 
AudioDevId
, 
AIO_ATTR_S
 *
p°Aâr
);

33 
HI_S32
 
HI_MPI_AO_E«bÀ
(
AUDIO_DEV
 
AudioDevId
);

34 
HI_S32
 
HI_MPI_AO_DißbÀ
(
AUDIO_DEV
 
AudioDevId
);

36 
HI_S32
 
HI_MPI_AO_E«bÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

37 
HI_S32
 
HI_MPI_AO_DißbÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

39 
HI_S32
 
HI_MPI_AO_SídFøme
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
, c⁄° 
AUDIO_FRAME_S
 *
p°D©a
, HI_S32 
s32MûliSec
);

41 
HI_S32
 
HI_MPI_AO_E«bÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
, 
AUDIO_SAMPLE_RATE_E
 
íInSam∂eR©e
);

42 
HI_S32
 
HI_MPI_AO_DißbÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

44 
HI_S32
 
HI_MPI_AO_CÀ¨ChnBuf
(
AUDIO_DEV
 
AudioDevId
 ,
AO_CHN
 
AoChn
);

45 
HI_S32
 
HI_MPI_AO_QuîyChnSèt
(
AUDIO_DEV
 
AudioDevId
 ,
AO_CHN
 
AoChn
, 
AO_CHN_STATE_S
 *
p°Sètus
);

47 
HI_S32
 
HI_MPI_AO_Pau£Chn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

48 
HI_S32
 
HI_MPI_AO_ResumeChn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

50 
HI_S32
 
HI_MPI_AO_SëVﬁume
(
AUDIO_DEV
 
AudioDevId
, HI_S32 
s32VﬁumeDb
);

51 
HI_S32
 
HI_MPI_AO_GëVﬁume
(
AUDIO_DEV
 
AudioDevId
, HI_S32 *
ps32VﬁumeDb
);

53 
HI_S32
 
HI_MPI_AO_SëMuã
(
AUDIO_DEV
 
AudioDevId
, 
HI_BOOL
 
bE«bÀ
, 
AUDIO_FADE_S
 *
p°Fade
);

54 
HI_S32
 
HI_MPI_AO_GëMuã
(
AUDIO_DEV
 
AudioDevId
, 
HI_BOOL
 *
pbE«bÀ
, 
AUDIO_FADE_S
 *
p°Fade
);

56 
HI_S32
 
HI_MPI_AO_SëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 
íTøckMode
);

57 
HI_S32
 
HI_MPI_AO_GëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 *
≥nTøckMode
);

59 
HI_S32
 
HI_MPI_AO_GëFd
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

61 
HI_S32
 
HI_MPI_AO_CÃPubAâr
(
AUDIO_DEV
 
AudioDevId
);

62 
HI_S32
 
HI_MPI_AO_SëVqeAâr
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
, 
AO_VQE_CONFIG_S
 *
p°VqeC⁄fig
);

63 
HI_S32
 
HI_MPI_AO_GëVqeAâr
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
, 
AO_VQE_CONFIG_S
 *
p°VqeC⁄fig
);

64 
HI_S32
 
HI_MPI_AO_E«bÀVqe
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

65 
HI_S32
 
HI_MPI_AO_DißbÀVqe
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

66 #ifde‡
__˝lu•lus


67 #i‡
__˝lu•lus


	@include/mpi_awb.h

17 #i‚de‡
__MPI_AWB_H__


18 
	#__MPI_AWB_H__


	)

20 
	~"hi_comm_i•.h
"

21 
	~"hi_comm_3a.h
"

22 
	~"hi_awb_comm.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


31 
HI_S32
 
HI_MPI_AWB_Regi°î
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AwbLib
);

32 
HI_S32
 
HI_MPI_AWB_UnRegi°î
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AwbLib
);

35 
HI_S32
 
HI_MPI_AWB_Sís‹RegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AwbLib
, 
SENSOR_ID
 
Sís‹Id
,

36 
AWB_SENSOR_REGISTER_S
 *
p°Regi°î
);

37 
HI_S32
 
HI_MPI_AWB_Sís‹UnRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AwbLib
, 
SENSOR_ID
 
Sís‹Id
);

39 
HI_S32
 
HI_MPI_ISP_AWBLibRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AWBLib
,

40 
ISP_AWB_REGISTER_S
 *
p°Regi°î
);

43 
HI_S32
 
HI_MPI_ISP_SëWBAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_WB_ATTR_S
 *
p°WBAâr
);

44 
HI_S32
 
HI_MPI_ISP_GëWBAâr
(
ISP_DEV
 
I•Dev
, 
ISP_WB_ATTR_S
 *
p°WBAâr
);

46 
HI_S32
 
HI_MPI_ISP_SëAWBAârEx
(
ISP_DEV
 
I•Dev
, 
ISP_AWB_ATTR_EX_S
 *
p°AWBAârEx
);

47 
HI_S32
 
HI_MPI_ISP_GëAWBAârEx
(
ISP_DEV
 
I•Dev
, 
ISP_AWB_ATTR_EX_S
 *
p°AWBAârEx
);

49 
HI_S32
 
HI_MPI_ISP_SëCCMAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_COLORMATRIX_ATTR_S
 *
p°CCMAâr
);

50 
HI_S32
 
HI_MPI_ISP_GëCCMAâr
(
ISP_DEV
 
I•Dev
, 
ISP_COLORMATRIX_ATTR_S
 *
p°CCMAâr
);

52 
HI_S32
 
HI_MPI_ISP_SëS©uøti⁄Aâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_SATURATION_ATTR_S
 *
p°S©Aâr
);

53 
HI_S32
 
HI_MPI_ISP_GëS©uøti⁄Aâr
(
ISP_DEV
 
I•Dev
, 
ISP_SATURATION_ATTR_S
 *
p°S©Aâr
);

55 
HI_S32
 
HI_MPI_ISP_QuîyWBInfo
(
ISP_DEV
 
I•Dev
, 
ISP_WB_INFO_S
 *
p°WBInfo
);

57 #ifde‡
__˝lu•lus


58 #i‡
__˝lu•lus


	@include/mpi_isp.h

18 #i‚de‡
__MPI_ISP_H__


19 
	#__MPI_ISP_H__


	)

21 
	~"hi_comm_i•.h
"

22 
	~"hi_comm_¢s.h
"

23 
	~"hi_comm_3a.h
"

24 
	~"hi_comm_video.h
"

27 #ifde‡
__˝lu•lus


28 #i‡
__˝lu•lus


34 
HI_S32
 
HI_MPI_ISP_Inô
(
ISP_DEV
 
I•Dev
);

35 
HI_S32
 
HI_MPI_ISP_MemInô
(
ISP_DEV
 
I•Dev
);

36 
HI_S32
 
HI_MPI_ISP_Run
(
ISP_DEV
 
I•Dev
);

37 
HI_S32
 
HI_MPI_ISP_Exô
(
ISP_DEV
 
I•Dev
);

39 
HI_S32
 
HI_MPI_ISP_Sís‹RegCÆlBack
(
ISP_DEV
 
I•Dev
, 
SENSOR_ID
 
Sís‹Id
, 
ISP_SENSOR_REGISTER_S
 *
p°Regi°î
);

40 
HI_S32
 
HI_MPI_ISP_Sís‹UnRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
SENSOR_ID
 
Sís‹Id
);

43 
HI_S32
 
HI_MPI_ISP_SëBödAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_BIND_ATTR_S
 *
p°BödAâr
);

44 
HI_S32
 
HI_MPI_ISP_GëBödAâr
(
ISP_DEV
 
I•Dev
, 
ISP_BIND_ATTR_S
 *
p°BödAâr
);

45 
HI_S32
 
HI_MPI_ISP_AELibRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AeLib
,

46 
ISP_AE_REGISTER_S
 *
p°Regi°î
);

47 
HI_S32
 
HI_MPI_ISP_AWBLibRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AwbLib
,

48 
ISP_AWB_REGISTER_S
 *
p°Regi°î
);

49 
HI_S32
 
HI_MPI_ISP_AFLibRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AfLib
,

50 
ISP_AF_REGISTER_S
 *
p°Regi°î
);

51 
HI_S32
 
HI_MPI_ISP_AELibUnRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AeLib
);

52 
HI_S32
 
HI_MPI_ISP_AWBLibUnRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AwbLib
);

53 
HI_S32
 
HI_MPI_ISP_AFLibUnRegCÆlBack
(
ISP_DEV
 
I•Dev
, 
ALG_LIB_S
 *
p°AfLib
);

55 
HI_S32
 
HI_MPI_ISP_SëPubAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_PUB_ATTR_S
 *
p°PubAâr
);

56 
HI_S32
 
HI_MPI_ISP_GëPubAâr
(
ISP_DEV
 
I•Dev
, 
ISP_PUB_ATTR_S
 *
p°PubAâr
);

58 
HI_S32
 
HI_MPI_ISP_SëFMWSèã
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_FMW_STATE_E
 
íSèã
);

59 
HI_S32
 
HI_MPI_ISP_GëFMWSèã
(
ISP_DEV
 
I•Dev
, 
ISP_FMW_STATE_E
 *
≥nSèã
);

61 
HI_S32
 
HI_MPI_ISP_SëWDRMode
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_WDR_MODE_S
 *
p°WDRMode
);

62 
HI_S32
 
HI_MPI_ISP_GëWDRMode
(
ISP_DEV
 
I•Dev
, 
ISP_WDR_MODE_S
 *
p°WDRMode
);

64 
HI_S32
 
HI_MPI_ISP_SëModuÀC⁄åﬁ
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_MODULE_CTRL_U
 *
punModCål
);

65 
HI_S32
 
HI_MPI_ISP_GëModuÀC⁄åﬁ
(
ISP_DEV
 
I•Dev
, 
ISP_MODULE_CTRL_U
 *
punModCål
);

68 
HI_S32
 
HI_MPI_ISP_SëDRCAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DRC_ATTR_S
 *
p°DRC
);

69 
HI_S32
 
HI_MPI_ISP_GëDRCAâr
(
ISP_DEV
 
I•Dev
, 
ISP_DRC_ATTR_S
 *
p°DRC
);

71 
HI_S32
 
HI_MPI_ISP_SëFSWDRAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_WDR_FS_ATTR_S
 *
p°FSWDRAâr
);

72 
HI_S32
 
HI_MPI_ISP_GëFSWDRAâr
(
ISP_DEV
 
I•Dev
, 
ISP_WDR_FS_ATTR_S
 *
p°FSWDRAâr
);

74 
HI_S32
 
HI_MPI_ISP_SëDPCÆibøã
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DP_STATIC_CALIBRATE_S
 *
p°DPCÆibøã
);

75 
HI_S32
 
HI_MPI_ISP_GëDPCÆibøã
(
ISP_DEV
 
I•Dev
, 
ISP_DP_STATIC_CALIBRATE_S
 *
p°DPCÆibøã
);

77 
HI_S32
 
HI_MPI_ISP_SëDPAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DP_ATTR_S
 *
p°DPAâr
);

78 
HI_S32
 
HI_MPI_ISP_GëDPAâr
(
ISP_DEV
 
I•Dev
, 
ISP_DP_ATTR_S
 *
p°DPAâr
);

80 
HI_S32
 
HI_MPI_ISP_SëDISAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DIS_ATTR_S
 *
p°DISAâr
);

81 
HI_S32
 
HI_MPI_ISP_GëDISAâr
(
ISP_DEV
 
I•Dev
, 
ISP_DIS_ATTR_S
 *
p°DISAâr
);

83 
HI_S32
 
HI_MPI_ISP_SëShadögAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_SHADING_ATTR_S
 *
p°ShadögAâr
);

84 
HI_S32
 
HI_MPI_ISP_GëShadögAâr
(
ISP_DEV
 
I•Dev
, 
ISP_SHADING_ATTR_S
 *
p°ShadögAâr
);

86 
HI_S32
 
HI_MPI_ISP_SëNRAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_NR_ATTR_S
 *
p°NRAâr
);

87 
HI_S32
 
HI_MPI_ISP_GëNRAâr
(
ISP_DEV
 
I•Dev
, 
ISP_NR_ATTR_S
 *
p°NRAâr
);

89 
HI_S32
 
HI_MPI_ISP_SëNPTabÀ
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_NP_TABLE_S
 *
p°NPTabÀ
);

90 
HI_S32
 
HI_MPI_ISP_GëNPTabÀ
(
ISP_DEV
 
I•Dev
, 
ISP_NP_TABLE_S
 *
p°NPTabÀ
);

92 
HI_S32
 
HI_MPI_ISP_SëCﬁ‹T⁄eAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_COLOR_TONE_ATTR_S
 *
p°CTAâr
);

93 
HI_S32
 
HI_MPI_ISP_GëCﬁ‹T⁄eAâr
(
ISP_DEV
 
I•Dev
, 
ISP_COLOR_TONE_ATTR_S
 *
p°CTAâr
);

95 
HI_S32
 
HI_MPI_ISP_SëGammaAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_GAMMA_ATTR_S
 *
p°GammaAâr
);

96 
HI_S32
 
HI_MPI_ISP_GëGammaAâr
(
ISP_DEV
 
I•Dev
, 
ISP_GAMMA_ATTR_S
 *
p°GammaAâr
);

98 
HI_S32
 
HI_MPI_ISP_SëGammaFEAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_GAMMAFE_ATTR_S
 *
p°GammaFEAâr
);

99 
HI_S32
 
HI_MPI_ISP_GëGammaFEAâr
(
ISP_DEV
 
I•Dev
, 
ISP_GAMMAFE_ATTR_S
 *
p°GammaFEAâr
);

101 
HI_S32
 
HI_MPI_ISP_SëSh¨≥nAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_SHARPEN_ATTR_S
 *
p°Sh¨≥nAâr
);

102 
HI_S32
 
HI_MPI_ISP_GëSh¨≥nAâr
(
ISP_DEV
 
I•Dev
, 
ISP_SHARPEN_ATTR_S
 *
p°Sh¨≥nAâr
);

104 
HI_S32
 
HI_MPI_ISP_SëCros°ÆkAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_CR_ATTR_S
 *
p°CRAâr
);

105 
HI_S32
 
HI_MPI_ISP_GëCros°ÆkAâr
(
ISP_DEV
 
I•Dev
, 
ISP_CR_ATTR_S
 *
p°CRAâr
);

107 
HI_S32
 
HI_MPI_ISP_SëA¡iFÆ£Cﬁ‹Aâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_ANTI_FALSECOLOR_S
 *
p°A¡iFC
);

108 
HI_S32
 
HI_MPI_ISP_GëA¡iFÆ£Cﬁ‹Aâr
(
ISP_DEV
 
I•Dev
, 
ISP_ANTI_FALSECOLOR_S
 *
p°A¡iFC
);

110 
HI_S32
 
HI_MPI_ISP_SëDemoßicAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DEMOSAIC_ATTR_S
 *
p°DemoßicAâr
);

111 
HI_S32
 
HI_MPI_ISP_GëDemoßicAâr
(
ISP_DEV
 
I•Dev
, 
ISP_DEMOSAIC_ATTR_S
 *
p°DemoßicAâr
);

113 
HI_S32
 
HI_MPI_ISP_SëBœckLevñAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_BLACK_LEVEL_S
 *
p°BœckLevñ
);

114 
HI_S32
 
HI_MPI_ISP_GëBœckLevñAâr
(
ISP_DEV
 
I•Dev
, 
ISP_BLACK_LEVEL_S
 *
p°BœckLevñ
);

117 
HI_S32
 
HI_MPI_ISP_FPNCÆibøã
(
ISP_DEV
 
I•Dev
, 
ISP_FPN_CALIBRATE_ATTR_S
 *
p°CÆibøãAâr
);

118 
HI_S32
 
HI_MPI_ISP_SëFPNAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_FPN_ATTR_S
 *
p°FPNAâr
);

119 
HI_S32
 
HI_MPI_ISP_GëFPNAâr
(
ISP_DEV
 
I•Dev
, 
ISP_FPN_ATTR_S
 *
p°FPNAâr
);

121 
HI_S32
 
HI_MPI_ISP_SëDeFogAâr
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DEFOG_ATTR_S
 *
p°DefogAâr
);

122 
HI_S32
 
HI_MPI_ISP_GëDeFogAâr
(
ISP_DEV
 
I•Dev
, 
ISP_DEFOG_ATTR_S
 *
p°DefogAâr
);

124 
HI_S32
 
HI_MPI_ISP_SëDCFInfo
(c⁄° 
ISP_DCF_INFO_S
 *
p°I•DCF
);

125 
HI_S32
 
HI_MPI_ISP_GëDCFInfo
(
ISP_DCF_INFO_S
 *
p°I•DCF
);

127 
HI_S32
 
HI_MPI_ISP_SëAcmAâr
(
ISP_DEV
 
I•Dev
, 
ISP_ACM_ATTR_S
 *
p°AcmAâr
);

128 
HI_S32
 
HI_MPI_ISP_GëAcmAâr
(
ISP_DEV
 
I•Dev
, 
ISP_ACM_ATTR_S
 *
p°AcmAâr
);

130 
HI_S32
 
HI_MPI_ISP_SëAcmC€ff
(
ISP_DEV
 
I•Dev
, 
ISP_ACM_LUT_S
 *
p°AcmC€f
, 
ISP_ACM_MODE_E
 
íMode
);

131 
HI_S32
 
HI_MPI_ISP_GëAcmC€ff
(
ISP_DEV
 
I•Dev
, 
ISP_ACM_LUT_S
 *
p°AcmC€f
, 
ISP_ACM_MODE_E
 
íMode
);

133 
HI_S32
 
HI_MPI_ISP_QuîyI¬îSèãInfo
(
ISP_DEV
 
I•Dev
, 
ISP_INNER_STATE_INFO_S
 *
p°I¬îSèãInfo
);

135 
HI_S32
 
HI_MPI_ISP_SëSèti°icsC⁄fig
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_STATISTICS_CFG_S
 *
p°SètCfg
);

136 
HI_S32
 
HI_MPI_ISP_GëSèti°icsC⁄fig
(
ISP_DEV
 
I•Dev
, 
ISP_STATISTICS_CFG_S
 *
p°SètCfg
);

137 
HI_S32
 
HI_MPI_ISP_GëSèti°ics
(
ISP_DEV
 
I•Dev
, 
ISP_STATISTICS_S
 *
p°Sèt
);

139 
HI_S32
 
HI_MPI_ISP_SëRegi°î
(
ISP_DEV
 
I•Dev
, 
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

140 
HI_S32
 
HI_MPI_ISP_GëRegi°î
(
ISP_DEV
 
I•Dev
, 
HI_U32
 
u32Addr
, HI_U32 *
pu32VÆue
);

142 
HI_S32
 
HI_MPI_ISP_GëVDTimeOut
(
ISP_DEV
 
I•Dev
, 
ISP_VD_INFO_S
 *
p°I•VdInfo
, 
HI_U32
 
u32MûliSec
);

144 
HI_S32
 
HI_MPI_ISP_GëISPRegAâr
(
ISP_DEV
 
I•Dev
, 
ISP_REG_ATTR_S
 * 
p°I•RegAâr
);

146 
HI_S32
 
HI_MPI_ISP_SëDebug
(
ISP_DEV
 
I•Dev
, c⁄° 
ISP_DEBUG_INFO_S
 * 
p°I•Debug
);

147 
HI_S32
 
HI_MPI_ISP_GëDebug
(
ISP_DEV
 
I•Dev
, 
ISP_DEBUG_INFO_S
 * 
p°I•Debug
);

150 #ifde‡
__˝lu•lus


151 #i‡
__˝lu•lus


	@include/mpi_ive.h

20 #i‚de‡
_HI_MPI_IVE_H_


21 
	#_HI_MPI_IVE_H_


	)

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
	~"hi_ive.h
"

58 
HI_S32
 
HI_MPI_IVE_DMA
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_DATA_S
 *
p°Src
,

59 
IVE_DST_DATA_S
 *
p°D°
, 
IVE_DMA_CTRL_S
 *
p°DmaCål
,
HI_BOOL
 
bIn°™t
);

85 
HI_S32
 
HI_MPI_IVE_Fûãr
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

86 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_FILTER_CTRL_S
 *
p°F…Cål
,
HI_BOOL
 
bIn°™t
);

114 
HI_S32
 
HI_MPI_IVE_CSC
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

115 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_CSC_CTRL_S
 *
p°CscCål
, 
HI_BOOL
 
bIn°™t
);

139 
HI_S32
 
HI_MPI_IVE_FûãrAndCSC
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

140 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_FILTER_AND_CSC_CTRL_S
 *
p°F…CscCål
, 
HI_BOOL
 
bIn°™t
);

166 
HI_S32
 
HI_MPI_IVE_Sobñ
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

167 
IVE_DST_IMAGE_S
 *
p°D°H
, IVE_DST_IMAGE_S *
p°D°V
,

168 
IVE_SOBEL_CTRL_S
 *
p°SobñCål
, 
HI_BOOL
 
bIn°™t
);

198 
HI_S32
 
HI_MPI_IVE_MagAndAng
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

199 
IVE_DST_IMAGE_S
 *
p°D°Mag
, IVE_DST_IMAGE_S *
p°D°Ang
,

200 
IVE_MAG_AND_ANG_CTRL_S
 *
p°MagAndAngCål
, 
HI_BOOL
 
bIn°™t
);

225 
HI_S32
 
HI_MPI_IVE_Dû©e
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

226 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_DILATE_CTRL_S
 *
p°Dû©eCål
,
HI_BOOL
 
bIn°™t
);

251 
HI_S32
 
HI_MPI_IVE_Erode
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

252 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_ERODE_CTRL_S
 *
p°ErodeCål
,
HI_BOOL
 
bIn°™t
);

275 
HI_S32
 
HI_MPI_IVE_Thªsh
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

276 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_THRESH_CTRL_S
 *
p°ThrCål
, 
HI_BOOL
 
bIn°™t
);

297 
HI_S32
 
HI_MPI_IVE_And
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

298 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_IMAGE_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

323 
HI_S32
 
HI_MPI_IVE_Sub
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

324 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_SUB_CTRL_S
 *
p°SubCål
, 
HI_BOOL
 
bIn°™t
);

348 
HI_S32
 
HI_MPI_IVE_Or
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

349 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_IMAGE_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

381 
HI_S32
 
HI_MPI_IVE_I¡eg
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

382 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_INTEG_CTRL_S
 *
p°I¡egCål
, 
HI_BOOL
 
bIn°™t
);

402 
HI_S32
 
HI_MPI_IVE_Hi°
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

403 
IVE_DST_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

424 
HI_S32
 
HI_MPI_IVE_Thªsh_S16
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

425 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_THRESH_S16_CTRL_S
 *
p°ThrS16Cål
, 
HI_BOOL
 
bIn°™t
);

449 
HI_S32
 
HI_MPI_IVE_Thªsh_U16
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

450 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_THRESH_U16_CTRL_S
 *
p°ThrU16Cål
, 
HI_BOOL
 
bIn°™t
);

471 
HI_S32
 
HI_MPI_IVE_16BôTo8Bô
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

472 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_16BIT_TO_8BIT_CTRL_S
 *
p°16BôTo8BôCål
, 
HI_BOOL
 
bIn°™t
);

493 
HI_S32
 
HI_MPI_IVE_OrdSètFûãr
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

494 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_ORD_STAT_FILTER_CTRL_S
 *
p°OrdSètF…Cål
, 
HI_BOOL
 
bIn°™t
);

515 
HI_S32
 
HI_MPI_IVE_M≠
(
IVE_HANDLE
 *
pIveH™dÀ
,
IVE_SRC_IMAGE_S
 *
p°Src
,

516 
IVE_SRC_MEM_INFO_S
 *
p°M≠
, 
IVE_DST_IMAGE_S
 *
p°D°
,
HI_BOOL
 
bIn°™t
);

537 
HI_S32
 
HI_MPI_IVE_EquÆizeHi°
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

538 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_EQUALIZE_HIST_CTRL_S
 *
p°EquÆizeHi°Cål
, 
HI_BOOL
 
bIn°™t
);

560 
HI_S32
 
HI_MPI_IVE_Add
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

561 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_ADD_CTRL_S
 *
p°AddCål
, 
HI_BOOL
 
bIn°™t
);

582 
HI_S32
 
HI_MPI_IVE_X‹
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

583 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_IMAGE_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

604 
HI_S32
 
HI_MPI_IVE_NCC
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

605 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

625 
HI_S32
 
HI_MPI_IVE_CCL
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_IMAGE_S
 *
p°SrcD°
,

626 
IVE_DST_MEM_INFO_S
 *
p°Blob
, 
IVE_CCL_CTRL_S
 *
p°C˛Cål
, 
HI_BOOL
 
bIn°™t
);

649 
HI_S32
 
HI_MPI_IVE_GMM
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
, 
IVE_DST_IMAGE_S
 *
p°Fg
,

650 
IVE_DST_IMAGE_S
 *
p°Bg
, 
IVE_MEM_INFO_S
 *
p°Modñ
, 
IVE_GMM_CTRL_S
 *
p°GmmCål
, 
HI_BOOL
 
bIn°™t
);

673 
HI_S32
 
HI_MPI_IVE_C™nyHysEdge
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
, 
IVE_DST_IMAGE_S
 *
p°Edge
,

674 
IVE_DST_MEM_INFO_S
 *
p°Sèck
, 
IVE_CANNY_HYS_EDGE_CTRL_S
 *
p°C™nyHysEdgeCål
, 
HI_BOOL
 
bIn°™t
);

692 
HI_S32
 
HI_MPI_IVE_C™nyEdge
(
IVE_IMAGE_S
 *
p°Edge
, 
IVE_MEM_INFO_S
 *
p°Sèck
);

713 
HI_S32
 
HI_MPI_IVE_LBP
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

714 
IVE_DST_IMAGE_S
 *
p°D°
, 
IVE_LBP_CTRL_S
 *
p°LbpCål
, 
HI_BOOL
 
bIn°™t
);

737 
HI_S32
 
HI_MPI_IVE_N‹mGød
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
,

738 
IVE_DST_IMAGE_S
 *
p°D°H
, IVE_DST_IMAGE_S *
p°D°V
, IVE_DST_IMAGE_S *
p°D°HV
,

739 
IVE_NORM_GRAD_CTRL_S
 *
p°N‹mGødCål
, 
HI_BOOL
 
bIn°™t
);

765 
HI_S32
 
HI_MPI_IVE_LKO±iˇlFlow
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°SrcPª
, IVE_SRC_IMAGE_S *
p°SrcCur
,

766 
IVE_SRC_MEM_INFO_S
 *
p°Poöt
, 
IVE_MEM_INFO_S
 *
p°Mv
, 
IVE_LK_OPTICAL_FLOW_CTRL_S
 *
p°LkO±iFlowCål
, 
HI_BOOL
 
bIn°™t
);

787 
HI_S32
 
HI_MPI_IVE_STC™diC‹√r
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src
, 
IVE_DST_IMAGE_S
 *
p°C™diC‹√r
,

788 
IVE_ST_CANDI_CORNER_CTRL_S
 *
p°StC™diC‹√rCål
, 
HI_BOOL
 
bIn°™t
);

807 
HI_S32
 
HI_MPI_IVE_STC‹√r
(
IVE_SRC_IMAGE_S
 * 
p°C™diC‹√r
, 
IVE_DST_MEM_INFO_S
 *
p°C‹√r
,

808 
IVE_ST_CORNER_CTRL_S
 *
p°StC‹√rCål
);

830 
HI_S32
 
HI_MPI_IVE_GødFg
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°BgDiffFg
, IVE_SRC_IMAGE_S *
p°CurGød
,

831 
IVE_SRC_IMAGE_S
 *
p°BgGød
, 
IVE_DST_IMAGE_S
 *
p°GødFg
, 
IVE_GRAD_FG_CTRL_S
 *
p°GødFgCål
, 
HI_BOOL
 
bIn°™t
);

860 
HI_S32
 
HI_MPI_IVE_M©chBgModñ
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°CurImg
, 
IVE_DATA_S
 *
p°BgModñ
,

861 
IVE_IMAGE_S
 *
p°FgFœg
, 
IVE_DST_IMAGE_S
 *
p°BgDiffFg
, IVE_DST_IMAGE_S *
p°FrmDiffFg
, 
IVE_DST_MEM_INFO_S
 *
p°SètD©a
,

862 
IVE_MATCH_BG_MODEL_CTRL_S
 *
p°M©chBgModñCål
, 
HI_BOOL
 
bIn°™t
);

886 
HI_S32
 
HI_MPI_IVE_Upd©eBgModñ
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_DATA_S
 *
p°BgModñ
, 
IVE_IMAGE_S
 *
p°FgFœg
,

887 
IVE_DST_IMAGE_S
 *
p°BgImg
, IVE_DST_IMAGE_S *
p°ChgSèImg
, IVE_DST_IMAGE_S *
p°ChgSèFg
, IVE_DST_IMAGE_S *
p°ChgSèLi„
,

888 
IVE_DST_MEM_INFO_S
 *
p°SètD©a
, 
IVE_UPDATE_BG_MODEL_CTRL_S
 *
p°Upd©eBgModñCål
, 
HI_BOOL
 
bIn°™t
);

904 
HI_S32
 
HI_MPI_IVE_ANN_MLP_LﬂdModñ
(c⁄° 
HI_CHAR
 *
pchFûeName
, 
IVE_ANN_MLP_MODEL_S
 *
p°A¬MÕModñ
);

919 
HI_VOID
 
HI_MPI_IVE_ANN_MLP_U∆ﬂdModñ
(
IVE_ANN_MLP_MODEL_S
 *
p°A¬MÕModñ
);

939 
HI_S32
 
HI_MPI_IVE_ANN_MLP_Pªdi˘
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_MEM_INFO_S
 *
p°Src
,

940 
IVE_LOOK_UP_TABLE_S
 *
p°A˘ivFuncTab
, 
IVE_ANN_MLP_MODEL_S
 *
p°A¬MÕModñ
,

941 
IVE_DST_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

957 
HI_S32
 
HI_MPI_IVE_SVM_LﬂdModñ
(c⁄° 
HI_CHAR
 *
pchFûeName
, 
IVE_SVM_MODEL_S
 *
p°SvmModñ
);

972 
HI_VOID
 
HI_MPI_IVE_SVM_U∆ﬂdModñ
(
IVE_SVM_MODEL_S
 *
p°SvmModñ
);

992 
HI_S32
 
HI_MPI_IVE_SVM_Pªdi˘
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_MEM_INFO_S
 *
p°Src
,

993 
IVE_LOOK_UP_TABLE_S
 *
p°Kî√lTab
, 
IVE_SVM_MODEL_S
 *
p°SvmModñ
,

994 
IVE_DST_MEM_INFO_S
 *
p°D°VŸe
, 
HI_BOOL
 
bIn°™t
);

1018 
HI_S32
 
HI_MPI_IVE_SAD
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_IMAGE_S
 *
p°Src1
,

1019 
IVE_SRC_IMAGE_S
 *
p°Src2
, 
IVE_DST_IMAGE_S
 *
p°Sad
,IVE_DST_IMAGE_S *
p°Thr
,

1020 
IVE_SAD_CTRL_S
 *
p°SadCål
, 
HI_BOOL
 
bIn°™t
);

1040 
HI_S32
 
HI_MPI_IVE_Quîy
(
IVE_HANDLE
 
IveH™dÀ
, 
HI_BOOL
 *
pbFöish
, HI_BOOL 
bBlock
);

1042 #ifde‡
__˝lu•lus


1043 #i‡
__˝lu•lus


	@include/mpi_pciv.h

18 #i‚de‡
__MPI_PCIV_H__


19 
	#__MPI_PCIV_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_comm_video.h
"

23 
	~"hi_comm_pciv.h
"

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


41 
HI_S32
 
HI_MPI_PCIV_Cª©e
(
PCIV_CHN
 
pcivChn
, 
PCIV_ATTR_S
 *
pPcivAâr
);

52 
HI_S32
 
HI_MPI_PCIV_De°roy
(
PCIV_CHN
 
pcivChn
);

64 
HI_S32
 
HI_MPI_PCIV_SëAâr
(
PCIV_CHN
 
pcivChn
, 
PCIV_ATTR_S
 *
pPcivAâr
);

75 
HI_S32
 
HI_MPI_PCIV_GëAâr
(
PCIV_CHN
 
pcivChn
, 
PCIV_ATTR_S
 *
pPcivAâr
);

87 
HI_S32
 
HI_MPI_PCIV_Sèπ
(
PCIV_CHN
 
pcivChn
);

98 
HI_S32
 
HI_MPI_PCIV_St›
(
PCIV_CHN
 
pcivChn
);

109 
HI_S32
 
HI_MPI_PCIV_DmaTask
(
PCIV_DMA_TASK_S
 *
pTask
);

123 
HI_U32
 
HI_MPI_PCIV_MÆloc
(HI_U32 
u32BlkSize
, HI_U32 
u32BlkC¡
, HI_U32 
u32PhyAddr
[]);

124 
HI_S32
 
HI_MPI_PCIV_Fªe
(
HI_U32
 
u32BlkC¡
, HI_U32 
u32PhyAddr
[]);

126 
HI_U32
 
HI_MPI_PCIV_MÆlocChnBuf„r
(
PCIV_CHN
 
pcivChn
, HI_U32 
u32BlkSize
, HI_U32 
u32BlkC¡
, HI_U32 
u32PhyAddr
[]);

127 
HI_S32
 
HI_MPI_PCIV_FªeChnBuf„r
(
PCIV_CHN
 
pcivChn
, 
HI_U32
 
u32BlkC¡
);

139 
HI_S32
 
HI_MPI_PCIV_GëLoˇlId
(
HI_VOID
);

164 
HI_S32
 
HI_MPI_PCIV_EnumChù
(HI_S32 
s32ChùID
[
PCIV_MAX_CHIPNUM
]);

179 
HI_S32
 
HI_MPI_PCIV_GëBa£Wödow
(HI_S32 
s32ChùId
, 
PCIV_BASEWINDOW_S
 *
pBa£
);

199 
HI_S32
 
HI_MPI_PCIV_WöVbCª©e
(
PCIV_WINVBCFG_S
 *
pCfg
);

215 
HI_S32
 
HI_MPI_PCIV_WöVbDe°roy
(
HI_VOID
);

223 
HI_S32
 
HI_MPI_PCIV_Show
(
PCIV_CHN
 
pcivChn
);

231 
HI_S32
 
HI_MPI_PCIV_Hide
(
PCIV_CHN
 
pcivChn
);

239 
HI_S32
 
HI_MPI_PCIV_GëPªProcCfg
(
PCIV_CHN
 
pcivChn
, 
PCIV_PREPROC_CFG_S
 *
p°Cfg
);

240 
HI_S32
 
HI_MPI_PCIV_SëPªProcCfg
(
PCIV_CHN
 
pcivChn
, 
PCIV_PREPROC_CFG_S
 *
p°Cfg
);

243 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus


	@include/mpi_region.h

17 #i‚de‡
__MPI_REGION_H__


18 
	#__MPI_REGION_H__


	)

20 
	~"hi_comm_ªgi⁄.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
HI_S32
 
HI_MPI_RGN_Cª©e
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
RGN_ATTR_S
 *
p°Regi⁄
);

29 
HI_S32
 
HI_MPI_RGN_De°roy
(
RGN_HANDLE
 
H™dÀ
);

31 
HI_S32
 
HI_MPI_RGN_GëAâr
(
RGN_HANDLE
 
H™dÀ
, 
RGN_ATTR_S
 *
p°Regi⁄
);

32 
HI_S32
 
HI_MPI_RGN_SëAâr
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
RGN_ATTR_S
 *
p°Regi⁄
);

34 
HI_S32
 
HI_MPI_RGN_SëBôM≠
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
BITMAP_S
 *
p°Bôm≠
);

36 
HI_S32
 
HI_MPI_RGN_AâachToChn
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
, c⁄° 
RGN_CHN_ATTR_S
 *
p°ChnAâr
);

37 
HI_S32
 
HI_MPI_RGN_DëachFromChn
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
);

39 
HI_S32
 
HI_MPI_RGN_SëDi•œyAâr
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
, c⁄° 
RGN_CHN_ATTR_S
 *
p°ChnAâr
);

40 
HI_S32
 
HI_MPI_RGN_GëDi•œyAâr
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
, 
RGN_CHN_ATTR_S
 *
p°ChnAâr
);

42 
HI_S32
 
HI_MPI_RGN_SëAâachFõld
(
RGN_HANDLE
 
H™dÀ
, 
VIDEO_FIELD_E
 
íAâachFõld
);

43 
HI_S32
 
HI_MPI_RGN_GëAâachFõld
(
RGN_HANDLE
 
H™dÀ
, 
VIDEO_FIELD_E
 *
≥nAâachFõld
);

45 
HI_S32
 
HI_MPI_RGN_GëC™vasInfo
(
RGN_HANDLE
 
H™dÀ
, 
RGN_CANVAS_INFO_S
 *
p°C™vasInfo
);

46 
HI_S32
 
HI_MPI_RGN_Upd©eC™vas
(
RGN_HANDLE
 
H™dÀ
);

49 #ifde‡
__˝lu•lus


50 #i‡
__˝lu•lus


	@include/mpi_sys.h

21 #i‚de‡
__MPI_SYS_H__


22 
	#__MPI_SYS_H__


	)

24 
	~"hi_ty≥.h
"

25 
	~"hi_comm⁄.h
"

26 
	~"hi_comm_sys.h
"

28 #ifde‡
__˝lu•lus


29 #i‡
__˝lu•lus


34 
HI_S32
 
HI_MPI_SYS_Inô
();

35 
HI_S32
 
HI_MPI_SYS_Exô
();

37 
HI_S32
 
HI_MPI_SYS_SëC⁄f
(c⁄° 
MPP_SYS_CONF_S
* 
p°SysC⁄f
);

38 
HI_S32
 
HI_MPI_SYS_GëC⁄f
(
MPP_SYS_CONF_S
* 
p°SysC⁄f
);

40 
HI_S32
 
HI_MPI_SYS_Böd
(
MPP_CHN_S
* 
p°SrcChn
, MPP_CHN_S* 
p°De°Chn
);

41 
HI_S32
 
HI_MPI_SYS_UnBöd
(
MPP_CHN_S
* 
p°SrcChn
, MPP_CHN_S* 
p°De°Chn
);

42 
HI_S32
 
HI_MPI_SYS_GëBödbyDe°
(
MPP_CHN_S
* 
p°De°Chn
, MPP_CHN_S* 
p°SrcChn
);

44 
HI_S32
 
HI_MPI_SYS_GëVîsi⁄
(
MPP_VERSION_S
* 
p°Vîsi⁄
);

54 
HI_S32
 
HI_MPI_SYS_GëCurPts
(
HI_U64
* 
pu64CurPts
);

55 
HI_S32
 
HI_MPI_SYS_InôPtsBa£
(
HI_U64
 
u64PtsBa£
);

56 
HI_S32
 
HI_MPI_SYS_SyncPts
(
HI_U64
 
u64PtsBa£
);

59 
HI_S32
 
HI_MPI_SYS_MmzAŒoc
(
HI_U32
* 
pu32PhyAddr
, 
HI_VOID
** 
µVútAddr
,

60 c⁄° 
HI_CHAR
* 
°rMmb
, c⁄° HI_CHAR* 
°rZ⁄e
, 
HI_U32
 
u32Lí
);

63 
HI_S32
 
HI_MPI_SYS_MmzAŒoc_Cached
(
HI_U32
* 
pu32PhyAddr
, 
HI_VOID
** 
µVôAddr
,

64 c⁄° 
HI_CHAR
* 
p°rMmb
, c⁄° HI_CHAR* 
p°rZ⁄e
, 
HI_U32
 
u32Lí
);

67 
HI_S32
 
HI_MPI_SYS_MmzFªe
(
HI_U32
 
u32PhyAddr
, 
HI_VOID
* 
pVútAddr
);

70 
HI_S32
 
HI_MPI_SYS_MmzFlushCache
(
HI_U32
 
u32PhyAddr
, 
HI_VOID
* 
pVôAddr
, HI_U32 
u32Size
);

76 
HI_VOID
* 
HI_MPI_SYS_Mm≠
(
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
);

77 
HI_S32
 
HI_MPI_SYS_Munm≠
(
HI_VOID
* 
pVúAddr
, 
HI_U32
 
u32Size
);

83 
HI_S32
 
HI_MPI_SYS_SëReg
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

84 
HI_S32
 
HI_MPI_SYS_GëReg
(
HI_U32
 
u32Addr
, HI_U32* 
pu32VÆue
);

86 
HI_S32
 
HI_MPI_SYS_SëMemC⁄f
(
MPP_CHN_S
* 
p°MµChn
, c⁄° 
HI_CHAR
* 
pcMmzName
);

87 
HI_S32
 
HI_MPI_SYS_GëMemC⁄f
(
MPP_CHN_S
* 
p°MµChn
, 
HI_CHAR
* 
pcMmzName
);

90 
HI_S32
 
HI_MPI_SYS_Clo£Fd
(
HI_VOID
);

93 
HI_S32
 
HI_MPI_SYS_GëViVpssMode
(
HI_U32
* 
pu32Mode
);

96 
HI_S32
 
HI_MPI_SYS_SëProfûe
(
PROFILE_TYPE_E
 
íProfûe
);

99 
HI_S32
 
HI_MPI_SYS_GëVúMemInfo
(c⁄° * 
pVôAddr
, 
SYS_VIRMEM_INFO_S
* 
p°MemInfo
);

101 #ifde‡
__˝lu•lus


102 #i‡
__˝lu•lus


	@include/mpi_vb.h

16 #i‚de‡
__MPI_VB_H__


17 
	#__MPI_VB_H__


	)

19 
	~"hi_comm_vb.h
"

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


27 
VB_POOL
 
HI_MPI_VB_Cª©ePoﬁ
(
HI_U32
 
u32BlkSize
,HI_U32 
u32BlkC¡
,c⁄° 
HI_CHAR
 *
pcMmzName
);

28 
HI_S32
 
HI_MPI_VB_De°royPoﬁ
(
VB_POOL
 
Poﬁ
);

30 
VB_BLK
 
HI_MPI_VB_GëBlock
(
VB_POOL
 
Poﬁ
, 
HI_U32
 
u32BlkSize
,c⁄° 
HI_CHAR
 *
pcMmzName
);

31 
HI_S32
 
HI_MPI_VB_Rñó£Block
(
VB_BLK
 
Block
);

33 
HI_U32
 
HI_MPI_VB_H™dÀ2PhysAddr
(
VB_BLK
 
Block
);

34 
VB_POOL
 
HI_MPI_VB_H™dÀ2PoﬁId
(
VB_BLK
 
Block
);

36 
HI_S32
 
HI_MPI_VB_GëSuµÀmítAddr
(
VB_BLK
 
Block
, 
VIDEO_SUPPLEMENT_S
 *
p°SuµÀmít
);

39 
HI_S32
 
HI_MPI_VB_Inô
(
HI_VOID
);

40 
HI_S32
 
HI_MPI_VB_Exô
(
HI_VOID
);

41 
HI_S32
 
HI_MPI_VB_SëC⁄f
(c⁄° 
VB_CONF_S
 *
p°VbC⁄f
);

42 
HI_S32
 
HI_MPI_VB_GëC⁄f
(
VB_CONF_S
 *
p°VbC⁄f
);

44 
HI_S32
 
HI_MPI_VB_Mm≠Poﬁ
(
VB_POOL
 
Poﬁ
);

45 
HI_S32
 
HI_MPI_VB_Munm≠Poﬁ
(
VB_POOL
 
Poﬁ
);

47 
HI_S32
 
HI_MPI_VB_GëBlkVúAddr
(
VB_POOL
 
Poﬁ
, 
HI_U32
 
u32PhyAddr
, 
HI_VOID
 **
µVúAddr
);

49 
HI_S32
 
HI_MPI_VB_InôModCommPoﬁ
(
VB_UID_E
 
íVbUid
);

50 
HI_S32
 
HI_MPI_VB_ExôModCommPoﬁ
(
VB_UID_E
 
íVbUid
);

52 
HI_S32
 
HI_MPI_VB_SëModPoﬁC⁄f
(
VB_UID_E
 
íVbUid
, c⁄° 
VB_CONF_S
 *
p°VbC⁄f
);

53 
HI_S32
 
HI_MPI_VB_GëModPoﬁC⁄f
(
VB_UID_E
 
íVbUid
, 
VB_CONF_S
 *
p°VbC⁄f
);

56 #ifde‡
__˝lu•lus


57 #i‡
__˝lu•lus


	@include/mpi_vda.h

17 #i‚de‡
__MPI_VDA_H__


18 
	#__MPI_VDA_H__


	)

20 
	~"hi_comm_vda.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
HI_S32
 
HI_MPI_VDA_Cª©eChn
(
VDA_CHN
 
VdaChn
, c⁄° 
VDA_CHN_ATTR_S
 *
p°Aâr
);

29 
HI_S32
 
HI_MPI_VDA_De°royChn
(
VDA_CHN
 
VdaChn
);

31 
HI_S32
 
HI_MPI_VDA_GëChnAâr
(
VDA_CHN
 
VdaChn
, 
VDA_CHN_ATTR_S
 *
p°Aâr
);

32 
HI_S32
 
HI_MPI_VDA_SëChnAâr
(
VDA_CHN
 
VdaChn
, c⁄° 
VDA_CHN_ATTR_S
 *
p°Aâr
);

34 
HI_S32
 
HI_MPI_VDA_SèπRecvPic
(
VDA_CHN
 
VdaChn
);

35 
HI_S32
 
HI_MPI_VDA_St›RecvPic
(
VDA_CHN
 
VdaChn
);

37 
HI_S32
 
HI_MPI_VDA_GëD©a
(
VDA_CHN
 
VdaChn
, 
VDA_DATA_S
 *
p°VdaD©a
, HI_S32 
s32MûliSec
);

38 
HI_S32
 
HI_MPI_VDA_Rñó£D©a
(
VDA_CHN
 
VdaChn
, c⁄° 
VDA_DATA_S
* 
p°VdaD©a
);

40 
HI_S32
 
HI_MPI_VDA_Re£tOdRegi⁄
(
VDA_CHN
 
VdaChn
, HI_S32 
s32RgnIndex
);

42 
HI_S32
 
HI_MPI_VDA_Quîy
(
VDA_CHN
 
VdaChn
, 
VDA_CHN_STAT_S
 *
p°ChnSèt
);

44 
HI_S32
 
HI_MPI_VDA_GëFd
(
VDA_CHN
 
VdaChn
);

46 
HI_S32
 
HI_MPI_VDA_Upd©eRef
(
VDA_CHN
 
VdaChn
, c⁄° 
VIDEO_FRAME_INFO_S
 *
p°RefFøme
);

48 
HI_S32
 
HI_MPI_VDA_SídPic
(
VDA_CHN
 
VdaChn
, c⁄° 
VIDEO_FRAME_INFO_S
 *
p°U£rFøme
, HI_S32 
s32MûliSec
);

51 #ifde‡
__˝lu•lus


52 #i‡
__˝lu•lus


	@include/mpi_vdec.h

16 #i‚de‡ 
__MPI_VDEC_H__


17 
	#__MPI_VDEC_H__


	)

19 
	~"hi_comm⁄.h
"

20 
	~"hi_comm_video.h
"

21 
	~"hi_comm_vdec.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_VDEC_Cª©eChn
(
VDEC_CHN
 
VdChn
, c⁄° 
VDEC_CHN_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_VDEC_De°royChn
(
VDEC_CHN
 
VdChn
);

33 
HI_S32
 
HI_MPI_VDEC_GëChnAâr
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_ATTR_S
 *
p°Aâr
);

35 
HI_S32
 
HI_MPI_VDEC_SèπRecvSåóm
(
VDEC_CHN
 
VdChn
);

36 
HI_S32
 
HI_MPI_VDEC_St›RecvSåóm
(
VDEC_CHN
 
VdChn
);

38 
HI_S32
 
HI_MPI_VDEC_Quîy
(
VDEC_CHN
 
VdChn
,
VDEC_CHN_STAT_S
 *
p°Sèt
);

40 
HI_S32
 
HI_MPI_VDEC_GëFd
(
VDEC_CHN
 
VdChn
);

42 
HI_S32
 
HI_MPI_VDEC_Re£tChn
(
VDEC_CHN
 
VdChn
);

44 
HI_S32
 
HI_MPI_VDEC_SëChnP¨am
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_PARAM_S
* 
p°P¨am
);

45 
HI_S32
 
HI_MPI_VDEC_GëChnP¨am
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_PARAM_S
* 
p°P¨am
);

47 
HI_S32
 
HI_MPI_VDEC_SëPrŸocﬁP¨am
(
VDEC_CHN
 
VdChn
,
VDEC_PRTCL_PARAM_S
 *
p°P¨am
);

48 
HI_S32
 
HI_MPI_VDEC_GëPrŸocﬁP¨am
(
VDEC_CHN
 
VdChn
,
VDEC_PRTCL_PARAM_S
 *
p°P¨am
);

51 
HI_S32
 
HI_MPI_VDEC_SídSåóm
(
VDEC_CHN
 
VdChn
, c⁄° 
VDEC_STREAM_S
 *
p°Såóm
, HI_S32 
s32MûliSec
);

53 
HI_S32
 
HI_MPI_VDEC_GëImage
(
VDEC_CHN
 
VdChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
,HI_S32 
s32MûliSec
);

54 
HI_S32
 
HI_MPI_VDEC_Rñó£Image
(
VDEC_CHN
 
VdChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
);

56 
HI_S32
 
HI_MPI_VDEC_GëU£rD©a
(
VDEC_CHN
 
VdChn
, 
VDEC_USERDATA_S
 *
p°U£rD©a
, HI_S32 
s32MûliSec
);

57 
HI_S32
 
HI_MPI_VDEC_Rñó£U£rD©a
(
VDEC_CHN
 
VdChn
, 
VDEC_USERDATA_S
 *
p°U£rD©a
);

59 
HI_S32
 
HI_MPI_VDEC_SëRŸ©e
(
VDEC_CHN
 
VdChn
, 
ROTATE_E
 
íRŸ©e
);

60 
HI_S32
 
HI_MPI_VDEC_GëRŸ©e
(
VDEC_CHN
 
VdChn
, 
ROTATE_E
 *
≥nRŸ©e
);

62 
HI_S32
 
HI_MPI_VDEC_GëChnLuma
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_LUM_S
 *
p°Luma
);

64 
HI_S32
 
HI_MPI_VDEC_SëU£rPic
(
VDEC_CHN
 
VdChn
, 
VIDEO_FRAME_INFO_S
 *
p°U§Pic
);

65 
HI_S32
 
HI_MPI_VDEC_E«bÀU£rPic
(
VDEC_CHN
 
VdChn
, 
HI_BOOL
 
bIn°™t
);

66 
HI_S32
 
HI_MPI_VDEC_DißbÀU£rPic
(
VDEC_CHN
 
VdChn
);

68 
HI_S32
 
HI_MPI_VDEC_SëDi•œyMode
(
VDEC_CHN
 
VdChn
, 
VIDEO_DISPLAY_MODE_E
 
íDi•œyMode
);

69 
HI_S32
 
HI_MPI_VDEC_GëDi•œyMode
(
VDEC_CHN
 
VdChn
, 
VIDEO_DISPLAY_MODE_E
 *
≥nDi•œyMode
);

71 
HI_S32
 
HI_MPI_VDEC_SëChnVBC¡
(
VDEC_CHN
 
VdChn
, 
HI_U32
 
u32BlkC¡
);

72 
HI_S32
 
HI_MPI_VDEC_GëChnVBC¡
(
VDEC_CHN
 
VdChn
, 
HI_U32
 *
pu32BlkC¡
);

77 #ifde‡
__˝lu•lus


78 #i‡
__˝lu•lus


	@include/mpi_venc.h

15 #i‚de‡
__MPI_VENC_H__


16 
	#__MPI_VENC_H__


	)

18 
	~"hi_comm⁄.h
"

19 
	~"hi_comm_video.h
"

20 
	~"hi_comm_víc.h
"

21 
	~"hi_comm_vb.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
HI_S32
 
HI_MPI_VENC_Cª©eChn
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_CHN_ATTR_S
 *
p°Aâr
);

30 
HI_S32
 
HI_MPI_VENC_De°royChn
(
VENC_CHN
 
VeChn
);

31 
HI_S32
 
HI_MPI_VENC_SëCh∆Pri‹ôy
(
VENC_CHN
 
VeChn
, 
HI_U32
 
u32Pri‹ôy
);

32 
HI_S32
 
HI_MPI_VENC_GëCh∆Pri‹ôy
(
VENC_CHN
 
VeChn
, 
HI_U32
 *
pu32Pri‹ôy
);

33 
HI_S32
 
HI_MPI_VENC_Re£tChn
(
VENC_CHN
 
VeChn
);

35 
HI_S32
 
HI_MPI_VENC_SèπRecvPic
(
VENC_CHN
 
VeChn
);

36 
HI_S32
 
HI_MPI_VENC_SèπRecvPicEx
(
VENC_CHN
 
VeChn
, 
VENC_RECV_PIC_PARAM_S
 *
p°RecvP¨am
);

37 
HI_S32
 
HI_MPI_VENC_St›RecvPic
(
VENC_CHN
 
VeChn
);

39 
HI_S32
 
HI_MPI_VENC_Quîy
(
VENC_CHN
 
VeChn
, 
VENC_CHN_STAT_S
 *
p°Sèt
);

41 
HI_S32
 
HI_MPI_VENC_SëChnAâr
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_CHN_ATTR_S
 *
p°Aâr
);

42 
HI_S32
 
HI_MPI_VENC_GëChnAâr
(
VENC_CHN
 
VeChn
, 
VENC_CHN_ATTR_S
 *
p°Aâr
);

44 
HI_S32
 
HI_MPI_VENC_GëSåóm
(
VENC_CHN
 
VeChn
, 
VENC_STREAM_S
 *
p°Såóm
, HI_S32 
s32MûliSec
);

45 
HI_S32
 
HI_MPI_VENC_Rñó£Såóm
(
VENC_CHN
 
VeChn
, 
VENC_STREAM_S
 *
p°Såóm
);

47 
HI_S32
 
HI_MPI_VENC_In£πU£rD©a
(
VENC_CHN
 
VeChn
, 
HI_U8
 *
pu8D©a
, 
HI_U32
 
u32Lí
);

49 
HI_S32
 
HI_MPI_VENC_SídFøme
(
VENC_CHN
 
VeChn
, 
VIDEO_FRAME_INFO_S
 *
p°Føme
 ,HI_S32 
s32MûliSec
);

51 
HI_S32
 
HI_MPI_VENC_SëMaxSåómC¡
(
VENC_CHN
 
VeChn
, 
HI_U32
 
u32MaxSåmC¡
);

52 
HI_S32
 
HI_MPI_VENC_GëMaxSåómC¡
(
VENC_CHN
 
VeChn
, 
HI_U32
 *
pu32MaxSåmC¡
);

54 
HI_S32
 
HI_MPI_VENC_Reque°IDR
(
VENC_CHN
 
VeChn
,
HI_BOOL
 
bIn°™t
);

56 
HI_S32
 
HI_MPI_VENC_GëFd
(
VENC_CHN
 
VeChn
);

58 
HI_S32
 
HI_MPI_VENC_SëRoiCfg
(
VENC_CHN
 
VeChn
, 
VENC_ROI_CFG_S
 *
p°VícRoiCfg
);

59 
HI_S32
 
HI_MPI_VENC_GëRoiCfg
(
VENC_CHN
 
VeChn
, 
HI_U32
 
u32Index
, 
VENC_ROI_CFG_S
 *
p°VícRoiCfg
);

61 
HI_S32
 
HI_MPI_VENC_SëRoiBgFømeR©e
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_ROIBG_FRAME_RATE_S
 *
p°RoiBgFrmR©e
);

62 
HI_S32
 
HI_MPI_VENC_GëRoiBgFømeR©e
(
VENC_CHN
 
VeChn
, 
VENC_ROIBG_FRAME_RATE_S
 *
p°RoiBgFrmR©e
);

64 
HI_S32
 
HI_MPI_VENC_SëH264Sli˚S∂ô
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_SLICE_SPLIT_S
 *
p°Sli˚S∂ô
);

65 
HI_S32
 
HI_MPI_VENC_GëH264Sli˚S∂ô
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_SLICE_SPLIT_S
 *
p°Sli˚S∂ô
);

67 
HI_S32
 
HI_MPI_VENC_SëH264I¡îPªd
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_INTER_PRED_S
 *
p°H264I¡îPªd
);

68 
HI_S32
 
HI_MPI_VENC_GëH264I¡îPªd
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_INTER_PRED_S
 *
p°H264I¡îPªd
);

70 
HI_S32
 
HI_MPI_VENC_SëH264I¡øPªd
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_INTRA_PRED_S
 *
p°H264I¡îPªd
);

71 
HI_S32
 
HI_MPI_VENC_GëH264I¡øPªd
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_INTRA_PRED_S
 *
p°H264I¡îPªd
);

73 
HI_S32
 
HI_MPI_VENC_SëH264Tøns
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_TRANS_S
 *
p°H264Tøns
);

74 
HI_S32
 
HI_MPI_VENC_GëH264Tøns
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_TRANS_S
 *
p°H264Tøns
);

76 
HI_S32
 
HI_MPI_VENC_SëH264E¡r›y
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_ENTROPY_S
 *
p°H264E¡r›yEnc
);

77 
HI_S32
 
HI_MPI_VENC_GëH264E¡r›y
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_ENTROPY_S
 *
p°H264E¡r›yEnc
);

79 
HI_S32
 
HI_MPI_VENC_SëH264Poc
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_POC_S
 *
p°H264Poc
);

80 
HI_S32
 
HI_MPI_VENC_GëH264Poc
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_POC_S
 *
p°H264Poc
);

82 
HI_S32
 
HI_MPI_VENC_SëH264Dblk
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_DBLK_S
 *
p°H264Dblk
);

83 
HI_S32
 
HI_MPI_VENC_GëH264Dblk
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_DBLK_S
 *
p°H264Dblk
);

85 
HI_S32
 
HI_MPI_VENC_SëH264Vui
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_VUI_S
 *
p°H264Vui
);

86 
HI_S32
 
HI_MPI_VENC_GëH264Vui
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_VUI_S
 *
p°H264Vui
);

88 
HI_S32
 
HI_MPI_VENC_SëJ≥gP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_JPEG_S
 *
p°J≥gP¨am
);

89 
HI_S32
 
HI_MPI_VENC_GëJ≥gP¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_JPEG_S
 *
p°J≥gP¨am
);

92 
HI_S32
 
HI_MPI_VENC_SëMj≥gP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_MJPEG_S
 *
p°Mj≥gP¨am
);

93 
HI_S32
 
HI_MPI_VENC_GëMj≥gP¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_MJPEG_S
 *
p°Mj≥gP¨am
);

95 
HI_S32
 
HI_MPI_VENC_SëFømeR©e
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_FRAME_RATE_S
 *
p°FømeR©e
);

96 
HI_S32
 
HI_MPI_VENC_GëFømeR©e
(
VENC_CHN
 
VeChn
, 
VENC_FRAME_RATE_S
 *
p°FømeR©e
);

98 
HI_S32
 
HI_MPI_VENC_GëRcP¨am
(
VENC_CHN
 
VeChn
, 
VENC_RC_PARAM_S
 *
p°RcP¨am
);

99 
HI_S32
 
HI_MPI_VENC_SëRcP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_RC_PARAM_S
 *
p°RcP¨am
);

102 
HI_S32
 
HI_MPI_VENC_SëRefP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_REF_S
 *
p°RefP¨am
);

103 
HI_S32
 
HI_MPI_VENC_GëRefP¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_REF_S
 *
p°RefP¨am
);

105 
HI_S32
 
HI_MPI_VENC_SëCﬁ‹2Gªy
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_COLOR2GREY_S
 *
p°ChnCﬁ‹2Gªy
);

106 
HI_S32
 
HI_MPI_VENC_GëCﬁ‹2Gªy
(
VENC_CHN
 
VeChn
, 
VENC_COLOR2GREY_S
 *
p°ChnCﬁ‹2Gªy
);

108 
HI_S32
 
HI_MPI_VENC_SëCr›
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_CROP_CFG_S
 *
p°Cr›Cfg
);

109 
HI_S32
 
HI_MPI_VENC_GëCr›
(
VENC_CHN
 
VeChn
, 
VENC_CROP_CFG_S
 *
p°Cr›Cfg
);

111 
HI_S32
 
HI_MPI_VENC_SëJ≥gS«pMode
(
VENC_CHN
 
VeChn
, 
VENC_JPEG_SNAP_MODE_E
 
íJ≥gS«pMode
);

112 
HI_S32
 
HI_MPI_VENC_GëJ≥gS«pMode
(
VENC_CHN
 
VeChn
, 
VENC_JPEG_SNAP_MODE_E
 *
≥nJ≥gS«pMode
);

114 
HI_S32
 
HI_MPI_VENC_E«bÀIDR
(
VENC_CHN
 
VeChn
, 
HI_BOOL
 
bE«bÀIDR
);

116 
HI_S32
 
HI_MPI_VENC_SëH264IdrPicId
–
VENC_CHN
 
VeChn
, 
VENC_H264_IDRPICID_CFG_S
* 
p°H264eIdrPicIdCfg
 );

117 
HI_S32
 
HI_MPI_VENC_GëH264IdrPicId
–
VENC_CHN
 
VeChn
, 
VENC_H264_IDRPICID_CFG_S
* 
p°H264eIdrPicIdCfg
 );

119 
HI_S32
 
HI_MPI_VENC_GëSåómBufInfo
(
VENC_CHN
 
VeChn
, 
VENC_STREAM_BUF_INFO_S
 *
p°SåómBufInfo
);

122 
HI_S32
 
HI_MPI_VENC_SëRcPri‹ôy
(
VENC_CHN
 
VeChn
, 
VENC_RC_PRIORITY_E
 
íRcPri‹ôy
);

123 
HI_S32
 
HI_MPI_VENC_GëRcPri‹ôy
(
VENC_CHN
 
VeChn
, 
VENC_RC_PRIORITY_E
 *
≥nRcPri‹ôy
);

126 
HI_S32
 
HI_MPI_VENC_SëH265Sli˚S∂ô
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_SLICE_SPLIT_S
 *
p°Sli˚S∂ô
);

127 
HI_S32
 
HI_MPI_VENC_GëH265Sli˚S∂ô
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_SLICE_SPLIT_S
 *
p°Sli˚S∂ô
);

130 
HI_S32
 
HI_MPI_VENC_SëH265PªdUnô
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_PU_S
 *
p°PªdUnô
);

131 
HI_S32
 
HI_MPI_VENC_GëH265PªdUnô
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_PU_S
 *
p°PªdUnô
);

134 
HI_S32
 
HI_MPI_VENC_SëH265Tøns
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_TRANS_S
 *
p°H265Tøns
);

135 
HI_S32
 
HI_MPI_VENC_GëH265Tøns
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_TRANS_S
 *
p°H265Tøns
);

137 
HI_S32
 
HI_MPI_VENC_SëH265E¡r›y
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_ENTROPY_S
 *
p°H265E¡r›y
);

138 
HI_S32
 
HI_MPI_VENC_GëH265E¡r›y
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_ENTROPY_S
 *
p°H265E¡r›y
);

140 
HI_S32
 
HI_MPI_VENC_SëH265Dblk
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_DBLK_S
 *
p°H265Dblk
);

141 
HI_S32
 
HI_MPI_VENC_GëH265Dblk
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_DBLK_S
 *
p°H265Dblk
);

142 
HI_S32
 
HI_MPI_VENC_SëH265Sao
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_SAO_S
 *
p°H265Sao
);

143 
HI_S32
 
HI_MPI_VENC_GëH265Sao
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_SAO_S
 *
p°H265Sao
);

146 
HI_S32
 
HI_MPI_VENC_SëH265Timög
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H265_TIMING_S
 *
p°H265Timög
);

147 
HI_S32
 
HI_MPI_VENC_GëH265Timög
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H265_TIMING_S
 *
p°H265Timög
);

149 
HI_S32
 
HI_MPI_VENC_SëFømeLo°Så©egy
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_FRAMELOST_S
 *
p°FrmLo°P¨am
);

150 
HI_S32
 
HI_MPI_VENC_GëFømeLo°Så©egy
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_FRAMELOST_S
 *
p°FrmLo°P¨am
);

153 
HI_S32
 
HI_MPI_VENC_SëSu≥rFømeCfg
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_SUPERFRAME_CFG_S
 *
p°Su≥rFrmP¨am
);

154 
HI_S32
 
HI_MPI_VENC_GëSu≥rFømeCfg
(
VENC_CHN
 
VeChn
,
VENC_SUPERFRAME_CFG_S
 *
p°Su≥rFrmP¨am
);

156 
HI_S32
 
HI_MPI_VENC_SëI¡øRe‰esh
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_INTRA_REFRESH_S
 *
p°I¡øRe‰esh
);

157 
HI_S32
 
HI_MPI_VENC_GëI¡øRe‰esh
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_INTRA_REFRESH_S
 *
p°I¡øRe‰esh
);

161 #ifde‡
__˝lu•lus


162 #i‡
__˝lu•lus


	@include/mpi_vgs.h

15 #i‚de‡
__MPI_VGS_H__


16 
	#__MPI_VGS_H__


	)

18 
	~"hi_comm⁄.h
"

19 
	~"hi_comm_video.h
"

20 
	~"hi_comm_vgs.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


43 
HI_S32
 
HI_MPI_VGS_BegöJob
(
VGS_HANDLE
 *
phH™dÀ
);

60 
HI_S32
 
HI_MPI_VGS_EndJob
(
VGS_HANDLE
 
hH™dÀ
);

77 
HI_S32
 
HI_MPI_VGS_C™˚lJob
(
VGS_HANDLE
 
hH™dÀ
);

94 
HI_S32
 
HI_MPI_VGS_AddSˇÀTask
(
VGS_HANDLE
 
hH™dÀ
, 
VGS_TASK_ATTR_S
 *
p°Task
);

112 
HI_S32
 
HI_MPI_VGS_AddDøwLöeTask
(
VGS_HANDLE
 
hH™dÀ
, 
VGS_TASK_ATTR_S
 *
p°Task
, 
VGS_DRAW_LINE_S
 *
p°VgsDøwLöe
);

129 
HI_S32
 
HI_MPI_VGS_AddCovîTask
(
VGS_HANDLE
 
hH™dÀ
, 
VGS_TASK_ATTR_S
 *
p°Task
, 
VGS_ADD_COVER_S
 *
p°VgsAddCovî
);

146 
HI_S32
 
HI_MPI_VGS_AddOsdTask
(
VGS_HANDLE
 
hH™dÀ
, 
VGS_TASK_ATTR_S
 *
p°Task
, 
VGS_ADD_OSD_S
 *
p°VgsAddOsd
);

150 #ifde‡
__˝lu•lus


151 #i‡
__˝lu•lus


	@include/mpi_vi.h

17 #i‚de‡
__MPI_VI_H__


18 
	#__MPI_VI_H__


	)

20 
	~"hi_comm_vi.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


29 
HI_S32
 
HI_MPI_VI_SëDevAâr
(
VI_DEV
 
ViDev
, c⁄° 
VI_DEV_ATTR_S
 *
p°DevAâr
);

30 
HI_S32
 
HI_MPI_VI_GëDevAâr
(
VI_DEV
 
ViDev
, 
VI_DEV_ATTR_S
 *
p°DevAâr
);

32 
HI_S32
 
HI_MPI_VI_E«bÀDev
(
VI_DEV
 
ViDev
);

33 
HI_S32
 
HI_MPI_VI_DißbÀDev
(
VI_DEV
 
ViDev
);

35 
HI_S32
 
HI_MPI_VI_SëChnAâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_CHN_ATTR_S
 *
p°Aâr
);

36 
HI_S32
 
HI_MPI_VI_GëChnAâr
(
VI_CHN
 
ViChn
, 
VI_CHN_ATTR_S
 *
p°Aâr
);

38 
HI_S32
 
HI_MPI_VI_E«bÀChn
(
VI_CHN
 
ViChn
);

39 
HI_S32
 
HI_MPI_VI_DißbÀChn
(
VI_CHN
 
ViChn
);

41 
HI_S32
 
HI_MPI_VI_GëFøme
(
VI_CHN
 
ViChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
, HI_S32 
s32MûliSec
);

42 
HI_S32
 
HI_MPI_VI_Rñó£Føme
(
VI_CHN
 
ViChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
);

43 
HI_S32
 
HI_MPI_VI_SëFømeDïth
(
VI_CHN
 
ViChn
, 
HI_U32
 
u32Dïth
);

44 
HI_S32
 
HI_MPI_VI_GëFømeDïth
(
VI_CHN
 
ViChn
, 
HI_U32
 *
pu32Dïth
);

46 
HI_S32
 
HI_MPI_VI_SëU£rPic
(
VI_CHN
 
ViChn
, 
VI_USERPIC_ATTR_S
 *
p°U§Pic
);

47 
HI_S32
 
HI_MPI_VI_E«bÀU£rPic
(
VI_CHN
 
ViChn
);

48 
HI_S32
 
HI_MPI_VI_DißbÀU£rPic
(
VI_CHN
 
ViChn
);

51 
HI_S32
 
HI_MPI_VI_BödChn
(
VI_CHN
 
ViChn
, c⁄° 
VI_CHN_BIND_ATTR_S
 *
p°ChnBödAâr
);

52 
HI_S32
 
HI_MPI_VI_UnBödChn
(
VI_CHN
 
ViChn
);

53 
HI_S32
 
HI_MPI_VI_GëChnBöd
(
VI_CHN
 
ViChn
, 
VI_CHN_BIND_ATTR_S
 *
p°ChnBödAâr
);

55 
HI_S32
 
HI_MPI_VI_SëDevAârEx
(
VI_DEV
 
ViDev
, c⁄° 
VI_DEV_ATTR_EX_S
 *
p°DevAârEx
);

56 
HI_S32
 
HI_MPI_VI_GëDevAârEx
(
VI_DEV
 
ViDev
, 
VI_DEV_ATTR_EX_S
 *
p°DevAârEx
);

58 
HI_S32
 
HI_MPI_VI_GëFd
(
VI_CHN
 
ViChn
);

60 
HI_S32
 
HI_MPI_VI_Quîy
(
VI_CHN
 
ViChn
, 
VI_CHN_STAT_S
 *
p°Sèt
);

62 
HI_S32
 
HI_MPI_VI_E«bÀChnI¡îru±
(
VI_CHN
 
ViChn
);

63 
HI_S32
 
HI_MPI_VI_DißbÀChnI¡îru±
(
VI_CHN
 
ViChn
);

65 
HI_S32
 
HI_MPI_VI_SëFœshC⁄fig
(
VI_DEV
 
ViDev
, c⁄° 
VI_FLASH_CONFIG_S
 *
p°FœshC⁄fig
);

66 
HI_S32
 
HI_MPI_VI_GëFœshC⁄fig
(
VI_DEV
 
ViDev
, 
VI_FLASH_CONFIG_S
 *
p°FœshC⁄fig
);

67 
HI_S32
 
HI_MPI_VI_TriggîFœsh
(
VI_DEV
 
ViDev
, 
HI_BOOL
 
bE«bÀ
);

69 
HI_S32
 
HI_MPI_VI_SëExtChnAâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

70 
HI_S32
 
HI_MPI_VI_GëExtChnAâr
(
VI_CHN
 
ViChn
, 
VI_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

72 
HI_S32
 
HI_MPI_VI_SëExtChnCr›
(
VI_CHN
 
ViChn
, c⁄° 
CROP_INFO_S
 *
p°ExtChnCr›
);

73 
HI_S32
 
HI_MPI_VI_GëExtChnCr›
(
VI_CHN
 
ViChn
, 
CROP_INFO_S
 *
p°ExtChnCr›
);

75 
HI_S32
 
HI_MPI_VI_SëLDCAâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_LDC_ATTR_S
 *
p°LDCAâr
);

76 
HI_S32
 
HI_MPI_VI_GëLDCAâr
(
VI_CHN
 
ViChn
, 
VI_LDC_ATTR_S
 *
p°LDCAâr
);

78 
HI_S32
 
HI_MPI_VI_SëCSCAâr
(
VI_DEV
 
ViDev
, c⁄° 
VI_CSC_ATTR_S
 *
p°CSCAâr
);

79 
HI_S32
 
HI_MPI_VI_GëCSCAâr
(
VI_DEV
 
ViDev
, 
VI_CSC_ATTR_S
 *
p°CSCAâr
);

81 
HI_S32
 
HI_MPI_VI_SëRŸ©e
(
VI_CHN
 
ViChn
, c⁄° 
ROTATE_E
 
íRŸ©e
);

82 
HI_S32
 
HI_MPI_VI_GëRŸ©e
(
VI_CHN
 
ViChn
, 
ROTATE_E
 *
≥nRŸ©e
);

84 
HI_S32
 
HI_MPI_VI_GëChnLuma
(
VI_CHN
 
ViChn
, 
VI_CHN_LUM_S
 *
p°Luma
);

86 
HI_S32
 
HI_MPI_VI_SëWDRAâr
(
VI_DEV
 
ViDev
, c⁄° 
VI_WDR_ATTR_S
 *
p°WDRAâr
);

87 
HI_S32
 
HI_MPI_VI_GëWDRAâr
(
VI_DEV
 
ViDev
, 
VI_WDR_ATTR_S
 *
p°WDRAâr
);

89 
HI_S32
 
HI_MPI_VI_SëDevDumpAâr
(
VI_DEV
 
ViDev
, c⁄° 
VI_DUMP_ATTR_S
 *
p°DumpAâr
);

90 
HI_S32
 
HI_MPI_VI_GëDevDumpAâr
(
VI_DEV
 
ViDev
, 
VI_DUMP_ATTR_S
 *
p°DumpAâr
);

92 
HI_S32
 
HI_MPI_VI_E«bÀBayîDump
(
VI_DEV
 
ViDev
);

93 
HI_S32
 
HI_MPI_VI_DißbÀBayîDump
(
VI_DEV
 
ViDev
);

95 
HI_S32
 
HI_MPI_VI_E«bÀBayîRód
(
VI_DEV
 
ViDev
);

96 
HI_S32
 
HI_MPI_VI_DißbÀBayîRód
(
VI_DEV
 
ViDev
);

97 
HI_S32
 
HI_MPI_VI_SídBayîD©a
(
VI_DEV
 
ViDev
, c⁄° 
VI_RAW_DATA_INFO_S
 *
p°RawD©a
, HI_S32 
s32MûliSec
);

99 
HI_S32
 
HI_MPI_VI_SëDCIP¨am
(
VI_DEV
 
ViDev
, c⁄° 
VI_DCI_PARAM_S
 *
p°DciP¨am
);

100 
HI_S32
 
HI_MPI_VI_GëDCIP¨am
(
VI_DEV
 
ViDev
, 
VI_DCI_PARAM_S
 *
p°DciP¨am
);

102 
HI_S32
 
HI_MPI_VI_Clo£Fd
(
HI_VOID
);

105 #ifde‡
__˝lu•lus


106 #i‡
__˝lu•lus


	@include/mpi_vo.h

17 #i‚de‡
__MPI_VO_H__


18 
	#__MPI_VO_H__


	)

20 
	~"hi_comm_vo.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


31 
HI_S32
 
HI_MPI_VO_E«bÀ
 (
VO_DEV
 
VoDev
);

32 
HI_S32
 
HI_MPI_VO_DißbÀ
(
VO_DEV
 
VoDev
);

34 
HI_S32
 
HI_MPI_VO_SëPubAâr
(
VO_DEV
 
VoDev
, c⁄° 
VO_PUB_ATTR_S
 *
p°PubAâr
);

35 
HI_S32
 
HI_MPI_VO_GëPubAâr
(
VO_DEV
 
VoDev
, 
VO_PUB_ATTR_S
 *
p°PubAâr
);

37 
HI_S32
 
HI_MPI_VO_Clo£Fd
(
HI_VOID
);

41 
HI_S32
 
HI_MPI_VO_E«bÀVideoLayî
 (
VO_LAYER
 
VoLayî
);

42 
HI_S32
 
HI_MPI_VO_DißbÀVideoLayî
(
VO_LAYER
 
VoLayî
);

44 
HI_S32
 
HI_MPI_VO_SëVideoLayîAâr
(
VO_LAYER
 
VoLayî
, c⁄° 
VO_VIDEO_LAYER_ATTR_S
 *
p°LayîAâr
);

45 
HI_S32
 
HI_MPI_VO_GëVideoLayîAâr
(
VO_LAYER
 
VoLayî
, 
VO_VIDEO_LAYER_ATTR_S
 *
p°LayîAâr
);

47 
HI_S32
 
HI_MPI_VO_SëVideoLayîPri‹ôy
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32Pri‹ôy
);

48 
HI_S32
 
HI_MPI_VO_GëVideoLayîPri‹ôy
(
VO_LAYER
 
VoLayî
, 
HI_U32
 *
pu32Pri‹ôy
);

50 
HI_S32
 
HI_MPI_VO_SëVideoLayîCSC
(
VO_LAYER
 
VoLayî
, c⁄° 
VO_CSC_S
 *
p°VideoCSC
);

51 
HI_S32
 
HI_MPI_VO_GëVideoLayîCSC
(
VO_LAYER
 
VoLayî
, 
VO_CSC_S
 *
p°VideoCSC
);

53 
HI_S32
 
HI_MPI_VO_SëVideoLayîP¨tôi⁄Mode
(
VO_LAYER
 
VoLayî
, 
VO_PART_MODE_E
 
íP¨tMode
);

54 
HI_S32
 
HI_MPI_VO_GëVideoLayîP¨tôi⁄Mode
(
VO_LAYER
 
VoLayî
, 
VO_PART_MODE_E
 *
≥nP¨tMode
);

56 
HI_S32
 
HI_MPI_VO_SëAârBegö
(
VO_LAYER
 
VoLayî
);

57 
HI_S32
 
HI_MPI_VO_SëAârEnd
 (
VO_LAYER
 
VoLayî
);

59 
HI_S32
 
HI_MPI_VO_SëPœyTﬁî©i⁄
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32Tﬁî©i⁄
);

60 
HI_S32
 
HI_MPI_VO_GëPœyTﬁî©i⁄
(
VO_LAYER
 
VoLayî
, 
HI_U32
 *
pu32Tﬁî©i⁄
);

62 
HI_S32
 
HI_MPI_VO_GëS¸ìnFøme
 (
VO_LAYER
 
VoLayî
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
, HI_S32 
s32MûliSec
);

63 
HI_S32
 
HI_MPI_VO_Rñó£S¸ìnFøme
(
VO_LAYER
 
VoLayî
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
);

65 
HI_S32
 
HI_MPI_VO_SëDi•BufLí
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32BufLí
);

66 
HI_S32
 
HI_MPI_VO_GëDi•BufLí
(
VO_LAYER
 
VoLayî
, 
HI_U32
 *
pu32BufLí
);

70 
HI_S32
 
HI_MPI_VO_E«bÀChn
 (
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

71 
HI_S32
 
HI_MPI_VO_DißbÀChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

73 
HI_S32
 
HI_MPI_VO_SëChnAâr
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_CHN_ATTR_S
 *
p°ChnAâr
);

74 
HI_S32
 
HI_MPI_VO_GëChnAâr
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_CHN_ATTR_S
 *
p°ChnAâr
);

76 
HI_S32
 
HI_MPI_VO_SëChnFõld
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_DISPLAY_FIELD_E
 
íFõld
);

77 
HI_S32
 
HI_MPI_VO_GëChnFõld
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_DISPLAY_FIELD_E
 *
pFõld
);

79 
HI_S32
 
HI_MPI_VO_SëChnFømeR©e
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, HI_S32 
s32ChnFrmR©e
);

80 
HI_S32
 
HI_MPI_VO_GëChnFømeR©e
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, HI_S32 *
ps32ChnFrmR©e
);

82 
HI_S32
 
HI_MPI_VO_GëChnFøme
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VIDEO_FRAME_INFO_S
 *
p°Føme
, HI_S32 
s32MûliSec
);

83 
HI_S32
 
HI_MPI_VO_Rñó£ChnFøme
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VIDEO_FRAME_INFO_S
 *
p°Føme
);

85 
HI_S32
 
HI_MPI_VO_Pau£Chn
 (
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

86 
HI_S32
 
HI_MPI_VO_ResumeChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

87 
HI_S32
 
HI_MPI_VO_SãpChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

88 
HI_S32
 
HI_MPI_VO_Re‰eshChn
–
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

90 
HI_S32
 
HI_MPI_VO_ShowChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

91 
HI_S32
 
HI_MPI_VO_HideChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

93 
HI_S32
 
HI_MPI_VO_SëZoomInWödow
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_ZOOM_ATTR_S
 *
p°ZoomAâr
);

94 
HI_S32
 
HI_MPI_VO_GëZoomInWödow
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_ZOOM_ATTR_S
 *
p°ZoomAâr
);

96 
HI_S32
 
HI_MPI_VO_GëChnPts
 (
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_U64
 *
pu64ChnPts
);

97 
HI_S32
 
HI_MPI_VO_QuîyChnSèt
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_QUERY_STATUS_S
 *
p°Sètus
);

99 
HI_S32
 
HI_MPI_VO_SídFøme
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
, HI_S32 
s32MûliSec
);

101 
HI_S32
 
HI_MPI_VO_CÀ¨ChnBuf„r
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_BOOL
 
bCÃAŒ
);

103 
HI_S32
 
HI_MPI_VO_SëChnB‹dî
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_BORDER_S
 *
p°B‹dî
);

104 
HI_S32
 
HI_MPI_VO_GëChnB‹dî
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_BORDER_S
 *
p°B‹dî
);

106 
HI_S32
 
HI_MPI_VO_SëChnRe˚iveThªshﬁd
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_U32
 
u32Thªshﬁd
);

107 
HI_S32
 
HI_MPI_VO_GëChnRe˚iveThªshﬁd
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_U32
 *
pu32Thªshﬁd
);

109 
HI_S32
 
HI_MPI_VO_GëChnRegi⁄Luma
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_REGION_INFO_S
 *
p°Regi⁄Info
,

110 
HI_U32
 *
pu32LumaD©a
, 
HI_S32
 
s32MûliSec
);

114 
HI_S32
 
HI_MPI_VO_SëGøphicLayîCSC
(
GRAPHIC_LAYER
 
GøphicLayî
, c⁄° 
VO_CSC_S
 *
p°CSC
);

115 
HI_S32
 
HI_MPI_VO_GëGøphicLayîCSC
(
GRAPHIC_LAYER
 
GøphicLayî
, 
VO_CSC_S
 *
p°CSC
);

117 
HI_S32
 
HI_MPI_VO_SëDevFømeR©e
(
VO_DEV
 
VoDev
, 
HI_U32
 
u32FømeR©e
);

118 
HI_S32
 
HI_MPI_VO_GëDevFømeR©e
(
VO_DEV
 
VoDev
, 
HI_U32
 *
pu32FømeR©e
);

121 #ifde‡
__˝lu•lus


122 #i‡
__˝lu•lus


	@include/mpi_vpss.h

18 #i‚de‡
__MPI_VPSS_H__


19 
	#__MPI_VPSS_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_comm_video.h
"

23 
	~"hi_comm_vpss.h
"

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


32 
HI_S32
 
HI_MPI_VPSS_Cª©eGΩ
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
 *
p°GΩAâr
);

33 
HI_S32
 
HI_MPI_VPSS_De°royGΩ
(
VPSS_GRP
 
VpssGΩ
);

35 
HI_S32
 
HI_MPI_VPSS_SèπGΩ
(
VPSS_GRP
 
VpssGΩ
);

36 
HI_S32
 
HI_MPI_VPSS_St›GΩ
(
VPSS_GRP
 
VpssGΩ
);

38 
HI_S32
 
HI_MPI_VPSS_Re£tGΩ
(
VPSS_GRP
 
VpssGΩ
);

40 
HI_S32
 
HI_MPI_VPSS_GëGΩAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
 *
p°GΩAâr
);

41 
HI_S32
 
HI_MPI_VPSS_SëGΩAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
 *
p°GΩAâr
);

43 
HI_S32
 
HI_MPI_VPSS_SëGΩP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_PARAM_S
 *
p°VpssP¨am
);

44 
HI_S32
 
HI_MPI_VPSS_GëGΩP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_PARAM_S
 *
p°VpssP¨am
);

46 
HI_S32
 
HI_MPI_VPSS_SëGΩP¨amV2
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_PARAM_V2_S
 *
p°VpssP¨amV2
);

47 
HI_S32
 
HI_MPI_VPSS_GëGΩP¨amV2
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_PARAM_V2_S
 *
p°VpssP¨amV2
);

49 
HI_S32
 
HI_MPI_VPSS_SëGΩDñay
(
VPSS_GRP
 
VpssGΩ
, 
HI_U32
 
u32Dñay
);

50 
HI_S32
 
HI_MPI_VPSS_GëGΩDñay
(
VPSS_GRP
 
VpssGΩ
, 
HI_U32
 *
pu32Dñay
);

52 
HI_S32
 
HI_MPI_VPSS_SëGΩFømeR©e
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_FRAME_RATE_S
 *
p°VpssFømeR©e
);

53 
HI_S32
 
HI_MPI_VPSS_GëGΩFømeR©e
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_FRAME_RATE_S
 *
p°VpssFømeR©e
);

55 
HI_S32
 
HI_MPI_VPSS_SëGΩCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

56 
HI_S32
 
HI_MPI_VPSS_GëGΩCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

58 
HI_S32
 
HI_MPI_VPSS_SëRefSñe˘
(
VPSS_GRP
 
VpssGΩ
, c⁄° 
VPSS_REF_SEL_MODE_E
 
íRefSñMode
);

59 
HI_S32
 
HI_MPI_VPSS_GëRefSñe˘
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_REF_SEL_MODE_E
 *
≥nRefSñMode
);

61 
HI_S32
 
HI_MPI_VPSS_SídFøme
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
, HI_S32 
s32MûliSec
);

62 
HI_S32
 
HI_MPI_VPSS_GëGΩFøme
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
, 
HI_U32
 
u32FømeIndex
);

63 
HI_S32
 
HI_MPI_VPSS_Rñó£GΩFøme
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
);

65 
HI_S32
 
HI_MPI_VPSS_E«bÀBackupFøme
(
VPSS_GRP
 
VpssGΩ
);

66 
HI_S32
 
HI_MPI_VPSS_DißbÀBackupFøme
(
VPSS_GRP
 
VpssGΩ
);

71 
HI_S32
 
HI_MPI_VPSS_E«bÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

72 
HI_S32
 
HI_MPI_VPSS_DißbÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

74 
HI_S32
 
HI_MPI_VPSS_SëChnMode
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_MODE_S
 *
p°VpssMode
);

75 
HI_S32
 
HI_MPI_VPSS_GëChnMode
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_MODE_S
 *
p°VpssMode
);

77 
HI_S32
 
HI_MPI_VPSS_GëChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_ATTR_S
 *
p°ChnAâr
);

78 
HI_S32
 
HI_MPI_VPSS_SëChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_ATTR_S
 *
p°ChnAâr
);

80 
HI_S32
 
HI_MPI_VPSS_SëChnP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_PARAM_S
 *
p°ChnSpP¨am
);

81 
HI_S32
 
HI_MPI_VPSS_GëChnP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_PARAM_S
 *
p°ChnSpP¨am
);

83 
HI_S32
 
HI_MPI_VPSS_SëDïth
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
HI_U32
 
u32Dïth
);

84 
HI_S32
 
HI_MPI_VPSS_GëDïth
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
HI_U32
 *
pu32Dïth
);

86 
HI_S32
 
HI_MPI_VPSS_GëChnFøme
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
,

87 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
, 
HI_S32
 
s32MûliSec
);

88 
HI_S32
 
HI_MPI_VPSS_Rñó£ChnFøme
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
);

90 
HI_S32
 
HI_MPI_VPSS_SëChnNR
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
HI_BOOL
 
bE«bÀ
);

91 
HI_S32
 
HI_MPI_VPSS_GëChnNR
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
HI_BOOL
 *
pbE«bÀ
);

93 
HI_S32
 
HI_MPI_VPSS_SëChnCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

94 
HI_S32
 
HI_MPI_VPSS_GëChnCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

96 
HI_S32
 
HI_MPI_VPSS_SëChnCovî
(
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
, 
HI_U32
 
u32CovîMask
);

97 
HI_S32
 
HI_MPI_VPSS_GëChnCovî
(
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
, 
HI_U32
 *
pu32CovîMask
);

99 
HI_S32
 
HI_MPI_VPSS_SëChnOvîœy
(
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
, 
HI_U32
 
u32OvîœyMask
);

100 
HI_S32
 
HI_MPI_VPSS_GëChnOvîœy
(
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
, 
HI_U32
 *
pu32OvîœyMask
);

102 
HI_S32
 
HI_MPI_VPSS_SëLDCAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, c⁄° 
VPSS_LDC_ATTR_S
 *
p°LDCAâr
);

103 
HI_S32
 
HI_MPI_VPSS_GëLDCAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_LDC_ATTR_S
 *
p°LDCAâr
);

105 
HI_S32
 
HI_MPI_VPSS_SëRŸ©e
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
ROTATE_E
 
íRŸ©e
);

106 
HI_S32
 
HI_MPI_VPSS_GëRŸ©e
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
ROTATE_E
 *
≥nRŸ©e
);

108 
HI_S32
 
HI_MPI_VPSS_GëRegi⁄Luma
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_REGION_INFO_S
 *
p°Regi⁄Info
,

109 
HI_U32
 *
pu32LumaD©a
,
HI_S32
 
s32MûliSec
);

111 
HI_S32
 
HI_MPI_VPSS_SëLowDñayAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_LOW_DELAY_INFO_S
 *
p°LowDñayInfo
);

112 
HI_S32
 
HI_MPI_VPSS_GëLowDñayAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_LOW_DELAY_INFO_S
 *
p°LowDñayInfo
);

116 
HI_S32
 
HI_MPI_VPSS_SëExtChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

117 
HI_S32
 
HI_MPI_VPSS_GëExtChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

119 
HI_S32
 
HI_MPI_VPSS_SëExtChnCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, c⁄° 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

120 
HI_S32
 
HI_MPI_VPSS_GëExtChnCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

122 #ifde‡
__˝lu•lus


123 #i‡
__˝lu•lus


	@include/strlib.h

22 #i‚de‡
_STRLIB_H_


23 
	#_STRLIB_H_


	)

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

32 #ifde‡
__˝lu•lus


33 #i‡
__˝lu•lus


54 * 
°æwc
(c⁄° * 
s
);

68 * 
°rupc
(* 
s
);

80 * 
°rskp
(* 
s
);

96 * 
°r¸›
(* 
s
);

112 * 
°r°rù
(* 
s
) ;

116 #ifde‡
__˝lu•lus


117 #i‡
__˝lu•lus


	@sample/3516app/3516a.c

1 
	~<°dio.h
>

2 
	~<¨∑/öë.h
>

3 
	~<time.h
>

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~"ãachî.h
"

7 
	~<î∫o.h
>

8 
	~<sys/sockë.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<±hªad.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<sys/°©.h
>

14 
	~<¨∑/öë.h
>

15 
	~"ßm∂e_comm.h
"

16 
	~"m©h.h
"

17 
	~<ãrmios.h
>

20 
HI_S32
 
S«pC¡
;

22 c⁄° 
VPSS_GRP
 
	gVpssGΩ
 = 0;

23 c⁄° 
VPSS_CHN
 
	gVpssChn
 = 0;

24 c⁄° 
VPSS_GRP
 
	gSídVícGΩ
 = 0;

25 c⁄° 
VPSS_CHN
 
	gSídVícChn
 = 0;

27 c⁄° 
VENC_CHN
 
	gS«pVícChn
 = 1;

28 c⁄° 
VENC_GRP
 
	gS«pVícGΩ
 = 1;

30 c⁄° 
VI_DEV
 
	gViDev
 = 0;

31 c⁄° 
VI_CHN
 
	gViChn
 = 0;

32 c⁄° 
VI_CHN
 
	gExtChn
 = 
VIU_EXT_CHN_START
;

33 c⁄° 
VI_CHN
 
	gS«pExtChn
 = 
VIU_EXT_CHN_START
 + 1;

35 
	gX1
 = 0, 
	gY1
 = 10, 
	gX2
 = 72, 
	gY2
 = 100;

37 
	#WIDTH
 720

	)

38 
	#HEIGHT
 576

	)

40 
	gLPoi
 = 0, 
	gRPoi
 = 720;

41 
	gFLí
 = 0;

42 c⁄° 
	gYS≥ed
 = 0x10;

43 c⁄° 
	gZS≥ed
 = 0x20;

46 #¥agm®
∑ck
(1)

49 
	mhód
;

50 
	mYS≥ed
;

51 
	mZS≥ed
;

52 
	mYPoi
;

53 
	mZPoi
;

54 
	mèû
;

55 } 
	tPoiCålCode
;

59 
	mhód
;

60 
	mFLí
;

61 
	mèû
;

62 } 
	tFLíCålCode
;

63 #¥agm®
∑ck
()

65 
VIDEO_NORM_E
 
	ggs_íN‹m
 = 
VIDEO_ENCODING_MODE_NTSC
;

66 
PIC_SIZE_E
 
	gíSize
 = 
PIC_HD1080
;

67 
HI_BOOL
 
	gisS«p
 = 
HI_FALSE
, 
	gisSíd
 = 
HI_TRUE
;

68 
HI_BOOL
 
	gisThªadSt›
 = 
HI_FALSE
;

69 
HI_BOOL
 
	gisCh™gePic
 = 
HI_FALSE
;

70 
	g™ÆyzeSèπ
 = 1;

71 
ch™geC⁄fFûe
(*
KeyName
, 
VÆ
);

72 
gëLRPoi
();

73 
gëHPoi
();

74 
gëFLí
();

75 
size_t
 
wrôeTTY
(c⁄° *
buf
, 
cou¡
);

76 
SëP™TûtPoi
(
YS≥ed
, 
ZS≥ed
, 
YPoi
, 
ZPoi
);

77 
SëP™TûtFLí
(
FLí
);

79 
	$NumToC⁄éCode
(
num
)

81 
c⁄écode
 = 0;

82 
i
;

83 
i
 = 0; i < 4; i++)

84 
c⁄écode
 ^–()
num
 & ( 0xF << ( 
i
 * 4 ))) << ( i * 4 );

85  
c⁄écode
;

86 
	}
}

88 
	$CÆAngÀ
(
m
)

90 
x
 = ( 
X2
 - 
X1
 ) * (
m
 / 100.0) + X1;

92 i‡–
x
 > 360)

93  ()–
	`©™
–()–
x
 - 360 ) / ( 360.0 * 24.7 )) * 180.0 / 3.1416);

95  -()–
	`©™
–()–360 - 
x
 ) / ( 360.0 * 24.7 )) * 180.0 / 3.1416);

96 
	}
}

98 
	$GëProfûeSåög
(*
¥ofûe
, *
KeyName
, *
KeyVÆ
)

100 
buf
[100];

101 
key«me
[50];

102 
FILE
 *
Â
;

103 i‡((
Â
 = 
	`f›í
(
¥ofûe
, "r")Ë=
NULL
)

105 
	`≥º‹
("openÉrror");

108 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

109 !
	`„of
(
Â
Ë&& 
	`fgës
(
buf
, 100, fpË!
NULL
)

111 i‡(
	`°r°r
(
buf
, 
KeyName
Ë!
NULL
)

113 
buf
[
	`°æí
(buf) - 1] = '\0';

114 
	`°r˝y
(
KeyVÆ
, 
buf
 + 
	`°æí
(
KeyName
) + 1);

118 
	`f˛o£
(
Â
);

120 
	}
}

122 
	$gëCo‹d
()

124 
x1_°r
[4], 
x2_°r
[4], 
y1_°r
[4], 
y2_°r
[4];

126 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "X1", 
x1_°r
))

128 
X1
 = 0;

130 
X1
 = 
	`©oi
(
x1_°r
);

132 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "X2", 
x2_°r
))

134 
X2
 = 720;

136 
X2
 = 
	`©oi
(
x2_°r
);

138 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "Y1", 
y1_°r
))

140 
Y1
 = 100;

142 
Y1
 = 
	`©oi
(
y1_°r
);

144 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "Y2", 
y2_°r
))

146 
Y2
 = 300;

148 
Y2
 = 
	`©oi
(
y2_°r
);

150 
	}
}

152 
	$A«lyzePic
()

154 
HI_U32
 
s32Rë
;

155 
VIDEO_FRAME_INFO_S
 
FømeInfoA
;

156 
timevÆ
 
u°ime
;

157 
time_t
 
timï
;

158 
fd
;

159 
ãrmios
 
›ti⁄s
;

161 
	`gëCo‹d
();

162 
	`gëLRPoi
();

163 
	`gëFLíf‹mfûe
();

164 
Êag
 = 0;

166 
	`JSSë∑øm
(
X1
, 
Y1
, 
X2
, 
Y2
);

170 
™ÆyzeSèπ
)

177 *
pImg
;

178 
size
;

179 
°r1
[20] = {};

180 
num_°r
[4] = {};

181 
YPoi
 = 0;

182 * 
°r
;

183 
num
 =0;

184 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
ExtChn
, &
FømeInfoA
, -1);

185 i‡(
HI_SUCCESS
 !
s32Rë
)

187 
	`¥ötf
("HI_MPI_VI_GëFømeTimeOuàÁûeded wôhÉº codê%#x!\n", 
s32Rë
);

190 
size
 = 
FømeInfoA
.
°VFøme
.
u32Såide
[0] * FømeInfoA.°VFøme.
u32Height
;

191 
pImg
 = (*)
	`HI_MPI_SYS_Mm≠
(
FømeInfoA
.
°VFøme
.
u32PhyAddr
[0], 
size
);

193 
°r
 = 
	`JSMyTe°
(
pImg
, 
°r1
);

194 i‡(
°r
 !
NULL
)

196 
	`¥ötf
("%s\n", 
°r
);

201 
num
 = 
	`©oi
(
num_°r
);

202 i‡(
num
 > 0 )

205 
YPoi
 = ()
LPoi
 + (()
RPoi
 - ()LPoiË* (((
X2
 - 
X1
Ë* (
num
) / 100 + X1) / 720.0);

206 
	`SëP™TûtPoi
(
YS≥ed
, 
ZS≥ed
, 
YPoi
, 0);

207 i‡(
Êag
 == 1)

209 
	`SëP™TûtFLí
(
FLí
);

210 
Êag
 = 0;

212 
	`time
(&
timï
);

216 i‡(
	`time
(
NULL
Ë- 
timï
 > 5)

218 
	`SëP™TûtFLí
(0);

219 
	`SëP™TûtPoi
(0x99, 0x99, 0, 0);

220 
Êag
 = 1;

225 
	`HI_MPI_SYS_Munm≠
(
pImg
, 
size
);

226 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfoA
);

231 
	}
}

233 
	$ac˚±_thªad
()

235 
buff
[100];

236 
ªt
;

237 
ªadfd
, 
wrôefd
;

238 
°r
[25] = {};

239 i‡(
	`ac˚ss
("myfifo", 
F_OK
) == -1)

241 i‡((
	`mkfifo
("myfifo", 0666Ë< 0Ë&& (
î∫o
 !
EEXIST
))

243 
	`¥ötf
("Can Not create fifo file!\n");

244 
	`exô
(-1);

247 !
isThªadSt›
)

249 i‡((
ªadfd
 = 
	`›í
("myfifo", 
O_RDONLY
)) == -1)

251 
	`¥ötf
("open fifoÉrror!\n");

252 
	`exô
(1);

254 
	`mem£t
(
buff
, 0, (buff));

255 i‡((
ªt
 = 
	`ªad
(
ªadfd
, 
buff
, (buff))) > 0)

257 
	`˛o£
(
ªadfd
);

258 i‡(!
	`°rcmp
(
buff
, "snap"))

260 
isS«p
 = 
HI_TRUE
;

262 i‡((
wrôefd
 = 
	`›í
("myfifo", 
O_WRONLY
)) == -1)

264 
	`¥ötf
("open fifoÉrror!\n");

265 
	`exô
(1);

267 
	`•rötf
(
°r
, "¢≠_%d.jpg", 
S«pC¡
);

268 
	`wrôe
(
wrôefd
, 
°r
, 
	`°æí
(str) + 1);

269 
	`˛o£
(
wrôefd
);

273 i‡(!
	`°rcmp
(
buff
, "analyze"))

275 
™ÆyzeSèπ
 = !analyzeStart;

278 i‡(!
	`°rcmp
(
buff
, "setcoord"))

280 
	`gëCo‹d
();

282 
	`JSSë∑øm
(
X1
, 
Y1
, 
X2
, 
Y2
);

285 i‡(!
	`°rcmp
(
buff
, "setleftpoi"))

288 
À·poi
;

289 
À·poi
 = 
	`gëHPoi
();

290 
	`ch™geC⁄fFûe
("À·poi", 
À·poi
);

291 
LPoi
 = 
À·poi
;

294 i‡(!
	`°rcmp
(
buff
, "setrightpoi"))

297 
righçoi
;

298 
righçoi
 = 
	`gëHPoi
();

299 
	`ch™geC⁄fFûe
("righçoi", 
righçoi
);

300 
RPoi
 = 
righçoi
;

303 i‡(!
	`°rcmp
(
buff
, "saveflen"))

306 
FLígth
;

307 
FLígth
 = 
	`gëFLí
();

308 
	`ch™geC⁄fFûe
("Êí", 
FLígth
);

309 
FLí
 = 
FLígth
;

313 
	`˛o£
(
ªadfd
);

314 
	`u¶ìp
(50);

316 
	}
}

318 
HI_VOID
 
	$S«pPic
()

320 !
isThªadSt›
)

322 i‡(
isS«p
)

324 
isS«p
 = 
HI_FALSE
;

326 
HI_S32
 
s32Rë
 = 
	`SAMPLE_COMM_VENC_S«pPro˚ss
(
S«pVícChn
);

327 i‡(
HI_SUCCESS
 !
s32Rë
)

329 
	`¥ötf
("%s: s«∞¥o˚s†Áûed!\n", 
__FUNCTION__
);

333 
	`u¶ìp
(50);

335 
	}
}

337 
	$SídVideoSåóm
(
Sockfd
)

339 
HI_S32
 
s32Rë
;

340 
HI_S32
 
Vícfd
, 
maxfd
 = 0;

341 
PAYLOAD_TYPE_E
 
íPayLﬂd
 = 
PT_H264
;

342 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

343 
timevÆ
 
TimeoutVÆ
;

344 
fd_£t
 
ªad_fds
;

345 
c⁄nfd
;

346 
VENC_STREAM_S
 
°Såóm
;

347 
VENC_CHN_STAT_S
 
°Sèt
;

348 
HI_S32
 
i
;

349 
SídSockfd
;

351 
sockaddr_ö
 
SídSîvaddr
;

353 
SídSockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

354 i‡(
SídSockfd
 == -1)

356 
	`≥º‹
("send socketÉrror");

357 
	`exô
(0);

359 
	`mem£t
(&
SídSîvaddr
, 0, (SendServaddr));

360 
SídSîvaddr
.
sö_Ámûy
 = 
AF_INET
;

361 
SídSîvaddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.1.2.60");

362 
SídSîvaddr
.
sö_p‹t
 = 
	`ht⁄s
(6666);

364 !
isThªadSt›
)

367 i‡(!
isCh™gePic
)

369 
c⁄nfd
 = 
	`ac˚±
(
SídSockfd
, 
NULL
, NULL);

370 
	`¥ötf
("connect!\n");

372 
isCh™gePic
 = 
HI_FALSE
;

374 
s32Rë
 = 
	`SAMPLE_COMM_VENC_Sèπ
(
SídVícGΩ
, 
SídVícChn
, 
íPayLﬂd
,

375 
gs_íN‹m
, 
íSize
, 
íRcMode
);

376 i‡(
HI_SUCCESS
 !
s32Rë
)

378 
	`¥ötf
("SAMPLE_COMM_VENC_Sèπ faûed wôhÉº codê%#x\n", 
s32Rë
);

381 
s32Rë
 = 
	`SAMPLE_COMM_VENC_BödVpss
(
SídVícGΩ
, 
VpssGΩ
, 
VpssChn
);

382 i‡(
HI_SUCCESS
 !
s32Rë
)

384 
	`¥ötf
("SAMPLE_COMM_VENC_BödVps†Áûed wôhÉº codê%#x\n", 
s32Rë
);

387 
Vícfd
 = 
	`HI_MPI_VENC_GëFd
(
SídVícChn
);

388 i‡(
Vícfd
 < 0)

390 
	`¥ötf
("HI_MPI_VENC_GëFd faûd wôh%#x!\n", 
Vícfd
);

391  
HI_FAILURE
;

393 
isSíd
)

396 
	`FD_ZERO
(&
ªad_fds
);

397 
	`FD_SET
(
Vícfd
, &
ªad_fds
);

398 
TimeoutVÆ
.
tv_£c
 = 20000;

399 
TimeoutVÆ
.
tv_u£c
 = 0;

400 
s32Rë
 = 
	`£À˘
(
Vícfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

402 i‡(
s32Rë
 < 0)

404 
	`≥º‹
("select failed!\n");

407 i‡(
s32Rë
 == 0)

409 
	`¥ötf
("get sendvenc streamÅime out,exitÅhread\n");

414 i‡(
	`FD_ISSET
(
Vícfd
, &
ªad_fds
))

416 
	`mem£t
(&
°Såóm
, 0, (stStream));

417 
s32Rë
 = 
	`HI_MPI_VENC_Quîy
(
SídVícChn
, &
°Sèt
);

418 i‡(
HI_SUCCESS
 !
s32Rë
)

420 
	`¥ötf
("HI_MPI_VENC_Quîy faûed wôhÉº codê%#x!\n", 
s32Rë
);

423 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*)
	`mÆloc
((VENC_PACK_SË* 
°Sèt
.
u32CurPacks
);

424 i‡(
NULL
 =
°Såóm
.
p°Pack
)

426 
	`¥ötf
("malloc streamÖack failed!\n");

429 
°Såóm
.
u32PackCou¡
 = 
°Sèt
.
u32CurPacks
;

430 
s32Rë
 = 
	`HI_MPI_VENC_GëSåóm
(
SídVícChn
, &
°Såóm
, 
HI_TRUE
);

431 i‡(
HI_SUCCESS
 !
s32Rë
)

433 
	`‰ì
(
°Såóm
.
p°Pack
);

434 
°Såóm
.
p°Pack
 = 
NULL
;

435 
	`¥ötf
("HI_MPI_VENC_GëSåóm faûed wôh %#x!\n", 
s32Rë
);

438 
i
 = 0; i < 
°Såóm
.
u32PackCou¡
; i++)

461 
	`£ndto
(
SídSockfd
, 
°Såóm
.
p°Pack
[
i
].
pu8Addr
 + stSåóm.p°Pack[i].
u32Off£t
,

462 
°Såóm
.
p°Pack
[
i
].
u32Lí
 - stSåóm.p°Pack[i].
u32Off£t
, 0,

463 (
sockaddr
*)&
SídSîvaddr
, (SendServaddr));

465 
s32Rë
 = 
	`HI_MPI_VENC_Rñó£Såóm
(
SídVícChn
, &
°Såóm
);

466 i‡(
HI_SUCCESS
 !
s32Rë
)

468 
	`‰ì
(
°Såóm
.
p°Pack
);

469 
°Såóm
.
p°Pack
 = 
NULL
;

472 
	`‰ì
(
°Såóm
.
p°Pack
);

473 
°Såóm
.
p°Pack
 = 
NULL
;

477 
	`SAMPLE_COMM_VENC_St›GëSåóm
();

478 
	`SAMPLE_COMM_VENC_UnBödVpss
(
SídVícGΩ
, 
VpssGΩ
, 
VpssChn
);

479 
	`SAMPLE_COMM_VENC_St›
–
SídVícChn
);

480 
	`u¶ìp
(100);

482 
	}
}

485 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

487 
PAYLOAD_TYPE_E
 
íPayLﬂd
 = 
PT_H264
;

488 
VB_CONF_S
 
°VbC⁄f
;

489 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
;

490 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

491 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

492 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

493 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

494 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

495 
HI_S32
 
s32ChnNum
 = 1;

496 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

497 
HI_U32
 
u32BlkSize
;

498 
SIZE_S
 
°Size
;

499 
sockfd
, 
SídSockfd
;

500 
sockaddr_ö
 
SídSîvaddr
;

501 
±hªad_t
 
£ndvideŸid
, 
A«lyzePi˘id
, 
¢≠tid
, 
ac˚±tid
;

502 
ªt
;

503 
MPP_CHN_S
 
°SrcChn
;

504 
MPP_CHN_S
 
°De°Chn
;

507 
	`mem£t
(&
°VbC⁄f
, 0 , (
VB_CONF_S
));

509 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

511 
	`SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
);

513 
u32BlkSize
 = 
	`SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,

514 
íSize
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

515 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

516 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 12;

524 
	`¥ötf
("-----------------------V0.02-----------------------\n");

525 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

526 i‡(
HI_SUCCESS
 !
s32Rë
)

528 
	`¥ötf
("sy°em inô faûed wôhÉº codê%#x!\n", 
s32Rë
 );

530 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

532 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

533 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

534 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

538 
s32Rë
 = 
	`SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

539 i‡(
HI_SUCCESS
 !
s32Rë
)

541 
	`¥ötf
("°¨àvòÁûed wôhÉº codê%#x!\n", 
s32Rë
);

542 
END_1
;

546 
°ExtChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

547 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

548 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 
WIDTH
;

549 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 
HEIGHT
;

550 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

551 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

552 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

553 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
ExtChn
, &
°ExtChnAâr
);

554 i‡(
HI_SUCCESS
 !
s32Rë
)

556 
	`¥ötf
("HI_MPI_VI_SëExtChnAâ∏Áûed wôhÉº codê%#x\n", 
s32Rë
);

559 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(1, 5);

560 i‡(
HI_SUCCESS
 !
s32Rë
)

562 
	`¥ötf
("HI_MPI_VI_SëFømeDïth faûed wôhÉº codê%#x\n", 
s32Rë
);

565 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
ExtChn
);

566 i‡(
HI_SUCCESS
 !
s32Rë
)

568 
	`¥ötf
("HI_MPI_VI_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

572 
°ExtChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

573 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

574 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 
WIDTH
;

575 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 
HEIGHT
;

576 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

577 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

578 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

579 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
S«pExtChn
, &
°ExtChnAâr
);

580 i‡(
HI_SUCCESS
 !
s32Rë
)

582 
	`¥ötf
("HI_MPI_VI_SëExtChnAâ∏Áûed wôhÉº codê%#x\n", 
s32Rë
);

586 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
S«pExtChn
);

587 i‡(
HI_SUCCESS
 !
s32Rë
)

589 
	`¥ötf
("HI_MPI_VI_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

595 
s32Rë
 = 
	`SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
, &
°Size
);

596 i‡(
HI_SUCCESS
 !
s32Rë
)

598 
	`¥ötf
("SAMPLE_COMM_SYS_GëPicSizêÁûed wôhÉº codê%#x!\n", 
s32Rë
);

599 
END_2
;

603 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

604 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

605 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

606 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

607 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

608 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

609 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

610 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

611 
s32Rë
 = 
	`SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

612 i‡(
HI_SUCCESS
 !
s32Rë
)

614 
	`¥ötf
("SAMPLE_COMM_VPSS_SèπGrou∞Áûed wôhÉº codê%#x!\n", 
s32Rë
);

615 
END_3
;

619 
s32Rë
 = 
	`SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

620 i‡(
HI_SUCCESS
 !
s32Rë
)

622 
	`¥ötf
("SAMPLE_COMM_vi_BödVps†Áûed wôhÉº codê%#x\n", 
s32Rë
);

623 
END_4
;

627 
	`mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

628 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

629 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

631 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

632 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

633 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

634 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

635 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

636 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

637 
s32Rë
 = 
	`SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

638 i‡(
HI_SUCCESS
 !
s32Rë
)

640 
	`¥ötf
("SAMPLE_COMM_VPSS_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

641 
END_5
;

645 
s32Rë
 = 
	`SAMPLE_COMM_VENC_BödVpss
(
S«pVícGΩ
, 
VpssGΩ
, 
VpssChn
);

646 i‡(
HI_SUCCESS
 !
s32Rë
)

648 
	`¥ötf
("SAMPLE_COMM_VENC_BödVps†Áûed wôhÉº codê%#x\n", 
s32Rë
);

650 
gs_íN‹m
 = 
PIC_D1
;

651 
s32Rë
 = 
	`SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
, &
°Size
);

652 i‡(
HI_SUCCESS
 !
s32Rë
)

654 
	`¥ötf
("SAMPLE_COMM_SYS_GëPicSizêÁûed wôhÉº codê%#x\n", 
s32Rë
);

660 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

661 
°SrcChn
.
s32DevId
 = 0;

662 
°SrcChn
.
s32ChnId
 = 
S«pExtChn
;

664 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

665 
°De°Chn
.
s32DevId
 = 0;

666 
°De°Chn
.
s32ChnId
 = 
S«pVícChn
;

668 
s32Rë
 = 
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

669 i‡(
s32Rë
 !
HI_SUCCESS
)

671 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

675 
°Size
.
u32Width
 = 720;

676 
°Size
.
u32Height
 = 576;

678 
s32Rë
 = 
	`SAMPLE_COMM_VENC_S«pSèπ
(
S«pVícChn
, &
°Size
);

679 i‡(
HI_SUCCESS
 !
s32Rë
)

681 
	`¥ötf
("SAMPLE_COMM_VENC_S«pSèπ faûed wôhÉº codê%#x\n", 
s32Rë
);

688 
SídSockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

689 i‡(
SídSockfd
 == -1)

691 
	`≥º‹
("send socketÉrror");

692 
	`exô
(0);

694 
	`mem£t
(&
SídSîvaddr
, 0, (SendServaddr));

695 
SídSîvaddr
.
sö_Ámûy
 = 
AF_INET
;

697 
SídSîvaddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.1.2.60");

698 
SídSîvaddr
.
sö_p‹t
 = 
	`ht⁄s
(6666);

701 i‡(
	`böd
(
SídSockfd
, (
sockaddr
 *)&
SídSîvaddr
, (SendServaddr)) == -1)

703 
	`≥º‹
("send bindÉrror");

704 
	`exô
(0);

706 i‡(
	`li°í
(
SídSockfd
, 10) == -1)

708 
	`≥º‹
("sendÜistenÉrror");

709 
	`exô
(0);

714 
ªt
 = 
	`±hªad_¸óã
(&
£ndvideŸid
, 0, (
HI_VOID
*)
SídVideoSåóm
, 0);

715 i‡(
ªt
 != 0)

717 
	`≥º‹
("create SendVideoStreamÉrror");

718 
	`exô
(0);

720 
	`¥ötf
("create SendVideoStreamÅhread successfully!\n");

723 
ªt
 = 
	`±hªad_¸óã
(&
A«lyzePi˘id
, 0, (
HI_VOID
*)
A«lyzePic
, 
NULL
);

724 i‡(
ªt
 != 0)

726 
	`≥º‹
("create AnalyzePicÉrror");

727 
	`exô
(0);

729 
ªt
 = 
	`±hªad_¸óã
(&
¢≠tid
, 0, (
HI_VOID
*)
S«pPic
, 
NULL
);

730 i‡(
ªt
 != 0)

732 
	`≥º‹
("create SnapPicÉrror");

733 
	`exô
(0);

735 
ªt
 = 
	`±hªad_¸óã
(&
ac˚±tid
, 0, (
HI_VOID
*)
ac˚±_thªad
, 
NULL
);

736 i‡(
ªt
 != 0)

738 
	`≥º‹
("createáccept_threadÉrror");

739 
	`exô
(0);

743 
	`¶ìp
(10);

746 
END_5
:

747 
	`SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

748 
END_4
:

749 
	`SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

750 
END_3
:

751 
	`SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

752 
END_2
:

753 
	`SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

754 
END_1
:

755 
	`SAMPLE_COMM_SYS_Exô
();

757 
	`˛o£
(
SídSockfd
);

758 
	`±hªad_joö
(
£ndvideŸid
, 
NULL
);

760 
	}
}

762 
	$ch™geC⁄fFûe
(*
KeyName
, 
VÆ
)

764 
FILE
 *
Â
;

765 
°r
[20][20] = {};

766 
buf
[50] = {};

767 
VÆ_°r
[10] = {};

768 *
p
;

769 
i
, 
k
;

770 
ishad
 = 0;

771 i‡((
Â
 = 
	`f›í
("/home/tmp.c⁄f", "r")Ë=
NULL
)

773 
	`≥º‹
("openÉrror");

776 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

777 
i
 = 0;

778 !
	`„of
(
Â
Ë&& 
	`fgës
(
buf
, 50, fpË!
NULL
)

780 i‡((
p
 = 
	`°r°r
(
buf
, 
KeyName
)Ë!
NULL
)

782 
	`•rötf
(
VÆ_°r
, "%d\n\0", 
VÆ
);

783 
	`°r˝y
(
p
 + 
	`°æí
(
KeyName
Ë+ 1, 
VÆ_°r
);

784 
ishad
 = 1;

786 
	`°r˝y
(
°r
[
i
], 
buf
);

787 
i
++;

789 
	`f˛o£
(
Â
);

791 i‡((
Â
 = 
	`f›í
("/home/tmp.c⁄f", "w")Ë=
NULL
)

793 
	`≥º‹
("openÉrror");

796 
k
 = 0; k < 
i
; k++)

798 
	`Ârötf
(
Â
, "%s", 
°r
[
k
]);

800 i‡(
ishad
 == 0)

802 
	`Ârötf
(
Â
, "%s=%d\n", 
KeyName
, 
VÆ
);

804 
	`f˛o£
(
Â
);

805 
	}
}

808 
	$gëHPoi
()

810 
™swîcode
[11] = {};

811 
˘æcode
[] = {0x87, 0x09, 0x06, 0x12, 0xFF};

812 
poi
 = 0;

813 
ªt
;

814 
fd
;

815 
i
;

816 
Êag
;

817 
ãrmios
 
O±
;

818 
fd
 = 
	`›í
("/dev/âyS000", 
O_RDWR
 | 
O_NOCTTY
);

819 i‡(
fd
 < 0)

821 
	`Ârötf
(
°dout
, "openÅtyÉrror!\n");

824 
	`tcgë©å
(
fd
, &
O±
);

825 
O±
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

826 
O±
.
c_oÊag
 &~
OPOST
;

827 
O±
.
c_iÊag
 &~(
INLCR
 | 
ICRNL
 | 
IGNCR
);

828 
	`cf£ti•ìd
(&
O±
, 
B9600
);

829 
	`cf£to•ìd
(&
O±
, 
B9600
);

830 
	`tc£èâr
(
fd
, 
TCSANOW
, &
O±
);

831 
	`tcÊush
(
fd
, 
TCIFLUSH
);

832 
	`tcÊush
(
fd
, 
TCOFLUSH
);

833 
	`wrôe
(
fd
, 
˘æcode
, (ctrlcode));

834 
	`u¶ìp
(100);

835 (
ªt
 = 
	`ªad
(
fd
, 
™swîcode
, (answercode))) < 0)

837 i‡(
ªt
 < 0)

838 
	`Ârötf
(
°dout
, "readÉrror");

841 
i
 = 0; i < 11; i++)

843 
	`¥ötf
("%x\n", 
™swîcode
[
i
]);

846 
i
 = 2; i <= 5; i++)

848 
poi
 |
™swîcode
[
i
] << (4 * (5 - i));

850 
	`¥ötf
("%x\n", 
poi
);

851 
	`˛o£
(
fd
);

852  
poi
;

853 
	}
}

854 
	$gëLRPoi
()

856 
LPoi_°r
[10], 
RPoi_°r
[10];

858 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "À·poi", 
LPoi_°r
))

860 
LPoi
 = 0;

862 
LPoi
 = 
	`©oi
(
LPoi_°r
);

864 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "righçoi", 
RPoi_°r
))

866 
RPoi
 = 0;

868 
RPoi
 = 
	`©oi
(
RPoi_°r
);

870 
	}
}

872 
	$gëFLíf‹mfûe
()

874 
FLí_°r
[10] = {};

875 i‡(-1 =
	`GëProfûeSåög
("/home/tmp.c⁄f", "Êí", 
FLí_°r
))

877 
FLí
 = 0;

879 
FLí
 = 
	`©oi
(
FLí_°r
);

880 
	}
}

883 
	$gëFLí
()

885 
™swîcode
[11] = {};

886 
˘æcode
[] = {0x87, 0x09, 0x04, 0x47, 0xFF};

887 
poi
 = 0;

888 
ªt
;

889 
fd
;

890 
i
;

891 
ãrmios
 
O±
;

892 
fd
 = 
	`›í
("/dev/âyS000", 
O_RDWR
 | 
O_NOCTTY
);

893 i‡(
fd
 < 0)

895 
	`Ârötf
(
°dout
, "openÅtyÉrror!\n");

898 
	`tcgë©å
(
fd
, &
O±
);

899 
O±
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

900 
O±
.
c_oÊag
 &~
OPOST
;

901 
O±
.
c_iÊag
 &~(
INLCR
 | 
ICRNL
 | 
IGNCR
);

902 
	`cf£ti•ìd
(&
O±
, 
B9600
);

903 
	`cf£to•ìd
(&
O±
, 
B9600
);

904 
	`tc£èâr
(
fd
, 
TCSANOW
, &
O±
);

905 
	`tcÊush
(
fd
, 
TCIFLUSH
);

906 
	`tcÊush
(
fd
, 
TCOFLUSH
);

907 
	`wrôe
(
fd
, 
˘æcode
, (ctrlcode));

908 
	`u¶ìp
(100);

909 (
ªt
 = 
	`ªad
(
fd
, 
™swîcode
, (answercode))) < 0)

911 i‡(
ªt
 < 0)

912 
	`Ârötf
(
°dout
, "readÉrror");

914 
i
 = 2; i <= 5; i++)

916 
poi
 |
™swîcode
[
i
] << (4 * (5 - i));

918 
	`¥ötf
("FLí:%x\n", 
poi
);

919 
	`˛o£
(
fd
);

920  
poi
;

921 
	}
}

924 
size_t
 
	$wrôeTTY
(c⁄° *
buf
, 
cou¡
)

926 
fd
;

927 
ãrmios
 
›ti⁄s
;

928 
size_t
 
ªt
 = 0;

929 
fd
 = 
	`›í
("/dev/âyS000", 
O_RDWR
 | 
O_NOCTTY
 | 
O_NDELAY
);

930 i‡(
fd
 < 0)

932 
	`≥º‹
("openÅtyÉrror");

935 
	`tcgë©å
(
fd
, &
›ti⁄s
);

936 
›ti⁄s
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
);

937 
›ti⁄s
.
c_oÊag
 &~
OPOST
;

938 
	`cf£to•ìd
(&
›ti⁄s
, 
B9600
);

939 
	`cf£ti•ìd
(&
›ti⁄s
, 
B9600
);

940 
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
);

941 
	`tcÊush
(
fd
, 
TCOFLUSH
);

942 
	`tcÊush
(
fd
, 
TCIFLUSH
);

943 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
cou¡
);

944 
	`˛o£
(
fd
);

945  
ªt
;

946 
	}
}

947 
	$SëP™TûtPoi
(
YS≥ed
, 
ZS≥ed
,

948 
YPoi
, 
ZPoi
)

950 
PoiCålCode
 
c
;

951 
ªt
;

952 
	`mem£t
(&
c
, 0, (c));

953 
c
.
hód
 = 
	`ht⁄l
(0x87010602);

954 
c
.
YS≥ed
 = YSpeed;

955 
c
.
ZS≥ed
 = ZSpeed;

956 
c
.
YPoi
 = 
	`ht⁄l
(
	`NumToC⁄éCode
(YPoi));

957 
c
.
ZPoi
 = 
	`ht⁄l
(
	`NumToC⁄éCode
(ZPoi));

958 
c
.
èû
 = 0xFF;

959 
ªt
 = 
	`wrôeTTY
(&
c
, (c));

960  
ªt
;

961 
	}
}

963 
	$SëP™TûtFLí
(
FLí
)

965 
FLíCålCode
 
f
;

966 
ªt
;

967 
f
.
hód
 = 
	`ht⁄l
(0x87010447);

968 
f
.
FLí
 = 
	`ht⁄l
(
	`NumToC⁄éCode
(FLen));

969 
f
.
èû
 = 0xFF;

970 
ªt
 = 
	`wrôeTTY
(&
f
, (f));

971  
ªt
;

972 
	}
}

	@sample/3516app/ive_detect.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"ßm∂e_comm.h
"

4 
	~"hi_comm_ive.h
"

5 
	~"hi_ive.h
"

6 
	~"mpi_ive.h
"

9 
	#WIDTH
 720

	)

10 
	#HEIGHT
 576

	)

12 
PIC_SIZE_E
 
	gíSize
 = 
PIC_HD1080
;

13 c⁄° 
VI_CHN
 
	gExtChn
 = 
VIU_EXT_CHN_START
;

14 c⁄° 
VI_CHN
 
	gViChn
 = 0;

15 
VIDEO_NORM_E
 
	ggs_íN‹m
 = 
VIDEO_ENCODING_MODE_NTSC
;

17 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

19 
VB_CONF_S
 
°VbC⁄f
;

20 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

21 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
;

22 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

23 
VB_BLK
 
hBlock
;

24 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

25 
HI_S32
 
s32ChnNum
 = 1;

26 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

27 
HI_U32
 
u32BlkSize
;

28 
SIZE_S
 
°Size
;

29 
VIDEO_FRAME_INFO_S
 
FømeInfo
;

30 
IVE_HANDLE
 
IveH™dÀ
;

31 
IVE_SRC_IMAGE_S
 
°Src
;

32 
IVE_DST_IMAGE_S
 
°D°
;

33 
IVE_CSC_CTRL_S
 
°CscCål
;

34 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

35 
HI_BOOL
 
bFöish
;

36 
FILE
 *
Â
,*
Â2
;

38 
k
=1;

40 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

41 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

42 
	`SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
);

43 
u32BlkSize
 = 
	`SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,

44 
íSize
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

45 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

46 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 12;

48 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

49 i‡(
HI_SUCCESS
 !
s32Rë
)

51 
	`¥ötf
("sy°em inô faûed wôhÉº codê%#x!\n", 
s32Rë
 );

54 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

55 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

56 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

57 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

59 
s32Rë
 = 
	`SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

60 i‡(
HI_SUCCESS
 !
s32Rë
)

62 
	`¥ötf
("°¨àvòÁûed wôhÉº codê%#x!\n", 
s32Rë
);

67 
°ExtChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

68 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

69 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 
WIDTH
;

70 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 
HEIGHT
;

71 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

72 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

73 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

74 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
ExtChn
, &
°ExtChnAâr
);

75 i‡(
HI_SUCCESS
 !
s32Rë
)

77 
	`¥ötf
("HI_MPI_VI_SëExtChnAâ∏Áûed wôhÉº codê%#x\n", 
s32Rë
);

80 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(
ExtChn
, 5);

81 i‡(
HI_SUCCESS
 !
s32Rë
)

83 
	`¥ötf
("HI_MPI_VI_SëFømeDïth faûed wôhÉº codê%#x\n", 
s32Rë
);

86 
°Src
.
íTy≥
 = 
IVE_IMAGE_TYPE_YUV420SP
;

87 
°D°
.
íTy≥
 = 
IVE_IMAGE_TYPE_U8C3_PLANAR
;

89 
°CscCål
.
íMode
 = 
IVE_CSC_MODE_PIC_BT709_YUV2RGB
;

91 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
ExtChn
);

92 i‡(
HI_SUCCESS
 !
s32Rë
)

94 
	`¥ötf
("HI_MPI_VI_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

98 
	`¥ötf
("begin\n");

99 
k
--)

101 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
ExtChn
, &
FømeInfo
, -1);

102 if(
HI_SUCCESS
 !
s32Rë
)

104 
	`¥ötf
("HI_MPI_VI_GëFømêÁûed wôhÉº codê%#x!\n",
s32Rë
);

106 
	`¥ötf
("get frame!\n");

107 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfo
);

109 
u32BlkSize
 = 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 3;

110 
hPoﬁ
 = 
	`HI_MPI_VB_Cª©ePoﬁ
(
u32BlkSize
, 2, 
NULL
);

111 if(
hPoﬁ
 =
VB_INVALID_POOLID
)

113 
	`¥ötf
("HI_MPI_VB_CreatePool failed !\n");

115 
hBlock
 = 
	`HI_MPI_VB_GëBlock
(
hPoﬁ
, 
u32BlkSize
, 
NULL
);

116 if(
hBlock
 =
VB_INVALID_HANDLE
)

118 
	`¥ötf
("HI_MPI_VB_GetBlock failed !\n");

120 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
°D°
.
u32PhyAddr
[0],(**Ë&°D°.
pu8VúAddr
[0], "u£r", 
HI_NULL
, 
u32BlkSize
);

121 
	`HI_MPI_SYS_MmzFlushCache
(
°D°
.
u32PhyAddr
[0], (*)°D°.
pu8VúAddr
[0], 
u32BlkSize
);

122 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

124 
°D°
.
u32PhyAddr
[0] = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(
hBlock
);

126 
°D°
.
u32PhyAddr
[1] = stD°.u32PhyAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

127 
°D°
.
u32PhyAddr
[2] = stD°.u32PhyAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 2;

129 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(°D°.
u32PhyAddr
[0], 
u32BlkSize
);

130 
°D°
.
pu8VúAddr
[1] = stD°.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

131 
°D°
.
pu8VúAddr
[2] = stD°.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 2;

133 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

134 
°D°
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

135 
°D°
.
u16Såide
[2] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

137 
°D°
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

138 
°D°
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

140 
°D°
.
u32PhyAddr
[0] = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(
hBlock
);

141 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(°D°.
u32PhyAddr
[0], 
u32BlkSize
);

142 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0] * 3;

143 
°D°
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

144 
°D°
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

147 
°Src
.
u32PhyAddr
[0] = 
FømeInfo
.
°VFøme
.u32PhyAddr[0];

148 
°Src
.
u32PhyAddr
[1] = 
FømeInfo
.
°VFøme
.u32PhyAddr[1];

153 
°Src
.
pu8VúAddr
[0] = (
HI_U8
*)
	`HI_MPI_SYS_Mm≠
(
FømeInfo
.
°VFøme
.
u32PhyAddr
[0],
u32BlkSize
 / 2);

154 
°Src
.
pu8VúAddr
[1] = stSrc.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

157 
	`¥ötf
("pVúAddr[0]:%x\≈VúAddr[1]:%x\≈VúAddr[2]:%x\n",
°D°
.
pu8VúAddr
[0],stDst.pu8VirAddr[1],stDst.pu8VirAddr[2]);

159 
°Src
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

160 
°Src
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

162 
°Src
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

163 
°Src
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

166 
s32Rë
 = 
	`HI_MPI_IVE_CSC
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°CscCål
, 
bIn°™t
);

167 if(
s32Rë
 !
HI_SUCCESS
)

169 
	`¥ötf
("HI_MPI_IVE_CSC faûed wôhÉº‹ codê%#x\n",
s32Rë
);

172 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
HI_TRUE
);

173 if(
s32Rë
 !
HI_SUCCESS
)

175 
	`¥ötf
("HI_MPI_IVE_Quîy faûed wôhÉº‹ codê%#x\n",
s32Rë
);

179 
Â
 = 
	`f›í
("image.rgb","wb+");

180 
	`fwrôe
(
°D°
.
pu8VúAddr
[0], 
WIDTH
 * 
HEIGHT
 * 3, 1, 
Â
);

181 
	`f˛o£
(
Â
);

182 
Â2
 = 
	`f›í
("image.yuv","wb+");

183 
	`fwrôe
(
°Src
.
pu8VúAddr
[0], 
WIDTH
 * 
HEIGHT
 * 3 / 2, 1, 
Â2
);

184 
	`f˛o£
(
Â2
);

186 
	`¥ötf
("u16Width:%d,u16Height:%d\n",
°D°
.
u16Width
,°D°.
u16Height
);

188 
	`HI_MPI_SYS_Munm≠
(
°D°
.
pu8VúAddr
[0], 
u32BlkSize
);

189 
	`HI_MPI_VB_Rñó£Block
(
hBlock
);

190 if(
hPoﬁ
 !
VB_INVALID_POOLID
)

192 
	`HI_MPI_VB_De°royPoﬁ
(
hPoﬁ
);

194 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfo
);

196 
	}
}

	@sample/3516app/ive_test.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"ßm∂e_comm.h
"

4 
	~"hi_comm_ive.h
"

5 
	~"hi_ive.h
"

6 
	~"mpi_ive.h
"

9 
	#WIDTH
 720

	)

10 
	#HEIGHT
 576

	)

12 
PIC_SIZE_E
 
	gíSize
 = 
PIC_HD1080
;

13 c⁄° 
VI_CHN
 
	gExtChn
 = 
VIU_EXT_CHN_START
;

14 c⁄° 
VI_CHN
 
	gViChn
 = 0;

15 
VIDEO_NORM_E
 
	ggs_íN‹m
 = 
VIDEO_ENCODING_MODE_NTSC
;

17 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

19 
VB_CONF_S
 
°VbC⁄f
;

20 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

21 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
;

22 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

23 
VB_BLK
 
hBlock
;

24 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

25 
HI_S32
 
s32ChnNum
 = 1;

26 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

27 
HI_U32
 
u32BlkSize
;

28 
SIZE_S
 
°Size
;

29 
VIDEO_FRAME_INFO_S
 
FømeInfo
;

30 
IVE_HANDLE
 
IveH™dÀ
;

31 
IVE_SRC_IMAGE_S
 
°Src
;

32 
IVE_DST_IMAGE_S
 
°D°
;

33 
IVE_CSC_CTRL_S
 
°CscCål
;

34 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

35 
HI_BOOL
 
bFöish
;

36 
FILE
 *
Â
;

37 
k
 = 1;

39 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

40 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

41 
	`SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
);

42 
u32BlkSize
 = 
	`SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,

43 
íSize
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

44 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

45 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 12;

47 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

48 i‡(
HI_SUCCESS
 !
s32Rë
)

50 
	`¥ötf
("sy°em inô faûed wôhÉº codê%#x!\n", 
s32Rë
 );

53 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

54 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

55 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

56 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

58 
s32Rë
 = 
	`SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

59 i‡(
HI_SUCCESS
 !
s32Rë
)

61 
	`¥ötf
("°¨àvòÁûed wôhÉº codê%#x!\n", 
s32Rë
);

64 
°ExtChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

65 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

66 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 
WIDTH
;

67 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 
HEIGHT
;

68 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

69 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

70 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

71 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
ExtChn
, &
°ExtChnAâr
);

72 i‡(
HI_SUCCESS
 !
s32Rë
)

74 
	`¥ötf
("HI_MPI_VI_SëExtChnAâ∏Áûed wôhÉº codê%#x\n", 
s32Rë
);

77 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(
ExtChn
, 5);

78 i‡(
HI_SUCCESS
 !
s32Rë
)

80 
	`¥ötf
("HI_MPI_VI_SëFømeDïth faûed wôhÉº codê%#x\n", 
s32Rë
);

83 
°Src
.
íTy≥
 = 
IVE_IMAGE_TYPE_YUV420SP
;

84 
°D°
.
íTy≥
 = 
IVE_IMAGE_TYPE_U8C3_PLANAR
;

85 
°CscCål
.
íMode
 = 
IVE_CSC_MODE_VIDEO_BT601_YUV2RGB
;

87 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
ExtChn
);

88 i‡(
HI_SUCCESS
 !
s32Rë
)

90 
	`¥ötf
("HI_MPI_VI_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

94 
k
)

96 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
ExtChn
, &
FømeInfo
, -1);

97 if(
HI_SUCCESS
 !
s32Rë
)

99 
	`¥ötf
("HI_MPI_VI_GëFømêÁûed wôhÉº codê%#x!\n",
s32Rë
);

101 
	`¥ötf
("get frame!\n");

102 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfo
);

104 
u32BlkSize
 = 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 3;

105 
hPoﬁ
 = 
	`HI_MPI_VB_Cª©ePoﬁ
(
u32BlkSize
, 2, 
NULL
);

106 if(
hPoﬁ
 =
VB_INVALID_POOLID
)

108 
	`¥ötf
("HI_MPI_VB_CreatePool failed !\n");

110 
hBlock
 = 
	`HI_MPI_VB_GëBlock
(
hPoﬁ
, 
u32BlkSize
, 
NULL
);

111 if(
hBlock
 =
VB_INVALID_HANDLE
)

113 
	`¥ötf
("HI_MPI_VB_GetBlock failed !\n");

115 
°D°
.
u32PhyAddr
[0] = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(
hBlock
);

116 
°D°
.
u32PhyAddr
[1] = stD°.u32PhyAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

117 
°D°
.
u32PhyAddr
[2] = stD°.u32PhyAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 2;

119 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(°D°.
u32PhyAddr
[0], 
u32BlkSize
);

120 
°D°
.
pu8VúAddr
[1] = stD°.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

121 
°D°
.
pu8VúAddr
[2] = stD°.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 2;

123 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

124 
°D°
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

125 
°D°
.
u16Såide
[2] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

127 
°D°
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

128 
°D°
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

130 
°Src
.
u32PhyAddr
[0] = 
FømeInfo
.
°VFøme
.u32PhyAddr[0];

131 
°Src
.
u32PhyAddr
[1] = 
FømeInfo
.
°VFøme
.u32PhyAddr[1];

133 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(
°Src
.
u32PhyAddr
[0], 
u32BlkSize
);

134 
°Src
.
pu8VúAddr
[1] = (
HI_U8
*)
FømeInfo
.
°VFøme
.
pVúAddr
[1];

136 
°Src
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

137 
°Src
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

139 
°Src
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

140 
°Src
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

143 
s32Rë
 = 
	`HI_MPI_IVE_CSC
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°CscCål
, 
bIn°™t
);

144 if(
s32Rë
 !
HI_SUCCESS
)

146 
	`¥ötf
("HI_MPI_IVE_CSC faûed wôhÉº‹ codê%#x\n",
s32Rë
);

149 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
HI_TRUE
);

150 if(
s32Rë
 !
HI_SUCCESS
)

152 
	`¥ötf
("HI_MPI_IVE_Quîy faûed wôhÉº‹ codê%#x\n",
s32Rë
);

156 
Â
 = 
	`f›í
("save.yuv","wb");

157 
	`fwrôe
(
°Src
.
pu8VúAddr
[0], 720 * 576 * 3 , 1, 
Â
);

158 
	`f˛o£
(
Â
);

160 
	`HI_MPI_SYS_Munm≠
(
°D°
.
pu8VúAddr
[0], 
u32BlkSize
);

161 
	`HI_MPI_VB_Rñó£Block
(
hBlock
);

162 if(
hPoﬁ
 !
VB_INVALID_POOLID
)

164 
	`HI_MPI_VB_De°royPoﬁ
(
hPoﬁ
);

166 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfo
);

169 
	}
}

	@sample/audio/sample_audio.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~<±hªad.h
>

17 
	~<î∫o.h
>

18 
	~<sig«l.h
>

20 
	~"ßm∂e_comm.h
"

21 
	~"acodec.h
"

22 
	~"év320aic31.h
"

25 
PAYLOAD_TYPE_E
 
	ggs_íPaylﬂdTy≥
 = 
PT_ADPCMA
;

29 
HI_BOOL
 
	ggs_bAioReSam∂e
 = 
HI_FALSE
;

30 
HI_BOOL
 
	ggs_bU£rGëMode
 = 
HI_FALSE
;

31 
HI_BOOL
 
	ggs_bAoVﬁumeCål
 = 
HI_TRUE
;

32 
AUDIO_SAMPLE_RATE_E
 
	gíInSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

33 
AUDIO_SAMPLE_RATE_E
 
	gíOutSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

34 
HI_U32
 
	gu32AícPtNumPîFrm
 = 0;

36 
	#SAMPLE_DBG
(
s32Rë
)\

38 
	`¥ötf
("s32Rë=%#x,fuc:%s,löe:%d\n", 
s32Rë
, 
__FUNCTION__
, 
__LINE__
);\

39 }0)

	)

44 * 
	$SAMPLE_AUDIO_Pt2Så
(
PAYLOAD_TYPE_E
 
íTy≥
)

46 i‡(
PT_G711A
 =
íTy≥
)

50 i‡(
PT_G711U
 =
íTy≥
)

54 i‡(
PT_ADPCMA
 =
íTy≥
)

58 i‡(
PT_G726
 =
íTy≥
)

62 i‡(
PT_LPCM
 =
íTy≥
)

70 
	}
}

75 
FILE
* 
	$SAMPLE_AUDIO_O≥nAícFûe
(
AENC_CHN
 
AeChn
, 
PAYLOAD_TYPE_E
 
íTy≥
)

77 
FILE
* 
pfd
;

78 
HI_CHAR
 
aszFûeName
[
FILE_NAME_LEN
];

81 
	`¢¥ötf
(
aszFûeName
, 
FILE_NAME_LEN
, "audio_chn%d.%s", 
AeChn
, 
	`SAMPLE_AUDIO_Pt2Så
(
íTy≥
));

82 
pfd
 = 
	`f›í
(
aszFûeName
, "w+");

83 i‡(
NULL
 =
pfd
)

85 
	`¥ötf
("%s: o≥¿fûê%†Áûed\n", 
__FUNCTION__
, 
aszFûeName
);

86  
NULL
;

88 
	`¥ötf
("›í såóm fûe:\"%s\" f‹áí¯ok\n", 
aszFûeName
);

89  
pfd
;

90 
	}
}

95 
FILE
* 
	$SAMPLE_AUDIO_O≥nAdecFûe
(
ADEC_CHN
 
AdChn
, 
PAYLOAD_TYPE_E
 
íTy≥
)

97 
FILE
* 
pfd
;

98 
HI_CHAR
 
aszFûeName
[
FILE_NAME_LEN
];

101 
	`¢¥ötf
(
aszFûeName
, 
FILE_NAME_LEN
 ,"audio_chn%d.%s", 
AdChn
, 
	`SAMPLE_AUDIO_Pt2Så
(
íTy≥
));

102 
pfd
 = 
	`f›í
(
aszFûeName
, "rb");

103 i‡(
NULL
 =
pfd
)

105 
	`¥ötf
("%s: o≥¿fûê%†Áûed\n", 
__FUNCTION__
, 
aszFûeName
);

106  
NULL
;

108 
	`¥ötf
("›í såóm fûe:\"%s\" f‹áde¯ok\n", 
aszFûeName
);

109  
pfd
;

110 
	}
}

116 
HI_S32
 
	$SAMPLE_AUDIO_AdecAo
(
HI_VOID
)

118 
HI_S32
 
s32Rë
;

119 
AUDIO_DEV
 
AoDev
 = 
SAMPLE_AUDIO_AO_DEV
;

120 
AO_CHN
 
AoChn
 = 0;

121 
ADEC_CHN
 
AdChn
 = 0;

122 
HI_S32
 
s32AoChnC¡
;

123 
FILE
* 
pfd
 = 
NULL
;

124 
AIO_ATTR_S
 
°AioAâr
;

126 #ifde‡
HI_ACODEC_TYPE_AK7756


128 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

129 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

130 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

131 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

132 
°AioAâr
.
u32EXFœg
 = 
AI_CUT
;

133 
°AioAâr
.
u32FrmNum
 = 30;

134 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

135 
°AioAâr
.
u32ChnC¡
 = 1;

136 
°AioAâr
.
u32ClkSñ
 = 1;

137 #ñi‡
HI_ACODEC_TYPE_TLV320AIC31


138 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

139 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

140 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

141 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

142 
°AioAâr
.
u32EXFœg
 = 0;

143 
°AioAâr
.
u32FrmNum
 = 30;

144 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

145 
°AioAâr
.
u32ChnC¡
 = 1;

146 
°AioAâr
.
u32ClkSñ
 = 1;

148 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

149 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

150 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

151 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

152 
°AioAâr
.
u32EXFœg
 = 0;

153 
°AioAâr
.
u32FrmNum
 = 30;

154 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

155 
°AioAâr
.
u32ChnC¡
 = 1;

156 
°AioAâr
.
u32ClkSñ
 = 0;

159 
gs_bAioReSam∂e
 = 
HI_FALSE
;

160 
íInSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

161 
íOutSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

163 #i‚de‡
HI_ACODEC_TYPE_AK7756


165 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
);

166 i‡(
HI_SUCCESS
 !
s32Rë
)

168 
	`SAMPLE_DBG
(
s32Rë
);

169  
HI_FAILURE
;

173 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAdec
(
AdChn
, 
gs_íPaylﬂdTy≥
);

174 i‡(
s32Rë
 !
HI_SUCCESS
)

176 
	`SAMPLE_DBG
(
s32Rë
);

177  
HI_FAILURE
;

180 
s32AoChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

181 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAo
(
AoDev
, 
s32AoChnC¡
, &
°AioAâr
, 
íInSam∂eR©e
, 
gs_bAioReSam∂e
);

182 i‡(
s32Rë
 !
HI_SUCCESS
)

184 
	`SAMPLE_DBG
(
s32Rë
);

185  
HI_FAILURE
;

187 #ifde‡
HI_ACODEC_TYPE_AK7756


189 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
, 
gs_bMicIn
);

190 i‡(
HI_SUCCESS
 !
s32Rë
)

192 
	`SAMPLE_DBG
(
s32Rë
);

193  
HI_FAILURE
;

197 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AoBödAdec
(
AoDev
, 
AoChn
, 
AdChn
);

198 i‡(
s32Rë
 !
HI_SUCCESS
)

200 
	`SAMPLE_DBG
(
s32Rë
);

201  
HI_FAILURE
;

204 
pfd
 = 
	`SAMPLE_AUDIO_O≥nAdecFûe
(
AdChn
, 
gs_íPaylﬂdTy≥
);

205 i‡(!
pfd
)

207 
	`SAMPLE_DBG
(
HI_FAILURE
);

208  
HI_FAILURE
;

210 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_Cª©TrdFûeAdec
(
AdChn
, 
pfd
);

211 i‡(
s32Rë
 !
HI_SUCCESS
)

213 
	`SAMPLE_DBG
(
s32Rë
);

214  
HI_FAILURE
;

217 
	`¥ötf
("bödádec:%dÅÿao(%d,%dËok \n", 
AdChn
, 
AoDev
, 
AoChn
);

219 
	`¥ötf
("\npleaseÖressÅwice ENTERÅoÉxitÅhis sample\n");

220 
	`gëch¨
();

221 
	`gëch¨
();

223 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_De°‹yTrdFûeAdec
(
AdChn
);

224 i‡(
s32Rë
 !
HI_SUCCESS
)

226 
	`SAMPLE_DBG
(
s32Rë
);

227  
HI_FAILURE
;

230 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ao
(
AoDev
, 
s32AoChnC¡
, 
gs_bAioReSam∂e
);

231 i‡(
s32Rë
 !
HI_SUCCESS
)

233 
	`SAMPLE_DBG
(
s32Rë
);

234  
HI_FAILURE
;

237 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Adec
(
AdChn
);

238 i‡(
s32Rë
 !
HI_SUCCESS
)

240 
	`SAMPLE_DBG
(
s32Rë
);

241  
HI_FAILURE
;

244 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AoUnbödAdec
(
AoDev
, 
AoChn
, 
AdChn
);

245 i‡(
s32Rë
 !
HI_SUCCESS
)

247 
	`SAMPLE_DBG
(
s32Rë
);

248  
HI_FAILURE
;

251  
HI_SUCCESS
;

252 
	}
}

258 
HI_S32
 
	$SAMPLE_AUDIO_AiAíc
(
HI_VOID
)

260 
HI_S32
 
i
, 
s32Rë
;

261 
AUDIO_DEV
 
AiDev
 = 
SAMPLE_AUDIO_AI_DEV
;

262 
AI_CHN
 
AiChn
;

263 
AUDIO_DEV
 
AoDev
 = 
SAMPLE_AUDIO_AO_DEV
;

264 
AO_CHN
 
AoChn
 = 0;

265 
ADEC_CHN
 
AdChn
 = 0;

266 
HI_S32
 
s32AiChnC¡
;

267 
HI_S32
 
s32AoChnC¡
;

268 
HI_S32
 
s32AícChnC¡
;

269 
AENC_CHN
 
AeChn
;

270 
HI_BOOL
 
bSídAdec
 = 
HI_TRUE
;

271 
FILE
* 
pfd
 = 
NULL
;

272 
AIO_ATTR_S
 
°AioAâr
;

274 #ifde‡
HI_ACODEC_TYPE_AK7756


276 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

277 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

278 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

279 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

280 
°AioAâr
.
u32EXFœg
 = 
AI_CUT
;

281 
°AioAâr
.
u32FrmNum
 = 30;

282 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

283 
°AioAâr
.
u32ChnC¡
 = 1;

284 
°AioAâr
.
u32ClkSñ
 = 1;

285 #ñi‡
HI_ACODEC_TYPE_TLV320AIC31


286 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

287 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

288 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

289 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

290 
°AioAâr
.
u32EXFœg
 = 0;

291 
°AioAâr
.
u32FrmNum
 = 30;

292 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

293 
°AioAâr
.
u32ChnC¡
 = 1;

294 
°AioAâr
.
u32ClkSñ
 = 1;

296 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

297 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

298 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

299 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

300 
°AioAâr
.
u32EXFœg
 = 0;

301 
°AioAâr
.
u32FrmNum
 = 30;

302 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

303 
°AioAâr
.
u32ChnC¡
 = 1;

304 
°AioAâr
.
u32ClkSñ
 = 0;

306 
gs_bAioReSam∂e
 = 
HI_FALSE
;

307 
íInSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

308 
íOutSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

309 
u32AícPtNumPîFrm
 = 
°AioAâr
.
u32PtNumPîFrm
;

314 #i‚de‡
HI_ACODEC_TYPE_AK7756


316 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
);

317 i‡(
HI_SUCCESS
 !
s32Rë
)

319 
	`SAMPLE_DBG
(
s32Rë
);

320  
HI_FAILURE
;

327 
s32AiChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

328 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAi
(
AiDev
, 
s32AiChnC¡
, &
°AioAâr
, 
íOutSam∂eR©e
, 
gs_bAioReSam∂e
, 
NULL
);

329 i‡(
s32Rë
 !
HI_SUCCESS
)

331 
	`SAMPLE_DBG
(
s32Rë
);

332  
HI_FAILURE
;

338 
s32AícChnC¡
 = 1;

339 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAíc
(
s32AícChnC¡
, 
u32AícPtNumPîFrm
, 
gs_íPaylﬂdTy≥
);

340 i‡(
s32Rë
 !
HI_SUCCESS
)

342 
	`SAMPLE_DBG
(
s32Rë
);

343  
HI_FAILURE
;

345 #ifde‡
HI_ACODEC_TYPE_AK7756


347 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
, 
gs_bMicIn
);

348 i‡(
HI_SUCCESS
 !
s32Rë
)

350 
	`SAMPLE_DBG
(
s32Rë
);

351  
HI_FAILURE
;

358 
i
 = 0; i < 
s32AícChnC¡
; i++)

360 
AeChn
 = 
i
;

361 
AiChn
 = 
i
;

363 i‡(
HI_TRUE
 =
gs_bU£rGëMode
)

365 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_Cª©TrdAiAíc
(
AiDev
, 
AiChn
, 
AeChn
);

366 i‡(
s32Rë
 !
HI_SUCCESS
)

368 
	`SAMPLE_DBG
(
s32Rë
);

369  
HI_FAILURE
;

374 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AícBödAi
(
AiDev
, 
AiChn
, 
AeChn
);

375 i‡(
s32Rë
 !
HI_SUCCESS
)

377 
	`SAMPLE_DBG
(
s32Rë
);

378  
s32Rë
;

381 
	`¥ötf
("Ai(%d,%dËbödÅÿAícChn:%d ok!\n", 
AiDev
 , 
AiChn
, 
AeChn
);

387 i‡(
HI_TRUE
 =
bSídAdec
)

389 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAdec
(
AdChn
, 
gs_íPaylﬂdTy≥
);

390 i‡(
s32Rë
 !
HI_SUCCESS
)

392 
	`SAMPLE_DBG
(
s32Rë
);

393  
HI_FAILURE
;

396 
s32AoChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

397 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAo
(
AoDev
, 
s32AoChnC¡
, &
°AioAâr
, 
íInSam∂eR©e
, 
gs_bAioReSam∂e
);

398 i‡(
s32Rë
 !
HI_SUCCESS
)

400 
	`SAMPLE_DBG
(
s32Rë
);

401  
HI_FAILURE
;

404 
pfd
 = 
	`SAMPLE_AUDIO_O≥nAícFûe
(
AdChn
, 
gs_íPaylﬂdTy≥
);

405 i‡(!
pfd
)

407 
	`SAMPLE_DBG
(
HI_FAILURE
);

408  
HI_FAILURE
;

410 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_Cª©TrdAícAdec
(
AeChn
, 
AdChn
, 
pfd
);

411 i‡(
s32Rë
 !
HI_SUCCESS
)

413 
	`SAMPLE_DBG
(
s32Rë
);

414  
HI_FAILURE
;

417 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AoBödAdec
(
AoDev
, 
AoChn
, 
AdChn
);

418 i‡(
s32Rë
 !
HI_SUCCESS
)

420 
	`SAMPLE_DBG
(
s32Rë
);

421  
HI_FAILURE
;

424 
	`¥ötf
("bödádec:%dÅÿao(%d,%dËok \n", 
AdChn
, 
AoDev
, 
AoChn
);

427 
	`¥ötf
("\npleaseÖressÅwice ENTERÅoÉxitÅhis sample\n");

428 
	`gëch¨
();

429 
	`gëch¨
();

434 i‡(
HI_TRUE
 =
bSídAdec
)

436 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_De°‹yTrdAícAdec
(
AdChn
);

437 i‡(
s32Rë
 !
HI_SUCCESS
)

439 
	`SAMPLE_DBG
(
s32Rë
);

440  
HI_FAILURE
;

443 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ao
(
AoDev
, 
s32AoChnC¡
, 
gs_bAioReSam∂e
);

444 i‡(
s32Rë
 !
HI_SUCCESS
)

446 
	`SAMPLE_DBG
(
s32Rë
);

447  
HI_FAILURE
;

450 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Adec
(
AdChn
);

451 i‡(
s32Rë
 !
HI_SUCCESS
)

453 
	`SAMPLE_DBG
(
s32Rë
);

454  
HI_FAILURE
;

457 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AoUnbödAdec
(
AoDev
, 
AoChn
, 
AdChn
);

458 i‡(
s32Rë
 !
HI_SUCCESS
)

460 
	`SAMPLE_DBG
(
s32Rë
);

461  
HI_FAILURE
;

466 
i
 = 0; i < 
s32AícChnC¡
; i++)

468 
AeChn
 = 
i
;

469 
AiChn
 = 
i
;

471 i‡(
HI_TRUE
 =
gs_bU£rGëMode
)

473 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AiDev
, 
AiChn
);

474 i‡(
s32Rë
 !
HI_SUCCESS
)

476 
	`SAMPLE_DBG
(
s32Rë
);

477  
HI_FAILURE
;

482 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AícUnbödAi
(
AiDev
, 
AiChn
, 
AeChn
);

483 i‡(
s32Rë
 !
HI_SUCCESS
)

485 
	`SAMPLE_DBG
(
s32Rë
);

486  
HI_FAILURE
;

491 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Aíc
(
s32AícChnC¡
);

492 i‡(
s32Rë
 !
HI_SUCCESS
)

494 
	`SAMPLE_DBG
(
s32Rë
);

495  
HI_FAILURE
;

498 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ai
(
AiDev
, 
s32AiChnC¡
, 
gs_bAioReSam∂e
, 
HI_FALSE
);

499 i‡(
s32Rë
 !
HI_SUCCESS
)

501 
	`SAMPLE_DBG
(
s32Rë
);

502  
HI_FAILURE
;

505  
HI_SUCCESS
;

506 
	}
}

511 
HI_S32
 
	$SAMPLE_AUDIO_AiAo
(
HI_VOID
)

513 
HI_S32
 
s32Rë
;

514 
HI_S32
 
s32AiChnC¡
;

515 
HI_S32
 
s32AoChnC¡
;

516 
AUDIO_DEV
 
AiDev
 = 
SAMPLE_AUDIO_AI_DEV
;

517 
AI_CHN
 
AiChn
 = 0;

518 
AUDIO_DEV
 
AoDev
 = 
SAMPLE_AUDIO_AO_DEV
;

519 
AO_CHN
 
AoChn
 = 0;

520 
AIO_ATTR_S
 
°AioAâr
;

521 #ifde‡
HI_ACODEC_TYPE_AK7756


523 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

524 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

525 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

526 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

527 
°AioAâr
.
u32EXFœg
 = 
AI_CUT
;

528 
°AioAâr
.
u32FrmNum
 = 30;

529 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

530 
°AioAâr
.
u32ChnC¡
 = 1;

531 
°AioAâr
.
u32ClkSñ
 = 1;

532 #ñi‡
HI_ACODEC_TYPE_TLV320AIC31


533 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

534 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

535 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

536 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

537 
°AioAâr
.
u32EXFœg
 = 0;

538 
°AioAâr
.
u32FrmNum
 = 30;

539 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

540 
°AioAâr
.
u32ChnC¡
 = 1;

541 
°AioAâr
.
u32ClkSñ
 = 1;

543 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

544 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

545 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

546 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

547 
°AioAâr
.
u32EXFœg
 = 0;

548 
°AioAâr
.
u32FrmNum
 = 30;

549 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

550 
°AioAâr
.
u32ChnC¡
 = 1;

551 
°AioAâr
.
u32ClkSñ
 = 0;

554 i‡(
HI_TRUE
 =
gs_bAioReSam∂e
)

556 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_32000
;

557 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
 * 4;

560 
íOutSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_8000
;

563 
íInSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_8000
;

567 
íInSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

568 
íOutSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

572 
gs_bU£rGëMode
 = (
HI_TRUE
 =
gs_bAioReSam∂e
Ë? HI_TRUE : 
HI_FALSE
;

573 #i‚de‡
HI_ACODEC_TYPE_AK7756


575 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
);

576 i‡(
HI_SUCCESS
 !
s32Rë
)

578 
	`SAMPLE_DBG
(
s32Rë
);

579  
HI_FAILURE
;

583 
s32AiChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

584 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAi
(
AiDev
, 
s32AiChnC¡
, &
°AioAâr
, 
íOutSam∂eR©e
, 
gs_bAioReSam∂e
, 
NULL
);

585 i‡(
s32Rë
 !
HI_SUCCESS
)

587 
	`SAMPLE_DBG
(
s32Rë
);

588  
HI_FAILURE
;

592 
s32AoChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

593 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAo
(
AoDev
, 
s32AoChnC¡
, &
°AioAâr
, 
íInSam∂eR©e
, 
gs_bAioReSam∂e
);

594 i‡(
s32Rë
 !
HI_SUCCESS
)

596 
	`SAMPLE_DBG
(
s32Rë
);

597  
HI_FAILURE
;

599 #ifde‡
HI_ACODEC_TYPE_AK7756


601 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
, 
gs_bMicIn
);

602 i‡(
HI_SUCCESS
 !
s32Rë
)

604 
	`SAMPLE_DBG
(
s32Rë
);

605  
HI_FAILURE
;

609 i‡(
HI_TRUE
 =
gs_bU£rGëMode
)

611 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_Cª©TrdAiAo
(
AiDev
, 
AiChn
, 
AoDev
, 
AoChn
);

612 i‡(
s32Rë
 !
HI_SUCCESS
)

614 
	`SAMPLE_DBG
(
s32Rë
);

615  
HI_FAILURE
;

620 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AoBödAi
(
AiDev
, 
AiChn
, 
AoDev
, 
AoChn
);

621 i‡(
s32Rë
 !
HI_SUCCESS
)

623 
	`SAMPLE_DBG
(
s32Rë
);

624  
HI_FAILURE
;

627 
	`¥ötf
("ai(%d,%dËbödÅÿao(%d,%dËok\n", 
AiDev
, 
AiChn
, 
AoDev
, 
AoChn
);

629 #i‚de‡
HI_ACODEC_TYPE_AK7756


630 i‡(
HI_TRUE
 =
gs_bAoVﬁumeCål
)

632 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_Cª©TrdAoVﬁCål
(
AoDev
);

633 i‡(
s32Rë
 !
HI_SUCCESS
)

635 
	`SAMPLE_DBG
(
s32Rë
);

636  
HI_FAILURE
;

641 
	`¥ötf
("\npleaseÖressÅwice ENTERÅoÉxitÅhis sample\n");

642 
	`gëch¨
();

643 
	`gëch¨
();

645 #i‚de‡
HI_ACODEC_TYPE_AK7756


646 i‡(
HI_TRUE
 =
gs_bAoVﬁumeCål
)

648 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_De°‹yTrdAoVﬁCål
(
AoDev
);

649 i‡(
s32Rë
 !
HI_SUCCESS
)

651 
	`SAMPLE_DBG
(
s32Rë
);

652  
HI_FAILURE
;

657 i‡(
HI_TRUE
 =
gs_bU£rGëMode
)

659 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AiDev
, 
AiChn
);

660 i‡(
s32Rë
 !
HI_SUCCESS
)

662 
	`SAMPLE_DBG
(
s32Rë
);

663  
HI_FAILURE
;

668 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_AoUnbödAi
(
AiDev
, 
AiChn
, 
AoDev
, 
AoChn
);

669 i‡(
s32Rë
 !
HI_SUCCESS
)

671 
	`SAMPLE_DBG
(
s32Rë
);

672  
HI_FAILURE
;

676 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ai
(
AiDev
, 
s32AiChnC¡
, 
gs_bAioReSam∂e
, 
HI_FALSE
);

677 i‡(
s32Rë
 !
HI_SUCCESS
)

679 
	`SAMPLE_DBG
(
s32Rë
);

680  
HI_FAILURE
;

683 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ao
(
AoDev
, 
s32AoChnC¡
, 
gs_bAioReSam∂e
);

684 i‡(
s32Rë
 !
HI_SUCCESS
)

686 
	`SAMPLE_DBG
(
s32Rë
);

687  
HI_FAILURE
;

690  
HI_SUCCESS
;

691 
	}
}

697 
HI_S32
 
	$SAMPLE_AUDIO_AiVqePro˚ssAo
(
HI_VOID
)

699 
HI_S32
 
i
, 
s32Rë
;

700 
AUDIO_DEV
 
AiDev
 = 
SAMPLE_AUDIO_AI_DEV
;

701 
AUDIO_DEV
 
AoDev
 = 
SAMPLE_AUDIO_AO_DEV
;

702 
HI_S32
 
s32AiChnC¡
;

703 
HI_S32
 
s32AoChnC¡
;

704 
AIO_ATTR_S
 
°AioAâr
;

705 
AI_VQE_CONFIG_S
 
°AiVqeAâr
;

707 #ifde‡
HI_ACODEC_TYPE_AK7756


709 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

710 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

711 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

712 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

713 
°AioAâr
.
u32EXFœg
 = 
AI_CUT
;

714 
°AioAâr
.
u32FrmNum
 = 30;

715 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

716 
°AioAâr
.
u32ChnC¡
 = 1;

717 
°AioAâr
.
u32ClkSñ
 = 1;

718 #ñi‡
HI_ACODEC_TYPE_TLV320AIC31


719 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

720 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

721 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

722 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

723 
°AioAâr
.
u32EXFœg
 = 0;

724 
°AioAâr
.
u32FrmNum
 = 30;

725 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

726 
°AioAâr
.
u32ChnC¡
 = 1;

727 
°AioAâr
.
u32ClkSñ
 = 1;

729 
°AioAâr
.
íSam∂î©e
 = 
AUDIO_SAMPLE_RATE_8000
;

730 
°AioAâr
.
íBôwidth
 = 
AUDIO_BIT_WIDTH_16
;

731 
°AioAâr
.
íW‹kmode
 = 
AIO_MODE_I2S_MASTER
;

732 
°AioAâr
.
íSoundmode
 = 
AUDIO_SOUND_MODE_MONO
;

733 
°AioAâr
.
u32EXFœg
 = 0;

734 
°AioAâr
.
u32FrmNum
 = 30;

735 
°AioAâr
.
u32PtNumPîFrm
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

736 
°AioAâr
.
u32ChnC¡
 = 1;

737 
°AioAâr
.
u32ClkSñ
 = 0;

739 
gs_bAioReSam∂e
 = 
HI_FALSE
;

740 
íInSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

741 
íOutSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_BUTT
;

743 
°AiVqeAâr
.
s32W‹kSam∂eR©e
 = 
AUDIO_SAMPLE_RATE_8000
;

744 
°AiVqeAâr
.
s32FømeSam∂e
 = 
SAMPLE_AUDIO_PTNUMPERFRM
;

745 
°AiVqeAâr
.
íW‹k°©e
 = 
VQE_WORKSTATE_COMMON
;

746 
°AiVqeAâr
.
bAecO≥n
 = 
HI_TRUE
;

747 
°AiVqeAâr
.
°AecCfg
.
bU§Mode
 = 
HI_FALSE
;

748 
°AiVqeAâr
.
°AecCfg
.
s8CngMode
 = 
AUDIO_AEC_MODE_CLOSE
;

749 
°AiVqeAâr
.
bAgcO≥n
 = 
HI_TRUE
;

750 
°AiVqeAâr
.
°AgcCfg
.
bU§Mode
 = 
HI_FALSE
;

751 
°AiVqeAâr
.
bAƒO≥n
 = 
HI_TRUE
;

752 
°AiVqeAâr
.
°AƒCfg
.
bU§Mode
 = 
HI_FALSE
;

753 
°AiVqeAâr
.
bHpfO≥n
 = 
HI_TRUE
;

754 
°AiVqeAâr
.
°HpfCfg
.
íHpfFªq
 = 
AUDIO_HPF_FREQ_150
;

755 
°AiVqeAâr
.
bRƒO≥n
 = 
HI_FALSE
;

756 
°AiVqeAâr
.
bEqO≥n
 = 
HI_FALSE
;

761 #i‚de‡
HI_ACODEC_TYPE_AK7756


763 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
);

764 i‡(
HI_SUCCESS
 !
s32Rë
)

766 
	`SAMPLE_DBG
(
s32Rë
);

767  
HI_FAILURE
;

774 
s32AiChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

775 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAi
(
AiDev
, 
s32AiChnC¡
, &
°AioAâr
, 
íOutSam∂eR©e
, 
gs_bAioReSam∂e
, &
°AiVqeAâr
);

776 i‡(
s32Rë
 !
HI_SUCCESS
)

778 
	`SAMPLE_DBG
(
s32Rë
);

779  
HI_FAILURE
;

785 
s32AoChnC¡
 = 
°AioAâr
.
u32ChnC¡
;

786 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_SèπAo
(
AoDev
, 
s32AoChnC¡
, &
°AioAâr
, 
íInSam∂eR©e
, 
gs_bAioReSam∂e
);

787 i‡(
s32Rë
 !
HI_SUCCESS
)

789 
	`SAMPLE_DBG
(
s32Rë
);

790  
HI_FAILURE
;

792 #ifde‡
HI_ACODEC_TYPE_AK7756


794 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_CfgAcodec
(&
°AioAâr
, 
gs_bMicIn
);

795 i‡(
HI_SUCCESS
 !
s32Rë
)

797 
	`SAMPLE_DBG
(
s32Rë
);

798  
HI_FAILURE
;

805 
i
 = 0; i < 
s32AiChnC¡
; i++)

807 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_Cª©TrdAiAo
(
AiDev
, 
i
, 
AoDev
, i);

808 i‡(
s32Rë
 !
HI_SUCCESS
)

810 
	`SAMPLE_DBG
(
s32Rë
);

811  
HI_FAILURE
;

814 
	`¥ötf
("bödái(%d,%dËtÿao(%d,%dËok \n", 
AiDev
, 
i
, 
AoDev
, i);

817 
	`¥ötf
("\npleaseÖressÅwice ENTERÅoÉxitÅhis sample\n");

818 
	`gëch¨
();

819 
	`gëch¨
();

824 
i
 = 0; i < 
s32AiChnC¡
; i++)

826 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AiDev
, 
i
);

827 i‡(
s32Rë
 !
HI_SUCCESS
)

829 
	`SAMPLE_DBG
(
s32Rë
);

830  
HI_FAILURE
;

834 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ai
(
AiDev
, 
s32AiChnC¡
, 
gs_bAioReSam∂e
, 
HI_TRUE
);

835 i‡(
s32Rë
 !
HI_SUCCESS
)

837 
	`SAMPLE_DBG
(
s32Rë
);

838  
HI_FAILURE
;

841 
s32Rë
 = 
	`SAMPLE_COMM_AUDIO_St›Ao
(
AoDev
, 
s32AoChnC¡
, 
gs_bAioReSam∂e
);

842 i‡(
s32Rë
 !
HI_SUCCESS
)

844 
	`SAMPLE_DBG
(
s32Rë
);

845  
HI_FAILURE
;

848  
HI_SUCCESS
;

849 
	}
}

852 
HI_VOID
 
	$SAMPLE_AUDIO_Ußge
(
HI_VOID
)

854 
	`¥ötf
("\n\n/************************************/\n");

855 
	`¥ötf
("please chooseÅhe case which you wantÅoÑun:\n");

856 
	`¥ötf
("\t0: start AIÅo AOÜoop\n");

857 
	`¥ötf
("\t1: sendáudio frameÅo AENC channel from AI, saveÅhem\n");

858 
	`¥ötf
("\t2:Ñeadáudio stream from file, decodeánd send AO\n");

859 
	`¥ötf
("\t3: start AI(AEC/ANR/ALCÖrocess),Åhen sendÅo AO\n");

860 
	`¥ötf
("\tq: quit wholeáudio sample\n\n");

861 
	`¥ötf
("sample command:");

862 
	}
}

867 
	$SAMPLE_AUDIO_H™dÀSig
(
HI_S32
 
signo
)

869 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

872 
	`SAMPLE_COMM_AUDIO_De°‹yAŒTrd
();

873 
	`SAMPLE_COMM_SYS_Exô
();

874 
	`¥ötf
("\033[0;31mprogramÉxitábnormally!\033[0;39m\n");

877 
	`exô
(0);

878 
	}
}

883 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

885 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

886 
HI_CHAR
 
ch
;

887 
HI_BOOL
 
bExô
 = 
HI_FALSE
;

888 
VB_CONF_S
 
°VbC⁄f
;

890 
	`sig«l
(
SIGINT
, 
SAMPLE_AUDIO_H™dÀSig
);

891 
	`sig«l
(
SIGTERM
, 
SAMPLE_AUDIO_H™dÀSig
);

893 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

894 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

895 i‡(
HI_SUCCESS
 !
s32Rë
)

897 
	`¥ötf
("%s: sy°em inô faûed wôh %d!\n", 
__FUNCTION__
, 
s32Rë
);

898  
HI_FAILURE
;

906 
	`SAMPLE_AUDIO_Ußge
();

907 
ch
 = 
	`gëch¨
();

908 
	`gëch¨
();

909 
ch
)

913 
	`SAMPLE_AUDIO_AiAo
();

918 
	`SAMPLE_AUDIO_AiAíc
();

923 
	`SAMPLE_AUDIO_AdecAo
();

928 
	`SAMPLE_AUDIO_AiVqePro˚ssAo
();

934 
bExô
 = 
HI_TRUE
;

939 
	`¥ötf
("input invaild!ÖleaseÅryágain.\n");

944 i‡(
bExô
)

950 
	`SAMPLE_COMM_SYS_Exô
();

952  
s32Rë
;

953 
	}
}

	@sample/common/loadbmp.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<°rög.h
>

5 
	~"lﬂdbmp.h
"

7 
OSD_COMP_INFO
 
	gs_OSDCompInfo
[
OSD_COLOR_FMT_BUTT
] = {{0, 4, 4, 4},

16 
ölöe
 
HI_U16
 
	$OSD_MAKECOLOR_U16
(
HI_U8
 
r
, HI_U8 
g
, HI_U8 
b
, 
OSD_COMP_INFO
 
compöfo
)

18 
HI_U8
 
r1
, 
g1
, 
b1
;

19 
HI_U16
 
pixñ
 = 0;

20 
HI_U32
 
tmp
 = 15;

22 
r1
 = 
g1
 = 
b1
 = 0;

23 
r1
 = 
r
 >> (8 - 
compöfo
.
æí
);

24 
g1
 = 
g
 >> (8 - 
compöfo
.
gÀn
);

25 
b1
 = 
b
 >> (8 - 
compöfo
.
bÀn
);

26 
compöfo
.
Æí
)

28 
pixñ
 |(1 << 
tmp
);

29 
tmp
 --;

30 
compöfo
.
Æí
--;

33 
pixñ
 |(
r1
 | (
g1
 << 
compöfo
.
bÀn
Ë| (
b1
 << (compöfo.bÀ¿+ compöfo.
gÀn
)));

34  
pixñ
;

35 
	}
}

37 
HI_S32
 
	$GëBmpInfo
(c⁄° * 
fûíame
, 
OSD_BITMAPFILEHEADER
* 
pBmpFûeHódî


38 , 
OSD_BITMAPINFO
* 
pBmpInfo
)

40 
FILE
* 
pFûe
;

42 
HI_U16
 
bfTy≥
;

44 i‡(
NULL
 =
fûíame
)

46 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

50 i‡((
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

52 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

56 ()
	`‰ód
(&
bfTy≥
, 1, (bfTy≥), 
pFûe
);

57 i‡(
bfTy≥
 != 0x4d42)

59 
	`¥ötf
("not bitmap file\n");

60 
	`f˛o£
(
pFûe
);

64 ()
	`‰ód
(
pBmpFûeHódî
, 1, (
OSD_BITMAPFILEHEADER
), 
pFûe
);

65 ()
	`‰ód
(
pBmpInfo
, 1, (
OSD_BITMAPINFO
), 
pFûe
);

66 
	`f˛o£
(
pFûe
);

69 
	}
}

71 
	$LﬂdBMP
(c⁄° * 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
)

73 
FILE
* 
pFûe
;

74 
HI_U16
 
i
, 
j
;

76 
HI_U32
 
w
, 
h
;

77 
HI_U16
 
Bµ
;

78 
HI_U16
 
d°Bµ
;

80 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

81 
OSD_BITMAPINFO
 
bmpInfo
;

83 
HI_U8
* 
pOrigBMPBuf
;

84 
HI_U8
* 
pRGBBuf
;

85 
HI_U32
 
°ride
;

87 i‡(
NULL
 =
fûíame
)

89 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

93 i‡(
	`GëBmpInfo
(
fûíame
, &
bmpFûeHódî
, &
bmpInfo
) < 0)

98 
Bµ
 = 
bmpInfo
.
bmiHódî
.
biBôCou¡
 / 8;

99 i‡(
Bµ
 < 2)

102 
	`¥ötf
("bitmap formatÇot supported!\n");

106 i‡(
bmpInfo
.
bmiHódî
.
biCom¥essi⁄
 != 0)

108 
	`¥ötf
("not support compressed bitmap file!\n");

112 i‡(
bmpInfo
.
bmiHódî
.
biHeight
 < 0)

114 
	`¥ötf
("bmpInfo.bmiHeader.biHeight < 0\n");

118 i‡–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

120 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

124 
pVideoLogo
->
width
 = (
HI_U16
)
bmpInfo
.
bmiHódî
.
biWidth
;

125 
pVideoLogo
->
height
 = (
HI_U16
)((
bmpInfo
.
bmiHódî
.
biHeight
 > 0) ? bmpInfo.bmiHeader.biHeight : (-bmpInfo.bmiHeader.biHeight));

126 
w
 = 
pVideoLogo
->
width
;

127 
h
 = 
pVideoLogo
->
height
;

129 
°ride
 = 
w
 * 
Bµ
;

131 i‡(
°ride
 % 4)

133 
°ride
 = (stride & 0xfffc) + 4;

137 
pOrigBMPBuf
 = (
HI_U8
*)
	`mÆloc
(
h
 * 
°ride
);

138 i‡(
NULL
 =
pOrigBMPBuf
)

140 
	`¥ötf
("notÉnough memoryÅo malloc!\n");

141 
	`f˛o£
(
pFûe
);

145 
pRGBBuf
 = 
pVideoLogo
->
pRGBBuf„r
;

147 
	`f£ek
(
pFûe
, 
bmpFûeHódî
.
bfOffBôs
, 0);

148 i‡(
	`‰ód
(
pOrigBMPBuf
, 1, 
h
 * 
°ride
, 
pFûe
) != (h * stride) )

150 
	`¥ötf
("‰ódÉº‹!löe:%d\n", 
__LINE__
);

151 
	`≥º‹
("fread:");

154 i‡(
Bµ
 > 2)

156 
d°Bµ
 = 4;

160 
d°Bµ
 = 2;

163 i‡(0 =
pVideoLogo
->
°ride
)

165 
pVideoLogo
->
°ride
 =ÖVideoLogo->
width
 * 
d°Bµ
;

168 
i
 = 0; i < 
h
; i++)

170 
j
 = 0; j < 
w
; j++)

172 
	`mem˝y
(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 
d°Bµ
, 
pOrigBMPBuf
 + ((
h
 - 1Ë- i)*°ridê+ j * 
Bµ
, Bpp);

174 i‡(
d°Bµ
 == 4)

177 *(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 
d°Bµ
 + 3) = 0x80;

183 
	`‰ì
(
pOrigBMPBuf
);

184 
pOrigBMPBuf
 = 
NULL
;

186 
	`f˛o£
(
pFûe
);

188 
	}
}

190 
	$LﬂdBMPEx
(c⁄° * 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

192 
FILE
* 
pFûe
;

193 
HI_U16
 
i
, 
j
;

195 
HI_U32
 
w
, 
h
;

196 
HI_U16
 
Bµ
;

198 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

199 
OSD_BITMAPINFO
 
bmpInfo
;

201 
HI_U8
* 
pOrigBMPBuf
;

202 
HI_U8
* 
pRGBBuf
;

203 
HI_U32
 
°ride
;

204 
HI_U8
 
r
, 
g
, 
b
;

205 
HI_U8
* 
pSèπ
;

206 
HI_U16
* 
pD°
;

208 i‡(
NULL
 =
fûíame
)

210 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

214 i‡(
	`GëBmpInfo
(
fûíame
, &
bmpFûeHódî
, &
bmpInfo
) < 0)

219 
Bµ
 = 
bmpInfo
.
bmiHódî
.
biBôCou¡
 / 8;

220 i‡(
Bµ
 < 2)

223 
	`¥ötf
("bitmap formatÇot supported!\n");

227 i‡(
bmpInfo
.
bmiHódî
.
biCom¥essi⁄
 != 0)

229 
	`¥ötf
("not support compressed bitmap file!\n");

233 i‡(
bmpInfo
.
bmiHódî
.
biHeight
 < 0)

235 
	`¥ötf
("bmpInfo.bmiHeader.biHeight < 0\n");

239 i‡–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

241 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

245 
pVideoLogo
->
width
 = (
HI_U16
)
bmpInfo
.
bmiHódî
.
biWidth
;

246 
pVideoLogo
->
height
 = (
HI_U16
)((
bmpInfo
.
bmiHódî
.
biHeight
 > 0) ? bmpInfo.bmiHeader.biHeight : (-bmpInfo.bmiHeader.biHeight));

247 
w
 = 
pVideoLogo
->
width
;

248 
h
 = 
pVideoLogo
->
height
;

250 
°ride
 = 
w
 * 
Bµ
;

252 i‡(
°ride
 % 4)

254 
°ride
 = (stride & 0xfffc) + 4;

259 
pOrigBMPBuf
 = (
HI_U8
*)
	`mÆloc
(
h
 * 
°ride
);

260 i‡(
NULL
 =
pOrigBMPBuf
)

262 
	`¥ötf
("notÉnough memoryÅo malloc!\n");

263 
	`f˛o£
(
pFûe
);

267 
pRGBBuf
 = 
pVideoLogo
->
pRGBBuf„r
;

269 
	`f£ek
(
pFûe
, 
bmpFûeHódî
.
bfOffBôs
, 0);

270 i‡(
	`‰ód
(
pOrigBMPBuf
, 1, 
h
 * 
°ride
, 
pFûe
) != (h * stride) )

272 
	`¥ötf
("‰ód (%d*%dÎº‹!löe:%d\n", 
h
, 
°ride
, 
__LINE__
);

273 
	`≥º‹
("fread:");

276 i‡(
íFmt
 >
OSD_COLOR_FMT_RGB888
)

278 
pVideoLogo
->
°ride
 =ÖVideoLogo->
width
 * 4;

282 
pVideoLogo
->
°ride
 =ÖVideoLogo->
width
 * 2;

285 
i
 = 0; i < 
h
; i++)

287 
j
 = 0; j < 
w
; j++)

289 i‡(
Bµ
 == 3)

291 
íFmt
)

293 
OSD_COLOR_FMT_RGB444
:

294 
OSD_COLOR_FMT_RGB555
:

295 
OSD_COLOR_FMT_RGB565
:

296 
OSD_COLOR_FMT_RGB1555
:

297 
OSD_COLOR_FMT_RGB4444
:

299 
pSèπ
 = 
pOrigBMPBuf
 + ((
h
 - 1Ë- 
i
Ë* 
°ride
 + 
j
 * 
Bµ
;

300 
pD°
 = (
HI_U16
*)(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 2);

301 
r
 = *(
pSèπ
);

302 
g
 = *(
pSèπ
 + 1);

303 
b
 = *(
pSèπ
 + 2);

304 *
pD°
 = 
	`OSD_MAKECOLOR_U16
(
r
, 
g
, 
b
, 
s_OSDCompInfo
[
íFmt
]);

307 
OSD_COLOR_FMT_RGB888
:

308 
OSD_COLOR_FMT_RGB8888
:

309 
	`mem˝y
(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 4, 
pOrigBMPBuf
 + ((
h
 - 1Ë- i)*°ridê+ j * 
Bµ
, Bpp);

310 *(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 4 + 3) = 0xff;

314 
	`¥ötf
("fûe(%s),Üöe(%d),Çÿsuch f‹m©!\n", 
__FILE__
, 
__LINE__
);

318 i‡((
Bµ
 == 2) || (Bpp == 4))

320 
	`mem˝y
(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 
Bµ
, 
pOrigBMPBuf
 + ((
h
 - 1) - i)*stride + j * Bpp, Bpp);

327 
	`‰ì
(
pOrigBMPBuf
);

328 
pOrigBMPBuf
 = 
NULL
;

330 
	`f˛o£
(
pFûe
);

332 
	}
}

335 
	$LﬂdBMPC™vas
(c⁄° * 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

337 
FILE
* 
pFûe
;

338 
HI_U16
 
i
, 
j
;

340 
HI_U32
 
w
, 
h
;

341 
HI_U16
 
Bµ
;

343 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

344 
OSD_BITMAPINFO
 
bmpInfo
;

346 
HI_U8
* 
pOrigBMPBuf
;

347 
HI_U8
* 
pRGBBuf
;

348 
HI_U32
 
°ride
;

349 
HI_U8
 
r
, 
g
, 
b
;

350 
HI_U8
* 
pSèπ
;

351 
HI_U16
* 
pD°
;

353 i‡(
NULL
 =
fûíame
)

355 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

359 i‡(
	`GëBmpInfo
(
fûíame
, &
bmpFûeHódî
, &
bmpInfo
) < 0)

364 
Bµ
 = 
bmpInfo
.
bmiHódî
.
biBôCou¡
 / 8;

365 i‡(
Bµ
 < 2)

368 
	`¥ötf
("bitmap formatÇot supported!\n");

372 i‡(
bmpInfo
.
bmiHódî
.
biCom¥essi⁄
 != 0)

374 
	`¥ötf
("not support compressed bitmap file!\n");

378 i‡(
bmpInfo
.
bmiHódî
.
biHeight
 < 0)

380 
	`¥ötf
("bmpInfo.bmiHeader.biHeight < 0\n");

384 i‡–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

386 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

390 
w
 = (
HI_U16
)
bmpInfo
.
bmiHódî
.
biWidth
;

391 
h
 = (
HI_U16
)((
bmpInfo
.
bmiHódî
.
biHeight
 > 0) ? bmpInfo.bmiHeader.biHeight : (-bmpInfo.bmiHeader.biHeight));

393 
°ride
 = 
w
 * 
Bµ
;

396 i‡(
°ride
 % 4)

398 
°ride
 = (stride & 0xfffc) + 4;

403 
pOrigBMPBuf
 = (
HI_U8
*)
	`mÆloc
(
h
 * 
°ride
);

404 i‡(
NULL
 =
pOrigBMPBuf
)

406 
	`¥ötf
("notÉnough memoryÅo malloc!\n");

407 
	`f˛o£
(
pFûe
);

411 
pRGBBuf
 = 
pVideoLogo
->
pRGBBuf„r
;

413 i‡(
°ride
 > 
pVideoLogo
->stride)

415 
	`¥ötf
("Bôm≠'†°ride(%dËi†biggîÅh™ c™vas'†°ide(%d). Lﬂd bôm≠Éº‹!\n", 
°ride
, 
pVideoLogo
->stride);

419 i‡(
h
 > 
pVideoLogo
->
height
)

421 
	`¥ötf
("Bôm≠'†height(%dËi†biggîÅh™ c™vas'†height(%d). Lﬂd bôm≠Éº‹!\n", 
h
, 
pVideoLogo
->
height
);

425 i‡(
w
 > 
pVideoLogo
->
width
)

427 
	`¥ötf
("Bôm≠'†width(%dËi†biggîÅh™ c™vas'†width(%d). Lﬂd bôm≠Éº‹!\n", 
w
, 
pVideoLogo
->
width
);

431 
	`f£ek
(
pFûe
, 
bmpFûeHódî
.
bfOffBôs
, 0);

432 i‡(
	`‰ód
(
pOrigBMPBuf
, 1, 
h
 * 
°ride
, 
pFûe
) != (h * stride) )

434 
	`¥ötf
("‰ód (%d*%dÎº‹!löe:%d\n", 
h
, 
°ride
, 
__LINE__
);

435 
	`≥º‹
("fread:");

438 
i
 = 0; i < 
h
; i++)

440 
j
 = 0; j < 
w
; j++)

442 i‡(
Bµ
 == 3)

444 
íFmt
)

446 
OSD_COLOR_FMT_RGB444
:

447 
OSD_COLOR_FMT_RGB555
:

448 
OSD_COLOR_FMT_RGB565
:

449 
OSD_COLOR_FMT_RGB1555
:

450 
OSD_COLOR_FMT_RGB4444
:

452 
pSèπ
 = 
pOrigBMPBuf
 + ((
h
 - 1Ë- 
i
Ë* 
°ride
 + 
j
 * 
Bµ
;

453 
pD°
 = (
HI_U16
*)(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 2);

454 
r
 = *(
pSèπ
);

455 
g
 = *(
pSèπ
 + 1);

456 
b
 = *(
pSèπ
 + 2);

459 *
pD°
 = 
	`OSD_MAKECOLOR_U16
(
r
, 
g
, 
b
, 
s_OSDCompInfo
[
íFmt
]);

463 
OSD_COLOR_FMT_RGB888
:

464 
OSD_COLOR_FMT_RGB8888
:

465 
	`mem˝y
(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 4, 
pOrigBMPBuf
 + ((
h
 - 1Ë- i)*°ridê+ j * 
Bµ
, Bpp);

466 *(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 4 + 3) = 0xff;

470 
	`¥ötf
("fûe(%s),Üöe(%d),Çÿsuch f‹m©!\n", 
__FILE__
, 
__LINE__
);

474 i‡((
Bµ
 == 2) || (Bpp == 4))

476 
	`mem˝y
(
pRGBBuf
 + 
i
 * 
pVideoLogo
->
°ride
 + 
j
 * 
Bµ
, 
pOrigBMPBuf
 + ((
h
 - 1) - i)*stride + j * Bpp, Bpp);

483 
	`‰ì
(
pOrigBMPBuf
);

484 
pOrigBMPBuf
 = 
NULL
;

486 
	`f˛o£
(
pFûe
);

488 
	}
}

490 * 
	$GëExtName
(* 
fûíame
)

492 * 
¥ë
 = 
NULL
;

493 
HI_U32
 
‚Lí
;

495 i‡(
NULL
 =
fûíame
)

497 
	`¥ötf
("filename can't beÇull!");

498  
NULL
;

501 
‚Lí
 = 
	`°æí
(
fûíame
);

502 
‚Lí
)

504 
¥ë
 = 
fûíame
 + 
‚Lí
;

505 i‡(*
¥ë
 == '.')

506 {  (
¥ë
 + 1); }

508 
‚Lí
--;

511  
¥ë
;

512 
	}
}

515 
	$LﬂdImage
(c⁄° * 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
)

517 * 
ext
 = 
	`GëExtName
((*)
fûíame
);

519 i‡(
	`°rcmp
(
ext
, "bmp") == 0)

521 i‡(0 !
	`LﬂdBMP
(
fûíame
, 
pVideoLogo
))

523 
	`¥ötf
("OSD_LoadBMPÉrror!\n");

529 
	`¥ötf
("not supported image file!\n");

534 
	}
}

536 
	$LﬂdImageEx
(c⁄° * 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

538 * 
ext
 = 
	`GëExtName
((*)
fûíame
);

540 i‡(
	`°rcmp
(
ext
, "bmp") == 0)

542 i‡(0 !
	`LﬂdBMPEx
(
fûíame
, 
pVideoLogo
, 
íFmt
))

544 
	`¥ötf
("OSD_LoadBMPÉrror!\n");

550 
	`¥ötf
("not supported image file!\n");

555 
	}
}

558 
	$LﬂdC™vasEx
(c⁄° * 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

560 * 
ext
 = 
	`GëExtName
((*)
fûíame
);

562 i‡(
	`°rcmp
(
ext
, "bmp") == 0)

564 i‡(0 !
	`LﬂdBMPC™vas
(
fûíame
, 
pVideoLogo
, 
íFmt
))

566 
	`¥ötf
("OSD_LoadBMPÉrror!\n");

572 
	`¥ötf
("not supported image file!\n");

577 
	}
}

580 
HI_S32
 
	$LﬂdBôM≠2SurÁ˚
(c⁄° 
HI_CHAR
* 
pszFûeName
, c⁄° 
OSD_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
)

582 
OSD_LOGO_T
 
°Logo
;

583 
°Logo
.
°ride
 = 
p°SurÁ˚
->
u16Såide
;

584 
°Logo
.
pRGBBuf„r
 = 
pu8Vút
;

586  
	`LﬂdImage
(
pszFûeName
, &
°Logo
);

587 
	}
}

589 
HI_S32
 
	$Cª©eSurÁ˚ByBôM≠
(c⁄° 
HI_CHAR
* 
pszFûeName
, 
OSD_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
)

591 
OSD_LOGO_T
 
°Logo
;

592 
°Logo
.
pRGBBuf„r
 = 
pu8Vút
;

593 i‡(
	`LﬂdImageEx
(
pszFûeName
, &
°Logo
, 
p°SurÁ˚
->
íCﬁ‹Fmt
) < 0)

595 
	`¥ötf
("load bmpÉrror!\n");

599 
p°SurÁ˚
->
u16Height
 = 
°Logo
.
height
;

600 
p°SurÁ˚
->
u16Width
 = 
°Logo
.
width
;

601 
p°SurÁ˚
->
u16Såide
 = 
°Logo
.
°ride
;

604 
	}
}

607 
HI_S32
 
	$Cª©eSurÁ˚ByC™vas
(c⁄° 
HI_CHAR
* 
pszFûeName
, 
OSD_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
, 
HI_U32
 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32Såide
)

609 
OSD_LOGO_T
 
°Logo
;

610 
°Logo
.
pRGBBuf„r
 = 
pu8Vút
;

611 
°Logo
.
width
 = 
u32Width
;

612 
°Logo
.
height
 = 
u32Height
;

613 
°Logo
.
°ride
 = 
u32Såide
;

614 i‡(
	`LﬂdC™vasEx
(
pszFûeName
, &
°Logo
, 
p°SurÁ˚
->
íCﬁ‹Fmt
) < 0)

616 
	`¥ötf
("load bmpÉrror!\n");

620 
p°SurÁ˚
->
u16Height
 = 
u32Height
;

621 
p°SurÁ˚
->
u16Width
 = 
u32Width
;

622 
p°SurÁ˚
->
u16Såide
 = 
u32Såide
;

625 
	}
}

	@sample/common/loadbmp.h

1 #i‚de‡ 
__LOAD_BMP_H__


2 
	#__LOAD_BMP_H__


	)

4 
	~"hi_ty≥.h
"

6 #ifde‡
__˝lu•lus


7 #i‡
__˝lu•lus


14 
	ehiOSD_COLOR_FMT_E


16 
OSD_COLOR_FMT_RGB444
 = 0,

17 
OSD_COLOR_FMT_RGB4444
 = 1,

18 
OSD_COLOR_FMT_RGB555
 = 2,

19 
OSD_COLOR_FMT_RGB565
 = 3,

20 
OSD_COLOR_FMT_RGB1555
 = 4,

21 
OSD_COLOR_FMT_RGB888
 = 6,

22 
OSD_COLOR_FMT_RGB8888
 = 7,

23 
OSD_COLOR_FMT_BUTT


24 } 
	tOSD_COLOR_FMT_E
;

26 
	shiOSD_RGB_S


28 
HI_U8
 
u8B
;

29 
HI_U8
 
u8G
;

30 
HI_U8
 
u8R
;

31 
HI_U8
 
u8Re£rved
;

32 } 
	tOSD_RGB_S
;

34 
	shiOSD_SURFACE_S


36 
OSD_COLOR_FMT_E
 
íCﬁ‹Fmt
;

37 
HI_U8
* 
pu8PhyAddr
;

38 
HI_U16
 
u16Height
;

39 
HI_U16
 
u16Width
;

40 
HI_U16
 
u16Såide
;

41 
HI_U16
 
u16Re£rved
;

42 } 
	tOSD_SURFACE_S
;

44 
	sèg_OSD_Logo


46 
HI_U32
 
width
;

47 
HI_U32
 
height
;

48 
HI_U32
 
°ride
;

49 
HI_U8
* 
pRGBBuf„r
;

50 } 
	tOSD_LOGO_T
;

52 
	sèg_OSD_BITMAPINFOHEADER


54 
HI_U16
 
biSize
;

55 
HI_U32
 
biWidth
;

56 
HI_S32
 
biHeight
;

57 
HI_U16
 
biPœ√s
;

58 
HI_U16
 
biBôCou¡
;

59 
HI_U32
 
biCom¥essi⁄
;

60 
HI_U32
 
biSizeImage
;

61 
HI_U32
 
biXPñsPîMëî
;

62 
HI_U32
 
biYPñsPîMëî
;

63 
HI_U32
 
biCÃU£d
;

64 
HI_U32
 
biCÃImp‹è¡
;

65 } 
	tOSD_BITMAPINFOHEADER
;

67 
	sèg_OSD_BITMAPFILEHEADER


69 
HI_U32
 
bfSize
;

70 
HI_U16
 
bfRe£rved1
;

71 
HI_U16
 
bfRe£rved2
;

72 
HI_U32
 
bfOffBôs
;

73 } 
	tOSD_BITMAPFILEHEADER
;

75 
	sèg_OSD_RGBQUAD


77 
HI_U8
 
rgbBlue
;

78 
HI_U8
 
rgbGªí
;

79 
HI_U8
 
rgbRed
;

80 
HI_U8
 
rgbRe£rved
;

81 } 
	tOSD_RGBQUAD
;

83 
	sèg_OSD_BITMAPINFO


85 
OSD_BITMAPINFOHEADER
 
bmiHódî
;

86 
OSD_RGBQUAD
 
bmiCﬁ‹s
[1];

87 } 
	tOSD_BITMAPINFO
;

89 
	shiOSD_COMPONENT_INFO_S


91 
Æí
;

92 
æí
;

93 
gÀn
;

94 
bÀn
;

95 } 
	tOSD_COMP_INFO
;

97 
HI_S32
 
LﬂdImage
(c⁄° 
HI_CHAR
* 
fûíame
, 
OSD_LOGO_T
* 
pVideoLogo
);

98 
HI_S32
 
LﬂdBôM≠2SurÁ˚
(c⁄° 
HI_CHAR
* 
pszFûeName
, c⁄° 
OSD_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
);

99 
HI_S32
 
Cª©eSurÁ˚ByBôM≠
(c⁄° 
HI_CHAR
* 
pszFûeName
, 
OSD_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
);

100 
HI_S32
 
Cª©eSurÁ˚ByC™vas
(c⁄° 
HI_CHAR
* 
pszFûeName
, 
OSD_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
, 
HI_U32
 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32Såide
);

101 
HI_S32
 
GëBmpInfo
(c⁄° 
HI_CHAR
* 
fûíame
, 
OSD_BITMAPFILEHEADER
* 
pBmpFûeHódî
, 
OSD_BITMAPINFO
* 
pBmpInfo
);

104 #ifde‡
__˝lu•lus


105 #i‡
__˝lu•lus


	@sample/common/sample_comm.h

9 #i‚de‡
__SAMPLE_COMM_H__


10 
	#__SAMPLE_COMM_H__


	)

12 
	~"hi_comm⁄.h
"

13 
	~"hi_comm_sys.h
"

14 
	~"hi_comm_vb.h
"

15 
	~"hi_comm_i•.h
"

16 
	~"hi_comm_vi.h
"

17 
	~"hi_comm_vo.h
"

18 
	~"hi_comm_víc.h
"

19 
	~"hi_comm_vpss.h
"

20 
	~"hi_comm_vdec.h
"

21 
	~"hi_comm_vda.h
"

22 
	~"hi_comm_ªgi⁄.h
"

23 
	~"hi_comm_adec.h
"

24 
	~"hi_comm_´nc.h
"

25 
	~"hi_comm_ai.h
"

26 
	~"hi_comm_ao.h
"

27 
	~"hi_comm_aio.h
"

28 
	~"hi_deföes.h
"

30 
	~"mpi_sys.h
"

31 
	~"mpi_vb.h
"

32 
	~"mpi_vi.h
"

33 
	~"mpi_vo.h
"

34 
	~"mpi_víc.h
"

35 
	~"mpi_vpss.h
"

36 
	~"mpi_vdec.h
"

37 
	~"mpi_vda.h
"

38 
	~"mpi_ªgi⁄.h
"

39 
	~"mpi_adec.h
"

40 
	~"mpi_´nc.h
"

41 
	~"mpi_ai.h
"

42 
	~"mpi_ao.h
"

43 
	~"mpi_i•.h
"

44 
	~"mpi_´.h
"

45 
	~"mpi_awb.h
"

46 
	~"mpi_af.h
"

47 
	~"hi_vªg.h
"

48 
	~"hi_¢s_˘æ.h
"

51 #ifde‡
__˝lu•lus


52 #i‡
__˝lu•lus


60 
	#FILE_NAME_LEN
 128

	)

62 
	#ALIGN_BACK
(
x
, 
a
Ë(◊Ë* (((xË/ (a))))

	)

63 
	#SAMPLE_SYS_ALIGN_WIDTH
 64

	)

64 
	#CHECK_CHN_RET
(
ex¥ess
,
Chn
,
«me
)\

66 
HI_S32
 
Rë
;\

67 
Rë
 = 
ex¥ess
;\

68 i‡(
HI_SUCCESS
 !
Rë
)\

70 
	`¥ötf
("\033[0;31m%†ch¿%d faûedáà%s: LINE: %d wôh %#x!\033[0;39m\n", 
«me
, 
Chn
, 
__FUNCTION__
, 
__LINE__
, 
Rë
);\

71 
	`fÊush
(
°dout
);\

72  
Rë
;\

74 }0)

	)

76 
	#CHECK_RET
(
ex¥ess
,
«me
)\

78 
HI_S32
 
Rë
;\

79 
Rë
 = 
ex¥ess
;\

80 i‡(
HI_SUCCESS
 !
Rë
)\

82 
	`¥ötf
("\033[0;31m%†Áûedáà%s: LINE: %d wôh %#x!\033[0;39m\n", 
«me
, 
__FUNCTION__
, 
__LINE__
, 
Rë
);\

83  
Rë
;\

85 }0)

	)

86 
	#SAMPLE_PIXEL_FORMAT
 
PIXEL_FORMAT_YUV_SEMIPLANAR_420


	)

88 
	#TW2865_FILE
 "/dev/tw2865dev"

	)

89 
	#TW2960_FILE
 "/dev/tw2960dev"

	)

90 
	#TLV320_FILE
 "/dev/év320aic31"

	)

93 #i‡(
HICHIP
 =
HI3516A_V100
)

94 
	#SAMPLE_VO_DEV_DSD1
 0

	)

95 
	#SAMPLE_VO_DEV_DSD0
 
SAMPLE_VO_DEV_DSD1


	)

97 #îr‹ 
HICHIP
 
deföe
 
may
 
be
 
îr‹


101 
	#SAMPLE_ENABLE
 1

	)

102 
	#SAMPLE_DISABLE
 0

	)

103 
	#SAMPLE_NOUSE
 -1

	)

105 
	#SENSOR_HEIGHT
 1080

	)

106 
	#SENSOR_WIDTH
 1920

	)

108 
	#SAMPLE_AUDIO_AI_DEV
 0

	)

109 
	#SAMPLE_AUDIO_AO_DEV
 0

	)

110 
	#SAMPLE_AUDIO_PTNUMPERFRM
 320

	)

112 
	#VI_MST_NOTPASS_WITH_VALUE_RETURN
(
s32TempRë
) \

114 
	`NOT_PASS
(
s32TempRë
);\

115 
	`VIMST_ExôMµ
();\

116  
s32TempRë
;\

117 }0)

	)

119 
	#VI_PAUSE
() do {\

120 
	`¥ötf
("---------------pressány keyÅoÉxit!---------------\n");\

121 
	`gëch¨
();\

122 } 0)

	)

125 
	#SAMPLE_PRT
(
fmt
...) \

127 
	`¥ötf
("[%s]-%d: ", 
__FUNCTION__
, 
__LINE__
);\

128 
	`¥ötf
(
fmt
);\

129 }0)

	)

131 
	#CHECK_NULL_PTR
(
±r
)\

133 if(
NULL
 =
±r
)\

135 
	`¥ötf
("func:%s,löe:%d, NULLÖoöãr\n",
__FUNCTION__
,
__LINE__
);\

136  
HI_FAILURE
;\

138 }0)

	)

145 
	eßm∂e_i•cfg_›t_e


147 
CFG_OPT_NONE
 = 0,

148 
CFG_OPT_SAVE
 = 1,

149 
CFG_OPT_LOAD
 = 2,

150 
CFG_OPT_BUTT


151 } 
	tSAMPLE_CFG_OPT_E
;

153 
	eßm∂e_vi_mode_e


155 
APTINA_AR0130_DC_720P_30FPS
 = 0,

156 
APTINA_9M034_DC_720P_30FPS
,

157 
SONY_IMX122_DC_1080P_30FPS
,

158 
APTINA_MT9P006_DC_1080P_30FPS
,

159 
SAMPLE_VI_MODE_1_D1
,

160 
SAMPLE_VI_MODE_BT1120_1080I
,

161 
SAMPLE_VI_MODE_BT1120_720P
,

162 
SAMPLE_VI_MODE_BT1120_1080P
,

163 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
,

164 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
,

165 
SONY_IMX178_LVDS_1080P_30FPS
,

166 
SONY_IMX185_MIPI_1080P_30FPS
,

167 
PANASONIC_MN34220_MIPI_1080P_30FPS
,

168 
PANASONIC_MN34220_MIPI_720P_120FPS
,

169 
SONY_IMX178_LVDS_5M_30FPS
,

170 
SONY_IMX117_LVDS_1080P_30FPS
,

171 
SONY_IMX117_LVDS_720P_30FPS
,

172 
SONY_IMX123_LVDS_QXGA_30FPS
,

173 
APTINA_AR0230_HISPI_1080P_30FPS
,

174 
APTINA_AR0330_MIPI_1080P_30FPS
,

175 
APTINA_AR0330_MIPI_1536P_25FPS
,

176 
APTINA_AR0330_MIPI_1296P_25FPS
,

177 
OMNIVISION_OV4689_MIPI_4M_30FPS
,

178 
OMNIVISION_OV4689_MIPI_1080P_30FPS
,

179 
OMNIVISION_OV5658_MIPI_5M_30FPS
,

180 } 
	tSAMPLE_VI_MODE_E
;

184 
VI_DEV_BT656_D1_1MUX
 = 0,

185 
VI_DEV_BT656_D1_4MUX
,

186 
VI_DEV_BT656_960H_1MUX
,

187 
VI_DEV_BT656_960H_4MUX
,

188 
VI_DEV_720P_HD_1MUX
,

189 
VI_DEV_1080P_HD_1MUX
,

190 
VI_DEV_BUTT


191 } 
	tSAMPLE_VI_DEV_TYPE_E
;

193 
	eßm∂e_vi_chn_£t_e


195 
VI_CHN_SET_NORMAL
 = 0,

196 
VI_CHN_SET_MIRROR
,

197 
VI_CHN_SET_FLIP
,

198 
VI_CHN_SET_FLIP_MIRROR


199 } 
	tSAMPLE_VI_CHN_SET_E
;

201 
	eßm∂e_vo_mode_e


203 
VO_MODE_1MUX
 = 0,

204 
VO_MODE_2MUX
 = 1,

205 
VO_MODE_BUTT


206 } 
	tSAMPLE_VO_MODE_E
;

208 
	eßm∂e_rc_e


210 
SAMPLE_RC_CBR
 = 0,

211 
SAMPLE_RC_VBR
,

212 
SAMPLE_RC_FIXQP


213 } 
	tSAMPLE_RC_E
;

215 
	eßm∂e_rgn_ch™ge_ty≥_e


217 
RGN_CHANGE_TYPE_FGALPHA
 = 0,

218 
RGN_CHANGE_TYPE_BGALPHA
,

219 
RGN_CHANGE_TYPE_LAYER


220 } 
	tSAMPLE_RGN_CHANGE_TYPE_EN
;

226 
	sßm∂e_vi_∑øm_s


228 
HI_S32
 
s32ViDevC¡
;

229 
HI_S32
 
s32ViDevI¡îvÆ
;

230 
HI_S32
 
s32ViChnC¡
;

231 
HI_S32
 
s32ViChnI¡îvÆ
;

232 } 
	tSAMPLE_VI_PARAM_S
;

234 
	sßm∂e_video_loss_s


236 
HI_BOOL
 
bSèπ
;

237 
±hªad_t
 
Pid
;

238 
SAMPLE_VI_MODE_E
 
íViMode
;

239 } 
	tSAMPLE_VIDEO_LOSS_S
;

242 
	sßm∂e_vi_‰ame_öfo_s


244 
VB_BLK
 
VbBlk
;

245 
VIDEO_FRAME_INFO_S
 
°VideoFøme
;

246 
HI_U32
 
u32FrmSize
;

247 } 
	tSAMPLE_VI_FRAME_INFO_S
;

250 
	sßm∂e_víc_gë°ªam_s


252 
HI_BOOL
 
bThªadSèπ
;

253 
HI_S32
 
s32C¡
;

254 } 
	tSAMPLE_VENC_GETSTREAM_PARA_S
;

256 
	sßm∂e_vi_c⁄fig_s


258 
SAMPLE_VI_MODE_E
 
íViMode
;

259 
VIDEO_NORM_E
 
íN‹m
;

260 
ROTATE_E
 
íRŸ©e
;

261 
SAMPLE_VI_CHN_SET_E
 
íViChnSë
;

262 
WDR_MODE_E
 
íWDRMode
;

263 } 
	tSAMPLE_VI_CONFIG_S
;

269 
HI_S32
 
SAMPLE_COMM_SYS_GëPicSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
SIZE_S
* 
p°Size
);

270 
HI_U32
 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
PIXEL_FORMAT_E
 
íPixFmt
, HI_U32 
u32AlignWidth
);

271 
HI_U32
 
VI_COMM_SYS_CÆcPicVbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, HI_U32 
u32Width
 , HI_U32 
u32Height
, 
PIXEL_FORMAT_E
 
íPixFmt
, HI_U32 
u32AlignWidth
);

272 
HI_S32
 
SAMPLE_COMM_SYS_MemC⁄fig
(
HI_VOID
);

273 
HI_VOID
 
SAMPLE_COMM_SYS_Exô
();

274 
HI_S32
 
SAMPLE_COMM_SYS_Inô
(
VB_CONF_S
* 
p°VbC⁄f
);

275 
HI_S32
 
SAMPLE_COMM_SYS_Paylﬂd2FûePo°fix
(
PAYLOAD_TYPE_E
 
íPaylﬂd
, 
HI_CHAR
* 
szFûePo°fix
);

277 
HI_S32
 
SAMPLE_COMM_ISP_Inô
(
WDR_MODE_E
 
íWDRMode
);

278 
HI_VOID
 
SAMPLE_COMM_ISP_St›
();

279 
HI_S32
 
SAMPLE_COMM_ISP_Run
();

280 
HI_S32
 
SAMPLE_COMM_ISP_Ch™geSís‹Mode
(
HI_U8
 
u8Mode
);

282 
HI_S32
 
SAMPLE_COMM_VI_GëSizeBySís‹
(
PIC_SIZE_E
* 
≥nSize
);

283 
HI_S32
 
SAMPLE_COMM_VI_Mode2P¨am
(
SAMPLE_VI_MODE_E
 
íViMode
, 
SAMPLE_VI_PARAM_S
* 
p°ViP¨am
);

284 
HI_S32
 
SAMPLE_COMM_VI_Mode2Size
(
SAMPLE_VI_MODE_E
 
íViMode
, 
VIDEO_NORM_E
 
íN‹m
, 
SIZE_S
* 
p°Size
);

285 
VI_DEV
 
SAMPLE_COMM_VI_GëDev
(
SAMPLE_VI_MODE_E
 
íViMode
, 
VI_CHN
 
ViChn
);

286 
HI_S32
 
SAMPLE_COMM_VI_SèπDev
(
VI_DEV
 
ViDev
, 
SAMPLE_VI_MODE_E
 
íViMode
);

287 
HI_S32
 
SAMPLE_COMM_VI_SèπChn
(
VI_CHN
 
ViChn
, 
RECT_S
* 
p°C≠Re˘
, 
SIZE_S
* 
p°T¨Size
, 
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
);

288 
HI_S32
 
SAMPLE_COMM_VI_SèπBT656
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
);

289 
HI_S32
 
SAMPLE_COMM_VI_St›BT656
(
SAMPLE_VI_MODE_E
 
íViMode
);

290 
HI_S32
 
SAMPLE_COMM_VI_BödVpss
(
SAMPLE_VI_MODE_E
 
íViMode
);

291 
HI_S32
 
SAMPLE_COMM_VI_UnBödVpss
(
SAMPLE_VI_MODE_E
 
íViMode
);

292 
HI_S32
 
SAMPLE_COMM_VI_BödVíc
(
SAMPLE_VI_MODE_E
 
íViMode
);

293 
HI_S32
 
SAMPLE_COMM_VI_SèπMIPI
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
);

294 
HI_S32
 
SAMPLE_COMM_VI_UnBödVíc
(
SAMPLE_VI_MODE_E
 
íViMode
);

295 
HI_S32
 
SAMPLE_COMM_VI_MemC⁄fig
(
SAMPLE_VI_MODE_E
 
íViMode
);

296 
HI_S32
 
SAMPLE_COMM_VI_GëVFømeFromYUV
(
FILE
* 
pYUVFûe
, 
HI_U32
 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32Såide
, 
VIDEO_FRAME_INFO_S
* 
p°VFømeInfo
);

297 
HI_S32
 
SAMPLE_COMM_VI_Ch™geC≠Size
(
VI_CHN
 
ViChn
, 
HI_U32
 
u32C≠Width
, HI_U32 
u32C≠Height
, HI_U32 
u32Width
, HI_U32 
u32Height
);

298 
HI_S32
 
SAMPLE_COMM_VI_SèπVi
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
);

299 
HI_S32
 
SAMPLE_COMM_VI_St›Vi
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
);

300 
HI_S32
 
SAMPLE_COMM_VI_SwôchResP¨am
–
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
,

301 
ISP_PUB_ATTR_S
* 
p°PubAâr
,

302 
RECT_S
* 
p°C≠Re˘
 );

305 
HI_S32
 
SAMPLE_COMM_VI_SèπMIPI_BT1120
(
SAMPLE_VI_MODE_E
 
íViMode
);

307 
HI_S32
 
SAMPLE_COMM_VI_FPN_CALIBRATE_CONFIG
(c⁄° * 
Ân_fûe
,

308 
ISP_FPN_TYPE_E
 
íF≤Ty≥
,

309 
PIXEL_FORMAT_E
 
íPixñF‹m©
,

310 
COMPRESS_MODE_E
 
íCom¥essMode
,

311 
HI_U32
 
u32FrmNum
,

312 
HI_U32
 
u32Thªshﬁd
);

314 
HI_S32
 
SAMPLE_COMM_VI_CORRECTION_CONFIG
(c⁄° * 
Ân_fûe
,

315 
ISP_FPN_TYPE_E
 
íF≤Ty≥
,

316 
ISP_OP_TYPE_E
 
íOpTy≥
,

317 
HI_U32
 
u32Såígth
,

318 
PIXEL_FORMAT_E
 
íPixñF‹m©
);

320 
HI_S32
 
SAMPLE_COMM_VPSS_MemC⁄fig
();

321 
HI_S32
 
SAMPLE_COMM_VPSS_Sèπ
(HI_S32 
s32GΩC¡
, 
SIZE_S
* 
p°Size
, HI_S32 
s32ChnC¡
, 
VPSS_GRP_ATTR_S
* 
p°VpssGΩAâr
);

322 
HI_S32
 
SAMPLE_COMM_VPSS_St›
(HI_S32 
s32GΩC¡
, HI_S32 
s32ChnC¡
) ;

323 
HI_S32
 
SAMPLE_COMM_VPSS_SèπGroup
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
* 
p°VpssGΩAâr
);

324 
HI_S32
 
SAMPLE_COMM_VPSS_E«bÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
,

325 
VPSS_CHN_ATTR_S
* 
p°VpssChnAâr
,

326 
VPSS_CHN_MODE_S
* 
p°VpssChnMode
,

327 
VPSS_EXT_CHN_ATTR_S
* 
p°VpssExtChnAâr
);

328 
HI_S32
 
SAMPLE_COMM_VPSS_St›Group
(
VPSS_GRP
 
VpssGΩ
);

329 
HI_S32
 
SAMPLE_COMM_VPSS_DißbÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

331 
HI_S32
 
SAMPLE_COMM_VO_GëWH
(
VO_INTF_SYNC_E
 
íI¡fSync
, 
HI_U32
* 
pu32W
, HI_U32* 
pu32H
, HI_U32* 
pu32Frm
);

332 
HI_S32
 
SAMPLE_COMM_VO_MemC⁄fig
(
VO_DEV
 
VoDev
, 
HI_CHAR
* 
pcMmzName
);

333 
HI_S32
 
SAMPLE_COMM_VO_SèπDev
(
VO_DEV
 
VoDev
, 
VO_PUB_ATTR_S
* 
p°PubAâr
);

334 
HI_S32
 
SAMPLE_COMM_VO_St›Dev
(
VO_DEV
 
VoDev
);

335 
HI_S32
 
SAMPLE_COMM_VO_SèπLayî
(
VO_LAYER
 
VoLayî
, c⁄° 
VO_VIDEO_LAYER_ATTR_S
* 
p°LayîAâr
, 
HI_BOOL
 
bVgsBy∑ss
);

336 
HI_S32
 
SAMPLE_COMM_VO_St›Layî
(
VO_LAYER
 
VoLayî
);

337 
HI_S32
 
SAMPLE_COMM_VO_SèπChn
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
);

338 
HI_S32
 
SAMPLE_COMM_VO_St›Chn
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
);

339 
HI_S32
 
SAMPLE_COMM_VO_BödVpss
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

340 
HI_S32
 
SAMPLE_COMM_VO_UnBödVpss
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

341 
HI_S32
 
SAMPLE_COMM_VO_BödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VI_CHN
 
ViChn
);

342 
HI_S32
 
SAMPLE_COMM_VO_UnBödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

344 
HI_S32
 
SAMPLE_COMM_VENC_MemC⁄fig
(
HI_VOID
);

345 
HI_S32
 
SAMPLE_COMM_VENC_Sèπ
(
VENC_CHN
 
VícChn
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íSize
, 
SAMPLE_RC_E
 
íRcMode
, 
HI_U32
 
u32Profûe
);

346 
HI_S32
 
SAMPLE_COMM_VENC_St›
(
VENC_CHN
 
VícChn
);

347 
HI_S32
 
SAMPLE_COMM_VENC_S«pSèπ
(
VENC_CHN
 
VícChn
, 
SIZE_S
* 
p°Size
);

348 
HI_S32
 
SAMPLE_COMM_VENC_S«pPro˚ss
(
VENC_CHN
 
VícChn
);

349 
HI_S32
 
SAMPLE_COMM_VENC_S«pSt›
(
VENC_CHN
 
VícChn
);

350 
HI_S32
 
SAMPLE_COMM_VENC_SèπGëSåóm
(HI_S32 
s32C¡
);

351 
HI_S32
 
SAMPLE_COMM_VENC_St›GëSåóm
();

352 
HI_S32
 
SAMPLE_COMM_VENC_BödVpss
(
VENC_CHN
 
VícChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

353 
HI_S32
 
SAMPLE_COMM_VENC_UnBödVpss
(
VENC_CHN
 
VícChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

354 
HI_S32
 
SAMPLE_COMM_VENC_SèπGëSåóm_Svc_t
(HI_S32 
s32C¡
);

357 
HI_S32
 
SAMPLE_COMM_VDA_MdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
* 
p°Size
);

358 
HI_S32
 
SAMPLE_COMM_VDA_OdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
* 
p°Size
);

359 
HI_VOID
 
SAMPLE_COMM_VDA_MdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
);

360 
HI_VOID
 
SAMPLE_COMM_VDA_OdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
);

362 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAo
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
);

363 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAíc
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
);

364 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAícAdec
(
AENC_CHN
 
AeChn
, 
ADEC_CHN
 
AdChn
, 
FILE
* 
pAecFd
);

365 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdFûeAdec
(
ADEC_CHN
 
AdChn
, 
FILE
* 
pAdcFd
);

366 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAoVﬁCål
(
AUDIO_DEV
 
AoDev
);

367 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
);

368 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAícAdec
(
AENC_CHN
 
AeChn
);

369 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdFûeAdec
(
ADEC_CHN
 
AdChn
);

370 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAoVﬁCål
(
AUDIO_DEV
 
AoDev
);

371 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yAŒTrd
();

372 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
);

373 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
);

374 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
);

375 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
);

376 
HI_S32
 
SAMPLE_COMM_AUDIO_AícBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
);

377 
HI_S32
 
SAMPLE_COMM_AUDIO_AícUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
);

378 
HI_S32
 
SAMPLE_COMM_AUDIO_CfgAcodec
(
AIO_ATTR_S
* 
p°AioAâr
);

379 
HI_S32
 
SAMPLE_COMM_AUDIO_DißbÀAcodec
();

380 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAi
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

381 
AIO_ATTR_S
* 
p°AioAâr
, 
AUDIO_SAMPLE_RATE_E
 
íOutSam∂eR©e
, 
HI_BOOL
 
bReßm∂eEn
, 
AI_VQE_CONFIG_S
* 
p°AiVqeAâr
);

382 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ai
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
, 
HI_BOOL
 
bReßm∂eEn
, HI_BOOL 
bVqeEn
);

383 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAo
(
AUDIO_DEV
 
AoDevId
, HI_S32 
s32AoChnC¡
,

384 
AIO_ATTR_S
* 
p°AioAâr
, 
AUDIO_SAMPLE_RATE_E
 
íInSam∂eR©e
, 
HI_BOOL
 
bReßm∂eEn
);

385 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ao
(
AUDIO_DEV
 
AoDevId
, HI_S32 
s32AoChnC¡
, 
HI_BOOL
 
bReßm∂eEn
);

386 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAíc
(HI_S32 
s32AícChnC¡
, 
HI_U32
 
u32AícPtNumPîFrm
, 
PAYLOAD_TYPE_E
 
íTy≥
);

387 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Aíc
(HI_S32 
s32AícChnC¡
);

388 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAdec
(
ADEC_CHN
 
AdChn
, 
PAYLOAD_TYPE_E
 
íTy≥
);

389 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Adec
(
ADEC_CHN
 
AdChn
);

390 
HI_VOID
 
SAMPLE_COMM_SYS_Exô
();

392 #ifde‡
__˝lu•lus


393 #i‡
__˝lu•lus


	@sample/common/sample_comm_audio.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~<±hªad.h
>

17 
	~<î∫o.h
>

18 
	~<sig«l.h
>

20 
	~"ßm∂e_comm.h
"

21 
	~"acodec.h
"

22 #ifde‡
HI_ACODEC_TYPE_TLV320AIC31


23 
	~"év320aic31.h
"

26 #ifde‡
__˝lu•lus


27 #i‡
__˝lu•lus


32 
	#ACODEC_FILE
 "/dev/acodec"

	)

34 #ifde‡
HI_ACODEC_TYPE_AK7756


35 
	~"ak7756í.h
"

36 
	#AK7756_FILE
 "/dev/ak7756í"

	)

39 
	#AUDIO_ADPCM_TYPE
 
ADPCM_TYPE_DVI4


	)

40 
	#G726_BPS
 
MEDIA_G726_40K


	)

42 
	sègSAMPLE_AENC_S


44 
HI_BOOL
 
bSèπ
;

45 
±hªad_t
 
°AícPid
;

46 
HI_S32
 
AeChn
;

47 
HI_S32
 
AdChn
;

48 
FILE
* 
pfd
;

49 
HI_BOOL
 
bSídAdChn
;

50 } 
	tSAMPLE_AENC_S
;

52 
	sègSAMPLE_AI_S


54 
HI_BOOL
 
bSèπ
;

55 
HI_S32
 
AiDev
;

56 
HI_S32
 
AiChn
;

57 
HI_S32
 
AícChn
;

58 
HI_S32
 
AoDev
;

59 
HI_S32
 
AoChn
;

60 
HI_BOOL
 
bSídAíc
;

61 
HI_BOOL
 
bSídAo
;

62 
±hªad_t
 
°AiPid
;

63 } 
	tSAMPLE_AI_S
;

65 
	sègSAMPLE_ADEC_S


67 
HI_BOOL
 
bSèπ
;

68 
HI_S32
 
AdChn
;

69 
FILE
* 
pfd
;

70 
±hªad_t
 
°AdPid
;

71 } 
	tSAMPLE_ADEC_S
;

73 
	sègSAMPLE_AO_S


75 
AUDIO_DEV
 
AoDev
;

76 
HI_BOOL
 
bSèπ
;

77 
±hªad_t
 
°AoPid
;

78 } 
	tSAMPLE_AO_S
;

80 
SAMPLE_AI_S
 
gs_°Sam∂eAi
[
AI_DEV_MAX_NUM
* 
AIO_MAX_CHN_NUM
];

81 
SAMPLE_AENC_S
 
gs_°Sam∂eAíc
[
AENC_MAX_CHN_NUM
];

82 
SAMPLE_ADEC_S
 
gs_°Sam∂eAdec
[
ADEC_MAX_CHN_NUM
];

83 
SAMPLE_AO_S
 
gs_°Sam∂eAo
[
AO_DEV_MAX_NUM
];

85 #ifde‡
HI_ACODEC_TYPE_TLV320AIC31


86 
HI_S32
 
SAMPLE_Tlv320_CfgAudio
(
AIO_MODE_E
 
íW‹kmode
, 
AUDIO_SAMPLE_RATE_E
 
íSam∂e
)

88 
HI_S32
 
ßm∂e
;

89 
HI_S32
 
vﬁ
 = 0x100;

90 
Audio_Cål
 
audio_˘æ
;

91 
s_fdTlv
 = -1;

92 
HI_BOOL
 
bPCMmode
 = 
HI_FALSE
;

93 
HI_BOOL
 
bMa°î
 = 
HI_TRUE
;

94 
HI_BOOL
 
bPCMStd
 = 
HI_FALSE
;

97 
HI_BOOL
 
b44100HzSîõs
 = 
HI_FALSE
;

99 i‡(
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

101 
ßm∂e
 = 
AC31_SET_8K_SAMPLERATE
;

103 i‡(
AUDIO_SAMPLE_RATE_12000
 =
íSam∂e
)

105 
ßm∂e
 = 
AC31_SET_12K_SAMPLERATE
;

107 i‡(
AUDIO_SAMPLE_RATE_11025
 =
íSam∂e
)

109 
b44100HzSîõs
 = 
HI_TRUE
;

110 
ßm∂e
 = 
AC31_SET_11_025K_SAMPLERATE
;

112 i‡(
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

114 
ßm∂e
 = 
AC31_SET_16K_SAMPLERATE
;

116 i‡(
AUDIO_SAMPLE_RATE_22050
 =
íSam∂e
)

118 
b44100HzSîõs
 = 
HI_TRUE
;

119 
ßm∂e
 = 
AC31_SET_22_05K_SAMPLERATE
;

121 i‡(
AUDIO_SAMPLE_RATE_24000
 =
íSam∂e
)

123 
ßm∂e
 = 
AC31_SET_24K_SAMPLERATE
;

125 i‡(
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

127 
ßm∂e
 = 
AC31_SET_32K_SAMPLERATE
;

129 i‡(
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

131 
b44100HzSîõs
 = 
HI_TRUE
;

132 
ßm∂e
 = 
AC31_SET_44_1K_SAMPLERATE
;

134 i‡(
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
)

136 
ßm∂e
 = 
AC31_SET_48K_SAMPLERATE
;

140 
¥ötf
("SAMPLE_Tlv320_CfgAudio(),ÇŸ suµ‹àíSam∂e:%d\n", 
íSam∂e
);

144 i‡(
AIO_MODE_I2S_MASTER
 =
íW‹kmode
)

146 
bPCMmode
 = 
HI_FALSE
;

147 
bMa°î
 = 
HI_FALSE
;

149 i‡(
AIO_MODE_I2S_SLAVE
 =
íW‹kmode
)

151 
bPCMmode
 = 
HI_FALSE
;

152 
bMa°î
 = 
HI_TRUE
;

154 i‡((
AIO_MODE_PCM_MASTER_NSTD
 =
íW‹kmode
Ë|| (
AIO_MODE_PCM_MASTER_STD
 ==ÉnWorkmode))

156 
bPCMmode
 = 
HI_TRUE
;

157 
bMa°î
 = 
HI_FALSE
;

159 i‡((
AIO_MODE_PCM_SLAVE_NSTD
 =
íW‹kmode
Ë|| (
AIO_MODE_PCM_SLAVE_STD
 ==ÉnWorkmode))

161 
bPCMmode
 = 
HI_TRUE
;

162 
bMa°î
 = 
HI_TRUE
;

166 
¥ötf
("SAMPLE_Tlv320_CfgAudio(),ÇŸ suµ‹àw‹kmode:%d\n\n", 
íW‹kmode
);

169 
s_fdTlv
 = 
›í
(
TLV320_FILE
, 
O_RDWR
);

170 i‡(
s_fdTlv
 < 0)

172 
¥ötf
("ˇn'à›íÅlv320,%s\n", 
TLV320_FILE
);

176 
audio_˘æ
.
chù_num
 = 0;

177 i‡(
io˘l
(
s_fdTlv
, 
SOFT_RESET
, &
audio_˘æ
))

179 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "tlv320aic31Ñeset failed");

183 
audio_˘æ
.
˘æ_mode
 = 
bMa°î
;

184 
audio_˘æ
.
if_44100hz_£rõs
 = 
b44100HzSîõs
;

185 
audio_˘æ
.
ßm∂e
 = sample;

186 
audio_˘æ
.
ßm∂eR©e
 = (
HI_U32
)
íSam∂e
;

187 
io˘l
(
s_fdTlv
, 
SET_CTRL_MODE
, &
audio_˘æ
);

190 
audio_˘æ
.
å™s_mode
 = 
bPCMmode
;

191 i‡(
io˘l
(
s_fdTlv
, 
SET_TRANSFER_MODE
, &
audio_˘æ
))

193 
¥ötf
("setÅlv320aic31Årans_modeÉrr\n");

194 
˛o£
(
s_fdTlv
);

199 i‡(
io˘l
(
s_fdTlv
, 
SET_DAC_SAMPLE
, &
audio_˘æ
))

201 
¥ötf
("ioctlÉrr1\n");

202 
˛o£
(
s_fdTlv
);

206 i‡(
io˘l
(
s_fdTlv
, 
SET_ADC_SAMPLE
, &
audio_˘æ
))

208 
¥ötf
("ioctlÉrr2\n");

209 
˛o£
(
s_fdTlv
);

214 
audio_˘æ
.
if_muã_rouã
 = 0;

215 
audio_˘æ
.
öput_Àvñ
 = 0;

216 
io˘l
(
s_fdTlv
, 
LEFT_DAC_VOL_CTRL
, &
audio_˘æ
);

217 
io˘l
(
s_fdTlv
, 
RIGHT_DAC_VOL_CTRL
, &
audio_˘æ
);

220 
audio_˘æ
.
if_powîup
 = 1;

221 
io˘l
(
s_fdTlv
, 
LEFT_DAC_POWER_SETUP
, &
audio_˘æ
);

222 i‡((
AIO_MODE_I2S_MASTER
 !
íW‹kmode
Ë&& (
AIO_MODE_I2S_SLAVE
 !=ÉnWorkmode))

224 
audio_˘æ
.
if_powîup
 = 0;

226 
io˘l
(
s_fdTlv
, 
RIGHT_DAC_POWER_SETUP
, &
audio_˘æ
);

229 i‡((
AIO_MODE_PCM_MASTER_STD
 =
íW‹kmode
Ë|| (
AIO_MODE_PCM_SLAVE_STD
 ==ÉnWorkmode))

231 
bPCMStd
 = 
HI_TRUE
;

232 
audio_˘æ
.
d©a_off£t
 = 2;

233 
io˘l
(
s_fdTlv
, 
SET_SERIAL_DATA_OFFSET
, &
audio_˘æ
);

235 i‡((
AIO_MODE_PCM_MASTER_NSTD
 =
íW‹kmode
Ë|| (
AIO_MODE_PCM_SLAVE_NSTD
 ==ÉnWorkmode))

237 
bPCMStd
 = 
HI_FALSE
;

238 
audio_˘æ
.
d©a_off£t
 = 
bPCMStd
;

239 
io˘l
(
s_fdTlv
, 
SET_SERIAL_DATA_OFFSET
, &
audio_˘æ
);

245 
audio_˘æ
.
d©a_Àngth
 = 0;

246 
io˘l
(
s_fdTlv
, 
SET_DATA_LENGTH
, &
audio_˘æ
);

249 
audio_˘æ
.
if_muã_rouã
 = 1;

250 
audio_˘æ
.
öput_Àvñ
 = 
vﬁ
;

251 
io˘l
(
s_fdTlv
, 
DACL1_2_LEFT_LOP_VOL_CTRL
, &
audio_˘æ
);

252 
io˘l
(
s_fdTlv
, 
DACR1_2_RIGHT_LOP_VOL_CTRL
, &
audio_˘æ
);

255 
audio_˘æ
.
if_muã_rouã
 = 1;

256 
audio_˘æ
.
if_powîup
 = 1;

257 
audio_˘æ
.
öput_Àvñ
 = 0;

258 
io˘l
(
s_fdTlv
, 
LEFT_LOP_OUTPUT_LEVEL_CTRL
, &
audio_˘æ
);

259 
io˘l
(
s_fdTlv
, 
RIGHT_LOP_OUTPUT_LEVEL_CTRL
, &
audio_˘æ
);

262 
audio_˘æ
.
if_muã_rouã
 = 0;

263 
audio_˘æ
.
öput_Àvñ
 = 0;

264 
io˘l
(
s_fdTlv
, 
LEFT_ADC_PGA_CTRL
, &
audio_˘æ
);

265 
io˘l
(
s_fdTlv
, 
RIGHT_ADC_PGA_CTRL
, &
audio_˘æ
);

268 
audio_˘æ
.
öput_Àvñ
 = 0;

269 
io˘l
(
s_fdTlv
, 
IN2LR_2_LEFT_ADC_CTRL
, &
audio_˘æ
);

270 
io˘l
(
s_fdTlv
, 
IN2LR_2_RIGTH_ADC_CTRL
, &
audio_˘æ
);

284 
audio_˘æ
.
if_muã_rouã
 = 1;

285 
audio_˘æ
.
öput_Àvñ
 = 9;

286 
audio_˘æ
.
if_powîup
 = 1;

287 
io˘l
(
s_fdTlv
, 
HPLOUT_OUTPUT_LEVEL_CTRL
, &
audio_˘æ
);

288 
io˘l
(
s_fdTlv
, 
HPROUT_OUTPUT_LEVEL_CTRL
, &
audio_˘æ
);

290 
˛o£
(
s_fdTlv
);

291 
¥ötf
("Setáic31 ok: bMaster = %d,ÉnWorkmode = %d,ÉnSamplerate = %d\n",

292 
bMa°î
, 
íW‹kmode
, 
íSam∂e
);

297 
HI_S32
 
SAMPLE_Tlv320_DißbÀ
()

299 
Audio_Cål
 
audio_˘æ
;

300 
s_fdTlv
 = -1;

301 
HI_S32
 
s32Rë
;

303 
s_fdTlv
 = 
›í
(
TLV320_FILE
, 
O_RDWR
);

304 i‡(
s_fdTlv
 < 0)

306 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "can't open /dev/tlv320aic31");

307  
HI_FAILURE
;

311 
audio_˘æ
.
chù_num
 = 0;

312 
s32Rë
 = 
io˘l
(
s_fdTlv
, 
SOFT_RESET
, &
audio_˘æ
);

313 i‡(
HI_SUCCESS
 !
s32Rë
)

315 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "tlv320aic31Ñeset failed");

317 
˛o£
(
s_fdTlv
);

319  
s32Rë
;

323 #ifde‡
HI_ACODEC_TYPE_AK7756


324 
HI_S32
 
SAMPLE_Ak7756í_CfgAudio
(
AIO_MODE_E
 
íW‹kmode
, 
AUDIO_SAMPLE_RATE_E
 
íSam∂e
)

326 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

327 
s_fdAk7756
 = -1;

329 
s_fdAk7756
 = 
›í
(
AK7756_FILE
, 
O_RDWR
);

330 i‡(
s_fdAk7756
 < 0)

332 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "can't open /dev/ak7756en");

333  
HI_FAILURE
;

337 i‡(
AUDIO_SAMPLE_RATE_8000
 !
íSam∂e
)

339 
¥ötf
("%s:ÇŸ suµ‹àíSam∂e:%d\n", 
__FUNCTION__
, 
íSam∂e
);

340  
HI_FAILURE
;

343 
s32Rë
 = 
io˘l
(
s_fdAk7756
, 
AK7756_SOFT_RESET
, 
NULL
 );

344 i‡(
HI_SUCCESS
 !
s32Rë
)

346 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "ak7756en softÑeset failed");

349 
˛o£
(
s_fdAk7756
);

351  
s32Rë
;

354 
HI_S32
 
SAMPLE_INNER_CODEC_CfgAudio
(
AUDIO_SAMPLE_RATE_E
 
íSam∂e
)

356 
HI_S32
 
fdAcodec
 = -1;

357 
HI_S32
 
ªt
 = 
HI_SUCCESS
;

358 
i2s_fs_£l
 = 0;

359 
iAcodecI≈utVﬁ
 = 0;

361 
fdAcodec
 = 
›í
(
ACODEC_FILE
, 
O_RDWR
);

362 i‡(
fdAcodec
 < 0)

364 
¥ötf
("%s: c™'à›í Acodec,%s\n", 
__FUNCTION__
, 
ACODEC_FILE
);

365 
ªt
 = 
HI_FAILURE
;

367 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SOFT_RESET_CTRL
))

369 
¥ötf
("Resetáudio codecÉrror\n");

372 i‡((
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

373 || (
AUDIO_SAMPLE_RATE_11025
 =
íSam∂e
)

374 || (
AUDIO_SAMPLE_RATE_12000
 =
íSam∂e
))

376 
i2s_fs_£l
 = 0x18;

378 i‡((
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

379 || (
AUDIO_SAMPLE_RATE_22050
 =
íSam∂e
)

380 || (
AUDIO_SAMPLE_RATE_24000
 =
íSam∂e
))

382 
i2s_fs_£l
 = 0x19;

384 i‡((
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

385 || (
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

386 || (
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
))

388 
i2s_fs_£l
 = 0x1a;

392 
¥ötf
("%s:ÇŸ suµ‹àíSam∂e:%d\n", 
__FUNCTION__
, 
íSam∂e
);

393 
ªt
 = 
HI_FAILURE
;

396 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_I2S1_FS
, &
i2s_fs_£l
))

398 
¥ötf
("%s: sëácode¯ßm∂êøã faûed\n", 
__FUNCTION__
);

399 
ªt
 = 
HI_FAILURE
;

414 
iAcodecI≈utVﬁ
 = 30;

415 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_INPUT_VOL
, &
iAcodecI≈utVﬁ
))

417 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

418  
HI_FAILURE
;

423 
˛o£
(
fdAcodec
);

424  
ªt
;

429 
HI_S32
 
SAMPLE_COMM_AUDIO_CfgAcodec
(
AIO_ATTR_S
* 
p°AioAâr
)

431 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

432 
HI_BOOL
 
bCodecCfg
 = 
HI_FALSE
;

433 #ifde‡
HI_ACODEC_TYPE_AK7756


435 
s32Rë
 = 
SAMPLE_Ak7756í_CfgAudio
(
p°AioAâr
->
íW‹kmode
,Ö°AioAâr->
íSam∂î©e
);

436 i‡(
HI_SUCCESS
 !
s32Rë
)

438 
¥ötf
("%s: SAMPLE_Ak7756í_CfgAudiÿÁûed\n", 
__FUNCTION__
);

439  
s32Rë
;

441 
bCodecCfg
 = 
HI_TRUE
;

444 #ifde‡
HI_ACODEC_TYPE_INNER


446 
s32Rë
 = 
SAMPLE_INNER_CODEC_CfgAudio
(
p°AioAâr
->
íSam∂î©e
);

447 i‡(
HI_SUCCESS
 !
s32Rë
)

449 
¥ötf
("%s:SAMPLE_INNER_CODEC_CfgAudiÿÁûed\n", 
__FUNCTION__
);

450  
s32Rë
;

452 
bCodecCfg
 = 
HI_TRUE
;

455 #ifde‡
HI_ACODEC_TYPE_TLV320AIC31


457 
s32Rë
 = 
SAMPLE_Tlv320_CfgAudio
(
p°AioAâr
->
íW‹kmode
,Ö°AioAâr->
íSam∂î©e
);

458 i‡(
HI_SUCCESS
 !
s32Rë
)

460 
¥ötf
("%s: SAMPLE_Tlv320_CfgAudiÿÁûed\n", 
__FUNCTION__
);

461  
s32Rë
;

463 
bCodecCfg
 = 
HI_TRUE
;

466 i‡(!
bCodecCfg
)

468 
¥ötf
("CanÇot findÅheÑight codec.\n");

469  
HI_FALSE
;

471  
HI_SUCCESS
;

477 * 
SAMPLE_COMM_AUDIO_AiProc
(* 
∑rg
)

479 
HI_S32
 
s32Rë
;

480 
HI_S32
 
AiFd
;

481 
SAMPLE_AI_S
* 
p°AiCé
 = (SAMPLE_AI_S*)
∑rg
;

482 
AUDIO_FRAME_S
 
°Føme
;

483 
AEC_FRAME_S
 
°AecFrm
;

484 
fd_£t
 
ªad_fds
;

485 
timevÆ
 
TimeoutVÆ
;

486 
AI_CHN_PARAM_S
 
°AiChnP¨a
;

488 
FILE
 *
pfd
;

489 
HI_CHAR
 
aszFûeName
[
FILE_NAME_LEN
];

491 
¢¥ötf
(
aszFûeName
, 
FILE_NAME_LEN
, "ai%d_chn%d.pcm", 
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
);

492 
pfd
 = 
f›í
(
aszFûeName
, "rb");

493 i‡(
NULL
 =
pfd
)

495 
¥ötf
("%s: o≥¿fûê%†Áûed\n", 
__FUNCTION__
, 
aszFûeName
);

496  
NULL
;

498 
¥ötf
("›íÖcm fûe:\"%s\" f‹áòok\n", 
aszFûeName
);

500 
s32Rë
 = 
HI_MPI_AI_GëChnP¨am
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°AiChnP¨a
);

501 i‡(
HI_SUCCESS
 !
s32Rë
)

503 
¥ötf
("%s: Gëáòch¿∑øm faûed\n", 
__FUNCTION__
);

504  
NULL
;

507 
°AiChnP¨a
.
u32U§FrmDïth
 = 30;

509 
s32Rë
 = 
HI_MPI_AI_SëChnP¨am
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°AiChnP¨a
);

510 i‡(
HI_SUCCESS
 !
s32Rë
)

512 
¥ötf
("%s: sëáòch¿∑øm faûed\n", 
__FUNCTION__
);

513  
NULL
;

516 
FD_ZERO
(&
ªad_fds
);

517 
AiFd
 = 
HI_MPI_AI_GëFd
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
);

518 
FD_SET
(
AiFd
, &
ªad_fds
);

520 
p°AiCé
->
bSèπ
)

522 
TimeoutVÆ
.
tv_£c
 = 1;

523 
TimeoutVÆ
.
tv_u£c
 = 0;

525 
FD_ZERO
(&
ªad_fds
);

526 
FD_SET
(
AiFd
, &
ªad_fds
);

528 
s32Rë
 = 
£À˘
(
AiFd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

529 i‡(
s32Rë
 < 0)

533 i‡(0 =
s32Rë
)

535 
¥ötf
("%s: gëáò‰amê£À˘Åimêout\n", 
__FUNCTION__
);

539 i‡(
FD_ISSET
(
AiFd
, &
ªad_fds
))

542 
mem£t
(&
°AecFrm
, 0, (
AEC_FRAME_S
));

543 
s32Rë
 = 
HI_MPI_AI_GëFøme
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°Føme
, &
°AecFrm
, 
HI_FALSE
);

544 i‡(
HI_SUCCESS
 !
s32Rë
 )

547 
¥ötf
("%s: HI_MPI_AI_GetFrame(%d, %d), failed with %#x!\n", \

548 
__FUNCTION__
, 
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, 
s32Rë
);

549 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

550  
NULL
;

556 
fwrôe
(
°Føme
.
pVúAddr
[0], 1, stFøme.
u32Lí
, 
pfd
);

559 i‡(
HI_TRUE
 =
p°AiCé
->
bSídAíc
)

561 
s32Rë
 = 
HI_MPI_AENC_SídFøme
(
p°AiCé
->
AícChn
, &
°Føme
, &
°AecFrm
);

562 i‡(
HI_SUCCESS
 !
s32Rë
 )

564 
¥ötf
("%s: HI_MPI_AENC_SendFrame(%d), failed with %#x!\n", \

565 
__FUNCTION__
, 
p°AiCé
->
AícChn
, 
s32Rë
);

566 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

567  
NULL
;

572 i‡(
HI_TRUE
 =
p°AiCé
->
bSídAo
)

574 
s32Rë
 = 
HI_MPI_AO_SídFøme
(
p°AiCé
->
AoDev
,Ö°AiCé->
AoChn
, &
°Føme
, 1000);

575 i‡(
HI_SUCCESS
 !
s32Rë
 )

577 
¥ötf
("%s: HI_MPI_AO_SendFrame(%d, %d), failed with %#x!\n", \

578 
__FUNCTION__
, 
p°AiCé
->
AoDev
,Ö°AiCé->
AoChn
, 
s32Rë
);

579 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

580  
NULL
;

586 
s32Rë
 = 
HI_MPI_AI_Rñó£Føme
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°Føme
, &
°AecFrm
);

587 i‡(
HI_SUCCESS
 !
s32Rë
 )

589 
¥ötf
("%s: HI_MPI_AI_ReleaseFrame(%d, %d), failed with %#x!\n", \

590 
__FUNCTION__
, 
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, 
s32Rë
);

591 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

592  
NULL
;

598 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

599  
NULL
;

605 * 
SAMPLE_COMM_AUDIO_AícProc
(* 
∑rg
)

607 
HI_S32
 
s32Rë
;

608 
HI_S32
 
AícFd
;

609 
SAMPLE_AENC_S
* 
p°AícCé
 = (SAMPLE_AENC_S*)
∑rg
;

610 
AUDIO_STREAM_S
 
°Såóm
;

611 
fd_£t
 
ªad_fds
;

612 
timevÆ
 
TimeoutVÆ
;

614 
FD_ZERO
(&
ªad_fds
);

615 
AícFd
 = 
HI_MPI_AENC_GëFd
(
p°AícCé
->
AeChn
);

616 
FD_SET
(
AícFd
, &
ªad_fds
);

618 
p°AícCé
->
bSèπ
)

620 
TimeoutVÆ
.
tv_£c
 = 1;

621 
TimeoutVÆ
.
tv_u£c
 = 0;

623 
FD_ZERO
(&
ªad_fds
);

624 
FD_SET
(
AícFd
, &
ªad_fds
);

626 
s32Rë
 = 
£À˘
(
AícFd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

627 i‡(
s32Rë
 < 0)

631 i‡(0 =
s32Rë
)

633 
¥ötf
("%s: gëáí¯°ªam sñe˘Åimêout\n", 
__FUNCTION__
);

637 i‡(
FD_ISSET
(
AícFd
, &
ªad_fds
))

640 
s32Rë
 = 
HI_MPI_AENC_GëSåóm
(
p°AícCé
->
AeChn
, &
°Såóm
, 
HI_FALSE
);

641 i‡(
HI_SUCCESS
 !
s32Rë
 )

643 
¥ötf
("%s: HI_MPI_AENC_GetStream(%d), failed with %#x!\n", \

644 
__FUNCTION__
, 
p°AícCé
->
AeChn
, 
s32Rë
);

645 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

646  
NULL
;

650 i‡(
HI_TRUE
 =
p°AícCé
->
bSídAdChn
)

652 
s32Rë
 = 
HI_MPI_ADEC_SídSåóm
(
p°AícCé
->
AdChn
, &
°Såóm
, 
HI_TRUE
);

653 i‡(
HI_SUCCESS
 !
s32Rë
 )

655 
¥ötf
("%s: HI_MPI_ADEC_SendStream(%d), failed with %#x!\n", \

656 
__FUNCTION__
, 
p°AícCé
->
AdChn
, 
s32Rë
);

657 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

658  
NULL
;

663 
fwrôe
(
°Såóm
.
pSåóm
, 1, stSåóm.
u32Lí
, 
p°AícCé
->
pfd
);

665 
fÊush
(
p°AícCé
->
pfd
);

668 
s32Rë
 = 
HI_MPI_AENC_Rñó£Såóm
(
p°AícCé
->
AeChn
, &
°Såóm
);

669 i‡(
HI_SUCCESS
 !
s32Rë
 )

671 
¥ötf
("%s: HI_MPI_AENC_ReleaseStream(%d), failed with %#x!\n", \

672 
__FUNCTION__
, 
p°AícCé
->
AeChn
, 
s32Rë
);

673 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

674  
NULL
;

679 
f˛o£
(
p°AícCé
->
pfd
);

680 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

681  
NULL
;

687 * 
SAMPLE_COMM_AUDIO_AdecProc
(* 
∑rg
)

689 
HI_S32
 
s32Rë
;

690 
AUDIO_STREAM_S
 
°AudioSåóm
;

691 
HI_U32
 
u32Lí
 = 640;

692 
HI_U32
 
u32RódLí
;

693 
HI_S32
 
s32AdecChn
;

694 
HI_U8
* 
pu8AudioSåóm
 = 
NULL
;

695 
SAMPLE_ADEC_S
* 
p°AdecCé
 = (SAMPLE_ADEC_S*)
∑rg
;

696 
FILE
* 
pfd
 = 
p°AdecCé
->pfd;

697 
s32AdecChn
 = 
p°AdecCé
->
AdChn
;

699 
pu8AudioSåóm
 = (
HI_U8
*)
mÆloc
((HI_U8Ë* 
MAX_AUDIO_STREAM_LEN
);

700 i‡(
NULL
 =
pu8AudioSåóm
)

702 
¥ötf
("%s: mÆlo¯Áûed!\n", 
__FUNCTION__
);

703  
NULL
;

706 
HI_TRUE
 =
p°AdecCé
->
bSèπ
)

709 
°AudioSåóm
.
pSåóm
 = 
pu8AudioSåóm
;

710 
u32RódLí
 = 
‰ód
(
°AudioSåóm
.
pSåóm
, 1, 
u32Lí
, 
pfd
);

711 i‡(
u32RódLí
 <= 0)

713 
HI_MPI_ADEC_SídEndOfSåóm
(
s32AdecChn
, 
HI_FALSE
);

714 
f£ek
(
pfd
, 0, 
SEEK_SET
);

719 
°AudioSåóm
.
u32Lí
 = 
u32RódLí
;

720 
s32Rë
 = 
HI_MPI_ADEC_SídSåóm
(
s32AdecChn
, &
°AudioSåóm
, 
HI_TRUE
);

721 i‡(
HI_SUCCESS
 !
s32Rë
)

723 
¥ötf
("%s: HI_MPI_ADEC_SendStream(%d) failed with %#x!\n", \

724 
__FUNCTION__
, 
s32AdecChn
, 
s32Rë
);

729 
‰ì
(
pu8AudioSåóm
);

730 
pu8AudioSåóm
 = 
NULL
;

731 
f˛o£
(
pfd
);

732 
p°AdecCé
->
bSèπ
 = 
HI_FALSE
;

733  
NULL
;

739 * 
SAMPLE_COMM_AUDIO_AoVﬁProc
(* 
∑rg
)

741 
HI_S32
 
s32Rë
;

742 
HI_S32
 
s32Vﬁume
;

743 
AUDIO_DEV
 
AoDev
;

744 
AUDIO_FADE_S
 
°Fade
;

745 
SAMPLE_AO_S
* 
p°AoCé
 = (SAMPLE_AO_S*)
∑rg
;

746 
AoDev
 = 
p°AoCé
->AoDev;

748 
p°AoCé
->
bSèπ
)

750 
s32Vﬁume
 = 0; s32Volume <= 6; s32Volume++)

752 
s32Rë
 = 
HI_MPI_AO_SëVﬁume
–
AoDev
, 
s32Vﬁume
);

753 i‡(
HI_SUCCESS
 !
s32Rë
)

755 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n", \

756 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

758 
¥ötf
("\r£àvﬁumê%d ", 
s32Vﬁume
);

759 
fÊush
(
°dout
);

760 
¶ìp
(2);

763 
s32Vﬁume
 = 5; s32Volume >= -15; s32Volume--)

765 
s32Rë
 = 
HI_MPI_AO_SëVﬁume
–
AoDev
, 
s32Vﬁume
);

766 i‡(
HI_SUCCESS
 !
s32Rë
)

768 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n", \

769 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

771 
¥ötf
("\r£àvﬁumê%d ", 
s32Vﬁume
);

772 
fÊush
(
°dout
);

773 
¶ìp
(2);

776 
s32Vﬁume
 = -14; s32Volume >= 0; s32Volume++)

778 
s32Rë
 = 
HI_MPI_AO_SëVﬁume
–
AoDev
, 
s32Vﬁume
);

779 i‡(
HI_SUCCESS
 !
s32Rë
)

781 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n", \

782 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

784 
¥ötf
("\r£àvﬁumê%d ", 
s32Vﬁume
);

785 
fÊush
(
°dout
);

786 
¶ìp
(2);

789 
°Fade
.
bFade
 = 
HI_TRUE
;

790 
°Fade
.
íFadeInR©e
 = 
AUDIO_FADE_RATE_128
;

791 
°Fade
.
íFadeOutR©e
 = 
AUDIO_FADE_RATE_128
;

793 
s32Rë
 = 
HI_MPI_AO_SëMuã
(
AoDev
, 
HI_TRUE
, &
°Fade
);

794 i‡(
HI_SUCCESS
 !
s32Rë
)

796 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n", \

797 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

799 
¥ötf
("\rset Ao mute ");

800 
fÊush
(
°dout
);

801 
¶ìp
(2);

803 
s32Rë
 = 
HI_MPI_AO_SëMuã
(
AoDev
, 
HI_FALSE
, 
NULL
);

804 i‡(
HI_SUCCESS
 !
s32Rë
)

806 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n", \

807 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

809 
¥ötf
("\rset Ao unmute ");

810 
fÊush
(
°dout
);

811 
¶ìp
(2);

813  
NULL
;

819 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAo
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
)

821 
SAMPLE_AI_S
* 
p°Ai
 = 
NULL
;

823 
p°Ai
 = &
gs_°Sam∂eAi
[
AiDev
 * 
AIO_MAX_CHN_NUM
 + 
AiChn
];

824 
p°Ai
->
bSídAíc
 = 
HI_FALSE
;

825 
p°Ai
->
bSídAo
 = 
HI_TRUE
;

826 
p°Ai
->
bSèπ
 = 
HI_TRUE
;

827 
p°Ai
->
AiDev
 = AiDev;

828 
p°Ai
->
AiChn
 = AiChn;

829 
p°Ai
->
AoDev
 = AoDev;

830 
p°Ai
->
AoChn
 = AoChn;

832 
±hªad_¸óã
(&
p°Ai
->
°AiPid
, 0, 
SAMPLE_COMM_AUDIO_AiProc
,ÖstAi);

834  
HI_SUCCESS
;

840 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAíc
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
)

842 
SAMPLE_AI_S
* 
p°Ai
 = 
NULL
;

844 
p°Ai
 = &
gs_°Sam∂eAi
[
AiDev
 * 
AIO_MAX_CHN_NUM
 + 
AiChn
];

845 
p°Ai
->
bSídAíc
 = 
HI_TRUE
;

846 
p°Ai
->
bSídAo
 = 
HI_FALSE
;

847 
p°Ai
->
bSèπ
 = 
HI_TRUE
;

848 
p°Ai
->
AiDev
 = AiDev;

849 
p°Ai
->
AiChn
 = AiChn;

850 
p°Ai
->
AícChn
 = 
AeChn
;

851 
±hªad_¸óã
(&
p°Ai
->
°AiPid
, 0, 
SAMPLE_COMM_AUDIO_AiProc
,ÖstAi);

853  
HI_SUCCESS
;

859 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAícAdec
(
AENC_CHN
 
AeChn
, 
ADEC_CHN
 
AdChn
, 
FILE
* 
pAecFd
)

861 
SAMPLE_AENC_S
* 
p°Aíc
 = 
NULL
;

863 i‡(
NULL
 =
pAecFd
)

865  
HI_FAILURE
;

868 
p°Aíc
 = &
gs_°Sam∂eAíc
[
AeChn
];

869 
p°Aíc
->
AeChn
 = AeChn;

870 
p°Aíc
->
AdChn
 = AdChn;

871 
p°Aíc
->
bSídAdChn
 = 
HI_TRUE
;

872 
p°Aíc
->
pfd
 = 
pAecFd
;

873 
p°Aíc
->
bSèπ
 = 
HI_TRUE
;

874 
±hªad_¸óã
(&
p°Aíc
->
°AícPid
, 0, 
SAMPLE_COMM_AUDIO_AícProc
,ÖstAenc);

876  
HI_SUCCESS
;

882 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdFûeAdec
(
ADEC_CHN
 
AdChn
, 
FILE
* 
pAdcFd
)

884 
SAMPLE_ADEC_S
* 
p°Adec
 = 
NULL
;

886 i‡(
NULL
 =
pAdcFd
)

888  
HI_FAILURE
;

891 
p°Adec
 = &
gs_°Sam∂eAdec
[
AdChn
];

892 
p°Adec
->
AdChn
 = AdChn;

893 
p°Adec
->
pfd
 = 
pAdcFd
;

894 
p°Adec
->
bSèπ
 = 
HI_TRUE
;

895 
±hªad_¸óã
(&
p°Adec
->
°AdPid
, 0, 
SAMPLE_COMM_AUDIO_AdecProc
,ÖstAdec);

897  
HI_SUCCESS
;

904 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAoVﬁCål
(
AUDIO_DEV
 
AoDev
)

906 
SAMPLE_AO_S
* 
p°AoCé
 = 
NULL
;

908 
p°AoCé
 = &
gs_°Sam∂eAo
[
AoDev
];

909 
p°AoCé
->
AoDev
 = AoDev;

910 
p°AoCé
->
bSèπ
 = 
HI_TRUE
;

911 
±hªad_¸óã
(&
p°AoCé
->
°AoPid
, 0, 
SAMPLE_COMM_AUDIO_AoVﬁProc
,ÖstAoCtl);

913  
HI_SUCCESS
;

920 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
)

922 
SAMPLE_AI_S
* 
p°Ai
 = 
NULL
;

924 
p°Ai
 = &
gs_°Sam∂eAi
[
AiDev
 * 
AIO_MAX_CHN_NUM
 + 
AiChn
];

925 i‡(
p°Ai
->
bSèπ
)

927 
p°Ai
->
bSèπ
 = 
HI_FALSE
;

929 
±hªad_joö
(
p°Ai
->
°AiPid
, 0);

933  
HI_SUCCESS
;

939 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAícAdec
(
AENC_CHN
 
AeChn
)

941 
SAMPLE_AENC_S
* 
p°Aíc
 = 
NULL
;

943 
p°Aíc
 = &
gs_°Sam∂eAíc
[
AeChn
];

944 i‡(
p°Aíc
->
bSèπ
)

946 
p°Aíc
->
bSèπ
 = 
HI_FALSE
;

948 
±hªad_joö
(
p°Aíc
->
°AícPid
, 0);

952  
HI_SUCCESS
;

958 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdFûeAdec
(
ADEC_CHN
 
AdChn
)

960 
SAMPLE_ADEC_S
* 
p°Adec
 = 
NULL
;

962 
p°Adec
 = &
gs_°Sam∂eAdec
[
AdChn
];

963 i‡(
p°Adec
->
bSèπ
)

965 
p°Adec
->
bSèπ
 = 
HI_FALSE
;

967 
±hªad_joö
(
p°Adec
->
°AdPid
, 0);

971  
HI_SUCCESS
;

977 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAoVﬁCål
(
AUDIO_DEV
 
AoDev
)

979 
SAMPLE_AO_S
* 
p°AoCé
 = 
NULL
;

981 
p°AoCé
 = &
gs_°Sam∂eAo
[
AoDev
];

982 i‡(
p°AoCé
->
bSèπ
)

984 
p°AoCé
->
bSèπ
 = 
HI_FALSE
;

985 
±hªad_ˇn˚l
(
p°AoCé
->
°AoPid
);

986 
±hªad_joö
(
p°AoCé
->
°AoPid
, 0);

990  
HI_SUCCESS
;

996 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
)

998 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

1000 
°SrcChn
.
íModId
 = 
HI_ID_ADEC
;

1001 
°SrcChn
.
s32DevId
 = 0;

1002 
°SrcChn
.
s32ChnId
 = 
AdChn
;

1003 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1004 
°De°Chn
.
s32DevId
 = 
AoDev
;

1005 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1007  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

1013 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
)

1015 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

1017 
°SrcChn
.
íModId
 = 
HI_ID_ADEC
;

1018 
°SrcChn
.
s32ChnId
 = 
AdChn
;

1019 
°SrcChn
.
s32DevId
 = 0;

1020 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1021 
°De°Chn
.
s32DevId
 = 
AoDev
;

1022 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1024  
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

1030 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
)

1032 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

1034 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1035 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1036 
°SrcChn
.
s32DevId
 = 
AiDev
;

1037 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1038 
°De°Chn
.
s32DevId
 = 
AoDev
;

1039 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1041  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

1047 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
)

1049 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

1051 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1052 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1053 
°SrcChn
.
s32DevId
 = 
AiDev
;

1054 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1055 
°De°Chn
.
s32DevId
 = 
AoDev
;

1056 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1058  
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

1064 
HI_S32
 
SAMPLE_COMM_AUDIO_AícBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
)

1066 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

1068 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1069 
°SrcChn
.
s32DevId
 = 
AiDev
;

1070 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1071 
°De°Chn
.
íModId
 = 
HI_ID_AENC
;

1072 
°De°Chn
.
s32DevId
 = 0;

1073 
°De°Chn
.
s32ChnId
 = 
AeChn
;

1075  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

1081 
HI_S32
 
SAMPLE_COMM_AUDIO_AícUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
)

1083 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

1085 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1086 
°SrcChn
.
s32DevId
 = 
AiDev
;

1087 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1088 
°De°Chn
.
íModId
 = 
HI_ID_AENC
;

1089 
°De°Chn
.
s32DevId
 = 0;

1090 
°De°Chn
.
s32ChnId
 = 
AeChn
;

1092  
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

1099 
HI_S32
 
SAMPLE_COMM_AUDIO_CfgAcodec
(
AUDIO_SAMPLE_RATE_E
 
íSam∂e
, 
HI_BOOL
 
bMicIn
)

1101 
HI_S32
 
fdAcodec
 = -1;

1102 
ACODEC_CTRL
 
°Audio˘æ
 = {0};

1104 
fdAcodec
 = 
›í
(
ACODEC_FILE
, 
O_RDWR
);

1105 i‡(
fdAcodec
 < 0)

1107 
¥ötf
("%s: c™'à›íácodec,%s\n", 
__FUNCTION__
, 
ACODEC_FILE
);

1108  
HI_FAILURE
;

1111 i‡((
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

1112 || (
AUDIO_SAMPLE_RATE_11025
 =
íSam∂e
)

1113 || (
AUDIO_SAMPLE_RATE_12000
 =
íSam∂e
))

1115 
°Audio˘æ
.
i2s_fs_£l
 = 0x18;

1117 i‡((
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

1118 || (
AUDIO_SAMPLE_RATE_22050
 =
íSam∂e
)

1119 || (
AUDIO_SAMPLE_RATE_24000
 =
íSam∂e
))

1121 
°Audio˘æ
.
i2s_fs_£l
 = 0x19;

1123 i‡((
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

1124 || (
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

1125 || (
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
))

1127 
°Audio˘æ
.
i2s_fs_£l
 = 0x1a;

1131 
¥ötf
("%s:ÇŸ suµ‹àíSam∂e:%d\n", 
__FUNCTION__
, 
íSam∂e
);

1132  
HI_FAILURE
;

1135 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_I2S1_FS
, &
°Audio˘æ
))

1137 
¥ötf
("%s: sëácode¯ßm∂êøã faûed\n", 
__FUNCTION__
);

1138  
HI_FAILURE
;

1141 i‡(
HI_TRUE
 =
bMicIn
)

1143 
°Audio˘æ
.
mixî_mic_˘æ
 = 
ACODEC_MIXER_MICIN
;

1144 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_MIXER_MIC
, &
°Audio˘æ
))

1146 
¥ötf
("%s: sëácode¯micö faûed\n", 
__FUNCTION__
);

1147  
HI_FAILURE
;

1151 
°Audio˘æ
.
gaö_mic
 = 0;

1152 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_GAIN_MICL
, &
°Audio˘æ
))

1154 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

1155  
HI_FAILURE
;

1157 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_GAIN_MICR
, &
°Audio˘æ
))

1159 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

1160  
HI_FAILURE
;

1163 
˛o£
(
fdAcodec
);

1165  
HI_SUCCESS
;

1171 
HI_S32
 
SAMPLE_COMM_AUDIO_DißbÀAcodec
()

1173  
SAMPLE_COMM_AUDIO_CfgAcodec
(
AUDIO_SAMPLE_RATE_48000
, 
HI_FALSE
);

1181 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAi
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

1182 
AIO_ATTR_S
* 
p°AioAâr
, 
AUDIO_SAMPLE_RATE_E
 
íOutSam∂eR©e
, 
HI_BOOL
 
bReßm∂eEn
, 
AI_VQE_CONFIG_S
* 
p°AiVqeAâr
)

1184 
HI_S32
 
i
;

1185 
HI_S32
 
s32Rë
;

1187 
s32Rë
 = 
HI_MPI_AI_SëPubAâr
(
AiDevId
, 
p°AioAâr
);

1188 i‡(
s32Rë
)

1190 
¥ötf
("%s: HI_MPI_AI_SëPubAâr(%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
s32Rë
);

1191  
s32Rë
;

1194 
s32Rë
 = 
HI_MPI_AI_E«bÀ
(
AiDevId
);

1195 i‡(
s32Rë
)

1197 
¥ötf
("%s: HI_MPI_AI_E«bÀ(%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
s32Rë
);

1198  
s32Rë
;

1201 
i
 = 0; i < 
s32AiChnC¡
; i++)

1203 
s32Rë
 = 
HI_MPI_AI_E«bÀChn
(
AiDevId
, 
i
);

1204 i‡(
s32Rë
)

1206 
¥ötf
("%s: HI_MPI_AI_E«bÀChn(%d,%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
i
, 
s32Rë
);

1207  
s32Rë
;

1210 i‡(
HI_TRUE
 =
bReßm∂eEn
)

1212 
s32Rë
 = 
HI_MPI_AI_E«bÀReSmp
(
AiDevId
, 
i
, 
íOutSam∂eR©e
);

1213 i‡(
s32Rë
)

1215 
¥ötf
("%s: HI_MPI_AI_E«bÀReSmp(%d,%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
i
, 
s32Rë
);

1216  
s32Rë
;

1220 i‡(
NULL
 !
p°AiVqeAâr
)

1222 
s32Rë
 = 
HI_MPI_AI_SëVqeAâr
(
AiDevId
, 
i
, 
SAMPLE_AUDIO_AO_DEV
, i, 
p°AiVqeAâr
);

1223 i‡(
s32Rë
)

1225 
¥ötf
("%s: HI_MPI_AI_SëVqeAâr(%d,%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
i
, 
s32Rë
);

1226  
s32Rë
;

1229 
s32Rë
 = 
HI_MPI_AI_E«bÀVqe
(
AiDevId
, 
i
);

1230 i‡(
s32Rë
)

1232 
¥ötf
("%s: HI_MPI_AI_E«bÀVqe(%d,%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
i
, 
s32Rë
);

1233  
s32Rë
;

1238  
HI_SUCCESS
;

1244 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ai
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

1245 
HI_BOOL
 
bReßm∂eEn
, HI_BOOL 
bVqeEn
)

1247 
HI_S32
 
i
;

1248 
HI_S32
 
s32Rë
;

1250 
i
 = 0; i < 
s32AiChnC¡
; i++)

1252 i‡(
HI_TRUE
 =
bReßm∂eEn
)

1254 
s32Rë
 = 
HI_MPI_AI_DißbÀReSmp
(
AiDevId
, 
i
);

1255 i‡(
HI_SUCCESS
 !
s32Rë
)

1257 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1258  
s32Rë
;

1262 i‡(
HI_TRUE
 =
bVqeEn
)

1264 
s32Rë
 = 
HI_MPI_AI_DißbÀVqe
(
AiDevId
, 
i
);

1265 i‡(
HI_SUCCESS
 !
s32Rë
)

1267 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1268  
s32Rë
;

1272 
s32Rë
 = 
HI_MPI_AI_DißbÀChn
(
AiDevId
, 
i
);

1273 i‡(
HI_SUCCESS
 !
s32Rë
)

1275 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1276  
s32Rë
;

1280 
s32Rë
 = 
HI_MPI_AI_DißbÀ
(
AiDevId
);

1281 i‡(
HI_SUCCESS
 !
s32Rë
)

1283 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1284  
s32Rë
;

1287  
HI_SUCCESS
;

1294 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAo
(
AUDIO_DEV
 
AoDevId
, HI_S32 
s32AoChnC¡
,

1295 
AIO_ATTR_S
* 
p°AioAâr
, 
AUDIO_SAMPLE_RATE_E
 
íInSam∂eR©e
, 
HI_BOOL
 
bReßm∂eEn
)

1297 
HI_S32
 
i
;

1298 
HI_S32
 
s32Rë
;

1300 
s32Rë
 = 
HI_MPI_AO_SëPubAâr
(
AoDevId
, 
p°AioAâr
);

1301 i‡(
HI_SUCCESS
 !
s32Rë
)

1303 
¥ötf
("%s: HI_MPI_AO_SëPubAâr(%dËÁûed wôh %#x!\n", 
__FUNCTION__
, \

1304 
AoDevId
, 
s32Rë
);

1305  
HI_FAILURE
;

1308 
s32Rë
 = 
HI_MPI_AO_E«bÀ
(
AoDevId
);

1309 i‡(
HI_SUCCESS
 !
s32Rë
)

1311 
¥ötf
("%s: HI_MPI_AO_E«bÀ(%dËÁûed wôh %#x!\n", 
__FUNCTION__
, 
AoDevId
, 
s32Rë
);

1312  
HI_FAILURE
;

1315 
i
 = 0; i < 
s32AoChnC¡
; i++)

1317 
s32Rë
 = 
HI_MPI_AO_E«bÀChn
(
AoDevId
, 
i
);

1318 i‡(
HI_SUCCESS
 !
s32Rë
)

1320 
¥ötf
("%s: HI_MPI_AO_E«bÀChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
, 
i
, 
s32Rë
);

1321  
HI_FAILURE
;

1324 i‡(
HI_TRUE
 =
bReßm∂eEn
)

1326 
s32Rë
 = 
HI_MPI_AO_DißbÀReSmp
(
AoDevId
, 
i
);

1327 
s32Rë
 |
HI_MPI_AO_E«bÀReSmp
(
AoDevId
, 
i
, 
íInSam∂eR©e
);

1328 i‡(
HI_SUCCESS
 !
s32Rë
)

1330 
¥ötf
("%s: HI_MPI_AO_E«bÀReSmp(%d,%dËÁûed wôh %#x!\n", 
__FUNCTION__
, 
AoDevId
, 
i
, 
s32Rë
);

1331  
HI_FAILURE
;

1336  
HI_SUCCESS
;

1342 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ao
(
AUDIO_DEV
 
AoDevId
, HI_S32 
s32AoChnC¡
, 
HI_BOOL
 
bReßm∂eEn
)

1344 
HI_S32
 
i
;

1345 
HI_S32
 
s32Rë
;

1347 
i
 = 0; i < 
s32AoChnC¡
; i++)

1349 i‡(
HI_TRUE
 =
bReßm∂eEn
)

1351 
s32Rë
 = 
HI_MPI_AO_DißbÀReSmp
(
AoDevId
, 
i
);

1352 i‡(
HI_SUCCESS
 !
s32Rë
)

1354 
¥ötf
("%s: HI_MPI_AO_DißbÀReSm∞Áûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1355  
s32Rë
;

1359 
s32Rë
 = 
HI_MPI_AO_DißbÀChn
(
AoDevId
, 
i
);

1360 i‡(
HI_SUCCESS
 !
s32Rë
)

1362 
¥ötf
("%s: HI_MPI_AO_DißbÀCh¿Áûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1363  
s32Rë
;

1367 
s32Rë
 = 
HI_MPI_AO_DißbÀ
(
AoDevId
);

1368 i‡(
HI_SUCCESS
 !
s32Rë
)

1370 
¥ötf
("%s: HI_MPI_AO_DißbÀ faûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1371  
s32Rë
;

1374  
HI_SUCCESS
;

1380 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAíc
(HI_S32 
s32AícChnC¡
, 
HI_U32
 
u32AícPtNumPîFrm
, 
PAYLOAD_TYPE_E
 
íTy≥
)

1382 
AENC_CHN
 
AeChn
;

1383 
HI_S32
 
s32Rë
, 
i
;

1384 
AENC_CHN_ATTR_S
 
°AícAâr
;

1385 
AENC_ATTR_ADPCM_S
 
°AdpcmAíc
;

1386 
AENC_ATTR_G711_S
 
°AícG711
;

1387 
AENC_ATTR_G726_S
 
°AícG726
;

1388 
AENC_ATTR_LPCM_S
 
°AícLpcm
;

1392 
°AícAâr
.
íTy≥
 =ÉnType;

1393 
°AícAâr
.
u32BufSize
 = 30;

1394 
°AícAâr
.
u32PtNumPîFrm
 = 
u32AícPtNumPîFrm
;

1396 i‡(
PT_ADPCMA
 =
°AícAâr
.
íTy≥
)

1398 
°AícAâr
.
pVÆue
 = &
°AdpcmAíc
;

1399 
°AdpcmAíc
.
íADPCMTy≥
 = 
AUDIO_ADPCM_TYPE
;

1401 i‡(
PT_G711A
 =
°AícAâr
.
íTy≥
 || 
PT_G711U
 == stAencAttr.enType)

1403 
°AícAâr
.
pVÆue
 = &
°AícG711
;

1405 i‡(
PT_G726
 =
°AícAâr
.
íTy≥
)

1407 
°AícAâr
.
pVÆue
 = &
°AícG726
;

1408 
°AícG726
.
íG726bps
 = 
G726_BPS
;

1410 i‡(
PT_LPCM
 =
°AícAâr
.
íTy≥
)

1412 
°AícAâr
.
pVÆue
 = &
°AícLpcm
;

1416 
¥ötf
("%s: invÆidáí¯∑ylﬂdÅy≥:%d\n", 
__FUNCTION__
, 
°AícAâr
.
íTy≥
);

1417  
HI_FAILURE
;

1420 
i
 = 0; i < 
s32AícChnC¡
; i++)

1422 
AeChn
 = 
i
;

1425 
s32Rë
 = 
HI_MPI_AENC_Cª©eChn
(
AeChn
, &
°AícAâr
);

1426 i‡(
HI_SUCCESS
 !
s32Rë
)

1428 
¥ötf
("%s: HI_MPI_AENC_Cª©eChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,

1429 
AeChn
, 
s32Rë
);

1430  
s32Rë
;

1434  
HI_SUCCESS
;

1440 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Aíc
(HI_S32 
s32AícChnC¡
)

1442 
HI_S32
 
i
;

1443 
HI_S32
 
s32Rë
;

1445 
i
 = 0; i < 
s32AícChnC¡
; i++)

1447 
s32Rë
 = 
HI_MPI_AENC_De°royChn
(
i
);

1448 i‡(
HI_SUCCESS
 !
s32Rë
)

1450 
¥ötf
("%s: HI_MPI_AENC_De°royChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,

1451 
i
, 
s32Rë
);

1452  
s32Rë
;

1457  
HI_SUCCESS
;

1463 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yAŒTrd
()

1465 
HI_U32
 
u32DevId
, 
u32ChnId
;

1467 
u32DevId
 = 0; u32DevId < 
AI_DEV_MAX_NUM
; u32DevId ++)

1469 
u32ChnId
 = 0; u32ChnId < 
AIO_MAX_CHN_NUM
; u32ChnId ++)

1471 
SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
u32DevId
, 
u32ChnId
);

1475 
u32ChnId
 = 0; u32ChnId < 
AENC_MAX_CHN_NUM
; u32ChnId ++)

1477 
SAMPLE_COMM_AUDIO_De°‹yTrdAícAdec
(
u32ChnId
);

1480 
u32ChnId
 = 0; u32ChnId < 
ADEC_MAX_CHN_NUM
; u32ChnId ++)

1482 
SAMPLE_COMM_AUDIO_De°‹yTrdFûeAdec
(
u32ChnId
);

1485 
u32ChnId
 = 0; u32ChnId < 
AO_DEV_MAX_NUM
; u32ChnId ++)

1487 
SAMPLE_COMM_AUDIO_De°‹yTrdAoVﬁCål
(
u32ChnId
);

1491  
HI_SUCCESS
;

1498 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAdec
(
ADEC_CHN
 
AdChn
, 
PAYLOAD_TYPE_E
 
íTy≥
)

1500 
HI_S32
 
s32Rë
;

1501 
ADEC_CHN_ATTR_S
 
°AdecAâr
;

1502 
ADEC_ATTR_ADPCM_S
 
°Adpcm
;

1503 
ADEC_ATTR_G711_S
 
°AdecG711
;

1504 
ADEC_ATTR_G726_S
 
°AdecG726
;

1505 
ADEC_ATTR_LPCM_S
 
°AdecLpcm
;

1507 
°AdecAâr
.
íTy≥
 =ÉnType;

1508 
°AdecAâr
.
u32BufSize
 = 20;

1509 
°AdecAâr
.
íMode
 = 
ADEC_MODE_STREAM
;

1511 i‡(
PT_ADPCMA
 =
°AdecAâr
.
íTy≥
)

1513 
°AdecAâr
.
pVÆue
 = &
°Adpcm
;

1514 
°Adpcm
.
íADPCMTy≥
 = 
AUDIO_ADPCM_TYPE
 ;

1516 i‡(
PT_G711A
 =
°AdecAâr
.
íTy≥
 || 
PT_G711U
 == stAdecAttr.enType)

1518 
°AdecAâr
.
pVÆue
 = &
°AdecG711
;

1520 i‡(
PT_G726
 =
°AdecAâr
.
íTy≥
)

1522 
°AdecAâr
.
pVÆue
 = &
°AdecG726
;

1523 
°AdecG726
.
íG726bps
 = 
G726_BPS
 ;

1525 i‡(
PT_LPCM
 =
°AdecAâr
.
íTy≥
)

1527 
°AdecAâr
.
pVÆue
 = &
°AdecLpcm
;

1528 
°AdecAâr
.
íMode
 = 
ADEC_MODE_PACK
;

1532 
¥ötf
("%s: invÆidáí¯∑ylﬂdÅy≥:%d\n", 
__FUNCTION__
, 
°AdecAâr
.
íTy≥
);

1533  
HI_FAILURE
;

1537 
s32Rë
 = 
HI_MPI_ADEC_Cª©eChn
(
AdChn
, &
°AdecAâr
);

1538 i‡(
HI_SUCCESS
 !
s32Rë
)

1540 
¥ötf
("%s: HI_MPI_ADEC_Cª©eChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
, \

1541 
AdChn
, 
s32Rë
);

1542  
s32Rë
;

1550 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Adec
(
ADEC_CHN
 
AdChn
)

1552 
HI_S32
 
s32Rë
;

1554 
s32Rë
 = 
HI_MPI_ADEC_De°royChn
(
AdChn
);

1555 i‡(
HI_SUCCESS
 !
s32Rë
)

1557 
¥ötf
("%s: HI_MPI_ADEC_De°royChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,

1558 
AdChn
, 
s32Rë
);

1559  
s32Rë
;

1562  
HI_SUCCESS
;

1565 #ifde‡
__˝lu•lus


1566 #i‡
__˝lu•lus


	@sample/common/sample_comm_isp.c

9 #ifde‡
__˝lu•lus


10 #i‡
__˝lu•lus


15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/time.h
>

23 
	~<f˙é.h
>

24 
	~<î∫o.h
>

25 
	~<±hªad.h
>

26 
	~<m©h.h
>

27 
	~<uni°d.h
>

28 
	~<sig«l.h
>

29 
	~"ßm∂e_comm.h
"

31 
±hªad_t
 
gs_I•Pid
;

37 
HI_S32
 
SAMPLE_COMM_ISP_Inô
(
WDR_MODE_E
 
íWDRMode
)

39 
ISP_DEV
 
I•Dev
 = 0;

40 
HI_S32
 
s32Rë
;

41 
ISP_PUB_ATTR_S
 
°PubAâr
;

42 
ALG_LIB_S
 
°Lib
;

46 
s32Rë
 = 
£ns‹_£t_öifûe_∑th
("configs/");

47 i‡(
s32Rë
 !
HI_SUCCESS
)

49 
¥ötf
("%s: set cmos iniparser fileÖath failed with %#x!\n", \

50 
__FUNCTION__
, 
s32Rë
);

51  
s32Rë
;

56 
s32Rë
 = 
£ns‹_ªgi°î_ˇŒback
();

57 i‡(
s32Rë
 !
HI_SUCCESS
)

59 
¥ötf
("%s: sensor_register_callback failed with %#x!\n", \

60 
__FUNCTION__
, 
s32Rë
);

61  
s32Rë
;

65 
°Lib
.
s32Id
 = 0;

66 
°r˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
);

67 
s32Rë
 = 
HI_MPI_AE_Regi°î
(
I•Dev
, &
°Lib
);

68 i‡(
s32Rë
 !
HI_SUCCESS
)

70 
¥ötf
("%s: HI_MPI_AE_Regi°î faûed!\n", 
__FUNCTION__
);

71  
s32Rë
;

75 
°Lib
.
s32Id
 = 0;

76 
°r˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
);

77 
s32Rë
 = 
HI_MPI_AWB_Regi°î
(
I•Dev
, &
°Lib
);

78 i‡(
s32Rë
 !
HI_SUCCESS
)

80 
¥ötf
("%s: HI_MPI_AWB_Regi°î faûed!\n", 
__FUNCTION__
);

81  
s32Rë
;

85 
°Lib
.
s32Id
 = 0;

86 
°r˝y
(
°Lib
.
acLibName
, 
HI_AF_LIB_NAME
);

87 
s32Rë
 = 
HI_MPI_AF_Regi°î
(
I•Dev
, &
°Lib
);

88 i‡(
s32Rë
 !
HI_SUCCESS
)

90 
¥ötf
("%s: HI_MPI_AF_Regi°î faûed!\n", 
__FUNCTION__
);

91  
s32Rë
;

95 
s32Rë
 = 
HI_MPI_ISP_MemInô
(
I•Dev
);

96 i‡(
s32Rë
 !
HI_SUCCESS
)

98 
¥ötf
("%s: HI_MPI_ISP_Inô faûed!\n", 
__FUNCTION__
);

99  
s32Rë
;

103 
ISP_WDR_MODE_S
 
°WdrMode
;

104 
°WdrMode
.
íWDRMode
 =ÉnWDRMode;

105 
s32Rë
 = 
HI_MPI_ISP_SëWDRMode
(0, &
°WdrMode
);

106 i‡(
HI_SUCCESS
 !
s32Rë
)

108 
¥ötf
("start ISP WDR failed!\n");

109  
s32Rë
;

117 
SENSOR_TYPE
)

119 
APTINA_9M034_DC_720P_30FPS
:

120 
APTINA_AR0130_DC_720P_30FPS
:

121 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

122 
°PubAâr
.
f32FømeR©e
 = 30;

123 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

124 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

125 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1280;

126 
°PubAâr
.
°WndRe˘
.
u32Height
 = 720;

129 
SONY_IMX122_DC_1080P_30FPS
:

130 
°PubAâr
.
íBayî
 = 
BAYER_RGGB
;

131 
°PubAâr
.
f32FømeR©e
 = 30;

132 
°PubAâr
.
°WndRe˘
.
s32X
 = 200;

133 
°PubAâr
.
°WndRe˘
.
s32Y
 = 12;

134 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

135 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

138 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
:

139 
PANASONIC_MN34220_MIPI_1080P_30FPS
:

140 
APTINA_AR0330_MIPI_1080P_30FPS
:

141 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

142 
°PubAâr
.
f32FømeR©e
 = 30;

143 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

144 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

145 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

146 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

149 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
:

150 
PANASONIC_MN34220_MIPI_720P_120FPS
:

151 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

152 
°PubAâr
.
f32FømeR©e
 = 120;

153 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

154 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

155 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1280;

156 
°PubAâr
.
°WndRe˘
.
u32Height
 = 720;

159 
SONY_IMX178_LVDS_1080P_30FPS
:

160 
°PubAâr
.
íBayî
 = 
BAYER_GBRG
;

161 
°PubAâr
.
f32FømeR©e
 = 30;

162 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

163 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

164 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

165 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

168 
SONY_IMX178_LVDS_5M_30FPS
:

169 
°PubAâr
.
íBayî
 = 
BAYER_GBRG
;

170 
°PubAâr
.
f32FømeR©e
 = 30;

171 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

172 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

173 
°PubAâr
.
°WndRe˘
.
u32Width
 = 2592;

174 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1944;

177 
SONY_IMX185_MIPI_1080P_30FPS
:

178 
°PubAâr
.
íBayî
 = 
BAYER_RGGB
;

179 
°PubAâr
.
f32FømeR©e
 = 30;

180 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

181 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

182 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

183 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

186 
APTINA_MT9P006_DC_1080P_30FPS
:

187 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

188 
°PubAâr
.
f32FømeR©e
 = 30;

189 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

190 
°PubAâr
.
°WndRe˘
.
s32Y
 = 2;

191 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

192 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

195 
APTINA_AR0330_MIPI_1296P_25FPS
:

196 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

197 
°PubAâr
.
f32FømeR©e
 = 25;

198 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

199 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

200 
°PubAâr
.
°WndRe˘
.
u32Width
 = 2304;

201 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1296;

204 
APTINA_AR0330_MIPI_1536P_25FPS
:

205 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

206 
°PubAâr
.
f32FømeR©e
 = 25;

207 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

208 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

209 
°PubAâr
.
°WndRe˘
.
u32Width
 = 2048;

210 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1536;

213 
OMNIVISION_OV4689_MIPI_4M_30FPS
:

214 
°PubAâr
.
íBayî
 = 
BAYER_BGGR
;

215 
°PubAâr
.
f32FømeR©e
 = 30;

216 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

217 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

218 
°PubAâr
.
°WndRe˘
.
u32Width
 = 2592;

219 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1520;

222 
OMNIVISION_OV4689_MIPI_1080P_30FPS
:

223 
°PubAâr
.
íBayî
 = 
BAYER_BGGR
;

224 
°PubAâr
.
f32FømeR©e
 = 30;

225 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

226 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

227 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

228 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

231 
OMNIVISION_OV5658_MIPI_5M_30FPS
:

232 
°PubAâr
.
íBayî
 = 
BAYER_BGGR
;

233 
°PubAâr
.
f32FømeR©e
 = 30;

234 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

235 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

236 
°PubAâr
.
°WndRe˘
.
u32Width
 = 2592;

237 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1944;

240 
SONY_IMX117_LVDS_1080P_30FPS
:

241 
°PubAâr
.
íBayî
 = 
BAYER_RGGB
;

242 
°PubAâr
.
f32FømeR©e
 = 60;

243 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

244 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

245 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

246 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

249 
SONY_IMX117_LVDS_720P_30FPS
:

250 
°PubAâr
.
íBayî
 = 
BAYER_RGGB
;

251 
°PubAâr
.
f32FømeR©e
 = 120;

252 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

253 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

254 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1280;

255 
°PubAâr
.
°WndRe˘
.
u32Height
 = 720;

258 
SONY_IMX123_LVDS_QXGA_30FPS
:

259 
°PubAâr
.
íBayî
 = 
BAYER_GBRG
;

260 
°PubAâr
.
f32FømeR©e
 = 30;

261 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

262 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

263 
°PubAâr
.
°WndRe˘
.
u32Width
 = 2048;

264 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1536;

267 
APTINA_AR0230_HISPI_1080P_30FPS
:

268 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

269 
°PubAâr
.
f32FømeR©e
 = 30;

270 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

271 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

272 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

273 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

277 
°PubAâr
.
íBayî
 = 
BAYER_GRBG
;

278 
°PubAâr
.
f32FømeR©e
 = 30;

279 
°PubAâr
.
°WndRe˘
.
s32X
 = 0;

280 
°PubAâr
.
°WndRe˘
.
s32Y
 = 0;

281 
°PubAâr
.
°WndRe˘
.
u32Width
 = 1920;

282 
°PubAâr
.
°WndRe˘
.
u32Height
 = 1080;

286 
s32Rë
 = 
HI_MPI_ISP_SëPubAâr
(
I•Dev
, &
°PubAâr
);

287 i‡(
s32Rë
 !
HI_SUCCESS
)

289 
¥ötf
("%s: HI_MPI_ISP_SëPubAâ∏Áûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

290  
s32Rë
;

294 
s32Rë
 = 
HI_MPI_ISP_Inô
(
I•Dev
);

295 i‡(
s32Rë
 !
HI_SUCCESS
)

297 
¥ötf
("%s: HI_MPI_ISP_Inô faûed!\n", 
__FUNCTION__
);

298  
s32Rë
;

301  
HI_SUCCESS
;

304 
HI_VOID
* 
Te°_ISP_Run
(HI_VOID* 
∑øm
)

306 
ISP_DEV
 
I•Dev
 = 0;

307 
HI_MPI_ISP_Run
(
I•Dev
);

309  
HI_NULL
;

315 
HI_S32
 
SAMPLE_COMM_ISP_Run
()

318 i‡(0 !
±hªad_¸óã
(&
gs_I•Pid
, 0, (* (*)(*))
Te°_ISP_Run
, 
NULL
))

320 
¥ötf
("%s: cª©êi•Ñu¬ögÅhªad faûed!\n", 
__FUNCTION__
);

321  
HI_FAILURE
;

327 
	~<sched.h
>

329 
±hªad_©å_t
 
©å
;

330 
sched_∑øm
 
∑øm
;

331 
√w¥io
 = 50;

333 
±hªad_©å_öô
(&
©å
);

337 
pﬁicy
 = 0;

338 
mö
, 
max
;

340 
±hªad_©å_gëschedpﬁicy
(&
©å
, &
pﬁicy
);

341 
¥ötf
("-->deÁu…Åhªad u£Öﬁicy i†%d --<\n", 
pﬁicy
);

343 
±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

344 
±hªad_©å_gëschedpﬁicy
(&
©å
, &
pﬁicy
);

345 
¥ötf
("-->cuºíàthªad u£Öﬁicy i†%d --<\n", 
pﬁicy
);

347 
pﬁicy
)

349 
SCHED_FIFO
:

350 
¥ötf
("-->currentÅhread useÖolicy is SCHED_FIFO --<\n");

353 
SCHED_RR
:

354 
¥ötf
("-->currentÅhread useÖolicy is SCHED_RR --<\n");

357 
SCHED_OTHER
:

358 
¥ötf
("-->currentÅhread useÖolicy is SCHED_OTHER --<\n");

362 
¥ötf
("-->currentÅhread useÖolicy is UNKNOW --<\n");

366 
mö
 = 
sched_gë_¥i‹ôy_mö
(
pﬁicy
);

367 
max
 = 
sched_gë_¥i‹ôy_max
(
pﬁicy
);

369 
¥ötf
("-->cuºíàthªadÖﬁicyÖri‹ôyÑ™gê(%d ~ %dË--<\n", 
mö
, 
max
);

372 
±hªad_©å_gësched∑øm
(&
©å
, &
∑øm
);

374 
¥ötf
("-->deÁu… i•ÅhªadÖri‹ôy i†%d ,Çexàbê%d --<\n", 
∑øm
.
sched_¥i‹ôy
, 
√w¥io
);

375 
∑øm
.
sched_¥i‹ôy
 = 
√w¥io
;

376 
±hªad_©å_£tsched∑øm
(&
©å
, &
∑øm
);

378 i‡(0 !
±hªad_¸óã
(&
gs_I•Pid
, &
©å
, (* (*)(*))
HI_MPI_ISP_Run
, 
NULL
))

380 
¥ötf
("%s: cª©êi•Ñu¬ögÅhªad faûed!\n", 
__FUNCTION__
);

381  
HI_FAILURE
;

384 
±hªad_©å_de°roy
(&
©å
);

388  
HI_SUCCESS
;

394 
HI_S32
 
SAMPLE_COMM_ISP_Ch™geSís‹Mode
(
HI_U8
 
u8Mode
)

396 
ISP_DEV
 
I•Dev
 = 0;

397 
HI_S32
 
s32Rë
;

399 
ISP_WDR_MODE_S
 
°WDRMode
;

400 
°WDRMode
.
íWDRMode
 = 
u8Mode
;

401 
s32Rë
 = 
HI_MPI_ISP_SëWDRMode
(
I•Dev
, &
°WDRMode
);

402 i‡(
s32Rë
 !
HI_SUCCESS
)

404 
¥ötf
("%s: HI_MPI_ISP_SetWDRMode failed with %#x!\n",

405 
__FUNCTION__
, 
s32Rë
);

406  
s32Rë
;

409  
HI_SUCCESS
;

416 
HI_VOID
 
SAMPLE_COMM_ISP_St›
()

418 
ISP_DEV
 
I•Dev
 = 0;

419 
HI_MPI_ISP_Exô
(
I•Dev
);

421 i‡(
gs_I•Pid
)

423 
±hªad_joö
(
gs_I•Pid
, 0);

424 
gs_I•Pid
 = -1;

429 #ifde‡
__˝lu•lus


430 #i‡
__˝lu•lus


	@sample/common/sample_comm_ive.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<uni°d.h
>

11 
	~<sig«l.h
>

13 
	~"hi_comm⁄.h
"

14 
	~"hi_comm_video.h
"

15 
	~"hi_comm_sys.h
"

16 
	~"hi_comm_ive.h
"

17 
	~"hi_comm_vgs.h
"

18 
	~"hi_comm_vi.h
"

19 
	~"hi_comm_vo.h
"

21 
	~"mpi_vb.h
"

22 
	~"mpi_sys.h
"

23 
	~"mpi_vi.h
"

24 
	~"mpi_vo.h
"

26 
	~"mpi_ive.h
"

27 
	~"mpi_vgs.h
"

29 
	~"ßm∂e_comm_ive.h
"

31 
HI_BOOL
 
	gbMpiInô
 = 
HI_FALSE
;

33 
HI_U16
 
	$SAMPLE_COMM_IVE_CÆcSåide
(
HI_U16
 
u16Width
, 
HI_U8
 
u8Align
)

35  (
u16Width
 + (
u8Align
 - u16Width % u8Align) % u8Align);

36 
	}
}

38 
HI_S32
 
	$SAMPLE_IVE_MPI_Inô
(
HI_VOID
)

40 
HI_S32
 
s32Rë
;

41 
VB_CONF_S
 
°ruVbC⁄f
;

42 
MPP_SYS_CONF_S
 
°ruSysC⁄f
;

44 
	`HI_MPI_SYS_Exô
();

45 
	`HI_MPI_VB_Exô
();

47 
	`mem£t
(&
°ruVbC⁄f
, 0, (
VB_CONF_S
));

48 
°ruVbC⁄f
.
u32MaxPoﬁC¡
 = 128;

49 
°ruVbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = 1920 * 1080 * 2;

50 
°ruVbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 40;

51 
s32Rë
 = 
	`HI_MPI_VB_SëC⁄f
(&
°ruVbC⁄f
);

52 i‡(
HI_SUCCESS
 !
s32Rë
)

54 
	`SAMPLE_PRT
("HI_MPI_VB_SëC⁄‡Áû,Eº‹(%#x)\n", 
s32Rë
);

55  
s32Rë
;

57 
s32Rë
 = 
	`HI_MPI_VB_Inô
();

58 i‡(
HI_SUCCESS
 !
s32Rë
)

60 
	`SAMPLE_PRT
("HI_MPI_VB_Inô faû,Eº‹(%#x)\n", 
s32Rë
);

61  
s32Rë
;

63 
°ruSysC⁄f
.
u32AlignWidth
 = 64;

64 
s32Rë
 = 
	`HI_MPI_SYS_SëC⁄f
(&
°ruSysC⁄f
);

65 i‡(
HI_SUCCESS
 !
s32Rë
)

67 
	`SAMPLE_PRT
("HI_MPI_SYS_SëC⁄‡Áû,Eº‹(%#x)\n", 
s32Rë
);

68 (
HI_VOID
)
	`HI_MPI_VB_Exô
();

69  
s32Rë
;

72 
s32Rë
 = 
	`HI_MPI_SYS_Inô
();

73 i‡(
HI_SUCCESS
 !
s32Rë
)

75 
	`SAMPLE_PRT
("HI_MPI_SYS_Inô faû,Eº‹(%#x)\n", 
s32Rë
);

76 (
HI_VOID
)
	`HI_MPI_VB_Exô
();

77  
s32Rë
;

80  
HI_SUCCESS
;

81 
	}
}

84 
HI_VOID
 
	$SAMPLE_COMM_IVE_CheckIveMpiInô
(
HI_VOID
)

86 i‡(
HI_FALSE
 =
bMpiInô
)

88 i‡(
	`SAMPLE_IVE_MPI_Inô
())

90 
	`SAMPLE_PRT
("Ive mpi init failed!\n");

91 
	`exô
(-1);

93 
bMpiInô
 = 
HI_TRUE
;

95 
	}
}

96 
HI_S32
 
	$SAMPLE_COMM_IVE_IveMpiExô
(
HI_VOID
)

98 
bMpiInô
 = 
HI_FALSE
;

99 i‡(
	`HI_MPI_SYS_Exô
())

101 
	`SAMPLE_PRT
("SysÉxit failed!\n");

102  
HI_FAILURE
;

105 i‡(
	`HI_MPI_VB_Exô
())

107 
	`SAMPLE_PRT
("VbÉxit failed!\n");

108  
HI_FAILURE
;

111  
HI_SUCCESS
;

112 
	}
}

114 
HI_S32
 
	$SAMPLE_COMM_VGS_AddDøwRe˘Job
(
VGS_HANDLE
 
VgsH™dÀ
, 
IVE_IMAGE_S
* 
p°Src
, IVE_IMAGE_S* 
p°D°
,

115 
RECT_S
* 
p°Re˘
, 
HI_U16
 
u16Re˘Num
)

117 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

118 
VGS_TASK_ATTR_S
 
°VgsTask
;

119 
VGS_ADD_COVER_S
 
°VgsCovî
;

120 
HI_U16
 
i
;

122 
	`mem£t
(&
°VgsTask
, 0, (
VGS_TASK_ATTR_S
));

124 
°VgsTask
.
°ImgIn
.
°VFøme
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

125 
°VgsTask
.
°ImgIn
.
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

126 
°VgsTask
.
°ImgIn
.
°VFøme
.
íVideoF‹m©
 = 
VIDEO_FORMAT_LINEAR
;

127 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32Fõld
 = 
VIDEO_FIELD_FRAME
;

128 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32Width
 = 
p°Src
->
u16Width
;

129 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32Height
 = 
p°Src
->
u16Height
;

130 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32PhyAddr
[0] = 
p°Src
->u32PhyAddr[0];

132 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32PhyAddr
[1] = 
p°Src
->u32PhyAddr[1];

133 
°VgsTask
.
°ImgIn
.
°VFøme
.
pVúAddr
[0] = 
p°Src
->
pu8VúAddr
[0];

134 
°VgsTask
.
°ImgIn
.
°VFøme
.
pVúAddr
[1] = 
p°Src
->
pu8VúAddr
[1];

136 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32Såide
[0] = 
p°Src
->
u16Såide
[0];

137 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32Såide
[1] = 
p°Src
->
u16Såide
[1];

138 
°VgsTask
.
°ImgIn
.
°VFøme
.
u64±s
 = 12;

139 
°VgsTask
.
°ImgIn
.
°VFøme
.
u32TimeRef
 = 24;

141 
°VgsTask
.
°ImgOut
.
°VFøme
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

142 
°VgsTask
.
°ImgOut
.
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

143 
°VgsTask
.
°ImgOut
.
°VFøme
.
íVideoF‹m©
 = 
VIDEO_FORMAT_LINEAR
;

144 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32Fõld
 = 
VIDEO_FIELD_FRAME
;

145 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32Width
 = 
p°D°
->
u16Width
;

146 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32Height
 = 
p°D°
->
u16Height
;

147 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32PhyAddr
[0] = 
p°D°
->u32PhyAddr[0];

149 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32PhyAddr
[1] = 
p°D°
->u32PhyAddr[1];

150 
°VgsTask
.
°ImgOut
.
°VFøme
.
pVúAddr
[0] = 
p°D°
->
pu8VúAddr
[0];

151 
°VgsTask
.
°ImgOut
.
°VFøme
.
pVúAddr
[1] = 
p°D°
->
pu8VúAddr
[1];

153 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32Såide
[0] = 
p°D°
->
u16Såide
[0];

154 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32Såide
[1] = 
p°D°
->
u16Såide
[1];

155 
°VgsTask
.
°ImgOut
.
°VFøme
.
u64±s
 = 12;

156 
°VgsTask
.
°ImgOut
.
°VFøme
.
u32TimeRef
 = 24;

158 
°VgsCovî
.
íCovîTy≥
 = 
COVER_RECT
;

159 
i
 = 0; i < 
u16Re˘Num
; i++)

161 
°VgsCovî
.
°D°Re˘
.
s32X
 = (
p°Re˘
[
i
].s32X / 2) * 2;

162 
°VgsCovî
.
°D°Re˘
.
s32Y
 = (
p°Re˘
[
i
].s32Y / 2) * 2;

163 
°VgsCovî
.
°D°Re˘
.
u32Width
 = (
p°Re˘
[
i
].u32Width / 2) * 2;

164 
°VgsCovî
.
°D°Re˘
.
u32Height
 = (
p°Re˘
[
i
].u32Height / 2) * 2;

165 
°VgsCovî
.
u32Cﬁ‹
 = 0x0000FF00;

166 i‡(
°VgsCovî
.
°D°Re˘
.
s32X
 + stVgsCovî.°D°Re˘.
u32Width
 < 
°VgsTask
.
°ImgOut
.
°VFøme
.u32Width

167 && 
°VgsCovî
.
°D°Re˘
.
s32Y
 + stVgsCovî.°D°Re˘.
u32Height
 < 
°VgsTask
.
°ImgOut
.
°VFøme
.u32Height)

169 
s32Rë
 = 
	`HI_MPI_VGS_AddCovîTask
(
VgsH™dÀ
, &
°VgsTask
, &
°VgsCovî
);

170 i‡(
s32Rë
 !
HI_SUCCESS
)

172 
	`SAMPLE_PRT
("HI_MPI_VGS_AddCovîTask faû,Eº‹(%#x)\n", 
s32Rë
);

173 
	`HI_MPI_VGS_C™˚lJob
(
VgsH™dÀ
);

174  
s32Rë
;

180  
s32Rë
;

181 
	}
}

183 
HI_S32
 
	$SAMPLE_COMM_VGS_FûlRe˘
(
VIDEO_FRAME_INFO_S
* 
p°FrmInfo
, 
SAMPLE_RECT_ARRAY_S
* 
p°Re˘
, 
HI_U32
 
u32Cﬁ‹
)

185 
VGS_HANDLE
 
VgsH™dÀ
;

186 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

187 
HI_U16
 
i
;

188 
VGS_TASK_ATTR_S
 
°VgsTask
;

189 
VGS_ADD_COVER_S
 
°VgsAddCovî
;

191 i‡(0 =
p°Re˘
->
u16Num
)

193  
s32Rë
;

195 
s32Rë
 = 
	`HI_MPI_VGS_BegöJob
(&
VgsH™dÀ
);

196 i‡(
s32Rë
 !
HI_SUCCESS
)

198 
	`SAMPLE_PRT
("Vg†begö job faû,Eº‹(%#x)\n", 
s32Rë
);

199  
s32Rë
;

202 
	`mem˝y
(&
°VgsTask
.
°ImgIn
, 
p°FrmInfo
, (
VIDEO_FRAME_INFO_S
));

203 
	`mem˝y
(&
°VgsTask
.
°ImgOut
, 
p°FrmInfo
, (
VIDEO_FRAME_INFO_S
));

205 
°VgsAddCovî
.
íCovîTy≥
 = 
COVER_QUAD_RANGLE
;

206 
°VgsAddCovî
.
u32Cﬁ‹
 = u32Color;

207 
i
 = 0; i < 
p°Re˘
->
u16Num
; i++)

209 
°VgsAddCovî
.
°QuadR™gÀ
.
bSﬁid
 = 
HI_FALSE
;

210 
°VgsAddCovî
.
°QuadR™gÀ
.
u32Thick
 = 2;

211 
	`mem˝y
(
°VgsAddCovî
.
°QuadR™gÀ
.
°Poöt
, 
p°Re˘
->
a°Re˘
[
i
].
a°Poöt
, (pstRect->astRect[i].astPoint));

212 
s32Rë
 = 
	`HI_MPI_VGS_AddCovîTask
(
VgsH™dÀ
, &
°VgsTask
, &
°VgsAddCovî
);

213 i‡(
s32Rë
 !
HI_SUCCESS
)

215 
	`SAMPLE_PRT
("HI_MPI_VGS_AddCovîTask faû,Eº‹(%#x)\n", 
s32Rë
);

216 
	`HI_MPI_VGS_C™˚lJob
(
VgsH™dÀ
);

217  
s32Rë
;

222 
s32Rë
 = 
	`HI_MPI_VGS_EndJob
(
VgsH™dÀ
);

223 i‡(
s32Rë
 !
HI_SUCCESS
)

225 
	`SAMPLE_PRT
("HI_MPI_VGS_EndJob faû,Eº‹(%#x)\n", 
s32Rë
);

226 
	`HI_MPI_VGS_C™˚lJob
(
VgsH™dÀ
);

227  
s32Rë
;

229  
s32Rë
;

231 
	}
}

233 
HI_S32
 
	$SAMPLE_COMM_IVE_RódFûe
(
IVE_IMAGE_S
* 
p°Img
, 
FILE
* 
pFp
)

235 
HI_U16
 
y
;

236 
HI_U8
* 
pU8
;

237 
HI_U16
 
height
;

238 
HI_U16
 
width
;

239 
HI_U16
 
lo›
;

241 i‡(
	`„of
(
pFp
))

243 
	`SAMPLE_PRT
("end of file!\n");

244 
	`f£ek
(
pFp
, 0 , 
SEEK_SET
);

247 
height
 = 
p°Img
->
u16Height
;

248 
width
 = 
p°Img
->
u16Width
;

250 
p°Img
->
íTy≥
)

252 
IVE_IMAGE_TYPE_U8C1
:

254 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

255 
y
 = 0; y < 
height
; y++)

257 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
pFp
))

259 
	`SAMPLE_PRT
("Read file fail\n");

260  
HI_FAILURE
;

263 
pU8
 +
p°Img
->
u16Såide
[0];

267 
IVE_IMAGE_TYPE_YUV420SP
:

269 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

270 
y
 = 0; y < 
height
; y++)

272 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
pFp
))

274 
	`SAMPLE_PRT
("Read file fail\n");

275  
HI_FAILURE
;

278 
pU8
 +
p°Img
->
u16Såide
[0];

281 
pU8
 = 
p°Img
->
pu8VúAddr
[1];

282 
y
 = 0; y < 
height
 / 2; y++)

284 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
pFp
))

286 
	`SAMPLE_PRT
("Read file fail\n");

287  
HI_FAILURE
;

290 
pU8
 +
p°Img
->
u16Såide
[1];

294 
IVE_IMAGE_TYPE_YUV422SP
:

296 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

297 
y
 = 0; y < 
height
; y++)

299 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
pFp
))

301 
	`SAMPLE_PRT
("Read file fail\n");

302  
HI_FAILURE
;

305 
pU8
 +
p°Img
->
u16Såide
[0];

308 
pU8
 = 
p°Img
->
pu8VúAddr
[1];

309 
y
 = 0; y < 
height
; y++)

311 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
pFp
))

313 
	`SAMPLE_PRT
("Read file fail\n");

314  
HI_FAILURE
;

317 
pU8
 +
p°Img
->
u16Såide
[1];

321 
IVE_IMAGE_TYPE_U8C3_PACKAGE
:

323 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

324 
y
 = 0; y < 
height
; y++)

326 i‡–1 !
	`‰ód
(
pU8
, 
width
 * 3, 1, 
pFp
))

328 
	`SAMPLE_PRT
("Read file fail\n");

329  
HI_FAILURE
;

332 
pU8
 +
p°Img
->
u16Såide
[0] * 3;

337 
IVE_IMAGE_TYPE_U8C3_PLANAR
:

339 
lo›
 = 0;Üoop < 3;Üoop++)

341 
pU8
 = 
p°Img
->
pu8VúAddr
[
lo›
];

342 
y
 = 0; y < 
height
; y++)

344 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
pFp
))

346 
	`SAMPLE_PRT
("Read file fail\n");

347  
HI_FAILURE
;

350 
pU8
 +
p°Img
->
u16Såide
[
lo›
];

356 
IVE_IMAGE_TYPE_S16C1
:

357 
IVE_IMAGE_TYPE_U16C1
:

359 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

360  
y
 = 0; y < 
height
; y++ )

362 i‡–(
HI_U16
Ë!
	`‰ód
(
pU8
, 
width
, (HI_U16), 
pFp
) )

364 
	`SAMPLE_PRT
("Read file fail\n");

365  
HI_FAILURE
;

368 
pU8
 +
p°Img
->
u16Såide
[0] * 2;

376  
HI_SUCCESS
;

377 
	}
}

379 
HI_S32
 
	$SAMPLE_COMM_IVE_WrôeFûe
(
IVE_IMAGE_S
* 
p°Img
, 
FILE
* 
pFp
)

381 
HI_U16
 
y
;

382 
HI_U8
* 
pU8
;

383 
HI_U16
 
height
;

384 
HI_U16
 
width
;

386 
height
 = 
p°Img
->
u16Height
;

387 
width
 = 
p°Img
->
u16Width
;

389 
p°Img
->
íTy≥
)

391 
IVE_IMAGE_TYPE_U8C1
:

392 
IVE_IMAGE_TYPE_S8C1
:

394 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

395 
y
 = 0; y < 
height
; y++)

397 i‡–1 !
	`fwrôe
(
pU8
, 
width
, 1, 
pFp
))

399 
	`SAMPLE_PRT
("Write file fail\n");

400  
HI_FAILURE
;

403 
pU8
 +
p°Img
->
u16Såide
[0];

407 
IVE_IMAGE_TYPE_YUV420SP
:

409 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

410 
y
 = 0; y < 
height
; y++)

412 i‡–
width
 !
	`fwrôe
(
pU8
, 1, width, 
pFp
))

414 
	`SAMPLE_PRT
("Write file fail\n");

415  
HI_FAILURE
;

418 
pU8
 +
p°Img
->
u16Såide
[0];

421 
pU8
 = 
p°Img
->
pu8VúAddr
[1];

422 
y
 = 0; y < 
height
 / 2; y++)

424 i‡–
width
 !
	`fwrôe
(
pU8
, 1, width, 
pFp
))

426 
	`SAMPLE_PRT
("Write file fail\n");

427  
HI_FAILURE
;

430 
pU8
 +
p°Img
->
u16Såide
[1];

434 
IVE_IMAGE_TYPE_YUV422SP
:

436 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

437 
y
 = 0; y < 
height
; y++)

439 i‡–
width
 !
	`fwrôe
(
pU8
, 1, width, 
pFp
))

441 
	`SAMPLE_PRT
("Write file fail\n");

442  
HI_FAILURE
;

445 
pU8
 +
p°Img
->
u16Såide
[0];

448 
pU8
 = 
p°Img
->
pu8VúAddr
[1];

449 
y
 = 0; y < 
height
; y++)

451 i‡–
width
 !
	`fwrôe
(
pU8
, 1, width, 
pFp
))

453 
	`SAMPLE_PRT
("Write file fail\n");

454  
HI_FAILURE
;

457 
pU8
 +
p°Img
->
u16Såide
[1];

462 
IVE_IMAGE_TYPE_U8C3_PACKAGE
:

464 
pU8
 = 
image
->
pu8VúAddr
[0];

465 
y
 = 0; y < 
height
; y++)

467 i‡–1 !
	`‰ód
(
pU8
, 
width
 * 3, 1, 
Â
))

469 
	`¥ötf
("ªad fûêîr‹,löe:%d\n", 
__LINE__
);

470  
HI_FAILURE
;

473 
pU8
 +
image
->
u16Såide
[0] * 3;

478 
IVE_IMAGE_TYPE_U8C3_PLANAR
:

480 
HI_U16
 
lo›
 = 0;Üoop < 3;Üoop++)

482 
pU8
 = 
image
->
pu8VúAddr
[
lo›
];

483 
y
 = 0; y < 
height
; y++)

485 i‡–1 !
	`‰ód
(
pU8
, 
width
, 1, 
Â
))

487 
	`¥ötf
("ªad fûêîr‹,löe:%d\n", 
__LINE__
);

488  
HI_FAILURE
;

491 
pU8
 +
image
->
u16Såide
[
lo›
];

498 
IVE_IMAGE_TYPE_S16C1
:

499 
IVE_IMAGE_TYPE_U16C1
:

501 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

502  
y
 = 0; y < 
height
; y++ )

504 i‡–(
HI_U16
Ë!
	`fwrôe
(
pU8
, 
width
, (HI_U16), 
pFp
) )

506 
	`SAMPLE_PRT
("Write file fail\n");

507  
HI_FAILURE
;

510 
pU8
 +
p°Img
->
u16Såide
[0] * 2;

514 
IVE_IMAGE_TYPE_U32C1
:

517 
pU8
 = 
p°Img
->
pu8VúAddr
[0];

518  
y
 = 0; y < 
height
; y++ )

520 i‡–
width
 !
	`fwrôe
(
pU8
, (
HI_U32
), width, 
pFp
) )

522 
	`SAMPLE_PRT
("Write file fail\n");

523  
HI_FAILURE
;

526 
pU8
 +
p°Img
->
u16Såide
[0] * 4;

535  
HI_SUCCESS
;

536 
	}
}

538 
HI_VOID
 
	$SAMPLE_COMM_IVE_BlobToRe˘
(
IVE_CCBLOB_S
* 
p°Blob
, 
SAMPLE_RECT_ARRAY_S
* 
p°Re˘
,

539 
HI_U16
 
u16Re˘MaxNum
, HI_U16 
u16AªaThrSãp
, HI_U16 
u16Width
, HI_U16 
u16Height
)

541 
HI_U16
 
u16Num
;

542 
HI_U16
 
i
, 
j
, 
k
;

543 
HI_U16
 
u16Thr
 = 0;

544 
HI_BOOL
 
bVÆid
;

546 i‡(
p°Blob
->
u8Regi⁄Num
 > 
u16Re˘MaxNum
)

549 
u16Thr
 = 
p°Blob
->
u16CurAªaThr
;

552 
u16Num
 = 0;

553 
u16Thr
 +
u16AªaThrSãp
;

554 
i
 = 0; i < 254; i++)

556 i‡(
p°Blob
->
a°Regi⁄
[
i
].
u32Aªa
 > 
u16Thr
)

558 
u16Num
++;

562 
u16Num
 > 
u16Re˘MaxNum
);

566 
u16Num
 = 0;

568 
i
 = 0; i < 254; i++)

570 i‡(
p°Blob
->
a°Regi⁄
[
i
].
u32Aªa
 > 
u16Thr
)

573 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[0].
s32X
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16Le·
 / (HI_FLOAT)
VIDEO_WIDTH
 * (HI_FLOAT)
u16Width
) & (~1) ;

574 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[0].
s32Y
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16T›
 / (HI_FLOAT)
VIDEO_HEIGHT
 * (HI_FLOAT)
u16Height
) & (~1);

576 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[1].
s32X
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16Right
 / (HI_FLOAT)
VIDEO_WIDTH
 * (HI_FLOAT)
u16Width
) & (~1);

577 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[1].
s32Y
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16T›
 / (HI_FLOAT)
VIDEO_HEIGHT
 * (HI_FLOAT)
u16Height
) & (~1);

579 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[2].
s32X
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16Right
 / (HI_FLOAT)
VIDEO_WIDTH
 * (HI_FLOAT)
u16Width
) & (~1);

580 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[2].
s32Y
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16BŸtom
 / (HI_FLOAT)
VIDEO_HEIGHT
 * (HI_FLOAT)
u16Height
) & (~1);

582 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[3].
s32X
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16Le·
 / (HI_FLOAT)
VIDEO_WIDTH
 * (HI_FLOAT)
u16Width
) & (~1);

583 
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[3].
s32Y
 = (
HI_U16
)((
HI_FLOAT
)
p°Blob
->
a°Regi⁄
[
i
].
u16BŸtom
 / (HI_FLOAT)
VIDEO_HEIGHT
 * (HI_FLOAT)
u16Height
) & (~1);

585 
bVÆid
 = 
HI_TRUE
;

586 
j
 = 0; j < 3; j++)

588 
k
 = 
j
 + 1; k < 4; k++)

590 i‡((
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[
j
].
s32X
 =p°Re˘->a°Re˘[u16Num].a°Poöt[
k
].s32X)

591 && (
p°Re˘
->
a°Re˘
[
u16Num
].
a°Poöt
[
j
].
s32Y
 =p°Re˘->a°Re˘[u16Num].a°Poöt[
k
].s32Y))

593 
bVÆid
 = 
HI_FALSE
;

599 i‡(
HI_TRUE
 =
bVÆid
)

601 
u16Num
++;

606 
p°Re˘
->
u16Num
 = u16Num;

607 
	}
}

612 
HI_S32
 
	$SAMPLE_COMM_IVE_BT1120_720P_PªVõw
(
SAMPLE_IVE_VI_VO_CONFIG_S
* 
p°ViVoC⁄fig
,

613 
HI_BOOL
 
bO≥nViExt
, HI_BOOL 
bO≥nVo
, HI_BOOL 
bO≥nVíc
)

615 
HI_U32
 
u32ViChnC¡
 = 1;

616 
VB_CONF_S
 
°VbC⁄f
;

617 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;

618 
VI_CHN
 
ViChn
 = 0;

619 
VI_CHN
 
ViExtChn
 = 1;

620 
VO_PUB_ATTR_S
 
°VoPubAâr
;

621 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

622 
PIC_SIZE_E
 
íPicSize
 = 
p°ViVoC⁄fig
->enPicSize;

623 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

625 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

626 
HI_U32
 
u32BlkSize
;

627 
SIZE_S
 
°Size
;

628 
VO_LAYER
 
VoLayî
 = 0;

629 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

630 
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
 = &(
p°ViVoC⁄fig
->
°ViC⁄fig
);

631 
VENC_CHN
 
VícChn
 = 0;

632 
HI_U32
 
u32ViDïth
 = 4;

633 
VI_CHN_ATTR_S
 
°ChnAâr
;

635 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

637 
u32BlkSize
 = 
	`SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
p°ViVoC⁄fig
->
íN‹m
, 
íPicSize
,

638 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

639 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

642 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

643 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 16;

645 i‡(
HI_TRUE
 =
bO≥nViExt
)

647 
u32BlkSize
 = 
	`SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
p°ViVoC⁄fig
->
íN‹m
, 
PIC_CIF
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

648 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

649 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 16;

652 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

653 i‡(
HI_SUCCESS
 !
s32Rë
)

655 
	`SAMPLE_PRT
("SAMPLE_COMM_SYS_Inô faû,Eº‹(%#x)\n", 
s32Rë
);

656 
END_720P_0
;

659 
s32Rë
 = 
	`SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

660 i‡(
HI_SUCCESS
 !
s32Rë
)

662 
	`SAMPLE_PRT
("SAMPLE_COMM_VI_SèπVòÁû,Eº‹(%#x)\n", 
s32Rë
);

663 
END_720P_0
;

665 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(
ViChn
, 
u32ViDïth
);

666 i‡(
HI_SUCCESS
 !
s32Rë
)

668 
	`SAMPLE_PRT
("HI_MPI_VI_SëFømeDïth faû,ViChn(%d),Eº‹(%#x)\n", 
ViChn
, 
s32Rë
);

669 
END_720P_1
;

671 
s32Rë
 = 
	`HI_MPI_VI_GëChnAâr
(
ViChn
, &
°ChnAâr
);

672 i‡(
HI_SUCCESS
 !
s32Rë
)

674 
	`SAMPLE_PRT
("HI_MPI_VI_GëChnAâ∏Áû,ViChn(%d),Eº‹(%#x)\n", 
ViChn
, 
s32Rë
);

675 
END_720P_1
;

678 
°ChnAâr
.
s32SrcFømeR©e
 = 3;

679 
°ChnAâr
.
s32D°FømeR©e
 = 1;

680 
s32Rë
 = 
	`HI_MPI_VI_SëChnAâr
(
ViChn
, &
°ChnAâr
);

681 i‡(
HI_SUCCESS
 !
s32Rë
)

683 
	`SAMPLE_PRT
("HI_MPI_VI_SëChnAâr,ViChn(%d),Eº‹(%#x)\n", 
ViChn
, 
s32Rë
);

684 
END_720P_1
;

688 i‡(
HI_TRUE
 =
bO≥nViExt
)

690 
°ExtChnAâr
.
íPixF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

691 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

692 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 352;

693 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 288;

694 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

695 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

696 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

698 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
ViExtChn
, &
°ExtChnAâr
);

699 i‡(
HI_SUCCESS
 !
s32Rë
)

701 
	`SAMPLE_PRT
("HI_MPI_VI_SëExtChnAâ∏Áû,ViChn(%d),Eº‹(%#x)\n", 
ViExtChn
, 
s32Rë
);

702 
END_720P_1
;

704 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
ViExtChn
);

705 i‡(
HI_SUCCESS
 !
s32Rë
)

707 
	`SAMPLE_PRT
("HI_MPI_VI_E«bÀCh¿Áû,ViChn(%d),Eº‹(%#x)\n", 
ViExtChn
, 
s32Rë
);

708 
END_720P_1
;

710 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(
ViExtChn
, 
u32ViDïth
);

711 i‡(
HI_SUCCESS
 !
s32Rë
)

713 
	`SAMPLE_PRT
("HI_MPI_VI_SëFømeDïth faû,ViChn(%d),Eº‹(%#x)\n", 
ViExtChn
, 
s32Rë
);

714 
END_720P_1
;

719 i‡(
HI_TRUE
 =
bO≥nVo
)

721 
s32Rë
 = 
	`SAMPLE_COMM_SYS_GëPicSize
(
p°ViVoC⁄fig
->
íN‹m
, 
íPicSize
, &
°Size
);

722 i‡(
HI_SUCCESS
 !
s32Rë
)

724 
	`SAMPLE_PRT
("SAMPLE_COMM_SYS_GëPicSizêÁû,Eº‹(%#x)\n", 
s32Rë
);

725 
END_720P_2
;

727 
°VoPubAâr
.
íI¡fTy≥
 = 
p°ViVoC⁄fig
->
íVoI¡fTy≥
;

728 i‡(
VO_INTF_BT1120
 =
p°ViVoC⁄fig
->
íVoI¡fTy≥
)

730 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_720P60
 ;

734 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

736 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

738 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

739 i‡(
HI_SUCCESS
 !
s32Rë
)

741 
	`SAMPLE_PRT
("SAMPLE_COMM_VO_SèπDevLayî faû,VoDev(%d),Eº‹(%#x)!\n", 
VoDev
, 
s32Rë
);

742 
END_720P_2
;

745 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

746 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

747 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

748 
	`mem˝y
(&
°LayîAâr
.
°ImageSize
, &
°Size
, (stSize));

750 
°LayîAâr
.
u32Di•FrmRt
 = 60 ;

751 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

752 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

753 i‡(
°VoPubAâr
.
íI¡fSync
 =
VO_OUTPUT_720P60
 )

755 
°LayîAâr
.
°Di•Re˘
.
u32Width
 = 
°Size
.u32Width;

756 
°LayîAâr
.
°Di•Re˘
.
u32Height
 = 
°Size
.u32Height;

758 i‡(
°VoPubAâr
.
íI¡fSync
 =
VO_OUTPUT_PAL
)

760 
°LayîAâr
.
°Di•Re˘
.
u32Width
 = 720;

761 
°LayîAâr
.
°Di•Re˘
.
u32Height
 = 576;

763 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

764 i‡(
HI_SUCCESS
 !
s32Rë
)

766 
	`SAMPLE_PRT
("SAMPLE_COMM_VO_SèπLayî faû,VoLayî(%d),Eº‹(%#x)\n", 
VoLayî
, 
s32Rë
);

767 
END_720P_3
;

770 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
íVoMode
);

771 i‡(
HI_SUCCESS
 !
s32Rë
)

773 
	`SAMPLE_PRT
("SAMPLE_COMM_VO_SèπCh¿Áû,VoDev(%d),Eº‹(%#x)\n", 
VoDev
, 
s32Rë
);

774 
END_720P_4
;

778 i‡(
HI_TRUE
 =
bO≥nVíc
)

780 
s32Rë
 = 
	`SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
PT_H264
, 
p°ViVoC⁄fig
->
íN‹m
, 
íPicSize
, 
SAMPLE_RC_CBR
, 0);

781 i‡(
s32Rë
 !
HI_SUCCESS
)

783 
	`SAMPLE_PRT
("SAMPLE_COMM_VENC_Sèπ faû,VícChn(%d),Eº‹(%#x)\n", 
VícChn
, 
s32Rë
);

784 
END_720P_5
;

786 
s32Rë
 = 
	`SAMPLE_COMM_VENC_SèπGëSåóm
(1);

787 i‡(
HI_SUCCESS
 !
s32Rë
)

789 
	`SAMPLE_PRT
("SAMPLE_COMM_VENC_SèπGëSåóm faû,Eº‹(%#x)\n", 
s32Rë
);

790 
END_720P_6
;

793  
s32Rë
;

795 
END_720P_7
:

796 i‡(
HI_TRUE
 =
bO≥nVíc
)

798 
	`SAMPLE_COMM_VENC_St›GëSåóm
();

802 
END_720P_6
:

803 i‡(
HI_TRUE
 =
bO≥nVíc
)

805 
	`SAMPLE_COMM_VENC_St›
(
VícChn
);

807 
END_720P_5
:

808 i‡(
HI_TRUE
 =
bO≥nVo
)

810 
	`SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

812 
END_720P_4
:

813 i‡(
HI_TRUE
 =
bO≥nVo
)

815 
	`SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

817 
END_720P_3
:

818 i‡(
HI_TRUE
 =
bO≥nVo
)

820 
	`SAMPLE_COMM_VO_St›Dev
(
VoDev
);

822 
END_720P_2
:

823 i‡(
HI_TRUE
 =
bO≥nViExt
)

825 (
HI_VOID
)
	`HI_MPI_VI_DißbÀChn
(
ViExtChn
);

827 
END_720P_1
:

828 
	`SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

829 
END_720P_0
:

830 
	`SAMPLE_COMM_SYS_Exô
();

832  
s32Rë
;

833 
	}
}

837 
HI_VOID
 
	$SAMPLE_COMM_IVE_BT1120_720P_St›
(
SAMPLE_IVE_VI_VO_CONFIG_S
* 
p°ViVoC⁄fig
,

838 
HI_BOOL
 
bO≥nViExt
, HI_BOOL 
bO≥nVo
, HI_BOOL 
bO≥nVíc
)

840 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;

841 
VO_LAYER
 
VoLayî
 = 0;

842 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

843 
VI_CHN
 
ViExtChn
 = 1;

844 
VENC_CHN
 
VícChn
 = 0;

845 i‡(
HI_TRUE
 =
bO≥nVíc
)

847 
	`SAMPLE_COMM_VENC_St›GëSåóm
();

848 
	`SAMPLE_COMM_VENC_St›
(
VícChn
);

851 i‡(
HI_TRUE
 =
bO≥nVo
 )

853 
	`SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

854 
	`SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

855 
	`SAMPLE_COMM_VO_St›Dev
(
VoDev
);

858 i‡(
HI_TRUE
 =
bO≥nViExt
)

860 (
HI_VOID
)
	`HI_MPI_VI_DißbÀChn
(
ViExtChn
);

862 
	`SAMPLE_COMM_VI_St›Vi
(&(
p°ViVoC⁄fig
->
°ViC⁄fig
));

863 
	`SAMPLE_COMM_SYS_Exô
();

864 
	}
}

870 
HI_S32
 
	$SAMPLE_COMM_IVE_Cª©eImage
(
IVE_IMAGE_S
* 
p°Img
, 
IVE_IMAGE_TYPE_E
 
íTy≥
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

872 
HI_U32
 
u32Size
 = 0;

873 
HI_S32
 
s32Rë
;

874 i‡(
NULL
 =
p°Img
)

876 
	`SAMPLE_PRT
("pstImg isÇull\n");

877  
HI_FAILURE
;

880 
p°Img
->
íTy≥
 =ÉnType;

881 
p°Img
->
u16Width
 = u16Width;

882 
p°Img
->
u16Height
 = u16Height;

883 
p°Img
->
u16Såide
[0] = 
	`SAMPLE_COMM_IVE_CÆcSåide
’°Img->
u16Width
, 
IVE_ALIGN
);

885 
íTy≥
)

887 
IVE_IMAGE_TYPE_U8C1
:

888 
IVE_IMAGE_TYPE_S8C1
:

890 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
;

891 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

892 i‡(
s32Rë
 !
HI_SUCCESS
)

894 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

895  
s32Rë
;

899 
IVE_IMAGE_TYPE_YUV420SP
:

901 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * 3 / 2;

902 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

903 i‡(
s32Rë
 !
HI_SUCCESS
)

905 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

906  
s32Rë
;

908 
p°Img
->
u16Såide
[1] =ÖstImg->u16Stride[0];

909 
p°Img
->
u32PhyAddr
[1] =Ö°Img->u32PhyAddr[0] +Ö°Img->
u16Såide
[0] *Ö°Img->
u16Height
;

910 
p°Img
->
pu8VúAddr
[1] =Ö°Img->pu8VúAddr[0] +Ö°Img->
u16Såide
[0] *Ö°Img->
u16Height
;

914 
IVE_IMAGE_TYPE_YUV422SP
:

916 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * 2;

917 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

918 i‡(
s32Rë
 !
HI_SUCCESS
)

920 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

921  
s32Rë
;

923 
p°Img
->
u16Såide
[1] =ÖstImg->u16Stride[0];

924 
p°Img
->
u32PhyAddr
[1] =Ö°Img->u32PhyAddr[0] +Ö°Img->
u16Såide
[0] *Ö°Img->
u16Height
;

925 
p°Img
->
pu8VúAddr
[1] =Ö°Img->pu8VúAddr[0] +Ö°Img->
u16Såide
[0] *Ö°Img->
u16Height
;

929 
IVE_IMAGE_TYPE_YUV420P
:

931 
IVE_IMAGE_TYPE_YUV422P
:

933 
IVE_IMAGE_TYPE_S8C2_PACKAGE
:

935 
IVE_IMAGE_TYPE_S8C2_PLANAR
:

937 
IVE_IMAGE_TYPE_S16C1
:

938 
IVE_IMAGE_TYPE_U16C1
:

941 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * (
HI_U16
);

942 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

943 i‡(
s32Rë
 !
HI_SUCCESS
)

945 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

946  
s32Rë
;

950 
IVE_IMAGE_TYPE_U8C3_PACKAGE
:

952 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * 3;

953 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

954 i‡(
s32Rë
 !
HI_SUCCESS
)

956 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

957  
s32Rë
;

959 
p°Img
->
pu8VúAddr
[1] =ÖstImg->pu8VirAddr[0] + 1;

960 
p°Img
->
pu8VúAddr
[2] =ÖstImg->pu8VirAddr[1] + 1;

961 
p°Img
->
u32PhyAddr
[1] =ÖstImg->u32PhyAddr[0] + 1;

962 
p°Img
->
u32PhyAddr
[2] =ÖstImg->u32PhyAddr[1] + 1;

963 
p°Img
->
u16Såide
[1] =ÖstImg->u16Stride[0];

964 
p°Img
->
u16Såide
[2] =ÖstImg->u16Stride[0];

967 
IVE_IMAGE_TYPE_U8C3_PLANAR
:

969 
IVE_IMAGE_TYPE_S32C1
:

970 
IVE_IMAGE_TYPE_U32C1
:

972 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * (
HI_U32
);

973 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

974 i‡(
s32Rë
 !
HI_SUCCESS
)

976 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

977  
s32Rë
;

981 
IVE_IMAGE_TYPE_S64C1
:

982 
IVE_IMAGE_TYPE_U64C1
:

985 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * (
HI_U64
);

986 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

987 i‡(
s32Rë
 !
HI_SUCCESS
)

989 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

990  
s32Rë
;

999  
HI_SUCCESS
;

1000 
	}
}

1004 
HI_S32
 
	$SAMPLE_COMM_IVE_Cª©eMemInfo
(
IVE_MEM_INFO_S
* 
p°MemInfo
, 
HI_U32
 
u32Size
)

1006 
HI_S32
 
s32Rë
;

1008 i‡(
NULL
 =
p°MemInfo
)

1010 
	`SAMPLE_PRT
("pstMemInfo isÇull\n");

1011  
HI_FAILURE
;

1013 
p°MemInfo
->
u32Size
 = u32Size;

1014 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°MemInfo
->
u32PhyAddr
, (**)&p°MemInfo->
pu8VúAddr
, 
NULL
, 
HI_NULL
, 
u32Size
);

1015 i‡(
s32Rë
 !
HI_SUCCESS
)

1017 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

1018  
HI_FAILURE
;

1021  
HI_SUCCESS
;

1022 
	}
}

1026 
HI_S32
 
	$SAMPLE_COMM_IVE_Cª©eImageByCached
(
IVE_IMAGE_S
* 
p°Img
,

1027 
IVE_IMAGE_TYPE_E
 
íTy≥
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

1029 
HI_U32
 
u32Size
 = 0;

1030 
HI_S32
 
s32Rë
;

1031 i‡(
NULL
 =
p°Img
)

1033 
	`SAMPLE_PRT
("pstImg isÇull\n");

1034  
HI_FAILURE
;

1037 
p°Img
->
íTy≥
 =ÉnType;

1038 
p°Img
->
u16Width
 = u16Width;

1039 
p°Img
->
u16Height
 = u16Height;

1040 
p°Img
->
u16Såide
[0] = 
	`SAMPLE_COMM_IVE_CÆcSåide
’°Img->
u16Width
, 
IVE_ALIGN
);

1042 
íTy≥
)

1044 
IVE_IMAGE_TYPE_U8C1
:

1045 
IVE_IMAGE_TYPE_S8C1
:

1047 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
;

1048 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

1049 i‡(
s32Rë
 !
HI_SUCCESS
)

1051 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

1052  
s32Rë
;

1056 
IVE_IMAGE_TYPE_YUV420SP
:

1058 
IVE_IMAGE_TYPE_YUV422SP
:

1060 
IVE_IMAGE_TYPE_YUV420P
:

1062 
IVE_IMAGE_TYPE_YUV422P
:

1064 
IVE_IMAGE_TYPE_S8C2_PACKAGE
:

1066 
IVE_IMAGE_TYPE_S8C2_PLANAR
:

1068 
IVE_IMAGE_TYPE_S16C1
:

1069 
IVE_IMAGE_TYPE_U16C1
:

1072 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * (
HI_U16
);

1073 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

1074 i‡(
s32Rë
 !
HI_SUCCESS
)

1076 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

1077  
s32Rë
;

1081 
IVE_IMAGE_TYPE_U8C3_PACKAGE
:

1083 
IVE_IMAGE_TYPE_U8C3_PLANAR
:

1085 
IVE_IMAGE_TYPE_S32C1
:

1086 
IVE_IMAGE_TYPE_U32C1
:

1088 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * (
HI_U32
);

1089 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

1090 i‡(
s32Rë
 !
HI_SUCCESS
)

1092 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

1093  
s32Rë
;

1097 
IVE_IMAGE_TYPE_S64C1
:

1098 
IVE_IMAGE_TYPE_U64C1
:

1101 
u32Size
 = 
p°Img
->
u16Såide
[0] *Ö°Img->
u16Height
 * (
HI_U64
);

1102 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
p°Img
->
u32PhyAddr
[0], (**)&p°Img->
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

1103 i‡(
s32Rë
 !
HI_SUCCESS
)

1105 
	`SAMPLE_PRT
("Mmz AŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

1106  
s32Rë
;

1115  
HI_SUCCESS
;

1117 
	}
}

	@sample/common/sample_comm_ive.h

1 #i‚de‡
__SAMPLE_COMM_IVE_H__


2 
	#__SAMPLE_COMM_IVE_H__


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<î∫o.h
>

8 
	~<f˙é.h
>

10 
	~<sys/mm™.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<uni°d.h
>

14 
	~<sig«l.h
>

17 
	~"hi_comm⁄.h
"

18 
	~"hi_debug.h
"

19 
	~"hi_comm_video.h
"

20 
	~"hi_comm_sys.h
"

21 
	~"hi_comm_ive.h
"

22 
	~"hi_comm_vi.h
"

23 
	~"hi_comm_vo.h
"

24 
	~"hi_comm_vgs.h
"

26 
	~"mpi_vb.h
"

27 
	~"mpi_sys.h
"

28 
	~"mpi_ive.h
"

29 
	~"ßm∂e_comm.h
"

31 
	#VIDEO_WIDTH
 352

	)

32 
	#VIDEO_HEIGHT
 288

	)

33 
	#IVE_ALIGN
 16

	)

34 
	#IVE_CHAR_CALW
 8

	)

35 
	#IVE_CHAR_CALH
 8

	)

36 
	#IVE_CHAR_NUM
 (
IVE_CHAR_CALW
 *
IVE_CHAR_CALH
)

	)

37 
	#IVE_FILE_NAME_LEN
 256

	)

39 
	#SAMPLE_ALIGN_BACK
(
x
, 
a
Ë(◊Ë* (((xË/ (a))))

	)

41 
	shiSAMPLE_IVE_VI_VO_CONFIG_S


43 
SAMPLE_VI_CONFIG_S
 
	m°ViC⁄fig
;

44 
VO_INTF_TYPE_E
 
	míVoI¡fTy≥
;

45 
VIDEO_NORM_E
 
	míN‹m
;

46 
PIC_SIZE_E
 
	míPicSize
;

47 } 
	tSAMPLE_IVE_VI_VO_CONFIG_S
;

49 
	shiSAMPLE_IVE_RECT_S


51 
POINT_S
 
	ma°Poöt
[4];

52 } 
	tSAMPLE_IVE_RECT_S
;

54 
	shiSAMPLE_RECT_ARRAY_S


56 
HI_U16
 
	mu16Num
;

57 
SAMPLE_IVE_RECT_S
 
	ma°Re˘
[50];

58 } 
	tSAMPLE_RECT_ARRAY_S
;

60 
	shiIVE_LINEAR_DATA_S


62 
HI_S32
 
	ms32LöórNum
;

63 
HI_S32
 
	ms32ThªshNum
;

64 
POINT_S
* 
	mp°LöórPoöt
;

65 } 
	tIVE_LINEAR_DATA_S
;

69 
	#IVE_MMZ_FREE
(
phy
,
vú
)\

	)

71 i‡((0 !(
phy
)Ë&& (
NULL
 !(
vú
)))\

73 
HI_MPI_SYS_MmzFªe
((
phy
),(
vú
));\

74 (
	gphy
) = 0;\

75 (
	gvú
Ë
NULL
;\

79 
	#IVE_CLOSE_FILE
(
Â
)\

	)

81 i‡(
NULL
 !(
Â
))\

83 
	`f˛o£
((
Â
));\

84 (
Â
Ë
NULL
;\

86 
	}

	$}whûe
(0)

88 
	#SAMPLE_VI_PAUSE
()\

	)

90 
	`¥ötf
("---------------pressány keyÅoÉxit!---------------\n");\

91 
	`gëch¨
();\

92 
	}
} 0)

96 
HI_VOID
 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
(HI_VOID);

100 
HI_S32
 
	`SAMPLE_COMM_IVE_IveMpiExô
(
HI_VOID
);

104 
HI_S32
 
	`SAMPLE_COMM_VGS_AddDøwRe˘Job
(
VGS_HANDLE
 
VgsH™dÀ
, 
IVE_IMAGE_S
* 
p°Src
, IVE_IMAGE_S* 
p°D°
,

105 
RECT_S
* 
p°Re˘
, 
HI_U16
 
u16Re˘Num
);

109 
HI_S32
 
	`SAMPLE_COMM_VGS_FûlRe˘
(
VIDEO_FRAME_INFO_S
* 
p°FrmInfo
, 
SAMPLE_RECT_ARRAY_S
* 
p°Re˘
, 
HI_U32
 
u32Cﬁ‹
);

113 
HI_S32
 
	`SAMPLE_COMM_IVE_RódFûe
(
IVE_IMAGE_S
* 
p°Img
, 
FILE
* 
pFp
);

117 
HI_S32
 
	`SAMPLE_COMM_IVE_WrôeFûe
(
IVE_IMAGE_S
* 
p°Img
, 
FILE
* 
pFp
);

121 
HI_U16
 
	`SAMPLE_COMM_IVE_CÆcSåide
(HI_U16 
u16Width
, 
HI_U8
 
u8Align
);

125 
HI_S32
 
	`SAMPLE_COMM_IVE_BT1120_720P_PªVõw
(
SAMPLE_IVE_VI_VO_CONFIG_S
* 
p°ViVoC⁄fig
,

126 
HI_BOOL
 
bO≥nViExt
, HI_BOOL 
bO≥nVo
, HI_BOOL 
bO≥nVíc
);

130 
HI_VOID
 
	`SAMPLE_COMM_IVE_BT1120_720P_St›
(
SAMPLE_IVE_VI_VO_CONFIG_S
* 
p°ViVoC⁄fig
,

131 
HI_BOOL
 
bO≥nViExt
, HI_BOOL 
bO≥nVo
, HI_BOOL 
bO≥nVíc
);

135 
HI_VOID
 
	`SAMPLE_COMM_IVE_BlobToRe˘
(
IVE_CCBLOB_S
* 
p°Blob
, 
SAMPLE_RECT_ARRAY_S
* 
p°Re˘
,

136 
HI_U16
 
u16Re˘MaxNum
, HI_U16 
u16AªaThrSãp
, HI_U16 
u16Width
, HI_U16 
u16Height
);

140 
HI_S32
 
	`SAMPLE_COMM_IVE_Cª©eImage
(
IVE_IMAGE_S
* 
p°Img
, 
IVE_IMAGE_TYPE_E
 
íTy≥
,

141 
HI_U16
 
u16Width
, HI_U16 
u16Height
);

145 
HI_S32
 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(
IVE_MEM_INFO_S
* 
p°MemInfo
, 
HI_U32
 
u32Size
);

149 
HI_S32
 
	`SAMPLE_COMM_IVE_Cª©eImageByCached
(
IVE_IMAGE_S
* 
p°Img
,

150 
IVE_IMAGE_TYPE_E
 
íTy≥
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
);

	@sample/common/sample_comm_sys.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/pﬁl.h
>

21 
	~<sys/time.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<±hªad.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

27 
	~<sig«l.h
>

29 
	~"ßm∂e_comm.h
"

34 
HI_S32
 
SAMPLE_COMM_SYS_GëPicSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
SIZE_S
* 
p°Size
)

36 
íPicSize
)

38 
PIC_QCIF
:

39 
p°Size
->
u32Width
 = 176;

40 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 144 : 120;

42 
PIC_CIF
:

43 
p°Size
->
u32Width
 = 352;

44 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 288 : 240;

46 
PIC_D1
:

47 
p°Size
->
u32Width
 = 720;

48 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 576 : 480;

50 
PIC_960H
:

51 
p°Size
->
u32Width
 = 960;

52 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 576 : 480;

54 
PIC_2CIF
:

55 
p°Size
->
u32Width
 = 360;

56 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 576 : 480;

58 
PIC_QVGA
:

59 
p°Size
->
u32Width
 = 320;

60 
p°Size
->
u32Height
 = 240;

62 
PIC_VGA
:

63 
p°Size
->
u32Width
 = 640;

64 
p°Size
->
u32Height
 = 480;

66 
PIC_XGA
:

67 
p°Size
->
u32Width
 = 1024;

68 
p°Size
->
u32Height
 = 768;

70 
PIC_SXGA
:

71 
p°Size
->
u32Width
 = 1400;

72 
p°Size
->
u32Height
 = 1050;

74 
PIC_UXGA
:

75 
p°Size
->
u32Width
 = 1600;

76 
p°Size
->
u32Height
 = 1200;

78 
PIC_QXGA
:

79 
p°Size
->
u32Width
 = 2048;

80 
p°Size
->
u32Height
 = 1536;

82 
PIC_WVGA
:

83 
p°Size
->
u32Width
 = 854;

84 
p°Size
->
u32Height
 = 480;

86 
PIC_WSXGA
:

87 
p°Size
->
u32Width
 = 1680;

88 
p°Size
->
u32Height
 = 1050;

90 
PIC_WUXGA
:

91 
p°Size
->
u32Width
 = 1920;

92 
p°Size
->
u32Height
 = 1200;

94 
PIC_WQXGA
:

95 
p°Size
->
u32Width
 = 2560;

96 
p°Size
->
u32Height
 = 1600;

98 
PIC_HD720
:

99 
p°Size
->
u32Width
 = 1280;

100 
p°Size
->
u32Height
 = 720;

102 
PIC_HD1080
:

103 
p°Size
->
u32Width
 = 1920;

104 
p°Size
->
u32Height
 = 1080;

106 
PIC_2304x1296
:

107 
p°Size
->
u32Width
 = 2304;

108 
p°Size
->
u32Height
 = 1296;

110 
PIC_2592x1520
:

111 
p°Size
->
u32Width
 = 2592;

112 
p°Size
->
u32Height
 = 1520;

114 
PIC_5M
:

115 
p°Size
->
u32Width
 = 2592;

116 
p°Size
->
u32Height
 = 1944;

120  
HI_FAILURE
;

122  
HI_SUCCESS
;

128 
HI_U32
 
SAMPLE_COMM_SYS_CÆcHi°VbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
SIZE_S
* 
p°Hi°BlkSize
, HI_U32 
u32AlignWidth
)

130 
HI_S32
 
s32Rë
;

131 
SIZE_S
 
°PicSize
;

133 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
íN‹m
, 
íPicSize
, &
°PicSize
);

134 i‡(
HI_SUCCESS
 !
s32Rë
)

136 
SAMPLE_PRT
("gëÖi˘uª size[%d] faûed!\n", 
íPicSize
);

137  
HI_FAILURE
;

140 
SAMPLE_PRT
("stPicSize.u32Width%d,pstHistBlkSize->u32Width%d\n,stPicSize.u32Height%d,pstHistBlkSize->u32Height%d\n",

141 
°PicSize
.
u32Width
, 
p°Hi°BlkSize
->u32Width,

142 
°PicSize
.
u32Height
, 
p°Hi°BlkSize
->u32Height );

143  (
CEILING_2_POWER
(44, 
u32AlignWidth
) * CEILING_2_POWER(44, u32AlignWidth) * 16 * 4);

145  
HI_SUCCESS
;

151 
HI_U32
 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
PIXEL_FORMAT_E
 
íPixFmt
, HI_U32 
u32AlignWidth
)

153 
HI_S32
 
s32Rë
 = 
HI_FAILURE
;

154 
SIZE_S
 
°Size
;

155 
HI_U32
 
u32VbSize
;

156 
HI_U32
 
u32HódîSize
;

158 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
íN‹m
, 
íPicSize
, &
°Size
);

159 i‡(
HI_SUCCESS
 !
s32Rë
)

161 
SAMPLE_PRT
("gëÖi˘uª size[%d] faûed!\n", 
íPicSize
);

162  
HI_FAILURE
;

165 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 !
íPixFmt
 && 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 !=ÉnPixFmt)

167 
SAMPLE_PRT
("pixñ f‹m©[%d] i≈uàÁûed!\n", 
íPixFmt
);

168  
HI_FAILURE
;

171 i‡(16 !
u32AlignWidth
 && 32 != u32AlignWidth && 64 != u32AlignWidth)

173 
SAMPLE_PRT
("systemálign width[%d] input failed!\n", \

174 
u32AlignWidth
);

175  
HI_FAILURE
;

178 
u32VbSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
u32AlignWidth
) * \

179 
CEILING_2_POWER
(
°Size
.
u32Height
, 
u32AlignWidth
) * \

180 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
íPixFmt
) ? 2 : 1.5));

182 
VB_PIC_HEADER_SIZE
(
°Size
.
u32Width
, stSize.
u32Height
, 
íPixFmt
, 
u32HódîSize
);

183 
u32VbSize
 +
u32HódîSize
;

185  
u32VbSize
;

191 
HI_U32
 
VI_COMM_SYS_CÆcPicVbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, HI_U32 
u32Width
 , HI_U32 
u32Height
, 
PIXEL_FORMAT_E
 
íPixFmt
, HI_U32 
u32AlignWidth
)

193 
SIZE_S
 
°Size
;

195 
°Size
.
u32Width
 = u32Width;

196 
°Size
.
u32Height
 = u32Height;

198 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 !
íPixFmt
 && 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 !=ÉnPixFmt)

200 
SAMPLE_PRT
("pixñ f‹m©[%d] i≈uàÁûed!\n", 
íPixFmt
);

201  
HI_FAILURE
;

204 i‡(16 !
u32AlignWidth
 && 32 != u32AlignWidth && 64 != u32AlignWidth)

206 
SAMPLE_PRT
("systemálign width[%d] input failed!\n", \

207 
u32AlignWidth
);

208  
HI_FAILURE
;

211  (
CEILING_2_POWER
(
°Size
.
u32Width
, 
u32AlignWidth
) * \

212 
CEILING_2_POWER
(
°Size
.
u32Height
, 
u32AlignWidth
) * \

213 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
íPixFmt
) ? 2 : 1.5));

221 
HI_S32
 
SAMPLE_COMM_SYS_MemC⁄fig
(
HI_VOID
)

223 
HI_S32
 
i
 = 0;

224 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

226 
HI_CHAR
* 
pcMmzName
;

227 
MPP_CHN_S
 
°MµChnVI
;

228 
MPP_CHN_S
 
°MµChnVO
;

229 
MPP_CHN_S
 
°MµChnVPSS
;

230 
MPP_CHN_S
 
°MµChnGRP
;

231 
MPP_CHN_S
 
°MµChnVENC
;

232 
MPP_CHN_S
 
°MµChnVDEC
;

235 
i
 = 0; i < 32; i++)

237 
°MµChnVI
.
íModId
 = 
HI_ID_VIU
;

238 
°MµChnVI
.
s32DevId
 = 0;

239 
°MµChnVI
.
s32ChnId
 = 
i
;

241 
°MµChnVDEC
.
íModId
 = 
HI_ID_VDEC
;

242 
°MµChnVDEC
.
s32DevId
 = 0;

243 
°MµChnVDEC
.
s32ChnId
 = 
i
;

245 i‡(0 =(
i
 % 2))

247 
pcMmzName
 = 
NULL
;

251 
pcMmzName
 = "ddr1";

255 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVI
, 
pcMmzName
);

256 i‡(
s32Rë
)

258 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

259  
HI_FAILURE
;

263 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVDEC
, 
pcMmzName
);

264 i‡(
s32Rë
)

266 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

267  
HI_FAILURE
;

273 
i
 = 0; i < 64; i++)

275 
°MµChnVPSS
.
íModId
 = 
HI_ID_VPSS
;

276 
°MµChnVPSS
.
s32DevId
 = 
i
;

277 
°MµChnVPSS
.
s32ChnId
 = 0;

279 
°MµChnGRP
.
íModId
 = 
HI_ID_GROUP
;

280 
°MµChnGRP
.
s32DevId
 = 
i
;

281 
°MµChnGRP
.
s32ChnId
 = 0;

283 
°MµChnVENC
.
íModId
 = 
HI_ID_VENC
;

284 
°MµChnVENC
.
s32DevId
 = 0;

285 
°MµChnVENC
.
s32ChnId
 = 
i
;

287 i‡(0 =(
i
 % 2))

289 
pcMmzName
 = 
NULL
;

293 
pcMmzName
 = "ddr1";

297 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVPSS
, 
pcMmzName
);

298 i‡(
s32Rë
)

300 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

301  
HI_FAILURE
;

305 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnGRP
, 
pcMmzName
);

306 i‡(
s32Rë
)

308 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

309  
HI_FAILURE
;

313 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVENC
, 
pcMmzName
);

314 i‡(
s32Rë
)

316 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

317  
HI_FAILURE
;

323 
°MµChnVO
.
íModId
 = 
HI_ID_VOU
;

324 
°MµChnVO
.
s32DevId
 = 0;

325 
°MµChnVO
.
s32ChnId
 = 0;

326 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVO
, "ddr1");

327 i‡(
s32Rë
)

329 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

330  
HI_FAILURE
;

333  
s32Rë
;

339 
HI_S32
 
SAMPLE_COMM_SYS_Inô
(
VB_CONF_S
* 
p°VbC⁄f
)

341 
MPP_SYS_CONF_S
 
°SysC⁄f
 = {0};

342 
HI_S32
 
s32Rë
 = 
HI_FAILURE
;

344 
HI_MPI_SYS_Exô
();

345 
HI_MPI_VB_Exô
();

347 i‡(
NULL
 =
p°VbC⁄f
)

349 
SAMPLE_PRT
("inputÖarameter isÇull, it is invaild!\n");

350  
HI_FAILURE
;

353 
s32Rë
 = 
HI_MPI_VB_SëC⁄f
(
p°VbC⁄f
);

354 i‡(
HI_SUCCESS
 !
s32Rë
)

356 
SAMPLE_PRT
("HI_MPI_VB_SetConf failed!\n");

357  
HI_FAILURE
;

360 
s32Rë
 = 
HI_MPI_VB_Inô
();

361 i‡(
HI_SUCCESS
 !
s32Rë
)

363 
SAMPLE_PRT
("HI_MPI_VB_Init failed!\n");

364  
HI_FAILURE
;

367 
°SysC⁄f
.
u32AlignWidth
 = 
SAMPLE_SYS_ALIGN_WIDTH
;

368 
s32Rë
 = 
HI_MPI_SYS_SëC⁄f
(&
°SysC⁄f
);

369 i‡(
HI_SUCCESS
 !
s32Rë
)

371 
SAMPLE_PRT
("HI_MPI_SYS_SetConf failed\n");

372  
HI_FAILURE
;

375 
s32Rë
 = 
HI_MPI_SYS_Inô
();

376 i‡(
HI_SUCCESS
 !
s32Rë
)

378 
SAMPLE_PRT
("HI_MPI_SYS_Init failed!\n");

379  
HI_FAILURE
;

382  
HI_SUCCESS
;

388 
HI_S32
 
SAMPLE_COMM_SYS_Paylﬂd2FûePo°fix
(
PAYLOAD_TYPE_E
 
íPaylﬂd
, 
HI_CHAR
* 
szFûePo°fix
)

390 i‡(
PT_H264
 =
íPaylﬂd
)

392 
°r˝y
(
szFûePo°fix
, ".h264");

394 i‡(
PT_JPEG
 =
íPaylﬂd
)

396 
°r˝y
(
szFûePo°fix
, ".jpg");

398 i‡(
PT_MJPEG
 =
íPaylﬂd
)

400 
°r˝y
(
szFûePo°fix
, ".mjp");

404 
SAMPLE_PRT
("payloadÅypeÉrr!\n");

405  
HI_FAILURE
;

407  
HI_SUCCESS
;

413 
HI_VOID
 
SAMPLE_COMM_SYS_Exô
()

415 
HI_MPI_SYS_Exô
();

416 
HI_MPI_VB_Exô
();

420 #ifde‡
__˝lu•lus


421 #i‡
__˝lu•lus


	@sample/common/sample_comm_vda.c

9 #ifde‡
__˝lu•lus


10 #i‡
__˝lu•lus


15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/time.h
>

23 
	~<f˙é.h
>

24 
	~<î∫o.h
>

25 
	~<±hªad.h
>

26 
	~<m©h.h
>

27 
	~<uni°d.h
>

28 
	~<sig«l.h
>

30 
	~"ßm∂e_comm.h
"

32 
	shiVDA_OD_PARAM_S


34 
HI_BOOL
 
bThªadSèπ
;

35 
VDA_CHN
 
VdaChn
;

36 } 
	tVDA_OD_PARAM_S
;

37 
	shiVDA_MD_PARAM_S


39 
HI_BOOL
 
bThªadSèπ
;

40 
VDA_CHN
 
VdaChn
;

41 } 
	tVDA_MD_PARAM_S
;

43 
	#SAMPLE_VDA_MD_CHN
 0

	)

44 
	#SAMPLE_VDA_OD_CHN
 1

	)

46 
±hªad_t
 
gs_VdaPid
[2];

47 
VDA_MD_PARAM_S
 
gs_°MdP¨am
;

48 
VDA_OD_PARAM_S
 
gs_°OdP¨am
;

53 
HI_S32
 
SAMPLE_COMM_VDA_MdPπObj
(
FILE
* 
Â
, 
VDA_DATA_S
* 
p°VdaD©a
)

55 
VDA_OBJ_S
* 
p°VdaObj
;

56 
HI_S32
 
i
;

58 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

60 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bObjVÆid
)

62 
Ârötf
(
Â
, "bMbObjValid = FALSE.\n");

63  
HI_SUCCESS
;

66 
Ârötf
(
Â
, "ObjNum=%d, IndexOfMaxObj=%d, SizeOfMaxObj=%d, SizeOfTotalObj=%d\n", \

67 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32ObjNum
, \

68 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32IndexOfMaxObj
, \

69 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32SizeOfMaxObj
, \

70 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32SizeOfTŸÆObj
);

71 
i
 = 0; i < 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32ObjNum
; i++)

73 
p°VdaObj
 = 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
p°Addr
 + 
i
;

74 
Ârötf
(
Â
, "[%d]\àÀ·=%d,Å›=%d,Ñight=%d, bŸtom=%d\n", 
i
, \

75 
p°VdaObj
->
u16Le·
,Ö°VdaObj->
u16T›
, \

76 
p°VdaObj
->
u16Right
,Ö°VdaObj->
u16BŸtom
);

78 
fÊush
(
Â
);

79  
HI_SUCCESS
;

84 
HI_S32
 
SAMPLE_COMM_VDA_MdPπAp
(
FILE
* 
Â
, 
VDA_DATA_S
* 
p°VdaD©a
)

86 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

88 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bPñsNumVÆid
)

90 
Ârötf
(
Â
, "bMbObjValid = FALSE.\n");

91  
HI_SUCCESS
;

94 
Ârötf
(
Â
, "AœrmPixñCou¡=%d\n", 
p°VdaD©a
->
unD©a
.
°MdD©a
.
u32AœrmPixC¡
);

95 
fÊush
(
Â
);

96  
HI_SUCCESS
;

102 
HI_S32
 
SAMPLE_COMM_VDA_MdPπSad
(
FILE
* 
Â
, 
VDA_DATA_S
* 
p°VdaD©a
)

104 
HI_S32
 
i
, 
j
;

105 
HI_VOID
* 
pAddr
;

107 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

108 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bMbSadVÆid
)

110 
Ârötf
(
Â
, "bMbSadValid = FALSE.\n");

111  
HI_SUCCESS
;

114 
i
 = 0; i < 
p°VdaD©a
->
u32MbHeight
; i++)

116 
pAddr
 = (
HI_VOID
*)((
HI_U32
)
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.pAddr

117 + 
i
 * 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.
u32Såide
);

119 
j
 = 0; j < 
p°VdaD©a
->
u32MbWidth
; j++)

121 
HI_U8
* 
pu8Addr
;

122 
HI_U16
* 
pu16Addr
;

124 i‡(
VDA_MB_SAD_8BIT
 =
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.
íMbSadBôs
)

126 
pu8Addr
 = (
HI_U8
*)
pAddr
 + 
j
;

128 
Ârötf
(
Â
, "%-2d ", *
pu8Addr
);

133 
pu16Addr
 = (
HI_U16
*)
pAddr
 + 
j
;

135 
Ârötf
(
Â
, "%-4d ", *
pu16Addr
);

139 
¥ötf
("\n");

142 
fÊush
(
Â
);

143  
HI_SUCCESS
;

148 
HI_VOID
* 
SAMPLE_COMM_VDA_MdGëResu…
(HI_VOID* 
pd©a
)

150 
HI_S32
 
s32Rë
;

151 
VDA_CHN
 
VdaChn
;

152 
VDA_DATA_S
 
°VdaD©a
;

153 
VDA_MD_PARAM_S
* 
pgs_°MdP¨am
;

154 
HI_S32
 
maxfd
 = 0;

155 
FILE
* 
Â
 = 
°dout
;

156 
HI_S32
 
VdaFd
;

157 
fd_£t
 
ªad_fds
;

158 
timevÆ
 
TimeoutVÆ
;

160 
pgs_°MdP¨am
 = (
VDA_MD_PARAM_S
*)
pd©a
;

162 
VdaChn
 = 
pgs_°MdP¨am
->VdaChn;

166 
VdaFd
 = 
HI_MPI_VDA_GëFd
(
VdaChn
);

167 i‡(
VdaFd
 < 0)

169 
SAMPLE_PRT
("HI_MPI_VDA_GetFd failed with %#x!\n",

170 
VdaFd
);

171  
NULL
;

173 i‡(
maxfd
 <
VdaFd
)

175 
maxfd
 = 
VdaFd
;

177 
sy°em
("clear");

178 
HI_TRUE
 =
pgs_°MdP¨am
->
bThªadSèπ
)

180 
FD_ZERO
(&
ªad_fds
);

181 
FD_SET
(
VdaFd
, &
ªad_fds
);

183 
TimeoutVÆ
.
tv_£c
 = 2;

184 
TimeoutVÆ
.
tv_u£c
 = 0;

185 
s32Rë
 = 
£À˘
(
maxfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

186 i‡(
s32Rë
 < 0)

188 
SAMPLE_PRT
("select failed!\n");

191 i‡(
s32Rë
 == 0)

193 
SAMPLE_PRT
("get vdaÑesultÅime out,ÉxitÅhread\n");

198 i‡(
FD_ISSET
(
VdaFd
, &
ªad_fds
))

203 
s32Rë
 = 
HI_MPI_VDA_GëD©a
(
VdaChn
, &
°VdaD©a
, -1);

204 i‡(
s32Rë
 !
HI_SUCCESS
)

206 
SAMPLE_PRT
("HI_MPI_VDA_GëD©®Áûed wôh %#x!\n", 
s32Rë
);

207  
NULL
;

212 
¥ötf
("\033[0;0H");

213 
SAMPLE_COMM_VDA_MdPπSad
(
Â
, &
°VdaD©a
);

214 
SAMPLE_COMM_VDA_MdPπObj
(
Â
, &
°VdaD©a
);

215 
SAMPLE_COMM_VDA_MdPπAp
(
Â
, &
°VdaD©a
);

219 
s32Rë
 = 
HI_MPI_VDA_Rñó£D©a
(
VdaChn
, &
°VdaD©a
);

220 i‡(
s32Rë
 !
HI_SUCCESS
)

222 
SAMPLE_PRT
("HI_MPI_VDA_Rñó£D©®Áûed wôh %#x!\n", 
s32Rë
);

223  
NULL
;

229  
HI_NULL
;

235 
HI_S32
 
SAMPLE_COMM_VDA_OdPπ
(
FILE
* 
Â
, 
VDA_DATA_S
* 
p°VdaD©a
)

237 
HI_S32
 
i
;

239 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

240 
Ârötf
(
Â
, "ODÑegi⁄ÅŸÆ cou¡ =%d\n", 
p°VdaD©a
->
unD©a
.
°OdD©a
.
u32RgnNum
);

241 
i
 = 0; i < 
p°VdaD©a
->
unD©a
.
°OdD©a
.
u32RgnNum
; i++)

243 
Ârötf
(
Â
, "ODÑegi⁄[%d]: %d\n", 
i
, 
p°VdaD©a
->
unD©a
.
°OdD©a
.
abRgnAœrm
[i]);

245 
fÊush
(
Â
);

246  
HI_SUCCESS
;

252 
HI_VOID
* 
SAMPLE_COMM_VDA_OdGëResu…
(HI_VOID* 
pd©a
)

254 
HI_S32
 
i
;

255 
HI_S32
 
s32Rë
;

256 
VDA_CHN
 
VdaChn
;

257 
VDA_DATA_S
 
°VdaD©a
;

258 
HI_U32
 
u32RgnNum
;

259 
VDA_OD_PARAM_S
* 
pgs_°OdP¨am
;

260 
FILE
* 
Â
 = 
°dout
;

262 
pgs_°OdP¨am
 = (
VDA_OD_PARAM_S
*)
pd©a
;

264 
VdaChn
 = 
pgs_°OdP¨am
->VdaChn;

267 
HI_TRUE
 =
pgs_°OdP¨am
->
bThªadSèπ
)

269 
s32Rë
 = 
HI_MPI_VDA_GëD©a
(
VdaChn
, &
°VdaD©a
, -1);

270 i‡(
s32Rë
 !
HI_SUCCESS
)

272 
SAMPLE_PRT
("HI_MPI_VDA_GëD©®Áûed wôh %#x!\n", 
s32Rë
);

273  
NULL
;

276 
SAMPLE_COMM_VDA_OdPπ
(
Â
, &
°VdaD©a
);

278 
u32RgnNum
 = 
°VdaD©a
.
unD©a
.
°OdD©a
.u32RgnNum;

280 
i
 = 0; i < 
u32RgnNum
; i++)

282 i‡(
HI_TRUE
 =
°VdaD©a
.
unD©a
.
°OdD©a
.
abRgnAœrm
[
i
])

284 
¥ötf
("################VdaChn--%d,Rgn--%d,Occ!\n", 
VdaChn
, 
i
);

285 
s32Rë
 = 
HI_MPI_VDA_Re£tOdRegi⁄
(
VdaChn
, 
i
);

286 i‡(
s32Rë
 !
HI_SUCCESS
)

288 
SAMPLE_PRT
("HI_MPI_VDA_Re£tOdRegi⁄ faûed wôh %#x!\n", 
s32Rë
);

289  
NULL
;

294 
s32Rë
 = 
HI_MPI_VDA_Rñó£D©a
(
VdaChn
, &
°VdaD©a
);

295 i‡(
s32Rë
 !
HI_SUCCESS
)

297 
SAMPLE_PRT
("HI_MPI_VDA_Rñó£D©®Áûed wôh %#x!\n", 
s32Rë
);

298  
NULL
;

301 
u¶ìp
(200 * 1000);

304  
HI_NULL
;

310 
HI_S32
 
SAMPLE_COMM_VDA_MdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
* 
p°Size
)

312 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

313 
VDA_CHN_ATTR_S
 
°VdaChnAâr
;

314 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

316 i‡(
VDA_MAX_WIDTH
 < 
p°Size
->
u32Width
 || 
VDA_MAX_HEIGHT
 <Ö°Size->
u32Height
)

318 
SAMPLE_PRT
("Picture size invaild!\n");

319  
HI_FAILURE
;

323 
°VdaChnAâr
.
íW‹kMode
 = 
VDA_WORK_MODE_MD
;

324 
°VdaChnAâr
.
u32Width
 = 
p°Size
->u32Width;

325 
°VdaChnAâr
.
u32Height
 = 
p°Size
->u32Height;

327 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íVdaAlg
 = 
VDA_ALG_REF
;

328 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íMbSize
 = 
VDA_MB_16PIXEL
;

329 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íMbSadBôs
 = 
VDA_MB_SAD_8BIT
;

330 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íRefMode
 = 
VDA_REF_MODE_DYNAMIC
;

331 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32MdBufNum
 = 8;

332 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32VdaI¡vl
 = 4;

333 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32BgUpSrcWgt
 = 128;

334 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32SadTh
 = 100;

335 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32ObjNumMax
 = 128;

337 
s32Rë
 = 
HI_MPI_VDA_Cª©eChn
(
VdaChn
, &
°VdaChnAâr
);

338 i‡(
s32Rë
 !
HI_SUCCESS
)

340 
SAMPLE_PRT
("err!\n");

341  
s32Rë
;

345 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

346 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

347 
°SrcChn
.
s32DevId
 = 0;

349 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

350 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

351 
°De°Chn
.
s32DevId
 = 0;

353 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

354 i‡(
s32Rë
 !
HI_SUCCESS
)

356 
SAMPLE_PRT
("îr, s32Rë: 0x%x!\n", 
s32Rë
);

357  
s32Rë
;

361 
s32Rë
 = 
HI_MPI_VDA_SèπRecvPic
(
VdaChn
);

362 i‡(
s32Rë
 !
HI_SUCCESS
)

364 
SAMPLE_PRT
("err!\n");

365  
s32Rë
;

368 
gs_°MdP¨am
.
bThªadSèπ
 = 
HI_TRUE
;

369 
gs_°MdP¨am
.
VdaChn
 = VdaChn;

371 
±hªad_¸óã
(&
gs_VdaPid
[
SAMPLE_VDA_MD_CHN
], 0, 
SAMPLE_COMM_VDA_MdGëResu…
, (
HI_VOID
*)&
gs_°MdP¨am
);

373  
HI_SUCCESS
;

378 
HI_S32
 
SAMPLE_COMM_VDA_OdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
* 
p°Size
)

380 
VDA_CHN_ATTR_S
 
°VdaChnAâr
;

381 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

382 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

384 i‡(
VDA_MAX_WIDTH
 < 
p°Size
->
u32Width
 || 
VDA_MAX_HEIGHT
 <Ö°Size->
u32Height
)

386 
SAMPLE_PRT
("Picture size invaild!\n");

387  
HI_FAILURE
;

393 
°VdaChnAâr
.
íW‹kMode
 = 
VDA_WORK_MODE_OD
;

394 
°VdaChnAâr
.
u32Width
 = 
p°Size
->u32Width;

395 
°VdaChnAâr
.
u32Height
 = 
p°Size
->u32Height;

397 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íVdaAlg
 = 
VDA_ALG_REF
;

398 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íMbSize
 = 
VDA_MB_8PIXEL
;

399 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íMbSadBôs
 = 
VDA_MB_SAD_8BIT
;

400 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íRefMode
 = 
VDA_REF_MODE_DYNAMIC
;

401 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
u32VdaI¡vl
 = 4;

402 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
u32BgUpSrcWgt
 = 128;

404 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
u32RgnNum
 = 1;

406 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
s32X
 = 0;

407 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
s32Y
 = 0;

408 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
u32Width
 = 
p°Size
->u32Width;

409 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
u32Height
 = 
p°Size
->u32Height;

411 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32SadTh
 = 100;

412 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32AªaTh
 = 60;

413 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32OccC¡Th
 = 6;

414 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32UnOccC¡Th
 = 2;

416 
s32Rë
 = 
HI_MPI_VDA_Cª©eChn
(
VdaChn
, &
°VdaChnAâr
);

417 i‡(
s32Rë
 !
HI_SUCCESS
)

419 
SAMPLE_PRT
("err!\n");

420  (
s32Rë
);

426 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

427 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

428 
°SrcChn
.
s32DevId
 = 0;

430 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

431 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

432 
°De°Chn
.
s32DevId
 = 0;

434 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

435 i‡(
s32Rë
 !
HI_SUCCESS
)

437 
SAMPLE_PRT
("err!\n");

438  
s32Rë
;

442 
s32Rë
 = 
HI_MPI_VDA_SèπRecvPic
(
VdaChn
);

443 i‡(
s32Rë
 !
HI_SUCCESS
)

445 
SAMPLE_PRT
("err!\n");

446  (
s32Rë
);

450 
gs_°OdP¨am
.
bThªadSèπ
 = 
HI_TRUE
;

451 
gs_°OdP¨am
.
VdaChn
 = VdaChn;

453 
±hªad_¸óã
(&
gs_VdaPid
[
SAMPLE_VDA_OD_CHN
], 0, 
SAMPLE_COMM_VDA_OdGëResu…
, (
HI_VOID
*)&
gs_°OdP¨am
);

455  
HI_SUCCESS
;

460 
HI_VOID
 
SAMPLE_COMM_VDA_MdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
)

462 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

464 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

467 i‡(
HI_TRUE
 =
gs_°MdP¨am
.
bThªadSèπ
)

469 
gs_°MdP¨am
.
bThªadSèπ
 = 
HI_FALSE
;

470 
±hªad_joö
(
gs_VdaPid
[
SAMPLE_VDA_MD_CHN
], 0);

474 
s32Rë
 = 
HI_MPI_VDA_St›RecvPic
(
VdaChn
);

475 i‡(
s32Rë
 !
HI_SUCCESS
)

477 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

482 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

483 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

484 
°SrcChn
.
s32DevId
 = 0;

485 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

486 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

487 
°De°Chn
.
s32DevId
 = 0;

489 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

490 i‡(
s32Rë
 !
HI_SUCCESS
)

492 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

496 
s32Rë
 = 
HI_MPI_VDA_De°royChn
(
VdaChn
);

497 i‡(
s32Rë
 !
HI_SUCCESS
)

499 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

508 
HI_VOID
 
SAMPLE_COMM_VDA_OdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
)

510 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

511 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

514 i‡(
HI_TRUE
 =
gs_°OdP¨am
.
bThªadSèπ
)

516 
gs_°OdP¨am
.
bThªadSèπ
 = 
HI_FALSE
;

517 
±hªad_joö
(
gs_VdaPid
[
SAMPLE_VDA_OD_CHN
], 0);

521 
s32Rë
 = 
HI_MPI_VDA_St›RecvPic
(
VdaChn
);

522 i‡(
s32Rë
 !
HI_SUCCESS
)

524 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

528 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

529 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

530 
°SrcChn
.
s32DevId
 = 0;

531 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

532 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

533 
°De°Chn
.
s32DevId
 = 0;

534 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

535 i‡(
s32Rë
 !
HI_SUCCESS
)

537 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

541 
s32Rë
 = 
HI_MPI_VDA_De°royChn
(
VdaChn
);

542 i‡(
s32Rë
 !
HI_SUCCESS
)

544 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

549 #ifde‡
__˝lu•lus


550 #i‡
__˝lu•lus


	@sample/common/sample_comm_venc.c

9 #ifde‡
__˝lu•lus


10 #i‡
__˝lu•lus


15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/time.h
>

23 
	~<f˙é.h
>

24 
	~<î∫o.h
>

25 
	~<±hªad.h
>

26 
	~<m©h.h
>

27 
	~<uni°d.h
>

28 
	~<sig«l.h
>

30 
	~"ßm∂e_comm.h
"

32 c⁄° 
HI_U8
 
g_SOI
[2] = {0xFF, 0xD8};

33 c⁄° 
HI_U8
 
g_EOI
[2] = {0xFF, 0xD9};

34 
±hªad_t
 
gs_VícPid
;

35 
SAMPLE_VENC_GETSTREAM_PARA_S
 
gs_°P¨a
;

36 
HI_S32
 
gs_s32S«pC¡
 = 0;

41 
HI_S32
 
SAMPLE_COMM_VENC_MemC⁄fig
(
HI_VOID
)

43 
HI_S32
 
i
 = 0;

44 
HI_S32
 
s32Rë
;

46 
HI_CHAR
* 
pcMmzName
;

47 
MPP_CHN_S
 
°MµChnVENC
;

50 
i
 = 0; i < 64; i++)

53 
°MµChnVENC
.
íModId
 = 
HI_ID_VENC
;

54 
°MµChnVENC
.
s32DevId
 = 0;

55 
°MµChnVENC
.
s32ChnId
 = 
i
;

58 
pcMmzName
 = 
NULL
;

63 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVENC
, 
pcMmzName
);

64 i‡(
HI_SUCCESS
 !
s32Rë
)

66 
SAMPLE_PRT
("HI_MPI_SYS_SëMemC⁄‡wôh %#x!\n", 
s32Rë
);

67  
HI_FAILURE
;

71  
HI_SUCCESS
;

77 
HI_S32
 
SAMPLE_COMM_VENC_BödVpss
(
VENC_CHN
 
VeChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
)

79 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

80 
MPP_CHN_S
 
°SrcChn
;

81 
MPP_CHN_S
 
°De°Chn
;

83 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

84 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

85 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

87 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

88 
°De°Chn
.
s32DevId
 = 0;

89 
°De°Chn
.
s32ChnId
 = 
VeChn
;

91 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

92 i‡(
s32Rë
 !
HI_SUCCESS
)

94 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

95  
HI_FAILURE
;

98  
s32Rë
;

104 
HI_S32
 
SAMPLE_COMM_VENC_UnBödVpss
(
VENC_CHN
 
VeChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
)

106 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

107 
MPP_CHN_S
 
°SrcChn
;

108 
MPP_CHN_S
 
°De°Chn
;

110 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

111 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

112 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

114 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

115 
°De°Chn
.
s32DevId
 = 0;

116 
°De°Chn
.
s32ChnId
 = 
VeChn
;

118 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

119 i‡(
s32Rë
 !
HI_SUCCESS
)

121 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

122  
HI_FAILURE
;

125  
s32Rë
;

132 
HI_S32
 
SAMPLE_COMM_VENC_BödVo
(
VO_DEV
 
VoDev
, 
VO_CHN
 
VoChn
, 
VENC_CHN
 
VeChn
)

134 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

135 
MPP_CHN_S
 
°SrcChn
;

136 
MPP_CHN_S
 
°De°Chn
;

138 
°SrcChn
.
íModId
 = 
HI_ID_VOU
;

139 
°SrcChn
.
s32DevId
 = 
VoDev
;

140 
°SrcChn
.
s32ChnId
 = 
VoChn
;

142 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

143 
°De°Chn
.
s32DevId
 = 0;

144 
°De°Chn
.
s32ChnId
 = 
VeChn
;

146 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

147 i‡(
s32Rë
 !
HI_SUCCESS
)

149 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

150  
HI_FAILURE
;

153  
s32Rë
;

159 
HI_S32
 
SAMPLE_COMM_VENC_UnBödVo
(
VENC_CHN
 
GΩChn
, 
VO_DEV
 
VoDev
, 
VO_CHN
 
VoChn
)

161 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

162 
MPP_CHN_S
 
°SrcChn
;

163 
MPP_CHN_S
 
°De°Chn
;

165 
°SrcChn
.
íModId
 = 
HI_ID_VOU
;

166 
°SrcChn
.
s32DevId
 = 
VoDev
;

167 
°SrcChn
.
s32ChnId
 = 
VoChn
;

169 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

170 
°De°Chn
.
s32DevId
 = 0;

171 
°De°Chn
.
s32ChnId
 = 
GΩChn
;

173 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

174 i‡(
s32Rë
 !
HI_SUCCESS
)

176 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

177  
HI_FAILURE
;

180  
s32Rë
;

187 
HI_S32
 
SAMPLE_COMM_VDEC_BödVíc
(
VDEC_CHN
 
VdChn
, 
VENC_CHN
 
VeChn
)

189 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

190 
MPP_CHN_S
 
°SrcChn
;

191 
MPP_CHN_S
 
°De°Chn
;

193 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

194 
°SrcChn
.
s32DevId
 = 0;

195 
°SrcChn
.
s32ChnId
 = 
VdChn
;

197 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

198 
°De°Chn
.
s32DevId
 = 0;

199 
°De°Chn
.
s32ChnId
 = 
VeChn
;

201 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

202 i‡(
s32Rë
 !
HI_SUCCESS
)

204 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

205  
HI_FAILURE
;

208  
s32Rë
;

214 
HI_S32
 
SAMPLE_COMM_VDEC_UnBödVíc
(
VDEC_CHN
 
VdChn
, 
VENC_CHN
 
VeChn
)

216 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

217 
MPP_CHN_S
 
°SrcChn
;

218 
MPP_CHN_S
 
°De°Chn
;

220 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

221 
°SrcChn
.
s32DevId
 = 0;

222 
°SrcChn
.
s32ChnId
 = 
VdChn
;

224 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

225 
°De°Chn
.
s32DevId
 = 0;

226 
°De°Chn
.
s32ChnId
 = 
VeChn
;

229 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

230 i‡(
s32Rë
 !
HI_SUCCESS
)

232 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

233  
HI_FAILURE
;

236  
s32Rë
;

243 
HI_S32
 
SAMPLE_COMM_VENC_GëFûePo°fix
(
PAYLOAD_TYPE_E
 
íPaylﬂd
, * 
szFûePo°fix
)

245 i‡(
PT_H264
 =
íPaylﬂd
)

247 
°r˝y
(
szFûePo°fix
, ".h264");

249 i‡(
PT_H265
 =
íPaylﬂd
)

251 
°r˝y
(
szFûePo°fix
, ".h265");

253 i‡(
PT_JPEG
 =
íPaylﬂd
)

255 
°r˝y
(
szFûePo°fix
, ".jpg");

257 i‡(
PT_MJPEG
 =
íPaylﬂd
)

259 
°r˝y
(
szFûePo°fix
, ".mjp");

261 i‡(
PT_MP4VIDEO
 =
íPaylﬂd
)

263 
°r˝y
(
szFûePo°fix
, ".mp4");

267 
SAMPLE_PRT
("payloadÅypeÉrr!\n");

268  
HI_FAILURE
;

270  
HI_SUCCESS
;

276 
HI_S32
 
SAMPLE_COMM_VENC_SaveMJ≥g
(
FILE
* 
ÂMJ≥gFûe
, 
VENC_STREAM_S
* 
p°Såóm
)

278 
VENC_PACK_S
* 
p°D©a
;

279 
HI_U32
 
i
;

283 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

285 
p°D©a
 = &
p°Såóm
->
p°Pack
[
i
];

286 
fwrôe
(
p°D©a
->
pu8Addr
 +Ö°D©a->
u32Off£t
,Ö°D©a->
u32Lí
 -Ö°D©a->u32Off£t, 1, 
ÂMJ≥gFûe
);

287 
fÊush
(
ÂMJ≥gFûe
);

290  
HI_SUCCESS
;

296 
HI_S32
 
SAMPLE_COMM_VENC_SaveJ≥g
(
FILE
* 
ÂJ≥gFûe
, 
VENC_STREAM_S
* 
p°Såóm
)

298 
VENC_PACK_S
* 
p°D©a
;

299 
HI_U32
 
i
;

301 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

303 
p°D©a
 = &
p°Såóm
->
p°Pack
[
i
];

304 
fwrôe
(
p°D©a
->
pu8Addr
 +Ö°D©a->
u32Off£t
,Ö°D©a->
u32Lí
 -Ö°D©a->u32Off£t, 1, 
ÂJ≥gFûe
);

305 
fÊush
(
ÂJ≥gFûe
);

308  
HI_SUCCESS
;

314 
HI_S32
 
SAMPLE_COMM_VENC_SaveH264
(
FILE
* 
ÂH264Fûe
, 
VENC_STREAM_S
* 
p°Såóm
)

316 
HI_S32
 
i
;

319 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

321 
fwrôe
(
p°Såóm
->
p°Pack
[
i
].
pu8Addr
 +Ö°Såóm->p°Pack[i].
u32Off£t
,

322 
p°Såóm
->
p°Pack
[
i
].
u32Lí
 -Ö°Såóm->p°Pack[i].
u32Off£t
, 1, 
ÂH264Fûe
);

324 
fÊush
(
ÂH264Fûe
);

328  
HI_SUCCESS
;

334 
HI_S32
 
SAMPLE_COMM_VENC_SaveH265
(
FILE
* 
ÂH265Fûe
, 
VENC_STREAM_S
* 
p°Såóm
)

336 
HI_S32
 
i
;

338 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

340 
fwrôe
(
p°Såóm
->
p°Pack
[
i
].
pu8Addr
 +Ö°Såóm->p°Pack[i].
u32Off£t
,

341 
p°Såóm
->
p°Pack
[
i
].
u32Lí
 -Ö°Såóm->p°Pack[i].
u32Off£t
, 1, 
ÂH265Fûe
);

343 
fÊush
(
ÂH265Fûe
);

346  
HI_SUCCESS
;

352 
HI_S32
 
SAMPLE_COMM_VENC_SaveJPEG
(
FILE
* 
ÂJ≥gFûe
, 
VENC_STREAM_S
* 
p°Såóm
)

354 
VENC_PACK_S
* 
p°D©a
;

355 
HI_U32
 
i
;

357 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

359 
p°D©a
 = &
p°Såóm
->
p°Pack
[
i
];

360 
fwrôe
(
p°D©a
->
pu8Addr
 +Ö°D©a->
u32Off£t
,Ö°D©a->
u32Lí
 -Ö°D©a->u32Off£t, 1, 
ÂJ≥gFûe
);

361 
fÊush
(
ÂJ≥gFûe
);

364  
HI_SUCCESS
;

369 
HI_S32
 
SAMPLE_COMM_VENC_SaveS«p
(
VENC_STREAM_S
* 
p°Såóm
)

371 
acFûe
[
FILE_NAME_LEN
] = {0};

372 
FILE
* 
pFûe
;

373 
HI_S32
 
s32Rë
;

376 
time_t
 
timï
;

377 
tm
 *
timíow
;

378 
time°r
[50];

379 
time
(&
timï
);

380 
timíow
 = 
loˇ…ime
(&
timï
);

381 
°r·ime
(
time°r
,—ime°r),"%b_%d_%H_%M_%S",
timíow
);

385 
¢¥ötf
(
acFûe
, 
FILE_NAME_LEN
, "/home/as£ts/images/¢≠_%s.jpg", 
time°r
);

387 if(-1 =
sy°em
("rm -r /home/assets/images/*"))

389 
¥ötf
("rmÉrror!\n");

392 
pFûe
 = 
f›í
(
acFûe
, "wb");

393 i‡(
pFûe
 =
NULL
)

395 
SAMPLE_PRT
("open fileÉrr\n");

396  
HI_FAILURE
;

398 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveJPEG
(
pFûe
, 
p°Såóm
);

399 i‡(
HI_SUCCESS
 !
s32Rë
)

401 
SAMPLE_PRT
("save snapÖicture failed!\n");

402  
HI_FAILURE
;

404 
f˛o£
(
pFûe
);

405 
gs_s32S«pC¡
++;

406  
HI_SUCCESS
;

412 
HI_S32
 
SAMPLE_COMM_VENC_SaveSåóm
(
PAYLOAD_TYPE_E
 
íTy≥
, 
FILE
* 
pFd
, 
VENC_STREAM_S
* 
p°Såóm
)

414 
HI_S32
 
s32Rë
;

416 i‡(
PT_H264
 =
íTy≥
)

418 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveH264
(
pFd
, 
p°Såóm
);

420 i‡(
PT_MJPEG
 =
íTy≥
)

422 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveMJ≥g
(
pFd
, 
p°Såóm
);

424 i‡(
PT_H265
 =
íTy≥
)

426 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveH265
(
pFd
, 
p°Såóm
);

430  
HI_FAILURE
;

432  
s32Rë
;

439 
HI_S32
 
SAMPLE_COMM_VENC_Sèπ
(
VENC_CHN
 
VícChn
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íSize
, 
SAMPLE_RC_E
 
íRcMode
, 
HI_U32
 
u32Profûe
)

441 
HI_S32
 
s32Rë
;

442 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

443 
VENC_ATTR_H264_S
 
°H264Aâr
;

444 
VENC_ATTR_H264_CBR_S
 
°H264Cbr
;

445 
VENC_ATTR_H264_VBR_S
 
°H264Vbr
;

446 
VENC_ATTR_H264_FIXQP_S
 
°H264FixQp
;

447 
VENC_ATTR_H265_S
 
°H265Aâr
;

448 
VENC_ATTR_H265_CBR_S
 
°H265Cbr
;

449 
VENC_ATTR_H265_VBR_S
 
°H265Vbr
;

450 
VENC_ATTR_H265_FIXQP_S
 
°H265FixQp
;

451 
VENC_ATTR_MJPEG_S
 
°Mj≥gAâr
;

452 
VENC_ATTR_MJPEG_FIXQP_S
 
°Mj≥geFixQp
;

453 
VENC_ATTR_JPEG_S
 
°J≥gAâr
;

454 
SIZE_S
 
°PicSize
;

456 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
íN‹m
, 
íSize
, &
°PicSize
);

457 i‡(
HI_SUCCESS
 !
s32Rë
)

459 
SAMPLE_PRT
("GetÖicture size failed!\n");

460  
HI_FAILURE
;

466 
°VícChnAâr
.
°VeAâr
.
íTy≥
 =ÉnType;

467 
íTy≥
)

469 
PT_H264
:

471 
°H264Aâr
.
u32MaxPicWidth
 = 
°PicSize
.
u32Width
;

472 
°H264Aâr
.
u32MaxPicHeight
 = 
°PicSize
.
u32Height
;

473 
°H264Aâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

474 
°H264Aâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

475 
°H264Aâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

476 
°H264Aâr
.
u32Profûe
 = u32Profile;

477 
°H264Aâr
.
bByFøme
 = 
HI_TRUE
;

478 
°H264Aâr
.
u32BFømeNum
 = 0;

479 
°H264Aâr
.
u32RefNum
 = 1;

480 
mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârH264e
, &
°H264Aâr
, (
VENC_ATTR_H264_S
));

482 i‡(
SAMPLE_RC_CBR
 =
íRcMode
)

484 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264CBR
;

485 
°H264Cbr
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

486 
°H264Cbr
.
u32SètTime
 = 1;

487 
°H264Cbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

488 
°H264Cbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

490 
íSize
)

492 
PIC_QCIF
:

493 
°H264Cbr
.
u32BôR©e
 = 256;

495 
PIC_QVGA
:

496 
PIC_CIF
:

498 
°H264Cbr
.
u32BôR©e
 = 512;

501 
PIC_D1
:

502 
PIC_VGA
:

503 
°H264Cbr
.
u32BôR©e
 = 1024 * 2;

505 
PIC_HD720
:

506 
°H264Cbr
.
u32BôR©e
 = 1024 * 2;

508 
PIC_HD1080
:

509 
°H264Cbr
.
u32BôR©e
 = 1024 * 4;

511 
PIC_5M
:

512 
°H264Cbr
.
u32BôR©e
 = 1024 * 8;

515 
°H264Cbr
.
u32BôR©e
 = 1024 * 4;

519 
°H264Cbr
.
u32Flu˘u©eLevñ
 = 0;

520 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
, &
°H264Cbr
, (
VENC_ATTR_H264_CBR_S
));

522 i‡(
SAMPLE_RC_FIXQP
 =
íRcMode
)

524 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264FIXQP
;

525 
°H264FixQp
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

526 
°H264FixQp
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

527 
°H264FixQp
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

528 
°H264FixQp
.
u32IQp
 = 20;

529 
°H264FixQp
.
u32PQp
 = 23;

530 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH264FixQp
, &
°H264FixQp
, (
VENC_ATTR_H264_FIXQP_S
));

532 i‡(
SAMPLE_RC_VBR
 =
íRcMode
)

534 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264VBR
;

535 
°H264Vbr
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

536 
°H264Vbr
.
u32SètTime
 = 1;

537 
°H264Vbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

538 
°H264Vbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

539 
°H264Vbr
.
u32MöQp
 = 10;

540 
°H264Vbr
.
u32MaxQp
 = 40;

541 
íSize
)

543 
PIC_QCIF
:

544 
°H264Vbr
.
u32MaxBôR©e
 = 256 * 3;

546 
PIC_QVGA
:

547 
PIC_CIF
:

548 
°H264Vbr
.
u32MaxBôR©e
 = 512 * 3;

550 
PIC_D1
:

551 
PIC_VGA
:

552 
°H264Vbr
.
u32MaxBôR©e
 = 1024 * 2;

554 
PIC_HD720
:

555 
°H264Vbr
.
u32MaxBôR©e
 = 1024 * 3;

557 
PIC_HD1080
:

558 
°H264Vbr
.
u32MaxBôR©e
 = 1024 * 6;

560 
PIC_5M
:

561 
°H264Vbr
.
u32MaxBôR©e
 = 1024 * 8;

564 
°H264Vbr
.
u32MaxBôR©e
 = 1024 * 4;

567 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH264Vbr
, &
°H264Vbr
, (
VENC_ATTR_H264_VBR_S
));

571  
HI_FAILURE
;

576 
PT_MJPEG
:

578 
°Mj≥gAâr
.
u32MaxPicWidth
 = 
°PicSize
.
u32Width
;

579 
°Mj≥gAâr
.
u32MaxPicHeight
 = 
°PicSize
.
u32Height
;

580 
°Mj≥gAâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

581 
°Mj≥gAâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

582 
°Mj≥gAâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

583 
°Mj≥gAâr
.
bByFøme
 = 
HI_TRUE
;

584 
mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârMj≥g
, &
°Mj≥gAâr
, (
VENC_ATTR_MJPEG_S
));

586 i‡(
SAMPLE_RC_FIXQP
 =
íRcMode
)

588 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_MJPEGFIXQP
;

589 
°Mj≥geFixQp
.
u32QÁ˘‹
 = 90;

590 
°Mj≥geFixQp
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

591 
°Mj≥geFixQp
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

592 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârMj≥geFixQp
, &
°Mj≥geFixQp
,

593 (
VENC_ATTR_MJPEG_FIXQP_S
));

595 i‡(
SAMPLE_RC_CBR
 =
íRcMode
)

597 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_MJPEGCBR
;

598 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32SètTime
 = 1;

599 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

600 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

601 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32Flu˘u©eLevñ
 = 0;

602 
íSize
)

604 
PIC_QCIF
:

605 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 384 * 3;

607 
PIC_QVGA
:

608 
PIC_CIF
:

609 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 768 * 3;

611 
PIC_D1
:

612 
PIC_VGA
:

613 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024 * 3 * 3;

615 
PIC_HD720
:

616 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024 * 5 * 3;

618 
PIC_HD1080
:

619 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024 * 10 * 3;

621 
PIC_5M
:

622 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024 * 10 * 3;

625 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024 * 10 * 3;

629 i‡(
SAMPLE_RC_VBR
 =
íRcMode
)

631 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_MJPEGVBR
;

632 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32SètTime
 = 1;

633 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

634 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
‰32D°FrmR©e
 = 5;

635 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MöQÁ˘‹
 = 50;

636 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxQÁ˘‹
 = 95;

637 
íSize
)

639 
PIC_QCIF
:

640 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 256 * 3;

642 
PIC_QVGA
:

643 
PIC_CIF
:

644 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 512 * 3;

646 
PIC_D1
:

647 
PIC_VGA
:

648 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024 * 2 * 3;

650 
PIC_HD720
:

651 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024 * 3 * 3;

653 
PIC_HD1080
:

654 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024 * 6 * 3;

656 
PIC_5M
:

657 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024 * 12 * 3;

660 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024 * 4 * 3;

666 
SAMPLE_PRT
("cann't support other mode inÅhis version!\n");

668  
HI_FAILURE
;

673 
PT_JPEG
:

674 
°J≥gAâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

675 
°J≥gAâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

676 
°J≥gAâr
.
u32MaxPicWidth
 = 
°PicSize
.
u32Width
;

677 
°J≥gAâr
.
u32MaxPicHeight
 = 
°PicSize
.
u32Height
;

678 
°J≥gAâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

679 
°J≥gAâr
.
bByFøme
 = 
HI_TRUE
;

680 
°J≥gAâr
.
bSuµ‹tDCF
 = 
HI_FALSE
;

681 
mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârJ≥g
, &
°J≥gAâr
, (
VENC_ATTR_JPEG_S
));

684 
PT_H265
:

686 
°H265Aâr
.
u32MaxPicWidth
 = 
°PicSize
.
u32Width
;

687 
°H265Aâr
.
u32MaxPicHeight
 = 
°PicSize
.
u32Height
;

688 
°H265Aâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

689 
°H265Aâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

690 
°H265Aâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

691 i‡(
u32Profûe
 >= 1)

692 { 
°H265Aâr
.
u32Profûe
 = 0; }

694 { 
°H265Aâr
.
u32Profûe
 = u32Profile; }

695 
°H265Aâr
.
bByFøme
 = 
HI_TRUE
;

696 
°H265Aâr
.
u32BFømeNum
 = 0;

697 
°H265Aâr
.
u32RefNum
 = 1;

698 
mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârH265e
, &
°H265Aâr
, (
VENC_ATTR_H265_S
));

700 i‡(
SAMPLE_RC_CBR
 =
íRcMode
)

702 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H265CBR
;

703 
°H265Cbr
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

704 
°H265Cbr
.
u32SètTime
 = 1;

705 
°H265Cbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

706 
°H265Cbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

707 
íSize
)

709 
PIC_QCIF
:

710 
°H265Cbr
.
u32BôR©e
 = 256;

712 
PIC_QVGA
:

713 
PIC_CIF
:

715 
°H265Cbr
.
u32BôR©e
 = 512;

718 
PIC_D1
:

719 
PIC_VGA
:

720 
°H265Cbr
.
u32BôR©e
 = 1024 * 2;

722 
PIC_HD720
:

723 
°H265Cbr
.
u32BôR©e
 = 1024 * 3;

725 
PIC_HD1080
:

726 
°H265Cbr
.
u32BôR©e
 = 1024 * 4;

728 
PIC_5M
:

729 
°H265Cbr
.
u32BôR©e
 = 1024 * 8;

732 
°H265Cbr
.
u32BôR©e
 = 1024 * 4;

736 
°H265Cbr
.
u32Flu˘u©eLevñ
 = 0;

737 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
, &
°H265Cbr
, (
VENC_ATTR_H265_CBR_S
));

739 i‡(
SAMPLE_RC_FIXQP
 =
íRcMode
)

741 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H265FIXQP
;

742 
°H265FixQp
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

743 
°H265FixQp
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

744 
°H265FixQp
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

745 
°H265FixQp
.
u32IQp
 = 20;

746 
°H265FixQp
.
u32PQp
 = 23;

747 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH265FixQp
, &
°H265FixQp
, (
VENC_ATTR_H265_FIXQP_S
));

749 i‡(
SAMPLE_RC_VBR
 =
íRcMode
)

751 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H265VBR
;

752 
°H265Vbr
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

753 
°H265Vbr
.
u32SètTime
 = 1;

754 
°H265Vbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

755 
°H265Vbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 25 : 30;

756 
°H265Vbr
.
u32MöQp
 = 10;

757 
°H265Vbr
.
u32MaxQp
 = 40;

758 
íSize
)

760 
PIC_QCIF
:

761 
°H265Vbr
.
u32MaxBôR©e
 = 256 * 3;

763 
PIC_QVGA
:

764 
PIC_CIF
:

765 
°H265Vbr
.
u32MaxBôR©e
 = 512 * 3;

767 
PIC_D1
:

768 
PIC_VGA
:

769 
°H265Vbr
.
u32MaxBôR©e
 = 1024 * 2;

771 
PIC_HD720
:

772 
°H265Vbr
.
u32MaxBôR©e
 = 1024 * 3;

774 
PIC_HD1080
:

775 
°H265Vbr
.
u32MaxBôR©e
 = 1024 * 6;

777 
PIC_5M
:

778 
°H265Vbr
.
u32MaxBôR©e
 = 1024 * 8;

781 
°H265Vbr
.
u32MaxBôR©e
 = 1024 * 4;

784 
mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH265Vbr
, &
°H265Vbr
, (
VENC_ATTR_H265_VBR_S
));

788  
HI_FAILURE
;

793  
HI_ERR_VENC_NOT_SUPPORT
;

796 
s32Rë
 = 
HI_MPI_VENC_Cª©eChn
(
VícChn
, &
°VícChnAâr
);

797 i‡(
HI_SUCCESS
 !
s32Rë
)

799 
SAMPLE_PRT
("HI_MPI_VENC_CreateChn [%d] faild with %#x!\n", \

800 
VícChn
, 
s32Rë
);

801  
s32Rë
;

807 
s32Rë
 = 
HI_MPI_VENC_SèπRecvPic
(
VícChn
);

808 i‡(
HI_SUCCESS
 !
s32Rë
)

810 
SAMPLE_PRT
("HI_MPI_VENC_SèπRecvPi¯Áûd wôh%#x!\n", 
s32Rë
);

811  
HI_FAILURE
;

814  
HI_SUCCESS
;

821 
HI_S32
 
SAMPLE_COMM_VENC_St›
(
VENC_CHN
 
VícChn
)

823 
HI_S32
 
s32Rë
;

828 
s32Rë
 = 
HI_MPI_VENC_St›RecvPic
(
VícChn
);

829 i‡(
HI_SUCCESS
 !
s32Rë
)

831 
SAMPLE_PRT
("HI_MPI_VENC_StopRecvPic vechn[%d] failed with %#x!\n", \

832 
VícChn
, 
s32Rë
);

833  
HI_FAILURE
;

839 
s32Rë
 = 
HI_MPI_VENC_De°royChn
(
VícChn
);

840 i‡(
HI_SUCCESS
 !
s32Rë
)

842 
SAMPLE_PRT
("HI_MPI_VENC_DestroyChn vechn[%d] failed with %#x!\n", \

843 
VícChn
, 
s32Rë
);

844  
HI_FAILURE
;

847  
HI_SUCCESS
;

853 
HI_S32
 
SAMPLE_COMM_VENC_S«pSèπ
(
VENC_CHN
 
VícChn
, 
SIZE_S
* 
p°Size
)

855 
HI_S32
 
s32Rë
;

856 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

857 
VENC_ATTR_JPEG_S
 
°J≥gAâr
;

862 
°VícChnAâr
.
°VeAâr
.
íTy≥
 = 
PT_JPEG
;

864 
°J≥gAâr
.
u32MaxPicWidth
 = 
p°Size
->
u32Width
;

865 
°J≥gAâr
.
u32MaxPicHeight
 = 
p°Size
->
u32Height
;

866 
°J≥gAâr
.
u32PicWidth
 = 
p°Size
->
u32Width
;

867 
°J≥gAâr
.
u32PicHeight
 = 
p°Size
->
u32Height
;

868 
°J≥gAâr
.
u32BufSize
 = 
p°Size
->
u32Width
 *Ö°Size->
u32Height
 * 2;

869 
°J≥gAâr
.
bByFøme
 = 
HI_TRUE
;

870 
°J≥gAâr
.
bSuµ‹tDCF
 = 
HI_FALSE
;

871 
mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârJ≥g
, &
°J≥gAâr
, (
VENC_ATTR_JPEG_S
));

873 
s32Rë
 = 
HI_MPI_VENC_Cª©eChn
(
VícChn
, &
°VícChnAâr
);

874 i‡(
HI_SUCCESS
 !
s32Rë
)

876 
SAMPLE_PRT
("HI_MPI_VENC_CreateChn [%d] faild with %#x!\n", \

877 
VícChn
, 
s32Rë
);

878  
s32Rë
;

880  
HI_SUCCESS
;

886 
HI_S32
 
SAMPLE_COMM_VENC_S«pSt›
(
VENC_CHN
 
VícChn
)

888 
HI_S32
 
s32Rë
;

890 
s32Rë
 = 
HI_MPI_VENC_St›RecvPic
(
VícChn
);

891 i‡(
HI_SUCCESS
 !
s32Rë
)

893 
SAMPLE_PRT
("HI_MPI_VENC_St›RecvPi¯vechn[%d] faûed wôh %#x!\n", 
VícChn
, 
s32Rë
);

894  
HI_FAILURE
;

897 
s32Rë
 = 
HI_MPI_VENC_De°royChn
(
VícChn
);

898 i‡(
HI_SUCCESS
 !
s32Rë
)

900 
SAMPLE_PRT
("HI_MPI_VENC_De°royCh¿vechn[%d] faûed wôh %#x!\n", 
VícChn
, 
s32Rë
);

901  
HI_FAILURE
;

904  
HI_SUCCESS
;

910 
HI_S32
 
SAMPLE_COMM_VENC_S«pPro˚ss
(
VENC_CHN
 
VícChn
)

912 
timevÆ
 
TimeoutVÆ
;

913 
fd_£t
 
ªad_fds
;

914 
HI_S32
 
s32VícFd
;

915 
VENC_CHN_STAT_S
 
°Sèt
;

916 
VENC_STREAM_S
 
°Såóm
;

917 
HI_S32
 
s32Rë
;

918 
VENC_RECV_PIC_PARAM_S
 
°RecvP¨am
;

926 
°RecvP¨am
.
s32RecvPicNum
 = 1;

927 
s32Rë
 = 
HI_MPI_VENC_SèπRecvPicEx
(
VícChn
, &
°RecvP¨am
);

928 i‡(
HI_SUCCESS
 !
s32Rë
)

930 
SAMPLE_PRT
("HI_MPI_VENC_SèπRecvPi¯Áûd wôh%#x!\n", 
s32Rë
);

931  
HI_FAILURE
;

936 
s32VícFd
 = 
HI_MPI_VENC_GëFd
(
VícChn
);

937 i‡(
s32VícFd
 < 0)

939 
SAMPLE_PRT
("HI_MPI_VENC_GëFd faûd wôh%#x!\n", 
s32VícFd
);

940  
HI_FAILURE
;

943 
FD_ZERO
(&
ªad_fds
);

944 
FD_SET
(
s32VícFd
, &
ªad_fds
);

946 
TimeoutVÆ
.
tv_£c
 = 2;

947 
TimeoutVÆ
.
tv_u£c
 = 0;

948 
s32Rë
 = 
£À˘
(
s32VícFd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

949 i‡(
s32Rë
 < 0)

951 
SAMPLE_PRT
("snap select failed!\n");

952  
HI_FAILURE
;

954 i‡(0 =
s32Rë
)

956 
SAMPLE_PRT
("snapÅime out!\n");

957  
HI_FAILURE
;

961 i‡(
FD_ISSET
(
s32VícFd
, &
ªad_fds
))

963 
s32Rë
 = 
HI_MPI_VENC_Quîy
(
VícChn
, &
°Sèt
);

964 i‡(
s32Rë
 !
HI_SUCCESS
)

966 
SAMPLE_PRT
("HI_MPI_VENC_Quîy faûed wôh %#x!\n", 
s32Rë
);

967  
HI_FAILURE
;

970 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*)
mÆloc
((VENC_PACK_SË* 
°Sèt
.
u32CurPacks
);

971 i‡(
NULL
 =
°Såóm
.
p°Pack
)

973 
SAMPLE_PRT
("malloc memory failed!\n");

974  
HI_FAILURE
;

977 
°Såóm
.
u32PackCou¡
 = 
°Sèt
.
u32CurPacks
;

978 
s32Rë
 = 
HI_MPI_VENC_GëSåóm
(
VícChn
, &
°Såóm
, -1);

979 i‡(
HI_SUCCESS
 !
s32Rë
)

981 
SAMPLE_PRT
("HI_MPI_VENC_GëSåóm faûed wôh %#x!\n", 
s32Rë
);

982 
‰ì
(
°Såóm
.
p°Pack
);

983 
°Såóm
.
p°Pack
 = 
NULL
;

984  
HI_FAILURE
;

987 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveS«p
(&
°Såóm
);

988 i‡(
HI_SUCCESS
 !
s32Rë
)

990 
SAMPLE_PRT
("HI_MPI_VENC_GëSåóm faûed wôh %#x!\n", 
s32Rë
);

991 
‰ì
(
°Såóm
.
p°Pack
);

992 
°Såóm
.
p°Pack
 = 
NULL
;

993  
HI_FAILURE
;

996 
s32Rë
 = 
HI_MPI_VENC_Rñó£Såóm
(
VícChn
, &
°Såóm
);

997 i‡(
s32Rë
)

999 
SAMPLE_PRT
("HI_MPI_VENC_Rñó£Såóm faûed wôh %#x!\n", 
s32Rë
);

1000 
‰ì
(
°Såóm
.
p°Pack
);

1001 
°Såóm
.
p°Pack
 = 
NULL
;

1002  
HI_FAILURE
;

1005 
‰ì
(
°Såóm
.
p°Pack
);

1006 
°Såóm
.
p°Pack
 = 
NULL
;

1012 
s32Rë
 = 
HI_MPI_VENC_St›RecvPic
(
VícChn
);

1013 i‡(
s32Rë
 !
HI_SUCCESS
)

1015 
SAMPLE_PRT
("HI_MPI_VENC_St›RecvPi¯Áûed wôh %#x!\n", 
s32Rë
);

1016  
HI_FAILURE
;

1020  
HI_SUCCESS
;

1026 
HI_VOID
* 
SAMPLE_COMM_VENC_GëVícSåómProc
(HI_VOID* 
p
)

1028 
HI_S32
 
i
;

1029 
HI_S32
 
s32ChnTŸÆ
;

1030 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

1031 
SAMPLE_VENC_GETSTREAM_PARA_S
* 
p°P¨a
;

1032 
HI_S32
 
maxfd
 = 0;

1033 
timevÆ
 
TimeoutVÆ
;

1034 
fd_£t
 
ªad_fds
;

1035 
HI_S32
 
VícFd
[
VENC_MAX_CHN_NUM
];

1036 
HI_CHAR
 
aszFûeName
[
VENC_MAX_CHN_NUM
][
FILE_NAME_LEN
];

1037 
FILE
* 
pFûe
[
VENC_MAX_CHN_NUM
];

1038 
szFûePo°fix
[10];

1039 
VENC_CHN_STAT_S
 
°Sèt
;

1040 
VENC_STREAM_S
 
°Såóm
;

1041 
HI_S32
 
s32Rë
;

1042 
VENC_CHN
 
VícChn
;

1043 
PAYLOAD_TYPE_E
 
íPayLﬂdTy≥
[
VENC_MAX_CHN_NUM
];

1045 
p°P¨a
 = (
SAMPLE_VENC_GETSTREAM_PARA_S
*)
p
;

1046 
s32ChnTŸÆ
 = 
p°P¨a
->
s32C¡
;

1051 i‡(
s32ChnTŸÆ
 >
VENC_MAX_CHN_NUM
)

1053 
SAMPLE_PRT
("input count invaild\n");

1054  
NULL
;

1056 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1059 
VícChn
 = 
i
;

1060 
s32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°VícChnAâr
);

1061 i‡(
s32Rë
 !
HI_SUCCESS
)

1063 
SAMPLE_PRT
("HI_MPI_VENC_GetChnAttr chn[%d] failed with %#x!\n", \

1064 
VícChn
, 
s32Rë
);

1065  
NULL
;

1067 
íPayLﬂdTy≥
[
i
] = 
°VícChnAâr
.
°VeAâr
.
íTy≥
;

1069 
s32Rë
 = 
SAMPLE_COMM_VENC_GëFûePo°fix
(
íPayLﬂdTy≥
[
i
], 
szFûePo°fix
);

1070 i‡(
s32Rë
 !
HI_SUCCESS
)

1072 
SAMPLE_PRT
("SAMPLE_COMM_VENC_GetFilePostfix [%d] failed with %#x!\n", \

1073 
°VícChnAâr
.
°VeAâr
.
íTy≥
, 
s32Rë
);

1074  
NULL
;

1076 
¢¥ötf
(
aszFûeName
[
i
], 
FILE_NAME_LEN
, "°ªam_chn%d%s", i, 
szFûePo°fix
);

1077 
pFûe
[
i
] = 
f›í
(
aszFûeName
[i], "wb");

1078 i‡(!
pFûe
[
i
])

1080 
SAMPLE_PRT
("open file[%s] failed!\n",

1081 
aszFûeName
[
i
]);

1082  
NULL
;

1086 
VícFd
[
i
] = 
HI_MPI_VENC_GëFd
(i);

1087 i‡(
VícFd
[
i
] < 0)

1089 
SAMPLE_PRT
("HI_MPI_VENC_GetFd failed with %#x!\n",

1090 
VícFd
[
i
]);

1091  
NULL
;

1093 i‡(
maxfd
 <
VícFd
[
i
])

1095 
maxfd
 = 
VícFd
[
i
];

1102 
HI_TRUE
 =
p°P¨a
->
bThªadSèπ
)

1104 
FD_ZERO
(&
ªad_fds
);

1105 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1107 
FD_SET
(
VícFd
[
i
], &
ªad_fds
);

1110 
TimeoutVÆ
.
tv_£c
 = 2;

1111 
TimeoutVÆ
.
tv_u£c
 = 0;

1112 
s32Rë
 = 
£À˘
(
maxfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

1113 i‡(
s32Rë
 < 0)

1115 
SAMPLE_PRT
("select failed!\n");

1118 i‡(
s32Rë
 == 0)

1120 
SAMPLE_PRT
("get venc streamÅime out,ÉxitÅhread\n");

1125 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1127 i‡(
FD_ISSET
(
VícFd
[
i
], &
ªad_fds
))

1132 
mem£t
(&
°Såóm
, 0, (stStream));

1133 
s32Rë
 = 
HI_MPI_VENC_Quîy
(
i
, &
°Sèt
);

1134 i‡(
HI_SUCCESS
 !
s32Rë
)

1136 
SAMPLE_PRT
("HI_MPI_VENC_Quîy chn[%d] faûed wôh %#x!\n", 
i
, 
s32Rë
);

1143 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*)
mÆloc
((VENC_PACK_SË* 
°Sèt
.
u32CurPacks
);

1144 i‡(
NULL
 =
°Såóm
.
p°Pack
)

1146 
SAMPLE_PRT
("malloc streamÖack failed!\n");

1153 
°Såóm
.
u32PackCou¡
 = 
°Sèt
.
u32CurPacks
;

1154 
s32Rë
 = 
HI_MPI_VENC_GëSåóm
(
i
, &
°Såóm
, 
HI_TRUE
);

1155 i‡(
HI_SUCCESS
 !
s32Rë
)

1157 
‰ì
(
°Såóm
.
p°Pack
);

1158 
°Såóm
.
p°Pack
 = 
NULL
;

1159 
SAMPLE_PRT
("HI_MPI_VENC_GetStream failed with %#x!\n", \

1160 
s32Rë
);

1167 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[i], &
°Såóm
);

1168 i‡(
HI_SUCCESS
 !
s32Rë
)

1170 
‰ì
(
°Såóm
.
p°Pack
);

1171 
°Såóm
.
p°Pack
 = 
NULL
;

1172 
SAMPLE_PRT
("save stream failed!\n");

1178 
s32Rë
 = 
HI_MPI_VENC_Rñó£Såóm
(
i
, &
°Såóm
);

1179 i‡(
HI_SUCCESS
 !
s32Rë
)

1181 
‰ì
(
°Såóm
.
p°Pack
);

1182 
°Såóm
.
p°Pack
 = 
NULL
;

1188 
‰ì
(
°Såóm
.
p°Pack
);

1189 
°Såóm
.
p°Pack
 = 
NULL
;

1198 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1200 
f˛o£
(
pFûe
[
i
]);

1203  
NULL
;

1211 
HI_VOID
* 
SAMPLE_COMM_VENC_GëVícSåómProc_Svc_t
(* 
p
)

1213 
HI_S32
 
i
 = 0;

1214 
HI_S32
 
s32C¡
 = 0;

1215 
HI_S32
 
s32ChnTŸÆ
;

1216 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

1217 
SAMPLE_VENC_GETSTREAM_PARA_S
* 
p°P¨a
;

1218 
HI_S32
 
maxfd
 = 0;

1219 
timevÆ
 
TimeoutVÆ
;

1220 
fd_£t
 
ªad_fds
;

1221 
HI_S32
 
VícFd
[
VENC_MAX_CHN_NUM
];

1222 
HI_CHAR
 
aszFûeName
[
VENC_MAX_CHN_NUM
][64];

1223 
FILE
* 
pFûe
[
VENC_MAX_CHN_NUM
];

1224 
szFûePo°fix
[10];

1225 
VENC_CHN_STAT_S
 
°Sèt
;

1226 
VENC_STREAM_S
 
°Såóm
;

1227 
HI_S32
 
s32Rë
;

1228 
VENC_CHN
 
VícChn
;

1229 
PAYLOAD_TYPE_E
 
íPayLﬂdTy≥
[
VENC_MAX_CHN_NUM
];

1231 
p°P¨a
 = (
SAMPLE_VENC_GETSTREAM_PARA_S
*)
p
;

1232 
s32ChnTŸÆ
 = 
p°P¨a
->
s32C¡
;

1237 i‡(
s32ChnTŸÆ
 >
VENC_MAX_CHN_NUM
)

1239 
SAMPLE_PRT
("input count invaild\n");

1240  
NULL
;

1242 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1245 
VícChn
 = 
i
;

1246 
s32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°VícChnAâr
);

1247 i‡(
s32Rë
 !
HI_SUCCESS
)

1249 
SAMPLE_PRT
("HI_MPI_VENC_GetChnAttr chn[%d] failed with %#x!\n", \

1250 
VícChn
, 
s32Rë
);

1251  
NULL
;

1253 
íPayLﬂdTy≥
[
i
] = 
°VícChnAâr
.
°VeAâr
.
íTy≥
;

1255 
s32Rë
 = 
SAMPLE_COMM_VENC_GëFûePo°fix
(
íPayLﬂdTy≥
[
i
], 
szFûePo°fix
);

1256 i‡(
s32Rë
 !
HI_SUCCESS
)

1258 
SAMPLE_PRT
("SAMPLE_COMM_VENC_GetFilePostfix [%d] failed with %#x!\n", \

1259 
°VícChnAâr
.
°VeAâr
.
íTy≥
, 
s32Rë
);

1260  
NULL
;

1262 
s32C¡
 = 0; s32Cnt < 3; s32Cnt++)

1264 
¢¥ötf
(
aszFûeName
[
i
 + 
s32C¡
], 
FILE_NAME_LEN
, "Tid%d%s", i + s32C¡, 
szFûePo°fix
);

1265 
pFûe
[
i
 + 
s32C¡
] = 
f›í
(
aszFûeName
[i + s32Cnt], "wb");

1267 i‡(!
pFûe
[
i
 + 
s32C¡
])

1269 
SAMPLE_PRT
("open file[%s] failed!\n",

1270 
aszFûeName
[
i
 + 
s32C¡
]);

1271  
NULL
;

1276 
VícFd
[
i
] = 
HI_MPI_VENC_GëFd
(i);

1277 i‡(
VícFd
[
i
] < 0)

1279 
SAMPLE_PRT
("HI_MPI_VENC_GetFd failed with %#x!\n",

1280 
VícFd
[
i
]);

1281  
NULL
;

1283 i‡(
maxfd
 <
VícFd
[
i
])

1285 
maxfd
 = 
VícFd
[
i
];

1292 
HI_TRUE
 =
p°P¨a
->
bThªadSèπ
)

1294 
FD_ZERO
(&
ªad_fds
);

1295 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1297 
FD_SET
(
VícFd
[
i
], &
ªad_fds
);

1300 
TimeoutVÆ
.
tv_£c
 = 2;

1301 
TimeoutVÆ
.
tv_u£c
 = 0;

1302 
s32Rë
 = 
£À˘
(
maxfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

1303 i‡(
s32Rë
 < 0)

1305 
SAMPLE_PRT
("select failed!\n");

1308 i‡(
s32Rë
 == 0)

1310 
SAMPLE_PRT
("get venc streamÅime out,ÉxitÅhread\n");

1315 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1317 i‡(
FD_ISSET
(
VícFd
[
i
], &
ªad_fds
))

1322 
mem£t
(&
°Såóm
, 0, (stStream));

1323 
s32Rë
 = 
HI_MPI_VENC_Quîy
(
i
, &
°Sèt
);

1324 i‡(
HI_SUCCESS
 !
s32Rë
)

1326 
SAMPLE_PRT
("HI_MPI_VENC_Quîy chn[%d] faûed wôh %#x!\n", 
i
, 
s32Rë
);

1333 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*)
mÆloc
((VENC_PACK_SË* 
°Sèt
.
u32CurPacks
);

1334 i‡(
NULL
 =
°Såóm
.
p°Pack
)

1336 
SAMPLE_PRT
("malloc streamÖack failed!\n");

1343 
°Såóm
.
u32PackCou¡
 = 
°Sèt
.
u32CurPacks
;

1344 
s32Rë
 = 
HI_MPI_VENC_GëSåóm
(
i
, &
°Såóm
, 
HI_TRUE
);

1345 i‡(
HI_SUCCESS
 !
s32Rë
)

1347 
‰ì
(
°Såóm
.
p°Pack
);

1348 
°Såóm
.
p°Pack
 = 
NULL
;

1349 
SAMPLE_PRT
("HI_MPI_VENC_GetStream failed with %#x!\n", \

1350 
s32Rë
);

1358 
s32C¡
 = 0; s32Cnt < 3; s32Cnt++)

1361 
s32C¡
)

1364 i‡(
BASE_IDRSLICE
 =
°Såóm
.
°H264Info
.
íRefTy≥
 ||

1365 
BASE_PSLICE_REFBYBASE
 =
°Såóm
.
°H264Info
.
íRefTy≥
)

1367 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[ò+ 
s32C¡
], &
°Såóm
);

1372 i‡(
BASE_IDRSLICE
 =
°Såóm
.
°H264Info
.
íRefTy≥
 ||

1373 
BASE_PSLICE_REFBYBASE
 =
°Såóm
.
°H264Info
.
íRefTy≥
 ||

1374 
BASE_PSLICE_REFBYENHANCE
 =
°Såóm
.
°H264Info
.
íRefTy≥
)

1376 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[ò+ 
s32C¡
], &
°Såóm
);

1381 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[ò+ 
s32C¡
], &
°Såóm
);

1386 i‡(
HI_SUCCESS
 !
s32Rë
)

1388 
‰ì
(
°Såóm
.
p°Pack
);

1389 
°Såóm
.
p°Pack
 = 
NULL
;

1390 
SAMPLE_PRT
("save stream failed!\n");

1396 
s32C¡
 = 0; s32Cnt < 3; s32Cnt++)

1398 i‡(
s32C¡
 == 0)

1400 i‡(
NULL
 !
pFûe
[
i
 + 
s32C¡
])

1402 i‡(
BASE_IDRSLICE
 =
°Såóm
.
°H264Info
.
íRefTy≥
 ||

1403 
BASE_PSLICE_REFBYBASE
 =
°Såóm
.
°H264Info
.
íRefTy≥
)

1405 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[ò+ 
s32C¡
], &
°Såóm
);

1411 i‡(
s32C¡
 == 1)

1413 i‡(
NULL
 !
pFûe
[
i
 + 
s32C¡
])

1415 i‡(
BASE_IDRSLICE
 =
°Såóm
.
°H264Info
.
íRefTy≥
 ||

1416 
BASE_PSLICE_REFBYBASE
 =
°Såóm
.
°H264Info
.
íRefTy≥
 ||

1417 
BASE_PSLICE_REFBYENHANCE
 =
°Såóm
.
°H264Info
.
íRefTy≥
)

1419 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[ò+ 
s32C¡
], &
°Såóm
);

1427 i‡(
NULL
 !
pFûe
[
i
 + 
s32C¡
])

1429 
s32Rë
 = 
SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[ò+ 
s32C¡
], &
°Såóm
);

1434 i‡(
HI_SUCCESS
 !
s32Rë
)

1436 
‰ì
(
°Såóm
.
p°Pack
);

1437 
°Såóm
.
p°Pack
 = 
NULL
;

1438 
SAMPLE_PRT
("save stream failed!\n");

1445 
s32Rë
 = 
HI_MPI_VENC_Rñó£Såóm
(
i
, &
°Såóm
);

1446 i‡(
HI_SUCCESS
 !
s32Rë
)

1448 
‰ì
(
°Såóm
.
p°Pack
);

1449 
°Såóm
.
p°Pack
 = 
NULL
;

1455 
‰ì
(
°Såóm
.
p°Pack
);

1456 
°Såóm
.
p°Pack
 = 
NULL
;

1465 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1467 
s32C¡
 = 0; s32Cnt < 3; s32Cnt++)

1469 i‡(
pFûe
[
i
 + 
s32C¡
])

1471 
f˛o£
(
pFûe
[
i
 + 
s32C¡
]);

1476  
NULL
;

1482 
HI_S32
 
SAMPLE_COMM_VENC_SèπGëSåóm
(HI_S32 
s32C¡
)

1484 
gs_°P¨a
.
bThªadSèπ
 = 
HI_TRUE
;

1485 
gs_°P¨a
.
s32C¡
 = s32Cnt;

1487  
±hªad_¸óã
(&
gs_VícPid
, 0, 
SAMPLE_COMM_VENC_GëVícSåómProc
, (
HI_VOID
*)&
gs_°P¨a
);

1493 
HI_S32
 
SAMPLE_COMM_VENC_SèπGëSåóm_Svc_t
(HI_S32 
s32C¡
)

1495 
gs_°P¨a
.
bThªadSèπ
 = 
HI_TRUE
;

1496 
gs_°P¨a
.
s32C¡
 = s32Cnt;

1498  
±hªad_¸óã
(&
gs_VícPid
, 0, 
SAMPLE_COMM_VENC_GëVícSåómProc_Svc_t
, (
HI_VOID
*)&
gs_°P¨a
);

1506 
HI_S32
 
SAMPLE_COMM_VENC_St›GëSåóm
()

1508 i‡(
HI_TRUE
 =
gs_°P¨a
.
bThªadSèπ
)

1510 
gs_°P¨a
.
bThªadSèπ
 = 
HI_FALSE
;

1511 
±hªad_joö
(
gs_VícPid
, 0);

1513  
HI_SUCCESS
;

1517 
HI_VOID
 
SAMPLE_COMM_VENC_RódO√Føme
–
FILE
* 
Â
, 
HI_U8
* 
pY
, HI_U8* 
pU
, HI_U8* 
pV
,

1518 
HI_U32
 
width
, HI_U32 
height
, HI_U32 
°ride
, HI_U32 
°ride2
)

1520 
HI_U8
* 
pD°
;

1522 
HI_U32
 
u32Row
;

1525 
pD°
 = 
pY
;

1526  
u32Row
 = 0; u32Row < 
height
; u32Row++ )

1528 
‰ód
–
pD°
, 
width
, 1, 
Â
 );

1529 
pD°
 +
°ride
;

1532 
pD°
 = 
pU
;

1533  
u32Row
 = 0; u32Row < 
height
 / 2; u32Row++ )

1535 
‰ód
–
pD°
, 
width
 / 2, 1, 
Â
 );

1536 
pD°
 +
°ride2
;

1539 
pD°
 = 
pV
;

1540  
u32Row
 = 0; u32Row < 
height
 / 2; u32Row++ )

1542 
‰ód
–
pD°
, 
width
 / 2, 1, 
Â
 );

1543 
pD°
 +
°ride2
;

1548 
HI_S32
 
SAMPLE_COMM_VENC_PœnToSemi
(
HI_U8
* 
pY
, HI_S32 
ySåide
,

1549 
HI_U8
* 
pU
, 
HI_S32
 
uSåide
,

1550 
HI_U8
* 
pV
, 
HI_S32
 
vSåide
,

1551 
HI_S32
 
picWidth
, HI_S32 
picHeight
)

1553 
HI_S32
 
i
;

1554 
HI_U8
* 
pTmpU
, *
±u
;

1555 
HI_U8
* 
pTmpV
, *
±v
;

1557 
HI_S32
 
s32HafW
 = 
uSåide
 >> 1 ;

1558 
HI_S32
 
s32HafH
 = 
picHeight
 >> 1 ;

1559 
HI_S32
 
s32Size
 = 
s32HafW
 * 
s32HafH
;

1561 
pTmpU
 = 
mÆloc
–
s32Size
 );

1562 
±u
 = 
pTmpU
;

1563 
pTmpV
 = 
mÆloc
–
s32Size
 );

1564 
±v
 = 
pTmpV
;

1565 i‡((
pTmpU
 =
HI_NULL
Ë|| (
pTmpV
 == HI_NULL))

1567 
¥ötf
("malloc buf failed\n");

1568  
HI_FAILURE
;

1571 
mem˝y
(
pTmpU
, 
pU
, 
s32Size
);

1572 
mem˝y
(
pTmpV
, 
pV
, 
s32Size
);

1574 
i
 = 0; i<
s32Size
 >> 1; i++)

1576 *
pU
++ = *
pTmpV
++;

1577 *
pU
++ = *
pTmpU
++;

1580 
i
 = 0; i<
s32Size
 >> 1; i++)

1582 *
pV
++ = *
pTmpV
++;

1583 *
pV
++ = *
pTmpU
++;

1586 
‰ì
–
±u
 );

1587 
‰ì
–
±v
 );

1589  
HI_SUCCESS
;

1593 #ifde‡
__˝lu•lus


1594 #i‡
__˝lu•lus


	@sample/common/sample_comm_vi.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/pﬁl.h
>

21 
	~<sys/time.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<±hªad.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

27 
	~<sig«l.h
>

28 
	~"hi_mùi.h
"

30 
	~"hi_comm⁄.h
"

31 
	~"ßm∂e_comm.h
"

33 
VI_DEV_ATTR_S
 
DEV_ATTR_BT656D1_1MUX
 =

36 
VI_MODE_BT656
,

38 
VI_WORK_MODE_1Mu…ùÀx
,

42 
VI_SCAN_INTERLACED
,

46 
VI_INPUT_DATA_YVYU
,

50 
VI_VSYNC_FIELD
, 
VI_VSYNC_NEG_HIGH
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_VALID_SINGAL
, 
VI_VSYNC_VALID_NEG_HIGH
,

62 
VI_PATH_BYPASS
,

64 
VI_DATA_TYPE_YUV


68 
VI_DEV_ATTR_S
 
DEV_ATTR_BT1120_1080I_1MUX
 =

71 
VI_MODE_BT1120_STANDARD
,

73 
VI_WORK_MODE_1Mu…ùÀx
,

77 
VI_SCAN_INTERLACED
,

81 
VI_INPUT_DATA_UVUV
,

86 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_HIGH
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_NORM_PULSE
, 
VI_VSYNC_VALID_NEG_HIGH
,

98 
VI_PATH_BYPASS
,

100 
VI_DATA_TYPE_YUV
,

102 
HI_FALSE
,

108 
VI_DEV_ATTR_S
 
DEV_ATTR_BT1120_1080P_BASE
 =

111 
VI_MODE_BT1120_STANDARD
,

113 
VI_WORK_MODE_1Mu…ùÀx
,

117 
VI_SCAN_PROGRESSIVE
,

121 
VI_INPUT_DATA_UVUV
,

126 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_HIGH
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_NORM_PULSE
, 
VI_VSYNC_VALID_NEG_HIGH
,

138 
VI_PATH_BYPASS
,

140 
VI_DATA_TYPE_YUV
,

142 
HI_FALSE
,

149 
VI_DEV_ATTR_S
 
DEV_ATTR_BT1120_720P_BASE
 =

153 
VI_MODE_BT1120_STANDARD
,

155 
VI_WORK_MODE_1Mu…ùÀx
,

159 
VI_SCAN_PROGRESSIVE
,

164 
VI_INPUT_DATA_UVUV
,

169 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_HIGH
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_NORM_PULSE
, 
VI_VSYNC_VALID_NEG_HIGH
,

181 
VI_PATH_BYPASS
,

183 
VI_DATA_TYPE_YUV
,

185 
HI_FALSE
,

191 
VI_DEV_ATTR_S
 
DEV_ATTR_IMX122_DC_1080P
 =

194 
VI_MODE_DIGITAL_CAMERA
,

196 
VI_WORK_MODE_1Mu…ùÀx
,

200 
VI_SCAN_PROGRESSIVE
,

204 
VI_INPUT_DATA_YUYV
,

209 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_HIGH
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_NORM_PULSE
, 
VI_VSYNC_VALID_NEG_HIGH
,

221 
VI_PATH_ISP
,

223 
VI_DATA_TYPE_RGB


227 
VI_DEV_ATTR_S
 
DEV_ATTR_MT9P006_DC_1080P
 =

230 
VI_MODE_DIGITAL_CAMERA
,

232 
VI_WORK_MODE_1Mu…ùÀx
,

236 
VI_SCAN_PROGRESSIVE
,

240 
VI_INPUT_DATA_YUYV
,

245 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_HIGH
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_VALID_SINGAL
, 
VI_VSYNC_VALID_NEG_HIGH
,

257 
VI_PATH_ISP
,

259 
VI_DATA_TYPE_RGB


262 
VI_DEV_ATTR_S
 
DEV_ATTR_LVDS_BASE
 =

265 
VI_MODE_LVDS
,

267 
VI_WORK_MODE_1Mu…ùÀx
,

271 
VI_SCAN_PROGRESSIVE
,

275 
VI_INPUT_DATA_YUYV
,

280 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_LOW
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_VALID_SINGAL
, 
VI_VSYNC_VALID_NEG_HIGH
,

292 
VI_PATH_ISP
,

294 
VI_DATA_TYPE_RGB
,

296 
HI_FALSE
,

302 
VI_DEV_ATTR_S
 
DEV_ATTR_MIPI_BASE
 =

305 
VI_MODE_MIPI
,

307 
VI_WORK_MODE_1Mu…ùÀx
,

311 
VI_SCAN_PROGRESSIVE
,

315 
VI_INPUT_DATA_YUYV
,

320 
VI_VSYNC_PULSE
, 
VI_VSYNC_NEG_LOW
, 
VI_HSYNC_VALID_SINGNAL
, 
VI_HSYNC_NEG_HIGH
, 
VI_VSYNC_VALID_SINGAL
, 
VI_VSYNC_VALID_NEG_HIGH
,

332 
VI_PATH_ISP
,

334 
VI_DATA_TYPE_RGB
,

336 
HI_FALSE
,

342 
combo_dev_©å_t
 
LVDS_4œ√_SENSOR_IMX136_12BIT_1080_NOWDR_ATTR
 =

345 .
öput_mode
 = 
INPUT_MODE_LVDS
,

347 .
lvds_©å
 = {

348 .
img_size
 = {1920, 1080},

349 
HI_WDR_MODE_NONE
,

350 
LVDS_SYNC_MODE_SAV
,

351 
RAW_DATA_12BIT
,

352 
LVDS_ENDIAN_BIG
,

353 
LVDS_ENDIAN_BIG
,

354 .
œ√_id
 = {0, 1, 2, 3, -1, -1, -1, -1},

355 .
sync_code
 = {

409 
combo_dev_©å_t
 
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_1080_NOWDR_ATTR
 =

412 .
öput_mode
 = 
INPUT_MODE_SUBLVDS
,

415 .
lvds_©å
 = {

416 .
img_size
 = {1920, 1080},

417 
HI_WDR_MODE_NONE
,

418 
LVDS_SYNC_MODE_SOL
,

419 
RAW_DATA_12BIT
,

420 
LVDS_ENDIAN_BIG
,

421 
LVDS_ENDIAN_BIG
,

422 .
œ√_id
 = {0, 2, -1, -1, 1, 3, -1, -1},

423 .
sync_code
 = {

476 
combo_dev_©å_t
 
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_1080_2WDR1_ATTR
 =

479 .
öput_mode
 = 
INPUT_MODE_SUBLVDS
,

482 .
lvds_©å
 = {

483 .
img_size
 = {1920, 1108},

484 
HI_WDR_MODE_2F
,

485 
LVDS_SYNC_MODE_SOL
,

486 
RAW_DATA_12BIT
,

487 
LVDS_ENDIAN_BIG
,

488 
LVDS_ENDIAN_BIG
,

489 .
œ√_id
 = {0, 2, -1, -1, 1, 3, -1, -1},

490 .
sync_code
 = {

543 
combo_dev_©å_t
 
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_720_NOWDR_ATTR
 =

546 .
öput_mode
 = 
INPUT_MODE_SUBLVDS
,

549 .
lvds_©å
 = {

550 .
img_size
 = {1280, 720},

551 
HI_WDR_MODE_NONE
,

552 
LVDS_SYNC_MODE_SOL
,

553 
RAW_DATA_12BIT
,

554 
LVDS_ENDIAN_BIG
,

555 
LVDS_ENDIAN_BIG
,

556 .
œ√_id
 = {0, 2, -1, -1, 1, 3, -1, -1},

557 .
sync_code
 = {

610 
combo_dev_©å_t
 
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_720_2WDR1_ATTR
 =

613 .
öput_mode
 = 
INPUT_MODE_SUBLVDS
,

616 .
lvds_©å
 = {

617 .
img_size
 = {1280, 720},

618 
HI_WDR_MODE_2F
,

619 
LVDS_SYNC_MODE_SOL
,

620 
RAW_DATA_12BIT
,

621 
LVDS_ENDIAN_BIG
,

622 
LVDS_ENDIAN_BIG
,

623 .
œ√_id
 = {0, 2, -1, -1, 1, 3, -1, -1},

624 .
sync_code
 = {

678 
combo_dev_©å_t
 
LVDS_4œ√_SENSOR_IMX178_12BIT_5M_NOWDR_ATTR
 =

681 .
öput_mode
 = 
INPUT_MODE_LVDS
,

683 .
lvds_©å
 = {

684 .
img_size
 = {2592, 1944},

685 
HI_WDR_MODE_NONE
,

686 
LVDS_SYNC_MODE_SAV
,

687 
RAW_DATA_12BIT
,

688 
LVDS_ENDIAN_BIG
,

689 
LVDS_ENDIAN_BIG
,

690 .
œ√_id
 = {0, 1, 2, 3, -1, -1, -1, -1},

691 .
sync_code
 = {

744 
combo_dev_©å_t
 
LVDS_4œ√_SENSOR_IMX178_12BIT_1080p_ATTR
 =

747 .
öput_mode
 = 
INPUT_MODE_LVDS
,

749 .
lvds_©å
 = {

750 .
img_size
 = {1920, 1080},

751 
HI_WDR_MODE_NONE
,

752 
LVDS_SYNC_MODE_SAV
,

753 
RAW_DATA_12BIT
,

754 
LVDS_ENDIAN_BIG
,

755 
LVDS_ENDIAN_BIG
,

756 .
œ√_id
 = {0, 1, 2, 3, -1, -1, -1, -1},

757 .
sync_code
 = {

810 
combo_dev_©å_t
 
LVDS_4œ√_SENSOR_IMX117_12BIT_720p_ATTR
 =

813 .
öput_mode
 = 
INPUT_MODE_LVDS
,

815 .
lvds_©å
 = {

816 .
img_size
 = {1328, 724},

817 
HI_WDR_MODE_NONE
,

818 
LVDS_SYNC_MODE_SAV
,

819 
RAW_DATA_12BIT
,

820 
LVDS_ENDIAN_BIG
,

821 
LVDS_ENDIAN_BIG
,

822 .
œ√_id
 = {-1, -1, 0, 1, 2, 3, -1, -1},

823 .
sync_code
 = {

868 
combo_dev_©å_t
 
LVDS_4œ√_SENSOR_IMX117_12BIT_1080p_ATTR
 =

871 .
öput_mode
 = 
INPUT_MODE_LVDS
,

873 .
lvds_©å
 = {

874 .
img_size
 = {1968, 1084},

875 
HI_WDR_MODE_NONE
,

876 
LVDS_SYNC_MODE_SAV
,

877 
RAW_DATA_12BIT
,

878 
LVDS_ENDIAN_BIG
,

879 
LVDS_ENDIAN_BIG
,

880 .
œ√_id
 = {-1, -1, 0, 1, 2, 3, -1, -1},

881 .
sync_code
 = {

926 
combo_dev_©å_t
 
LVDS_4œ√_SENSOR_IMX123_12BIT_NOWDR_ATTR
 =

929 .
öput_mode
 = 
INPUT_MODE_LVDS
,

931 .
lvds_©å
 = {

932 .
img_size
 = {2048, 1536},

933 
HI_WDR_MODE_NONE
,

934 
LVDS_SYNC_MODE_SAV
,

935 
RAW_DATA_12BIT
,

936 
LVDS_ENDIAN_BIG
,

937 
LVDS_ENDIAN_BIG
,

938 .
œ√_id
 = {0, 1, 2, 3, 4, 5, 6, 7},

939 .
sync_code
 = {

985 
combo_dev_©å_t
 
MIPI_4œ√_SENSOR_IMX185_12BIT_ATTR
 =

987 .
öput_mode
 = 
INPUT_MODE_MIPI
,

989 .
mùi_©å
 =

991 
RAW_DATA_12BIT
,

998 
combo_dev_©å_t
 
MIPI_CMOS3V3_ATTR
 =

1001 .
öput_mode
 = 
INPUT_MODE_CMOS_33V
,

1007 
combo_dev_©å_t
 
MIPI_4œ√_SENSOR_MN34220_MIPI_12BIT_ATTR
 =

1009 .
öput_mode
 = 
INPUT_MODE_MIPI
,

1011 .
mùi_©å
 =

1013 
RAW_DATA_12BIT
,

1020 
combo_dev_©å_t
 
MIPI_BT1120_ATTR
 =

1023 .
öput_mode
 = 
INPUT_MODE_BT1120
,

1029 
combo_dev_©å_t
 
HISPI_4œ√_SENSOR_AR0230_12BIT_1080p_NOWDR_ATTR
 =

1032 .
öput_mode
 = 
INPUT_MODE_HISPI
,

1035 .
lvds_©å
 = {

1036 .
img_size
 = {1920, 1080},

1037 
HI_WDR_MODE_NONE
,

1038 
LVDS_SYNC_MODE_SOL
,

1039 
RAW_DATA_12BIT
,

1040 
LVDS_ENDIAN_LITTLE
,

1041 
LVDS_ENDIAN_LITTLE
,

1042 .
œ√_id
 = {0, 1, 2, 3, -1, -1, -1, -1},

1043 .
sync_code
 = {

1090 
combo_dev_©å_t
 
MIPI_2œ√_SENSOR_AR0330_12BIT_ATTR
 =

1092 .
öput_mode
 = 
INPUT_MODE_MIPI
,

1095 .
mùi_©å
 =

1097 
RAW_DATA_12BIT
,

1103 
combo_dev_©å_t
 
MIPI_4œ√_SENSOR_OV4689_12BIT_ATTR
 =

1105 .
öput_mode
 = 
INPUT_MODE_MIPI
,

1108 .
mùi_©å
 =

1110 
RAW_DATA_12BIT
,

1116 
combo_dev_©å_t
 
MIPI_4œ√_SENSOR_OV5658_10BIT_ATTR
 =

1118 .
öput_mode
 = 
INPUT_MODE_MIPI
,

1121 .
mùi_©å
 =

1123 
RAW_DATA_10BIT
,

1131 
VI_CHN_ATTR_S
 
CHN_ATTR_1920x1080_422
 =

1139 
VI_CAPSEL_BOTH
,

1141 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1148 
VI_CHN_ATTR_S
 
CHN_ATTR_860x540_422
 =

1155 
VI_CAPSEL_BOTH
,

1157 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1165 
VI_CHN_ATTR_S
 
CHN_ATTR_1280x720_422
 =

1172 
VI_CAPSEL_BOTH
,

1174 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1181 
VI_CHN_ATTR_S
 
CHN_ATTR_640x360_422
 =

1188 
VI_CAPSEL_BOTH
,

1190 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1198 
VI_CHN_ATTR_S
 
CHN_ATTR_1280x720_420
 =

1205 
VI_CAPSEL_BOTH
,

1207 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
,

1215 
VI_CHN_ATTR_S
 
CHN_ATTR_720x576_422
 =

1222 
VI_CAPSEL_BOTH
,

1224 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1231 
VI_CHN_ATTR_S
 
CHN_ATTR_720x576_420
 =

1238 
VI_CAPSEL_BOTH
,

1240 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
,

1247 
VI_CHN_ATTR_S
 
CHN_ATTR_360x288_422
 =

1254 
VI_CAPSEL_BOTH
,

1256 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1263 
VI_CHN_ATTR_S
 
CHN_ATTR_360x288_420
 =

1270 
VI_CAPSEL_BOTH
,

1272 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
,

1279 
VI_CHN_ATTR_S
 
CHN_ATTR_16x16_422
 =

1286 
VI_CAPSEL_BOTH
,

1288 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1295 
VI_CHN_ATTR_S
 
CHN_ATTR_960x576_422
 =

1302 
VI_CAPSEL_BOTH
,

1304 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1311 
VI_CHN_ATTR_S
 
CHN_ATTR_480x288_422
 =

1318 
VI_CAPSEL_BOTH
,

1320 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

1327 
VI_DEV
 
g_as32ViDev
[
VIU_MAX_DEV_NUM
];

1328 
VI_CHN
 
g_as32MaxChn
[
VIU_MAX_CHN_NUM
];

1329 
VI_CHN
 
g_as32SubChn
[
VIU_MAX_CHN_NUM
];

1331 
HI_S32
 
SAMPLE_TW2865_CfgV
(
VIDEO_NORM_E
 
íVideoMode
, 
VI_WORK_MODE_E
 
íW‹kMode
)

1334 
fd
, 
i
;

1335 
video_mode
;

1336 
tw2865_video_n‹m
 
°VideoMode
;

1337 
tw2865_w‹k_mode
 
w‹k_mode
;

1339 
chù_˙t
 = 4;

1341 
fd
 = 
›í
(
TW2865_FILE
, 
O_RDWR
);

1342 i‡(
fd
 < 0)

1344 
SAMPLE_PRT
("›í 2865 (%sËÁû\n", 
TW2865_FILE
);

1348 
video_mode
 = (
VIDEO_ENCODING_MODE_PAL
 =
íVideoMode
Ë? 
TW2865_PAL
 : 
TW2865_NTSC
 ;

1350 
i
 = 0; i < 
chù_˙t
; i++)

1352 
°VideoMode
.
chù
 = 
i
;

1353 
°VideoMode
.
mode
 = 
video_mode
;

1354 i‡(
io˘l
(
fd
, 
TW2865_SET_VIDEO_NORM
, &
°VideoMode
))

1356 
SAMPLE_PRT
("£àtw2865(%dËvideÿmodêÁû\n", 
i
);

1357 
˛o£
(
fd
);

1362 
i
 = 0; i < 
chù_˙t
; i++)

1364 
w‹k_mode
.
chù
 = 
i
;

1365 i‡(
VI_WORK_MODE_4Mu…ùÀx
 =
íW‹kMode
)

1367 
w‹k_mode
.
mode
 = 
TW2865_4D1_MODE
;

1369 i‡(
VI_WORK_MODE_2Mu…ùÀx
 =
íW‹kMode
)

1371 
w‹k_mode
.
mode
 = 
TW2865_2D1_MODE
;

1373 i‡(
VI_WORK_MODE_1Mu…ùÀx
 =
íW‹kMode
)

1375 
w‹k_mode
.
mode
 = 
TW2865_1D1_MODE
;

1379 
SAMPLE_PRT
("work modeÇot support\n");

1382 
io˘l
(
fd
, 
TW2865_SET_WORK_MODE
, &
w‹k_mode
);

1385 
˛o£
(
fd
);

1390 
HI_S32
 
SAMPLE_COMM_VI_Mode2P¨am
(
SAMPLE_VI_MODE_E
 
íViMode
, 
SAMPLE_VI_PARAM_S
* 
p°ViP¨am
)

1392 
íViMode
)

1395 
p°ViP¨am
->
s32ViDevC¡
 = 1;

1396 
p°ViP¨am
->
s32ViDevI¡îvÆ
 = 1;

1397 
p°ViP¨am
->
s32ViChnC¡
 = 1;

1398 
p°ViP¨am
->
s32ViChnI¡îvÆ
 = 1;

1401  
HI_SUCCESS
;

1407 
HI_S32
 
SAMPLE_COMM_VI_ADSèπ
(
SAMPLE_VI_MODE_E
 
íViMode
, 
VIDEO_NORM_E
 
íN‹m
)

1409 
VI_WORK_MODE_E
 
íW‹kMode
;

1410 
HI_S32
 
s32Rë
;

1412 
íViMode
)

1414 
SAMPLE_VI_MODE_1_D1
:

1415 
íW‹kMode
 = 
VI_WORK_MODE_1Mu…ùÀx
;

1416 
s32Rë
 = 
SAMPLE_TW2865_CfgV
(
íN‹m
, 
íW‹kMode
);

1417 i‡(
s32Rë
 !
HI_SUCCESS
)

1419 
SAMPLE_PRT
("SAMPLE_TW2865_CfgV failed with %#x!\n", \

1420 
s32Rë
);

1421  
HI_FAILURE
;

1426 
SAMPLE_VI_MODE_BT1120_1080I
:

1427 
SAMPLE_VI_MODE_BT1120_720P
:

1428 
SAMPLE_VI_MODE_BT1120_1080P
:

1432 
SAMPLE_PRT
("ADÇot support!\n");

1433  
HI_FAILURE
;

1436  
HI_SUCCESS
;

1444 
HI_S32
 
SAMPLE_COMM_VI_Mode2Size
(
SAMPLE_VI_MODE_E
 
íViMode
, 
VIDEO_NORM_E
 
íN‹m
, 
SIZE_S
* 
p°Size
)

1446 
íViMode
)

1448 
SAMPLE_VI_MODE_1_D1
:

1449 
p°Size
->
u32Width
 = 720;

1450 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
) ? 576 : 480;

1453 
SAMPLE_VI_MODE_BT1120_1080I
:

1454 
SAMPLE_VI_MODE_BT1120_1080P
:

1455 
p°Size
->
u32Width
 = 1920;

1456 
p°Size
->
u32Height
 = 1080;

1459 
SAMPLE_VI_MODE_BT1120_720P
:

1460 
p°Size
->
u32Width
 = 1280;

1461 
p°Size
->
u32Height
 = 720;

1465 
SAMPLE_PRT
("vi mode invaild!\n");

1466  
HI_FAILURE
;

1469  
HI_SUCCESS
;

1475 
VI_DEV
 
SAMPLE_COMM_VI_GëDev
(
SAMPLE_VI_MODE_E
 
íViMode
, 
VI_CHN
 
ViChn
)

1477 
HI_S32
 
s32Rë
, 
s32ChnPîDev
;

1478 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

1480 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

1481 i‡(
HI_SUCCESS
 !
s32Rë
)

1483 
SAMPLE_PRT
("vi getÖaram failed!\n");

1484  (
VI_DEV
) - 1;

1487 
s32ChnPîDev
 = 
°ViP¨am
.
s32ViChnC¡
 / stViP¨am.
s32ViDevC¡
;

1488  (
VI_DEV
)(
ViChn
 / 
°ViP¨am
.
s32ViChnI¡îvÆ
 / 
s32ChnPîDev
 * stViP¨am.
s32ViDevI¡îvÆ
);

1494 
HI_S32
 
SAMPLE_COMM_VI_MemC⁄fig
(
SAMPLE_VI_MODE_E
 
íViMode
)

1496 
HI_CHAR
* 
pcMmzName
;

1497 
MPP_CHN_S
 
°MµChnVI
;

1498 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

1499 
VI_DEV
 
ViDev
;

1500 
VI_CHN
 
ViChn
;

1502 
HI_S32
 
i
, 
s32Rë
;

1504 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

1505 i‡(
HI_SUCCESS
 !
s32Rë
)

1507 
SAMPLE_PRT
("vi getÖaram failed!\n");

1508  
HI_FAILURE
;

1511 
i
 = 0; i < 
°ViP¨am
.
s32ViChnC¡
; i++)

1513 
ViChn
 = 
i
 * 
°ViP¨am
.
s32ViChnI¡îvÆ
;

1514 
ViDev
 = 
SAMPLE_COMM_VI_GëDev
(
íViMode
, 
ViChn
);

1516 i‡(
ViDev
 < 0)

1518 
SAMPLE_PRT
("get vi dev failed !\n");

1519  
HI_FAILURE
;

1522 
pcMmzName
 = (0 =
i
 % 2Ë? 
NULL
 : "ddr1";

1523 
°MµChnVI
.
íModId
 = 
HI_ID_VIU
;

1524 
°MµChnVI
.
s32DevId
 = 0;

1525 
°MµChnVI
.
s32ChnId
 = 
ViChn
;

1526 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVI
, 
pcMmzName
);

1527 i‡(
s32Rë
)

1529 
SAMPLE_PRT
("VI HI_MPI_SYS_SëMemC⁄‡Áûed wôh %#x!\n", 
s32Rë
);

1530  
HI_FAILURE
;

1534  
HI_SUCCESS
;

1537 
HI_S32
 
SAMPLE_COMM_VI_SëMùiAâr
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
);

1542 
HI_S32
 
SAMPLE_COMM_VI_SèπMIPI
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1544 
s32Rë
;

1547 
s32Rë
 = 
SAMPLE_COMM_VI_SëMùiAâr
(
p°ViC⁄fig
);

1548 i‡(
HI_SUCCESS
 !
s32Rë
)

1550 
SAMPLE_PRT
("%s: mùòöô faûed!\n", 
__FUNCTION__
);

1552  
HI_FAILURE
;

1555  
HI_SUCCESS
;

1561 
HI_S32
 
SAMPLE_COMM_VI_SèπDev
(
VI_DEV
 
ViDev
, 
SAMPLE_VI_MODE_E
 
íViMode
)

1563 
HI_S32
 
s32Rë
;

1564 
HI_S32
 
s32I•Dev
 = 0;

1565 
ISP_WDR_MODE_S
 
°WdrMode
;

1566 
VI_DEV_ATTR_S
 
°ViDevAâr
;

1568 
mem£t
(&
°ViDevAâr
, 0, (stViDevAttr));

1570 
íViMode
)

1572 
SAMPLE_VI_MODE_1_D1
:

1573 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_BT656D1_1MUX
, (stViDevAttr));

1576 
SAMPLE_VI_MODE_BT1120_1080I
:

1577 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_BT1120_1080I_1MUX
, (stViDevAttr));

1578 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1579 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1580 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1581 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1584 
SAMPLE_VI_MODE_BT1120_1080P
:

1585 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_BT1120_1080P_BASE
, (stViDevAttr));

1588 
SAMPLE_VI_MODE_BT1120_720P
:

1589 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_BT1120_720P_BASE
, (stViDevAttr));

1592 
SONY_IMX122_DC_1080P_30FPS
:

1593 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_IMX122_DC_1080P
, (stViDevAttr));

1596 
APTINA_MT9P006_DC_1080P_30FPS
:

1597 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MT9P006_DC_1080P
, (stViDevAttr));

1600 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
:

1601 
SONY_IMX178_LVDS_1080P_30FPS
:

1602 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1603 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1604 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 20;

1605 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1606 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1609 
SONY_IMX185_MIPI_1080P_30FPS
:

1610 
PANASONIC_MN34220_MIPI_1080P_30FPS
:

1611 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1612 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 8;

1613 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1614 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1615 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1618 
SONY_IMX178_LVDS_5M_30FPS
:

1619 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1620 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1621 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 20;

1622 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 2592;

1623 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1944;

1626 
SONY_IMX117_LVDS_1080P_30FPS
:

1627 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1628 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 48;

1629 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 2;

1630 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1631 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1634 
SONY_IMX117_LVDS_720P_30FPS
:

1635 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1636 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 48;

1637 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 2;

1638 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1280;

1639 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 720;

1642 
SONY_IMX123_LVDS_QXGA_30FPS
:

1643 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1644 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1645 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1646 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 2048;

1647 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1536;

1650 
PANASONIC_MN34220_MIPI_720P_120FPS
:

1651 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1652 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 8;

1653 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1654 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1280;

1655 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 720;

1658 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
:

1659 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1660 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1661 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 20;

1662 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1280;

1663 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 720;

1666 
APTINA_AR0230_HISPI_1080P_30FPS
:

1667 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1668 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1669 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1670 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1671 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1674 
APTINA_AR0330_MIPI_1080P_30FPS
:

1675 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1676 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1677 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1678 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1679 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1682 
APTINA_AR0330_MIPI_1296P_25FPS
:

1683 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1684 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1685 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1686 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 2304;

1687 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1296;

1690 
APTINA_AR0330_MIPI_1536P_25FPS
:

1691 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1692 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1693 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1694 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 2048;

1695 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1536;

1698 
OMNIVISION_OV4689_MIPI_1080P_30FPS
:

1699 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1700 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1701 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1702 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 1920;

1703 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1080;

1706 
OMNIVISION_OV4689_MIPI_4M_30FPS
:

1707 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1708 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1709 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1710 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 2592;

1711 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1520;

1714 
OMNIVISION_OV5658_MIPI_5M_30FPS
:

1715 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_MIPI_BASE
, (stViDevAttr));

1716 
°ViDevAâr
.
°DevRe˘
.
s32X
 = 0;

1717 
°ViDevAâr
.
°DevRe˘
.
s32Y
 = 0;

1718 
°ViDevAâr
.
°DevRe˘
.
u32Width
 = 2592;

1719 
°ViDevAâr
.
°DevRe˘
.
u32Height
 = 1944;

1723 
mem˝y
(&
°ViDevAâr
, &
DEV_ATTR_LVDS_BASE
, (stViDevAttr));

1726 
s32Rë
 = 
HI_MPI_VI_SëDevAâr
(
ViDev
, &
°ViDevAâr
);

1727 i‡(
s32Rë
 !
HI_SUCCESS
)

1729 
SAMPLE_PRT
("HI_MPI_VI_SëDevAâ∏Áûed wôh %#x!\n", 
s32Rë
);

1730  
HI_FAILURE
;

1733 i‡((
SAMPLE_VI_MODE_BT1120_1080P
 !
íViMode
)

1734 && (
SAMPLE_VI_MODE_BT1120_1080I
 !
íViMode
)

1735 && (
SAMPLE_VI_MODE_BT1120_720P
 !
íViMode
))

1737 
s32Rë
 = 
HI_MPI_ISP_GëWDRMode
(
s32I•Dev
, &
°WdrMode
);

1738 i‡(
s32Rë
 !
HI_SUCCESS
)

1740 
SAMPLE_PRT
("HI_MPI_ISP_GëWDRModêÁûed wôh %#x!\n", 
s32Rë
);

1741  
HI_FAILURE
;

1744 i‡(
°WdrMode
.
íWDRMode
)

1746 
VI_WDR_ATTR_S
 
°WdrAâr
;

1748 
°WdrAâr
.
íWDRMode
 = 
°WdrMode
.enWDRMode;

1749 
°WdrAâr
.
bCom¥ess
 = 
HI_FALSE
;

1751 
s32Rë
 = 
HI_MPI_VI_SëWDRAâr
(
ViDev
, &
°WdrAâr
);

1752 i‡(
s32Rë
)

1754 
SAMPLE_PRT
("HI_MPI_VI_SëWDRAâ∏Áûed wôh %#x!\n", 
s32Rë
);

1755  
HI_FAILURE
;

1760 
s32Rë
 = 
HI_MPI_VI_E«bÀDev
(
ViDev
);

1761 i‡(
s32Rë
 !
HI_SUCCESS
)

1763 
SAMPLE_PRT
("HI_MPI_VI_E«bÀDev faûed wôh %#x!\n", 
s32Rë
);

1764  
HI_FAILURE
;

1767  
HI_SUCCESS
;

1773 
HI_S32
 
SAMPLE_COMM_VI_SèπChn
(
VI_CHN
 
ViChn
, 
RECT_S
* 
p°C≠Re˘
, 
SIZE_S
* 
p°T¨Size
, 
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1775 
HI_S32
 
s32Rë
;

1776 
VI_CHN_ATTR_S
 
°ChnAâr
;

1777 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

1778 
SAMPLE_VI_CHN_SET_E
 
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

1780 i‡(
p°ViC⁄fig
)

1782 
íViChnSë
 = 
p°ViC⁄fig
->enViChnSet;

1783 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

1787 
mem˝y
(&
°ChnAâr
.
°C≠Re˘
, 
p°C≠Re˘
, (
RECT_S
));

1788 
°ChnAâr
.
íC≠Sñ
 = 
VI_CAPSEL_BOTH
;

1790 
°ChnAâr
.
°De°Size
.
u32Width
 = 
p°T¨Size
->u32Width;

1791 
°ChnAâr
.
°De°Size
.
u32Height
 = 
p°T¨Size
->u32Height;

1792 
°ChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1794 
°ChnAâr
.
bMúr‹
 = 
HI_FALSE
;

1795 
°ChnAâr
.
bFlù
 = 
HI_FALSE
;

1797 
íViChnSë
)

1799 
VI_CHN_SET_MIRROR
:

1800 
°ChnAâr
.
bMúr‹
 = 
HI_TRUE
;

1803 
VI_CHN_SET_FLIP
:

1804 
°ChnAâr
.
bFlù
 = 
HI_TRUE
;

1807 
VI_CHN_SET_FLIP_MIRROR
:

1808 
°ChnAâr
.
bMúr‹
 = 
HI_TRUE
;

1809 
°ChnAâr
.
bFlù
 = 
HI_TRUE
;

1816 
°ChnAâr
.
s32SrcFømeR©e
 = -1;

1817 
°ChnAâr
.
s32D°FømeR©e
 = -1;

1818 
°ChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1820 
s32Rë
 = 
HI_MPI_VI_SëChnAâr
(
ViChn
, &
°ChnAâr
);

1821 i‡(
s32Rë
 !
HI_SUCCESS
)

1823 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

1824  
HI_FAILURE
;

1827 i‡(
ROTATE_NONE
 !
íRŸ©e
)

1829 
s32Rë
 = 
HI_MPI_VI_SëRŸ©e
(
ViChn
, 
íRŸ©e
);

1830 i‡(
s32Rë
 !
HI_SUCCESS
)

1832 
SAMPLE_PRT
("HI_MPI_VI_SëRŸ©êÁûed wôh %#x!\n", 
s32Rë
);

1833  
HI_FAILURE
;

1837 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ViChn
);

1838 i‡(
s32Rë
 !
HI_SUCCESS
)

1840 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

1841  
HI_FAILURE
;

1844  
HI_SUCCESS
;

1850 
HI_S32
 
SAMPLE_COMM_VI_SèπBT656
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1852 
HI_S32
 
i
, 
s32Rë
 = 
HI_SUCCESS
;

1853 
VI_DEV
 
ViDev
;

1854 
VI_CHN
 
ViChn
;

1855 
HI_U32
 
u32DevNum
 = 1;

1856 
HI_U32
 
u32ChnNum
 = 1;

1857 
SIZE_S
 
°T¨gëSize
;

1858 
RECT_S
 
°C≠Re˘
;

1859 
SAMPLE_VI_MODE_E
 
íViMode
;

1861 i‡(!
p°ViC⁄fig
)

1863 
SAMPLE_PRT
("%s:ÇuŒÖå\n", 
__FUNCTION__
);

1864  
HI_FAILURE
;

1866 
íViMode
 = 
p°ViC⁄fig
->enViMode;

1871 
s32Rë
 = 
SAMPLE_COMM_VI_SèπMIPI_BT1120
(
íViMode
);

1872 i‡(
HI_SUCCESS
 !
s32Rë
)

1874 
SAMPLE_PRT
("%s: MIPI inô faûed!\n", 
__FUNCTION__
);

1875  
HI_FAILURE
;

1878 
i
 = 0; i < 
u32DevNum
; i++)

1880 
ViDev
 = 
i
;

1881 
s32Rë
 = 
SAMPLE_COMM_VI_SèπDev
(
ViDev
, 
íViMode
);

1882 i‡(
HI_SUCCESS
 !
s32Rë
)

1884 
SAMPLE_PRT
("%s: sèπ vòdev[%d] faûed!\n", 
__FUNCTION__
, 
i
);

1885  
HI_FAILURE
;

1892 
i
 = 0; i < 
u32ChnNum
; i++)

1894 
ViChn
 = 
i
;

1896 
°C≠Re˘
.
s32X
 = 0;

1897 
°C≠Re˘
.
s32Y
 = 0;

1898 
íViMode
)

1900 
SAMPLE_VI_MODE_BT1120_720P
:

1901 
°C≠Re˘
.
u32Width
 = 1280;

1902 
°C≠Re˘
.
u32Height
 = 720;

1904 
SAMPLE_VI_MODE_BT1120_1080I
:

1905 
SAMPLE_VI_MODE_BT1120_1080P
:

1906 
°C≠Re˘
.
u32Width
 = 1920;

1907 
°C≠Re˘
.
u32Height
 = 1080;

1910 
°C≠Re˘
.
u32Width
 = 1920;

1911 
°C≠Re˘
.
u32Height
 = 1080;

1915 
°T¨gëSize
.
u32Width
 = 
°C≠Re˘
.u32Width;

1916 
°T¨gëSize
.
u32Height
 = 
°C≠Re˘
.u32Height;

1918 
s32Rë
 = 
SAMPLE_COMM_VI_SèπChn
(
ViChn
, &
°C≠Re˘
, &
°T¨gëSize
, 
p°ViC⁄fig
);

1919 i‡(
HI_SUCCESS
 !
s32Rë
)

1921 
SAMPLE_COMM_ISP_St›
();

1922  
HI_FAILURE
;

1926  
s32Rë
;

1932 
HI_S32
 
SAMPLE_COMM_VI_St›BT656
(
SAMPLE_VI_MODE_E
 
íViMode
)

1934 
VI_DEV
 
ViDev
;

1935 
VI_CHN
 
ViChn
;

1936 
HI_S32
 
i
;

1937 
HI_S32
 
s32Rë
;

1938 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

1941 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

1942 i‡(
HI_SUCCESS
 !
s32Rë
)

1944 
SAMPLE_PRT
("SAMPLE_COMM_VI_Mode2Param failed!\n");

1945  
HI_FAILURE
;

1949 
i
 = 0; i < 
°ViP¨am
.
s32ViChnC¡
; i++)

1952 
ViChn
 = 
i
 * 
°ViP¨am
.
s32ViChnI¡îvÆ
;

1953 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

1954 i‡(
HI_SUCCESS
 !
s32Rë
)

1956 
SAMPLE_PRT
("SAMPLE_COMM_VI_St›Ch¿Áûed wôh %#x\n", 
s32Rë
);

1957  
HI_FAILURE
;

1962 
i
 = 0; i < 
°ViP¨am
.
s32ViDevC¡
; i++)

1964 
ViDev
 = 
i
 * 
°ViP¨am
.
s32ViDevI¡îvÆ
;

1965 
s32Rë
 = 
HI_MPI_VI_DißbÀDev
(
ViDev
);

1966 i‡(
HI_SUCCESS
 !
s32Rë
)

1968 
SAMPLE_PRT
("SAMPLE_COMM_VI_St›Dev faûed wôh %#x\n", 
s32Rë
);

1969  
HI_FAILURE
;

1973  
HI_SUCCESS
;

1979 
HI_S32
 
SAMPLE_COMM_VI_BödVpss
(
SAMPLE_VI_MODE_E
 
íViMode
)

1981 
HI_S32
 
j
, 
s32Rë
;

1982 
VPSS_GRP
 
VpssGΩ
;

1983 
MPP_CHN_S
 
°SrcChn
;

1984 
MPP_CHN_S
 
°De°Chn
;

1985 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

1986 
VI_CHN
 
ViChn
;

1988 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

1989 i‡(
HI_SUCCESS
 !
s32Rë
)

1991 
SAMPLE_PRT
("SAMPLE_COMM_VI_Mode2Param failed!\n");

1992  
HI_FAILURE
;

1995 
VpssGΩ
 = 0;

1996 
j
 = 0; j < 
°ViP¨am
.
s32ViChnC¡
; j++)

1998 
ViChn
 = 
j
 * 
°ViP¨am
.
s32ViChnI¡îvÆ
;

2000 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

2001 
°SrcChn
.
s32DevId
 = 0;

2002 
°SrcChn
.
s32ChnId
 = 
ViChn
;

2004 
°De°Chn
.
íModId
 = 
HI_ID_VPSS
;

2005 
°De°Chn
.
s32DevId
 = 
VpssGΩ
;

2006 
°De°Chn
.
s32ChnId
 = 0;

2008 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

2009 i‡(
s32Rë
 !
HI_SUCCESS
)

2011 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2012  
HI_FAILURE
;

2015 
VpssGΩ
 ++;

2017  
HI_SUCCESS
;

2020 
HI_BOOL
 
IsSís‹I≈ut
(
SAMPLE_VI_MODE_E
 
íViMode
)

2022 
HI_BOOL
 
bRë
 = 
HI_TRUE
;

2024 
íViMode
)

2026 
SAMPLE_VI_MODE_1_D1
:

2027 
SAMPLE_VI_MODE_BT1120_1080I
:

2028 
SAMPLE_VI_MODE_BT1120_1080P
:

2029 
SAMPLE_VI_MODE_BT1120_720P
:

2030 
bRë
 = 
HI_FALSE
;

2036  
bRë
;

2040 
HI_S32
 
SAMPLE_COMM_VI_BödVíc
(
SAMPLE_VI_MODE_E
 
íViMode
)

2042 
HI_S32
 
j
, 
s32Rë
;

2043 
VENC_GRP
 
VícGΩ
;

2044 
MPP_CHN_S
 
°SrcChn
;

2045 
MPP_CHN_S
 
°De°Chn
;

2046 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

2047 
VI_CHN
 
ViChn
;

2049 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

2050 i‡(
HI_SUCCESS
 !
s32Rë
)

2052 
SAMPLE_PRT
("SAMPLE_COMM_VI_Mode2Param failed!\n");

2053  
HI_FAILURE
;

2056 
VícGΩ
 = 0;

2057 
j
 = 0; j < 
°ViP¨am
.
s32ViChnC¡
; j++)

2059 
ViChn
 = 
j
 * 
°ViP¨am
.
s32ViChnI¡îvÆ
;

2061 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

2062 
°SrcChn
.
s32DevId
 = 0;

2063 
°SrcChn
.
s32ChnId
 = 
ViChn
;

2065 
°De°Chn
.
íModId
 = 
HI_ID_GROUP
;

2066 
°De°Chn
.
s32DevId
 = 
VícGΩ
;

2067 
°De°Chn
.
s32ChnId
 = 0;

2069 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

2070 i‡(
s32Rë
 !
HI_SUCCESS
)

2072 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2073  
HI_FAILURE
;

2076 
VícGΩ
 ++;

2079  
HI_SUCCESS
;

2082 
HI_S32
 
SAMPLE_COMM_VI_SèπMIPI_BT1120
(
SAMPLE_VI_MODE_E
 
íViMode
)

2084 
HI_S32
 
fd
;

2085 
combo_dev_©å_t
* 
p°comboDevAâr
 = 
NULL
;

2087 
fd
 = 
›í
("/dev/hi_mùi", 
O_RDWR
);

2088 i‡(
fd
 < 0)

2090 
¥ötf
("warning: open hi_mipi dev failed\n");

2094 i‡((
íViMode
 =
SAMPLE_VI_MODE_BT1120_1080I
)

2095 || (
íViMode
 =
SAMPLE_VI_MODE_BT1120_720P
)

2096 || (
íViMode
 =
SAMPLE_VI_MODE_BT1120_1080P
))

2098 
p°comboDevAâr
 = &
MIPI_BT1120_ATTR
;

2105 i‡(
io˘l
(
fd
, 
HI_MIPI_SET_DEV_ATTR
, 
p°comboDevAâr
))

2107 
¥ötf
("set mipiáttr failed\n");

2108 
˛o£
(
fd
);

2111 
˛o£
(
fd
);

2112  
HI_SUCCESS
;

2117 
HI_S32
 
SAMPLE_COMM_VI_SëMùiAâr
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2119 
HI_S32
 
fd
;

2120 
combo_dev_©å_t
* 
p°comboDevAâr
 = 
NULL
;

2123 
fd
 = 
›í
("/dev/hi_mùi", 
O_RDWR
);

2124 i‡(
fd
 < 0)

2126 
¥ötf
("warning: open hi_mipi dev failed\n");

2129 
¥ötf
("=============SAMPLE_COMM_VI_SëMùiAâ∏íWDRMode: %d\n", 
p°ViC⁄fig
->
íWDRMode
);

2131 i‡(
WDR_MODE_NONE
 =
p°ViC⁄fig
->
íWDRMode
)

2133 
p°comboDevAâr
 = &
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_1080_NOWDR_ATTR
;

2135 i‡(
WDR_MODE_2To1_LINE
 =
p°ViC⁄fig
->
íWDRMode
)

2137 
p°comboDevAâr
 = &
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_1080_2WDR1_ATTR
;

2144 i‡(
p°ViC⁄fig
->
íViMode
 =
SONY_IMX178_LVDS_1080P_30FPS
)

2146 
p°comboDevAâr
 = &
LVDS_4œ√_SENSOR_IMX178_12BIT_1080p_ATTR
;

2149 i‡(
p°ViC⁄fig
->
íViMode
 =
SONY_IMX178_LVDS_5M_30FPS
)

2151 
p°comboDevAâr
 = &
LVDS_4œ√_SENSOR_IMX178_12BIT_5M_NOWDR_ATTR
;

2154 i‡(
p°ViC⁄fig
->
íViMode
 =
SONY_IMX185_MIPI_1080P_30FPS
)

2156 
p°comboDevAâr
 = &
MIPI_4œ√_SENSOR_IMX185_12BIT_ATTR
;

2159 i‡–
p°ViC⁄fig
->
íViMode
 =
PANASONIC_MN34220_MIPI_1080P_30FPS


2160 || 
p°ViC⁄fig
->
íViMode
 =
PANASONIC_MN34220_MIPI_720P_120FPS
 )

2162 
p°comboDevAâr
 = &
MIPI_4œ√_SENSOR_MN34220_MIPI_12BIT_ATTR
;

2165 i‡(
p°ViC⁄fig
->
íViMode
 =
PANASONIC_MN34220_SUBLVDS_720P_120FPS
)

2167 
p°comboDevAâr
 = &
SUBLVDS_4œ√_SENSOR_MN34220_12BIT_720_NOWDR_ATTR
;

2170 i‡–(
p°ViC⁄fig
->
íViMode
 =
APTINA_AR0330_MIPI_1080P_30FPS
)

2171 || (
p°ViC⁄fig
->
íViMode
 =
APTINA_AR0330_MIPI_1536P_25FPS
)

2172 || (
p°ViC⁄fig
->
íViMode
 =
APTINA_AR0330_MIPI_1296P_25FPS
) )

2174 
p°comboDevAâr
 = &
MIPI_2œ√_SENSOR_AR0330_12BIT_ATTR
;

2177 i‡–(
p°ViC⁄fig
->
íViMode
 =
OMNIVISION_OV4689_MIPI_4M_30FPS
)

2178 || (
p°ViC⁄fig
->
íViMode
 =
OMNIVISION_OV4689_MIPI_1080P_30FPS
) )

2180 
p°comboDevAâr
 = &
MIPI_4œ√_SENSOR_OV4689_12BIT_ATTR
;

2183 i‡(
p°ViC⁄fig
->
íViMode
 =
OMNIVISION_OV5658_MIPI_5M_30FPS
)

2185 
p°comboDevAâr
 = &
MIPI_4œ√_SENSOR_OV5658_10BIT_ATTR
;

2188 i‡((
p°ViC⁄fig
->
íViMode
 =
APTINA_MT9P006_DC_1080P_30FPS
)

2189 || (
p°ViC⁄fig
->
íViMode
 =
APTINA_9M034_DC_720P_30FPS
)

2190 || (
p°ViC⁄fig
->
íViMode
 =
APTINA_AR0130_DC_720P_30FPS
))

2192 
p°comboDevAâr
 = &
MIPI_CMOS3V3_ATTR
;

2195 i‡(
p°ViC⁄fig
->
íViMode
 =
SONY_IMX117_LVDS_1080P_30FPS
)

2197 
p°comboDevAâr
 = &
LVDS_4œ√_SENSOR_IMX117_12BIT_1080p_ATTR
;

2200 i‡(
p°ViC⁄fig
->
íViMode
 =
SONY_IMX117_LVDS_720P_30FPS
)

2202 
p°comboDevAâr
 = &
LVDS_4œ√_SENSOR_IMX117_12BIT_720p_ATTR
;

2205 i‡(
p°ViC⁄fig
->
íViMode
 =
SONY_IMX123_LVDS_QXGA_30FPS
)

2207 
p°comboDevAâr
 = &
LVDS_4œ√_SENSOR_IMX123_12BIT_NOWDR_ATTR
;

2210 i‡(
p°ViC⁄fig
->
íViMode
 =
APTINA_AR0230_HISPI_1080P_30FPS
)

2212 
p°comboDevAâr
 = &
HISPI_4œ√_SENSOR_AR0230_12BIT_1080p_NOWDR_ATTR
;

2215 i‡(
io˘l
(
fd
, 
HI_MIPI_SET_DEV_ATTR
, 
p°comboDevAâr
))

2217 
¥ötf
("set mipiáttr failed\n");

2218 
˛o£
(
fd
);

2221 
˛o£
(
fd
);

2222  
HI_SUCCESS
;

2226 
HI_S32
 
SAMPLE_COMM_VI_SèπI•AndVi
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2228 
HI_S32
 
i
, 
s32Rë
 = 
HI_SUCCESS
;

2229 
VI_DEV
 
ViDev
;

2230 
VI_CHN
 
ViChn
;

2231 
HI_U32
 
u32DevNum
 = 1;

2232 
HI_U32
 
u32ChnNum
 = 1;

2233 
SIZE_S
 
°T¨gëSize
;

2234 
RECT_S
 
°C≠Re˘
;

2235 
SAMPLE_VI_MODE_E
 
íViMode
;

2237 i‡(!
p°ViC⁄fig
)

2239 
SAMPLE_PRT
("%s:ÇuŒÖå\n", 
__FUNCTION__
);

2240  
HI_FAILURE
;

2242 
íViMode
 = 
p°ViC⁄fig
->enViMode;

2247 
s32Rë
 = 
SAMPLE_COMM_VI_SèπMIPI
(
p°ViC⁄fig
);

2248 i‡(
HI_SUCCESS
 !
s32Rë
)

2250 
SAMPLE_PRT
("%s: MIPI inô faûed!\n", 
__FUNCTION__
);

2251  
HI_FAILURE
;

2258 
s32Rë
 = 
SAMPLE_COMM_ISP_Inô
(
p°ViC⁄fig
->
íWDRMode
);

2259 i‡(
HI_SUCCESS
 !
s32Rë
)

2261 
SAMPLE_PRT
("%s: Sís‹ inô faûed!\n", 
__FUNCTION__
);

2262  
HI_FAILURE
;

2269 
s32Rë
 = 
SAMPLE_COMM_ISP_Run
();

2270 i‡(
HI_SUCCESS
 !
s32Rë
)

2272 
SAMPLE_PRT
("%s: ISP inô faûed!\n", 
__FUNCTION__
);

2274  
HI_FAILURE
;

2280 
i
 = 0; i < 
u32DevNum
; i++)

2282 
ViDev
 = 
i
;

2283 
s32Rë
 = 
SAMPLE_COMM_VI_SèπDev
(
ViDev
, 
íViMode
);

2284 i‡(
HI_SUCCESS
 !
s32Rë
)

2286 
SAMPLE_PRT
("%s: sèπ vòdev[%d] faûed!\n", 
__FUNCTION__
, 
i
);

2287  
HI_FAILURE
;

2294 
i
 = 0; i < 
u32ChnNum
; i++)

2296 
ViChn
 = 
i
;

2298 
°C≠Re˘
.
s32X
 = 0;

2299 
°C≠Re˘
.
s32Y
 = 0;

2300 
íViMode
)

2302 
APTINA_9M034_DC_720P_30FPS
:

2303 
APTINA_AR0130_DC_720P_30FPS
:

2304 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
:

2305 
PANASONIC_MN34220_MIPI_720P_120FPS
:

2306 
SONY_IMX117_LVDS_720P_30FPS
:

2307 
°C≠Re˘
.
u32Width
 = 1280;

2308 
°C≠Re˘
.
u32Height
 = 720;

2311 
APTINA_MT9P006_DC_1080P_30FPS
:

2312 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
:

2313 
PANASONIC_MN34220_MIPI_1080P_30FPS
:

2314 
SONY_IMX178_LVDS_1080P_30FPS
:

2315 
SONY_IMX185_MIPI_1080P_30FPS
:

2316 
SONY_IMX122_DC_1080P_30FPS
:

2317 
APTINA_AR0330_MIPI_1080P_30FPS
:

2318 
OMNIVISION_OV4689_MIPI_1080P_30FPS
:

2319 
SONY_IMX117_LVDS_1080P_30FPS
:

2320 
APTINA_AR0230_HISPI_1080P_30FPS
:

2321 
°C≠Re˘
.
u32Width
 = 1920;

2322 
°C≠Re˘
.
u32Height
 = 1080;

2325 
APTINA_AR0330_MIPI_1296P_25FPS
:

2326 
°C≠Re˘
.
u32Width
 = 2304;

2327 
°C≠Re˘
.
u32Height
 = 1296;

2330 
APTINA_AR0330_MIPI_1536P_25FPS
:

2331 
SONY_IMX123_LVDS_QXGA_30FPS
:

2332 
°C≠Re˘
.
u32Width
 = 2048;

2333 
°C≠Re˘
.
u32Height
 = 1536;

2336 
OMNIVISION_OV4689_MIPI_4M_30FPS
:

2337 
°C≠Re˘
.
u32Width
 = 2592;

2338 
°C≠Re˘
.
u32Height
 = 1520;

2341 
SONY_IMX178_LVDS_5M_30FPS
:

2342 
OMNIVISION_OV5658_MIPI_5M_30FPS
:

2343 
°C≠Re˘
.
u32Width
 = 2592;

2344 
°C≠Re˘
.
u32Height
 = 1944;

2348 
°C≠Re˘
.
u32Width
 = 1920;

2349 
°C≠Re˘
.
u32Height
 = 1080;

2353 
°T¨gëSize
.
u32Width
 = 
°C≠Re˘
.u32Width;

2354 
°T¨gëSize
.
u32Height
 = 
°C≠Re˘
.u32Height;

2356 
s32Rë
 = 
SAMPLE_COMM_VI_SèπChn
(
ViChn
, &
°C≠Re˘
, &
°T¨gëSize
, 
p°ViC⁄fig
);

2357 i‡(
HI_SUCCESS
 !
s32Rë
)

2359 
SAMPLE_COMM_ISP_St›
();

2360  
HI_FAILURE
;

2364  
s32Rë
;

2367 
HI_S32
 
SAMPLE_COMM_VI_St›I•
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2369 
VI_DEV
 
ViDev
;

2370 
VI_CHN
 
ViChn
;

2371 
HI_S32
 
i
;

2372 
HI_S32
 
s32Rë
;

2373 
HI_U32
 
u32DevNum
 = 1;

2374 
HI_U32
 
u32ChnNum
 = 1;

2376 i‡(!
p°ViC⁄fig
)

2378 
SAMPLE_PRT
("%s:ÇuŒÖå\n", 
__FUNCTION__
);

2379  
HI_FAILURE
;

2383 
i
 = 0; i < 
u32ChnNum
; i++)

2386 
ViChn
 = 
i
;

2387 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

2388 i‡(
HI_SUCCESS
 !
s32Rë
)

2390 
SAMPLE_PRT
("HI_MPI_VI_DißbÀCh¿Áûed wôh %#x\n", 
s32Rë
);

2391  
HI_FAILURE
;

2396 
i
 = 0; i < 
u32DevNum
; i++)

2398 
ViDev
 = 
i
;

2399 
s32Rë
 = 
HI_MPI_VI_DißbÀDev
(
ViDev
);

2400 i‡(
HI_SUCCESS
 !
s32Rë
)

2402 
SAMPLE_PRT
("HI_MPI_VI_DißbÀDev faûed wôh %#x\n", 
s32Rë
);

2403  
HI_FAILURE
;

2407 
SAMPLE_COMM_ISP_St›
();

2408  
HI_SUCCESS
;

2411 
HI_S32
 
SAMPLE_COMM_VI_SèπVi
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2413 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2414 
SAMPLE_VI_MODE_E
 
íViMode
;

2416 i‡(!
p°ViC⁄fig
)

2418 
SAMPLE_PRT
("%s:ÇuŒÖå\n", 
__FUNCTION__
);

2419  
HI_FAILURE
;

2422 
íViMode
 = 
p°ViC⁄fig
->enViMode;

2423 i‡(!
IsSís‹I≈ut
(
íViMode
))

2425 
s32Rë
 = 
SAMPLE_COMM_VI_SèπBT656
(
p°ViC⁄fig
);

2429 
s32Rë
 = 
SAMPLE_COMM_VI_SèπI•AndVi
(
p°ViC⁄fig
);

2433  
s32Rë
;

2436 
HI_S32
 
SAMPLE_COMM_VI_St›Vi
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2438 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2439 
SAMPLE_VI_MODE_E
 
íViMode
;

2441 i‡(!
p°ViC⁄fig
)

2443 
SAMPLE_PRT
("%s:ÇuŒÖå\n", 
__FUNCTION__
);

2444  
HI_FAILURE
;

2446 
íViMode
 = 
p°ViC⁄fig
->enViMode;

2448 i‡(!
IsSís‹I≈ut
(
íViMode
))

2450 
s32Rë
 = 
SAMPLE_COMM_VI_St›BT656
(
íViMode
);

2454 
s32Rë
 = 
SAMPLE_COMM_VI_St›I•
(
p°ViC⁄fig
);

2457  
s32Rë
;

2460 
HI_S32
 
SAMPLE_COMM_VI_SwôchResP¨am
–
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
,

2461 
ISP_PUB_ATTR_S
* 
p°PubAâr
,

2462 
RECT_S
* 
p°C≠Re˘
 )

2464 
CHECK_NULL_PTR
(
p°ViC⁄fig
);

2465 
CHECK_NULL_PTR
(
p°PubAâr
);

2466 
CHECK_NULL_PTR
(
p°C≠Re˘
);

2467 i‡(
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode
)

2469 
p°ViC⁄fig
->
íViMode
 = 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
;

2470 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1280;

2471 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 720;

2472 
p°PubAâr
->
f32FømeR©e
 = 120;

2474 
p°C≠Re˘
->
s32X
 = 0;

2475 
p°C≠Re˘
->
s32Y
 = 0;

2476 
p°C≠Re˘
->
u32Width
 = 1280;

2477 
p°C≠Re˘
->
u32Height
 = 720;

2479 i‡(
PANASONIC_MN34220_SUBLVDS_720P_120FPS
 =
p°ViC⁄fig
->
íViMode
)

2481 
p°ViC⁄fig
->
íViMode
 = 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
;

2482 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1920;

2483 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 1080;

2484 
p°PubAâr
->
f32FømeR©e
 = 30;

2486 
p°C≠Re˘
->
s32X
 = 0;

2487 
p°C≠Re˘
->
s32Y
 = 0;

2488 
p°C≠Re˘
->
u32Width
 = 1920;

2489 
p°C≠Re˘
->
u32Height
 = 1080;

2491 i‡(
PANASONIC_MN34220_MIPI_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode
)

2493 
p°ViC⁄fig
->
íViMode
 = 
PANASONIC_MN34220_MIPI_720P_120FPS
;

2494 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1280;

2495 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 720;

2496 
p°PubAâr
->
f32FømeR©e
 = 120;

2498 
p°C≠Re˘
->
s32X
 = 0;

2499 
p°C≠Re˘
->
s32Y
 = 0;

2500 
p°C≠Re˘
->
u32Width
 = 1280;

2501 
p°C≠Re˘
->
u32Height
 = 720;

2503 i‡(
PANASONIC_MN34220_MIPI_720P_120FPS
 =
p°ViC⁄fig
->
íViMode
)

2505 
p°ViC⁄fig
->
íViMode
 = 
PANASONIC_MN34220_MIPI_1080P_30FPS
;

2506 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1920;

2507 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 1080;

2508 
p°PubAâr
->
f32FømeR©e
 = 30;

2510 
p°C≠Re˘
->
s32X
 = 0;

2511 
p°C≠Re˘
->
s32Y
 = 0;

2512 
p°C≠Re˘
->
u32Width
 = 1920;

2513 
p°C≠Re˘
->
u32Height
 = 1080;

2515 i‡(
OMNIVISION_OV4689_MIPI_4M_30FPS
 =
p°ViC⁄fig
->
íViMode
)

2517 
p°ViC⁄fig
->
íViMode
 = 
OMNIVISION_OV4689_MIPI_1080P_30FPS
;

2518 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1920;

2519 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 1080;

2520 
p°PubAâr
->
f32FømeR©e
 = 30;

2522 
p°C≠Re˘
->
s32X
 = 0;

2523 
p°C≠Re˘
->
s32Y
 = 0;

2524 
p°C≠Re˘
->
u32Width
 = 1920;

2525 
p°C≠Re˘
->
u32Height
 = 1080;

2527 i‡(
OMNIVISION_OV4689_MIPI_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode
)

2529 
p°ViC⁄fig
->
íViMode
 = 
OMNIVISION_OV4689_MIPI_4M_30FPS
;

2530 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 2592;

2531 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 1520;

2532 
p°PubAâr
->
f32FømeR©e
 = 30;

2534 
p°C≠Re˘
->
s32X
 = 0;

2535 
p°C≠Re˘
->
s32Y
 = 0;

2536 
p°C≠Re˘
->
u32Width
 = 2592;

2537 
p°C≠Re˘
->
u32Height
 = 1520;

2539 i‡(
SONY_IMX117_LVDS_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode
)

2541 
p°ViC⁄fig
->
íViMode
 = 
SONY_IMX117_LVDS_720P_30FPS
;

2542 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1280;

2543 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 720;

2544 
p°PubAâr
->
f32FømeR©e
 = 120;

2546 
p°C≠Re˘
->
s32X
 = 0;

2547 
p°C≠Re˘
->
s32Y
 = 0;

2548 
p°C≠Re˘
->
u32Width
 = 1280;

2549 
p°C≠Re˘
->
u32Height
 = 720;

2551 i‡(
SONY_IMX117_LVDS_720P_30FPS
 =
p°ViC⁄fig
->
íViMode
)

2553 
p°ViC⁄fig
->
íViMode
 = 
SONY_IMX117_LVDS_1080P_30FPS
;

2554 
p°PubAâr
->
°WndRe˘
.
u32Width
 = 1920;

2555 
p°PubAâr
->
°WndRe˘
.
u32Height
 = 1080;

2556 
p°PubAâr
->
f32FømeR©e
 = 60;

2558 
p°C≠Re˘
->
s32X
 = 0;

2559 
p°C≠Re˘
->
s32Y
 = 0;

2560 
p°C≠Re˘
->
u32Width
 = 1920;

2561 
p°C≠Re˘
->
u32Height
 = 1080;

2566 
SAMPLE_PRT
("This sensorÅype isÇot surpport!");

2567  
HI_FAILURE
;

2570  
HI_SUCCESS
;

2576 
HI_S32
 
SAMPLE_COMM_VI_UnBödVpss
(
SAMPLE_VI_MODE_E
 
íViMode
)

2578 
HI_S32
 
i
, 
j
, 
s32Rë
;

2579 
VPSS_GRP
 
VpssGΩ
;

2580 
MPP_CHN_S
 
°SrcChn
;

2581 
MPP_CHN_S
 
°De°Chn
;

2582 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

2583 
VI_DEV
 
ViDev
;

2584 
VI_CHN
 
ViChn
;

2586 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

2587 i‡(
HI_SUCCESS
 !
s32Rë
)

2589 
SAMPLE_PRT
("SAMPLE_COMM_VI_Mode2Param failed!\n");

2590  
HI_FAILURE
;

2593 
VpssGΩ
 = 0;

2594 
i
 = 0; i < 
°ViP¨am
.
s32ViDevC¡
; i++)

2596 
ViDev
 = 
i
 * 
°ViP¨am
.
s32ViDevI¡îvÆ
;

2598 
j
 = 0; j < 
°ViP¨am
.
s32ViChnC¡
; j++)

2600 
ViChn
 = 
j
 * 
°ViP¨am
.
s32ViChnI¡îvÆ
;

2602 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

2603 
°SrcChn
.
s32DevId
 = 
ViDev
;

2604 
°SrcChn
.
s32ChnId
 = 
ViChn
;

2606 
°De°Chn
.
íModId
 = 
HI_ID_VPSS
;

2607 
°De°Chn
.
s32DevId
 = 
VpssGΩ
;

2608 
°De°Chn
.
s32ChnId
 = 0;

2610 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

2611 i‡(
s32Rë
 !
HI_SUCCESS
)

2613 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2614  
HI_FAILURE
;

2617 
VpssGΩ
 ++;

2620  
HI_SUCCESS
;

2624 
HI_S32
 
SAMPLE_COMM_VI_UnBödVíc
(
SAMPLE_VI_MODE_E
 
íViMode
)

2626 
HI_S32
 
i
, 
j
, 
s32Rë
;

2627 
VENC_GRP
 
VícGΩ
;

2628 
MPP_CHN_S
 
°SrcChn
;

2629 
MPP_CHN_S
 
°De°Chn
;

2630 
SAMPLE_VI_PARAM_S
 
°ViP¨am
;

2631 
VI_DEV
 
ViDev
;

2632 
VI_CHN
 
ViChn
;

2634 
s32Rë
 = 
SAMPLE_COMM_VI_Mode2P¨am
(
íViMode
, &
°ViP¨am
);

2635 i‡(
HI_SUCCESS
 !
s32Rë
)

2637 
SAMPLE_PRT
("SAMPLE_COMM_VI_Mode2Param failed!\n");

2638  
HI_FAILURE
;

2641 
VícGΩ
 = 0;

2642 
i
 = 0; i < 
°ViP¨am
.
s32ViDevC¡
; i++)

2644 
ViDev
 = 
i
 * 
°ViP¨am
.
s32ViDevI¡îvÆ
;

2646 
j
 = 0; j < 
°ViP¨am
.
s32ViChnC¡
; j++)

2648 
ViChn
 = 
j
 * 
°ViP¨am
.
s32ViChnI¡îvÆ
;

2650 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

2651 
°SrcChn
.
s32DevId
 = 
ViDev
;

2652 
°SrcChn
.
s32ChnId
 = 
ViChn
;

2654 
°De°Chn
.
íModId
 = 
HI_ID_GROUP
;

2655 
°De°Chn
.
s32DevId
 = 
VícGΩ
;

2656 
°De°Chn
.
s32ChnId
 = 0;

2658 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

2659 i‡(
s32Rë
 !
HI_SUCCESS
)

2661 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2662  
HI_FAILURE
;

2665 
VícGΩ
 ++;

2669  
HI_SUCCESS
;

2676 
HI_VOID
 
SAMPLE_COMM_VI_RódFøme
(
FILE
* 
Â
, 
HI_U8
* 
pY
, HI_U8* 
pU
, HI_U8* 
pV
, 
HI_U32
 
width
, HI_U32 
height
, HI_U32 
°ride
, HI_U32 
°ride2
)

2678 
HI_U8
* 
pD°
;

2680 
HI_U32
 
u32Row
;

2682 
pD°
 = 
pY
;

2683  
u32Row
 = 0; u32Row < 
height
; u32Row++ )

2685 
‰ód
–
pD°
, 
width
, 1, 
Â
 );

2686 
pD°
 +
°ride
;

2689 
pD°
 = 
pU
;

2690  
u32Row
 = 0; u32Row < 
height
 / 2; u32Row++ )

2692 
‰ód
–
pD°
, 
width
 / 2, 1, 
Â
 );

2693 
pD°
 +
°ride2
;

2696 
pD°
 = 
pV
;

2697  
u32Row
 = 0; u32Row < 
height
 / 2; u32Row++ )

2699 
‰ód
–
pD°
, 
width
 / 2, 1, 
Â
 );

2700 
pD°
 +
°ride2
;

2707 
HI_S32
 
SAMPLE_COMM_VI_PœnToSemi
(
HI_U8
* 
pY
, HI_S32 
ySåide
,

2708 
HI_U8
* 
pU
, 
HI_S32
 
uSåide
,

2709 
HI_U8
* 
pV
, 
HI_S32
 
vSåide
,

2710 
HI_S32
 
picWidth
, HI_S32 
picHeight
)

2712 
HI_S32
 
i
;

2713 
HI_U8
* 
pTmpU
, *
±u
;

2714 
HI_U8
* 
pTmpV
, *
±v
;

2715 
HI_S32
 
s32HafW
 = 
uSåide
 >> 1 ;

2716 
HI_S32
 
s32HafH
 = 
picHeight
 >> 1 ;

2717 
HI_S32
 
s32Size
 = 
s32HafW
 * 
s32HafH
;

2719 
pTmpU
 = 
mÆloc
–
s32Size
 );

2720 i‡(
NULL
 =
pTmpU
)

2722 
SAMPLE_PRT
("malloc faild!\n");

2723  
HI_FAILURE
;

2725 
±u
 = 
pTmpU
;

2726 
pTmpV
 = 
mÆloc
–
s32Size
 );

2727 i‡(
NULL
 =
pTmpV
)

2729 
SAMPLE_PRT
("malloc faild!\n");

2730  
HI_FAILURE
;

2732 
±v
 = 
pTmpV
;

2734 
mem˝y
(
pTmpU
, 
pU
, 
s32Size
);

2735 
mem˝y
(
pTmpV
, 
pV
, 
s32Size
);

2737 
i
 = 0; i<
s32Size
 >> 1; i++)

2739 *
pU
++ = *
pTmpV
++;

2740 *
pU
++ = *
pTmpU
++;

2743 
i
 = 0; i<
s32Size
 >> 1; i++)

2745 *
pV
++ = *
pTmpV
++;

2746 *
pV
++ = *
pTmpU
++;

2749 
‰ì
–
±u
 );

2750 
‰ì
–
±v
 );

2752  
HI_SUCCESS
;

2755 
SAMPLE_COMM_VI_ExôMµ
–
s32poﬁId
)

2757 i‡(
s32poﬁId
 < 0)

2759 i‡(
HI_MPI_SYS_Exô
())

2761 
¥ötf
("sysÉxit fail\n");

2765 i‡(
HI_MPI_VB_Exô
())

2767 
¥ötf
("vbÉxit fail\n");

2780 
HI_S32
 
SAMPLE_COMM_VI_GëVFømeFromYUV
(
FILE
* 
pYUVFûe
, 
HI_U32
 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32Såide
, 
VIDEO_FRAME_INFO_S
* 
p°VFømeInfo
)

2782 
HI_U32
 
u32LSåide
;

2783 
HI_U32
 
u32CSåide
;

2784 
HI_U32
 
u32LumaSize
;

2785 
HI_U32
 
u32ChrmSize
;

2786 
HI_U32
 
u32Size
;

2787 
VB_BLK
 
VbBlk
;

2788 
HI_U32
 
u32PhyAddr
;

2789 
HI_U8
* 
pVúAddr
;

2791 
u32LSåide
 = 
u32Såide
;

2792 
u32CSåide
 = 
u32Såide
;

2794 
u32LumaSize
 = (
u32LSåide
 * 
u32Height
);

2795 
u32ChrmSize
 = (
u32CSåide
 * 
u32Height
) >> 2;

2796 
u32Size
 = 
u32LumaSize
 + (
u32ChrmSize
 << 1);

2799 
VbBlk
 = 
HI_MPI_VB_GëBlock
(
VB_INVALID_POOLID
, 
u32Size
, 
NULL
);

2800 i‡(
VB_INVALID_HANDLE
 =
VbBlk
)

2802 
SAMPLE_PRT
("HI_MPI_VB_GëBlockÉº! size:%d\n", 
u32Size
);

2805 
u32PhyAddr
 = 
HI_MPI_VB_H™dÀ2PhysAddr
(
VbBlk
);

2806 i‡(0 =
u32PhyAddr
)

2811 
pVúAddr
 = (
HI_U8
*Ë
HI_MPI_SYS_Mm≠
(
u32PhyAddr
, 
u32Size
);

2812 i‡(
NULL
 =
pVúAddr
)

2817 
p°VFømeInfo
->
u32PoﬁId
 = 
HI_MPI_VB_H™dÀ2PoﬁId
(
VbBlk
);

2818 i‡(
VB_INVALID_POOLID
 =
p°VFømeInfo
->
u32PoﬁId
)

2822 
SAMPLE_PRT
("poﬁ id :%d,ÖhyAddr:%x,vúAddr:%x\n" , 
p°VFømeInfo
->
u32PoﬁId
, 
u32PhyAddr
, ()
pVúAddr
);

2824 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[0] = u32PhyAddr;

2825 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[1] =Ö°VFømeInfo->°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

2826 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[2] =Ö°VFømeInfo->°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

2828 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0] =ÖVirAddr;

2829 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1] =Ö°VFømeInfo->°VFøme.pVúAddr[0] + 
u32LumaSize
;

2830 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[2] =Ö°VFømeInfo->°VFøme.pVúAddr[1] + 
u32ChrmSize
;

2832 
p°VFømeInfo
->
°VFøme
.
u32Width
 = u32Width;

2833 
p°VFømeInfo
->
°VFøme
.
u32Height
 = u32Height;

2834 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0] = 
u32LSåide
;

2835 
p°VFømeInfo
->
°VFøme
.
u32Såide
[1] = 
u32CSåide
;

2836 
p°VFømeInfo
->
°VFøme
.
u32Såide
[2] = 
u32CSåide
;

2837 
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

2838 
p°VFømeInfo
->
°VFøme
.
u32Fõld
 = 
VIDEO_FIELD_INTERLACED
;

2841 
SAMPLE_COMM_VI_RódFøme
(
pYUVFûe
, 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0],

2842 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1],ÖstVFrameInfo->stVFrame.pVirAddr[2],

2843 
p°VFømeInfo
->
°VFøme
.
u32Width
,Ö°VFømeInfo->°VFøme.
u32Height
,

2844 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0],ÖstVFrameInfo->stVFrame.u32Stride[1] >> 1 );

2847 
SAMPLE_COMM_VI_PœnToSemi
(
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0],Ö°VFømeInfo->°VFøme.
u32Såide
[0],

2848 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1],Ö°VFømeInfo->°VFøme.
u32Såide
[1],

2849 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[2],Ö°VFømeInfo->°VFøme.
u32Såide
[1],

2850 
p°VFømeInfo
->
°VFøme
.
u32Width
,Ö°VFømeInfo->°VFøme.
u32Height
);

2852 
HI_MPI_SYS_Mm≠
(
u32PhyAddr
, 
u32Size
);

2856 
HI_S32
 
SAMPLE_COMM_VI_Ch™geC≠Size
(
VI_CHN
 
ViChn
, 
HI_U32
 
u32C≠Width
, HI_U32 
u32C≠Height
, HI_U32 
u32Width
, HI_U32 
u32Height
)

2858 
VI_CHN_ATTR_S
 
°ChnAâr
;

2859 
HI_S32
 
S32Rë
 = 
HI_SUCCESS
;

2860 
S32Rë
 = 
HI_MPI_VI_GëChnAâr
(
ViChn
, &
°ChnAâr
);

2861 i‡(
HI_SUCCESS
 !
S32Rë
)

2863 
SAMPLE_PRT
( "HI_MPI_VI_GetChnAttr failed\n");

2865 
°ChnAâr
.
°C≠Re˘
.
u32Width
 = 
u32C≠Width
;

2866 
°ChnAâr
.
°C≠Re˘
.
u32Height
 = 
u32C≠Height
;

2867 
°ChnAâr
.
°De°Size
.
u32Width
 = u32Width;

2868 
°ChnAâr
.
°De°Size
.
u32Height
 = u32Height;

2870 
S32Rë
 = 
HI_MPI_VI_SëChnAâr
(
ViChn
, &
°ChnAâr
);

2871 i‡(
HI_SUCCESS
 !
S32Rë
)

2873 
SAMPLE_PRT
( "HI_MPI_VI_SetChnAttr failed\n");

2876  
HI_SUCCESS
;

2879 
HI_S32
 
SAMPLE_COMM_VI_GëVBFromPoﬁ
(
HI_U32
 
u32Width
,

2880 
HI_U32
 
u32Height
,

2881 
HI_U32
 
u32Såide
,

2882 
VIDEO_FIELD_E
 
u32Fõld
,

2883 
SAMPLE_VI_FRAME_INFO_S
* 
p°VM°FømeInfo
)

2885 
HI_U32
 
u32LSåide
;

2886 
HI_U32
 
u32CSåide
;

2887 
HI_U32
 
u32LumaSize
;

2888 
HI_U32
 
u32ChrmSize
;

2889 
HI_U32
 
u32Size
;

2890 
VB_BLK
 
VbBlk
;

2891 
HI_U32
 
u32PhyAddr
;

2892 
HI_VOID
* 
pVúAddr
 = 
NULL
;

2893 
VIDEO_FRAME_INFO_S
* 
p°VFømeInfo
 = &
p°VM°FømeInfo
->
°VideoFøme
;

2895 
u32LSåide
 = 
u32Width
;

2896 
u32CSåide
 = 
u32Width
;

2897 
u32LumaSize
 = 
u32Såide
 * 
u32Height
;

2898 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

2900 
u32ChrmSize
 = (
u32CSåide
 * 
u32Height
) >> 1;

2902 i‡((
PIXEL_FORMAT_RGB_BAYER
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

2903 || (
PIXEL_FORMAT_RGB_BAYER_12BPP
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

2904 || (
PIXEL_FORMAT_RGB_BAYER_10BPP
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

2905 || (
PIXEL_FORMAT_RGB_BAYER_8BPP
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
))

2907 
u32ChrmSize
 = 0;

2911 
u32ChrmSize
 = (
u32CSåide
 * 
u32Height
) >> 2;

2913 
u32Size
 = 
u32LumaSize
 + (
u32ChrmSize
 << 1);

2915 
¥ötf
("===============u32Size: %d\n", 
u32Size
);

2916 
p°VM°FømeInfo
->
u32FrmSize
 = 
u32Size
;

2918 
VbBlk
 = 
HI_MPI_VB_GëBlock
(
VB_INVALID_POOLID
, 
u32Size
, 
HI_NULL
);

2919 i‡(
VB_INVALID_HANDLE
 =
VbBlk
)

2921 
¥ötf
("HI_MPI_VB_GëBlockÉº! size:%d\n", 
u32Size
);

2922  
HI_FAILURE
;

2924 
p°VM°FømeInfo
->
VbBlk
 = VbBlk;

2926 
¥ötf
("VbBlk: 0x%x\n", 
VbBlk
);

2928 
u32PhyAddr
 = 
HI_MPI_VB_H™dÀ2PhysAddr
(
VbBlk
);

2929 i‡(0 =
u32PhyAddr
)

2931 
¥ötf
("HI_MPI_VB_Handle2PhysAddrÉrr!\n");

2932  
HI_FAILURE
;

2935 
p°VFømeInfo
->
u32PoﬁId
 = 
HI_MPI_VB_H™dÀ2PoﬁId
(
VbBlk
);

2936 i‡(
VB_INVALID_POOLID
 =
p°VFømeInfo
->
u32PoﬁId
)

2938 
SAMPLE_COMM_VI_ExôMµ
(
p°VFømeInfo
->
u32PoﬁId
);

2942 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[0] = u32PhyAddr;

2943 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[1] =Ö°VFømeInfo->°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

2944 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[2] =Ö°VFømeInfo->°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

2946 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0] =ÖVirAddr;

2947 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1] =Ö°VFømeInfo->°VFøme.pVúAddr[0] + 
u32LumaSize
;

2948 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[2] =Ö°VFømeInfo->°VFøme.pVúAddr[1] + 
u32ChrmSize
;

2950 
p°VFømeInfo
->
°VFøme
.
u32Width
 = u32Width;

2951 
p°VFømeInfo
->
°VFøme
.
u32Height
 = u32Height;

2952 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0] = 
u32LSåide
;

2953 
p°VFømeInfo
->
°VFøme
.
u32Såide
[1] = 
u32CSåide
;

2954 
p°VFømeInfo
->
°VFøme
.
u32Såide
[2] = 
u32CSåide
;

2955 
p°VFømeInfo
->
°VFøme
.
u32Fõld
 = u32Field;

2957  
HI_SUCCESS
;

2962 
SAMPLE_COMM_VI_SaveF≤D©a
(
ISP_FPN_FRAME_INFO_S
* 
pVBuf
,

2963 
HI_U32
 
u32F≤Mode
,

2964 
HI_U32
 
u32Nbô
,

2965 
FILE
* 
pfd
)

2967 
HI_U8
* 
pU8VBufVút_Y
;

2968 
HI_U32
 
phy_addr
, 
size
;

2969 
HI_U8
* 
pU£rPageAddr
[2];

2970 
HI_BOOL
 
bCom¥ess
;

2972 
size
 = (
pVBuf
->
°F≤Føme
.
°VFøme
.
u32Såide
[0]Ë* (pVBuf->°F≤Føme.°VFøme.
u32Height
);

2973 
¥ötf
("pVBuf->u32Såide[0]: %d, size: %d\n", 
pVBuf
->
°F≤Føme
.
°VFøme
.
u32Såide
[0], 
size
);

2974 
phy_addr
 = 
pVBuf
->
°F≤Føme
.
°VFøme
.
u32PhyAddr
[0];

2976 
pU£rPageAddr
[0] = (
HI_U8
*Ë
HI_MPI_SYS_Mm≠
(
phy_addr
, 
size
);

2977 i‡(
NULL
 =
pU£rPageAddr
[0])

2979 
¥ötf
("HI_MPI_SYS_MmapÇull\n");

2983 
pU8VBufVút_Y
 = (
HI_U8
*)
pU£rPageAddr
[0];

2986 
Ârötf
(
°dîr
, "saving......Raw data......u32Stride[0]: %d, width: %d, height: %d\n"

2987 , 
pVBuf
->
°F≤Føme
.
°VFøme
.
u32Såide
[0]

2988 , 
pVBuf
->
°F≤Føme
.
°VFøme
.
u32Width


2989 , 
pVBuf
->
°F≤Føme
.
°VFøme
.
u32Height
);

2991 
fÊush
(
°dîr
);

2993 
fwrôe
(
pU8VBufVút_Y
, 
pVBuf
->
u32FrmSize
, 1, 
pfd
);

2996 
fwrôe
(&
pVBuf
->
u32Off£t
, 4, 1, 
pfd
);

2999 
bCom¥ess
 = (
COMPRESS_MODE_FRAME
 =
pVBuf
->
°F≤Føme
.
°VFøme
.
íCom¥essMode
);

3000 
fwrôe
(&
bCom¥ess
, 4, 1, 
pfd
);

3003 
fwrôe
(&
pVBuf
->
u32FrmSize
, 4, 1, 
pfd
);

3006 
fwrôe
(&
pVBuf
->
u32Iso
, 4, 1, 
pfd
);

3007 
fÊush
(
pfd
);

3010 
fÊush
(
°dîr
);

3012 
HI_MPI_SYS_Munm≠
(
pU£rPageAddr
[0], 
size
);

3016 
HI_S32
 
SAMPLE_COMM_VI_Rñó£VBToPoﬁ
(
SAMPLE_VI_FRAME_INFO_S
* 
p°VM°FømeInfo
)

3018 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3020 
s32Rë
 = 
HI_MPI_VB_Rñó£Block
(
p°VM°FømeInfo
->
VbBlk
);

3021  
s32Rë
;

3025 
HI_S32
 
SAMPLE_COMM_VI_FPN_CALIBRATE_CONFIG
(c⁄° * 
Ân_fûe
,

3026 
ISP_FPN_TYPE_E
 
íF≤Ty≥
,

3027 
PIXEL_FORMAT_E
 
íPixñF‹m©
,

3028 
COMPRESS_MODE_E
 
íCom¥essMode
,

3029 
HI_U32
 
u32FrmNum
,

3030 
HI_U32
 
u32Thªshﬁd
)

3032 
VI_CHN
 
ViChn
 = 0;

3033 
VI_CHN_ATTR_S
 
°TempChnAâr
;

3034 
ISP_FPN_CALIBRATE_ATTR_S
 
°F≤CÆAâr
;

3035 
HI_U32
 
u32Såide
;

3036 
SAMPLE_VI_FRAME_INFO_S
 
°VM°Føme
 = {0};

3037 
HI_U32
 
u32Height
;

3038 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3040 
ISP_DEV
 
I•Dev
 = 0;

3041 
FILE
* 
pFûe
;

3042 
fûeName
[
FILE_NAME_LEN
];

3044 
s32Rë
 = 
HI_MPI_VI_GëChnAâr
(
ViChn
, &
°TempChnAâr
);

3045 i‡(
HI_SUCCESS
 !
s32Rë
)

3047 
¥ötf
("get vi chnáttr failed!");

3048  
HI_FAILURE
;

3052 
u32Såide
 = 
ALIGN_BACK
(
°TempChnAâr
.
°C≠Re˘
.
u32Width
 * 2, 16);

3053 
¥ötf
("u32Såide: %d\n", 
u32Såide
);

3054 
°VM°Føme
.
°VideoFøme
.
°VFøme
.
íPixñF‹m©
 =ÉnPixelFormat;

3055 
°VM°Føme
.
°VideoFøme
.
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

3057 
u32Height
 = 
°TempChnAâr
.
°C≠Re˘
.u32Height;

3059 i‡(
ISP_FPN_TYPE_LINE
 =
íF≤Ty≥
)

3061 
u32Height
 = 1;

3064 
s32Rë
 = 
SAMPLE_COMM_VI_GëVBFromPoﬁ
(
°TempChnAâr
.
°C≠Re˘
.
u32Width
,

3065 
u32Height
,

3066 
u32Såide
,

3067 
VIDEO_FIELD_FRAME
,

3068 &
°VM°Føme
);

3069 i‡(
HI_SUCCESS
 !
s32Rë
)

3071 
¥ötf
("alloc mem failed!");

3072  
HI_FAILURE
;

3075 
¥ötf
("==========let isp fly ====================\n");

3077 
s32Rë
 = 
HI_MPI_VI_SëChnAâr
(
ViChn
, &
°TempChnAâr
);

3078 i‡(
HI_SUCCESS
 !
s32Rë
)

3080 
¥ötf
("set vi chnáttr failed!");

3081  
HI_FAILURE
;

3084 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ViChn
);

3085 i‡(
HI_SUCCESS
 !
s32Rë
)

3087 
¥ötf
("enable vi chn failed!");

3088  
HI_FAILURE
;

3091 
¥ötf
("\nÖleaseÅurn off cameraáperture!\n");

3092 
VI_PAUSE
();

3093 
¥ötf
("\nhitány key ,start calibrate!\n");

3094 
VI_PAUSE
();

3096 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

3097 i‡(
HI_SUCCESS
 !
s32Rë
)

3099 
¥ötf
("disable vi chn failed!");

3100  
HI_FAILURE
;

3103 
°F≤CÆAâr
.
u32FømeNum
 = 
u32FrmNum
;

3104 
°F≤CÆAâr
.
u32Thªshﬁd
 = u32Threshold;

3105 
°F≤CÆAâr
.
íF≤Ty≥
 =ÉnFpnType;

3106 
mem˝y
(&
°F≤CÆAâr
.
°F≤CÆiFøme
.
°F≤Føme
,

3107 &
°VM°Føme
.
°VideoFøme
,

3108 (
VIDEO_FRAME_INFO_S
));

3110 
°F≤CÆAâr
.
°F≤CÆiFøme
.
°F≤Føme
.
°VFøme
.
íCom¥essMode
 =ÉnCompressMode;

3112 
°F≤CÆAâr
.
°F≤CÆiFøme
.
u32Off£t
 = 0;

3114 
s32Rë
 = 
HI_MPI_ISP_FPNCÆibøã
(
I•Dev
, &
°F≤CÆAâr
);

3115 i‡(
HI_SUCCESS
 !
s32Rë
)

3117 
¥ötf
("HI_MPI_ISP_FPNCÆibøãÉº: 0x%x\n", 
s32Rë
);

3118  
s32Rë
;

3122 
¢¥ötf
(
fûeName
, 
FILE_NAME_LEN
, "./%s_%d_%d_%dbô.øw", 
Ân_fûe
, 
°TempChnAâr
.
°De°Size
.
u32Width
,

3123 
°TempChnAâr
.
°De°Size
.
u32Height
, 16);

3124 
¥ötf
("\«·î cÆibøã, off£à=0x%x,ISO = %d\n", 
°F≤CÆAâr
.
°F≤CÆiFøme
.
u32Off£t
,

3125 
°F≤CÆAâr
.
°F≤CÆiFøme
.
u32Iso
);

3127 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ViChn
);

3128 i‡(
HI_SUCCESS
 !
s32Rë
)

3130 
¥ötf
("enable vi chn failed!");

3131  
HI_FAILURE
;

3134 
¥ötf
("\nhôány key,ßvêd¨k fømêfûe: %s!\n", 
fûeName
);

3135 
VI_PAUSE
();

3137 
pFûe
 = 
f›í
(
fûeName
, "wb");

3138 i‡(
NULL
 =
pFûe
)

3140 
¥ötf
("›í fûê%†îr!\n", 
fûeName
);

3145 
HI_U32
 
u32F≤BôWidth
 = 10;

3147 
SAMPLE_COMM_VI_SaveF≤D©a
(&
°F≤CÆAâr
.
°F≤CÆiFøme
, 
íF≤Ty≥
, 
u32F≤BôWidth
, 
pFûe
);

3148 
f˛o£
(
pFûe
);

3150 
¥ötf
("\nsaved dark frame£°\n");

3152 
s32Rë
 = 
SAMPLE_COMM_VI_Rñó£VBToPoﬁ
(&
°VM°Føme
);

3153 i‡(
HI_SUCCESS
 !
s32Rë
)

3155 
¥ötf
("SAMPLE_COMM_VI_Rñó£VBToPoﬁÉº: 0x%x\n", 
s32Rë
);

3158 
¥ötf
("\nhitány key,startÑead dark frame\n");

3159 
VI_PAUSE
();

3161  
HI_SUCCESS
;

3164 
HI_VOID
 
SAMPLE_COMM_VI_RódO√F≤Føme
(
FILE
* 
Â
,

3165 
HI_U8
* 
pY
,

3166 
HI_U32
 
width
, HI_U32 
height
,

3167 
HI_U32
 
°ride
,

3168 
PIXEL_FORMAT_E
 
íPixñF‹m©
,

3169 
HI_U32
* 
pu32Off£t
,

3170 
HI_U32
* 
pu32FrmSize
,

3171 
COMPRESS_MODE_E
* 
≥nCom¥essMode
,

3172 
HI_U32
* 
pu32Iso
)

3174 
HI_U8
* 
pD°
;

3175 
HI_U32
 
u32FrmSize
;

3176 
HI_BOOL
 
bCom¥ess
;

3192 
f£ek
(
Â
, -4, 
SEEK_END
);

3194 
‰ód
(
pu32Iso
, 4, 1, 
Â
);

3197 
f£ek
(
Â
, -8, 
SEEK_END
);

3198 
‰ód
(&
u32FrmSize
, 4, 1, 
Â
);

3199 *
pu32FrmSize
 = 
u32FrmSize
;

3202 
f£ek
(
Â
, -12, 
SEEK_END
);

3203 
‰ód
(&
bCom¥ess
, 4, 1, 
Â
);

3205 i‡(
bCom¥ess
)

3207 *
≥nCom¥essMode
 = 
COMPRESS_MODE_FRAME
;

3211 *
≥nCom¥essMode
 = 
COMPRESS_MODE_NONE
;

3215 
f£ek
(
Â
, -16, 
SEEK_END
);

3216 
‰ód
(
pu32Off£t
, 4, 1, 
Â
);

3219 
f£ek
(
Â
, 0L, 
SEEK_SET
);

3220 
pD°
 = 
pY
;

3221 
‰ód
(
pD°
, 1, 
u32FrmSize
, 
Â
);

3231 
HI_S32
 
SAMPLE_COMM_VI_GëFPNFøme_FromRaw
(
FILE
* 
pRawFûe
,

3232 
HI_U32
 
u32Width
, HI_U32 
u32Height
,

3233 
SAMPLE_VI_FRAME_INFO_S
* 
p°VM°FømeInfo
,

3234 
HI_U32
* 
pu32Off£t
,

3235 
HI_U32
* 
pu32Iso
)

3237 
HI_U32
 
u32LSåide
;

3238 
HI_U32
 
u32CSåide
;

3239 
HI_U32
 
u32LumaSize
 = 0;

3240 
HI_U32
 
u32ChrmSize
 = 0;

3241 
HI_U32
 
u32Size
;

3242 
VB_BLK
 
VbBlk
;

3243 
HI_U32
 
u32PhyAddr
;

3244 
HI_U8
* 
pVúAddr
;

3245 
HI_U32
 
u32Såide
 = 0;

3246 
VIDEO_FRAME_INFO_S
* 
p°VFømeInfo
 = &
p°VM°FømeInfo
->
°VideoFøme
;

3247 
COMPRESS_MODE_E
 
íCom¥essMode
;

3249 i‡(
PIXEL_FORMAT_RGB_BAYER
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

3251 
u32Såide
 = 
ALIGN_BACK
(
u32Width
 * 2, 16);

3253 i‡(
PIXEL_FORMAT_RGB_BAYER_10BPP
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

3255 
u32Såide
 = (
u32Width
 * 10 + 127) / 128 * 128 / 8;

3257 i‡(
PIXEL_FORMAT_RGB_BAYER_8BPP
 =
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
)

3259 
u32Såide
 = (
u32Width
 * 8 + 127) / 128 * 128 / 8;

3262 
u32LSåide
 = 
u32Såide
;

3263 
u32CSåide
 = 
u32Såide
;

3267 
f£ek
(
pRawFûe
, -8, 
SEEK_END
);

3269 
‰ód
(&
u32Size
, 1, 4, 
pRawFûe
);

3271 
f£ek
(
pRawFûe
, 0L, 
SEEK_SET
);

3277 
VbBlk
 = 
HI_MPI_VB_GëBlock
(
VB_INVALID_POOLID
, 
u32Size
, 
HI_NULL
);

3278 i‡(
VB_INVALID_HANDLE
 =
VbBlk
)

3281 
¥ötf
("HI_MPI_VB_GëBlockÉº! size:%d\n", 
u32Size
);

3282 
SAMPLE_COMM_VI_ExôMµ
(
VbBlk
);

3283  
HI_FAILURE
;

3285 
p°VM°FømeInfo
->
VbBlk
 = VbBlk;

3287 
u32PhyAddr
 = 
HI_MPI_VB_H™dÀ2PhysAddr
(
VbBlk
);

3288 i‡(0 =
u32PhyAddr
)

3290 
¥ötf
("HI_MPI_VB_Handle2PhysAddrÉrr!\n");

3291 
SAMPLE_COMM_VI_ExôMµ
(
u32PhyAddr
);

3292  
HI_FAILURE
;

3294 
pVúAddr
 = (
HI_U8
*Ë
HI_MPI_SYS_Mm≠
(
u32PhyAddr
, 
u32Size
);

3295 i‡(
NULL
 =
pVúAddr
)

3297 
¥ötf
("HI_MPI_SYS_MmapÉrr!\n");

3298 
SAMPLE_COMM_VI_ExôMµ
((
HI_S32
)
pVúAddr
);

3299  
HI_FAILURE
;

3302 
p°VFømeInfo
->
u32PoﬁId
 = 
HI_MPI_VB_H™dÀ2PoﬁId
(
VbBlk
);

3303 i‡(
VB_INVALID_POOLID
 =
p°VFømeInfo
->
u32PoﬁId
)

3305 
SAMPLE_COMM_VI_ExôMµ
(
p°VFømeInfo
->
u32PoﬁId
);

3309 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[0] = u32PhyAddr;

3310 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[1] =Ö°VFømeInfo->°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

3311 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[2] =Ö°VFømeInfo->°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

3313 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0] =ÖVirAddr;

3314 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1] =Ö°VFømeInfo->°VFøme.pVúAddr[0] + 
u32LumaSize
;

3315 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[2] =Ö°VFømeInfo->°VFøme.pVúAddr[1] + 
u32ChrmSize
;

3317 
p°VFømeInfo
->
°VFøme
.
u32Width
 = u32Width;

3318 
p°VFømeInfo
->
°VFøme
.
u32Height
 = 
SENSOR_HEIGHT
;

3319 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0] = 
u32LSåide
;

3320 
p°VFømeInfo
->
°VFøme
.
u32Såide
[1] = 
u32CSåide
;

3321 
p°VFømeInfo
->
°VFøme
.
u32Såide
[2] = 
u32CSåide
;

3322 
p°VFømeInfo
->
°VFøme
.
u32Fõld
 = 
VIDEO_FIELD_FRAME
;

3324 i‡(1 =
u32Height
)

3326 
SAMPLE_COMM_VI_RódO√F≤Føme
(
pRawFûe
, 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0],

3327 
p°VFømeInfo
->
°VFøme
.
u32Width
,

3329 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0],

3330 
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
,

3331 
pu32Off£t
,

3332 &
p°VM°FømeInfo
->
u32FrmSize
,

3333 &
íCom¥essMode
,

3334 
pu32Iso
);

3338 
SAMPLE_COMM_VI_RódO√F≤Føme
(
pRawFûe
, 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0],

3339 
p°VFømeInfo
->
°VFøme
.
u32Width
,

3340 
p°VFømeInfo
->
°VFøme
.
u32Height
,

3341 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0],

3342 
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
,

3343 
pu32Off£t
,

3344 &
p°VM°FømeInfo
->
u32FrmSize
,

3345 &
íCom¥essMode
,

3346 
pu32Iso
);

3349 
p°VFømeInfo
->
°VFøme
.
íCom¥essMode
 =ÉnCompressMode;

3352 
HI_MPI_SYS_Munm≠
(
pVúAddr
, 
u32Size
);

3358 
HI_S32
 
SAMPLE_COMM_VI_RódO√RawFûe
(c⁄° * 
fûe_«me
,

3359 
HI_U32
 
u32Width
, HI_U32 
u32Height
,

3360 
SAMPLE_VI_FRAME_INFO_S
* 
p°VM°FømeInfo
,

3361 
HI_U32
* 
u32Off£t
,

3362 
HI_U32
* 
pu32Iso
)

3364 
FILE
* 
pfd
;

3365 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3368 
¥ötf
("›í d¨k fømêfûe: %s. \n", 
fûe_«me
);

3369 
pfd
 = 
f›í
(
fûe_«me
, "rb");

3370 i‡(!
pfd
)

3372 
¥ötf
("›í fûê-> %†Áû \n", 
fûe_«me
);

3373  
HI_FAILURE
;

3377 
s32Rë
 = 
SAMPLE_COMM_VI_GëFPNFøme_FromRaw
(
pfd
, 
u32Width
, 
u32Height
, 
p°VM°FømeInfo
, 
u32Off£t
, 
pu32Iso
);

3379 
f˛o£
(
pfd
);

3380  
s32Rë
;

3384 
HI_S32
 
SAMPLE_COMM_VI_CORRECTION_CONFIG
(c⁄° * 
Ân_fûe
,

3385 
ISP_FPN_TYPE_E
 
íF≤Ty≥
,

3386 
ISP_OP_TYPE_E
 
íOpTy≥
,

3387 
HI_U32
 
u32Såígth
,

3388 
PIXEL_FORMAT_E
 
íPixñF‹m©
)

3390 
VI_CHN
 
ViChn
 = 0;

3391 
VI_CHN_ATTR_S
 
°TempChnAâr
;

3392 
ISP_FPN_ATTR_S
 
°FPNAâr
;

3393 
SAMPLE_VI_FRAME_INFO_S
 
°VM°Føme
 = {0};

3394 
ISP_DEV
 
I•Dev
 = 0;

3395 
ISP_FPN_FRAME_INFO_S
* 
p°F≤FrmInfo
;

3396 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3397 
HI_U32
 
u32Iso
;

3399 
s32Rë
 = 
HI_MPI_VI_GëChnAâr
(
ViChn
, &
°TempChnAâr
);

3400 i‡(
HI_SUCCESS
 !
s32Rë
)

3402 
¥ötf
("get vi chnáttr failed!");

3403  
HI_FAILURE
;

3406 
°VM°Føme
.
°VideoFøme
.
°VFøme
.
íPixñF‹m©
 =ÉnPixelFormat;

3407 
°VM°Føme
.
°VideoFøme
.
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

3408 
p°F≤FrmInfo
 = &
°FPNAâr
.
°F≤FrmInfo
;

3410 
s32Rë
 = 
SAMPLE_COMM_VI_RódO√RawFûe
(
Ân_fûe
,

3411 
°TempChnAâr
.
°De°Size
.
u32Width
,

3412 
°TempChnAâr
.
°De°Size
.
u32Height
,

3413 &
°VM°Føme
,

3414 &
p°F≤FrmInfo
->
u32Off£t
,

3415 &
u32Iso
);

3417 i‡(
HI_SUCCESS
 !
s32Rë
)

3419 
¥ötf
("readÑaw file failed!");

3420  
HI_FAILURE
;

3423 
p°F≤FrmInfo
->
u32FrmSize
 = 
°VM°Føme
.u32FrmSize;

3424 
mem˝y
(&
p°F≤FrmInfo
->
°F≤Føme
,

3425 &
°VM°Føme
.
°VideoFøme
,

3426 (
VIDEO_FRAME_INFO_S
));

3428 
°FPNAâr
.
bE«bÀ
 = 
HI_TRUE
;

3429 
°FPNAâr
.
íOpTy≥
 =ÉnOpType;

3431 
¥ötf
("\ƒód u32Off£à = 0x%x, u32isÿ%d\n", 
°FPNAâr
.
°F≤FrmInfo
.
u32Off£t
 , 
u32Iso
);

3432 
¥ötf
("hitány key,start correction\n");

3433 
VI_PAUSE
();

3435 
mem˝y
(&
°FPNAâr
.
°F≤FrmInfo
.
°F≤Føme
,

3436 &
°VM°Føme
.
°VideoFøme
,

3437 (
VIDEO_FRAME_INFO_S
));

3438 
°FPNAâr
.
íF≤Ty≥
 =ÉnFpnType;

3439 
°FPNAâr
.
°F≤FrmInfo
.
u32Iso
 = u32Iso;

3440 
°FPNAâr
.
°M™uÆ
.
u32Såígth
 = u32Strength;

3442 
s32Rë
 = 
HI_MPI_ISP_SëFPNAâr
(
I•Dev
, &
°FPNAâr
);

3443 i‡(
HI_SUCCESS
 !
s32Rë
)

3445 
¥ötf
("Â¿c‹ª˘i⁄ faû 0x%x\n", 
s32Rë
);

3446  
HI_FAILURE
;

3449 
VI_PAUSE
();

3451 
s32Rë
 = 
SAMPLE_COMM_VI_Rñó£VBToPoﬁ
(&
°VM°Føme
);

3452 i‡(
HI_SUCCESS
 !
s32Rë
)

3454 
¥ötf
("SAMPLE_COMM_VI_Rñó£VBToPoﬁ faû 0x%x\n", 
s32Rë
);

3455  
HI_FAILURE
;

3458  
HI_SUCCESS
;

3464 
HI_S32
 
SAMPLE_COMM_VI_GëSizeBySís‹
(
PIC_SIZE_E
* 
≥nSize
)

3466 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3467 
SAMPLE_VI_MODE_E
 
íMode
 = 
SENSOR_TYPE
;

3469 i‡(!
≥nSize
)

3471  
HI_FAILURE
;

3474 
íMode
)

3476 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
:

3477 
PANASONIC_MN34220_MIPI_720P_120FPS
:

3478 
SONY_IMX117_LVDS_720P_30FPS
:

3479 *
≥nSize
 = 
PIC_HD720
;

3481 
APTINA_MT9P006_DC_1080P_30FPS
:

3482 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
:

3483 
PANASONIC_MN34220_MIPI_1080P_30FPS
:

3484 
OMNIVISION_OV4689_MIPI_1080P_30FPS
:

3485 
APTINA_AR0330_MIPI_1080P_30FPS
:

3486 
SONY_IMX178_LVDS_1080P_30FPS
:

3487 
SONY_IMX185_MIPI_1080P_30FPS
:

3488 
SONY_IMX117_LVDS_1080P_30FPS
:

3489 
APTINA_AR0230_HISPI_1080P_30FPS
:

3490 *
≥nSize
 = 
PIC_HD1080
;

3492 
APTINA_AR0330_MIPI_1536P_25FPS
:

3493 
SONY_IMX123_LVDS_QXGA_30FPS
:

3494 *
≥nSize
 = 
PIC_QXGA
;

3496 
APTINA_AR0330_MIPI_1296P_25FPS
:

3497 *
≥nSize
 = 
PIC_2304x1296
;

3499 
OMNIVISION_OV4689_MIPI_4M_30FPS
:

3500 *
≥nSize
 = 
PIC_2592x1520
;

3502 
SONY_IMX178_LVDS_5M_30FPS
:

3503 
OMNIVISION_OV5658_MIPI_5M_30FPS
:

3504 *
≥nSize
 = 
PIC_5M
;

3511  
s32Rë
;

3516 #ifde‡
__˝lu•lus


3517 #i‡
__˝lu•lus


	@sample/common/sample_comm_vo.c

9 #ifde‡
__˝lu•lus


10 #i‡
__˝lu•lus


15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/time.h
>

23 
	~<f˙é.h
>

24 
	~<î∫o.h
>

25 
	~<±hªad.h
>

26 
	~<m©h.h
>

27 
	~<uni°d.h
>

28 
	~<sig«l.h
>

30 
	~"ßm∂e_comm.h
"

33 
HI_S32
 
SAMPLE_COMM_VO_GëWH
(
VO_INTF_SYNC_E
 
íI¡fSync
, 
HI_U32
* 
pu32W
, HI_U32* 
pu32H
, HI_U32* 
pu32Frm
)

35 
íI¡fSync
)

37 
VO_OUTPUT_PAL
 :

38 *
pu32W
 = 720;

39 *
pu32H
 = 576;

40 *
pu32Frm
 = 25;

42 
VO_OUTPUT_NTSC
 :

43 *
pu32W
 = 720;

44 *
pu32H
 = 480;

45 *
pu32Frm
 = 30;

47 
VO_OUTPUT_576P50
 :

48 *
pu32W
 = 720;

49 *
pu32H
 = 576;

50 *
pu32Frm
 = 50;

52 
VO_OUTPUT_480P60
 :

53 *
pu32W
 = 720;

54 *
pu32H
 = 480;

55 *
pu32Frm
 = 60;

57 
VO_OUTPUT_800x600_60
:

58 *
pu32W
 = 800;

59 *
pu32H
 = 600;

60 *
pu32Frm
 = 60;

62 
VO_OUTPUT_720P50
 :

63 *
pu32W
 = 1280;

64 *
pu32H
 = 720;

65 *
pu32Frm
 = 50;

67 
VO_OUTPUT_720P60
 :

68 *
pu32W
 = 1280;

69 *
pu32H
 = 720;

70 *
pu32Frm
 = 60;

72 
VO_OUTPUT_1080I50
 :

73 *
pu32W
 = 1920;

74 *
pu32H
 = 1080;

75 *
pu32Frm
 = 50;

77 
VO_OUTPUT_1080I60
 :

78 *
pu32W
 = 1920;

79 *
pu32H
 = 1080;

80 *
pu32Frm
 = 60;

82 
VO_OUTPUT_1080P24
 :

83 *
pu32W
 = 1920;

84 *
pu32H
 = 1080;

85 *
pu32Frm
 = 24;

87 
VO_OUTPUT_1080P25
 :

88 *
pu32W
 = 1920;

89 *
pu32H
 = 1080;

90 *
pu32Frm
 = 25;

92 
VO_OUTPUT_1080P30
 :

93 *
pu32W
 = 1920;

94 *
pu32H
 = 1080;

95 *
pu32Frm
 = 30;

97 
VO_OUTPUT_1080P50
 :

98 *
pu32W
 = 1920;

99 *
pu32H
 = 1080;

100 *
pu32Frm
 = 50;

102 
VO_OUTPUT_1080P60
 :

103 *
pu32W
 = 1920;

104 *
pu32H
 = 1080;

105 *
pu32Frm
 = 60;

107 
VO_OUTPUT_1024x768_60
:

108 *
pu32W
 = 1024;

109 *
pu32H
 = 768;

110 *
pu32Frm
 = 60;

112 
VO_OUTPUT_1280x1024_60
:

113 *
pu32W
 = 1280;

114 *
pu32H
 = 1024;

115 *
pu32Frm
 = 60;

117 
VO_OUTPUT_1366x768_60
:

118 *
pu32W
 = 1366;

119 *
pu32H
 = 768;

120 *
pu32Frm
 = 60;

122 
VO_OUTPUT_1440x900_60
:

123 *
pu32W
 = 1440;

124 *
pu32H
 = 900;

125 *
pu32Frm
 = 60;

127 
VO_OUTPUT_1280x800_60
:

128 *
pu32W
 = 1280;

129 *
pu32H
 = 800;

130 *
pu32Frm
 = 60;

132 
VO_OUTPUT_1600x1200_60
:

133 *
pu32W
 = 1600;

134 *
pu32H
 = 1200;

135 *
pu32Frm
 = 60;

137 
VO_OUTPUT_1680x1050_60
:

138 *
pu32W
 = 1680;

139 *
pu32H
 = 1050;

140 *
pu32Frm
 = 60;

142 
VO_OUTPUT_1920x1200_60
:

143 *
pu32W
 = 1920;

144 *
pu32H
 = 1200;

145 *
pu32Frm
 = 60;

147 
VO_OUTPUT_USER
 :

148 *
pu32W
 = 720;

149 *
pu32H
 = 576;

150 *
pu32Frm
 = 25;

153 
SAMPLE_PRT
("voÉnIntfSyncÇot support!\n");

154  
HI_FAILURE
;

156  
HI_SUCCESS
;

163 
HI_S32
 
SAMPLE_COMM_VO_MemC⁄fig
(
VO_DEV
 
VoDev
, 
HI_CHAR
* 
pcMmzName
)

165 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

166 
MPP_CHN_S
 
°MµChnVO
;

169 
°MµChnVO
.
íModId
 = 
HI_ID_VOU
;

170 
°MµChnVO
.
s32DevId
 = 
VoDev
;

171 
°MµChnVO
.
s32ChnId
 = 0;

172 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVO
, 
pcMmzName
);

173 i‡(
s32Rë
)

175 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

176  
HI_FAILURE
;

179  
HI_SUCCESS
;

182 
HI_S32
 
SAMPLE_COMM_VO_SèπDev
(
VO_DEV
 
VoDev
, 
VO_PUB_ATTR_S
* 
p°PubAâr
)

184 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

186 
s32Rë
 = 
HI_MPI_VO_SëPubAâr
(
VoDev
, 
p°PubAâr
);

187 i‡(
s32Rë
 !
HI_SUCCESS
)

189 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

190  
HI_FAILURE
;

193 
s32Rë
 = 
HI_MPI_VO_E«bÀ
(
VoDev
);

194 i‡(
s32Rë
 !
HI_SUCCESS
)

196 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

197  
HI_FAILURE
;

200  
s32Rë
;

203 
HI_S32
 
SAMPLE_COMM_VO_St›Dev
(
VO_DEV
 
VoDev
)

205 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

207 
s32Rë
 = 
HI_MPI_VO_DißbÀ
(
VoDev
);

208 i‡(
s32Rë
 !
HI_SUCCESS
)

210 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

211  
HI_FAILURE
;

213  
s32Rë
;

216 
HI_S32
 
SAMPLE_COMM_VO_SèπLayî
(
VO_LAYER
 
VoLayî
, c⁄° 
VO_VIDEO_LAYER_ATTR_S
* 
p°LayîAâr
, 
HI_BOOL
 
bVgsBy∑ss
)

218 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

220 i‡(!
bVgsBy∑ss
)

222 
s32Rë
 = 
HI_MPI_VO_SëDi•BufLí
(
VoLayî
, 3);

223 i‡(
s32Rë
 !
HI_SUCCESS
)

225 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

226  
HI_FAILURE
;

229 
s32Rë
 = 
HI_MPI_VO_SëVideoLayîAâr
(
VoLayî
, 
p°LayîAâr
);

230 i‡(
s32Rë
 !
HI_SUCCESS
)

232 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

233  
HI_FAILURE
;

236 
s32Rë
 = 
HI_MPI_VO_E«bÀVideoLayî
(
VoLayî
);

237 i‡(
s32Rë
 !
HI_SUCCESS
)

239 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

240  
HI_FAILURE
;

243  
s32Rë
;

246 
HI_S32
 
SAMPLE_COMM_VO_St›Layî
(
VO_LAYER
 
VoLayî
)

248 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

250 
s32Rë
 = 
HI_MPI_VO_DißbÀVideoLayî
(
VoLayî
);

251 i‡(
s32Rë
 !
HI_SUCCESS
)

253 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

254  
HI_FAILURE
;

256  
s32Rë
;

259 
HI_S32
 
SAMPLE_COMM_VO_SèπChn
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
)

261 
HI_S32
 
i
;

262 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

263 
HI_U32
 
u32WndNum
 = 0;

264 
HI_U32
 
u32Squ¨e
 = 0;

265 
HI_U32
 
u32Width
 = 0;

266 
HI_U32
 
u32Height
 = 0;

267 
VO_CHN_ATTR_S
 
°ChnAâr
;

268 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

270 
íMode
)

272 
VO_MODE_1MUX
:

273 
u32WndNum
 = 1;

274 
u32Squ¨e
 = 1;

276 
VO_MODE_2MUX
:

277 
u32WndNum
 = 2;

278 
u32Squ¨e
 = 2;

281 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

282  
HI_FAILURE
;

285 
s32Rë
 = 
HI_MPI_VO_GëVideoLayîAâr
(
VoLayî
, &
°LayîAâr
);

286 i‡(
s32Rë
 !
HI_SUCCESS
)

288 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

289  
HI_FAILURE
;

291 
u32Width
 = 
°LayîAâr
.
°ImageSize
.u32Width;

292 
u32Height
 = 
°LayîAâr
.
°ImageSize
.u32Height;

293 
¥ötf
("u32Width:%d, u32Squ¨e:%d\n", 
u32Width
, 
u32Squ¨e
);

294 
i
 = 0; i < 
u32WndNum
; i++)

296 
°ChnAâr
.
°Re˘
.
s32X
 = 
ALIGN_BACK
((
u32Width
 / 
u32Squ¨e
Ë* (
i
 % u32Square), 2);

297 
°ChnAâr
.
°Re˘
.
s32Y
 = 
ALIGN_BACK
((
u32Height
 / 
u32Squ¨e
Ë* (
i
 / u32Square), 2);

298 
°ChnAâr
.
°Re˘
.
u32Width
 = 
ALIGN_BACK
(u32Width / 
u32Squ¨e
, 2);

299 
°ChnAâr
.
°Re˘
.
u32Height
 = 
ALIGN_BACK
(u32Heighà/ 
u32Squ¨e
, 2);

300 
°ChnAâr
.
u32Pri‹ôy
 = 0;

301 
°ChnAâr
.
bDeÊickî
 = 
HI_FALSE
;

303 
s32Rë
 = 
HI_MPI_VO_SëChnAâr
(
VoLayî
, 
i
, &
°ChnAâr
);

304 i‡(
s32Rë
 !
HI_SUCCESS
)

306 
¥ötf
("%s(%d):failed with %#x!\n", \

307 
__FUNCTION__
, 
__LINE__
, 
s32Rë
);

308  
HI_FAILURE
;

311 
s32Rë
 = 
HI_MPI_VO_E«bÀChn
(
VoLayî
, 
i
);

312 i‡(
s32Rë
 !
HI_SUCCESS
)

314 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

315  
HI_FAILURE
;

318  
HI_SUCCESS
;

321 
HI_S32
 
SAMPLE_COMM_VO_St›Chn
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
)

323 
HI_S32
 
i
;

324 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

325 
HI_U32
 
u32WndNum
 = 0;

327 
íMode
)

329 
VO_MODE_1MUX
:

331 
u32WndNum
 = 1;

334 
VO_MODE_2MUX
:

336 
u32WndNum
 = 2;

340 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

341  
HI_FAILURE
;

345 
i
 = 0; i < 
u32WndNum
; i++)

347 
s32Rë
 = 
HI_MPI_VO_DißbÀChn
(
VoLayî
, 
i
);

348 i‡(
s32Rë
 !
HI_SUCCESS
)

350 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

351  
HI_FAILURE
;

354  
s32Rë
;

357 
HI_S32
 
SAMPLE_COMM_VO_BödVpss
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
)

359 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

360 
MPP_CHN_S
 
°SrcChn
;

361 
MPP_CHN_S
 
°De°Chn
;

363 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

364 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

365 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

367 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

368 
°De°Chn
.
s32DevId
 = 
VoLayî
;

369 
°De°Chn
.
s32ChnId
 = 
VoChn
;

371 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

372 i‡(
s32Rë
 !
HI_SUCCESS
)

374 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

375  
HI_FAILURE
;

378  
s32Rë
;

380 
HI_S32
 
SAMPLE_COMM_VO_UnBödVpss
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
)

382 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

383 
MPP_CHN_S
 
°SrcChn
;

384 
MPP_CHN_S
 
°De°Chn
;

386 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

387 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

388 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

390 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

391 
°De°Chn
.
s32DevId
 = 
VoLayî
;

392 
°De°Chn
.
s32ChnId
 = 
VoChn
;

394 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

395 i‡(
s32Rë
 !
HI_SUCCESS
)

397 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

398  
HI_FAILURE
;

400  
s32Rë
;

403 
HI_S32
 
SAMPLE_COMM_VO_BödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VI_CHN
 
ViChn
)

405 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

407 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

408 
°SrcChn
.
s32DevId
 = 0;

409 
°SrcChn
.
s32ChnId
 = 
ViChn
;

411 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

412 
°De°Chn
.
s32ChnId
 = 
VoChn
;

413 
°De°Chn
.
s32DevId
 = 
VoLayî
;

415  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

418 
HI_S32
 
SAMPLE_COMM_VO_UnBödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
)

420 
MPP_CHN_S
 
°De°Chn
;

422 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

423 
°De°Chn
.
s32DevId
 = 
VoLayî
;

424 
°De°Chn
.
s32ChnId
 = 
VoChn
;

426  
HI_MPI_SYS_UnBöd
(
NULL
, &
°De°Chn
);

432 #ifde‡
__˝lu•lus


433 #i‡
__˝lu•lus


	@sample/common/sample_comm_vpss.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/pﬁl.h
>

21 
	~<sys/time.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<±hªad.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

27 
	~<sig«l.h
>

29 
	~"ßm∂e_comm.h
"

34 
HI_S32
 
SAMPLE_COMM_VPSS_MemC⁄fig
()

36 
HI_CHAR
* 
pcMmzName
;

37 
MPP_CHN_S
 
°MµChnVpss
;

38 
HI_S32
 
s32Rë
, 
i
;

41 
i
 = 0; i < 64; i++)

43 
°MµChnVpss
.
íModId
 = 
HI_ID_VPSS
;

44 
°MµChnVpss
.
s32DevId
 = 
i
;

45 
°MµChnVpss
.
s32ChnId
 = 0;

47 i‡(0 =(
i
 % 2))

49 
pcMmzName
 = 
NULL
;

53 
pcMmzName
 = "ddr1";

57 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVpss
, 
pcMmzName
);

58 i‡(
HI_SUCCESS
 !
s32Rë
)

60 
SAMPLE_PRT
("Vpss HI_MPI_SYS_SetMemConf ERR !\n");

61  
HI_FAILURE
;

64  
HI_SUCCESS
;

68 
HI_S32
 
SAMPLE_COMM_VPSS_SèπGroup
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
* 
p°VpssGΩAâr
)

70 
HI_S32
 
s32Rë
;

71 
VPSS_GRP_PARAM_S
 
°VpssP¨am
;

73 i‡(
VpssGΩ
 < 0 || VpssGΩ > 
VPSS_MAX_GRP_NUM
)

75 
¥ötf
("VpssGΩ%d i†ouào‡øng. \n", 
VpssGΩ
);

76  
HI_FAILURE
;

79 i‡(
HI_NULL
 =
p°VpssGΩAâr
)

81 
¥ötf
("nuŒÖå,löe%d. \n", 
__LINE__
);

82  
HI_FAILURE
;

85 
s32Rë
 = 
HI_MPI_VPSS_Cª©eGΩ
(
VpssGΩ
, 
p°VpssGΩAâr
);

86 i‡(
s32Rë
 !
HI_SUCCESS
)

88 
SAMPLE_PRT
("HI_MPI_VPSS_Cª©eGΩ faûed wôh %#x!\n", 
s32Rë
);

89  
HI_FAILURE
;

93 
s32Rë
 = 
HI_MPI_VPSS_GëGΩP¨am
(
VpssGΩ
, &
°VpssP¨am
);

94 i‡(
s32Rë
 !
HI_SUCCESS
)

96 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

97  
HI_FAILURE
;

101 
s32Rë
 = 
HI_MPI_VPSS_SëGΩP¨am
(
VpssGΩ
, &
°VpssP¨am
);

102 i‡(
s32Rë
 !
HI_SUCCESS
)

104 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

105  
HI_FAILURE
;

108 
s32Rë
 = 
HI_MPI_VPSS_SèπGΩ
(
VpssGΩ
);

109 i‡(
s32Rë
 !
HI_SUCCESS
)

111 
SAMPLE_PRT
("HI_MPI_VPSS_SèπGΩ faûed wôh %#x\n", 
s32Rë
);

112  
HI_FAILURE
;

115  
HI_SUCCESS
;

119 
HI_S32
 
SAMPLE_COMM_VPSS_E«bÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
,

120 
VPSS_CHN_ATTR_S
* 
p°VpssChnAâr
,

121 
VPSS_CHN_MODE_S
* 
p°VpssChnMode
,

122 
VPSS_EXT_CHN_ATTR_S
* 
p°VpssExtChnAâr
)

124 
HI_S32
 
s32Rë
;

126 i‡(
VpssGΩ
 < 0 || VpssGΩ > 
VPSS_MAX_GRP_NUM
)

128 
¥ötf
("VpssGΩ%d i†ouào‡øng[0,%d]. \n", 
VpssGΩ
, 
VPSS_MAX_GRP_NUM
);

129  
HI_FAILURE
;

132 i‡(
VpssChn
 < 0 || VpssCh¿> 
VPSS_MAX_CHN_NUM
)

134 
¥ötf
("VpssChn%d i†ouào‡øng[0,%d]. \n", 
VpssChn
, 
VPSS_MAX_CHN_NUM
);

135  
HI_FAILURE
;

138 i‡(
HI_NULL
 =
p°VpssChnAâr
 && HI_NULL =
p°VpssExtChnAâr
)

140 
¥ötf
("nuŒÖå,löe%d. \n", 
__LINE__
);

141  
HI_FAILURE
;

144 i‡(
VpssChn
 < 
VPSS_MAX_PHY_CHN_NUM
)

146 
s32Rë
 = 
HI_MPI_VPSS_SëChnAâr
(
VpssGΩ
, 
VpssChn
, 
p°VpssChnAâr
);

147 i‡(
s32Rë
 !
HI_SUCCESS
)

149 
SAMPLE_PRT
("HI_MPI_VPSS_SëChnAâ∏Áûed wôh %#x\n", 
s32Rë
);

150  
HI_FAILURE
;

155 
s32Rë
 = 
HI_MPI_VPSS_SëExtChnAâr
(
VpssGΩ
, 
VpssChn
, 
p°VpssExtChnAâr
);

156 i‡(
s32Rë
 !
HI_SUCCESS
)

158 
SAMPLE_PRT
("%†Áûed wôh %#x\n", 
__FUNCTION__
, 
s32Rë
);

159  
HI_FAILURE
;

163 i‡(
VpssChn
 < 
VPSS_MAX_PHY_CHN_NUM
 && 
HI_NULL
 !
p°VpssChnMode
)

165 
s32Rë
 = 
HI_MPI_VPSS_SëChnMode
(
VpssGΩ
, 
VpssChn
, 
p°VpssChnMode
);

166 i‡(
s32Rë
 !
HI_SUCCESS
)

168 
SAMPLE_PRT
("%†Áûed wôh %#x\n", 
__FUNCTION__
, 
s32Rë
);

169  
HI_FAILURE
;

173 
s32Rë
 = 
HI_MPI_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
);

174 i‡(
s32Rë
 !
HI_SUCCESS
)

176 
SAMPLE_PRT
("HI_MPI_VPSS_E«bÀCh¿Áûed wôh %#x\n", 
s32Rë
);

177  
HI_FAILURE
;

180  
HI_SUCCESS
;

183 
HI_S32
 
SAMPLE_COMM_VPSS_St›Group
(
VPSS_GRP
 
VpssGΩ
)

185 
HI_S32
 
s32Rë
;

187 i‡(
VpssGΩ
 < 0 || VpssGΩ > 
VPSS_MAX_GRP_NUM
)

189 
¥ötf
("VpssGΩ%d i†ouào‡øng[0,%d]. \n", 
VpssGΩ
, 
VPSS_MAX_GRP_NUM
);

190  
HI_FAILURE
;

193 
s32Rë
 = 
HI_MPI_VPSS_St›GΩ
(
VpssGΩ
);

194 i‡(
s32Rë
 !
HI_SUCCESS
)

196 
SAMPLE_PRT
("%†Áûed wôh %#x\n", 
__FUNCTION__
, 
s32Rë
);

197  
HI_FAILURE
;

200 
s32Rë
 = 
HI_MPI_VPSS_De°royGΩ
(
VpssGΩ
);

201 i‡(
s32Rë
 !
HI_SUCCESS
)

203 
SAMPLE_PRT
("%†Áûed wôh %#x\n", 
__FUNCTION__
, 
s32Rë
);

204  
HI_FAILURE
;

207  
HI_SUCCESS
;

210 
HI_S32
 
SAMPLE_COMM_VPSS_DißbÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
)

212 
HI_S32
 
s32Rë
;

214 i‡(
VpssGΩ
 < 0 || VpssGΩ > 
VPSS_MAX_GRP_NUM
)

216 
¥ötf
("VpssGΩ%d i†ouào‡øng[0,%d]. \n", 
VpssGΩ
, 
VPSS_MAX_GRP_NUM
);

217  
HI_FAILURE
;

220 i‡(
VpssChn
 < 0 || VpssCh¿> 
VPSS_MAX_CHN_NUM
)

222 
¥ötf
("VpssChn%d i†ouào‡øng[0,%d]. \n", 
VpssChn
, 
VPSS_MAX_CHN_NUM
);

223  
HI_FAILURE
;

226 
s32Rë
 = 
HI_MPI_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

227 i‡(
s32Rë
 !
HI_SUCCESS
)

229 
SAMPLE_PRT
("%†Áûed wôh %#x\n", 
__FUNCTION__
, 
s32Rë
);

230  
HI_FAILURE
;

233  
HI_SUCCESS
;

241 
HI_S32
 
SAMPLE_COMM_VPSS_Sèπ
(HI_S32 
s32GΩC¡
, 
SIZE_S
* 
p°Size
, HI_S32 
s32ChnC¡
, 
VPSS_GRP_ATTR_S
* 
p°VpssGΩAâr
)

243 
VPSS_GRP
 
VpssGΩ
;

244 
VPSS_CHN
 
VpssChn
;

245 
VPSS_GRP_ATTR_S
 
°GΩAâr
 = {0};

246 
VPSS_CHN_ATTR_S
 
°ChnAâr
 = {0};

247 
VPSS_GRP_PARAM_S
 
°VpssP¨am
 = {0};

248 
HI_S32
 
s32Rë
;

249 
HI_S32
 
i
, 
j
;

253 i‡(
NULL
 =
p°VpssGΩAâr
)

255 
°GΩAâr
.
u32MaxW
 = 
p°Size
->
u32Width
;

256 
°GΩAâr
.
u32MaxH
 = 
p°Size
->
u32Height
;

257 
°GΩAâr
.
bIeEn
 = 
HI_FALSE
;

258 
°GΩAâr
.
bNrEn
 = 
HI_TRUE
;

259 
°GΩAâr
.
bHi°En
 = 
HI_FALSE
;

260 
°GΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

261 
°GΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

265 
mem˝y
(&
°GΩAâr
, 
p°VpssGΩAâr
, (
VPSS_GRP_ATTR_S
));

269 
i
 = 0; i < 
s32GΩC¡
; i++)

271 
VpssGΩ
 = 
i
;

273 
s32Rë
 = 
HI_MPI_VPSS_Cª©eGΩ
(
VpssGΩ
, &
°GΩAâr
);

274 i‡(
s32Rë
 !
HI_SUCCESS
)

276 
SAMPLE_PRT
("HI_MPI_VPSS_Cª©eGΩ faûed wôh %#x!\n", 
s32Rë
);

277  
HI_FAILURE
;

281 
s32Rë
 = 
HI_MPI_VPSS_GëGΩP¨am
(
VpssGΩ
, &
°VpssP¨am
);

282 i‡(
s32Rë
 !
HI_SUCCESS
)

284 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

285  
HI_FAILURE
;

288 
s32Rë
 = 
HI_MPI_VPSS_SëGΩP¨am
(
VpssGΩ
, &
°VpssP¨am
);

289 i‡(
s32Rë
 !
HI_SUCCESS
)

291 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

292  
HI_FAILURE
;

296 
j
 = 0; j < 
s32ChnC¡
; j++)

298 
VpssChn
 = 
j
;

300 
°ChnAâr
.
bSpEn
 = 
HI_FALSE
;

301 
°ChnAâr
.
bB‹dîEn
 = 
HI_TRUE
;

302 
°ChnAâr
.
°B‹dî
.
u32Cﬁ‹
 = 0xff00;

303 
°ChnAâr
.
°B‹dî
.
u32Le·Width
 = 2;

304 
°ChnAâr
.
°B‹dî
.
u32RightWidth
 = 2;

305 
°ChnAâr
.
°B‹dî
.
u32T›Width
 = 2;

306 
°ChnAâr
.
°B‹dî
.
u32BŸtomWidth
 = 2;

308 
s32Rë
 = 
HI_MPI_VPSS_SëChnAâr
(
VpssGΩ
, 
VpssChn
, &
°ChnAâr
);

309 i‡(
s32Rë
 !
HI_SUCCESS
)

311 
SAMPLE_PRT
("HI_MPI_VPSS_SëChnAâ∏Áûed wôh %#x\n", 
s32Rë
);

312  
HI_FAILURE
;

315 
s32Rë
 = 
HI_MPI_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
);

316 i‡(
s32Rë
 !
HI_SUCCESS
)

318 
SAMPLE_PRT
("HI_MPI_VPSS_E«bÀCh¿Áûed wôh %#x\n", 
s32Rë
);

319  
HI_FAILURE
;

324 
s32Rë
 = 
HI_MPI_VPSS_SèπGΩ
(
VpssGΩ
);

325 i‡(
s32Rë
 !
HI_SUCCESS
)

327 
SAMPLE_PRT
("HI_MPI_VPSS_SèπGΩ faûed wôh %#x\n", 
s32Rë
);

328  
HI_FAILURE
;

332  
HI_SUCCESS
;

338 
HI_S32
 
SAMPLE_COMM_VPSS_St›
(HI_S32 
s32GΩC¡
, HI_S32 
s32ChnC¡
)

340 
HI_S32
 
i
, 
j
;

341 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

342 
VPSS_GRP
 
VpssGΩ
;

343 
VPSS_CHN
 
VpssChn
;

345 
i
 = 0; i < 
s32GΩC¡
; i++)

347 
VpssGΩ
 = 
i
;

348 
s32Rë
 = 
HI_MPI_VPSS_St›GΩ
(
VpssGΩ
);

349 i‡(
s32Rë
 !
HI_SUCCESS
)

351 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

352  
HI_FAILURE
;

354 
j
 = 0; j < 
s32ChnC¡
; j++)

356 
VpssChn
 = 
j
;

357 
s32Rë
 = 
HI_MPI_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

358 i‡(
s32Rë
 !
HI_SUCCESS
)

360 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

361  
HI_FAILURE
;

365 
s32Rë
 = 
HI_MPI_VPSS_De°royGΩ
(
VpssGΩ
);

366 i‡(
s32Rë
 !
HI_SUCCESS
)

368 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

369  
HI_FAILURE
;

373  
HI_SUCCESS
;

376 #ifde‡
__˝lu•lus


377 #i‡
__˝lu•lus


	@sample/detect/ive_detect.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"ßm∂e_comm.h
"

4 
	~"hi_comm_ive.h
"

5 
	~"hi_ive.h
"

6 
	~"mpi_ive.h
"

7 
	~"libdëe˘_t.h
"

8 
	~<›ícv2/›ícv.hµ
>

11 
	#WIDTH
 480

	)

12 
	#HEIGHT
 270

	)

14 
PIC_SIZE_E
 
	gíSize
 = 
PIC_HD1080
;

15 c⁄° 
VI_CHN
 
	gExtChn
 = 
VIU_EXT_CHN_START
;

16 c⁄° 
VI_CHN
 
	gViChn
 = 0;

17 
VIDEO_NORM_E
 
	ggs_íN‹m
 = 
VIDEO_ENCODING_MODE_NTSC
;

19 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

21 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

22 
VB_BLK
 
hBlock
;

23 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

24 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

25 
HI_U32
 
u32BlkSize
, 
u32D°BlkSize
;

26 
VIDEO_FRAME_INFO_S
 
FømeInfo
;

27 
IVE_HANDLE
 
IveH™dÀ
;

28 
IVE_SRC_IMAGE_S
 
°Src
;

29 
IVE_DST_IMAGE_S
 
°D°
;

30 
IVE_CSC_CTRL_S
 
°CscCål
;

31 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

32 
HI_BOOL
 
bFöish
;

33 
I∂Image
 *
ùlImage
;

34 
FILE
 *
Â
,*
Â2
;

36 
k
=1;

38 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

39 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

40 
	`SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
);

41 
u32BlkSize
 = 
	`SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,

42 
íSize
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

43 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

44 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 12;

46 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

47 i‡(
HI_SUCCESS
 !
s32Rë
)

49 
	`¥ötf
("sy°em inô faûed wôhÉº codê%#x!\n", 
s32Rë
 );

52 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

53 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

54 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

55 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

57 
s32Rë
 = 
	`SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

58 i‡(
HI_SUCCESS
 !
s32Rë
)

60 
	`¥ötf
("°¨àvòÁûed wôhÉº codê%#x!\n", 
s32Rë
);

64 
ùlImage
 = 
	`cvCª©eImageHódî
(
	`cvSize
(
WIDTH
,
HEIGHT
), 
IPL_DEPTH_8U
, 3);

66 
°ExtChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

67 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

68 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 
WIDTH
;

69 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 
HEIGHT
;

70 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

71 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

72 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

73 
	`HI_MPI_VI_DißbÀChn
(
ExtChn
);

74 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
ExtChn
, &
°ExtChnAâr
);

75 i‡(
HI_SUCCESS
 !
s32Rë
)

77 
	`¥ötf
("HI_MPI_VI_SëExtChnAâ∏Áûed wôhÉº codê%#x\n", 
s32Rë
);

80 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(
ExtChn
, 1);

81 i‡(
HI_SUCCESS
 !
s32Rë
)

83 
	`¥ötf
("HI_MPI_VI_SëFømeDïth faûed wôhÉº codê%#x\n", 
s32Rë
);

86 
°Src
.
íTy≥
 = 
IVE_IMAGE_TYPE_YUV420SP
;

88 
°D°
.
íTy≥
 = 
IVE_IMAGE_TYPE_U8C3_PACKAGE
;

89 
°CscCål
.
íMode
 = 
IVE_CSC_MODE_PIC_BT709_YUV2RGB
;

92 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
ExtChn
);

93 i‡(
HI_SUCCESS
 !
s32Rë
)

95 
	`¥ötf
("HI_MPI_VI_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

99 
	`¥ötf
("begin\n");

100 
dë_t
 *
pdë
 = 
	`dë_›í
("bd_detect_trace.config");

101 
k
)

103 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
ExtChn
, &
FømeInfo
, -1);

104 if(
HI_SUCCESS
 !
s32Rë
)

106 
	`¥ötf
("HI_MPI_VI_GëFømêÁûed wôhÉº codê%#x!\n",
s32Rë
);

108 
	`¥ötf
("get frame!\n");

110 
u32D°BlkSize
 = 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 3;

111 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
°D°
.
u32PhyAddr
[0],(**Ë&°D°.
pu8VúAddr
[0], "u£r", 
HI_NULL
, 
u32D°BlkSize
);

112 
	`HI_MPI_SYS_MmzFlushCache
(
°D°
.
u32PhyAddr
[0], (*)°D°.
pu8VúAddr
[0], 
u32D°BlkSize
);

114 
°D°
.
u32PhyAddr
[1] = stD°.u32PhyAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

115 
°D°
.
u32PhyAddr
[2] = stD°.u32PhyAddr[1] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

117 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(°D°.
u32PhyAddr
[0], 
u32D°BlkSize
);

118 
°D°
.
pu8VúAddr
[1] = stD°.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

119 
°D°
.
pu8VúAddr
[2] = stD°.pu8VúAddr[1] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

121 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

122 
°D°
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

123 
°D°
.
u16Såide
[2] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

125 
°D°
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

126 
°D°
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

129 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(°D°.
u32PhyAddr
[0], 
u32D°BlkSize
);

130 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

131 
°D°
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

132 
°D°
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

135 
°Src
.
u32PhyAddr
[0] = 
FømeInfo
.
°VFøme
.u32PhyAddr[0];

136 
°Src
.
u32PhyAddr
[1] = 
FømeInfo
.
°VFøme
.u32PhyAddr[1];

137 
°Src
.
u32PhyAddr
[2] = 
FømeInfo
.
°VFøme
.u32PhyAddr[2];

139 
°Src
.
pu8VúAddr
[0] = (
HI_U8
*)
	`HI_MPI_SYS_Mm≠
(
FømeInfo
.
°VFøme
.
u32PhyAddr
[0], 
u32D°BlkSize
 / 2);

140 
°Src
.
pu8VúAddr
[1] = stSrc.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

141 
°Src
.
pu8VúAddr
[2] = stSrc.pu8VirAddr[1] + 1;

144 
°Src
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

145 
°Src
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

146 
°Src
.
u16Såide
[2] = 0;

148 
°Src
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

149 
°Src
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

152 
k
 = 0; k < 720 * 576 * 3 / 2;k++)

153 *(
°Src
.
pu8VúAddr
[0] + 
k
) = 130;

154 
k
 = 0;

156 
s32Rë
 = 
	`HI_MPI_IVE_CSC
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°CscCål
, 
bIn°™t
);

157 if(
s32Rë
 !
HI_SUCCESS
)

159 
	`¥ötf
("HI_MPI_IVE_CSC faûed wôhÉº‹ codê%#x\n",
s32Rë
);

162 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
HI_TRUE
);

163 if(
s32Rë
 !
HI_SUCCESS
)

165 
	`¥ötf
("HI_MPI_IVE_Quîy faûed wôhÉº‹ codê%#x\n",
s32Rë
);

169 
Â
 = 
	`f›í
("image.rgb","wb");

170 
	`fwrôe
(
°D°
.
pu8VúAddr
[0], 
WIDTH
 * 
HEIGHT
 * 3, 1, 
Â
);

171 
	`f˛o£
(
Â
);

173 
Â2
 = 
	`f›í
("image2.yuv","wb");

174 
	`fwrôe
(
°Src
.
pu8VúAddr
[0], 
WIDTH
 * 
HEIGHT
 * 3 / 2, 1, 
Â2
);

175 
	`f˛o£
(
Â2
);

181 *
°r
 = 
	`dë_dëe˘
(
pdë
, 
HEIGHT
, 
WIDTH
, (*)
°D°
.
pu8VúAddr
[0]);

182 
	`¥ötf
("%s\n",
°r
);

183 
	`HI_MPI_SYS_Munm≠
(
°D°
.
pu8VúAddr
[0], 
u32D°BlkSize
);

184 
	`HI_MPI_SYS_Munm≠
(
°Src
.
pu8VúAddr
[0], 
u32D°BlkSize
 / 2);

185 
	`HI_MPI_SYS_MmzFªe
(
°D°
.
u32PhyAddr
[0], 
NULL
);

186 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfo
);

188 
	`dë_˛o£
(
pdë
);

189 
	}
}

	@sample/detect2/ive_detect.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"ßm∂e_comm.h
"

4 
	~"hi_comm_ive.h
"

5 
	~"hi_ive.h
"

6 
	~"mpi_ive.h
"

7 
	~"dëe˘_maö.h
"

8 
	~<›ícv2/›ícv.hµ
>

11 
	#WIDTH
 480

	)

12 
	#HEIGHT
 270

	)

14 
PIC_SIZE_E
 
	gíSize
 = 
PIC_HD1080
;

15 c⁄° 
VI_CHN
 
	gExtChn
 = 
VIU_EXT_CHN_START
;

16 c⁄° 
VI_CHN
 
	gViChn
 = 0;

17 
VIDEO_NORM_E
 
	ggs_íN‹m
 = 
VIDEO_ENCODING_MODE_NTSC
;

19 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

21 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

22 
VB_BLK
 
hBlock
;

23 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

24 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

25 
HI_U32
 
u32BlkSize
, 
u32D°BlkSize
;

26 
VIDEO_FRAME_INFO_S
 
FømeInfo
;

27 
IVE_HANDLE
 
IveH™dÀ
;

28 
IVE_SRC_IMAGE_S
 
°Src
;

29 
IVE_DST_IMAGE_S
 
°D°
;

30 
IVE_CSC_CTRL_S
 
°CscCål
;

31 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

32 
HI_BOOL
 
bFöish
;

33 
I∂Image
 *
ùlImage
;

35 
k
=1;

37 
°ExtChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

38 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

39 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 
WIDTH
;

40 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 
HEIGHT
;

41 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

42 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

43 
°ExtChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

44 
	`HI_MPI_VI_DißbÀChn
(
ExtChn
);

45 
s32Rë
 = 
	`HI_MPI_VI_SëExtChnAâr
(
ExtChn
, &
°ExtChnAâr
);

46 i‡(
HI_SUCCESS
 !
s32Rë
)

48 
	`¥ötf
("HI_MPI_VI_SëExtChnAâ∏Áûed wôhÉº codê%#x\n", 
s32Rë
);

51 
s32Rë
 = 
	`HI_MPI_VI_SëFømeDïth
(
ExtChn
, 1);

52 i‡(
HI_SUCCESS
 !
s32Rë
)

54 
	`¥ötf
("HI_MPI_VI_SëFømeDïth faûed wôhÉº codê%#x\n", 
s32Rë
);

57 
°Src
.
íTy≥
 = 
IVE_IMAGE_TYPE_YUV420SP
;

59 
°D°
.
íTy≥
 = 
IVE_IMAGE_TYPE_U8C3_PACKAGE
;

60 
°CscCål
.
íMode
 = 
IVE_CSC_MODE_PIC_BT709_YUV2RGB
;

63 
s32Rë
 = 
	`HI_MPI_VI_E«bÀChn
(
ExtChn
);

64 i‡(
HI_SUCCESS
 !
s32Rë
)

66 
	`¥ötf
("HI_MPI_VI_E«bÀCh¿Áûed wôhÉº codê%#x\n", 
s32Rë
);

70 
	`¥ötf
("begin\n");

71 *
pdë
 = 
	`dë_›í
("bd_detect_trace.config");

72 
k
)

74 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
ExtChn
, &
FømeInfo
, -1);

75 if(
HI_SUCCESS
 !
s32Rë
)

77 
	`¥ötf
("HI_MPI_VI_GëFømêÁûed wôhÉº codê%#x!\n",
s32Rë
);

79 
	`¥ötf
("get frame!\n");

81 
u32D°BlkSize
 = 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
 * 3;

82 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc_Cached
(&
°D°
.
u32PhyAddr
[0],(**Ë&°D°.
pu8VúAddr
[0], "u£r", 
HI_NULL
, 
u32D°BlkSize
);

83 
	`HI_MPI_SYS_MmzFlushCache
(
°D°
.
u32PhyAddr
[0], (*)°D°.
pu8VúAddr
[0], 
u32D°BlkSize
);

85 
°D°
.
pu8VúAddr
[0] = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(°D°.
u32PhyAddr
[0], 
u32D°BlkSize
);

86 
°D°
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

87 
°D°
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

88 
°D°
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

90 
°Src
.
u32PhyAddr
[0] = 
FømeInfo
.
°VFøme
.u32PhyAddr[0];

91 
°Src
.
u32PhyAddr
[1] = 
FømeInfo
.
°VFøme
.u32PhyAddr[1];

92 
°Src
.
u32PhyAddr
[2] = 
FømeInfo
.
°VFøme
.u32PhyAddr[2];

94 
°Src
.
pu8VúAddr
[0] = (
HI_U8
*)
	`HI_MPI_SYS_Mm≠
(
FømeInfo
.
°VFøme
.
u32PhyAddr
[0], 
u32D°BlkSize
 / 2);

95 
°Src
.
pu8VúAddr
[1] = stSrc.pu8VúAddr[0] + 
FømeInfo
.
°VFøme
.
u32Såide
[0] * FømeInfo.°VFøme.
u32Height
;

96 
°Src
.
pu8VúAddr
[2] = stSrc.pu8VirAddr[1] + 1;

99 
°Src
.
u16Såide
[1] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

100 
°Src
.
u16Såide
[0] = 
FømeInfo
.
°VFøme
.
u32Såide
[0];

101 
°Src
.
u16Såide
[2] = 0;

103 
°Src
.
u16Width
 = 
FømeInfo
.
°VFøme
.
u32Width
;

104 
°Src
.
u16Height
 = 
FømeInfo
.
°VFøme
.
u32Height
;

106 
s32Rë
 = 
	`HI_MPI_IVE_CSC
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°CscCål
, 
bIn°™t
);

107 if(
s32Rë
 !
HI_SUCCESS
)

109 
	`¥ötf
("HI_MPI_IVE_CSC faûed wôhÉº‹ codê%#x\n",
s32Rë
);

112 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
HI_TRUE
);

113 if(
s32Rë
 !
HI_SUCCESS
)

115 
	`¥ötf
("HI_MPI_IVE_Quîy faûed wôhÉº‹ codê%#x\n",
s32Rë
);

120 
	`HI_MPI_SYS_Munm≠
(
°D°
.
pu8VúAddr
[0], 
u32D°BlkSize
);

121 
	`HI_MPI_SYS_Munm≠
(
°Src
.
pu8VúAddr
[0], 
u32D°BlkSize
 / 2);

122 
	`HI_MPI_SYS_MmzFªe
(
°D°
.
u32PhyAddr
[0], 
NULL
);

123 
	`HI_MPI_VI_Rñó£Føme
(
ExtChn
, &
FømeInfo
);

125 
	`dë_˛o£
(
pdë
);

126 
	}
}

	@sample/hifb/sample_hifb.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/pﬁl.h
>

24 
	~<sys/time.h
>

25 
	~<f˙é.h
>

26 
	~<î∫o.h
>

27 
	~<±hªad.h
>

28 
	~<m©h.h
>

29 
	~<uni°d.h
>

30 
	~<sig«l.h
>

31 
	~<sys/mm™.h
>

33 
	~"ßm∂e_comm.h
"

35 
	~<löux/fb.h
>

36 
	~"hifb.h
"

37 
	~"lﬂdbmp.h
"

38 
	~"hi_tde_≠i.h
"

39 
	~"hi_tde_ty≥.h
"

40 
	~"hi_tde_îrcode.h
"

43 
VO_DEV
 
	gVoDev
 = 
SAMPLE_VO_DEV_DSD0
;

44 
HI_CHAR
 
	ggs_cExôFœg
 = 0;

45 
VO_INTF_TYPE_E
 
	gg_íVoI¡fTy≥
 = 
VO_INTF_CVBS
;

47 
fb_bôfõld
 
	gs_r16
 = {10, 5, 0};

48 
fb_bôfõld
 
	gs_g16
 = {5, 5, 0};

49 
fb_bôfõld
 
	gs_b16
 = {0, 5, 0};

50 
fb_bôfõld
 
	gs_a16
 = {15, 1, 0};

52 
	#WIDTH_1920
 1920

	)

53 
	#HEIGHT_1080
 1080

	)

54 
	#WIDTH_720
 720

	)

55 
	#HEIGHT_576
 576

	)

57 
	#SAMPLE_IMAGE_WIDTH
 300

	)

58 
	#SAMPLE_IMAGE_HEIGHT
 150

	)

59 
	#SAMPLE_IMAGE_SIZE
 (300*150*2)

	)

60 
	#SAMPLE_IMAGE_NUM
 20

	)

61 
	#HIFB_RED_1555
 0xFC00

	)

63 
	#GRAPHICS_LAYER_G0
 0

	)

65 
	#SAMPLE_IMAGE1_PATH
 "./ªs/%d.bmp"

	)

66 
	#SAMPLE_IMAGE2_PATH
 "./ªs/1280_720.bôs"

	)

68 
	shiPTHREAD_HIFB_SAMPLE


70 
HI_S32
 
	mfd
;

71 
HI_S32
 
	mœyî
;

72 
HI_S32
 
	m˘ækey
;

73 } 
	tPTHREAD_HIFB_SAMPLE_INFO
;

75 
HI_S32
 
	$SAMPLE_HIFB_LﬂdBmp
(c⁄° * 
fûíame
, 
HI_U8
* 
pAddr
)

77 
OSD_SURFACE_S
 
SurÁ˚
;

78 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

79 
OSD_BITMAPINFO
 
bmpInfo
;

81 i‡(
	`GëBmpInfo
(
fûíame
, &
bmpFûeHódî
, &
bmpInfo
) < 0)

83 
	`SAMPLE_PRT
("GetBmpInfoÉrr!\n");

84  
HI_FAILURE
;

87 
SurÁ˚
.
íCﬁ‹Fmt
 = 
OSD_COLOR_FMT_RGB1555
;

89 
	`Cª©eSurÁ˚ByBôM≠
(
fûíame
, &
SurÁ˚
, 
pAddr
);

91  
HI_SUCCESS
;

92 
	}
}

94 
HI_VOID
* 
	$SAMPLE_HIFB_PANDISPLAY
(* 
pD©a
)

96 
HI_S32
 
i
, 
x
, 
y
, 
s32Rë
;

97 
TDE_HANDLE
 
s32H™dÀ
;

98 
fb_fix_s¸ìnöfo
 
fix
;

99 
fb_v¨_s¸ìnöfo
 
v¨
;

100 
HI_U32
 
u32FixS¸ìnSåide
 = 0;

101 
HI_U8
* 
pShowS¸ìn
;

102 
HI_U8
* 
pHideS¸ìn
;

103 
HI_U32
 
u32HideS¸ìnPhy
 = 0;

104 
HI_U16
* 
pShowLöe
;

105 
HI_U16
* 
±emp
 = 
NULL
;

106 
HIFB_ALPHA_S
 
°AÕha
;

107 
HIFB_POINT_S
 
°Poöt
 = {0, 0};

108 
HI_CHAR
 
fûe
[12] = "/dev/fb0";

110 
HI_CHAR
 
image_«me
[
FILE_NAME_LEN
];

111 
HI_U8
* 
pD°
 = 
NULL
;

112 
HI_BOOL
 
bShow
;

113 
PTHREAD_HIFB_SAMPLE_INFO
* 
p°Info
;

114 
HIFB_COLORKEY_S
 
°Cﬁ‹Key
;

115 
TDE2_RECT_S
 
°SrcRe˘
, 
°D°Re˘
;

116 
TDE2_SURFACE_S
 
°Src
, 
°D°
;

117 
HI_U32
 
Phyaddr
;

118 
HI_VOID
* 
Vúaddr
;

119 
HI_U32
 
u32Width
;

120 
HI_U32
 
u32Height
;

122 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

124 
u32Width
 = 
WIDTH_720
;

125 
u32Height
 = 
HEIGHT_576
;

129 
u32Width
 = 
WIDTH_1920
;

130 
u32Height
 = 
HEIGHT_1080
;

133 i‡(
HI_NULL
 =
pD©a
)

135  
HI_NULL
;

137 
p°Info
 = (
PTHREAD_HIFB_SAMPLE_INFO
*)
pD©a
;

138 
p°Info
->
œyî
)

140 
GRAPHICS_LAYER_G0
 :

141 
	`°r˝y
(
fûe
, "/dev/fb0");

144 
	`°r˝y
(
fûe
, "/dev/fb0");

149 
p°Info
->
fd
 = 
	`›í
(
fûe
, 
O_RDWR
, 0);

150 i‡(
p°Info
->
fd
 < 0)

152 
	`SAMPLE_PRT
("›í %†Áûed!\n", 
fûe
);

153  
HI_NULL
;

156 
bShow
 = 
HI_FALSE
;

157 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_SHOW_HIFB
, &
bShow
) < 0)

159 
	`SAMPLE_PRT
("FBIOPUT_SHOW_HIFB failed!\n");

160  
HI_NULL
;

163 
p°Info
->
œyî
)

165 
GRAPHICS_LAYER_G0
:

167 
°Poöt
.
s32XPos
 = 0;

168 
°Poöt
.
s32YPos
 = 0;

175 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_SCREEN_ORIGIN_HIFB
, &
°Poöt
) < 0)

177 
	`SAMPLE_PRT
("set screen original showÖosition failed!\n");

178 
	`˛o£
(
p°Info
->
fd
);

179  
HI_NULL
;

183 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOGET_VSCREENINFO
, &
v¨
) < 0)

185 
	`SAMPLE_PRT
("Get variable screen info failed!\n");

186 
	`˛o£
(
p°Info
->
fd
);

187  
HI_NULL
;

196 
	`u¶ìp
(4 * 1000 * 1000);

197 
p°Info
->
œyî
)

199 
GRAPHICS_LAYER_G0
:

201 
v¨
.
xªs_vútuÆ
 = 
u32Width
;

202 
v¨
.
yªs_vútuÆ
 = 
u32Height
 * 2;

203 
v¨
.
xªs
 = 
u32Width
;

204 
v¨
.
yªs
 = 
u32Height
;

211 
v¨
.
å™•
 = 
s_a16
;

212 
v¨
.
ªd
 = 
s_r16
;

213 
v¨
.
gªí
 = 
s_g16
;

214 
v¨
.
blue
 = 
s_b16
;

215 
v¨
.
bôs_≥r_pixñ
 = 16;

216 
v¨
.
a˘iv©e
 = 
FB_ACTIVATE_NOW
;

219 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_VSCREENINFO
, &
v¨
) < 0)

221 
	`SAMPLE_PRT
("Put variable screen info failed!\n");

222 
	`˛o£
(
p°Info
->
fd
);

223  
HI_NULL
;

227 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOGET_FSCREENINFO
, &
fix
) < 0)

229 
	`SAMPLE_PRT
("Get fix screen info failed!\n");

230 
	`˛o£
(
p°Info
->
fd
);

231  
HI_NULL
;

233 
u32FixS¸ìnSåide
 = 
fix
.
löe_Àngth
;

236 
pShowS¸ìn
 = 
	`mm≠
(
HI_NULL
, 
fix
.
smem_Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
p°Info
->
fd
, 0);

237 i‡(
MAP_FAILED
 =
pShowS¸ìn
)

239 
	`SAMPLE_PRT
("mmap framebuffer failed!\n");

240 
	`˛o£
(
p°Info
->
fd
);

241  
HI_NULL
;

244 
	`mem£t
(
pShowS¸ìn
, 0x00, 
fix
.
smem_Àn
);

247 
bShow
 = 
HI_TRUE
;

248 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_SHOW_HIFB
, &
bShow
) < 0)

250 
	`SAMPLE_PRT
("FBIOPUT_SHOW_HIFB failed!\n");

251 
	`munm≠
(
pShowS¸ìn
, 
fix
.
smem_Àn
);

252 
	`˛o£
(
p°Info
->
fd
);

253  
HI_NULL
;

256 i‡(
GRAPHICS_LAYER_G0
 =
p°Info
->
œyî
)

258 
i
 = 0; i < 1; i++)

260 i‡(
i
 % 2)

262 
v¨
.
yoff£t
 = v¨.
yªs
;

266 
v¨
.
yoff£t
 = 0;

268 
±emp
 = (
HI_U16
*)(
pShowS¸ìn
 + 
v¨
.
yªs
 * 
u32FixS¸ìnSåide
 * (
i
 % 2));

269 
y
 = 100; y < 300; y++)

271 
x
 = 0; x < 300; x++)

273 *(
±emp
 + 
y
 * 
v¨
.
xªs
 + 
x
Ë
HIFB_RED_1555
;

276 
	`SAMPLE_PRT
("expected:ÅheÑed box willáppear!\n");

277 
	`¶ìp
(2);

278 
°AÕha
.
bAÕhaE«bÀ
 = 
HI_TRUE
;

279 
°AÕha
.
u8AÕha0
 = 0x0;

280 
°AÕha
.
u8AÕha1
 = 0x0;

281 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_ALPHA_HIFB
, &
°AÕha
) < 0)

283 
	`SAMPLE_PRT
("Setálpha failed!\n");

284 
	`˛o£
(
p°Info
->
fd
);

285  
HI_NULL
;

287 
	`SAMPLE_PRT
("expected:áfter setálpha = 0,ÅheÑed box will disappear!\n");

288 
	`¶ìp
(2);

290 
°AÕha
.
u8AÕha0
 = 0;

291 
°AÕha
.
u8AÕha1
 = 0xFF;

292 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_ALPHA_HIFB
, &
°AÕha
) < 0)

294 
	`SAMPLE_PRT
("Setálpha failed!\n");

295 
	`˛o£
(
p°Info
->
fd
);

296  
HI_NULL
;

298 
	`SAMPLE_PRT
("expected:after set setálpha = 0xFF,ÅheÑed box willáppearágain!\n");

299 
	`¶ìp
(2);

301 
	`SAMPLE_PRT
("expected:ÅheÑed box willÉrased by colorkey!\n");

302 
°Cﬁ‹Key
.
bKeyE«bÀ
 = 
HI_TRUE
;

303 
°Cﬁ‹Key
.
u32Key
 = 
HIFB_RED_1555
;

304 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_COLORKEY_HIFB
, &
°Cﬁ‹Key
);

305 i‡(
s32Rë
 < 0)

307 
	`SAMPLE_PRT
("FBIOPUT_COLORKEY_HIFB failed!\n");

308 
	`˛o£
(
p°Info
->
fd
);

309  
HI_NULL
;

311 
	`¶ìp
(2);

312 
	`SAMPLE_PRT
("expected:ÅheÑed box willáppearágain!\n");

313 
°Cﬁ‹Key
.
bKeyE«bÀ
 = 
HI_FALSE
;

314 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_COLORKEY_HIFB
, &
°Cﬁ‹Key
);

315 i‡(
s32Rë
 < 0)

317 
	`SAMPLE_PRT
("FBIOPUT_COLORKEY_HIFB failed!\n");

318 
	`˛o£
(
p°Info
->
fd
);

319  
HI_NULL
;

321 
	`¶ìp
(2);

326 
p°Info
->
˘ækey
)

331 i‡(
HI_FAILURE
 =
	`HI_MPI_SYS_MmzAŒoc
(&
Phyaddr
, ((**)&
Vúaddr
),

332 
NULL
, NULL, 
SAMPLE_IMAGE_WIDTH
 * 
SAMPLE_IMAGE_HEIGHT
 * 2))

334 
	`SAMPLE_PRT
("allocate memory (maxW*maxH*2 bytes) failed\n");

335 
	`˛o£
(
p°Info
->
fd
);

336  
HI_NULL
;

339 
s32Rë
 = 
	`HI_TDE2_O≥n
();

340 i‡(
s32Rë
 < 0)

342 
	`SAMPLE_PRT
("HI_TDE2_O≥¿Áûed :%d!\n", 
s32Rë
);

343 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

344 
	`˛o£
(
p°Info
->
fd
);

345  
HI_NULL
;

348 
	`SAMPLE_PRT
("expected:twoÑedÜine!\n");

349 
i
 = 0; i < 
SAMPLE_IMAGE_NUM
; i++)

351 i‡('q' =
gs_cExôFœg
)

353 
	`¥ötf
("processÉxit...\n");

357 i‡(
i
 % 2)

359 
v¨
.
yoff£t
 = v¨.
yªs
;

363 
v¨
.
yoff£t
 = 0;

366 
pHideS¸ìn
 = 
pShowS¸ìn
 + (
u32FixS¸ìnSåide
 * 
v¨
.
yªs
Ë* (
i
 % 2);

367 
	`mem£t
(
pHideS¸ìn
, 0x00, 
u32FixS¸ìnSåide
 * 
v¨
.
yªs
);

368 
u32HideS¸ìnPhy
 = 
fix
.
smem_°¨t
 + (
i
 % 2Ë* 
u32FixS¸ìnSåide
 * 
v¨
.
yªs
;

370 
pShowLöe
 = (
HI_U16
*)
pHideS¸ìn
;

371 
y
 = (
u32Height
 / 2 - 2); y < (u32Height / 2 + 2); y++)

373 
x
 = 0; x < 
u32Width
; x++)

375 *(
pShowLöe
 + 
y
 * 
v¨
.
xªs
 + 
x
Ë
HIFB_RED_1555
;

378 
y
 = 0; y < 
u32Height
; y++)

380 
x
 = (
u32Width
 / 2 - 2); x < (u32Width / 2 + 2); x++)

382 *(
pShowLöe
 + 
y
 * 
v¨
.
xªs
 + 
x
Ë
HIFB_RED_1555
;

386 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPAN_DISPLAY
, &
v¨
) < 0)

388 
	`SAMPLE_PRT
("FBIOPAN_DISPLAY failed!\n");

389 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

390 
	`˛o£
(
p°Info
->
fd
);

391  
HI_NULL
;

395 
	`¢¥ötf
(
image_«me
, 
FILE_NAME_LEN
, 
SAMPLE_IMAGE1_PATH
, 
i
 % 2);

396 
pD°
 = (
HI_U8
*)
Vúaddr
;

397 
	`SAMPLE_HIFB_LﬂdBmp
(
image_«me
, 
pD°
);

400 
°SrcRe˘
.
s32Xpos
 = 0;

401 
°SrcRe˘
.
s32Ypos
 = 0;

402 
°SrcRe˘
.
u32Height
 = 
SAMPLE_IMAGE_HEIGHT
;

403 
°SrcRe˘
.
u32Width
 = 
SAMPLE_IMAGE_WIDTH
;

404 
°D°Re˘
.
s32Xpos
 = 0;

405 
°D°Re˘
.
s32Ypos
 = 0;

406 
°D°Re˘
.
u32Height
 = 
°SrcRe˘
.u32Height;

407 
°D°Re˘
.
u32Width
 = 
°SrcRe˘
.u32Width;

409 
°D°
.
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB1555
;

410 
°D°
.
u32Width
 = u32Width;

411 
°D°
.
u32Height
 = u32Height;

412 
°D°
.
u32Såide
 = 
u32FixS¸ìnSåide
;

413 
°D°
.
u32PhyAddr
 = 
u32HideS¸ìnPhy
;

415 
°Src
.
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB1555
;

416 
°Src
.
u32Width
 = 
SAMPLE_IMAGE_WIDTH
;

417 
°Src
.
u32Height
 = 
SAMPLE_IMAGE_HEIGHT
;

418 
°Src
.
u32Såide
 = 2 * 
SAMPLE_IMAGE_WIDTH
;

419 
°Src
.
u32PhyAddr
 = 
Phyaddr
;

420 
°Src
.
bAÕhaExt1555
 = 
HI_TRUE
;

421 
°Src
.
bAÕhaMax255
 = 
HI_TRUE
;

422 
°Src
.
u8AÕha0
 = 0XFF;

423 
°Src
.
u8AÕha1
 = 0XFF;

426 
s32H™dÀ
 = 
	`HI_TDE2_BegöJob
();

427 i‡(
HI_ERR_TDE_INVALID_HANDLE
 =
s32H™dÀ
)

429 
	`SAMPLE_PRT
("start job failed!\n");

430 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

431 
	`˛o£
(
p°Info
->
fd
);

432  
HI_NULL
;

435 
s32Rë
 = 
	`HI_TDE2_QuickC›y
(
s32H™dÀ
, &
°Src
, &
°SrcRe˘
, &
°D°
, &
°D°Re˘
);

436 i‡(
s32Rë
 < 0)

438 
	`SAMPLE_PRT
("HI_TDE2_QuickC›y:%d faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

439 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

440 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

441 
	`˛o£
(
p°Info
->
fd
);

442  
HI_NULL
;

446 
s32Rë
 = 
	`HI_TDE2_EndJob
(
s32H™dÀ
, 
HI_FALSE
, 
HI_TRUE
, 10);

447 i‡(
s32Rë
 < 0)

449 
	`SAMPLE_PRT
("Löe:%d,HI_TDE2_EndJob faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

450 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

451 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

452 
	`˛o£
(
p°Info
->
fd
);

453  
HI_NULL
;

456 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPAN_DISPLAY
, &
v¨
) < 0)

458 
	`SAMPLE_PRT
("FBIOPAN_DISPLAY failed!\n");

459 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

460 
	`˛o£
(
p°Info
->
fd
);

461  
HI_NULL
;

463 
	`¶ìp
(1);

466 
	`HI_TDE2_Clo£
();

467 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

476 
	`munm≠
(
pShowS¸ìn
, 
fix
.
smem_Àn
);

477 
bShow
 = 
HI_FALSE
;

478 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_SHOW_HIFB
, &
bShow
) < 0)

480 
	`SAMPLE_PRT
("FBIOPUT_SHOW_HIFB failed!\n");

481 
	`˛o£
(
p°Info
->
fd
);

482  
HI_NULL
;

484 
	`˛o£
(
p°Info
->
fd
);

485  
HI_NULL
;

486 
	}
}

488 
HI_VOID
* 
	$SAMPLE_HIFB_REFRESH
(* 
pD©a
)

490 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

491 
HIFB_LAYER_INFO_S
 
°LayîInfo
 = {0};

492 
HIFB_BUFFER_S
 
°C™vasBuf
;

493 
HI_U16
* 
pBuf
;

494 
HI_U8
* 
pD°
 = 
NULL
;

495 
HI_U32
 
x
;

496 
HI_U32
 
y
;

497 
HI_U32
 
i
;

498 
HI_CHAR
 
image_«me
[128];

499 
HI_BOOL
 
bShow
;

500 
HIFB_POINT_S
 
°Poöt
 = {0};

501 
fb_v¨_s¸ìnöfo
 
°V¨Info
;

502 
HI_CHAR
 
fûe
[12] = "/dev/fb0";

503 
HI_U32
 
maxW
;

504 
HI_U32
 
maxH
;

505 
PTHREAD_HIFB_SAMPLE_INFO
* 
p°Info
;

506 
HIFB_COLORKEY_S
 
°Cﬁ‹Key
;

507 
TDE2_RECT_S
 
°SrcRe˘
, 
°D°Re˘
;

508 
TDE2_SURFACE_S
 
°Src
, 
°D°
;

509 
HI_U32
 
Phyaddr
;

510 
HI_VOID
* 
Vúaddr
;

511 
TDE_HANDLE
 
s32H™dÀ
;

513 i‡(
HI_NULL
 =
pD©a
)

515  
HI_NULL
;

517 
p°Info
 = (
PTHREAD_HIFB_SAMPLE_INFO
*)
pD©a
;

519 
p°Info
->
œyî
)

521 
GRAPHICS_LAYER_G0
:

522 
	`°r˝y
(
fûe
, "/dev/fb0");

525 
	`°r˝y
(
fûe
, "/dev/fb0");

530 
p°Info
->
fd
 = 
	`›í
(
fûe
, 
O_RDWR
, 0);

531 i‡(
p°Info
->
fd
 < 0)

533 
	`SAMPLE_PRT
("›í %†Áûed!\n", 
fûe
);

534  
HI_NULL
;

537 
°Cﬁ‹Key
.
bKeyE«bÀ
 = 
HI_TRUE
;

538 
°Cﬁ‹Key
.
u32Key
 = 0x0;

539 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_COLORKEY_HIFB
, &
°Cﬁ‹Key
) < 0)

541 
	`SAMPLE_PRT
("FBIOPUT_COLORKEY_HIFB!\n");

542 
	`˛o£
(
p°Info
->
fd
);

543  
HI_NULL
;

545 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIOGET_VSCREENINFO
, &
°V¨Info
);

546 i‡(
s32Rë
 < 0)

548 
	`SAMPLE_PRT
("GET_VSCREENINFO failed!\n");

549 
	`˛o£
(
p°Info
->
fd
);

550  
HI_NULL
;

553 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_SCREEN_ORIGIN_HIFB
, &
°Poöt
) < 0)

555 
	`SAMPLE_PRT
("set screen original showÖosition failed!\n");

556 
	`˛o£
(
p°Info
->
fd
);

557  
HI_NULL
;

560 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

562 
maxW
 = 
WIDTH_720
;

563 
maxH
 = 
HEIGHT_576
;

567 
maxW
 = 
WIDTH_1920
;

568 
maxH
 = 
HEIGHT_1080
;

571 
°V¨Info
.
å™•
 = 
s_a16
;

572 
°V¨Info
.
ªd
 = 
s_r16
;

573 
°V¨Info
.
gªí
 = 
s_g16
;

574 
°V¨Info
.
blue
 = 
s_b16
;

575 
°V¨Info
.
bôs_≥r_pixñ
 = 16;

576 
°V¨Info
.
a˘iv©e
 = 
FB_ACTIVATE_NOW
;

577 
°V¨Info
.
xªs
 = stV¨Info.
xªs_vútuÆ
 = 
maxW
;

578 
°V¨Info
.
yªs
 = stV¨Info.
yªs_vútuÆ
 = 
maxH
;

579 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_VSCREENINFO
, &
°V¨Info
);

580 i‡(
s32Rë
 < 0)

582 
	`SAMPLE_PRT
("PUT_VSCREENINFO failed!\n");

583 
	`˛o£
(
p°Info
->
fd
);

584  
HI_NULL
;

586 
p°Info
->
˘ækey
)

590 
°LayîInfo
.
BufMode
 = 
HIFB_LAYER_BUF_ONE
;

591 
°LayîInfo
.
u32Mask
 = 
HIFB_LAYERMASK_BUFMODE
;

597 
°LayîInfo
.
BufMode
 = 
HIFB_LAYER_BUF_DOUBLE
;

598 
°LayîInfo
.
u32Mask
 = 
HIFB_LAYERMASK_BUFMODE
;

604 
°LayîInfo
.
BufMode
 = 
HIFB_LAYER_BUF_NONE
;

605 
°LayîInfo
.
u32Mask
 = 
HIFB_LAYERMASK_BUFMODE
;

608 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_LAYER_INFO
, &
°LayîInfo
);

609 i‡(
s32Rë
 < 0)

611 
	`SAMPLE_PRT
("PUT_LAYER_INFO failed!\n");

612 
	`˛o£
(
p°Info
->
fd
);

613  
HI_NULL
;

615 
bShow
 = 
HI_TRUE
;

616 i‡(
	`io˘l
(
p°Info
->
fd
, 
FBIOPUT_SHOW_HIFB
, &
bShow
) < 0)

618 
	`SAMPLE_PRT
("FBIOPUT_SHOW_HIFB failed!\n");

619 
	`˛o£
(
p°Info
->
fd
);

620  
HI_NULL
;

623 i‡(
HI_FAILURE
 =
	`HI_MPI_SYS_MmzAŒoc
(&(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
), ((**)&
pBuf
),

624 
NULL
, NULL, 
maxW
 * 
maxH
 * 2))

626 
	`SAMPLE_PRT
("allocate memory (maxW*maxH*2 bytes) failed\n");

627 
	`˛o£
(
p°Info
->
fd
);

628  
HI_NULL
;

630 
°C™vasBuf
.
°C™vas
.
u32Height
 = 
maxH
;

631 
°C™vasBuf
.
°C™vas
.
u32Width
 = 
maxW
;

632 
°C™vasBuf
.
°C™vas
.
u32Pôch
 = 
maxW
 * 2;

633 
°C™vasBuf
.
°C™vas
.
íFmt
 = 
HIFB_FMT_ARGB1555
;

634 
	`mem£t
(
pBuf
, 0x00, 
°C™vasBuf
.
°C™vas
.
u32Pôch
 * stC™vasBuf.°C™vas.
u32Height
);

637 i‡(
HI_FAILURE
 =
	`HI_MPI_SYS_MmzAŒoc
(&
Phyaddr
, ((**)&
Vúaddr
),

638 
NULL
, NULL, 
SAMPLE_IMAGE_WIDTH
 * 
SAMPLE_IMAGE_HEIGHT
 * 2))

640 
	`SAMPLE_PRT
("allocate memory failed\n");

641 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

642 
	`˛o£
(
p°Info
->
fd
);

643  
HI_NULL
;

646 
s32Rë
 = 
	`HI_TDE2_O≥n
();

647 i‡(
s32Rë
 < 0)

649 
	`SAMPLE_PRT
("HI_TDE2_O≥¿Áûed :%d!\n", 
s32Rë
);

650 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

651 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

652 
	`˛o£
(
p°Info
->
fd
);

653  
HI_NULL
;

656 
	`SAMPLE_PRT
("expected:twoÑedÜine!\n");

658 
i
 = 0; i < 
SAMPLE_IMAGE_NUM
; i++)

660 i‡('q' =
gs_cExôFœg
)

662 
	`¥ötf
("processÉxit...\n");

666 
y
 = (
maxH
 / 2 - 2); y < (maxH / 2 + 2); y++)

668 
x
 = 0; x < 
maxW
; x++)

670 *(
pBuf
 + 
y
 * 
maxW
 + 
x
Ë
HIFB_RED_1555
;

673 
y
 = 0; y < 
maxH
; y++)

675 
x
 = (
maxW
 / 2 - 2); x < (maxW / 2 + 2); x++)

677 *(
pBuf
 + 
y
 * 
maxW
 + 
x
Ë
HIFB_RED_1555
;

681 
°C™vasBuf
.
Upd©eRe˘
.
x
 = 0;

682 
°C™vasBuf
.
Upd©eRe˘
.
y
 = 0;

683 
°C™vasBuf
.
Upd©eRe˘
.
w
 = 
maxW
;

684 
°C™vasBuf
.
Upd©eRe˘
.
h
 = 
maxH
;

685 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIO_REFRESH
, &
°C™vasBuf
);

686 i‡(
s32Rë
 < 0)

688 
	`SAMPLE_PRT
("REFRESH failed!\n");

689 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

690 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

691 
	`˛o£
(
p°Info
->
fd
);

692  
HI_NULL
;

694 
	`¶ìp
(2);

696 
	`¢¥ötf
(
image_«me
, 
FILE_NAME_LEN
, 
SAMPLE_IMAGE1_PATH
, 
i
 % 2);

697 
pD°
 = (
HI_U8
*)
Vúaddr
;

698 
	`SAMPLE_HIFB_LﬂdBmp
(
image_«me
, 
pD°
);

701 
°SrcRe˘
.
s32Xpos
 = 0;

702 
°SrcRe˘
.
s32Ypos
 = 0;

703 
°SrcRe˘
.
u32Height
 = 
SAMPLE_IMAGE_HEIGHT
;

704 
°SrcRe˘
.
u32Width
 = 
SAMPLE_IMAGE_WIDTH
;

705 
°D°Re˘
.
s32Xpos
 = 0;

706 
°D°Re˘
.
s32Ypos
 = 0;

707 
°D°Re˘
.
u32Height
 = 
°SrcRe˘
.
u32Width
;

708 
°D°Re˘
.
u32Width
 = 
°SrcRe˘
.u32Width;

710 
°D°
.
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB1555
;

711 
°D°
.
u32Width
 = 
maxW
;

712 
°D°
.
u32Height
 = 
maxH
;

713 
°D°
.
u32Såide
 = 
maxW
 * 2;

714 
°D°
.
u32PhyAddr
 = 
°C™vasBuf
.
°C™vas
.u32PhyAddr;

716 
°Src
.
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB1555
;

717 
°Src
.
u32Width
 = 
SAMPLE_IMAGE_WIDTH
;

718 
°Src
.
u32Height
 = 
SAMPLE_IMAGE_HEIGHT
;

719 
°Src
.
u32Såide
 = 2 * 
SAMPLE_IMAGE_WIDTH
;

720 
°Src
.
u32PhyAddr
 = 
Phyaddr
;

721 
°Src
.
bAÕhaExt1555
 = 
HI_TRUE
;

722 
°Src
.
bAÕhaMax255
 = 
HI_TRUE
;

723 
°Src
.
u8AÕha0
 = 0XFF;

724 
°Src
.
u8AÕha1
 = 0XFF;

727 
s32H™dÀ
 = 
	`HI_TDE2_BegöJob
();

728 i‡(
HI_ERR_TDE_INVALID_HANDLE
 =
s32H™dÀ
)

730 
	`SAMPLE_PRT
("start job failed!\n");

731 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

732 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

733 
	`˛o£
(
p°Info
->
fd
);

734  
HI_NULL
;

737 
s32Rë
 = 
	`HI_TDE2_QuickC›y
(
s32H™dÀ
, &
°Src
, &
°SrcRe˘
, &
°D°
, &
°D°Re˘
);

738 i‡(
s32Rë
 < 0)

740 
	`SAMPLE_PRT
("HI_TDE2_QuickC›y:%d faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

741 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

742 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

743 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

744 
	`˛o£
(
p°Info
->
fd
);

745  
HI_NULL
;

749 
s32Rë
 = 
	`HI_TDE2_EndJob
(
s32H™dÀ
, 
HI_FALSE
, 
HI_TRUE
, 10);

750 i‡(
s32Rë
 < 0)

752 
	`SAMPLE_PRT
("Löe:%d,HI_TDE2_EndJob faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

753 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

754 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

755 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

756 
	`˛o£
(
p°Info
->
fd
);

757  
HI_NULL
;

760 
°C™vasBuf
.
Upd©eRe˘
.
x
 = 0;

761 
°C™vasBuf
.
Upd©eRe˘
.
y
 = 0;

762 
°C™vasBuf
.
Upd©eRe˘
.
w
 = 
maxW
;

763 
°C™vasBuf
.
Upd©eRe˘
.
h
 = 
maxH
;

764 
s32Rë
 = 
	`io˘l
(
p°Info
->
fd
, 
FBIO_REFRESH
, &
°C™vasBuf
);

765 i‡(
s32Rë
 < 0)

767 
	`SAMPLE_PRT
("REFRESH failed!\n");

768 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

769 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

770 
	`˛o£
(
p°Info
->
fd
);

771  
HI_NULL
;

774 
	`¶ìp
(2);

777 
	`HI_MPI_SYS_MmzFªe
(
Phyaddr
, 
Vúaddr
);

778 
	`HI_MPI_SYS_MmzFªe
(
°C™vasBuf
.
°C™vas
.
u32PhyAddr
, 
pBuf
);

779 
	`˛o£
(
p°Info
->
fd
);

781  
HI_NULL
;

782 
	}
}

784 
HI_VOID
 
	$SAMPLE_HIFB_H™dÀSig
(
HI_S32
 
signo
)

786 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

788 
	`SAMPLE_COMM_SYS_Exô
();

789 
	`¥ötf
("\033[0;31mprogramÉxitábnormally!\033[0;39m\n");

792 
	`exô
(0);

793 
	}
}

795 
HI_VOID
 
	$SAMPLE_HIFB_Ußge1
(
HI_CHAR
* 
sPrgNm
)

797 
	`¥ötf
("Ußgê: %†<ötf>\n", 
sPrgNm
);

798 
	`¥ötf
("intf:\n");

799 
	`¥ötf
("\t 0) vo cvbs output, default.\n");

800 
	`¥ötf
("\t 1) vo BT1120 output.\n");

803 
	}
}

805 
HI_VOID
 
	$SAMPLE_HIFB_Ußge2
(
HI_VOID
)

807 
	`¥ötf
("\n\n/************************************/\n");

808 
	`¥ötf
("please chooseÅhe case which you wantÅoÑun:\n");

809 
	`¥ötf
("\t0: ARGB1555 standard mode\n");

810 
	`¥ötf
("\t1: ARGB1555 BUF_DOUBLE mode\n");

811 
	`¥ötf
("\t2: ARGB1555 BUF_ONE mode\n");

812 
	`¥ötf
("\t3: ARGB1555 BUF_NONE mode\n");

813 
	`¥ötf
("\tq: quitÅhe whole sample\n");

814 
	`¥ötf
("sample command:");

817 
	}
}

819 
HI_S32
 
	$SAMPLE_HIFB_Sènd¨dMode
(
HI_VOID
)

821 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

822 
±hªad_t
 
phifb0
 = -1;

823 
PTHREAD_HIFB_SAMPLE_INFO
 
°Info0
;

824 
HI_U32
 
u32PicWidth
;

825 
HI_U32
 
u32PicHeight
;

826 
SIZE_S
 
°Size
;

828 
VO_LAYER
 
VoLayî
 = 0;

829 
VO_PUB_ATTR_S
 
°PubAâr
;

830 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

831 
HI_U32
 
u32VoFrmR©e
;

833 
VB_CONF_S
 
°VbC⁄f
;

834 
HI_U32
 
u32BlkSize
;

839 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

840 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

842 
u32PicWidth
 = 
WIDTH_720
;

843 
u32PicHeight
 = 
HEIGHT_576
;

847 
u32PicWidth
 = 
WIDTH_1920
;

848 
u32PicHeight
 = 
HEIGHT_1080
;

851 
u32BlkSize
 = 
	`CEILING_2_POWER
(
u32PicWidth
, 
SAMPLE_SYS_ALIGN_WIDTH
)\

852 * 
	`CEILING_2_POWER
(
u32PicHeight
, 
SAMPLE_SYS_ALIGN_WIDTH
) * 2;

854 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

856 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

857 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 6;

862 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

863 i‡(
HI_SUCCESS
 !
s32Rë
)

865 
	`SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

866 
SAMPLE_HIFB_N⁄eBufMode_0
;

872 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

874 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

875 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

876 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

880 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P60
;

881 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

882 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

885 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

886 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

887 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

889 
s32Rë
 = 
	`SAMPLE_COMM_VO_GëWH
(
°PubAâr
.
íI¡fSync
, &
°Size
.
u32Width
, \

890 &
°Size
.
u32Height
, &
u32VoFrmR©e
);

891 i‡(
HI_SUCCESS
 !
s32Rë
)

893 
	`SAMPLE_PRT
("gë vÿwh faûed wôh %d!\n", 
s32Rë
);

894 
SAMPLE_HIFB_N⁄eBufMode_0
;

896 
	`mem˝y
(&
°LayîAâr
.
°ImageSize
, &
°Size
, (stSize));

898 
°LayîAâr
.
u32Di•FrmRt
 = 30 ;

899 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

900 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

901 
°LayîAâr
.
°Di•Re˘
.
u32Width
 = 
°Size
.u32Width;

902 
°LayîAâr
.
°Di•Re˘
.
u32Height
 = 
°Size
.u32Height;

904 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°PubAâr
);

905 i‡(
HI_SUCCESS
 !
s32Rë
)

907 
	`SAMPLE_PRT
("°¨àvÿdev faûed wôh %d!\n", 
s32Rë
);

908 
SAMPLE_HIFB_N⁄eBufMode_0
;

911 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

912 i‡(
HI_SUCCESS
 !
s32Rë
)

914 
	`SAMPLE_PRT
("°¨àvÿœyî faûed wôh %d!\n", 
s32Rë
);

915 
SAMPLE_HIFB_N⁄eBufMode_1
;

921 
°Info0
.
œyî
 = 0;

922 
°Info0
.
fd
 = -1;

923 
°Info0
.
˘ækey
 = 2;

924 
	`±hªad_¸óã
(&
phifb0
, 0, 
SAMPLE_HIFB_PANDISPLAY
, (*)(&
°Info0
));

929 
HI_CHAR
 
ch
;

931 
	`¥ötf
("press 'q'ÅoÉxitÅhis sample.\n");

932 
ch
 = 
	`gëch¨
();

933 
	`gëch¨
();

934 i‡('q' =
ch
)

936 
gs_cExôFœg
 = 
ch
;

941 
	`¥ötf
("input invaild!ÖleaseÅryágain.\n");

944 i‡(-1 !
phifb0
)

946 
	`±hªad_joö
(
phifb0
, 0);

949  
s32Rë
;

951 
SAMPLE_HIFB_N⁄eBufMode_1
:

952 
	`SAMPLE_COMM_VO_St›Dev
(
VoDev
);

953 
SAMPLE_HIFB_N⁄eBufMode_0
:

954 
	`SAMPLE_COMM_SYS_Exô
();

956  
s32Rë
;

957 
	}
}

959 
HI_S32
 
	$SAMPLE_HIFB_DoubÀBufMode
(
HI_VOID
)

961 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

962 
±hªad_t
 
phifb0
 = -1;

964 
PTHREAD_HIFB_SAMPLE_INFO
 
°Info0
;

965 
HI_U32
 
u32PicWidth
;

966 
HI_U32
 
u32PicHeight
;

967 
SIZE_S
 
°Size
;

969 
VO_LAYER
 
VoLayî
 = 0;

970 
VO_PUB_ATTR_S
 
°PubAâr
;

971 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

972 
HI_U32
 
u32VoFrmR©e
;

974 
VB_CONF_S
 
°VbC⁄f
;

975 
HI_U32
 
u32BlkSize
;

980 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

981 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

983 
u32PicWidth
 = 
WIDTH_720
;

984 
u32PicHeight
 = 
HEIGHT_576
;

988 
u32PicWidth
 = 
WIDTH_1920
;

989 
u32PicHeight
 = 
HEIGHT_1080
;

992 
u32BlkSize
 = 
	`CEILING_2_POWER
(
u32PicWidth
, 
SAMPLE_SYS_ALIGN_WIDTH
)\

993 * 
	`CEILING_2_POWER
(
u32PicHeight
, 
SAMPLE_SYS_ALIGN_WIDTH
) * 2;

995 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

997 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

998 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 6;

1003 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1004 i‡(
HI_SUCCESS
 !
s32Rë
)

1006 
	`SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1007 
SAMPLE_HIFB_DoubÀBufMode_0
;

1013 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

1015 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1016 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1017 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

1021 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P60
;

1022 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1023 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

1026 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1027 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1028 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1030 
s32Rë
 = 
	`SAMPLE_COMM_VO_GëWH
(
°PubAâr
.
íI¡fSync
, &
°Size
.
u32Width
, \

1031 &
°Size
.
u32Height
, &
u32VoFrmR©e
);

1032 i‡(
HI_SUCCESS
 !
s32Rë
)

1034 
	`SAMPLE_PRT
("gë vÿwh faûed wôh %d!\n", 
s32Rë
);

1035 
SAMPLE_HIFB_DoubÀBufMode_0
;

1037 
	`mem˝y
(&
°LayîAâr
.
°ImageSize
, &
°Size
, (stSize));

1039 
°LayîAâr
.
u32Di•FrmRt
 = 30 ;

1040 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1041 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1042 
°LayîAâr
.
°Di•Re˘
.
u32Width
 = 
°Size
.u32Width;

1043 
°LayîAâr
.
°Di•Re˘
.
u32Height
 = 
°Size
.u32Height;

1045 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°PubAâr
);

1046 i‡(
HI_SUCCESS
 !
s32Rë
)

1048 
	`SAMPLE_PRT
("°¨àvÿdev faûed wôh %d!\n", 
s32Rë
);

1049 
SAMPLE_HIFB_DoubÀBufMode_0
;

1052 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1053 i‡(
HI_SUCCESS
 !
s32Rë
)

1055 
	`SAMPLE_PRT
("°¨àvÿœyî faûed wôh %d!\n", 
s32Rë
);

1056 
SAMPLE_HIFB_DoubÀBufMode_1
;

1062 
°Info0
.
œyî
 = 0;

1063 
°Info0
.
fd
 = -1;

1064 
°Info0
.
˘ækey
 = 1;

1065 
	`±hªad_¸óã
(&
phifb0
, 0, 
SAMPLE_HIFB_REFRESH
, (*)(&
°Info0
));

1069 
HI_CHAR
 
ch
;

1071 
	`¥ötf
("press 'q'ÅoÉxitÅhis sample.\n");

1072 
ch
 = 
	`gëch¨
();

1073 
	`gëch¨
();

1074 i‡('q' =
ch
)

1076 
gs_cExôFœg
 = 
ch
;

1081 
	`¥ötf
("input invaild!ÖleaseÅryágain.\n");

1084 i‡(-1 !
phifb0
)

1086 
	`±hªad_joö
(
phifb0
, 0);

1089  
s32Rë
;

1091 
SAMPLE_HIFB_DoubÀBufMode_1
:

1092 
	`HI_MPI_VO_DißbÀ
(
VoDev
);

1093 
SAMPLE_HIFB_DoubÀBufMode_0
:

1094 
	`SAMPLE_COMM_SYS_Exô
();

1096  
s32Rë
;

1097 
	}
}

1099 
HI_S32
 
	$SAMPLE_HIFB_O√BufMode
(
HI_VOID
)

1101 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1102 
±hªad_t
 
phifb0
 = -1;

1104 
PTHREAD_HIFB_SAMPLE_INFO
 
°Info0
;

1105 
HI_U32
 
u32PicWidth
;

1106 
HI_U32
 
u32PicHeight
;

1107 
SIZE_S
 
°Size
;

1109 
VO_LAYER
 
VoLayî
 = 0;

1110 
VO_PUB_ATTR_S
 
°PubAâr
;

1111 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1112 
HI_U32
 
u32VoFrmR©e
;

1114 
VB_CONF_S
 
°VbC⁄f
;

1115 
HI_U32
 
u32BlkSize
;

1120 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1121 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

1123 
u32PicWidth
 = 
WIDTH_720
;

1124 
u32PicHeight
 = 
HEIGHT_576
;

1128 
u32PicWidth
 = 
WIDTH_1920
;

1129 
u32PicHeight
 = 
HEIGHT_1080
;

1132 
u32BlkSize
 = 
	`CEILING_2_POWER
(
u32PicWidth
, 
SAMPLE_SYS_ALIGN_WIDTH
)\

1133 * 
	`CEILING_2_POWER
(
u32PicHeight
, 
SAMPLE_SYS_ALIGN_WIDTH
) * 2;

1135 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1137 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1138 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 6;

1143 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1144 i‡(
HI_SUCCESS
 !
s32Rë
)

1146 
	`SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1147 
SAMPLE_HIFB_O√BufMode_0
;

1153 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

1155 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1156 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1157 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

1161 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P60
;

1162 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1163 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

1166 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1167 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1168 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1170 
s32Rë
 = 
	`SAMPLE_COMM_VO_GëWH
(
°PubAâr
.
íI¡fSync
, &
°Size
.
u32Width
, \

1171 &
°Size
.
u32Height
, &
u32VoFrmR©e
);

1172 i‡(
HI_SUCCESS
 !
s32Rë
)

1174 
	`SAMPLE_PRT
("gë vÿwh faûed wôh %d!\n", 
s32Rë
);

1175 
SAMPLE_HIFB_O√BufMode_0
;

1177 
	`mem˝y
(&
°LayîAâr
.
°ImageSize
, &
°Size
, (stSize));

1179 
°LayîAâr
.
u32Di•FrmRt
 = 30 ;

1180 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1181 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1182 
°LayîAâr
.
°Di•Re˘
.
u32Width
 = 
°Size
.u32Width;

1183 
°LayîAâr
.
°Di•Re˘
.
u32Height
 = 
°Size
.u32Height;

1185 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°PubAâr
);

1186 i‡(
HI_SUCCESS
 !
s32Rë
)

1188 
	`SAMPLE_PRT
("°¨àvÿdev faûed wôh %d!\n", 
s32Rë
);

1189 
SAMPLE_HIFB_O√BufMode_0
;

1192 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1193 i‡(
HI_SUCCESS
 !
s32Rë
)

1195 
	`SAMPLE_PRT
("°¨àvÿœyî faûed wôh %d!\n", 
s32Rë
);

1196 
SAMPLE_HIFB_O√BufMode_1
;

1202 
°Info0
.
œyî
 = 0;

1203 
°Info0
.
fd
 = -1;

1204 
°Info0
.
˘ækey
 = 0;

1205 
	`±hªad_¸óã
(&
phifb0
, 0, 
SAMPLE_HIFB_REFRESH
, (*)(&
°Info0
));

1209 
HI_CHAR
 
ch
;

1211 
	`¥ötf
("press 'q'ÅoÉxitÅhis sample.\n");

1212 
ch
 = 
	`gëch¨
();

1213 
	`gëch¨
();

1214 i‡('q' =
ch
)

1216 
gs_cExôFœg
 = 
ch
;

1221 
	`¥ötf
("input invaild!ÖleaseÅryágain.\n");

1224 i‡(-1 !
phifb0
)

1226 
	`±hªad_joö
(
phifb0
, 0);

1229  
s32Rë
;

1231 
SAMPLE_HIFB_O√BufMode_1
:

1232 
	`HI_MPI_VO_DißbÀ
(
VoDev
);

1233 
SAMPLE_HIFB_O√BufMode_0
:

1234 
	`SAMPLE_COMM_SYS_Exô
();

1236  
s32Rë
;

1237 
	}
}

1239 
HI_S32
 
	$SAMPLE_HIFB_N⁄eBufMode
(
HI_VOID
)

1241 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1242 
±hªad_t
 
phifb0
 = -1;

1244 
PTHREAD_HIFB_SAMPLE_INFO
 
°Info0
;

1245 
HI_U32
 
u32PicWidth
;

1246 
HI_U32
 
u32PicHeight
;

1247 
SIZE_S
 
°Size
;

1249 
VO_LAYER
 
VoLayî
 = 0;

1250 
VO_PUB_ATTR_S
 
°PubAâr
;

1251 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1252 
HI_U32
 
u32VoFrmR©e
;

1254 
VB_CONF_S
 
°VbC⁄f
;

1255 
HI_U32
 
u32BlkSize
;

1260 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1261 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

1263 
u32PicWidth
 = 
WIDTH_720
;

1264 
u32PicHeight
 = 
HEIGHT_576
;

1268 
u32PicWidth
 = 
WIDTH_1920
;

1269 
u32PicHeight
 = 
HEIGHT_1080
;

1272 
u32BlkSize
 = 
	`CEILING_2_POWER
(
u32PicWidth
, 
SAMPLE_SYS_ALIGN_WIDTH
)\

1273 * 
	`CEILING_2_POWER
(
u32PicHeight
, 
SAMPLE_SYS_ALIGN_WIDTH
) * 2;

1275 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1277 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1278 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 6;

1283 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1284 i‡(
HI_SUCCESS
 !
s32Rë
)

1286 
	`SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1287 
SAMPLE_HIFB_N⁄eBufMode_0
;

1293 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

1295 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1296 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1297 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

1301 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P60
;

1302 
°PubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1303 
°PubAâr
.
u32BgCﬁ‹
 = 0x0000FF;

1306 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1307 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1308 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1310 
s32Rë
 = 
	`SAMPLE_COMM_VO_GëWH
(
°PubAâr
.
íI¡fSync
, &
°Size
.
u32Width
, \

1311 &
°Size
.
u32Height
, &
u32VoFrmR©e
);

1312 i‡(
HI_SUCCESS
 !
s32Rë
)

1314 
	`SAMPLE_PRT
("gë vÿwh faûed wôh %d!\n", 
s32Rë
);

1315 
SAMPLE_HIFB_N⁄eBufMode_0
;

1317 
	`mem˝y
(&
°LayîAâr
.
°ImageSize
, &
°Size
, (stSize));

1319 
°LayîAâr
.
u32Di•FrmRt
 = 30 ;

1320 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1321 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1322 
°LayîAâr
.
°Di•Re˘
.
u32Width
 = 
°Size
.u32Width;

1323 
°LayîAâr
.
°Di•Re˘
.
u32Height
 = 
°Size
.u32Height;

1325 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°PubAâr
);

1326 i‡(
HI_SUCCESS
 !
s32Rë
)

1328 
	`SAMPLE_PRT
("°¨àvÿdev faûed wôh %d!\n", 
s32Rë
);

1329 
SAMPLE_HIFB_N⁄eBufMode_0
;

1332 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1333 i‡(
HI_SUCCESS
 !
s32Rë
)

1335 
	`SAMPLE_PRT
("°¨àvÿœyî faûed wôh %d!\n", 
s32Rë
);

1336 
SAMPLE_HIFB_N⁄eBufMode_1
;

1342 
°Info0
.
œyî
 = 0;

1343 
°Info0
.
fd
 = -1;

1344 
°Info0
.
˘ækey
 = 3;

1345 
	`±hªad_¸óã
(&
phifb0
, 0, 
SAMPLE_HIFB_REFRESH
, (*)(&
°Info0
));

1349 
HI_CHAR
 
ch
;

1351 
	`¥ötf
("press 'q'ÅoÉxitÅhis sample.\n");

1352 
ch
 = 
	`gëch¨
();

1353 
	`gëch¨
();

1354 i‡('q' =
ch
)

1356 
gs_cExôFœg
 = 
ch
;

1361 
	`¥ötf
("input invaild!ÖleaseÅryágain.\n");

1364 i‡(-1 !
phifb0
)

1366 
	`±hªad_joö
(
phifb0
, 0);

1369  
s32Rë
;

1371 
SAMPLE_HIFB_N⁄eBufMode_1
:

1372 
	`HI_MPI_VO_DißbÀ
(
VoDev
);

1373 
SAMPLE_HIFB_N⁄eBufMode_0
:

1374 
	`SAMPLE_COMM_SYS_Exô
();

1376  
s32Rë
;

1377 
	}
}

1379 
	$maö
(
¨gc
, * 
¨gv
[])

1381 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1382 
HI_CHAR
 
ch
;

1383 
HI_BOOL
 
bExô
 = 
HI_FALSE
;

1385 i‡–(
¨gc
 < 2Ë|| (1 !
	`°æí
(
¨gv
[1])))

1387 
	`SAMPLE_HIFB_Ußge1
(
¨gv
[0]);

1388  
HI_FAILURE
;

1390 
	`sig«l
(
SIGINT
, 
SAMPLE_HIFB_H™dÀSig
);

1391 
	`sig«l
(
SIGTERM
, 
SAMPLE_HIFB_H™dÀSig
);

1392 i‡((
¨gc
 > 1Ë&& *
¨gv
[1] == '1')

1394 
g_íVoI¡fTy≥
 = 
VO_INTF_BT1120
;

1402 
	`SAMPLE_HIFB_Ußge2
();

1403 
gs_cExôFœg
 = 0;

1404 
ch
 = 
	`gëch¨
();

1405 
	`gëch¨
();

1406 
ch
)

1410 
	`SAMPLE_HIFB_Sènd¨dMode
();

1415 
	`SAMPLE_HIFB_DoubÀBufMode
();

1420 
	`SAMPLE_HIFB_O√BufMode
();

1425 
	`SAMPLE_HIFB_N⁄eBufMode
();

1431 
bExô
 = 
HI_TRUE
;

1437 
	`¥ötf
("input invaild!ÖleaseÅryágain.\n");

1442 i‡(
bExô
)

1448  
s32Rë
;

1449 
	}
}

	@sample/ive/sample/sample_ive_ann.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

6 
	~<m©h.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

15 
	~"hi_comm⁄.h
"

16 
	~"hi_comm_video.h
"

17 
	~"hi_comm_sys.h
"

18 
	~"hi_comm_ive.h
"

20 
	~"mpi_vb.h
"

21 
	~"mpi_sys.h
"

22 
	~"mpi_ive.h
"

24 
	~"ßm∂e_comm_ive.h
"

26 
	#HI_CLIP
(
a
, 
maxv
, 
möv
Ë((◊)>(maxv)Ë? (maxvË: ((◊Ë< (möv)Ë? (mövË: (a)))

	)

28 
	shiSAMPLE_IVE_ANN_INFO_S


30 
IVE_MEM_INFO_S
 
	m°Src
;

31 
IVE_MEM_INFO_S
 
	m°D°
;

32 
IVE_IMAGE_S
 
	m°Gøy
;

33 
IVE_LOOK_UP_TABLE_S
 
	m°TabÀ
;

34 
IVE_ANN_MLP_MODEL_S
 
	m°A¬Modñ
;

36 } 
	tSAMPLE_IVE_ANN_INFO_S
;

38 
HI_S32
 
	$SAMPLE_IVE_Round
(
HI_FLOAT
 
fVÆue
)

40 i‡(
fVÆue
 >= 0)

42  (
HI_S32
)(
fVÆue
 + 0.5);

46  (
HI_S32
)(
fVÆue
 - 0.5);

48 
	}
}

52 
HI_S32
 
	$SAMPLE_IVE_A¬_MÕ_Cª©eTabÀ
(
IVE_LOOK_UP_TABLE_S
* 
p°TabÀ
, 
HI_FLOAT
 
fAÕha
, HI_FLOAT 
fBëa
)

54 
HI_U32
 
i
;

55 
HI_S1Q15
* 
ps1q15Tmp
;

56 
HI_FLOAT
 
fExpIn
;

57 
HI_DOUBLE
 
dExpOut
;

59 i‡(
p°TabÀ
->
°TabÀ
.
u32Size
 <Ö°TabÀ->
u16EÀmNum
 * (
HI_S1Q15
))

61 
	`SAMPLE_PRT
("InvalidÅable size\n");

62  
HI_FAILURE
;

65 
ps1q15Tmp
 = (
HI_S1Q15
*)
p°TabÀ
->
°TabÀ
.
pu8VúAddr
;

66 
i
 = 0; i < 
p°TabÀ
->
u16EÀmNum
; i++)

68 
fExpIn
 = (
HI_FLOAT
)
i
 / (1 << 
p°TabÀ
->
u8TabInPªci
);

69 
dExpOut
 = (2 / (1 + 
	`exp
(-
fAÕha
 * 
fExpIn
)Ë- 1Ë* 
fBëa
 * (1 << 15Ë/ (1 << 
p°TabÀ
->
u8TabOutN‹m
);

70 
ps1q15Tmp
[
i
] = (
	`HI_CLIP
(
	`SAMPLE_IVE_Round
(
dExpOut
), (1 << 15) - 1, -(1 << 15)));

73  
HI_SUCCESS
;

74 
	}
}

78 
HI_VOID
 
	$SAMPLE_IVE_A¬_MÕ_BöFótuª
(
HI_U8
* 
pu8GøyImg
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
, 
HI_S16Q16
* 
ps16q16BöFótuª
)

80 
HI_U32
 
u32Sãp
 = 4;

81 
HI_U32
 
u16Sum
 = 0;

82 
HI_U16
 
i
, 
j
;

83 
HI_U16
 
m
, 
n
;

84 
HI_U16
 
u16FótuªNum
 = 0;

86 
i
 = 0; i < 
u16Height
 - 
u32Sãp
 + 1; i += 4)

88 
j
 = 0; j < 
u16Width
 - 
u32Sãp
 + 1; j += 4)

90 
u16Sum
 = 0;

91 
m
 = 
i
; m < i + 
u32Sãp
; m++)

93 
n
 = 
j
;Ç < j + 
u32Sãp
;Ç++)

95 
u16Sum
 +
pu8GøyImg
[
m
 * 
u16Width
 + 
n
];

98 
ps16q16BöFótuª
[
u16FótuªNum
++] = 
u16Sum
 * 65536 / (
u32Sãp
 * u32Step * 255);

101 
	}
}

105 
HI_VOID
 
	$SAMPLE_IVE_A¬_MÕ_Unöô
(
SAMPLE_IVE_ANN_INFO_S
* 
p°A¬Info
)

107 
	`IVE_MMZ_FREE
(
p°A¬Info
->
°TabÀ
.°TabÀ.
u32PhyAddr
,Ö°A¬Info->°TabÀ.°TabÀ.
pu8VúAddr
);

108 
	`HI_MPI_IVE_ANN_MLP_U∆ﬂdModñ
(&
p°A¬Info
->
°A¬Modñ
);

109 
	`IVE_MMZ_FREE
(
p°A¬Info
->
°Src
.
u32PhyAddr
,Ö°A¬Info->°Src.
pu8VúAddr
);

110 
	`IVE_MMZ_FREE
(
p°A¬Info
->
°D°
.
u32PhyAddr
,Ö°A¬Info->°D°.
pu8VúAddr
);

111 
	`IVE_MMZ_FREE
(
p°A¬Info
->
°Gøy
.
u32PhyAddr
[0],Ö°A¬Info->°Gøy.
pu8VúAddr
[0]);

113 
	}
}

117 
HI_S32
 
	$SAMPLE_IVE_A¬_MÕ_Inô
(
SAMPLE_IVE_ANN_INFO_S
* 
p°A¬Info
, 
HI_CHAR
* 
pchBöFûeName
)

119 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

120 
HI_U32
 
u32Size
;

122 
	`mem£t
(
p°A¬Info
, 0, (
SAMPLE_IVE_ANN_INFO_S
));

124 
p°A¬Info
->
°TabÀ
.
s32TabInLowî
 = 0;

125 
p°A¬Info
->
°TabÀ
.
s32TabInUµî
 = 1;

126 
p°A¬Info
->
°TabÀ
.
u8TabInPªci
 = 8;

127 
p°A¬Info
->
°TabÀ
.
u8TabOutN‹m
 = 2;

128 
p°A¬Info
->
°TabÀ
.
u16EÀmNum
 =Ö°A¬Info->°TabÀ.
s32TabInUµî
 <<Ö°A¬Info->°TabÀ.
u8TabInPªci
;

129 
u32Size
 = 
p°A¬Info
->
°TabÀ
.
u16EÀmNum
 * (
HI_U16
);

130 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°A¬Info
->
°TabÀ
.°TabÀ), 
u32Size
);

131 i‡(
s32Rë
 !
HI_SUCCESS
)

133 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

134 
ANN_INIT_FAIL
;

137 
s32Rë
 = 
	`SAMPLE_IVE_A¬_MÕ_Cª©eTabÀ
(&(
p°A¬Info
->
°TabÀ
), 0.6667f, 1.7159f);

138 i‡(
s32Rë
 !
HI_SUCCESS
)

140 
	`SAMPLE_PRT
("SAMPLE_IVE_Ann_Mlp_CreateTable fail\n");

141 
ANN_INIT_FAIL
;

143 
s32Rë
 = 
	`HI_MPI_IVE_ANN_MLP_LﬂdModñ
(
pchBöFûeName
, &(
p°A¬Info
->
°A¬Modñ
));

144 i‡(
s32Rë
 !
HI_SUCCESS
)

146 
	`SAMPLE_PRT
("HI_MPI_IVE_ANN_MLP_LﬂdModñ faû,Eº‹(%#x)\n", 
s32Rë
);

147 
ANN_INIT_FAIL
;

149 
u32Size
 = 
p°A¬Info
->
°A¬Modñ
.
au16LayîCou¡
[0] * (
HI_S16Q16
);

150 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°A¬Info
->
°Src
), 
u32Size
);

151 i‡(
s32Rë
 !
HI_SUCCESS
)

153 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

154 
ANN_INIT_FAIL
;

156 
u32Size
 = 
p°A¬Info
->
°A¬Modñ
.
au16LayîCou¡
[p°A¬Info->°A¬Modñ.
u8LayîNum
 - 1] * (
HI_S16Q16
);

157 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°A¬Info
->
°D°
), 
u32Size
);

158 i‡(
s32Rë
 !
HI_SUCCESS
)

160 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

161 
ANN_INIT_FAIL
;

163 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°A¬Info
->
°Gøy
), 
IVE_IMAGE_TYPE_U8C1
, 16, 32);

164 i‡(
s32Rë
 !
HI_SUCCESS
)

166 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

167 
ANN_INIT_FAIL
;

170 
ANN_INIT_FAIL
:

172 i‡(
HI_SUCCESS
 !
s32Rë
)

174 
	`SAMPLE_IVE_A¬_MÕ_Unöô
(
p°A¬Info
);

177  
s32Rë
;

179 
	}
}

183 
HI_VOID
 
	$SAMPLE_IVE_A¬_MÕ_Pªdi˘
(
SAMPLE_IVE_ANN_INFO_S
* 
p°A¬Info
)

185 
HI_S32
 
i
, 
k
;

186 
HI_S32
 
s32Rë
;

187 
HI_S32
 
s32Re•⁄£Cls
;

188 
HI_U16
 
u16LayîCou¡
;

189 
HI_S16Q16
* 
ps16q16D°
;

190 
HI_S16Q16
 
s16q16Re•⁄£
;

191 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

192 
HI_BOOL
 
bFöish
;

193 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

194 
HI_CHAR
 
achFûeName
[
IVE_FILE_NAME_LEN
];

195 
FILE
* 
pFp
 = 
HI_NULL
;

196 
IVE_HANDLE
 
iveH™dÀ
;

197 
i
 = 0; i < 3; ++i)

199 
ps16q16D°
 = (
HI_S16Q16
*)
p°A¬Info
->
°D°
.
pu8VúAddr
;

200 
s16q16Re•⁄£
 = 0;

201 
s32Re•⁄£Cls
 = -1;

203 
	`¢¥ötf
(
achFûeName
, 
IVE_FILE_NAME_LEN
, "./d©a/öput/™n/%d.yuv", 
i
);

204 
pFp
 = 
	`f›í
(
achFûeName
, "rb");

205 i‡(
NULL
 =
pFp
)

207 
	`SAMPLE_PRT
("O≥¿fûêÁû,fûê%s\n", 
achFûeName
);

211 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&(
p°A¬Info
->
°Gøy
), 
pFp
);

212 i‡(
s32Rë
 !
HI_SUCCESS
)

214 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_RódFûêÁû,fûê%s\n", 
achFûeName
);

217 
	`IVE_CLOSE_FILE
(
pFp
);

219 
	`SAMPLE_IVE_A¬_MÕ_BöFótuª
(
p°A¬Info
->
°Gøy
.
pu8VúAddr
[0],Ö°A¬Info->°Gøy.
u16Width
, \

220 
p°A¬Info
->
°Gøy
.
u16Height
, (
HI_S16Q16
*Ì°A¬Info->
°Src
.
pu8VúAddr
);

222 
s32Rë
 = 
	`HI_MPI_IVE_ANN_MLP_Pªdi˘
(&
iveH™dÀ
, &(
p°A¬Info
->
°Src
), \

223 & (
p°A¬Info
->
°TabÀ
), &’°A¬Info->
°A¬Modñ
), &’°A¬Info->
°D°
), 
bIn°™t
);

224 i‡(
s32Rë
 !
HI_SUCCESS
)

226 
	`SAMPLE_PRT
("HI_MPI_IVE_ANN_MLP_Pªdi˘ faû,Eº‹(%#x)\n", 
s32Rë
);

229 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
iveH™dÀ
, &
bFöish
, 
bBlock
);

230 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

232 
	`u¶ìp
(100);

233 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
iveH™dÀ
, &
bFöish
, 
bBlock
);

235 i‡(
HI_SUCCESS
 !
s32Rë
)

237 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

240 
u16LayîCou¡
 = 
p°A¬Info
->
°A¬Modñ
.
au16LayîCou¡
[p°A¬Info->°A¬Modñ.
u8LayîNum
 - 1];

241 
k
 = 0; k < 
u16LayîCou¡
; k++)

243 i‡(
s16q16Re•⁄£
 < 
ps16q16D°
[
k
])

245 
s16q16Re•⁄£
 = 
ps16q16D°
[
k
];

246 
s32Re•⁄£Cls
 = 
k
;

250 
	`SAMPLE_PRT
("%d.yuv bñ⁄gÅÿ˛as†%d.\n", 
i
, 
s32Re•⁄£Cls
);

254 
	`IVE_CLOSE_FILE
(
pFp
);

256 
	}
}

260 
HI_VOID
 
	$SAMPLE_IVE_A¬
(
HI_VOID
)

262 
HI_S32
 
s32Rë
;

263 
SAMPLE_IVE_ANN_INFO_S
 
°A¬Info
;

264 
HI_CHAR
* 
pchBöFûeName
 = "./data/input/ann/ann_char_rec.bin";

266 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

269 
s32Rë
 = 
	`SAMPLE_IVE_A¬_MÕ_Inô
(&
°A¬Info
, 
pchBöFûeName
);

270 i‡(
HI_SUCCESS
 !
s32Rë
)

272 
	`SAMPLE_PRT
("SAMPLE_IVE_Ann_Mlp_Init fail\n");

273 
ANN_FAIL
;

276 
	`SAMPLE_IVE_A¬_MÕ_Pªdi˘
(&
°A¬Info
);

279 
	`SAMPLE_IVE_A¬_MÕ_Unöô
(&
°A¬Info
);

281 
ANN_FAIL
:

282 
	`SAMPLE_COMM_IVE_IveMpiExô
();

283 
	}
}

	@sample/ive/sample/sample_ive_bg_model.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<£m≠h‹e.h
>

14 
	~<±hªad.h
>

17 
	~"hi_comm⁄.h
"

18 
	~"hi_comm_video.h
"

19 
	~"hi_comm_sys.h
"

20 
	~"hi_comm_ive.h
"

21 
	~"hi_comm_vgs.h
"

22 
	~"hi_comm_vi.h
"

23 
	~"hi_comm_vo.h
"

26 
	~"mpi_vb.h
"

27 
	~"mpi_sys.h
"

28 
	~"mpi_ive.h
"

29 
	~"mpi_vgs.h
"

30 
	~"mpi_vi.h
"

31 
	~"mpi_vo.h
"

34 
	~"ßm∂e_comm_ive.h
"

35 
	~"ßm∂e_comm.h
"

38 
	shiSAMPLE_IVE_BG_MODEL_S


40 
IVE_SRC_IMAGE_S
 
	m°CurImg
;

41 
IVE_IMAGE_S
 
	m°FgFœg
;

42 
IVE_IMAGE_S
 
	m°Img1
;

43 
IVE_IMAGE_S
 
	m°Img2
;

44 
IVE_DST_IMAGE_S
 
	m°BgDiffFg
;

45 
IVE_DST_IMAGE_S
 
	m°FrmDiffFg
;

46 
IVE_DST_IMAGE_S
 
	m°BgImg
;

47 
IVE_DST_IMAGE_S
 
	m°ChgSèImg
;

48 
IVE_DST_IMAGE_S
 
	m°ChgSèFg
;

49 
IVE_DST_IMAGE_S
 
	m°ChgSèLi„
;

50 
IVE_DST_MEM_INFO_S
 
	m°SètD©a
;

51 
IVE_DST_MEM_INFO_S
 
	m°Blob
;

52 
IVE_DATA_S
 
	m°BgModñ
;

53 
IVE_CCL_CTRL_S
 
	m°C˛Cål
;

54 
IVE_FILTER_CTRL_S
 
	m°F…Cål
;

55 
IVE_DILATE_CTRL_S
 
	m°Dû©eCål
;

56 
IVE_ERODE_CTRL_S
 
	m°ErodeCål
;

57 
IVE_MATCH_BG_MODEL_CTRL_S
 
	m°M©chBgModñCål
;

58 
IVE_UPDATE_BG_MODEL_CTRL_S
 
	m°Upd©eBgModñCål
;

59 
SAMPLE_RECT_ARRAY_S
 
	m°Regi⁄
;

60 
HI_U32
 
	mu32FømeC¡
;

61 
HI_U32
 
	mu32UpdC¡
;

62 
HI_U32
 
	mu32PªUpdTime
;

63 
HI_U32
 
	mu32PªChkTime
;

65 } 
	tSAMPLE_IVE_BG_MODEL_S
;

67 
	shiSAMPLE_IVE_BG_MODEL_INFO_S


69 
SAMPLE_IVE_BG_MODEL_S
 
	m°BgModñ
;

70 
HI_BOOL
 
	mbEncode
;

71 
HI_BOOL
 
	mbVo
;

72 } 
	tSAMPLE_IVE_BG_MODEL_INFO_S
;

74 
HI_BOOL
 
	gs_bSt›Sig«l
 = 
HI_FALSE
;

76 
HI_VOID
 
	$SAMPLE_IVE_BgModñ_Unöô
(
SAMPLE_IVE_BG_MODEL_S
* 
p°BgModñ
)

78 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°CurImg
.
u32PhyAddr
[0],Ö°BgModñ->°CurImg.
pu8VúAddr
[0]);

79 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°FgFœg
.
u32PhyAddr
[0],Ö°BgModñ->°FgFœg.
pu8VúAddr
[0]);

80 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°Img1
.
u32PhyAddr
[0],Ö°BgModñ->°Img1.
pu8VúAddr
[0]);

81 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°Img2
.
u32PhyAddr
[0],Ö°BgModñ->°Img2.
pu8VúAddr
[0]);

82 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°BgDiffFg
.
u32PhyAddr
[0],Ö°BgModñ->°BgDiffFg.
pu8VúAddr
[0]);

83 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°FrmDiffFg
.
u32PhyAddr
[0],Ö°BgModñ->°FrmDiffFg.
pu8VúAddr
[0]);

84 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°BgImg
.
u32PhyAddr
[0],Ö°BgModñ->°BgImg.
pu8VúAddr
[0]);

85 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°ChgSèImg
.
u32PhyAddr
[0],Ö°BgModñ->°ChgSèImg.
pu8VúAddr
[0]);

86 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°ChgSèFg
.
u32PhyAddr
[0],Ö°BgModñ->°ChgSèFg.
pu8VúAddr
[0]);

87 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°ChgSèLi„
.
u32PhyAddr
[0],Ö°BgModñ->°ChgSèLi„.
pu8VúAddr
[0]);

88 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°BgModñ
.
u32PhyAddr
,Ö°BgModñ->°BgModñ.
pu8VúAddr
);

89 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°SètD©a
.
u32PhyAddr
,Ö°BgModñ->°SètD©a.
pu8VúAddr
);

90 
	`IVE_MMZ_FREE
(
p°BgModñ
->
°Blob
.
u32PhyAddr
,Ö°BgModñ->°Blob.
pu8VúAddr
);

91 
	}
}

94 
HI_S32
 
	$SAMPLE_IVE_BgModñ_Inô
(
SAMPLE_IVE_BG_MODEL_S
* 
p°BgModñ
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

96 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

97 
HI_U32
 
u32Size
 = 0;

98 
HI_S8
 
as8Mask
[25] = {1, 2, 3, 2, 1,

104 
	`mem£t
(
p°BgModñ
, 0, (
SAMPLE_IVE_BG_MODEL_S
));

106 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°CurImg
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

107 i‡(
s32Rë
 !
HI_SUCCESS
)

109 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

110 
BGMODEL_INIT_FAIL
;

112 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°FgFœg
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

113 i‡(
s32Rë
 !
HI_SUCCESS
)

115 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

116 
BGMODEL_INIT_FAIL
;

118 
	`mem£t
(
p°BgModñ
->
°FgFœg
.
pu8VúAddr
[0], 0,Ö°BgModñ->°FgFœg.
u16Såide
[0] *Ö°BgModñ->°FgFœg.
u16Height
);

119 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°BgDiffFg
, 
IVE_IMAGE_TYPE_S8C1
, 
u16Width
, 
u16Height
);

120 i‡(
s32Rë
 !
HI_SUCCESS
)

122 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

123 
BGMODEL_INIT_FAIL
;

125 
	`mem£t
(
p°BgModñ
->
°BgDiffFg
.
pu8VúAddr
[0], 0,Ö°BgModñ->°BgDiffFg.
u16Såide
[0] *Ö°BgModñ->°BgDiffFg.
u16Height
);

126 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°FrmDiffFg
, 
IVE_IMAGE_TYPE_S8C1
, 
u16Width
, 
u16Height
);

127 i‡(
s32Rë
 !
HI_SUCCESS
)

129 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

130 
BGMODEL_INIT_FAIL
;

132 
	`mem£t
(
p°BgModñ
->
°FrmDiffFg
.
pu8VúAddr
[0], 0,Ö°BgModñ->°FrmDiffFg.
u16Såide
[0] *Ö°BgModñ->°FrmDiffFg.
u16Height
);

135 
p°BgModñ
->
°BgModñ
.
u16Width
 = u16Width * (
IVE_BG_MODEL_PIX_S
);

136 
p°BgModñ
->
°BgModñ
.
u16Height
 = u16Height;

137 
p°BgModñ
->
°BgModñ
.
u16Såide
 = 
	`SAMPLE_COMM_IVE_CÆcSåide
’°BgModñ->°BgModñ.
u16Width
, 
IVE_ALIGN
);

138 
u32Size
 = 
p°BgModñ
->
°BgModñ
.
u16Såide
 *Ö°BgModñ->°BgModñ.
u16Height
;

139 
s32Rë
 = 
	`HI_MPI_SYS_MmzAŒoc
(&
p°BgModñ
->
°BgModñ
.
u32PhyAddr
,

140 (**)&
p°BgModñ
->
°BgModñ
.
pu8VúAddr
, 
NULL
, 
HI_NULL
, 
u32Size
);

141 i‡(
s32Rë
 !
HI_SUCCESS
)

143 
	`SAMPLE_PRT
("HI_MPI_SYS_MmzAŒo¯Áû,Eº‹(%#x)\n", 
s32Rë
);

144 
BGMODEL_INIT_FAIL
;

147 
	`mem£t
(
p°BgModñ
->
°BgModñ
.
pu8VúAddr
, 0, 
u32Size
);

149 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°BgImg
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

150 i‡(
s32Rë
 !
HI_SUCCESS
)

152 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

153 
BGMODEL_INIT_FAIL
;

155 
	`mem£t
(
p°BgModñ
->
°BgImg
.
pu8VúAddr
[0], 0,Ö°BgModñ->°BgImg.
u16Såide
[0] *Ö°BgModñ->°BgImg.
u16Height
);

156 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°ChgSèImg
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

157 i‡(
s32Rë
 !
HI_SUCCESS
)

159 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

160 
BGMODEL_INIT_FAIL
;

162 
	`mem£t
(
p°BgModñ
->
°ChgSèImg
.
pu8VúAddr
[0], 0,Ö°BgModñ->°ChgSèImg.
u16Såide
[0] *Ö°BgModñ->°ChgSèImg.
u16Height
);

163 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°ChgSèFg
, 
IVE_IMAGE_TYPE_S8C1
, 
u16Width
, 
u16Height
);

164 i‡(
s32Rë
 !
HI_SUCCESS
)

166 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

167 
BGMODEL_INIT_FAIL
;

169 
	`mem£t
(
p°BgModñ
->
°ChgSèFg
.
pu8VúAddr
[0], 0,Ö°BgModñ->°ChgSèFg.
u16Såide
[0] *Ö°BgModñ->°ChgSèFg.
u16Height
);

170 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°ChgSèLi„
, 
IVE_IMAGE_TYPE_U16C1
, 
u16Width
, 
u16Height
);

171 i‡(
s32Rë
 !
HI_SUCCESS
)

173 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

174 
BGMODEL_INIT_FAIL
;

176 
	`mem£t
(
p°BgModñ
->
°ChgSèLi„
.
pu8VúAddr
[0], 0,Ö°BgModñ->°ChgSèLi„.
u16Såide
[0] *Ö°BgModñ->°ChgSèLi„.
u16Height
 * (
HI_U16
));

178 
u32Size
 = (
IVE_BG_STAT_DATA_S
);

179 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&
p°BgModñ
->
°SètD©a
, 
u32Size
);

180 i‡(
s32Rë
 !
HI_SUCCESS
)

182 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

183 
BGMODEL_INIT_FAIL
;

185 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°Img1
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

186 i‡(
s32Rë
 !
HI_SUCCESS
)

188 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

189 
BGMODEL_INIT_FAIL
;

191 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°BgModñ
->
°Img2
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

192 i‡(
s32Rë
 !
HI_SUCCESS
)

194 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

195 
BGMODEL_INIT_FAIL
;

197 
u32Size
 = (
IVE_CCBLOB_S
);

198 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&
p°BgModñ
->
°Blob
, 
u32Size
);

199 i‡(
s32Rë
 !
HI_SUCCESS
)

201 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

202 
BGMODEL_INIT_FAIL
;

206 
p°BgModñ
->
°M©chBgModñCål
.
u32CurFrmNum
 = 0;

207 
p°BgModñ
->
°M©chBgModñCål
.
u32PªFrmNum
 = 0;

208 
p°BgModñ
->
°M©chBgModñCål
.
u16TimeThr
 = 20;

209 
p°BgModñ
->
°M©chBgModñCål
.
u8DiffThrCæC€f
 = 0;

210 
p°BgModñ
->
°M©chBgModñCål
.
u8DiffMaxThr
 = 10;

211 
p°BgModñ
->
°M©chBgModñCål
.
u8DiffMöThr
 = 10;

212 
p°BgModñ
->
°M©chBgModñCål
.
u8DiffThrInc
 = 0;

213 
p°BgModñ
->
°M©chBgModñCål
.
u8Fa°Ló∫R©e
 = 4;

214 
p°BgModñ
->
°M©chBgModñCål
.
u8DëChgRegi⁄
 = 0;

216 
p°BgModñ
->
°Upd©eBgModñCål
.
u32CurFrmNum
 = 0;

217 
p°BgModñ
->
°Upd©eBgModñCål
.
u32PªChkTime
 = 0;

218 
p°BgModñ
->
°Upd©eBgModñCål
.
u32FrmChkPîiod
 = 50;

219 
p°BgModñ
->
°Upd©eBgModñCål
.
u32InôMöTime
 = 25;

220 
p°BgModñ
->
°Upd©eBgModñCål
.
u32StyBgMöBÀndTime
 = 100;

221 
p°BgModñ
->
°Upd©eBgModñCål
.
u32StyBgMaxBÀndTime
 = 1500;

222 
p°BgModñ
->
°Upd©eBgModñCål
.
u32DynBgMöBÀndTime
 = 0;

223 
p°BgModñ
->
°Upd©eBgModñCål
.
u32SèticDëMöTime
 = 80;

224 
p°BgModñ
->
°Upd©eBgModñCål
.
u16FgMaxFadeTime
 = 15;

225 
p°BgModñ
->
°Upd©eBgModñCål
.
u16BgMaxFadeTime
 = 60;

226 
p°BgModñ
->
°Upd©eBgModñCål
.
u8StyBgAccTimeR©eThr
 = 80;

227 
p°BgModñ
->
°Upd©eBgModñCål
.
u8ChgBgAccTimeR©eThr
 = 60;

228 
p°BgModñ
->
°Upd©eBgModñCål
.
u8DynBgAccTimeThr
 = 0;

229 
p°BgModñ
->
°Upd©eBgModñCål
.
u8DynBgDïth
 = 3;

230 
p°BgModñ
->
°Upd©eBgModñCål
.
u8BgEffSèR©eThr
 = 90;

231 
p°BgModñ
->
°Upd©eBgModñCål
.
u8Ac˚BgLó∫
 = 0;

232 
p°BgModñ
->
°Upd©eBgModñCål
.
u8DëChgRegi⁄
 = 0;

234 
	`mem˝y
(
p°BgModñ
->
°F…Cål
.
as8Mask
,ás8Mask, 25);

235 
p°BgModñ
->
°F…Cål
.
u8N‹m
 = 7;

236 
	`mem£t
(
p°BgModñ
->
°Dû©eCål
.
au8Mask
, 255, 25);

237 
	`mem£t
(
p°BgModñ
->
°ErodeCål
.
au8Mask
, 255, 25);

238 
p°BgModñ
->
°C˛Cål
.
u16InôAªaThr
 = 16;

239 
p°BgModñ
->
°C˛Cål
.
u16Sãp
 = 4;

241 
p°BgModñ
->
°Regi⁄
.
u16Num
 = 0;

242 
BGMODEL_INIT_FAIL
:

244 i‡(
HI_SUCCESS
 !
s32Rë
)

246 
	`SAMPLE_IVE_BgModñ_Unöô
(
p°BgModñ
);

248  
s32Rë
;

250 
	}
}

252 
HI_S32
 
	$SAMPLE_IVE_BgModñProc
(
SAMPLE_IVE_BG_MODEL_INFO_S
* 
p°BgModñInfo
, 
VIDEO_FRAME_INFO_S
* 
p°FømeInfo
)

254 
HI_S32
 
s32Rë
;

255 
SAMPLE_IVE_BG_MODEL_S
* 
p°BgModñ
;

256 
IVE_CCBLOB_S
* 
p°Blob
;

257 
IVE_DATA_S
 
°Src
;

258 
IVE_DATA_S
 
°D°
;

259 
IVE_HANDLE
 
IveH™dÀ
;

260 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

261 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

262 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

263 
IVE_IMAGE_S
 
°Fg
;

264 
IVE_DMA_CTRL_S
 
°DmaCål
 = {
IVE_DMA_MODE_DIRECT_COPY
, 0};

265 
IVE_THRESH_CTRL_S
 
°ThrCål
 = {
IVE_THRESH_MODE_BINARY
, 0, 0, 0, 0, 255};

267 
HI_U32
 
u32FrmUpdPîiod
 = 15;

268 
HI_U32
 
u32FrmChkPîiod
 = 50;

270 
p°BgModñ
 = &(
p°BgModñInfo
->
°BgModñ
);

272 
°Fg
.
íTy≥
 = 
IVE_IMAGE_TYPE_U8C1
;

273 
°Fg
.
pu8VúAddr
[0] = 
p°BgModñ
->
°BgDiffFg
.pu8VirAddr[0];

274 
°Fg
.
u32PhyAddr
[0] = 
p°BgModñ
->
°BgDiffFg
.u32PhyAddr[0];

275 
°Fg
.
u16Width
 = 
p°BgModñ
->
°BgDiffFg
.u16Width;

276 
°Fg
.
u16Height
 = 
p°BgModñ
->
°BgDiffFg
.u16Height;

277 
°Fg
.
u16Såide
[0] = 
p°BgModñ
->
°BgDiffFg
.u16Stride[0];

278 
p°Blob
 = (
IVE_CCBLOB_S
*)
p°BgModñ
->
°Blob
.
pu8VúAddr
;

281 
p°BgModñ
->
u32FømeC¡
++;

282 
°Src
.
pu8VúAddr
 = (
HI_U8
*)
p°FømeInfo
->
°VFøme
.
pVúAddr
[0];

283 
°Src
.
u32PhyAddr
 = 
p°FømeInfo
->
°VFøme
.u32PhyAddr[0];

284 
°Src
.
u16Såide
 = (
HI_U16
)
p°FømeInfo
->
°VFøme
.
u32Såide
[0];

285 
°Src
.
u16Width
 = (
HI_U16
)
p°FømeInfo
->
°VFøme
.
u32Width
;

286 
°Src
.
u16Height
 = 
p°FømeInfo
->
°VFøme
.
u32Height
;

288 
°D°
.
pu8VúAddr
 = 
p°BgModñ
->
°CurImg
.pu8VirAddr[0];

289 
°D°
.
u32PhyAddr
 = 
p°BgModñ
->
°CurImg
.u32PhyAddr[0];

290 
°D°
.
u16Såide
 = 
p°BgModñ
->
°CurImg
.u16Stride[0];

291 
°D°
.
u16Width
 = 
p°BgModñ
->
°CurImg
.u16Width;

292 
°D°
.
u16Height
 = 
p°BgModñ
->
°CurImg
.u16Height;

293 
°DmaCål
.
íMode
 = 
IVE_DMA_MODE_DIRECT_COPY
;

295 
bIn°™t
 = 
HI_FALSE
;

296 
s32Rë
 = 
	`HI_MPI_IVE_DMA
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°DmaCål
, 
bIn°™t
);

297 i‡(
HI_SUCCESS
 !
s32Rë
)

299 
	`SAMPLE_PRT
("HI_MPI_IVE_DMA faû,Eº‹(%#x)\n", 
s32Rë
);

300  
s32Rë
;

303 
s32Rë
 = 
	`HI_MPI_IVE_Fûãr
(&
IveH™dÀ
, &
p°BgModñ
->
°CurImg
, &p°BgModñ->
°Img1
, &p°BgModñ->
°F…Cål
, 
bIn°™t
);

304 i‡(
HI_SUCCESS
 !
s32Rë
)

306 
	`SAMPLE_PRT
("HI_MPI_IVE_Fûã∏Áû,Eº‹(%#x)\n", 
s32Rë
);

307  
s32Rë
;

310 
p°BgModñ
->
°M©chBgModñCål
.
u32PªFrmNum
 =Ö°BgModñ->°M©chBgModñCål.
u32CurFrmNum
;

311 
p°BgModñ
->
°M©chBgModñCål
.
u32CurFrmNum
 =Ö°BgModñ->
u32FømeC¡
;

313 
s32Rë
 = 
	`HI_MPI_IVE_M©chBgModñ
(&
IveH™dÀ
, &
p°BgModñ
->
°Img1
, &p°BgModñ->
°BgModñ
,

314 &
p°BgModñ
->
°FgFœg
, &p°BgModñ->
°BgDiffFg
, &p°BgModñ->
°FrmDiffFg
,

315 &
p°BgModñ
->
°SètD©a
, &p°BgModñ->
°M©chBgModñCål
, 
bIn°™t
);

316 i‡(
HI_SUCCESS
 !
s32Rë
)

318 
	`SAMPLE_PRT
("HI_MPI_IVE_M©chBgModñ faû,Eº‹(%#x)\n", 
s32Rë
);

319  
s32Rë
;

322 i‡–(0 =
p°BgModñ
->
u32UpdC¡
Ë|| (p°BgModñ->
u32FømeC¡
 >p°BgModñ->
u32PªUpdTime
 + 
u32FrmUpdPîiod
) )

324 
p°BgModñ
->
u32UpdC¡
++;

325 
p°BgModñ
->
u32PªUpdTime
 =Ö°BgModñ->
u32FømeC¡
;

326 
p°BgModñ
->
°Upd©eBgModñCål
.
u32CurFrmNum
 =Ö°BgModñ->
u32FømeC¡
;

327 
p°BgModñ
->
°Upd©eBgModñCål
.
u32PªChkTime
 =ÖstBgModel->u32PreChkTime;

328 
p°BgModñ
->
°Upd©eBgModñCål
.
u32FrmChkPîiod
 = 0;

329 i‡–
p°BgModñ
->
u32FømeC¡
 >p°BgModñ->
u32PªChkTime
 + 
u32FrmChkPîiod
 )

331 
p°BgModñ
->
°Upd©eBgModñCål
.
u32FrmChkPîiod
 = u32FrmChkPeriod;

332 
p°BgModñ
->
u32PªChkTime
 =Ö°BgModñ->
u32FømeC¡
;

335 
s32Rë
 = 
	`HI_MPI_IVE_Upd©eBgModñ
(&
IveH™dÀ
, &
p°BgModñ
->
°BgModñ
, &p°BgModñ->
°FgFœg
,

336 &
p°BgModñ
->
°BgImg
, &p°BgModñ->
°ChgSèImg
, &p°BgModñ->
°ChgSèFg
, &p°BgModñ->
°ChgSèLi„
,

337 &
p°BgModñ
->
°SètD©a
, &p°BgModñ->
°Upd©eBgModñCål
, 
bIn°™t
);

338 i‡(
HI_SUCCESS
 !
s32Rë
)

340 
	`SAMPLE_PRT
("HI_MPI_IVE_Upd©eBgModñ faû,Eº‹(%#x)\n", 
s32Rë
);

341  
s32Rë
;

346 
s32Rë
 = 
	`HI_MPI_IVE_Thªsh
(&
IveH™dÀ
, &
°Fg
, &°Fg, &
°ThrCål
, 
bIn°™t
);

347 i‡(
HI_SUCCESS
 !
s32Rë
)

349 
	`SAMPLE_PRT
("HI_MPI_IVE_Thªsh faû,Eº‹(%#x)\n", 
s32Rë
);

350  
s32Rë
;

353 
s32Rë
 = 
	`HI_MPI_IVE_Dû©e
(&
IveH™dÀ
, &
°Fg
, &
p°BgModñ
->
°Img2
, &p°BgModñ->
°Dû©eCål
, 
bIn°™t
);

354 i‡(
HI_SUCCESS
 !
s32Rë
)

356 
	`SAMPLE_PRT
("HI_MPI_IVE_Dû©êÁû,Eº‹(%#x)\n", 
s32Rë
);

357  
s32Rë
;

360 
s32Rë
 = 
	`HI_MPI_IVE_Erode
(&
IveH™dÀ
, &
p°BgModñ
->
°Img2
, &p°BgModñ->
°Img1
, &p°BgModñ->
°ErodeCål
, 
bIn°™t
);

361 i‡(
HI_SUCCESS
 !
s32Rë
)

363 
	`SAMPLE_PRT
("HI_MPI_IVE_Dû©êÁû,Eº‹(%#x)\n", 
s32Rë
);

364  
s32Rë
;

367 
bIn°™t
 = 
HI_TRUE
;

368 
s32Rë
 = 
	`HI_MPI_IVE_CCL
(&
IveH™dÀ
, &
p°BgModñ
->
°Img1
, &p°BgModñ->
°Blob
, &p°BgModñ->
°C˛Cål
, 
bIn°™t
);

369 i‡(
HI_SUCCESS
 !
s32Rë
)

371 
	`SAMPLE_PRT
("HI_MPI_IVE_CCL faû,Eº‹(%#x)\n", 
s32Rë
);

372  
s32Rë
;

374 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

375 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

377 
	`u¶ìp
(100);

378 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

380 i‡(
HI_SUCCESS
 !
s32Rë
)

382 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

383  
s32Rë
;

386 
	`SAMPLE_COMM_IVE_BlobToRe˘
(
p°Blob
, &(
p°BgModñ
->
°Regi⁄
), 50, 8, 1280, 720);

388  
HI_SUCCESS
;

389 
	}
}

392 
HI_VOID
* 
	$SAMPLE_Ive_ViToVo
(
HI_VOID
* 
pArgs
)

395 
HI_S32
 
s32Rë
;

396 
SAMPLE_IVE_BG_MODEL_INFO_S
* 
p°BgModñInfo
;

397 
SAMPLE_IVE_BG_MODEL_S
* 
p°BgModñ
;

398 
VIDEO_FRAME_INFO_S
 
°FømeInfo
;

399 
VIDEO_FRAME_INFO_S
 
°ExtFømeInfo
;

401 
HI_S32
 
s32GëFømeMûliSec
 = 20000;

402 
HI_S32
 
s32SëFømeMûliSec
 = 20000;

403 
VI_CHN
 
viChn
 = 0;

404 
VI_CHN
 
viExtChn
 = 1;

405 
VO_CHN
 
voChn
 = 0;

406 
VO_LAYER
 
voLayî
 = 0;

407 
VENC_CHN
 
vícChn
 = 0;

408 
HI_BOOL
 
bEncode
;

409 
HI_BOOL
 
bVo
;

411 
p°BgModñInfo
 = (
SAMPLE_IVE_BG_MODEL_INFO_S
*)
pArgs
;

412 
p°BgModñ
 = &(
p°BgModñInfo
->
°BgModñ
);

413 
bEncode
 = 
p°BgModñInfo
->bEncode;

414 
bVo
 = 
p°BgModñInfo
->bVo;

416 
HI_FALSE
 =
s_bSt›Sig«l
)

420 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
viExtChn
, &
°ExtFømeInfo
, 
s32GëFømeMûliSec
);

421 i‡(
HI_SUCCESS
 !
s32Rë
)

423 
	`SAMPLE_PRT
("HI_MPI_VI_GëFømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viExtChn
, 
s32Rë
);

426 
s32Rë
 = 
	`SAMPLE_IVE_BgModñProc
(
p°BgModñInfo
, &
°ExtFømeInfo
);

427 i‡(
HI_SUCCESS
 !
s32Rë
)

429 
	`SAMPLE_PRT
("SAMPLE_IVE_BgModñPro¯Áû,Eº‹(%#x)\n", 
s32Rë
);

431 
s32Rë
 = 
	`HI_MPI_VI_Rñó£Føme
(
viExtChn
, &
°ExtFømeInfo
);

432 i‡(
HI_SUCCESS
 !
s32Rë
)

434 
	`SAMPLE_PRT
("HI_MPI_VI_Rñó£FømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viExtChn
, 
s32Rë
);

437 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
viChn
, &
°FømeInfo
, 
s32GëFømeMûliSec
);

438 i‡(
HI_SUCCESS
 !
s32Rë
)

440 
	`SAMPLE_PRT
("HI_MPI_VI_GëFømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viChn
, 
s32Rë
);

443 
s32Rë
 = 
	`SAMPLE_COMM_VGS_FûlRe˘
(&
°FømeInfo
, &
p°BgModñ
->
°Regi⁄
, 0x0000FF00);

444 i‡(
HI_SUCCESS
 !
s32Rë
)

446 
	`SAMPLE_PRT
("SAMPLE_COMM_VGS_FûlRe˘ faû,Eº‹(%#x)", 
s32Rë
);

447 (
HI_VOID
)
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

452 i‡(
HI_TRUE
 =
bEncode
)

454 
s32Rë
 = 
	`HI_MPI_VENC_SídFøme
(
vícChn
, &
°FømeInfo
, 
s32SëFømeMûliSec
);

455 i‡(
HI_SUCCESS
 !
s32Rë
)

457 
	`SAMPLE_PRT
("HI_MPI_VENC_SídFømêÁû,Eº‹(%#x)\n", 
s32Rë
);

461 i‡(
HI_TRUE
 =
bVo
)

463 
s32Rë
 = 
	`HI_MPI_VO_SídFøme
(
voLayî
, 
voChn
, &
°FømeInfo
, 
s32SëFømeMûliSec
);

464 i‡(
HI_SUCCESS
 !
s32Rë
)

466 
	`SAMPLE_PRT
("HI_MPI_VO_SídFøme,Eº‹(%#x)\n", 
s32Rë
);

471 
s32Rë
 = 
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

472 i‡(
HI_SUCCESS
 !
s32Rë
)

474 
	`SAMPLE_PRT
("HI_MPI_VI_Rñó£FømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viChn
, 
s32Rë
);

477  
HI_NULL
;

478 
	}
}

483 
HI_VOID
 
	$SAMPLE_IVE_BgModñ
(
HI_CHAR
 
chEncode
, HI_CHAR 
chVo
)

485 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

486 
HI_U16
 
u16Width
 = 
VIDEO_WIDTH
;

487 
HI_U16
 
u16Height
 = 
VIDEO_HEIGHT
;

488 
SAMPLE_IVE_BG_MODEL_INFO_S
 
°BgModñInfo
;

489 
SAMPLE_IVE_VI_VO_CONFIG_S
 
°ViVoC⁄fig
;

490 
±hªad_t
 
hIveThªad
;

492 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

494 
s_bSt›Sig«l
 = 
HI_FALSE
;

495 
°ViVoC⁄fig
.
íPicSize
 = 
PIC_HD720
;

496 
°ViVoC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

497 
°ViVoC⁄fig
.
íVoI¡fTy≥
 = 
VO_INTF_BT1120
;

498 
°ViVoC⁄fig
.
°ViC⁄fig
.
íViMode
 = 
SAMPLE_VI_MODE_BT1120_720P
;

499 
°ViVoC⁄fig
.
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

500 
°ViVoC⁄fig
.
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

501 
°ViVoC⁄fig
.
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

502 
°ViVoC⁄fig
.
°ViC⁄fig
.
íWDRMode
 = 
WDR_MODE_NONE
;

503 
s32Rë
 = 
	`SAMPLE_IVE_BgModñ_Inô
(&(
°BgModñInfo
.
°BgModñ
), 
u16Width
, 
u16Height
);

504 i‡(
s32Rë
 !
HI_SUCCESS
)

506 
	`SAMPLE_PRT
("SAMPLE_IVE_BgModel_Init fail\n");

507 
BG_MODEL_END_0
;

510 
°BgModñInfo
.
bEncode
 = '1' =
chEncode
 ? 
HI_TRUE
 : 
HI_FALSE
;

511 
°BgModñInfo
.
bVo
 = '1' =
chVo
 ? 
HI_TRUE
 : 
HI_FALSE
;

513 
s32Rë
 = 
	`SAMPLE_COMM_IVE_BT1120_720P_PªVõw
(&
°ViVoC⁄fig
, 
HI_TRUE
, 
°BgModñInfo
.
bVo
, stBgModñInfo.
bEncode
);

514 i‡(
s32Rë
 !
HI_SUCCESS
)

516 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_BT1120_720P_PreView fail\n");

517 
BG_MODEL_END_1
;

520 
	`±hªad_¸óã
(&
hIveThªad
, 0, 
SAMPLE_Ive_ViToVo
, (
HI_VOID
*)&
°BgModñInfo
);

522 
	`SAMPLE_VI_PAUSE
();

524 
s_bSt›Sig«l
 = 
HI_TRUE
;

525 
	`±hªad_joö
(
hIveThªad
, 
HI_NULL
);

526 
	`SAMPLE_COMM_IVE_BT1120_720P_St›
(&
°ViVoC⁄fig
, 
HI_TRUE
, 
°BgModñInfo
.
bVo
, stBgModñInfo.
bEncode
);

527 
BG_MODEL_END_1
:

528 
	`SAMPLE_IVE_BgModñ_Unöô
(&(
°BgModñInfo
.
°BgModñ
));

529 
BG_MODEL_END_0
:

530 
	`SAMPLE_COMM_IVE_IveMpiExô
();

531 
	}
}

	@sample/ive/sample/sample_ive_canny.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

15 
	~"hi_comm⁄.h
"

16 
	~"hi_comm_video.h
"

17 
	~"hi_comm_sys.h
"

18 
	~"hi_comm_ive.h
"

20 
	~"mpi_vb.h
"

21 
	~"mpi_sys.h
"

22 
	~"mpi_ive.h
"

24 
	~"ßm∂e_comm_ive.h
"

27 
	shiSAMPLE_IVE_CANNY_INFO_S


29 
IVE_SRC_IMAGE_S
 
	m°Src
;

30 
IVE_DST_IMAGE_S
 
	m°Edge
;

31 
IVE_DST_IMAGE_S
 
	m°Mag
;

32 
IVE_MEM_INFO_S
 
	m°Sèck
;

33 
IVE_CANNY_HYS_EDGE_CTRL_S
 
	m°C™nyHysEdgeCål
;

34 
IVE_MAG_AND_ANG_CTRL_S
 
	m°MagAndAngCål
;

35 
IVE_THRESH_U16_CTRL_S
 
	m°ThrU16Cål
;

36 
FILE
* 
	mpFpSrc
;

37 
FILE
* 
	mpFpD°
;

38 } 
	tSAMPLE_IVE_CANNY_INFO_S
;

43 
HI_VOID
 
	$SAMPLE_IVE_C™ny_Unöô
(
SAMPLE_IVE_CANNY_INFO_S
* 
p°C™nyInfo
)

45 
	`IVE_MMZ_FREE
(
p°C™nyInfo
->
°Src
.
u32PhyAddr
[0],Ö°C™nyInfo->°Src.
pu8VúAddr
[0]);

46 
	`IVE_MMZ_FREE
(
p°C™nyInfo
->
°Edge
.
u32PhyAddr
[0],Ö°C™nyInfo->°Edge.
pu8VúAddr
[0]);

47 
	`IVE_MMZ_FREE
(
p°C™nyInfo
->
°Mag
.
u32PhyAddr
[0],Ö°C™nyInfo->°Mag.
pu8VúAddr
[0]);

48 
	`IVE_MMZ_FREE
(
p°C™nyInfo
->
°Sèck
.
u32PhyAddr
,Ö°C™nyInfo->°Sèck.
pu8VúAddr
);

49 
	`IVE_MMZ_FREE
(
p°C™nyInfo
->
°C™nyHysEdgeCål
.
°Mem
.
u32PhyAddr
, \

50 
p°C™nyInfo
->
°C™nyHysEdgeCål
.
°Mem
.
pu8VúAddr
);

52 
	`IVE_CLOSE_FILE
(
p°C™nyInfo
->
pFpSrc
);

53 
	`IVE_CLOSE_FILE
(
p°C™nyInfo
->
pFpD°
);

54 
	}
}

58 
HI_S32
 
	$SAMPLE_IVE_C™ny_Inô
(
SAMPLE_IVE_CANNY_INFO_S
* 
p°C™nyInfo
,

59 
HI_CHAR
* 
pchSrcFûeName
, HI_CHAR* 
pchD°FûeName
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

61 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

62 
HI_U32
 
u32Size
 = 0;

63 
HI_S8
 
as8Mask
[25] = {0, 0, 0, 0, 0,

70 
	`mem£t
(
p°C™nyInfo
, 0, (
SAMPLE_IVE_CANNY_INFO_S
));

71 
	`mem˝y
(
p°C™nyInfo
->
°C™nyHysEdgeCål
.
as8Mask
,ás8Mask, 25);

72 
	`mem˝y
(
p°C™nyInfo
->
°MagAndAngCål
.
as8Mask
,ás8Mask, 25);

73 
p°C™nyInfo
->
°C™nyHysEdgeCål
.
u16HighThr
 = 150;

74 
p°C™nyInfo
->
°C™nyHysEdgeCål
.
u16LowThr
 = 50;

75 
p°C™nyInfo
->
°MagAndAngCål
.
íOutCål
 = 
IVE_MAG_AND_ANG_OUT_CTRL_MAG
;

76 
p°C™nyInfo
->
°MagAndAngCål
.
u16Thr
 = 0;

77 
p°C™nyInfo
->
°ThrU16Cål
.
íMode
 = 
IVE_THRESH_U16_MODE_U16_TO_U8_MIN_MID_MAX
;

78 
p°C™nyInfo
->
°ThrU16Cål
.
u16HighThr
 = 100;

79 
p°C™nyInfo
->
°ThrU16Cål
.
u16LowThr
 = 100;

80 
p°C™nyInfo
->
°ThrU16Cål
.
u8MaxVÆ
 = 255;

81 
p°C™nyInfo
->
°ThrU16Cål
.
u8MidVÆ
 = 0;

82 
p°C™nyInfo
->
°ThrU16Cål
.
u8MöVÆ
 = 0;

84 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°C™nyInfo
->
°Src
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

85 i‡(
s32Rë
 !
HI_SUCCESS
)

87 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

88 
CANNY_INIT_FAIL
;

90 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°C™nyInfo
->
°Edge
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

91 i‡(
s32Rë
 !
HI_SUCCESS
)

93 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

94 
CANNY_INIT_FAIL
;

96 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°C™nyInfo
->
°Mag
, 
IVE_IMAGE_TYPE_U16C1
, 
u16Width
, 
u16Height
);

97 i‡(
s32Rë
 !
HI_SUCCESS
)

99 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

100 
CANNY_INIT_FAIL
;

102 
u32Size
 = 
p°C™nyInfo
->
°Src
.
u16Såide
 [0] *Ö°C™nyInfo->°Src.
u16Height
 * 4 + (
IVE_CANNY_STACK_SIZE_S
);

103 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&
p°C™nyInfo
->
°Sèck
, 
u32Size
);

104 i‡(
s32Rë
 !
HI_SUCCESS
)

106 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

107 
CANNY_INIT_FAIL
;

109 
u32Size
 = 
p°C™nyInfo
->
°Src
.
u16Såide
 [0] *Ö°C™nyInfo->°Src.
u16Height
 * 3;

110 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&
p°C™nyInfo
->
°C™nyHysEdgeCål
.
°Mem
, 
u32Size
);

111 i‡(
s32Rë
 !
HI_SUCCESS
)

113 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

114 
CANNY_INIT_FAIL
;

117 
p°C™nyInfo
->
pFpSrc
 = 
	`f›í
(
pchSrcFûeName
, "rb");

118 i‡(
HI_NULL
 =
p°C™nyInfo
->
pFpSrc
)

120 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchSrcFûeName
);

121 
s32Rë
 = 
HI_FAILURE
;

122 
CANNY_INIT_FAIL
;

125 
p°C™nyInfo
->
pFpD°
 = 
	`f›í
(
pchD°FûeName
, "wb");

126 i‡(
HI_NULL
 =
p°C™nyInfo
->
pFpD°
)

128 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchD°FûeName
);

129 
s32Rë
 = 
HI_FAILURE
;

130 
CANNY_INIT_FAIL
;

133 
CANNY_INIT_FAIL
:

135 i‡(
HI_SUCCESS
 !
s32Rë
)

137 
	`SAMPLE_IVE_C™ny_Unöô
(
p°C™nyInfo
);

139  
s32Rë
;

140 
	}
}

144 
HI_VOID
 
	$SAMPLE_IVE_Com∂©e_C™ny
(
SAMPLE_IVE_CANNY_INFO_S
* 
p°C™nyInfo
)

146 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

147 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

148 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

149 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

150 
IVE_HANDLE
 
IveH™dÀ
;

152 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&(
p°C™nyInfo
->
°Src
),Ö°C™nyInfo->
pFpSrc
);

153 i‡(
s32Rë
 !
HI_SUCCESS
)

155 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_ReadFile fail\n");

159 
s32Rë
 = 
	`HI_MPI_IVE_C™nyHysEdge
(&
IveH™dÀ
, &
p°C™nyInfo
->
°Src
, \

160 &
p°C™nyInfo
->
°Edge
, &p°C™nyInfo->
°Sèck
, \

161 &
p°C™nyInfo
->
°C™nyHysEdgeCål
, 
bIn°™t
);

162 i‡(
s32Rë
 !
HI_SUCCESS
)

164 
	`SAMPLE_PRT
("HI_MPI_IVE_C™nyHysEdgêÁû,Eº‹(%#x)\n", 
s32Rë
);

168 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

169 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

171 
	`u¶ìp
(100);

172 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

174 i‡(
s32Rë
 !
HI_SUCCESS
)

176 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

180 
s32Rë
 = 
	`HI_MPI_IVE_C™nyEdge
(&
p°C™nyInfo
->
°Edge
, &p°C™nyInfo->
°Sèck
);

181 i‡(
s32Rë
 !
HI_SUCCESS
)

183 
	`SAMPLE_PRT
("HI_MPI_IVE_C™nyEdgêÁû,Eº‹(%#x)\n", 
s32Rë
);

187 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°C™nyInfo
->
°Edge
,Ö°C™nyInfo->
pFpD°
);

188 i‡(
s32Rë
 !
HI_SUCCESS
)

190 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

193 
	}
}

197 
HI_VOID
 
	$SAMPLE_IVE_P¨t_C™ny
(
SAMPLE_IVE_CANNY_INFO_S
* 
p°C™nyInfo
)

199 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

200 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

201 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

202 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

203 
IVE_HANDLE
 
IveH™dÀ
;

205 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&
p°C™nyInfo
->
°Src
,Ö°C™nyInfo->
pFpSrc
);

206 i‡(
s32Rë
 !
HI_SUCCESS
)

208 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_ReadFile fail\n");

211 
bIn°™t
 = 
HI_FALSE
;

212 
s32Rë
 = 
	`HI_MPI_IVE_MagAndAng
(&
IveH™dÀ
, &
p°C™nyInfo
->
°Src
, &p°C™nyInfo->
°Mag
, \

213 
HI_NULL
, &
p°C™nyInfo
->
°MagAndAngCål
, 
bIn°™t
);

214 i‡(
s32Rë
 !
HI_SUCCESS
)

216 
	`SAMPLE_PRT
("HI_MPI_IVE_MagAndAng faû,Eº‹(%#x)\n", 
s32Rë
);

219 
bIn°™t
 = 
HI_TRUE
;

220 
s32Rë
 = 
	`HI_MPI_IVE_Thªsh_U16
(&
IveH™dÀ
, &
p°C™nyInfo
->
°Mag
, &p°C™nyInfo->
°Edge
, \

221 &
p°C™nyInfo
->
°ThrU16Cål
, 
bIn°™t
);

222 i‡(
s32Rë
 !
HI_SUCCESS
)

224 
	`SAMPLE_PRT
("HI_MPI_IVE_Thªsh_U16 faû,Eº‹(%#x)\n", 
s32Rë
);

228 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

229 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

231 
	`u¶ìp
(100);

232 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

234 i‡(
s32Rë
 !
HI_SUCCESS
)

236 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

240 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°C™nyInfo
->
°Edge
,Ö°C™nyInfo->
pFpD°
);

241 i‡(
s32Rë
 !
HI_SUCCESS
)

243 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

246 
	}
}

250 
HI_VOID
 
	$SAMPLE_IVE_C™ny
(
HI_CHAR
 
chCom∂ëe
)

252 
SAMPLE_IVE_CANNY_INFO_S
 
°C™nyInfo
;

253 
HI_U16
 
u16Width
 = 720;

254 
HI_U16
 
u16Height
 = 576;

255 
HI_CHAR
* 
pchSrcFûeName
 = "./data/input/canny/canny.yuv";

256 
HI_CHAR
 
achD°FûeName
[
IVE_FILE_NAME_LEN
];

257 
HI_S32
 
s32Rë
;

259 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

261 
	`¢¥ötf
(
achD°FûeName
, 
IVE_FILE_NAME_LEN
, "./d©a/ouçut/ˇ¬y/ˇ¬yout_com∂ëe_%c.yuv", 
chCom∂ëe
);

262 
s32Rë
 = 
	`SAMPLE_IVE_C™ny_Inô
(&
°C™nyInfo
, 
pchSrcFûeName
, 
achD°FûeName
, 
u16Width
, 
u16Height
);

263 i‡(
HI_SUCCESS
 !
s32Rë
)

265 
	`SAMPLE_PRT
("SAMPLE_IVE_Canny_Init fail\n");

266 
CANNY_FAIL
;

269 i‡('0' =
chCom∂ëe
)

271 
	`SAMPLE_IVE_P¨t_C™ny
(&
°C™nyInfo
);

275 
	`SAMPLE_IVE_Com∂©e_C™ny
(&
°C™nyInfo
);

278 
	`SAMPLE_IVE_C™ny_Unöô
(&
°C™nyInfo
);

280 
CANNY_FAIL
:

281 
	`SAMPLE_COMM_IVE_IveMpiExô
();

282 
	}
}

	@sample/ive/sample/sample_ive_gmm.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<£m≠h‹e.h
>

14 
	~<±hªad.h
>

17 
	~"hi_comm⁄.h
"

18 
	~"hi_comm_video.h
"

19 
	~"hi_comm_sys.h
"

20 
	~"hi_comm_ive.h
"

21 
	~"hi_comm_vgs.h
"

22 
	~"hi_comm_vi.h
"

23 
	~"hi_comm_vo.h
"

25 
	~"mpi_vb.h
"

26 
	~"mpi_sys.h
"

27 
	~"mpi_ive.h
"

28 
	~"mpi_vgs.h
"

29 
	~"mpi_vi.h
"

30 
	~"mpi_vo.h
"

33 
	~"ßm∂e_comm_ive.h
"

34 
	~"ßm∂e_comm.h
"

37 
	shiSAMPLE_IVE_GMM_S


39 
IVE_SRC_IMAGE_S
 
	m°Src
;

40 
IVE_DST_IMAGE_S
 
	m°Fg
;

41 
IVE_DST_IMAGE_S
 
	m°Bg
;

42 
IVE_MEM_INFO_S
 
	m°Modñ
;

43 
IVE_IMAGE_S
 
	m°Img1
;

44 
IVE_IMAGE_S
 
	m°Img2
;

45 
IVE_DST_MEM_INFO_S
 
	m°Blob
;

46 
IVE_GMM_CTRL_S
 
	m°GmmCål
;

47 
IVE_CCL_CTRL_S
 
	m°C˛Cål
;

48 
IVE_FILTER_CTRL_S
 
	m°F…Cål
;

49 
IVE_DILATE_CTRL_S
 
	m°Dû©eCål
;

50 
IVE_ERODE_CTRL_S
 
	m°ErodeCål
;

51 
SAMPLE_RECT_ARRAY_S
 
	m°Regi⁄
;

52 } 
	tSAMPLE_IVE_GMM_S
;

54 
	shiSAMPLE_IVE_GMM_INFO_S


56 
SAMPLE_IVE_GMM_S
 
	m°Gmm
;

57 
HI_BOOL
 
	mbEncode
;

58 
HI_BOOL
 
	mbVo
;

59 } 
	tSAMPLE_IVE_GMM_INFO_S
;

61 
HI_BOOL
 
	gs_bSt›Sig«l
 = 
HI_FALSE
;

63 
HI_VOID
 
	$SAMPLE_IVE_Gmm_Unöô
(
SAMPLE_IVE_GMM_S
* 
p°Gmm
)

65 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Src
.
u32PhyAddr
[0],Ö°Gmm->°Src.
pu8VúAddr
[0]);

66 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Fg
.
u32PhyAddr
[0],Ö°Gmm->°Fg.
pu8VúAddr
[0]);

67 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Bg
.
u32PhyAddr
[0],Ö°Gmm->°Bg.
pu8VúAddr
[0]);

68 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Modñ
.
u32PhyAddr
,Ö°Gmm->°Modñ.
pu8VúAddr
);

69 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Img1
.
u32PhyAddr
[0],Ö°Gmm->°Img1.
pu8VúAddr
[0]);

70 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Img2
.
u32PhyAddr
[0],Ö°Gmm->°Img2.
pu8VúAddr
[0]);

71 
	`IVE_MMZ_FREE
(
p°Gmm
->
°Blob
.
u32PhyAddr
,Ö°Gmm->°Blob.
pu8VúAddr
);

72 
	}
}

75 
HI_S32
 
	$SAMPLE_IVE_Gmm_Inô
(
SAMPLE_IVE_GMM_S
* 
p°Gmm
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

77 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

78 
HI_U32
 
u32Size
 = 0;

79 
HI_S8
 
as8Mask
[25] = {1, 2, 3, 2, 1,

86 
	`mem£t
(
p°Gmm
, 0, (
SAMPLE_IVE_GMM_S
));

88 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Gmm
->
°Src
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

89 i‡(
s32Rë
 !
HI_SUCCESS
)

91 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

92 
GMM_INIT_FAIL
;

94 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Gmm
->
°Fg
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

95 i‡(
s32Rë
 !
HI_SUCCESS
)

97 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

98 
GMM_INIT_FAIL
;

100 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Gmm
->
°Bg
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

101 i‡(
s32Rë
 !
HI_SUCCESS
)

103 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

104 
GMM_INIT_FAIL
;

107 
p°Gmm
->
°GmmCål
.
u0q16InôWeight
 = 3276;

108 
p°Gmm
->
°GmmCål
.
u0q16BgR©io
 = 52428;

109 
p°Gmm
->
°GmmCål
.
u22q10MaxV¨
 = (2000 << 10);

110 
p°Gmm
->
°GmmCål
.
u22q10MöV¨
 = (200 << 10);

111 
p°Gmm
->
°GmmCål
.
u22q10Noi£V¨
 = (225 << 10);

112 
p°Gmm
->
°GmmCål
.
u8q8V¨Thr
 = 1600;

113 
p°Gmm
->
°GmmCål
.
u8ModñNum
 = 3;

114 
p°Gmm
->
°GmmCål
.
u0q16Ló∫R©e
 = 327;

116 
u32Size
 = 
p°Gmm
->
°Src
.
u16Width
 *Ö°Gmm->°Src.
u16Height
 *Ö°Gmm->
°GmmCål
.
u8ModñNum
 * 7;

117 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&
p°Gmm
->
°Modñ
, 
u32Size
);

118 i‡(
s32Rë
 !
HI_SUCCESS
)

120 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

121 
GMM_INIT_FAIL
;

123 
	`mem£t
(
p°Gmm
->
°Modñ
.
pu8VúAddr
, 0,Ö°Gmm->°Modñ.
u32Size
);

125 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Gmm
->
°Img1
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

126 i‡(
s32Rë
 !
HI_SUCCESS
)

128 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

129 
GMM_INIT_FAIL
;

131 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Gmm
->
°Img2
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

132 i‡(
s32Rë
 !
HI_SUCCESS
)

134 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

135 
GMM_INIT_FAIL
;

138 
u32Size
 = (
IVE_CCBLOB_S
);

139 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&
p°Gmm
->
°Blob
, 
u32Size
);

140 i‡(
s32Rë
 !
HI_SUCCESS
)

142 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

143 
GMM_INIT_FAIL
;

146 
	`mem˝y
(
p°Gmm
->
°F…Cål
.
as8Mask
,ás8Mask, 25);

147 
p°Gmm
->
°F…Cål
.
u8N‹m
 = 7;

148 
	`mem£t
(
p°Gmm
->
°Dû©eCål
.
au8Mask
, 255, 25);

149 
	`mem£t
(
p°Gmm
->
°ErodeCål
.
au8Mask
, 255, 25);

150 
p°Gmm
->
°C˛Cål
.
u16InôAªaThr
 = 16;

151 
p°Gmm
->
°C˛Cål
.
u16Sãp
 = 4;

153 
GMM_INIT_FAIL
:

155 i‡(
HI_SUCCESS
 !
s32Rë
)

157 
	`SAMPLE_IVE_Gmm_Unöô
(
p°Gmm
);

159  
s32Rë
;

160 
	}
}

162 
HI_S32
 
	$SAMPLE_IVE_GmmProc
(
SAMPLE_IVE_GMM_INFO_S
* 
p°GmmInfo
, 
VIDEO_FRAME_INFO_S
* 
p°ExtFømeInfo
)

164 
HI_S32
 
s32Rë
;

165 
SAMPLE_IVE_GMM_S
* 
p°Gmm
;

166 
IVE_DATA_S
 
°Src
;

167 
IVE_DATA_S
 
°D°
;

168 
IVE_HANDLE
 
IveH™dÀ
;

169 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

170 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

171 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

172 
IVE_CCBLOB_S
* 
p°Blob
;

173 
IVE_DMA_CTRL_S
 
°DmaCål
 = {
IVE_DMA_MODE_DIRECT_COPY
, 0};

175 
p°Gmm
 = &
p°GmmInfo
->
°Gmm
;

176 
p°Blob
 = (
IVE_CCBLOB_S
*)
p°Gmm
->
°Blob
.
pu8VúAddr
;

179 
°Src
.
pu8VúAddr
 = (
HI_U8
*)
p°ExtFømeInfo
->
°VFøme
.
pVúAddr
[0];

180 
°Src
.
u32PhyAddr
 = 
p°ExtFømeInfo
->
°VFøme
.u32PhyAddr[0];

181 
°Src
.
u16Såide
 = (
HI_U16
)
p°ExtFømeInfo
->
°VFøme
.
u32Såide
[0];

182 
°Src
.
u16Width
 = (
HI_U16
)
p°ExtFømeInfo
->
°VFøme
.
u32Width
;

183 
°Src
.
u16Height
 = 
p°ExtFømeInfo
->
°VFøme
.
u32Height
;

185 
°D°
.
pu8VúAddr
 = 
p°Gmm
->
°Src
.pu8VirAddr[0];

186 
°D°
.
u32PhyAddr
 = 
p°Gmm
->
°Src
.u32PhyAddr[0];

187 
°D°
.
u16Såide
 = 
p°Gmm
->
°Src
.u16Stride[0];

188 
°D°
.
u16Width
 = 
p°Gmm
->
°Src
.u16Width;

189 
°D°
.
u16Height
 = 
p°Gmm
->
°Src
.u16Height;

190 
bIn°™t
 = 
HI_FALSE
;

191 
°DmaCål
.
íMode
 = 
IVE_DMA_MODE_DIRECT_COPY
;

192 
s32Rë
 = 
	`HI_MPI_IVE_DMA
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°DmaCål
, 
bIn°™t
);

193 i‡(
HI_SUCCESS
 !
s32Rë
)

195 
	`SAMPLE_PRT
("HI_MPI_IVE_DMA faû,Eº‹(%#x)\n", 
s32Rë
);

196  
s32Rë
;

199 
s32Rë
 = 
	`HI_MPI_IVE_Fûãr
(&
IveH™dÀ
, &
p°Gmm
->
°Src
, &p°Gmm->
°Img1
, &p°Gmm->
°F…Cål
, 
bIn°™t
);

200 i‡(
HI_SUCCESS
 !
s32Rë
)

202 
	`SAMPLE_PRT
("HI_MPI_IVE_Fûã∏Áû,Eº‹(%#x)\n", 
s32Rë
);

203  
s32Rë
;

206 
s32Rë
 = 
	`HI_MPI_IVE_GMM
(&
IveH™dÀ
, &
p°Gmm
->
°Img1
, &p°Gmm->
°Fg
, &p°Gmm->
°Bg
, &p°Gmm->
°Modñ
, &p°Gmm->
°GmmCål
, 
bIn°™t
);

207 i‡(
HI_SUCCESS
 !
s32Rë
)

209 
	`SAMPLE_PRT
("HI_MPI_IVE_GMM faû,Eº‹(%#x)\n", 
s32Rë
);

210  
s32Rë
;

213 
s32Rë
 = 
	`HI_MPI_IVE_Dû©e
(&
IveH™dÀ
, &
p°Gmm
->
°Fg
, &p°Gmm->
°Img1
, &p°Gmm->
°Dû©eCål
, 
bIn°™t
);

214 i‡(
HI_SUCCESS
 !
s32Rë
)

216 
	`SAMPLE_PRT
("HI_MPI_IVE_Dû©êÁû,Eº‹(%#x)\n", 
s32Rë
);

217  
s32Rë
;

220 
s32Rë
 = 
	`HI_MPI_IVE_Erode
(&
IveH™dÀ
, &
p°Gmm
->
°Img1
, &p°Gmm->
°Img2
, &p°Gmm->
°ErodeCål
, 
bIn°™t
);

221 i‡(
HI_SUCCESS
 !
s32Rë
)

223 
	`SAMPLE_PRT
("HI_MPI_IVE_ErodêÁû,Eº‹(%#x)\n", 
s32Rë
);

224  
s32Rë
;

227 
bIn°™t
 = 
HI_TRUE
;

228 
s32Rë
 = 
	`HI_MPI_IVE_CCL
(&
IveH™dÀ
, &
p°Gmm
->
°Img2
, &p°Gmm->
°Blob
, &p°Gmm->
°C˛Cål
, 
bIn°™t
);

229 i‡(
HI_SUCCESS
 !
s32Rë
)

231 
	`SAMPLE_PRT
("HI_MPI_IVE_CCL faû,Eº‹(%#x)\n", 
s32Rë
);

232  
s32Rë
;

235 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

236 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

238 
	`u¶ìp
(100);

239 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

241 i‡(
HI_SUCCESS
 !
s32Rë
)

243 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

244  
s32Rë
;

247 
	`SAMPLE_COMM_IVE_BlobToRe˘
(
p°Blob
, &(
p°Gmm
->
°Regi⁄
), 50, 8, 1280, 720);

249  
HI_SUCCESS
;

250 
	}
}

253 
HI_VOID
* 
	$SAMPLE_IVE_ViToVo
(
HI_VOID
* 
pArgs
)

255 
HI_S32
 
s32Rë
;

256 
SAMPLE_IVE_GMM_INFO_S
* 
p°GmmInfo
;

257 
SAMPLE_IVE_GMM_S
* 
p°Gmm
;

258 
VIDEO_FRAME_INFO_S
 
°FømeInfo
;

259 
VIDEO_FRAME_INFO_S
 
°ExtFømeInfo
;

260 
HI_S32
 
s32GëFømeMûliSec
 = 20000;

261 
HI_S32
 
s32SëFømeMûliSec
 = 20000;

262 
VO_LAYER
 
voLayî
 = 0;

263 
VI_CHN
 
viChn
 = 0;

264 
VI_CHN
 
viExtChn
 = 1;

265 
VO_CHN
 
voChn
 = 0;

266 
VENC_CHN
 
vícChn
 = 0;

267 
HI_BOOL
 
bEncode
;

268 
HI_BOOL
 
bVo
;

270 
p°GmmInfo
 = (
SAMPLE_IVE_GMM_INFO_S
*)
pArgs
;

271 
p°Gmm
 = &(
p°GmmInfo
->
°Gmm
);

272 
bEncode
 = 
p°GmmInfo
->bEncode;

273 
bVo
 = 
p°GmmInfo
->bVo;

275 
HI_FALSE
 =
s_bSt›Sig«l
)

278 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
viExtChn
, &
°ExtFømeInfo
, 
s32GëFømeMûliSec
);

279 i‡(
HI_SUCCESS
 !
s32Rë
)

281 
	`SAMPLE_PRT
("HI_MPI_VI_GëFømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viExtChn
, 
s32Rë
);

284 
s32Rë
 = 
	`SAMPLE_IVE_GmmProc
(
p°GmmInfo
, &
°ExtFømeInfo
);

285 i‡(
HI_SUCCESS
 !
s32Rë
)

287 
	`SAMPLE_PRT
("SAMPLE_IVE_MdPro¯Áû,Eº‹(%#x)\n", 
s32Rë
);

289 
s32Rë
 = 
	`HI_MPI_VI_Rñó£Føme
(
viExtChn
, &
°ExtFømeInfo
);

290 i‡(
HI_SUCCESS
 !
s32Rë
)

292 
	`SAMPLE_PRT
("HI_MPI_VI_Rñó£FømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viExtChn
, 
s32Rë
);

295 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
viChn
, &
°FømeInfo
, 
s32GëFømeMûliSec
);

296 i‡(
HI_SUCCESS
 !
s32Rë
)

298 
	`SAMPLE_PRT
("HI_MPI_VI_GëFømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viChn
, 
s32Rë
);

302 
s32Rë
 = 
	`SAMPLE_COMM_VGS_FûlRe˘
(&
°FømeInfo
, &
p°Gmm
->
°Regi⁄
, 0x0000FF00);

303 i‡(
HI_SUCCESS
 !
s32Rë
)

305 
	`SAMPLE_PRT
("SAMPLE_COMM_VGS_FûlRe˘ faû,Eº‹(%#x)\n", 
s32Rë
);

306 (
HI_VOID
)
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

310 i‡(
HI_TRUE
 =
bEncode
)

312 
s32Rë
 = 
	`HI_MPI_VENC_SídFøme
(
vícChn
, &
°FømeInfo
, 
s32SëFømeMûliSec
);

313 i‡(
HI_SUCCESS
 !
s32Rë
)

315 
	`SAMPLE_PRT
("HI_MPI_VENC_SídFømêÁû,Eº‹(%#x)\n", 
s32Rë
);

320 i‡(
HI_TRUE
 =
bVo
)

322 
s32Rë
 = 
	`HI_MPI_VO_SídFøme
(
voLayî
, 
voChn
, &
°FømeInfo
, 
s32SëFømeMûliSec
);

323 i‡(
HI_SUCCESS
 !
s32Rë
)

325 
	`SAMPLE_PRT
("HI_MPI_VO_SídFømêÁû,Eº‹(%#x)\n", 
s32Rë
);

330 
s32Rë
 = 
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

331 i‡(
HI_SUCCESS
 !
s32Rë
)

333 
	`SAMPLE_PRT
("HI_MPI_VI_Rñó£FømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viChn
, 
s32Rë
);

336  
HI_NULL
;

337 
	}
}

343 
HI_VOID
 
	$SAMPLE_IVE_Gmm
(
HI_CHAR
 
chEncode
, HI_CHAR 
chVo
)

346 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

347 
HI_U16
 
u16Width
 = 
VIDEO_WIDTH
;

348 
HI_U16
 
u16Height
 = 
VIDEO_HEIGHT
;

349 
SAMPLE_IVE_GMM_INFO_S
 
°GmmInfo
;

350 
SAMPLE_IVE_VI_VO_CONFIG_S
 
°ViVoC⁄fig
;

351 
±hªad_t
 
hIveThªad
;

353 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

355 
s_bSt›Sig«l
 = 
HI_FALSE
;

356 
°ViVoC⁄fig
.
íPicSize
 = 
PIC_HD720
;

357 
°ViVoC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

358 
°ViVoC⁄fig
.
íVoI¡fTy≥
 = 
VO_INTF_BT1120
;

359 
°ViVoC⁄fig
.
°ViC⁄fig
.
íViMode
 = 
SAMPLE_VI_MODE_BT1120_720P
;

360 
°ViVoC⁄fig
.
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

361 
°ViVoC⁄fig
.
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

362 
°ViVoC⁄fig
.
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

363 
°ViVoC⁄fig
.
°ViC⁄fig
.
íWDRMode
 = 
WDR_MODE_NONE
;

364 
s32Rë
 = 
	`SAMPLE_IVE_Gmm_Inô
(&
°GmmInfo
.
°Gmm
, 
u16Width
, 
u16Height
);;

365 i‡(
s32Rë
 !
HI_SUCCESS
)

367 
	`SAMPLE_PRT
("Md init fail\n");

368 
GMM_END_0
;

372 
°GmmInfo
.
bEncode
 = '1' =
chEncode
 ? 
HI_TRUE
 : 
HI_FALSE
;

373 
°GmmInfo
.
bVo
 = '1' =
chVo
 ? 
HI_TRUE
 : 
HI_FALSE
;

375 
s32Rë
 = 
	`SAMPLE_COMM_IVE_BT1120_720P_PªVõw
(&
°ViVoC⁄fig
, 
HI_TRUE
, 
°GmmInfo
.
bVo
, stGmmInfo.
bEncode
);

376 i‡(
s32Rë
 !
HI_SUCCESS
)

378 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_BT1120_720P_PreView fail\n");

379 
GMM_END_1
;

383 
	`±hªad_¸óã
(&
hIveThªad
, 0, 
SAMPLE_IVE_ViToVo
, (
HI_VOID
*)&
°GmmInfo
);

385 
	`SAMPLE_VI_PAUSE
();

387 
s_bSt›Sig«l
 = 
HI_TRUE
;

388 
	`±hªad_joö
(
hIveThªad
, 
HI_NULL
);

389 
	`SAMPLE_COMM_IVE_BT1120_720P_St›
(&
°ViVoC⁄fig
, 
HI_TRUE
, 
°GmmInfo
.
bVo
, stGmmInfo.
bEncode
);

390 
GMM_END_1
:

391 
	`SAMPLE_IVE_Gmm_Unöô
(&
°GmmInfo
.
°Gmm
);

392 
GMM_END_0
:

393 
	`SAMPLE_COMM_IVE_IveMpiExô
();

394 
	}
}

	@sample/ive/sample/sample_ive_main.h

1 #i‚de‡
__SAMPLE_IVE_MAIN_H__


2 
	#__SAMPLE_IVE_MAIN_H__


	)

3 
	~"hi_ty≥.h
"

7 
HI_VOID
 
SAMPLE_IVE_C™ny
(
HI_CHAR
 
chCom∂ëe
);

11 
HI_VOID
 
SAMPLE_IVE_BgModñ
(
HI_CHAR
 
chEncode
, HI_CHAR 
chVo
);

15 
HI_VOID
 
SAMPLE_IVE_Gmm
(
HI_CHAR
 
chEncode
, HI_CHAR 
chVo
);

19 
HI_VOID
 
SAMPLE_IVE_Od
(HI_VOID);

23 
HI_VOID
 
SAMPLE_IVE_Te°Mem‹y
(HI_VOID);

27 
HI_VOID
 
SAMPLE_IVE_Sobñ
(HI_VOID);

31 
HI_VOID
 
SAMPLE_IVE_A¬
(HI_VOID);

35 
HI_VOID
 
SAMPLE_IVE_St_Lk
(HI_VOID);

39 
HI_VOID
 
SAMPLE_IVE_Svm
(HI_VOID);

	@sample/ive/sample/sample_ive_od.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<m©h.h
>

14 
	~<±hªad.h
>

16 
	~"hi_comm⁄.h
"

17 
	~"hi_comm_video.h
"

18 
	~"hi_comm_sys.h
"

19 
	~"hi_comm_ive.h
"

20 
	~"hi_comm_vgs.h
"

21 
	~"hi_comm_vi.h
"

22 
	~"hi_comm_vo.h
"

25 
	~"mpi_vb.h
"

26 
	~"mpi_sys.h
"

27 
	~"mpi_ive.h
"

28 
	~"mpi_vgs.h
"

29 
	~"mpi_vi.h
"

30 
	~"mpi_vo.h
"

33 
	~"ßm∂e_comm_ive.h
"

35 
	shiSAMPLE_IVE_OD_S


37 
IVE_SRC_IMAGE_S
 
	m°Src
;

38 
IVE_DST_IMAGE_S
 
	m°I¡eg
;

39 
IVE_INTEG_CTRL_S
 
	m°I¡egCål
;

40 
HI_U32
 
	mu32W
;

41 
HI_U32
 
	mu32H
;

42 } 
	tSAMPLE_IVE_OD_S
;

44 
HI_BOOL
 
	gs_bSt›Sig«l
 = 
HI_FALSE
;

46 
HI_VOID
 
	$SAMPLE_IVE_Od_Unöô
(
SAMPLE_IVE_OD_S
* 
p°Od
)

48 
	`IVE_MMZ_FREE
(
p°Od
->
°Src
.
u32PhyAddr
[0],Ö°Od->°Src.
pu8VúAddr
[0]);

49 
	`IVE_MMZ_FREE
(
p°Od
->
°I¡eg
.
u32PhyAddr
[0],Ö°Od->°I¡eg.
pu8VúAddr
[0]);

51 
	}
}

53 
HI_S32
 
	$SAMPLE_IVE_Od_Inô
(
SAMPLE_IVE_OD_S
* 
p°Od
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

55 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

57 
	`mem£t
(
p°Od
, 0, (
SAMPLE_IVE_OD_S
));

59 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°Od
->
°Src
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

60 i‡(
s32Rë
 !
HI_SUCCESS
)

62 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

63 
OD_INIT_FAIL
;

65 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°Od
->
°I¡eg
, 
IVE_IMAGE_TYPE_U64C1
, 
u16Width
, 
u16Height
);

66 i‡(
s32Rë
 !
HI_SUCCESS
)

68 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

69 
OD_INIT_FAIL
;

72 
p°Od
->
°I¡egCål
.
íOutCål
 = 
IVE_INTEG_OUT_CTRL_COMBINE
;

74 
p°Od
->
u32W
 = 
u16Width
 / 
IVE_CHAR_CALW
;

75 
p°Od
->
u32H
 = 
u16Height
 / 
IVE_CHAR_CALH
;

78 
OD_INIT_FAIL
:

80 i‡(
HI_SUCCESS
 !
s32Rë
)

82 
	`SAMPLE_IVE_Od_Unöô
(
p°Od
);

84  
s32Rë
;

86 
	}
}

88 
HI_S32
 
	$SAMPLE_IVE_Löór2DCœssi„r
(
POINT_S
* 
p°Ch¨
, 
HI_S32
 
s32Ch¨Num
,

89 
POINT_S
* 
p°LöórPoöt
, 
HI_S32
 
s32Löó∫um
 )

91 
HI_S32
 
s32Resu…Num
;

92 
HI_S32
 
i
, 
j
;

93 
HI_BOOL
 
bTe°Fœg
;

94 
POINT_S
* 
p°NextLöórPoöt
;

96 
s32Resu…Num
 = 0;

97 
p°NextLöórPoöt
 = &
p°LöórPoöt
[1];

98 
i
 = 0; i < 
s32Ch¨Num
; i++)

100 
bTe°Fœg
 = 
HI_TRUE
;

101 
j
 = 0; j < (
s32Löó∫um
 - 1); j++)

103 i‡––(
p°Ch¨
[
i
].
s32Y
 - 
p°LöórPoöt
[
j
].s32YË* (
p°NextLöórPoöt
[j].
s32X
 -ÖstLinearPoint[j].s32X) >

104 (
p°Ch¨
[
i
].
s32X
 - 
p°LöórPoöt
[
j
].s32XË* (
p°NextLöórPoöt
[j].
s32Y
 -ÖstLinearPoint[j].s32Y)

105 && (
p°NextLöórPoöt
[
j
].
s32X
 !
p°LöórPoöt
[j].s32X))

106 || ( (
p°Ch¨
[
i
].
s32X
 > 
p°LöórPoöt
[
j
].s32XË&& (
p°NextLöórPoöt
[j].s32X ==ÖstLinearPoint[j].s32X) ))

108 
bTe°Fœg
 = 
HI_FALSE
;

113 i‡(
HI_TRUE
 =
bTe°Fœg
)

115 
s32Resu…Num
++;

118  
s32Resu…Num
;

119 
	}
}

122 
HI_VOID
* 
	$SAMPLE_IVE_OdProc
(
HI_VOID
* 
pArgs
)

124 
HI_S32
 
s32Rë
;

125 
HI_U32
 
i
, 
j
;

126 
SAMPLE_IVE_OD_S
* 
p°Od
;

127 
VIDEO_FRAME_INFO_S
 
°FømeInfo
;

128 
VI_CHN
 
viChn
 = 0;

129 
HI_S32
 
s32GëFømeMûliSec
 = 2000;

130 
HI_S32
 
s32SëFømeMûliSec
 = 2000;

131 
IVE_DATA_S
 
°Src
;

132 
IVE_DATA_S
 
°D°
;

133 
IVE_HANDLE
 
IveH™dÀ
;

134 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

135 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

136 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

137 
VO_LAYER
 
voLayî
 = 0;

138 
VO_CHN
 
voChn
 = 0;

140 
POINT_S
 
°Ch¨
[
IVE_CHAR_NUM
];

141 
POINT_S
 
a°Poöts
[10] = {{0, 0}};

142 
IVE_LINEAR_DATA_S
 
°IveLöîD©a
;

143 
HI_U64
* 
pu64VúD©a
 = 
HI_NULL
;

144 
IVE_DMA_CTRL_S
 
°DmaCål
 = {
IVE_DMA_MODE_DIRECT_COPY
, 0, 0, 0, 0};

146 
HI_U64
 
u64T›Le·
, 
u64T›Right
, 
u64BtmLe·
, 
u64BtmRight
;

147 
HI_U64
* 
pu64T›Row
, *
pu64BtmRow
;

148 
HI_U64
 
u64BlockSum
, 
u64BlockSq
;

149 
HI_FLOAT
 
fSqV¨
;

151 
p°Od
 = (
SAMPLE_IVE_OD_S
*)(
pArgs
);

152 
pu64VúD©a
 = (
HI_U64
*)
p°Od
->
°I¡eg
.
pu8VúAddr
[0];

154 
°IveLöîD©a
.
p°LöórPoöt
 = &
a°Poöts
[0];

155 
°IveLöîD©a
.
s32LöórNum
 = 2;

156 
°IveLöîD©a
.
s32ThªshNum
 = 
IVE_CHAR_NUM
 / 2;

157 
°IveLöîD©a
.
p°LöórPoöt
[0].
s32X
 = 80;

158 
°IveLöîD©a
.
p°LöórPoöt
[0].
s32Y
 = 0;

159 
°IveLöîD©a
.
p°LöórPoöt
[1].
s32X
 = 80;

160 
°IveLöîD©a
.
p°LöórPoöt
[1].
s32Y
 = 20;

162 
HI_FALSE
 =
s_bSt›Sig«l
)

165 
s32Rë
 = 
	`HI_MPI_VI_GëFøme
(
viChn
, &
°FømeInfo
, 
s32GëFømeMûliSec
);

166 i‡(
HI_SUCCESS
 !
s32Rë
)

168 
	`SAMPLE_PRT
("HI_MPI_VI_GëFømêÁû,Eº‹(%#x)\n", 
s32Rë
);

171 
°Src
.
pu8VúAddr
 = (
HI_U8
*)
°FømeInfo
.
°VFøme
.
pVúAddr
[0];

172 
°Src
.
u32PhyAddr
 = 
°FømeInfo
.
°VFøme
.u32PhyAddr[0];

173 
°Src
.
u16Såide
 = (
HI_U16
)
°FømeInfo
.
°VFøme
.
u32Såide
[0];

174 
°Src
.
u16Width
 = (
HI_U16
)
°FømeInfo
.
°VFøme
.
u32Width
;

175 
°Src
.
u16Height
 = 
°FømeInfo
.
°VFøme
.
u32Height
;

177 
°D°
.
pu8VúAddr
 = 
p°Od
->
°Src
.pu8VirAddr[0];

178 
°D°
.
u32PhyAddr
 = 
p°Od
->
°Src
.u32PhyAddr[0];

179 
°D°
.
u16Såide
 = (
HI_U16
)
°FømeInfo
.
°VFøme
.
u32Såide
[0];

180 
°D°
.
u16Width
 = (
HI_U16
)
°FømeInfo
.
°VFøme
.
u32Width
;

181 
°D°
.
u16Height
 = 
°FømeInfo
.
°VFøme
.
u32Height
;

183 
bIn°™t
 = 
HI_FALSE
;

184 
s32Rë
 = 
	`HI_MPI_IVE_DMA
(&
IveH™dÀ
, &
°Src
, &
°D°
, &
°DmaCål
, 
bIn°™t
);

185 i‡(
HI_SUCCESS
 !
s32Rë
)

187 
	`SAMPLE_PRT
("HI_MPI_IVE_DMA faû,Eº‹(%#x)\n", 
s32Rë
);

188 (
HI_VOID
)
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

192 
bIn°™t
 = 
HI_TRUE
;

193 
s32Rë
 = 
	`HI_MPI_IVE_I¡eg
(&
IveH™dÀ
, &
p°Od
->
°Src
, &p°Od->
°I¡eg
, &p°Od->
°I¡egCål
, 
bIn°™t
);

194 i‡(
HI_SUCCESS
 !
s32Rë
)

196 
	`SAMPLE_PRT
("HI_MPI_IVE_I¡eg faû,Eº‹(%#x)\n", 
s32Rë
);

197 (
HI_VOID
)
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

201 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

202 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

204 
	`u¶ìp
(100);

205 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

207 i‡(
HI_SUCCESS
 !
s32Rë
)

209 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

210 (
HI_VOID
)
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

214 
j
 = 0; j < 
IVE_CHAR_CALH
; j++)

216 
pu64T›Row
 = (0 =
j
Ë? (
pu64VúD©a
Ë: (Öu64VúD©®+ (j * 
p°Od
->
u32H
 - 1Ë*Ö°Od->
°I¡eg
.
u16Såide
[0]);

217 
pu64BtmRow
 = 
pu64VúD©a
 + ((
j
 + 1Ë* 
p°Od
->
u32H
 - 1Ë*Ö°Od->
°I¡eg
.
u16Såide
[0];

219 
i
 = 0; i < 
IVE_CHAR_CALW
; i++)

221 
u64T›Le·
 = (0 =
j
Ë? (0Ë: ((0 =
i
Ë? (0Ë: (
pu64T›Row
[ò* 
p°Od
->
u32W
 - 1]));

222 
u64T›Right
 = (0 =
j
Ë? (0Ë: (
pu64T›Row
[(
i
 + 1Ë* 
p°Od
->
u32W
 - 1]);

223 
u64BtmLe·
 = (0 =
i
Ë? (0Ë: (
pu64BtmRow
[ò* 
p°Od
->
u32W
 - 1]);

224 
u64BtmRight
 = 
pu64BtmRow
[(
i
 + 1Ë* 
p°Od
->
u32W
 - 1];

226 
u64BlockSum
 = (
u64T›Le·
 & 0xfffffffLLË+ (
u64BtmRight
 & 0xfffffffLL)

227 - (
u64BtmLe·
 & 0xfffffffLLË- (
u64T›Right
 & 0xfffffffLL);

229 
u64BlockSq
 = (
u64T›Le·
 >> 28Ë+ (
u64BtmRight
 >> 28)

230 - (
u64BtmLe·
 >> 28Ë- (
u64T›Right
 >> 28);

233 
°Ch¨
[
j
 * 
IVE_CHAR_CALW
 + 
i
].
s32X
 = 
u64BlockSum
 / (
p°Od
->
u32W
 *Ö°Od->
u32H
);

235 
fSqV¨
 = 
u64BlockSq
 / (
p°Od
->
u32W
 *Ö°Od->
u32H
Ë- 
°Ch¨
[
j
 * 
IVE_CHAR_CALW
 + 
i
].
s32X
 * stChar[j * IVE_CHAR_CALW + i].s32X;

236 
°Ch¨
[
j
 * 
IVE_CHAR_CALW
 + 
i
].
s32Y
 = (
HI_U32
)
	`sqπ
(
fSqV¨
);

240 
s32Rë
 = 
	`SAMPLE_IVE_Löór2DCœssi„r
(&
°Ch¨
[0], 
IVE_CHAR_NUM
,

241 
°IveLöîD©a
.
p°LöórPoöt
, stIveLöîD©a.
s32LöórNum
);

242 i‡(
s32Rë
 > 
°IveLöîD©a
.
s32ThªshNum
)

244 
	`SAMPLE_PRT
("\033[0;31m Occlusion detected!\033[0;39m\n");

248 
	`SAMPLE_PRT
("Enterány keyÅo quit!\n");

252 
s32Rë
 = 
	`HI_MPI_VO_SídFøme
(
voLayî
, 
voChn
, &
°FømeInfo
, 
s32SëFømeMûliSec
);

253 i‡(
HI_SUCCESS
 !
s32Rë
)

255 
	`SAMPLE_PRT
("HI_MPI_VO_SídFømêÁû,Eº‹(%#x)\n", 
s32Rë
);

256 (
HI_VOID
)
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

260 
s32Rë
 = 
	`HI_MPI_VI_Rñó£Føme
(
viChn
, &
°FømeInfo
);

261 i‡(
HI_SUCCESS
 !
s32Rë
)

263 
	`SAMPLE_PRT
("HI_MPI_VI_Rñó£FømêÁû,ViChn(%d),Eº‹(%#x)\n", 
viChn
, 
s32Rë
);

267  
HI_NULL
;

268 
	}
}

271 
HI_VOID
 
	$SAMPLE_IVE_Od
(
HI_VOID
)

273 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

274 
HI_U16
 
u16Width
 = 1920;

275 
HI_U16
 
u16Height
 = 1080;

277 
SAMPLE_IVE_OD_S
 
°Od
;

278 
SAMPLE_IVE_VI_VO_CONFIG_S
 
°ViVoC⁄fig
;

279 
±hªad_t
 
hIveThªad
;

281 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

283 
s_bSt›Sig«l
 = 
HI_FALSE
;

284 
°ViVoC⁄fig
.
íPicSize
 = 
PIC_HD720
;

285 
°ViVoC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

286 
°ViVoC⁄fig
.
íVoI¡fTy≥
 = 
VO_INTF_BT1120
;

287 
°ViVoC⁄fig
.
°ViC⁄fig
.
íViMode
 = 
SAMPLE_VI_MODE_BT1120_720P
;

288 
°ViVoC⁄fig
.
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

289 
°ViVoC⁄fig
.
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

290 
°ViVoC⁄fig
.
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

291 
°ViVoC⁄fig
.
°ViC⁄fig
.
íWDRMode
 = 
WDR_MODE_NONE
;

293 
s32Rë
 = 
	`SAMPLE_IVE_Od_Inô
(&
°Od
, 
u16Width
, 
u16Height
);

294 i‡(
s32Rë
 !
HI_SUCCESS
)

296 
	`SAMPLE_PRT
("SAMPLE_IVE_Detect_Init fail\n");

297 
OD_END_0
;

300 
s32Rë
 = 
	`SAMPLE_COMM_IVE_BT1120_720P_PªVõw
(&
°ViVoC⁄fig
, 
HI_FALSE
, 
HI_TRUE
, HI_FALSE);

301 i‡(
s32Rë
 !
HI_SUCCESS
)

303 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_BT1120_720P_PreView fail\n");

304 
OD_END_1
;

307 
	`±hªad_¸óã
(&
hIveThªad
, 0, 
SAMPLE_IVE_OdProc
, (
HI_VOID
*)&
°Od
);

309 
	`SAMPLE_VI_PAUSE
();

311 
s_bSt›Sig«l
 = 
HI_TRUE
;

312 
	`±hªad_joö
(
hIveThªad
, 
HI_NULL
);

313 
	`SAMPLE_COMM_IVE_BT1120_720P_St›
(&
°ViVoC⁄fig
, 
HI_FALSE
, 
HI_TRUE
, HI_FALSE);

315 
OD_END_1
:

316 
	`SAMPLE_IVE_Od_Unöô
(&(
°Od
));

317 
OD_END_0
:

318 
	`SAMPLE_COMM_IVE_IveMpiExô
();

319 
	}
}

	@sample/ive/sample/sample_ive_sobel_with_cached_mem.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

15 
	~"hi_comm⁄.h
"

16 
	~"hi_comm_video.h
"

17 
	~"hi_comm_sys.h
"

18 
	~"hi_comm_ive.h
"

20 
	~"mpi_vb.h
"

21 
	~"mpi_sys.h
"

22 
	~"mpi_ive.h
"

24 
	~"ßm∂e_comm_ive.h
"

27 
	shiSAMPLE_IVE_SOBEL_S


29 
IVE_SRC_IMAGE_S
 
	m°Src1
;

30 
IVE_SRC_IMAGE_S
 
	m°Src2
;

31 
IVE_DST_IMAGE_S
 
	m°D°H1
;

32 
IVE_DST_IMAGE_S
 
	m°D°H2
;

33 
IVE_DST_IMAGE_S
 
	m°D°V1
;

34 
IVE_DST_IMAGE_S
 
	m°D°V2
;

35 
IVE_SOBEL_CTRL_S
 
	m°SobñCål
;

36 
FILE
* 
	mpFpSrc
;

37 
FILE
* 
	mpFpD°H1
;

38 
FILE
* 
	mpFpD°H2
;

39 
FILE
* 
	mpFpD°V1
;

40 
FILE
* 
	mpFpD°V2
;

41 } 
	tSAMPLE_IVE_SOBEL_S
;

43 
HI_BOOL
 
	gs_bFlushCached
 = 
HI_TRUE
;

47 
HI_VOID
 
	$SAMPLE_IVE_Sobñ_Unöô
(
SAMPLE_IVE_SOBEL_S
* 
p°Sobñ
)

49 
	`IVE_MMZ_FREE
(
p°Sobñ
->
°Src1
.
u32PhyAddr
[0],Ö°Sobñ->°Src1.
pu8VúAddr
[0]);

50 
	`IVE_MMZ_FREE
(
p°Sobñ
->
°Src2
.
u32PhyAddr
[0],Ö°Sobñ->°Src2.
pu8VúAddr
[0]);

51 
	`IVE_MMZ_FREE
(
p°Sobñ
->
°D°H1
.
u32PhyAddr
[0],Ö°Sobñ->°D°H1.
pu8VúAddr
[0]);

52 
	`IVE_MMZ_FREE
(
p°Sobñ
->
°D°H2
.
u32PhyAddr
[0],Ö°Sobñ->°D°H2.
pu8VúAddr
[0]);

53 
	`IVE_MMZ_FREE
(
p°Sobñ
->
°D°V1
.
u32PhyAddr
[0],Ö°Sobñ->°D°V1.
pu8VúAddr
[0]);

54 
	`IVE_MMZ_FREE
(
p°Sobñ
->
°D°V2
.
u32PhyAddr
[0],Ö°Sobñ->°D°V2.
pu8VúAddr
[0]);

56 
	`IVE_CLOSE_FILE
(
p°Sobñ
->
pFpSrc
);

57 
	`IVE_CLOSE_FILE
(
p°Sobñ
->
pFpD°H1
);

58 
	`IVE_CLOSE_FILE
(
p°Sobñ
->
pFpD°H2
);

59 
	`IVE_CLOSE_FILE
(
p°Sobñ
->
pFpD°V1
);

60 
	`IVE_CLOSE_FILE
(
p°Sobñ
->
pFpD°V2
);

61 
	}
}

65 
HI_S32
 
	$SAMPLE_IVE_Sobñ_Inô
(
SAMPLE_IVE_SOBEL_S
* 
p°Sobñ
,

66 
HI_CHAR
* 
pchSrcFûeName
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

68 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

69 
HI_CHAR
 
achFûeName
[
IVE_FILE_NAME_LEN
];

70 
HI_S8
 
as8Mask
[25] = {0, 0, 0, 0, 0,

77 
	`mem£t
(
p°Sobñ
, 0, (
SAMPLE_IVE_SOBEL_S
));

79 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImageByCached
(&(
p°Sobñ
->
°Src1
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

80 i‡(
s32Rë
 !
HI_SUCCESS
)

82 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImageByCached fail\n");

83 
SOBEL_INIT_FAIL
;

85 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImageByCached
(&(
p°Sobñ
->
°Src2
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

86 i‡(
s32Rë
 !
HI_SUCCESS
)

88 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImageByCached fail\n");

89 
SOBEL_INIT_FAIL
;

91 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Sobñ
->
°D°H1
), 
IVE_IMAGE_TYPE_S16C1
, 
u16Width
, 
u16Height
);

92 i‡(
s32Rë
 !
HI_SUCCESS
)

94 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

95 
SOBEL_INIT_FAIL
;

97 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Sobñ
->
°D°H2
), 
IVE_IMAGE_TYPE_S16C1
, 
u16Width
, 
u16Height
);

98 i‡(
s32Rë
 !
HI_SUCCESS
)

100 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

101 
SOBEL_INIT_FAIL
;

103 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Sobñ
->
°D°V1
), 
IVE_IMAGE_TYPE_S16C1
, 
u16Width
, 
u16Height
);

104 i‡(
s32Rë
 !
HI_SUCCESS
)

106 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

107 
SOBEL_INIT_FAIL
;

109 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Sobñ
->
°D°V2
), 
IVE_IMAGE_TYPE_S16C1
, 
u16Width
, 
u16Height
);

110 i‡(
s32Rë
 !
HI_SUCCESS
)

112 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

113 
SOBEL_INIT_FAIL
;

116 
p°Sobñ
->
°SobñCål
.
íOutCål
 = 
IVE_SOBEL_OUT_CTRL_BOTH
;

117 
	`mem˝y
(
p°Sobñ
->
°SobñCål
.
as8Mask
,ás8Mask, 25);

119 
p°Sobñ
->
pFpSrc
 = 
	`f›í
(
pchSrcFûeName
, "rb");

120 i‡(
HI_NULL
 =
p°Sobñ
->
pFpSrc
)

122 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchSrcFûeName
);

123 
s32Rë
 = 
HI_FAILURE
;

124 
SOBEL_INIT_FAIL
;

127 
	`¢¥ötf
(
achFûeName
, 
IVE_FILE_NAME_LEN
, "./data/output/sobel/sobelh1.dat");

128 
p°Sobñ
->
pFpD°H1
 = 
	`f›í
(
achFûeName
, "wb");

129 i‡(
HI_NULL
 =
p°Sobñ
->
pFpD°H1
)

131 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
achFûeName
);

132 
s32Rë
 = 
HI_FAILURE
;

133 
SOBEL_INIT_FAIL
;

135 
	`¢¥ötf
(
achFûeName
, 
IVE_FILE_NAME_LEN
, "./data/output/sobel/sobelh2.dat");

136 
p°Sobñ
->
pFpD°H2
 = 
	`f›í
(
achFûeName
, "wb");

137 i‡(
HI_NULL
 =
p°Sobñ
->
pFpD°H2
)

139 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
achFûeName
);

140 
s32Rë
 = 
HI_FAILURE
;

141 
SOBEL_INIT_FAIL
;

143 
	`¢¥ötf
(
achFûeName
, 
IVE_FILE_NAME_LEN
, "./data/output/sobel/sobelv1.dat");

144 
p°Sobñ
->
pFpD°V1
 = 
	`f›í
(
achFûeName
, "wb");

145 i‡(
HI_NULL
 =
p°Sobñ
->
pFpD°V1
)

147 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
achFûeName
);

148 
s32Rë
 = 
HI_FAILURE
;

149 
SOBEL_INIT_FAIL
;

151 
	`¢¥ötf
(
achFûeName
, 
IVE_FILE_NAME_LEN
, "./data/output/sobel/sobelv2.dat");

152 
p°Sobñ
->
pFpD°V2
 = 
	`f›í
(
achFûeName
, "wb");

153 i‡(
HI_NULL
 =
p°Sobñ
->
pFpD°V2
)

155 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
achFûeName
);

156 
s32Rë
 = 
HI_FAILURE
;

157 
SOBEL_INIT_FAIL
;

160 
SOBEL_INIT_FAIL
:

162 i‡(
HI_SUCCESS
 !
s32Rë
)

164 
	`SAMPLE_IVE_Sobñ_Unöô
(
p°Sobñ
);

166  
s32Rë
;

167 
	}
}

171 
HI_VOID
 
	$SAMPLE_IVE_SobñProc
(
SAMPLE_IVE_SOBEL_S
* 
p°Sobñ
)

173 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

174 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

175 
IVE_HANDLE
 
IveH™dÀ
;

176 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

177 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

179 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&(
p°Sobñ
->
°Src1
),Ö°Sobñ->
pFpSrc
);

180 i‡(
s32Rë
 !
HI_SUCCESS
)

182 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_ReadFile fail\n");

186 
	`mem˝y
(
p°Sobñ
->
°Src2
.
pu8VúAddr
[0],Ö°Sobñ->
°Src1
.pu8VúAddr[0],Ö°Sobñ->°Src2.
u16Såide
[0] *Ö°Sobñ->°Src2.
u16Height
);

187 
s32Rë
 = 
	`HI_MPI_SYS_MmzFlushCache
(
p°Sobñ
->
°Src1
.
u32PhyAddr
[0],Ö°Sobñ->°Src1.
pu8VúAddr
[0],

188 
p°Sobñ
->
°Src1
.
u16Såide
[0] *Ö°Sobñ->°Src1.
u16Height
);

189 i‡(
s32Rë
 !
HI_SUCCESS
)

191 
	`SAMPLE_PRT
("HI_MPI_SYS_MmzFlushCachêÁû,Eº‹(%#x)\n", 
s32Rë
);

194 
s32Rë
 = 
	`HI_MPI_IVE_Sobñ
(&
IveH™dÀ
, &
p°Sobñ
->
°Src1
, &p°Sobñ->
°D°H1
, &p°Sobñ->
°D°V1
, &p°Sobñ->
°SobñCål
, 
bIn°™t
);

195 i‡(
s32Rë
 !
HI_SUCCESS
)

197 
	`SAMPLE_PRT
("HI_MPI_IVE_Sobñ faû,Eº‹(%#x)\n", 
s32Rë
);

201 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

202 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

204 
	`u¶ìp
(100);

205 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

207 i‡(
s32Rë
 !
HI_SUCCESS
)

209 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

213 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°Sobñ
->
°D°H1
,Ö°Sobñ->
pFpD°H1
);

214 i‡(
s32Rë
 !
HI_SUCCESS
)

216 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

220 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°Sobñ
->
°D°V1
,Ö°Sobñ->
pFpD°V1
);

221 i‡(
s32Rë
 !
HI_SUCCESS
)

223 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

229 i‡(
s_bFlushCached
 =
HI_TRUE
)

231 
s32Rë
 = 
	`HI_MPI_SYS_MmzFlushCache
(
p°Sobñ
->
°Src2
.
u32PhyAddr
[0],Ö°Sobñ->°Src2.
pu8VúAddr
[0],

232 
p°Sobñ
->
°Src2
.
u16Såide
[0] *Ö°Sobñ->°Src2.
u16Height
);

233 i‡(
s32Rë
 !
HI_SUCCESS
)

235 
	`SAMPLE_PRT
("HI_MPI_SYS_MmzFlushCachêÁû,Eº‹(%#x)\n", 
s32Rë
);

240 
s32Rë
 = 
	`HI_MPI_IVE_Sobñ
(&
IveH™dÀ
, &
p°Sobñ
->
°Src2
, &p°Sobñ->
°D°H2
, &p°Sobñ->
°D°V2
, &p°Sobñ->
°SobñCål
, 
bIn°™t
);

241 i‡(
s32Rë
 !
HI_SUCCESS
)

243 
	`SAMPLE_PRT
("HI_MPI_IVE_Sobñ faû,Eº‹(%#x)\n", 
s32Rë
);

247 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

248 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

250 
	`u¶ìp
(100);

251 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

253 i‡(
s32Rë
 !
HI_SUCCESS
)

255 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

259 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°Sobñ
->
°D°H2
,Ö°Sobñ->
pFpD°H2
);

260 i‡(
s32Rë
 !
HI_SUCCESS
)

262 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

266 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°Sobñ
->
°D°V2
,Ö°Sobñ->
pFpD°V2
);

267 i‡(
s32Rë
 !
HI_SUCCESS
)

269 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

273 
	}
}

277 
HI_VOID
 
	$SAMPLE_IVE_Sobñ
(
HI_VOID
)

279 
HI_S32
 
s32Rë
;

280 
SAMPLE_IVE_SOBEL_S
 
°Sobñ
;

281 
HI_U16
 
u16Width
 = 720;

282 
HI_U16
 
u16Height
 = 576;

283 
HI_CHAR
* 
pchSrcFûeName
 = "./data/input/sobel/sobel.yuv";

285 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

287 
s32Rë
 = 
	`SAMPLE_IVE_Sobñ_Inô
(&
°Sobñ
, 
pchSrcFûeName
, 
u16Width
, 
u16Height
);

288 i‡(
HI_SUCCESS
 !
s32Rë
)

290 
	`SAMPLE_PRT
("SAMPLE_IVE_Sobel_Init fail\n");

291 
SOBEL_FAIL
;

294 
	`SAMPLE_IVE_SobñProc
(&
°Sobñ
);

296 
	`SAMPLE_IVE_Sobñ_Unöô
(&
°Sobñ
);

298 
SOBEL_FAIL
:

299 
	`SAMPLE_COMM_IVE_IveMpiExô
();

300 
	}
}

	@sample/ive/sample/sample_ive_st_and_lk.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

8 
	~<sys/mm™.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<sig«l.h
>

16 
	~"hi_comm⁄.h
"

17 
	~"hi_comm_video.h
"

18 
	~"hi_comm_sys.h
"

19 
	~"hi_comm_ive.h
"

20 
	~"hi_comm_vgs.h
"

22 
	~"mpi_vb.h
"

23 
	~"mpi_sys.h
"

24 
	~"mpi_ive.h
"

25 
	~"mpi_vgs.h
"

27 
	~"ßm∂e_comm_ive.h
"

29 
	#MAX_POINT_NUM
 200

	)

30 
	#MIN_DIST
 5

	)

32 
	shiSAMPLE_IVE_ST_LK_S


34 
IVE_SRC_IMAGE_S
 
	m°Src
;

35 
IVE_DST_IMAGE_S
 
	m°D°
;

36 
IVE_SRC_IMAGE_S
 
	m°SrcYUV
;

37 
IVE_SRC_IMAGE_S
 
	ma°PªPyr
[3];

38 
IVE_SRC_IMAGE_S
 
	ma°CurPyr
[3];

39 
IVE_IMAGE_S
 
	m°PyrTmp
;

40 
IVE_DST_MEM_INFO_S
 
	m°D°C‹√r
;

41 
IVE_MEM_INFO_S
 
	m°Mv
;

42 
IVE_SRC_MEM_INFO_S
 
	ma°Poöt
[3];

43 
IVE_ST_CANDI_CORNER_CTRL_S
 
	m°StC™diC‹√rCål
;

44 
IVE_ST_CORNER_CTRL_S
 
	m°StC‹√rCål
;

45 
IVE_LK_OPTICAL_FLOW_CTRL_S
 
	m°LkCål
;

46 
FILE
* 
	mpFpSrc
;

47 
FILE
* 
	mpFpD°
;

49 } 
	tSAMPLE_IVE_ST_LK_S
;

54 
HI_VOID
 
	$SAMPLE_IVE_C›yPyr
(
IVE_IMAGE_S
* 
p°PyrSrc
, IVE_IMAGE_S* 
p°PyrD°
, 
HI_U32
 
u32Levñ
)

56 
HI_U32
 
i
;

57 
i
 = 0; i < 
u32Levñ
; i++)

59 
	`mem˝y
(
p°PyrD°
[
i
].
pu8VúAddr
[0], 
p°PyrSrc
[i].pu8VúAddr[0],Ö°PyrSrc[i].
u16Såide
[0] *Ö°PyrSrc[i].
u16Height
);

61 
	}
}

65 
HI_VOID
 
	$SAMPLE_IVE_St_Lk_Unöô
(
SAMPLE_IVE_ST_LK_S
* 
p°StLk
)

67 
HI_U16
 
i
;

68 
	`IVE_MMZ_FREE
(
p°StLk
->
°Src
.
u32PhyAddr
[0],Ö°StLk->°Src.
pu8VúAddr
[0]);

69 
	`IVE_MMZ_FREE
(
p°StLk
->
°D°
.
u32PhyAddr
[0],Ö°StLk->°D°.
pu8VúAddr
[0]);

70 
	`IVE_MMZ_FREE
(
p°StLk
->
°StC™diC‹√rCål
.
°Mem
.
u32PhyAddr
,Ö°StLk->°StC™diC‹√rCål.°Mem.
pu8VúAddr
);

71 
	`IVE_MMZ_FREE
(
p°StLk
->
°D°C‹√r
.
u32PhyAddr
,Ö°StLk->°D°C‹√r.
pu8VúAddr
);

73 
i
 = 0; i < 3; i++)

75 
	`IVE_MMZ_FREE
(
p°StLk
->
a°PªPyr
[
i
].
u32PhyAddr
[0],Ö°StLk->a°PªPyr[i].
pu8VúAddr
[0]);

76 
	`IVE_MMZ_FREE
(
p°StLk
->
a°CurPyr
[
i
].
u32PhyAddr
[0],Ö°StLk->a°CurPyr[i].
pu8VúAddr
[0]);

77 
	`IVE_MMZ_FREE
(
p°StLk
->
a°Poöt
[
i
].
u32PhyAddr
,Ö°StLk->a°Poöt[i].
pu8VúAddr
);

79 
	`IVE_MMZ_FREE
(
p°StLk
->
°PyrTmp
.
u32PhyAddr
[0],Ö°StLk->°PyrTmp.
pu8VúAddr
[0]);

80 
	`IVE_MMZ_FREE
(
p°StLk
->
°Mv
.
u32PhyAddr
,Ö°StLk->°Mv.
pu8VúAddr
);

81 
	`IVE_MMZ_FREE
(
p°StLk
->
°SrcYUV
.
u32PhyAddr
[0],Ö°StLk->°SrcYUV.
pu8VúAddr
[0]);

83 
	`IVE_CLOSE_FILE
(
p°StLk
->
pFpSrc
);

84 
	`IVE_CLOSE_FILE
(
p°StLk
->
pFpD°
);

85 
	}
}

90 
HI_S32
 
	$SAMPLE_IVE_St_Lk_Inô
(
SAMPLE_IVE_ST_LK_S
* 
p°StLk
,

91 
HI_CHAR
* 
pchSrcFûeName
, HI_CHAR* 
pchD°FûeName
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
,

92 
HI_U16
 
u16PyrWidth
, HI_U16 
u16PyrHeight
)

94 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

95 
HI_U32
 
u32Size
 = 0;

96 
HI_U16
 
i
;

98 
	`mem£t
(
p°StLk
, 0, (
SAMPLE_IVE_ST_LK_S
));

100 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°StLk
->
°Src
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

101 i‡(
s32Rë
 !
HI_SUCCESS
)

103 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

104 
ST_LK_INIT_FAIL
;

106 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°StLk
->
°D°
, 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

107 i‡(
s32Rë
 !
HI_SUCCESS
)

109 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

110 
ST_LK_INIT_FAIL
;

112 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°StLk
->
°SrcYUV
, 
IVE_IMAGE_TYPE_YUV420SP
, 
u16Width
, 
u16Height
);

113 i‡(
s32Rë
 !
HI_SUCCESS
)

115 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

116 
ST_LK_INIT_FAIL
;

118 
p°StLk
->
°StC™diC‹√rCål
.
u0q8QuÆôyLevñ
 = 25;

119 
u32Size
 = 4 * 
	`SAMPLE_COMM_IVE_CÆcSåide
(
u16Width
, 
IVE_ALIGN
Ë* 
u16Height
 + (
IVE_ST_MAX_EIG_S
);

120 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°StLk
->
°StC™diC‹√rCål
.
°Mem
), 
u32Size
);

121 i‡(
s32Rë
 !
HI_SUCCESS
)

123 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

124 
ST_LK_INIT_FAIL
;

126 
p°StLk
->
°StC‹√rCål
.
u16MaxC‹√rNum
 = 
MAX_POINT_NUM
;

127 
p°StLk
->
°StC‹√rCål
.
u16MöDi°
 = 
MIN_DIST
;

128 
u32Size
 = (
IVE_ST_CORNER_INFO_S
);

129 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°StLk
->
°D°C‹√r
), 
u32Size
);

130 i‡(
s32Rë
 !
HI_SUCCESS
)

132 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

133 
ST_LK_INIT_FAIL
;

136 
p°StLk
->
°LkCål
.
u0q8Epsû⁄
 = 2;

137 
p°StLk
->
°LkCål
.
u0q8MöEigThr
 = 100;

138 
p°StLk
->
°LkCål
.
u16C‹√rNum
 = 
MAX_POINT_NUM
;

139 
p°StLk
->
°LkCål
.
u8IãrCou¡
 = 10;

140 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°StLk
->
°PyrTmp
, 
IVE_IMAGE_TYPE_U8C1
, 
u16PyrWidth
, 
u16PyrHeight
);

141 i‡(
s32Rë
 !
HI_SUCCESS
)

143 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

144 
ST_LK_INIT_FAIL
;

147 
u32Size
 = (
IVE_POINT_S25Q7_S
Ë* 
p°StLk
->
°LkCål
.
u16C‹√rNum
;

148 
i
 = 0; i < 3; i++)

150 i‡(
i
 != 0)

152 
u16PyrWidth
 /= 2;

153 
u16PyrHeight
 /= 2;

156 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°StLk
->
a°PªPyr
[
i
], 
IVE_IMAGE_TYPE_U8C1
, 
u16PyrWidth
, 
u16PyrHeight
);

157 i‡(
s32Rë
 !
HI_SUCCESS
)

159 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

160 
ST_LK_INIT_FAIL
;

162 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&
p°StLk
->
a°CurPyr
[
i
], 
IVE_IMAGE_TYPE_U8C1
, 
u16PyrWidth
, 
u16PyrHeight
);

163 i‡(
s32Rë
 !
HI_SUCCESS
)

165 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

166 
ST_LK_INIT_FAIL
;

169 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°StLk
->
a°Poöt
[
i
]), 
u32Size
);

170 i‡(
s32Rë
 !
HI_SUCCESS
)

172 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

173 
ST_LK_INIT_FAIL
;

178 
u32Size
 = (
IVE_MV_S9Q7_S
Ë* 
p°StLk
->
°LkCål
.
u16C‹√rNum
;

179 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°StLk
->
°Mv
), 
u32Size
);

180 i‡(
s32Rë
 !
HI_SUCCESS
)

182 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

183 
ST_LK_INIT_FAIL
;

185 
	`mem£t
(
p°StLk
->
°Mv
.
pu8VúAddr
, 0,Ö°StLk->°Mv.
u32Size
);

187 
p°StLk
->
pFpSrc
 = 
	`f›í
(
pchSrcFûeName
, "rb");

188 i‡(
HI_NULL
 =
p°StLk
->
pFpSrc
)

190 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchSrcFûeName
);

191 
s32Rë
 = 
HI_FAILURE
;

192 
ST_LK_INIT_FAIL
;

195 
p°StLk
->
pFpD°
 = 
	`f›í
(
pchD°FûeName
, "wb");

196 i‡(
HI_NULL
 =
p°StLk
->
pFpD°
)

198 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchD°FûeName
);

199 
s32Rë
 = 
HI_FAILURE
;

200 
ST_LK_INIT_FAIL
;

203 
ST_LK_INIT_FAIL
:

205 i‡(
HI_SUCCESS
 !
s32Rë
)

207 
	`SAMPLE_IVE_St_Lk_Unöô
(
p°StLk
);

209  
s32Rë
;

210 
	}
}

214 
HI_S32
 
	$SAMPLE_IVE_PyrDown
(
SAMPLE_IVE_ST_LK_S
* 
p°StLk
, 
IVE_SRC_IMAGE_S
* 
p°Src
, 
IVE_DST_IMAGE_S
* 
p°D°
)

216 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

217 
IVE_HANDLE
 
hIveH™dÀ
;

218 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

219 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

220 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

221 
IVE_SRC_DATA_S
 
°D©aSrc
;

222 
IVE_DST_DATA_S
 
°D©aD°
;

223 
IVE_DMA_CTRL_S
 
°DmaCål
 = {
IVE_DMA_MODE_INTERVAL_COPY
,

226 
IVE_FILTER_CTRL_S
 
°F…Cål
 = {{

235 
p°StLk
->
°PyrTmp
.
u16Width
 = 
p°Src
->u16Width;

236 
p°StLk
->
°PyrTmp
.
u16Height
 = 
p°Src
->u16Height;

238 
s32Rë
 = 
	`HI_MPI_IVE_Fûãr
(&
hIveH™dÀ
, 
p°Src
, &
p°StLk
->
°PyrTmp
, &
°F…Cål
, 
bIn°™t
);

239 i‡(
s32Rë
 !
HI_SUCCESS
)

241 
	`SAMPLE_PRT
("HI_MPI_IVE_Fûã∏Áû,Eº‹(%#x)\n", 
s32Rë
);

242  
s32Rë
;

244 
°D©aSrc
.
pu8VúAddr
 = 
p°StLk
->
°PyrTmp
.pu8VirAddr[0];

245 
°D©aSrc
.
u32PhyAddr
 = 
p°StLk
->
°PyrTmp
.u32PhyAddr[0];

246 
°D©aSrc
.
u16Såide
 = 
p°StLk
->
°PyrTmp
.u16Stride[0];

247 
°D©aSrc
.
u16Width
 = 
p°StLk
->
°PyrTmp
.u16Width;

248 
°D©aSrc
.
u16Height
 = 
p°StLk
->
°PyrTmp
.u16Height;

250 
°D©aD°
.
pu8VúAddr
 = 
p°D°
->pu8VirAddr[0];

251 
°D©aD°
.
u32PhyAddr
 = 
p°D°
->u32PhyAddr[0];

252 
°D©aD°
.
u16Såide
 = 
p°D°
->u16Stride[0];

253 
°D©aD°
.
u16Width
 = 
p°D°
->u16Width;

254 
°D©aD°
.
u16Height
 = 
p°D°
->u16Height;

255 
s32Rë
 = 
	`HI_MPI_IVE_DMA
(&
hIveH™dÀ
, &
°D©aSrc
, &
°D©aD°
, &
°DmaCål
, 
bIn°™t
);

256 i‡(
s32Rë
 !
HI_SUCCESS
)

258 
	`SAMPLE_PRT
("HI_MPI_IVE_DMA faû,Eº‹(%#x)", 
s32Rë
);

259  
s32Rë
;

261 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
hIveH™dÀ
, &
bFöish
, 
bBlock
);

262 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

264 
	`u¶ìp
(200);

265 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
hIveH™dÀ
, &
bFöish
, 
bBlock
);

267 i‡(
s32Rë
 !
HI_SUCCESS
)

269 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

270  
s32Rë
;

273  
s32Rë
;

274 
	}
}

278 
HI_VOID
 
	$SAMPLE_IVE_St_LkProc
(
SAMPLE_IVE_ST_LK_S
* 
p°StLk
)

280 
HI_U32
 
u32FømeNum
 = 10;

281 
HI_S16
 
i
, 
j
, 
k
;

282 
HI_U16
 
u16Re˘Num
;

283 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

284 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

285 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

286 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

287 
VGS_HANDLE
 
VgsH™dÀ
;

288 
IVE_HANDLE
 
IveH™dÀ
;

289 
RECT_S
 
a°Re˘
[
MAX_POINT_NUM
];

290 
IVE_POINT_S25Q7_S
 
a°PoötTmp
[
MAX_POINT_NUM
];

291 
IVE_ST_CORNER_INFO_S
* 
p°C‹√rInfo
 = (IVE_ST_CORNER_INFO_S*)
p°StLk
->
°D°C‹√r
.
pu8VúAddr
;

292 
IVE_POINT_S25Q7_S
* 
p°Poöt
[3] = {(IVE_POINT_S25Q7_S*)
p°StLk
->
a°Poöt
[0].
pu8VúAddr
,

293 (
IVE_POINT_S25Q7_S
*)
p°StLk
->
a°Poöt
[1].
pu8VúAddr
,

294 (
IVE_POINT_S25Q7_S
*)
p°StLk
->
a°Poöt
[2].
pu8VúAddr


296 
IVE_MV_S9Q7_S
* 
p°Mv
 = (IVE_MV_S9Q7_S*)
p°StLk
->
°Mv
.
pu8VúAddr
;

298 
i
 = 0; i < 
u32FømeNum
; i++)

300 
	`SAMPLE_PRT
("Pro¯‰amê%d\n", 
i
);

301 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&
p°StLk
->
°Src
,Ö°StLk->
pFpSrc
);

302 i‡(
s32Rë
 !
HI_SUCCESS
)

304 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_ReadFile fail\n");

308 i‡(0 =
i
)

310 
s32Rë
 = 
	`HI_MPI_IVE_STC™diC‹√r
(&
IveH™dÀ
, &
p°StLk
->
°Src
, &p°StLk->
°D°
,

311 &
p°StLk
->
°StC™diC‹√rCål
, 
bIn°™t
);

312 i‡(
s32Rë
 !
HI_SUCCESS
)

314 
	`SAMPLE_PRT
("HI_MPI_IVE_STC™diC‹√∏Áû,Eº‹(%#x)\n", 
s32Rë
);

318 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

319 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

321 
	`u¶ìp
(100);

322 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

324 i‡(
s32Rë
 !
HI_SUCCESS
)

326 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

330 
s32Rë
 = 
	`HI_MPI_IVE_STC‹√r
(&
p°StLk
->
°D°
, &p°StLk->
°D°C‹√r
, &p°StLk->
°StC‹√rCål
);

331 i‡(
s32Rë
 !
HI_SUCCESS
)

333 
	`SAMPLE_PRT
("HI_MPI_IVE_STC‹√∏Áû,Eº‹(%#x)\n", 
s32Rë
);

336 
p°StLk
->
°LkCål
.
u16C‹√rNum
 = 
p°C‹√rInfo
->u16CornerNum;

337 
k
 = 0; k < 
p°StLk
->
°LkCål
.
u16C‹√rNum
; k++)

339 
a°PoötTmp
[
k
].
s25q7X
 = (
HI_S32
)(
p°C‹√rInfo
->
a°C‹√r
[k].
u16X
 << 7);

340 
a°PoötTmp
[
k
].
s25q7Y
 = (
HI_S32
)(
p°C‹√rInfo
->
a°C‹√r
[k].
u16Y
 << 7);

345 
k
 = 0; k < 
p°C‹√rInfo
->
u16C‹√rNum
; k++)

347 
j
 = 0; j < 3; j++)

349 i‡(0 =
j
)

351 
p°Poöt
[0][
k
].
s25q7X
 = 
a°PoötTmp
[k].s25q7X;

352 
p°Poöt
[0][
k
].
s25q7Y
 = 
a°PoötTmp
[k].s25q7Y;

356 
p°Poöt
[
j
][
k
].
s25q7X
 =ÖstPoint[j - 1][k].s25q7X / 2;

357 
p°Poöt
[
j
][
k
].
s25q7Y
 =ÖstPoint[j - 1][k].s25q7Y / 2;

363 
j
 = 0; j < 3; j++)

365 i‡(0 =
j
)

367 
	`mem˝y
(
p°StLk
->
a°CurPyr
[
j
].
pu8VúAddr
[0],Ö°StLk->
°Src
.pu8VirAddr[0],

368 
p°StLk
->
°Src
.
u16Såide
[0] *Ö°StLk->°Src.
u16Height
);

372 
s32Rë
 = 
	`SAMPLE_IVE_PyrDown
(
p°StLk
, &p°StLk->
a°CurPyr
[
j
 - 1], &pstStLk->astCurPyr[j]);

373 i‡(
s32Rë
 !
HI_SUCCESS
)

375 
	`SAMPLE_PRT
("SAMPLE_IVE_PyrDown fail\n");

382 
	`mem˝y
(
p°StLk
->
°SrcYUV
.
pu8VúAddr
[0],Ö°StLk->
°Src
.pu8VúAddr[0],Ö°StLk->°SrcYUV.
u16Såide
[0] *Ö°StLk->°SrcYUV.
u16Height
);

383 
	`mem£t
(
p°StLk
->
°SrcYUV
.
pu8VúAddr
[1], 128,Ö°StLk->°SrcYUV.
u16Såide
[1] *Ö°StLk->°SrcYUV.
u16Height
 / 2);

385 i‡(
i
 > 0)

387 
j
 = 2; j >= 0; j--)

389 
s32Rë
 = 
	`HI_MPI_IVE_LKO±iˇlFlow
(&
IveH™dÀ
, &
p°StLk
->
a°PªPyr
[
j
], &p°StLk->
a°CurPyr
[j],

390 &
p°StLk
->
a°Poöt
[
j
], &p°StLk->
°Mv
, &p°StLk->
°LkCål
, 
bIn°™t
);

391 i‡(
s32Rë
 !
HI_SUCCESS
)

393 
	`SAMPLE_PRT
("HI_MPI_IVE_LKO±iˇlFlow faû,Eº‹(%#x)\n", 
s32Rë
);

397 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

398 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

400 
	`u¶ìp
(200);

401 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

403 i‡(
s32Rë
 !
HI_SUCCESS
)

405 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

410 
k
 = 0, 
u16Re˘Num
 = 0; k < 
p°C‹√rInfo
->
u16C‹√rNum
; k++)

412 
a°PoötTmp
[
k
].
s25q7X
 = (
p°Poöt
[0][k].s25q7X + 
p°Mv
[k].
s9q7Dx
);

413 
a°PoötTmp
[
k
].
s25q7Y
 = (
p°Poöt
[0][k].s25q7Y + 
p°Mv
[k].
s9q7Dy
);

414 i‡(0 =
p°Mv
[
k
].
s32Sètus
)

416 
a°Re˘
[
u16Re˘Num
].
s32X
 = 
a°PoötTmp
[
k
].
s25q7X
 / 128 - 1;

417 
a°Re˘
[
u16Re˘Num
].
s32Y
 = 
a°PoötTmp
[
k
].
s25q7Y
 / 128 - 1;

418 
a°Re˘
[
u16Re˘Num
].
u32Width
 = 4;

419 
a°Re˘
[
u16Re˘Num
].
u32Height
 = 4;

420 
u16Re˘Num
++;

424 i‡(
u16Re˘Num
 > 0)

426 
s32Rë
 = 
	`HI_MPI_VGS_BegöJob
(&
VgsH™dÀ
);

427 i‡(
s32Rë
 !
HI_SUCCESS
)

429 
	`SAMPLE_PRT
("HI_MPI_VGS_BegöJob faû,Eº‹(%#x)\n", 
s32Rë
);

432 
s32Rë
 = 
	`SAMPLE_COMM_VGS_AddDøwRe˘Job
(
VgsH™dÀ
, &
p°StLk
->
°SrcYUV
, &p°StLk->°SrcYUV, 
a°Re˘
, 
u16Re˘Num
);

433 i‡(
s32Rë
 !
HI_SUCCESS
)

435 
	`SAMPLE_PRT
("SAMPLE_COMM_VGS_AddDrawRectJob fail\n");

438 
s32Rë
 = 
	`HI_MPI_VGS_EndJob
(
VgsH™dÀ
);

439 i‡(
s32Rë
 !
HI_SUCCESS
)

441 
	`HI_MPI_VGS_C™˚lJob
(
VgsH™dÀ
);

442 
	`SAMPLE_PRT
("HI_MPI_VGS_EndJob faû,Eº‹(%#x)\n", 
s32Rë
);

449 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°StLk
->
°SrcYUV
,Ö°StLk->
pFpD°
);

451 
	`SAMPLE_IVE_C›yPyr
(
p°StLk
->
a°CurPyr
,Ö°StLk->
a°PªPyr
, 3);

455 
	}
}

459 
HI_VOID
 
	$SAMPLE_IVE_St_Lk
(
HI_VOID
)

461 
SAMPLE_IVE_ST_LK_S
 
°StLk
;

462 
HI_CHAR
* 
pchSrcFûeName
 = "./data/input/stlk/st_lk.yuv";

463 
HI_CHAR
* 
pchD°FûeName
 = "./data/output/stlk/st_lk.yuv";

464 
HI_U16
 
u16Width
 = 720;

465 
HI_U16
 
u16Height
 = 576;

466 
HI_U16
 
u16PyrWidth
 = 720;

467 
HI_U16
 
u16PyrHeight
 = 576;

468 
HI_S32
 
s32Rë
;

470 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

472 
s32Rë
 = 
	`SAMPLE_IVE_St_Lk_Inô
(&
°StLk
, 
pchSrcFûeName
, 
pchD°FûeName
,

473 
u16Width
, 
u16Height
, 
u16PyrWidth
, 
u16PyrHeight
);

474 i‡(
HI_SUCCESS
 !
s32Rë
)

476 
	`SAMPLE_PRT
("SAMPLE_IVE_St_Lk_Init fail\n");

477 
ST_LK_FAIL
;

480 
	`SAMPLE_IVE_St_LkProc
(&
°StLk
);

482 
	`SAMPLE_IVE_St_Lk_Unöô
(&
°StLk
);

484 
ST_LK_FAIL
:

485 
	`SAMPLE_COMM_IVE_IveMpiExô
();

486 
	}
}

	@sample/ive/sample/sample_ive_svm.c

1 
	~"hi_comm⁄.h
"

2 
	~"hi_comm_video.h
"

3 
	~"hi_comm_sys.h
"

4 
	~"hi_comm_ive.h
"

6 
	~"mpi_vb.h
"

7 
	~"mpi_sys.h
"

8 
	~"mpi_ive.h
"

9 
	~<m©h.h
>

11 
	~"ßm∂e_comm_ive.h
"

13 
	#HI_SVM_PLATE_CLASS_COUNT
 2

	)

14 
	#HI_SVM_PLATE_CLASS_DES_NUM
 8

	)

16 
	#HI_CLIP
(
a
, 
maxv
, 
möv
Ë((◊)>(maxv)Ë? (maxvË: ((◊Ë< (möv)Ë? (mövË: (a)))

	)

18 
	shiSAMPLE_IVE_SVM_INFO_S


20 
IVE_MEM_INFO_S
 
	m°Src
;

21 
IVE_MEM_INFO_S
 
	m°VŸe
;

22 
IVE_IMAGE_S
 
	m°GøyImg
;

23 
IVE_LOOK_UP_TABLE_S
 
	m°TabÀ
;

24 
IVE_SVM_MODEL_S
 
	m°SvmModñ
 ;

25 } 
	tSAMPLE_IVE_SVM_INFO_S
, *
	tSAMPLE_IVE_SVM_INFO_S_PTR
;

30 
HI_S32
 
	$SAMPLE_IVE_Svm_Cª©eTabÀ
(
IVE_LOOK_UP_TABLE_S
* 
p°TabÀ
, 
HI_FLOAT
 
fGamma
)

32 
HI_U32
 
i
;

33 
HI_DOUBLE
 
tmp
;

34 
HI_S1Q15
* 
ps1q15Tmp
;

35 
HI_FLOAT
 
f32ExpIn
;

36 
HI_DOUBLE
 
d32ExpOut
;

38 i‡(
p°TabÀ
->
°TabÀ
.
u32Size
 <Ö°TabÀ->
u16EÀmNum
 * (
HI_S1Q15
))

40 
	`SAMPLE_PRT
("InvalidÅable size\n");

41  
HI_FAILURE
;

44 
ps1q15Tmp
 = (
HI_S1Q15
*)
p°TabÀ
->
°TabÀ
.
pu8VúAddr
;

45 
i
 = 0; i < 
p°TabÀ
->
u16EÀmNum
; i++)

47 
f32ExpIn
 = 
p°TabÀ
->
s32TabInLowî
 + (
HI_FLOAT
)
i
 / (1 <<Ö°TabÀ->
u8TabInPªci
);

48 
d32ExpOut
 = (
	`exp
(-
fGamma
 * 
f32ExpIn
Ë/ (1 << 
p°TabÀ
->
u8TabOutN‹m
)) * (1 << 15);

49 
tmp
 = (
	`HI_CLIP
(
d32ExpOut
, (1 << 15) - 1, 0));

50 
ps1q15Tmp
[
i
] = (
HI_S1Q15
)(
tmp
 + 0.5f);

52  
HI_SUCCESS
;

53 
	}
}

59 
HI_VOID
 
	$SAMPLE_IVE_Svm_Unöô
(
SAMPLE_IVE_SVM_INFO_S
* 
p°SVMInfo
)

61 
	`IVE_MMZ_FREE
(
p°SVMInfo
->
°TabÀ
.°TabÀ.
u32PhyAddr
,Ö°SVMInfo->°TabÀ.°TabÀ.
pu8VúAddr
);

62 
	`HI_MPI_IVE_SVM_U∆ﬂdModñ
(&
p°SVMInfo
->
°SvmModñ
);

63 
	`IVE_MMZ_FREE
(
p°SVMInfo
->
°Src
.
u32PhyAddr
,Ö°SVMInfo->°Src.
pu8VúAddr
);

64 
	`IVE_MMZ_FREE
(
p°SVMInfo
->
°VŸe
.
u32PhyAddr
,Ö°SVMInfo->°VŸe.
pu8VúAddr
);

65 
	`IVE_MMZ_FREE
(
p°SVMInfo
->
°GøyImg
.
u32PhyAddr
[0],Ö°SVMInfo->°GøyImg.
pu8VúAddr
[0]);

66 
	}
}

73 
HI_S32
 
	$SAMPLE_IVE_Svm_Inô
(
SAMPLE_IVE_SVM_INFO_S
* 
pStSvmInfo
, 
HI_CHAR
* 
pchBöFûeName
)

76 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

77 
HI_U32
 
u32Size
;

78 
HI_FLOAT
 
fGamma
 = 0.05f;

79 
HI_U16
 
u16Width
 = 16;

80 
HI_U16
 
u16Height
 = 32;

82 
	`mem£t
(
pStSvmInfo
, 0, (
SAMPLE_IVE_SVM_INFO_S
));

84 
pStSvmInfo
->
°TabÀ
.
s32TabInLowî
 = 0;

85 
pStSvmInfo
->
°TabÀ
.
s32TabInUµî
 = 64;

86 
pStSvmInfo
->
°TabÀ
.
u8TabInPªci
 = 3;

87 
pStSvmInfo
->
°TabÀ
.
u8TabOutN‹m
 = 0;

88 
pStSvmInfo
->
°TabÀ
.
u16EÀmNum
 = (pStSvmInfo->°TabÀ.
s32TabInUµî
 -ÖStSvmInfo->°TabÀ.
s32TabInLowî
Ë<<ÖStSvmInfo->°TabÀ.
u8TabInPªci
;

89 
pStSvmInfo
->
°TabÀ
.°TabÀ.
u32Size
 =ÖStSvmInfo->°TabÀ.
u16EÀmNum
 * (
HI_U16
);

90 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
pStSvmInfo
->
°TabÀ
.°TabÀ),ÖStSvmInfo->°TabÀ.°TabÀ.
u32Size
);

91 i‡(
s32Rë
 !
HI_SUCCESS
)

93 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

94 
SVM_INIT_FAIL
;

97 
s32Rë
 = 
	`SAMPLE_IVE_Svm_Cª©eTabÀ
(&(
pStSvmInfo
->
°TabÀ
), 
fGamma
);

98 i‡(
s32Rë
 !
HI_SUCCESS
)

100 
	`SAMPLE_PRT
("SAMPLE_IVE_Svm_CreateTable fail\n");

101 
SVM_INIT_FAIL
;

104 
s32Rë
 = 
	`HI_MPI_IVE_SVM_LﬂdModñ
(
pchBöFûeName
, &(
pStSvmInfo
->
°SvmModñ
));

105 i‡(
s32Rë
 !
HI_SUCCESS
)

107 
	`SAMPLE_PRT
("HI_MPI_IVE_SVM_LﬂdModñ faû,Eº‹(%#x)\n", 
s32Rë
);

108 
SVM_INIT_FAIL
;

111 
pStSvmInfo
 ->
°SvmModñ
.
íTy≥
 = 
IVE_SVM_TYPE_C_SVC
;

112 
pStSvmInfo
->
°SvmModñ
.
íKî√lTy≥
 = 
IVE_SVM_KERNEL_TYPE_RBF
;

115 
u32Size
 = 
pStSvmInfo
->
°SvmModñ
.
u16FótuªDim
 * (
HI_S16Q16
);

116 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
pStSvmInfo
->
°Src
), 
u32Size
);

117 i‡(
s32Rë
 !
HI_SUCCESS
)

119 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

120 
SVM_INIT_FAIL
;

123 
u32Size
 = 
pStSvmInfo
->
°SvmModñ
.
u8CœssCou¡
 * (
HI_U16
);

124 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
pStSvmInfo
->
°VŸe
), 
u32Size
);

125 i‡(
s32Rë
 !
HI_SUCCESS
)

127 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

128 
SVM_INIT_FAIL
;

131 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
pStSvmInfo
->
°GøyImg
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

132 i‡(
s32Rë
 !
HI_SUCCESS
)

134 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

135 
SVM_INIT_FAIL
;

138 
SVM_INIT_FAIL
:

139 i‡(
HI_SUCCESS
 !
s32Rë
)

141 
	`SAMPLE_IVE_Svm_Unöô
(
pStSvmInfo
);

143  
s32Rë
;

144 
	}
}

150 
HI_VOID
 
	$SAMPLE_IVE_Svm_Fótuª
(
HI_U8
* 
pu8GøyImg
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
, 
HI_S16Q16
* 
ps16q16Fótuª
)

152 
HI_U32
 
°ï
 = 4;

153 
HI_U16
 
i
, 
j
, 
m
, 
n
;

154 
HI_U16
 
u16FótuªNum
 = 0;

155 
HI_FLOAT
 
fFótuª
;

156 
HI_U32
 
sum
 = 0;

157 
i
 = 0; i < 
u16Height
 - 
°ï
 + 1; i += 4)

159 
j
 = 0; j < 
u16Width
 - 
°ï
 + 1; j += 4)

161 
sum
 = 0;

162 
m
 = 
i
; m < i + 
°ï
; m++)

164 
n
 = 
j
;Ç < j + 
°ï
;Ç++)

166 
sum
 +
pu8GøyImg
[
i
 * 
u16Width
 + 
j
];

169 
fFótuª
 = (
HI_FLOAT
)
sum
 / (
°ï
 * step * 255);

170 
ps16q16Fótuª
[
u16FótuªNum
++] = (
HI_S16Q16
)(
fFótuª
 * (1 << 16) + 0.5f);

174 
	}
}

180 
HI_VOID
 
	$SAMPLE_IVE_Svm_Pªdi˘
(
SAMPLE_IVE_SVM_INFO_S
* 
p°SvmInfo
)

183 
HI_S32
 
i
, 
j
;

184 
HI_S32
 
s32Rë
;

185 
HI_U16
* 
pu16VŸe
;

186 
HI_U8
 
u8MaxVŸeIdx
;

187 
HI_BOOL
 
bIn°™t
 = 
HI_TRUE
;

188 
HI_BOOL
 
bFöish
;

189 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

190 
HI_CHAR
 
achFûeName
[
IVE_FILE_NAME_LEN
];

191 
FILE
* 
pFp
 = 
HI_NULL
;

192 
IVE_HANDLE
 
iveH™dÀ
;

194  
i
 = 0; i < 4; i++)

197 
	`¢¥ötf
(
achFûeName
, 
IVE_FILE_NAME_LEN
, "./d©a/öput/svm/%d.yuv", 
i
);

198 
pFp
 = 
	`f›í
(
achFûeName
, "rb");

199 i‡(
NULL
 =
pFp
)

201 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
achFûeName
);

204 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&(
p°SvmInfo
->
°GøyImg
), 
pFp
);

205 i‡(
HI_SUCCESS
 !
s32Rë
)

207 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_RódFûêÁû, fûê%s\n", 
achFûeName
);

210 
	`IVE_CLOSE_FILE
(
pFp
);

212 
	`SAMPLE_IVE_Svm_Fótuª
(
p°SvmInfo
->
°GøyImg
.
pu8VúAddr
[0],Ö°SvmInfo->°GøyImg.
u16Width
, \

213 
p°SvmInfo
->
°GøyImg
.
u16Height
, (
HI_S16Q16
*Ì°SvmInfo->
°Src
.
pu8VúAddr
);

215 
s32Rë
 = 
	`HI_MPI_IVE_SVM_Pªdi˘
(&
iveH™dÀ
, &(
p°SvmInfo
->
°Src
), &’°SvmInfo->
°TabÀ
), \

216 & (
p°SvmInfo
->
°SvmModñ
), &’°SvmInfo->
°VŸe
), 
bIn°™t
);

217 i‡(
HI_SUCCESS
 !
s32Rë
)

219 
	`SAMPLE_PRT
("HI_MPI_IVE_SVM_Pªdi˘ faû,Eº‹(%#x)\n", 
s32Rë
);

222 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
iveH™dÀ
, &
bFöish
, 
bBlock
);

223 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

225 
	`u¶ìp
(100);

226 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
iveH™dÀ
, &
bFöish
, 
bBlock
);

228 i‡(
HI_SUCCESS
 !
s32Rë
)

230 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

234 
pu16VŸe
 = (
HI_U16
*)
p°SvmInfo
->
°VŸe
.
pu8VúAddr
;

235 
u8MaxVŸeIdx
 = 0;

237  
j
 = 0; j < 
p°SvmInfo
->
°SvmModñ
.
u8CœssCou¡
; j++)

239 i‡(
pu16VŸe
[
u8MaxVŸeIdx
] <Öu16VŸe[
j
])

240 { 
u8MaxVŸeIdx
 = 
j
; }

243 
	`SAMPLE_PRT
("%d.yuv bñ⁄gÅÿ˛as†%d.\n", 
i
, 
u8MaxVŸeIdx
);

246 
	`IVE_CLOSE_FILE
(
pFp
);

247 
	}
}

256 
HI_VOID
 
	$SAMPLE_IVE_Svm
(
HI_VOID
)

258 
HI_S32
 
s32Rë
;

259 
SAMPLE_IVE_SVM_INFO_S
 
°SvmInfo
;

260 
HI_CHAR
* 
pchBöFûeName
 = "./data/input/svm/svm_char_rec.bin";

262 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

265 
s32Rë
 = 
	`SAMPLE_IVE_Svm_Inô
(&
°SvmInfo
, 
pchBöFûeName
);

266 i‡(
HI_SUCCESS
 !
s32Rë
)

268 
	`SAMPLE_PRT
("SAMPLE_IVE_Svm_Init fail");

269 
SVM_FAIL
;

273 
	`SAMPLE_IVE_Svm_Pªdi˘
(&
°SvmInfo
);

276 
	`SAMPLE_IVE_Svm_Unöô
(&
°SvmInfo
);

277 
SVM_FAIL
:

278 
	`SAMPLE_COMM_IVE_IveMpiExô
();

279 
	}
}

	@sample/ive/sample/sample_ive_test_memory.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

15 
	~"hi_comm⁄.h
"

16 
	~"hi_comm_video.h
"

17 
	~"hi_comm_sys.h
"

18 
	~"hi_comm_ive.h
"

20 
	~"mpi_vb.h
"

21 
	~"mpi_sys.h
"

22 
	~"mpi_ive.h
"

24 
	~"ßm∂e_comm_ive.h
"

27 
	shiTEST_MEMORY_S


29 
IVE_SRC_IMAGE_S
 
	m°Src1
;

30 
IVE_SRC_IMAGE_S
 
	m°Src2
;

31 
IVE_DST_IMAGE_S
 
	m°D°
;

32 
IVE_DST_MEM_INFO_S
 
	m°Hi°
;

33 
IVE_SUB_CTRL_S
 
	m°SubCål
;

34 
FILE
* 
	mpFpSrc
;

35 
FILE
* 
	mpFpD°
;

37 } 
	tTEST_MEMORY_S
;

42 
HI_VOID
 
	$SAMPLE_IVE_Te°Mem‹y_Unöô
(
TEST_MEMORY_S
* 
p°Te°Mem
)

44 
	`IVE_MMZ_FREE
(
p°Te°Mem
->
°Src1
.
u32PhyAddr
[0],Ö°Te°Mem->°Src1.
pu8VúAddr
[0]);

45 
	`IVE_MMZ_FREE
(
p°Te°Mem
->
°Src2
.
u32PhyAddr
[0],Ö°Te°Mem->°Src2.
pu8VúAddr
[0]);

46 
	`IVE_MMZ_FREE
(
p°Te°Mem
->
°D°
.
u32PhyAddr
[0],Ö°Te°Mem->°D°.
pu8VúAddr
[0]);

47 
	`IVE_MMZ_FREE
(
p°Te°Mem
->
°Hi°
.
u32PhyAddr
,Ö°Te°Mem->°Hi°.
pu8VúAddr
);

49 
	`IVE_CLOSE_FILE
(
p°Te°Mem
->
pFpSrc
);

50 
	`IVE_CLOSE_FILE
(
p°Te°Mem
->
pFpD°
);

51 
	}
}

55 
HI_S32
 
	$SAMPLE_IVE_Te°Mem‹y_Inô
(
TEST_MEMORY_S
* 
p°Te°Mem
, 
HI_CHAR
* 
pchSrcFûeName
,

56 
HI_CHAR
* 
pchD°FûeName
, 
HI_U16
 
u16Width
, HI_U16 
u16Height
)

58 
HI_S32
 
s32Rë
;

59 
HI_U32
 
u32Size
;

61 
	`mem£t
(
p°Te°Mem
, 0, (
TEST_MEMORY_S
));

63 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Te°Mem
->
°Src1
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

64 i‡(
s32Rë
 !
HI_SUCCESS
)

66 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

67 
TEST_MEMORY_INIT_FAIL
;

69 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Te°Mem
->
°Src2
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

70 i‡(
s32Rë
 !
HI_SUCCESS
)

72 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

73 
TEST_MEMORY_INIT_FAIL
;

75 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eImage
(&(
p°Te°Mem
->
°D°
), 
IVE_IMAGE_TYPE_U8C1
, 
u16Width
, 
u16Height
);

76 i‡(
s32Rë
 !
HI_SUCCESS
)

78 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateImage fail\n");

79 
TEST_MEMORY_INIT_FAIL
;

82 
u32Size
 = 
IVE_HIST_NUM
 * (
HI_U32
);

83 
s32Rë
 = 
	`SAMPLE_COMM_IVE_Cª©eMemInfo
(&(
p°Te°Mem
->
°Hi°
), 
u32Size
);

84 i‡(
s32Rë
 !
HI_SUCCESS
)

86 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_CreateMemInfo fail\n");

87 
TEST_MEMORY_INIT_FAIL
;

90 
p°Te°Mem
->
°SubCål
.
íMode
 = 
IVE_SUB_MODE_ABS
;

92 
p°Te°Mem
->
pFpSrc
 = 
	`f›í
(
pchSrcFûeName
, "rb");

93 i‡(
HI_NULL
 =
p°Te°Mem
->
pFpSrc
)

95 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchSrcFûeName
);

96 
s32Rë
 = 
HI_FAILURE
;

97 
TEST_MEMORY_INIT_FAIL
;

100 
p°Te°Mem
->
pFpD°
 = 
	`f›í
(
pchD°FûeName
, "wb");

101 i‡(
HI_NULL
 =
p°Te°Mem
->
pFpD°
)

103 
	`SAMPLE_PRT
("O≥¿fûê%†Áû\n", 
pchD°FûeName
);

104 
s32Rë
 = 
HI_FAILURE
;

105 
TEST_MEMORY_INIT_FAIL
;

108 
TEST_MEMORY_INIT_FAIL
:

110 i‡(
HI_SUCCESS
 !
s32Rë
)

112 
	`SAMPLE_IVE_Te°Mem‹y_Unöô
(
p°Te°Mem
);

114  
s32Rë
;

115 
	}
}

119 
HI_VOID
 
	$SAMPLE_IVE_Te°Mem‹yProc
(
TEST_MEMORY_S
* 
p°Te°Mem
)

121 
HI_S32
 
s32Rë
;

122 
HI_U32
* 
pu32Hi°
;

123 
HI_U32
 
i
;

124 
IVE_HANDLE
 
IveH™dÀ
;

125 
HI_BOOL
 
bIn°™t
 = 
HI_FALSE
;

126 
HI_BOOL
 
bBlock
 = 
HI_TRUE
;

127 
HI_BOOL
 
bFöish
 = 
HI_FALSE
;

128 
IVE_SRC_DATA_S
 
°SrcD©a
;

129 
IVE_DST_DATA_S
 
°D°D©a
;

130 
IVE_DMA_CTRL_S
 
°DmaCål
;

132 
s32Rë
 = 
	`SAMPLE_COMM_IVE_RódFûe
(&(
p°Te°Mem
->
°Src1
),Ö°Te°Mem->
pFpSrc
);

133 i‡(
s32Rë
 !
HI_SUCCESS
)

135 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_ReadFile fail\n");

139 
°DmaCål
.
íMode
 = 
IVE_DMA_MODE_DIRECT_COPY
;

141 
°SrcD©a
.
pu8VúAddr
 = 
p°Te°Mem
->
°Src1
.pu8VirAddr[0];

142 
°SrcD©a
.
u32PhyAddr
 = 
p°Te°Mem
->
°Src1
.u32PhyAddr[0];

143 
°SrcD©a
.
u16Width
 = 
p°Te°Mem
->
°Src1
.u16Width;

144 
°SrcD©a
.
u16Height
 = 
p°Te°Mem
->
°Src1
.u16Height;

145 
°SrcD©a
.
u16Såide
 = 
p°Te°Mem
->
°Src1
.u16Stride[0];

147 
°D°D©a
.
pu8VúAddr
 = 
p°Te°Mem
->
°Src2
.pu8VirAddr[0];

148 
°D°D©a
.
u32PhyAddr
 = 
p°Te°Mem
->
°Src2
.u32PhyAddr[0];

149 
°D°D©a
.
u16Width
 = 
p°Te°Mem
->
°Src2
.u16Width;

150 
°D°D©a
.
u16Height
 = 
p°Te°Mem
->
°Src2
.u16Height;

151 
°D°D©a
.
u16Såide
 = 
p°Te°Mem
->
°Src2
.u16Stride[0];

152 
s32Rë
 = 
	`HI_MPI_IVE_DMA
(&
IveH™dÀ
, &
°SrcD©a
, &
°D°D©a
,

153 &
°DmaCål
, 
bIn°™t
);

154 i‡(
s32Rë
 !
HI_SUCCESS
)

156 
	`SAMPLE_PRT
("HI_MPI_IVE_DMA faû,Eº‹(%#x)\n", 
s32Rë
);

160 
s32Rë
 = 
	`HI_MPI_IVE_Sub
(&
IveH™dÀ
, &
p°Te°Mem
->
°Src1
, &p°Te°Mem->
°Src2
, &p°Te°Mem->
°D°
, &p°Te°Mem->
°SubCål
, 
bIn°™t
);

161 i‡(
s32Rë
 !
HI_SUCCESS
)

163 
	`SAMPLE_PRT
("HI_MPI_IVE_Sub faû,Eº‹(%#x)\n", 
s32Rë
);

167 
bIn°™t
 = 
HI_TRUE
;

168 
s32Rë
 = 
	`HI_MPI_IVE_Hi°
(&
IveH™dÀ
, &
p°Te°Mem
->
°D°
, &p°Te°Mem->
°Hi°
, 
bIn°™t
);

169 i‡(
s32Rë
 !
HI_SUCCESS
)

171 
	`SAMPLE_PRT
("HI_MPI_IVE_Hi° faû,Eº‹(%#x)\n", 
s32Rë
);

174 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

175 
HI_ERR_IVE_QUERY_TIMEOUT
 =
s32Rë
)

177 
	`u¶ìp
(100);

178 
s32Rë
 = 
	`HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

181 i‡(
s32Rë
 !
HI_SUCCESS
)

183 
	`SAMPLE_PRT
("HI_MPI_IVE_Quîy faû,Eº‹(%#x)\n", 
s32Rë
);

187 
s32Rë
 = 
	`SAMPLE_COMM_IVE_WrôeFûe
(&
p°Te°Mem
->
°D°
,Ö°Te°Mem->
pFpD°
);

188 i‡(
s32Rë
 !
HI_SUCCESS
)

190 
	`SAMPLE_PRT
("SAMPLE_COMM_IVE_WriteFile fail\n");

194 
pu32Hi°
 = (
HI_U32
*)
p°Te°Mem
->
°Hi°
.
pu8VúAddr
;

196 i‡(
pu32Hi°
[0] !
p°Te°Mem
->
°Src1
.
u16Width
 *Ö°Te°Mem->°Src1.
u16Height
)

199 
	`SAMPLE_PRT
("Te° memÉº‹,pu32Hi°[0] = %d\n", 
pu32Hi°
[0]);

200 
i
 = 1; i < 
IVE_HIST_NUM
; i++)

202 i‡(
pu32Hi°
[
i
] != 0)

204 
	`SAMPLE_PRT
("Te° memÉº‹,Öu32Hi°[%d] = %d\n", 
i
, 
pu32Hi°
[i]);

209 
	}
}

213 
HI_VOID
 
	$SAMPLE_IVE_Te°Mem‹y
(
HI_VOID
)

215 
HI_S32
 
s32Rë
;

216 
TEST_MEMORY_S
 
°Te°Mem
;

217 
HI_U16
 
u16Width
 = 720;

218 
HI_U16
 
u16Height
 = 576;

219 
HI_CHAR
* 
pchSrcFûe
 = "./data/input/testmem/test_mem_in.yuv";

220 
HI_CHAR
* 
pchD°Fûe
 = "./data/output/testmem/test_mem_out.yuv";

222 
	`SAMPLE_COMM_IVE_CheckIveMpiInô
();

223 
s32Rë
 = 
	`SAMPLE_IVE_Te°Mem‹y_Inô
(&
°Te°Mem
, 
pchSrcFûe
, 
pchD°Fûe
, 
u16Width
, 
u16Height
);

224 i‡(
HI_SUCCESS
 !
s32Rë
)

226 
	`SAMPLE_PRT
("SAMPLE_IVE_TestMemory_Init fail\n");

227 
TEST_MEMORY_FAIL
;

230 
	`SAMPLE_IVE_Te°Mem‹yProc
(&
°Te°Mem
);

232 
	`SAMPLE_IVE_Te°Mem‹y_Unöô
(&
°Te°Mem
);

234 
TEST_MEMORY_FAIL
:

235 
	`SAMPLE_COMM_IVE_IveMpiExô
();

236 
	}
}

	@sample/ive/sample_ive_main.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<±hªad.h
>

13 
	~<sig«l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<f˙é.h
>

17 
	~<sys/io˘l.h
>

19 
	~"ßm∂e_comm_ive.h
"

21 
	~"ßm∂e/ßm∂e_ive_maö.h
"

27 
HI_VOID
 
	$SAMPLE_IVE_H™dÀSig
(
HI_S32
 
s32Signo
)

29 i‡(
SIGINT
 =
s32Signo
 || 
SIGTERM
 == s32Signo)

31 
	`SAMPLE_COMM_SYS_Exô
();

32 
	`¥ötf
("\033[0;31mprogramÅerminationábnormally!\033[0;39m\n");

34 
	`exô
(-1);

35 
	}
}

40 
HI_VOID
 
	$SAMPLE_IVE_Ußge
(
HI_CHAR
* 
pchPrgName
)

42 
	`¥ötf
("Ußgê: %†<ödex> [com∂ëe] [ícode] [vo]\n", 
pchPrgName
);

43 
	`¥ötf
("index:\n");

44 
	`¥ötf
("\t 0)Canny,<complete>:0, complete canny;1,part canny.\n");

45 
	`¥ötf
("\t 1)BgModel,<encode>:0,ÇotÉncode;1,encode.<vo>:0,not call vo;1,call vo.\n");

46 
	`¥ötf
("\t 2)Gmm,<encode>:0,ÇotÉncode;1,encode.<vo>:0,not call vo;1,call vo.\n");

47 
	`¥ötf
("\t 3)Occlusion detected.\n");

48 
	`¥ötf
("\t 4)MemoryTest.\n");

49 
	`¥ötf
("\t 5)Sobel.\n");

50 
	`¥ötf
("\t 6)Ann.\n");

51 
	`¥ötf
("\t 7)St Lk.\n");

52 
	`¥ötf
("\t 8)Svm.\n");

54 
	}
}

60 
	$maö
(
¨gc
, * 
¨gv
[])

62 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

64 
	`sig«l
(
SIGINT
, 
SAMPLE_IVE_H™dÀSig
);

65 
	`sig«l
(
SIGTERM
, 
SAMPLE_IVE_H™dÀSig
);

67 i‡(
¨gc
 < 2)

69 
	`SAMPLE_IVE_Ußge
(
¨gv
[0]);

70  
HI_FAILURE
;

73 *
¨gv
[1])

77 i‡((
¨gc
 < 3Ë|| (('0' !*
¨gv
[2]) && ('1' != *argv[2])))

79 
	`SAMPLE_IVE_Ußge
(
¨gv
[0]);

80  
HI_FAILURE
;

82 
	`SAMPLE_IVE_C™ny
(*
¨gv
[2]);

87 i‡((
¨gc
 < 4Ë|| (('0' !*
¨gv
[2]) && ('1' != *argv[2])) || (('0' != *argv[3]) && ('1' != *argv[3])))

89 
	`SAMPLE_IVE_Ußge
(
¨gv
[0]);

90  
HI_FAILURE
;

92 
	`SAMPLE_IVE_BgModñ
(*
¨gv
[2], *argv[3]);

97 i‡((
¨gc
 < 4Ë|| (('0' !*
¨gv
[2]) && ('1' != *argv[2])) || (('0' != *argv[3]) && ('1' != *argv[3])))

99 
	`SAMPLE_IVE_Ußge
(
¨gv
[0]);

100  
HI_FAILURE
;

102 
	`SAMPLE_IVE_Gmm
(*
¨gv
[2], *argv[3]);

107 
	`SAMPLE_IVE_Od
();

112 
	`SAMPLE_IVE_Te°Mem‹y
();

117 
	`SAMPLE_IVE_Sobñ
();

122 
	`SAMPLE_IVE_A¬
();

127 
	`SAMPLE_IVE_St_Lk
();

132 
	`SAMPLE_IVE_Svm
();

137 
	`SAMPLE_IVE_Ußge
(
¨gv
[0]);

144  
s32Rë
;

145 
	}
}

	@sample/libdetect2/det/ClusterForBody.cpp

1 
	~"Clu°îF‹Body.h
"

3 
	gClu°îF‹Body
::
	$Clu°îF‹Body
(
KVC⁄fig
 *
cfg
)

4 : 
	$cfg_
(
cfg
)

6 
	}
}

8 
Clu°îF‹Body
::~
	$Clu°îF‹Body
()

10 
	}
}

12 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
Clu°îF‹Body
::
mîge
(c⁄° std::ve˘‹<°d::ve˘‹<cv::Poöt> > &
c⁄tours
)

14 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
mîged
;

15  
	gmîged
;

	@sample/libdetect2/det/ClusterForBody.h

1 #¥agm®
⁄˚


3 
	~"dëe˘.h
"

7 ˛as†
	cClu°îF‹Body


9 
KVC⁄fig
 *
	mcfg_
;

11 
	mpublic
:

12 
Clu°îF‹Body
(
KVC⁄fig
 *
cfg
);

13 
	m°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
mîge
(c⁄° std::ve˘‹<°d::ve˘‹<cv::Poöt> > &
c⁄tours
);

14 ~
Clu°îF‹Body
();

	@sample/libdetect2/det/DetectMotionTempl.cpp

1 
	~"Dëe˘MŸi⁄Tem∂.h
"

3 
	gDëe˘MŸi⁄Tem∂
::
	$Dëe˘MŸi⁄Tem∂
(
KVC⁄fig
 *
cfg
)

4 : 
	$Dëe˘
(
cfg
)

6 
	}
}

8 
Dëe˘MŸi⁄Tem∂
::~
	$Dëe˘MŸi⁄Tem∂
()

10 
	}
}

12 
°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘MŸi⁄Tem∂
::
dëe˘0
(cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
)

14 
dús
.
˛ór
();

15 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

20  
	grcs
;

	@sample/libdetect2/det/DetectMotionTempl.h

1 #¥agm®
⁄˚


3 
	~"dëe˘.h
"

5 ˛as†
	cDëe˘MŸi⁄Tem∂
 : 
public
 
Dëe˘


7 
public
:

8 
Dëe˘MŸi⁄Tem∂
(
KVC⁄fig
 *
cfg
);

9 ~
Dëe˘MŸi⁄Tem∂
();

11 
	m¥iv©e
:

12 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
dëe˘0
(cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
);

	@sample/libdetect2/det/DetectWithCT.cpp

1 
	~"Dëe˘WôhCT.h
"

3 
	#DIFF_THRESHOLD
 25

	)

5 
	gDëe˘WôhCT
::
	$Dëe˘WôhCT
(
KVC⁄fig
 *
cfg
)

6 : 
	$Dëe˘
(
cfg
)

8 
kî_îode_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_ERODE
, cv::
	`Size
(1, 1));

9 
kî_dû©e_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(9, 9));

11 
cc_
.
	`lﬂd
("data/header_18_18.xml");

12 
	}
}

14 
	gDëe˘WôhCT
::~
	$Dëe˘WôhCT
()

16 
	}
}

18 
°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhCT
::
dëe˘0
(
size_t
 
˙t
, cv::
M©
 &
‹igö
, cv::M© &
¥ev
, cv::M© &
cuº
, cv::ve˘‹<> &
dús
)

20 
RECTS
 
mŸi⁄_ª˘s
 = 
gë_mŸi⁄_ª˘s_usög_diff
(
¥ev
, 
cuº
);

22 
RECTS
 
	gÆl_hódîs
;

23 
	gRECTS
::
c⁄°_ôî©‹
 
ô
 = 
mŸi⁄_ª˘s
.
begö
(); 
	gô
 !mŸi⁄_ª˘s.
íd
(); ++it) {

24 
RECTS
 
	ghódîs
 = 
gë_hódîs
(
‹igö
(*
ô
));

25 
size_t
 
	gi
 = 0; i < 
	ghódîs
.
size
(); i++) {

26 
	ghódîs
[
i
].
	gx
 +
ô
->
x
;

27 
	ghódîs
[
i
].
	gy
 +
ô
->
y
;

29 
	gÆl_hódîs
.
push_back
(
hódîs
[
i
]);

33 
size_t
 
	gi
 = 0; i < 
	gÆl_hódîs
.
size
(); i++) {

34 
	gcv
::
ª˘™gÀ
(
‹igö
, 
Æl_hódîs
[
i
], 
cv
::
Sˇœr
(255, 255, 255), 2);

37 
RECTS
 
	grcs
;

38  
	grcs
;

41 
RECTS
 
	gDëe˘WôhCT
::
	$gë_mŸi⁄_ª˘s_usög_diff
(c⁄° 
cv
::
M©
 &
¥ev
, c⁄° cv::M© &
cuº
)

43 
cv
::
M©
 
diff
;

44 
cv
::
	`absdiff
(
¥ev
, 
cuº
, 
diff
);

46 
cv
::
	`thªshﬁd
(
diff
, diff, 
DIFF_THRESHOLD
, 255.0, cv::
THRESH_BINARY
);

48 
cv
::
	`îode
(
diff
, diff, 
kî_îode_
);

49 
cv
::
	`dû©e
(
diff
, diff, 
kî_dû©e_
);

50 
cv
::
	`dû©e
(
diff
, diff, 
kî_dû©e_
);

52 
cv
::
	`imshow
("˘ diff", 
diff
);

54 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
c⁄tours
;

55 
cv
::
	`födC⁄tours
(
diff
, 
c⁄tours
, cv::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

56 
cv
::
	`døwC⁄tours
(
‹igö_
, 
c⁄tours
, -1, cv::
	`Sˇœr
(0, 0, 255));

58 
RECTS
 
rcs
;

59 
size_t
 
i
 = 0; i < 
c⁄tours
.
	`size
(); i++) {

60 
rcs
.
	`push_back
(
cv
::
	`boundögRe˘
(
c⁄tours
[
i
]));

63  
rcs
;

64 
	}
}

67 
RECTS
 
	gDëe˘WôhCT
::
	$gë_hódîs
(c⁄° 
cv
::
M©
 &
img
)

69 
RECTS
 
rcs
;

70 
cv
::
M©
 
gøy
;

71 
cv
::
	`cvtCﬁ‹
(
img
, 
gøy
, 
CV_RGB2GRAY
);

73 
cc_
.
	`dëe˘Mu…iSˇÀ
(
gøy
, 
rcs
);

74  
rcs
;

75 
	}
}

	@sample/libdetect2/det/DetectWithCT.h

1 #¥agm®
⁄˚


2 
	~"dëe˘.h
"

3 
	~"˘/Com¥essiveTøckî.h
"

12 ˛as†
	cDëe˘WôhCT
 : 
public
 
Dëe˘


16 
	sT¨gë


18 
T¨gë
 *
√w_èrgë
(c⁄° 
cv
::
Re˘
 &
hódî
, 
°amp
)

20 
T¨gë
 *
	mt
 = 
√w
 Target;

21 
	mt
->
	mhi°_rcs
.
push_back
(
hódî
);

22 
	mt
->
	m°amp_begö
 = 
°amp
;

25 
	m°amp_begö
, 
	m°amp_œ°_upd©ed
;

26 
	m°d
::
deque
<
cv
::
Re˘
> 
hi°_rcs
;

28 
	mcv
::
Re˘
 
rc
(Ëc⁄° {  
hi°_rcs
.
back
(); }

31 
	g°d
::
	tli°
<
	tT¨gë
> 
	tTARGETS
;

32 
TARGETS
 
	gèrgës_
;

34 
	gcv
::
M©
 
kî_îode_
, 
	gkî_dû©e_
;

36 
	gcv
::
CasˇdeCœssifõr
 
cc_
;

38 
	gpublic
:

39 
Dëe˘WôhCT
(
KVC⁄fig
 *
cfg
);

40 ~
Dëe˘WôhCT
();

42 
	g¥iv©e
:

43 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
);

46 
RECTS
 
gë_mŸi⁄_ª˘s_usög_diff
(c⁄° 
cv
::
M©
 &
¥ev
, c⁄° cv::M© &
cuº
);

49 
RECTS
 
gë_hódîs
(c⁄° 
cv
::
M©
 &
ønge
);

	@sample/libdetect2/det/DetectWithOF.cpp

1 
	~"Dëe˘WôhOF.h
"

3 
	gDëe˘WôhOF
::
	$Dëe˘WôhOF
(
KVC⁄fig
 *
cfg
)

4 : 
	$Dëe˘
(
cfg
)

6 
debug_img_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("debug_img3", "0"));

7 
kî_îode_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(3, 3));

8 
kî_dû©e
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(25, 25));

9 
	}
}

11 
	gDëe˘WôhOF
::~
	$Dëe˘WôhOF
()

13 
	}
}

15 
°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF
::
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
)

17 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

18 
	gdús
.
˛ór
();

21 
	gcv
::
M©
 
diff
;

22 
	gcv
::
absdiff
(
gøy_¥ev
, 
gøy_cuº
, 
diff
);

23 
	gcv
::
thªshﬁd
(
diff
, diff, 30, 255, 
cv
::
THRESH_BINARY
);

25 
	gcv
::
îode
(
diff
, diff, 
kî_îode_
);

26 
	gcv
::
dû©e
(
diff
, diff, 
kî_dû©e
);

28 i‡(
	gdebug_img_
) {

29 
	gcv
::
imshow
("diff", 
diff
);

32 
	gcv
::
M©
 
tmp
 = 
diff
.
˛⁄e
();

33 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
c⁄tours
;

34 
	gcv
::
födC⁄tours
(
tmp
, 
c⁄tours
, 
cv
::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

36 i‡(
	gdebug_img_
) {

41 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
brcs
 = 
gëBoundögRe˘s
(
c⁄tours
);

44 
size_t
 
	gi
 = 0; i < 
	gbrcs
.
size
(); i++) {

45 i‡(
	gbrcs
[
i
].
¨ó
() < 300) ;

47 
boﬁ
 
	g¸os£d
 = 
Ál£
;

50 
size_t
 
	gj
 = 0; !
	g¸os£d
 && j < 
	gåackögRe˘s_
.
size
(); j++) {

51 i‡(
is_¸oss
(
brcs
[
i
], 
åackögRe˘s_
[
j
].
boundögRe˘
())) {

52 
	g¸os£d
 = 
åue
;

56 i‡(!
	g¸os£d
) {

57 i‡(
	gdebug_img_
) {

58 
	gcv
::
ª˘™gÀ
(
‹igö
, 
brcs
[
i
], 
cv
::
Sˇœr
(0, 0, 255));

61 
TøckögRe˘
 
	gå
;

62 
	gcv
::
Re˘
 
brc
;

63 
	g°d
::
ve˘‹
<
cv
::
Poöt2f
> 
√xt_±s
;

64 i‡(
	gå
.
öô
(
‹igö
, 
gøy_¥ev
, 
brcs
[
i
])) {

65 
	gåackögRe˘s_
.
push_back
(
å
);

71 
size_t
 
	gi
 = 0; i < 
	gåackögRe˘s_
.
size
(); i++) {

72 
	gcv
::
Re˘
 
brc
;

73 
	g°d
::
ve˘‹
<
cv
::
Poöt2f
> 
√xt_±s
;

74 
boﬁ
 
	gmovög
 = 
åackögRe˘s_
[
i
].
åack
(
gøy_¥ev
, 
gøy_cuº
, 
brc
, 
√xt_±s
);

76 i‡(
	gdebug_img_
) {

77 
size_t
 
	gx
 = 0; x < 
	g√xt_±s
.
size
(); x++) {

78 
	gcv
::
cú˛e
(
‹igö
, 
√xt_±s
[
x
], 2, 
cv
::
Sˇœr
(0, 255, 255), 2);

80 
	gcv
::
ª˘™gÀ
(
‹igö
, 
brc
, 
cv
::
Sˇœr
(0, 255, 255));

81 
	gcv
::
ª˘™gÀ
(
‹igö
, 
åackögRe˘s_
[
i
].
œ°_boundögRe˘
(), 
cv
::
Sˇœr
(255, 0, 255), 3);

83 
	gåackögRe˘s_
[
i
].
døw_hi°
(
‹igö
);

86 i‡(
	gmovög
 && 
	gåackögRe˘s_
[
i
].
hi°_˙t
() > 0) {

87 
	gcv
::
Poöt2f
 
•
 = 
åackögRe˘s_
[
i
].
°¨t_món_±
(), 
	gï
 =ÅøckögRe˘s_[i].
íd_món_±
();

88 
	gcv
::
löe
(
‹igö
, 
•
, 
ï
, 
cv
::
Sˇœr
(0, 0, 255), 5);

91 i‡(!
	gmovög
) {

93 
	gcv
::
Re˘
 
rc
;

94 
	gdú
;

95 i‡(
	gåackögRe˘s_
[
i
].
gë_ªsu…
(
rc
, 
dú
)) {

96 
	grcs
.
push_back
(
rc
);

97 
	gdús
.
push_back
(
dú
);

99 c⁄° * 
	gss
[] = { "right", "down", "left", "up" };

100 
	gcv
::
putText
(
‹igö
, 
ss
[
dú
], 
rc
.
é
(), 
cv
::
FONT_HERSHEY_PLAIN
, 3.0, cv::
Sˇœr
(255, 255, 255));

106 
	gåackögRe˘s_
.
îa£
(
°d
::
ªmove_if
(
åackögRe˘s_
.
begö
(),ÅøckögRe˘s_.
íd
(), 
TøckögRe˘
::
is_no_movög
),ÅrackingRects_.end());

108  
	grcs
;

111 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF
::
gëBoundögRe˘s
(c⁄° 
°d
::ve˘‹<°d::ve˘‹<cv::
Poöt
> > &
c⁄tours
)

113 
°d
::
ve˘‹
<
cv
::
Re˘
> 
brcs
;

114 
size_t
 
	gi
 = 0; i < 
	gc⁄tours
.
size
(); i++) {

115 
	gåy
 {

116 
	gbrcs
.
push_back
(
cv
::
boundögRe˘
(
c⁄tours
[
i
]));

118 
ˇtch
 (...) {}

120  
	gbrcs
;

	@sample/libdetect2/det/DetectWithOF.h

1 #¥agm®
⁄˚


3 
	~"dëe˘.h
"

4 
	~<deque
>

7 
boﬁ
 
_˚¡î
(c⁄° 
°d
::
ve˘‹
<
cv
::
Poöt2f
> &
±s
, cv::Poöt2‡&
˚¡î
, c⁄° cv::
M©
 &
vÆid
 = cv::
	$M©
())

9 c⁄° *
s
 = 
vÆid
.
±r
<>(0);

10 
n
 = 0;

11 
x
 = 0.0, 
y
 = 0.0;

13 i‡(
vÆid
.
cﬁs
 =
±s
.
	`size
()) {

14 
size_t
 
i
 = 0; i < 
±s
.
	`size
(); i++) {

15 i‡(
s
[
i
]) {

16 
x
 +
±s
[
i
].x, 
y
 +=Öts[i].y;

17 
n
++;

22 
size_t
 
i
 = 0; i < 
±s
.
	`size
(); i++) {

23 
x
 +
±s
[
i
].x, 
y
 +=Öts[i].y;

24 
n
++;

28 i‡(
n
 > 0) {

29 
˚¡î
.
x
 = x/
n
, cíãr.
y
 = y/n;

30  
åue
;

33  
Ál£
;

35 
	}
}

45 ˛as†
	cDëe˘WôhOF
 : 
public
 
Dëe˘


47 
debug_img_
;

48 
	mcv
::
M©
 
kî_îode_
, 
	mkî_dû©e
;

56 ˛as†
	cTøckögRe˘


58 
	mcv
::
M©
 
‹igö_
;

59 
	mcv
::
Re˘
 
rc_°¨t_
;

60 
	mcv
::
Re˘
 
boundögRe˘_
;

61 
	mcv
::
Re˘
 
œ°_boundögRe˘_
;

62 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
> 
„©uªs_
;

63 
	mcv
::
Poöt2f
 
˚¡î_°¨t_
;

64 
	m˙t_mö_
, 
	m˙t_max_
;

65 
boﬁ
 
	mmovög_
;

67 
	m°d
::
	tdeque
<
	t°d
::
	tve˘‹
<
	tcv
::
	tPoöt2f
> > 
	tALL_POINTS
;

68 
ALL_POINTS
 
	mÆl_poöts_
;

70 
	mpublic
:

71 
boﬁ
 
öô
(c⁄° 
cv
::
M©
 &
‹igö
, c⁄° cv::M© &
gøy
, c⁄° cv::
Re˘
 &
rc
)

73 
‹igö_
 = 
‹igö
, 
	mrc_°¨t_
 = 
rc
;

74 
	m˙t_max_
 = 
sqπ
(
rc
.
¨ó
()*1.0)+1, 
	m˙t_mö_
 = 
˙t_max_
 / 2;

76 
	mcv
::
goodFótuªsToTøck
(
gøy
(
rc
), 
„©uªs_
, 
˙t_max_
, 0.1, 3);

77 
size_t
 
	mi
 = 0; i < 
	m„©uªs_
.
size
(); i++) {

78 
	m„©uªs_
[
i
].
	mx
 +
rc
.
x
;

79 
	m„©uªs_
[
i
].
	my
 +
rc
.
y
;

83 
	mÆl_poöts_
.
push_‰⁄t
(
„©uªs_
);

85 
_˚¡î
(
„©uªs_
, 
˚¡î_°¨t_
);

87 
	mboundögRe˘_
 = 
rc
;

88 
	mœ°_boundögRe˘_
 = 
rc
;

89 
	mmovög_
 = 
åue
;

91  
	m„©uªs_
.
size
(Ë> 
	m˙t_mö_
;

94 
	mcv
::
Re˘
 
boundögRe˘
(Ëc⁄° {  
boundögRe˘_
; }

95 
	mcv
::
Re˘
 
œ°_boundögRe˘
(Ëc⁄° {  
œ°_boundögRe˘_
; }

97 
ªmove_hi°_poöts
(
n
)

100 
size_t
 
	mi
 = 0; i < 
	mÆl_poöts_
.
size
(); i++) {

101 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
> &
ps
 = 
Æl_poöts_
[
i
];

102 
	mx
 = 0;

103 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
>::
ôî©‹
 
ô
 = 
ps
.
begö
(); 
	mô
 !ps.
íd
(); it++, 
	mx
++) {

104 i‡(
	mx
 =
n
) {

105 
ps
.
îa£
(
ô
);

112 
døw_hi°
(
cv
::
M©
 &
‹igö
)

114 
i
 = 1; 
	mi
 < 
	mÆl_poöts_
.
size
(); i++) {

115 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
> &
l0
 = 
Æl_poöts_
[
i
-1], &
	ml1
 =áll_points_[i];

117 i‡(
	ml0
.
size
(Ë=
l1
.size()) {

118 
j
 = 0; 
	mj
 < 
	ml0
.
size
(); j++) {

119 
	mcv
::
löe
(
‹igö
, 
l0
[
j
], 
l1
[j], 
cv
::
Sˇœr
(0, 255, 0));

126 
boﬁ
 
gë_±_hi°
(
n
, 
°d
::
ve˘‹
<
cv
::
Poöt2f
> &
∑th
)

128 i‡(
Æl_poöts_
.
em±y
(Ë|| 
n
 >Æl_poöts_[0].
size
()) {

129  
Ál£
;

132 
	m∑th
.
˛ór
();

133 
	mALL_POINTS
::
c⁄°_ªvî£_ôî©‹
 
ô
;

134 
	mô
 = 
Æl_poöts_
.
rbegö
(); ià!Æl_poöts_.
ªnd
(); it++) {

135 
	m∑th
.
push_back
((*
ô
)[
n
]);

138  
	måue
;

142 
gë_movög_poöts
() const

144 
as£π
(!
Æl_poöts_
.
em±y
());

145  
	mÆl_poöts_
[0].
size
();

150 
boﬁ
 
åack
(c⁄° 
cv
::
M©
 &
¥ev
, c⁄° cv::M© &
cuº
, cv::
Re˘
 &
boundögRc
, 
°d
::
ve˘‹
<cv::
Poöt2f
> &
√xt_±s
)

152 
°d
::
ve˘‹
<
cv
::
Poöt2f
> 
√xt_„©uªs
;

153 
	mcv
::
M©
 
°©us
, 
	mîr
;

155 
	mcv
::
ˇlcO±iˇlFlowPyrLK
(
¥ev
, 
cuº
, 
„©uªs_
, 
√xt_„©uªs
, 
°©us
, 
îr
);

157 
	mcv
::
M©
 
s
 = 
°©us
.
ªsh≠e
(1, 1), 
	me
 = status.reshape(1, 1);

158 *
	mps
 = 
s
.
±r
<>(0), *
	m≥
 = s.ptr<>(0);

160 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
> 
moved
;

162 
boﬁ
 
	mmovög
 = 
Ál£
;

164 
size_t
 
	mi
 = 0; i < 
	m„©uªs_
.
size
(); i++) {

165 i‡(
	mps
[
i
] =1 && (
√xt_„©uªs
[i].
x
 > 0 &&Çext_„©uªs[i].
y
 > 0 &&Çext_„©uªs[i].x < 
‹igö_
.
cﬁs
-1 &&Çext_„©uªs[i].y < origö_.
rows
-1)) {

166 i‡(
_di°™˚
(
√xt_„©uªs
[
i
], 
„©uªs_
[i]) >= 3) {

167 
movög
 = 
åue
;

168 
	mmoved
.
push_back
(
√xt_„©uªs
[
i
]);

173 
ªmove_hi°_poöts
(
i
);

177 i‡(
	mmovög
) {

178 
	mÆl_poöts_
.
push_‰⁄t
(
moved
);

181 
	m√xt_±s
 = 
moved
;

183 
	mboundögRc
 = 
cv
::
boundögRe˘
(
moved
);

186 
	mboundögRe˘_
 = 
boundögRc
;

188 
	m„©uªs_
 = 
moved
;

190 
	mœ°_boundögRe˘_
 = 
cv
::
boundögRe˘
(
moved
);

195 
	mmovög_
 = 
Ál£
;

198  
	mmovög
;

201 
boﬁ
 
movög
(Ëc⁄° {  
	mmovög_
; }

203 
boﬁ
 
gë_ªsu…
(
cv
::
Re˘
 &
rc
, &
dú
)

206 i‡(
gë_movög_poöts
() > 0) {

207 
	mrc
 = 
boundögRe˘_
;

208 
	mdú
 = 
gë_dú
();

209  
	måue
;

212  
	mÁl£
;

217 
	mcv
::
Poöt2f
 
món_of_poöts
(c⁄° 
°d
::
ve˘‹
<
cv
::Poöt2f>&
±s
) const

219 
as£π
(!
±s
.
em±y
());

221 
	msx
 = 0, 
	msy
 = 0;

222 
size_t
 
	mi
 = 0; i < 
	m±s
.
size
(); i++) {

223 
	msx
 +
±s
[
i
].
x
, 
	msy
 +±s[i].
y
;

226  
	mcv
::
Poöt2f
(
sx
/
±s
.
size
(), 
sy
/pts.size());

230 
gë_dú
()

233 
	mcv
::
Poöt2f
 
°¨t
 = 
món_of_poöts
(
Æl_poöts_
.
back
());

234 
	mcv
::
Poöt2f
 
°›
 = 
món_of_poöts
(
Æl_poöts_
.
‰⁄t
());

236 
	ma
 = 
©™2
(
°¨t
.
y
-
°›
.y, st›.
x
-°¨t.xË* 180 / 
	mM_PI
;

238 i‡(
	ma
 < 0) {

239 
	ma
 = 0.0 - 
a
;

242 
	ma
 = 360 - 
a
;

245 
	mdú_idx
 = 1;

246 
	mup_hÆf
 = 110 / 2;

247 
	mup_mö
 = 270 - 
up_hÆf
, 
	mup_max
 = 270 + up_half;

248 i‡(
	ma
 >
up_mö
 && 
a
 <
up_max
) {

249 
dú_idx
 = 3;

251 i‡(
	ma
 >45 && 
a
 <= 135) {

252 
dú_idx
 = 1;

254 i‡(
	ma
 > 135 &&á < 
	mup_mö
) {

255 
	mdú_idx
 = 2;

258 
	mdú_idx
 = 0;

261  
	mdú_idx
;

264 
hi°_˙t
() const

266  
	mÆl_poöts_
.
size
();

269 
boﬁ
 
is_no_movög
(c⁄° 
TøckögRe˘
 &
å
)

271  !
	må
.
	mmovög_
;

274 
	mcv
::
Poöt2f
 
°¨t_món_±
() const

276  
món_of_poöts
(
Æl_poöts_
.
back
());

279 
	mcv
::
Poöt2f
 
íd_món_±
() const

281  
món_of_poöts
(
Æl_poöts_
.
‰⁄t
());

285 
	g°d
::
ve˘‹
<
TøckögRe˘
> 
åackögRe˘s_
;

287 
	gpublic
:

288 
Dëe˘WôhOF
(
KVC⁄fig
 *
cfg
);

289 
	gvútuÆ
 ~
Dëe˘WôhOF
();

291 
	g¥iv©e
:

292 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
);

295 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
gëBoundögRe˘s
(c⁄° 
°d
::ve˘‹<°d::ve˘‹<cv::
Poöt
> > &
c⁄tours
);

	@sample/libdetect2/det/DetectWithOF2.cpp

1 
	~"Dëe˘WôhOF2.h
"

4 
	gDëe˘WôhOF2
::
	$Dëe˘WôhOF2
(
KVC⁄fig
 *
cfg
)

5 : 
	$Dëe˘
(
cfg
)

7 
od_
 = 
cc_
.
	`lﬂd
(
cfg_
->
	`gë_vÆue
("faces_meta_fname", "data/faces_12_12.xml"));

8 
	}
}

10 
	gDëe˘WôhOF2
::~
	$Dëe˘WôhOF2
()

12 
	}
}

14 
°d
::
ve˘‹
<
cv
::
Re˘
> 
	$_gë_diff_brcs
(c⁄° 
cv
::
M©
 &
gøy_¥ev
, c⁄° cv::M© &
gøy_cuº
)

16 
cv
::
M©
 
diff
;

17 
cv
::
	`absdiff
(
gøy_¥ev
, 
gøy_cuº
, 
diff
);

18 
cv
::
	`thªshﬁd
(
diff
, diff, 20, 255, cv::
THRESH_BINARY
);

22 
cv
::
M©
 
kî_îode_
 = cv::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(3, 3));

23 
cv
::
M©
 
kî_dû©e
 = cv::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(11, 11));

25 
cv
::
	`îode
(
diff
, diff, 
kî_îode_
);

26 
cv
::
	`dû©e
(
diff
, diff, 
kî_dû©e
);

30 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
c⁄tours
;

31 
cv
::
	`födC⁄tours
(
diff
, 
c⁄tours
, cv::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

33 
°d
::
ve˘‹
<
cv
::
Re˘
> 
brcs
;

35 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> >::
c⁄°_ôî©‹
 
ô
 = 
c⁄tours
.
	`begö
(); ià!c⁄tours.
	`íd
(); ++it) {

36 
brcs
.
	`push_back
(
cv
::
	`boundögRe˘
(*
ô
));

39  
brcs
;

40 
	}
}

47 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF2
::
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
)

49 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

50 
	gdús
.
˛ór
();

53 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
brcs_diff
 = 
_gë_diff_brcs
(
gøy_¥ev
, 
gøy_cuº
);

67 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
√w_posôi⁄
 = 
gë_√w_posôi⁄
(
brcs_diff
);

69 
size_t
 
	gi
 = 0; i < 
	g√w_posôi⁄
.
size
(); i++) {

70 
	gcv
::
ª˘™gÀ
(
‹igö
, 
√w_posôi⁄
[
i
], 
cv
::
Sˇœr
(0, 0, 255));

74 
	g°d
::
ve˘‹
<
cv
::
Re˘
>::
c⁄°_ôî©‹
 
ô
 = 
√w_posôi⁄
.
begö
(); 
	gô
 !√w_posôi⁄.
íd
(); ++it) {

75 
Tøcked
 
t
(
this
);

76 i‡(
	gt
.
öô
(
gøy_cuº
, *
ô
)) {

77 
	gåackögs_
.
push_back
(
t
);

82 
	gTRACKEDS
::
ôî©‹
 
ô
 = 
åackögs_
.
begö
(); 
	gô
 !åackögs_.
íd
(); ) {

83 
	gô
->
åack
(
gøy_¥ev
, 
gøy_cuº
);

85 
	gcv
::
ª˘™gÀ
(
‹igö
, 
ô
->
brc
(), 
cv
::
Sˇœr
(0, 255, 0));

87 i‡(
	gô
->
°›≥d
()) {

88 
	gô
 = 
åackögs_
.
îa£
(
ô
);

91 
	gô
->
døw_hi°‹y
(
‹igö
);

93 ++
	gô
;

97  
	grcs
;

100 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF2
::
gë_√w_posôi⁄
(c⁄° 
°d
::ve˘‹<cv::Re˘> &
Æl_diff_brcs
)

102 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

104 
	g°d
::
ve˘‹
<
cv
::
Re˘
>::
c⁄°_ôî©‹
 
ô
 = 
Æl_diff_brcs
.
begö
(); 
	gô
 !Æl_diff_brcs.
íd
(); ++it) {

106 
boﬁ
 
	g¸os£d
 = 
Ál£
;

107 
	gTRACKEDS
::
c⁄°_ôî©‹
 
ôt
 = 
åackögs_
.
begö
(); !
	g¸os£d
 && 
	gôt
 !åackögs_.
íd
(); ++itt) {

108 
	g¸os£d
 = 
is_¸oss
(*
ô
, 
ôt
->
brc
());

111 i‡(!
	g¸os£d
) {

112 
	grcs
.
push_back
(*
ô
);

116  
	grcs
;

119 
	gDëe˘WôhOF2
::
Tøcked
::
	$Tøcked
(
Dëe˘WôhOF2
 *
£lf
)

121 
£lf_
 = 
£lf
;

122 
	}
}

124 
boﬁ
 
	gDëe˘WôhOF2
::
Tøcked
::
	$öô
(c⁄° 
cv
::
M©
 &
gøy
, c⁄° cv::
Re˘
 &
posôi⁄
)

126 
˙t_max
 = 
	`sqπ
(
posôi⁄
.
	`¨ó
()*1.0)+1, 
˙t_mö
 = cnt_max / 2;

128 
cv
::
	`goodFótuªsToTøck
(
	`gøy
(
posôi⁄
), 
„©uªs_
, 
˙t_max
, 0.1, 3);

129 
°d
::
ve˘‹
<
cv
::
Poöt2f
>::
ôî©‹
 
ô
 = 
„©uªs_
.
	`begö
(); ià!„©uªs_.
	`íd
(); ++it) {

130 
ô
->
x
 +
posôi⁄
.x;

131 
ô
->
y
 +
posôi⁄
.y;

133 
±_°amp_
.
	`push_back
(
£lf_
->
cuº_°amp_
);

136 
brc_
 = 
posôi⁄
;

138  
„©uªs_
.
	`size
(Ë>
˙t_mö
;

139 
	}
}

141 
boﬁ
 
	gDëe˘WôhOF2
::
Tøcked
::
	$°›≥d
()

144  !
movög_
;

145 
	}
}

147 
	gDëe˘WôhOF2
::
Tøcked
::
	$åack
(
cv
::
M©
 &
¥ev
, cv::M© &
cuº
)

151 
°d
::
ve˘‹
<
cv
::
Poöt2f
> 
√xt_„©uªs
;

152 
cv
::
M©
 
°©us
, 
îr
;

154 
cv
::
	`ˇlcO±iˇlFlowPyrLK
(
¥ev
, 
cuº
, 
„©uªs_
, 
√xt_„©uªs
, 
°©us
, 
îr
);

156 
cv
::
M©
 
s
 = 
°©us
.
	`ªsh≠e
(1, 1), 
e
 = status.reshape(1, 1);

157 *
ps
 = 
s
.
±r
<>(0), *
≥
 = s.ptr<>(0);

159 
°d
::
ve˘‹
<
cv
::
Poöt2f
> 
moved
;

161 
i
 = ()
„©uªs_
.
	`size
()-1; i >= 0; i--) {

162 i‡(
ps
[
i
] == 1) {

164 
dis
 = 
	`_di°™˚
(
„©uªs_
[
i
], 
√xt_„©uªs
[i]);

165 i‡(
dis
 > 100) {

168 i‡(
dis
 > 3) {

170 
moved
.
	`push_back
(
√xt_„©uªs
[
i
]);

171 
±_°amp_
[
i
] = 
£lf_
->
cuº_°amp_
;

174 i‡(
£lf_
->
cuº_°amp_
 - 
±_°amp_
[
i
] < 0.300) {

176 
moved
.
	`push_back
(
√xt_„©uªs
[
i
]);

182 
	`ªmove_±_‰om_hi°‹y
(
i
);

183 
±_°amp_
.
	`îa£
’t_°amp_.
	`begö
(Ë+ 
i
);

186 
°d
::
	`ªvî£
(
moved
.
	`begö
(), moved.
	`íd
());

187 
„©uªs_
 = 
moved
;

189 i‡(!
moved
.
	`em±y
()) {

190 
brc_
 = 
cv
::
	`boundögRe˘
(
moved
);

193 
‰ame_åackögs_
.
	`push_back
(
moved
);

196 
movög_
 = !
moved
.
	`em±y
();

197 
	}
}

199 
Dú
 
	gDëe˘WôhOF2
::
Tøcked
::
	$dú
() const

202  
LEFT
;

203 
	}
}

205 
	gDëe˘WôhOF2
::
Tøcked
::
	$di°™˚
(&
món
, &
max
, &
mö
) const

207 
	}
}

209 
	gDëe˘WôhOF2
::
Tøcked
::
	$ªmove_±_‰om_hi°‹y
(
n
)

211 
°d
::
deque
<°d::
ve˘‹
<
cv
::
Poöt2f
> >::
ôî©‹
 
ô
 = 
‰ame_åackögs_
.
	`begö
(); ià!‰ame_åackögs_.
	`íd
(); ++it) {

212 
ô
->
	`îa£
(ô->
	`begö
(Ë+ 
n
);

214 
	}
}

216 
	gDëe˘WôhOF2
::
Tøcked
::
	$døw_hi°‹y
(
cv
::
M©
 &
‹igö
)

218 
size_t
 
i
 = 1; i < 
‰ame_åackögs_
.
	`size
(); i++) {

219 
	`as£π
(
‰ame_åackögs_
[
i
-1].
	`size
() == frame_trackings_[i].size());

221 
size_t
 
j
 = 0; j < 
‰ame_åackögs_
[
i
].
	`size
(); j++) {

222 
cv
::
	`löe
(
‹igö
, 
‰ame_åackögs_
[
i
-1][
j
], føme_åackögs_[i][j], cv::
	`Sˇœr
(0, 255, 255));

226 
cv
::
Re˘
 
brc
 = cv::
	`boundögRe˘
(
‰ame_åackögs_
[0]);

227 
cv
::
	`ª˘™gÀ
(
‹igö
, 
brc
, cv::
	`Sˇœr
(255, 0, 0));

228 
	}
}

230 
boﬁ
 
	gDëe˘WôhOF2
::
dëe˘_body
(c⁄° 
cv
::
M©
 &
‹igö
, c⁄° cv::
Re˘
 &
roi
, 
°d
::
ve˘‹
<cv::Re˘> &
rcs
)

232 i‡(
od_
) {

236  
Ál£
;

	@sample/libdetect2/det/DetectWithOF2.h

1 #¥agm®
⁄˚


2 
	~"dëe˘.h
"

3 
	~<deque
>

4 
	~"objdë.h
"

8 ˛as†
	cDëe˘WôhOF2
 : 
public
 
Dëe˘


13 ˛as†
	cTøcked


15 
Dëe˘WôhOF2
 *
£lf_
;

16 
	mcv
::
Re˘
 
brc_
;

17 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
> 
„©uªs_
;

18 
	m°d
::
ve˘‹
<> 
±_°amp_
;

19 
boﬁ
 
	mmovög_
;

22 
	m°d
::
deque
<
°d
::
ve˘‹
<
cv
::
Poöt2f
> > 
‰ame_åackögs_
;

24 
	mpublic
:

25 
Tøcked
(
Dëe˘WôhOF2
 *
£lf
);

28 
boﬁ
 
öô
(c⁄° 
cv
::
M©
 &
gøy
, c⁄° cv::
Re˘
 &
posôi⁄
);

31 
	mcv
::
Re˘
 
brc
(Ëc⁄° {  
brc_
; }

33 
åack
(
cv
::
M©
 &
g0
, cv::M© &
g1
);

36 
boﬁ
 
°›≥d
();

39 
Dú
 
dú
() const;

42 
di°™˚
(&
món_dis
, &
max_dis
, &
mö_dis
) const;

45 
døw_hi°‹y
(
cv
::
M©
 &
‹igö
);

47 
	m¥iv©e
:

48 
ªmove_±_‰om_hi°‹y
(
n
);

50 
‰õnd
 
˛ass
 
	gTøcked
;

52 
	g°d
::
	tve˘‹
<
	tTøcked
> 
	tTRACKEDS
;

53 
TRACKEDS
 
	gåackögs_
;

55 
boﬁ
 
	god_
;

56 
	gcv
::
CasˇdeCœssifõr
 
cc_
;

58 
	gpublic
:

59 
Dëe˘WôhOF2
(
KVC⁄fig
 *
cfg
);

60 ~
Dëe˘WôhOF2
();

62 
	g¥iv©e
:

63 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
);

66 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
gë_√w_posôi⁄
(c⁄° 
°d
::ve˘‹<cv::Re˘> &
Æl_diff_brcs
);

69 
boﬁ
 
dëe˘_body
(c⁄° 
cv
::
M©
 &
‹igö
, c⁄° cv::
Re˘
 &
roi
, 
°d
::
ve˘‹
<cv::Re˘> &
bodõs
);

	@sample/libdetect2/det/DetectWithOF3.cpp

1 
	~"Dëe˘WôhOF3.h
"

4 
	gDëe˘WôhOF3
::
	$Dëe˘WôhOF3
(
KVC⁄fig
 *
cfg
)

5 : 
	$Dëe˘
(
cfg
)

7 
fb_pyrsˇÀ_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("fb_pyrscale", "0.5"));

8 
fb_Àvñs_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("fb_levels", "2"));

9 
fb_wösize_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("fb_winsize", "13"));

10 
fb_ôîs_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("fb_iters", "1"));

11 
fb_pﬁyn_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("fb_polyn", "5"));

12 
fb_pﬁysigma_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("fb_polysigma", "1.1"));

23 
d_gøy_¥ev_
 = 
cv
::
	`M©
(
video_height_
, 
video_width_
, 
CV_8UC1
);

24 
d_gøy_cuº_
 = 
d_gøy_¥ev_
.
	`˛⁄e
();

25 
d_fú°_
 = 
åue
;

27 
thªshﬁd_›tiˇl_Êow_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_threshold", "2.2"));

29 
kî_îode
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("ker_erode", "5"));

30 
kî_dû©e
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("ker_dilate", "15"));

32 
kî_îode_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(
kî_îode
, ker_erode));

33 
kî_dû©e_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(
kî_dû©e
, ker_dilate));

35 
up_™gÀ_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("up_angle", "110"));

37 
¨ó_max_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_area_max", "2800"));

38 
¨ó_mö_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_area_min", "400"));

39 
¨ó_bŸtom_max_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of_area_bottom_max", "4500"));

40 
¨ó_bŸtom_mö_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of_area_bottom_min", "2500"));

41 
¨ó_bŸtom_y_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of_area_bottom_y", "0.6667"));

43 
dñay_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_delay", "0.3"));

45 
debug_lmax_
 = 0, 
debug_lmö_
 = 10000;

46 
debug_max_dis_
 = .0;

48 
mîge_mode_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of3_merge_mode", "1"));

60 
	`log
("%s: sèπög...\n", 
__FUNCTION__
);

61 
	`log
("\tkî f‹Érodêi†%d, f‹ dû©êi†%d\n", 
kî_îode
, 
kî_dû©e
);

62 
	`log
("\tof3_thªadhﬁd: %f\n", 
thªshﬁd_›tiˇl_Êow_
);

63 
	`log
("\tup_™gÀ: %d\n", 
up_™gÀ_
);

64 
	`log
("\tof3_¨ó_max: %d\n", 
¨ó_max_
);

65 
	`log
("\tof3_¨ó_mö: %d\n", 
¨ó_mö_
);

66 
	`log
("\tof3_dñay: %f\n", 
dñay_
);

67 
	`log
("\tof3_mîge_mode: %d\n", 
mîge_mode_
);

68 
	`log
("\èªa_Á˘‹_ab: %.3f, %.3f\n", 
¨ó_Á˘‹_ab_
[0],área_factor_ab_[1]);

69 
	`log
("\èªa_mö,áªa_max: %.0f, %.0f\n", 
¨ó_mö_
, 
¨ó_max_
);

70 
	`log
("\èªa_bŸtom_mö,áªa_bŸtom_max,áªa_bŸtom_y: %.0f, %.0f, %.4f\n", 
¨ó_bŸtom_mö_
, 
¨ó_bŸtom_max_
, 
¨ó_bŸtom_y_
);

71 
	`log
("\n");

72 
	}
}

74 
	gDëe˘WôhOF3
::~
	$Dëe˘WôhOF3
()

76 
	}
}

78 
Dëe˘WôhOF3
::
	$ˇlc_›tiˇl_Êow
(c⁄° 
cv
::
M©
 &
p0
, c⁄° cv::M© &
p1
, cv::M© &
dis
, cv::M© &
™g
, cv::M© &
dx
, cv::M© &
dy
)

80 
cv
::
M©
 
Êow
;

81 i‡(
d_fú°_
) {

82 
d_fú°_
 = 
Ál£
;

84 
d_gøy_¥ev_
 = 
p0
;

85 
cv
::
M©
 
zîo
 = cv::M©::
	`zîos
(
p0
.
rows
,Ö0.
cﬁs
, 
CV_32F
);

90 
d_gøy_cuº_
 = 
p1
;

102 
	`ˇlcO±iˇlFlowF¨√back
(
d_gøy_¥ev_
, 
d_gøy_cuº_
, 
Êow
,

103 
fb_pyrsˇÀ_
, 
fb_Àvñs_
, 
fb_wösize_
, 
fb_ôîs_
,

104 
fb_pﬁyn_
, 
fb_pﬁysigma_
, 0);

106 
cv
::
	`sw≠
(
d_gøy_¥ev_
, 
d_gøy_cuº_
);

111 
°d
::
ve˘‹
<
cv
::
M©
> 
ch™√ls
;

112 
	`•lô
(
Êow
, 
ch™√ls
);

113 
d_dx_
 = 
ch™√ls
[0];

114 
d_dy_
 = 
ch™√ls
[1];

115 
dx
 = 
d_dx_
;

116 
dy
 = 
d_dy_
;

119 
cv
::
	`ˇπToPﬁ¨
(
d_dx_
, 
d_dy_
, 
d_di°™˚_
, 
d_™gÀ_
, 
åue
);

121 
dis
 = 
d_di°™˚_
;

122 
™g
 = 
d_™gÀ_
;

123 
	}
}

125 
	gDëe˘WôhOF3
::
	$mîge_èrgës
()

130 
	}
}

132 
cv
::
Re˘
 
_ouãr_of_rcs
(c⁄° 
°d
::
deque
<cv::Re˘> &
rcs
)

134 
as£π
(
rcs
.
size
() > 0);

136 
	gcv
::
Re˘
 
rc
 = 
rcs
.
‰⁄t
();

137 
size_t
 
	gi
 = 1; i < 
	grcs
.
size
(); i++) {

138 
	grc
 |
rcs
[
i
];

141  
	grc
;

144 
	gDëe˘WôhOF3
::
mîge_èrgës
(c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
mŸi⁄_rcs
, c⁄° std::ve˘‹<> &
dús
,

145 c⁄° 
°d
::
ve˘‹
<
Dëe˘WôhOF3
::
DúC¡
> &
dú˙ts
, c⁄° 
cv
::
M©
 &
dx
, c⁄° cv::M© &
dy
)

152 
mîge_mode
 = 
mîge_mode_
;

154 
as£π
(
mŸi⁄_rcs
.
size
(Ë=
dús
.size());

156 
size_t
 
	gi
 = 0; i < 
	gmŸi⁄_rcs
.
size
(); i++) {

157 
Dú
 
	gdú
 = (Dú)
dús
[
i
];

158 
	gcv
::
Re˘
 
mrc
 = 
mŸi⁄_rcs
[
i
];

160 
	gamö
, 
	gamax
;

161 
boﬁ
 
	gbŸtom
 = 
ˇlc_¨ó
(
mrc
.
y
+mrc.
height
, 
amö
, 
amax
);

163 i‡(
	gmrc
.
¨ó
(Ë> 
	gamax
) {

164 
log
("WARNING: %s:ÅooooooÿœrgêmŸi⁄Ñe˘: [%d,%d, %d-%d], bŸtom=%d,áªa=%d, max=%.0f\n", 
__FUNCTION__
,

165 
mrc
.
x
, mrc.
y
, mrc.
width
, mrc.
height
,

166 
bŸtom
, 
mrc
.
¨ó
(), 
amax
);

170 
boﬁ
 
	gmîged
 = 
Ál£
;

171 
	gTARGETS
::
ôî©‹
 
ô
 = 
èrgës_
.
begö
(); 
	gô
 !èrgës_.
íd
(); ++it) {

172 
	gcv
::
Re˘
 
to_mîge
 = 
mîge_mode
 =1 ? 
ô
->
hi°_rcs
.
back
(Ë: it->
rc
;

174 i‡(
is_¸oss
(
mrc
, 
to_mîge
)) {

176 
	gô
->
	ghi°_dús
.
size
() >= 10) {

177 
ô
->
hi°_dús
.
p›_‰⁄t
();

178 
	gô
->
	ghi°_dú_˙t
.
p›_‰⁄t
();

179 
	gô
->
	ghi°_of_dx
.
p›_‰⁄t
();

180 
	gô
->
	ghi°_of_dy
.
p›_‰⁄t
();

181 
	gô
->
	ghi°_rcs
.
p›_‰⁄t
();

182 
	gô
->
	grc
 = 
_ouãr_of_rcs
(
ô
->
hi°_rcs
);

186 
	gô
->
	ghi°_rcs
.
push_back
(
mŸi⁄_rcs
[
i
]);

187 
	gô
->
	ghi°_dús
.
push_back
(
dú
);

188 
	gô
->
	ghi°_dú_˙t
.
push_back
(
dú˙ts
[
i
]);

189 
	gô
->
	ghi°_of_dx
.
push_back
(
dx
(
mŸi⁄_rcs
[
i
]));

190 
	gô
->
	ghi°_of_dy
.
push_back
(
dy
(
mŸi⁄_rcs
[
i
]));

191 
	gô
->
	grc
 |
mŸi⁄_rcs
[
i
];

192 
	gô
->
	g°amp_œ°
 = 
cuº_°amp_
;

195 
	gô
->
	grc
.
¨ó
(Ë> 
	g¨ó_max_
 && it->
	ghi°_rcs
.
size
() > 1) {

196 
	gô
->
	ghi°_dús
.
p›_‰⁄t
();

197 
	gô
->
	ghi°_dú_˙t
.
p›_‰⁄t
();

198 
	gô
->
	ghi°_of_dx
.
p›_‰⁄t
();

199 
	gô
->
	ghi°_of_dy
.
p›_‰⁄t
();

200 
	gô
->
	ghi°_rcs
.
p›_‰⁄t
();

202 
	gô
->
	grc
 = 
_ouãr_of_rcs
(
ô
->
hi°_rcs
);

205 
	gmîged
 = 
åue
;

209 i‡(!
	gmîged
) {

211 
T¨gë
 
	gt
;

212 
	gt
.
	g°amp_œ°
 = 
t
.
°amp_fú°
 = 
cuº_°amp_
;

213 
	gt
.
	grc
 = 
mŸi⁄_rcs
[
i
];

214 
	gt
.
	ghi°_rcs
.
push_back
(
mŸi⁄_rcs
[
i
]);

215 
	gt
.
	ghi°_dús
.
push_back
(
dú
);

216 
	gt
.
	ghi°_dú_˙t
.
push_back
(
dú˙ts
[
i
]);

217 
	gt
.
	ghi°_of_dx
.
push_back
(
dx
(
mŸi⁄_rcs
[
i
]));

218 
	gt
.
	ghi°_of_dy
.
push_back
(
dy
(
mŸi⁄_rcs
[
i
]));

220 
	gèrgës_
.
push_back
(
t
);

225 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF3
::
dëe˘0
(
size_t
 
˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
)

227 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

228 
	gdús
.
˛ór
();

231 
	gcv
::
M©
 
di°™˚
, 
	g™gÀ
;

232 
	gcv
::
M©
 
dx
, 
	gdy
;

233 
ˇlc_›tiˇl_Êow
(
gøy_¥ev
, 
gøy_cuº
, 
di°™˚
, 
™gÀ
, 
dx
, 
dy
);

235 i‡(
	gdebug_
) {

236 
show_›tiˇl_Êow
(
‹igö
, 
di°™˚
, 
™gÀ
);

238 
	gyy
 = 
‹igö
.
rows
 * 
¨ó_bŸtom_y_
;

239 
	gcv
::
löe
(
‹igö
, 
cv
::
Poöt
(0, 
yy
), cv::Poöt(‹igö.
cﬁs
-1, yy), cv::
Sˇœr
(255, 0, 0));

243 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
mŸi⁄_ª˘s
;

244 
	g°d
::
ve˘‹
<> 
mŸi⁄_dús
;

245 
	g°d
::
ve˘‹
<
DúC¡
> 
mŸi⁄_dú˙ts
;

246 
gë_mŸi⁄_ª˘s
(
di°™˚
, 
™gÀ
, 
mŸi⁄_ª˘s
, 
mŸi⁄_dús
, 
mŸi⁄_dú˙ts
);

249 
mîge_èrgës
(
mŸi⁄_ª˘s
, 
mŸi⁄_dús
, 
mŸi⁄_dú˙ts
, 
dx
, 
dy
);

252 
mîge_èrgës
();

255 
	gTARGETS
::
ôî©‹
 
ô
 = 
èrgës_
.
begö
(); 
	gô
 !èrgës_.
íd
(); ) {

256 i‡(
	gdebug_
) {

257 
	gcv
::
ª˘™gÀ
(
‹igö
, 
ô
->
rc
, 
cv
::
Sˇœr
(0, 255, 255));

260 i‡(
	gcuº_°amp_
 - 
	gô
->
	g°amp_œ°
 >
dñay_
) {

264 
log
("TARGET: [%d,%d -- %d,%d]: %u mŸi⁄s\n", 
ô
->
rc
.
x
, it->rc.
y
, it->rc.
width
, it->rc.
height
, it->
hi°_rcs
.
size
());

265 
size_t
 
	gi
 = 0; i < 
	gô
->
	ghi°_rcs
.
size
(); i++) {

266 
log
("\t%s: %d,Ü=%d[%.0f],Ñ=%d[%.0f], u=%d[%.0f], d=%d[%.0f]\n",

267 
DúDesc
[
ô
->
hi°_dús
[
i
]], it->
hi°_rcs
[i].
¨ó
(),

268 
ô
->
hi°_dú_˙t
[
i
].
À·
, it->hi°_dú_˙t[i].
dis_À·
,

269 
ô
->
hi°_dú_˙t
[
i
].
right
, it->hi°_dú_˙t[i].
dis_right
,

270 
ô
->
hi°_dú_˙t
[
i
].
up
, it->hi°_dú_˙t[i].
dis_up
,

271 
ô
->
hi°_dú_˙t
[
i
].
down
, it->hi°_dú_˙t[i].
dis_down
);

274 
Dú
 
	gdú
;

275 
	gcv
::
Re˘
 
rc
;

276 i‡(
™Æyze_èrgë_hi°
(*
ô
, 
dú
, 
rc
)) {

278 
log
("Save Target: dir=%s,Ñc=[%d,%d, %d-%d]£¨area=%d, bottom=%d\n",

279 
DúDesc
[
dú
], 
rc
.
x
,Ñc.
y
,Ñc.
width
,Ñc.
height
,Ñc.
¨ó
(),Ñc.y+rc.height);

281 
	gdús
.
push_back
(
dú
);

282 
	grcs
.
push_back
(
rc
);

285 
	gô
 = 
èrgës_
.
îa£
(
ô
);

291 ++
	gô
;

295  
	grcs
;

298 
	$_døw_löe
(
cv
::
M©
 &
‹igö
, c⁄° cv::
Poöt
 &
‰om
, 
dis
, 
™g
)

300 
™g
 = (360 -ángË* 
M_PI
 / 180;

301 
cv
::
Poöt
 
	`to
(
‰om
.
x
 + 
dis
*
	`cos
(
™g
), from.
y
 - dis*
	`sö
(ang));

302 
cv
::
	`löe
(
‹igö
, 
‰om
, 
to
, cv::
	`Sˇœr
(0, 255, 0));

303 
cv
::
	`cú˛e
(
‹igö
, 
‰om
, 1, cv::
	`Sˇœr
(0, 0, 255), 1);

304 
	}
}

306 
	gDëe˘WôhOF3
::
	$show_›tiˇl_Êow
(
cv
::
M©
 &
‹igö
, c⁄° cv::M© &
dis
, c⁄° cv::M© &
™g
)

308 
x°ï
 = 4, 
y°ï
 = 4;

309 
y
 = 0; y < 
dis
.
rows
; y+=
y°ï
) {

310 c⁄° *
pd
 = 
dis
.
±r
<>(
y
), *
∑
 = 
™g
.ptr<>(y);

311 
x
 = 0; x < 
dis
.
cﬁs
; x+=
x°ï
) {

312 i‡(
pd
[
x
] >
thªshﬁd_›tiˇl_Êow_
) {

313 
	`_døw_löe
(
‹igö
, 
cv
::
	`Poöt
(
x
, 
y
), 
pd
[x], 
∑
[x]);

317 
	}
}

319 
	gDëe˘WôhOF3
::
gë_mŸi⁄_ª˘s
(c⁄° 
cv
::
M©
 &
dis
, c⁄° cv::M© &
™g
, 
°d
::
ve˘‹
<cv::
Re˘
> &
rcs
, std::ve˘‹<> &
dús
,

320 
°d
::
ve˘‹
<
Dëe˘WôhOF3
::
DúC¡
> &
dú˙ts
)

322 
rcs
.
˛ór
(), 
	gdús
.˛ór(), 
	gdú˙ts
.clear();

324 
	gcv
::
M©
 
di°™˚
;

325 
	gdis
.
c⁄vîtTo
(
di°™˚
, 
CV_8U
);

327 
	gcv
::
thªshﬁd
(
di°™˚
, di°™˚, 
thªshﬁd_›tiˇl_Êow_
, 255, 
cv
::
THRESH_BINARY
);

329 
	gcv
::
îode
(
di°™˚
, di°™˚, 
kî_îode_
);

330 
	gcv
::
dû©e
(
di°™˚
, di°™˚, 
kî_dû©e_
);

332 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
c⁄tours
;

333 
	gcv
::
födC⁄tours
(
di°™˚
, 
c⁄tours
, 
cv
::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

335 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> >::
c⁄°_ôî©‹
 
ô
 = 
c⁄tours
.
begö
(); 
	gô
 !c⁄tours.
íd
(); ++it) {

336 
	gcv
::
Re˘
 
brc
 = 
cv
::
boundögRe˘
(*
ô
);

337 
	grcs
.
push_back
(
brc
);

340 
	gcv
::
Re˘
 
roi
 = 
brc
;

341 
	groi
.
	gheight
 = 
roi
.
height
;

342 
DúC¡
 
	gdc
;

343 
Dú
 
	gdú
 = 
gë_roi_¥›îty
(
roi
, 
dis
, 
di°™˚
, 
™g
, 
dc
);

344 
	gdús
.
push_back
(
dú
);

345 
	gdú˙ts
.
push_back
(
dc
);

347 i‡(
	gdebug_
) {

348 
	gcv
::
putText
(
‹igö_
, 
DúDesc
[
dú
], 
brc
.
é
(), 
cv
::
FONT_HERSHEY_PLAIN
, 1.0, cv::
Sˇœr
(255, 255, 255), 2);

353 
Dú
 
	gDëe˘WôhOF3
::
	$gë_roi_¥›îty
(c⁄° 
cv
::
Re˘
 &
roi
, c⁄° cv::
M©
 &
dis
, c⁄° cv::M© &
dis_bö
, c⁄° cv::M© &
™g
, 
DúC¡
 &
dc
)

356 
dús
[4] = { 0, 0, 0, 0 };

357 
diss
[4] = { 0.0, 0.0, 0.0, 0.0 };

359 
cv
::
M©
 
rd
 = 
	`dis_bö
(
roi
), 
ø
 = 
	`™g
‘oi), 
rdis
 = 
	`dis
(roi);

360 
y
 = 0; y < 
rd
.
rows
; y++) {

361 *
¥d
 = 
rd
.
±r
<>(
y
);

362 *
¥a
 = 
ø
.
±r
<>(
y
);

363 *
pdis
 = 
rdis
.
±r
<>(
y
);

364 
x
 = 0; x < 
rd
.
cﬁs
; x++) {

365 i‡(
¥d
[
x
]) {

366 
Dú
 
d
 = 
	`™g2dú
(
¥a
[
x
]);

367 
dús
[
d
]++;

368 
diss
[
d
] +
pdis
[
x
];

373 
dc
.
À·
 = 
dús
[
LEFT
], dc.
dis_À·
 = 
diss
[LEFT];

374 
dc
.
right
 = 
dús
[
RIGHT
], dc.
dis_right
 = 
diss
[RIGHT];

375 
dc
.
up
 = 
dús
[
UP
], dc.
dis_up
 = 
diss
[UP];

376 
dc
.
down
 = 
dús
[
DOWN
], dc.
dis_down
 = 
diss
[DOWN];

378 
Dú
 
dú
 = 
LEFT
;

379 
d
 = 
dc
.
À·
;

380 i‡(
d
 < 
dc
.
right
) {

381 
d
 = 
dc
.
right
;

382 
dú
 = 
RIGHT
;

384 i‡(
d
 < 
dc
.
up
) {

385 
d
 = 
dc
.
up
;

386 
dú
 = 
UP
;

388 i‡(
d
 < 
dc
.
down
) {

389 
d
 = 
dc
.
down
;

390 
dú
 = 
DOWN
;

393  
dú
;

394 
	}
}

396 
Dú
 
	gDëe˘WôhOF3
::
	$™g2dú
(
™g
) const

399 
up_hÆf
 = 
up_™gÀ_
 / 2;

400 
up_mö
 = 270 - 
up_hÆf
, 
up_max
 = 270 + up_half;

401 i‡(
™g
 >
up_mö
 &&áng <
up_max
) {

402  
UP
;

404 i‡(
™g
 >= 45 &&áng <= 135) {

405  
DOWN
;

407 i‡(
™g
 > 135 &&áng < 
up_mö
) {

408  
LEFT
;

411  
RIGHT
;

413 
	}
}

415 
boﬁ
 
	gDëe˘WôhOF3
::
	$ˇlc_¨ó
(
y
, &
¨ó_mö
, &
¨ó_max
) const

427 i‡(
y
 < 
‹igö_
.
rows
 * 
¨ó_bŸtom_y_
) {

428 
¨ó_mö
 = 
¨ó_mö_
;

429 
¨ó_max
 = 
¨ó_max_
;

430  
Ál£
;

433 
¨ó_mö
 = 
¨ó_bŸtom_mö_
;

434 
¨ó_max
 = 
¨ó_bŸtom_max_
;

435  
åue
;

437 
	}
}

439 
boﬁ
 
	gDëe˘WôhOF3
::
	$™Æyze_èrgë_hi°
(c⁄° 
Dëe˘WôhOF3
::
T¨gë
 &
èrgë
, 
Dú
 &
dú
, 
cv
::
Re˘
 &
rc
) const

441 
boﬁ
 
c⁄fúmed
 = 
Ál£
;

452 
amö
, 
amax
;

453 
boﬁ
 
bŸtom
 = 
	`ˇlc_¨ó
(
èrgë
.
rc
.
y
+èrgë.rc.
height
, 
amö
, 
amax
);

455 i‡(
èrgë
.
rc
.
	`¨ó
(Ë> 
amax
) {

456 
	`log
("%s: TooooÿL¨gêmŸi⁄Ñ™ge:Ñc=[%d,%d, %d,%d],áªa=%d, maxáªa=%.0f, bŸtom=%d\n", 
__FUNCTION__
,

457 
èrgë
.
rc
.
x
,Å¨gë.rc.
y
,Å¨gë.rc.
width
,Å¨gë.rc.
height
,Å¨gë.rc.
	`¨ó
(), 
amax
, 
bŸtom
);

458 
size_t
 
i
 = 0; i < 
èrgë
.
hi°_dús
.
	`size
(); i++) {

459 
	`log
("\t#%d: %s, [%d,%d, %d,%d]\n", 
i
, 
DúDesc
[
èrgë
.
hi°_dús
[i]],

460 
èrgë
.
hi°_rcs
[
i
].
x
,Å¨gë.hi°_rcs[i].
y
,Å¨gë.hi°_rcs[i].
width
,Å¨gë.hi°_rcs[i].
height
);

462  
Ál£
;

464 i‡(
èrgë
.
rc
.
	`¨ó
(Ë< 
amö
) {

465 
	`log
("%s: TooooÿSmÆ»mŸi⁄Ñ™ge:Ñc=[%d,%d, %d,%d],áªa=%d, w™t_¨ó=%.0f, bŸtom=%d\n", 
__FUNCTION__
,

466 
èrgë
.
rc
.
x
,Å¨gë.rc.
y
,Å¨gë.rc.
width
,Å¨gë.rc.
height
,Å¨gë.rc.
	`¨ó
(), 
amö
, 
bŸtom
);

467 
size_t
 
i
 = 0; i < 
èrgë
.
hi°_dús
.
	`size
(); i++) {

468 
	`log
("\t#%d: %s, [%d,%d, %d,%d]\n", 
i
, 
DúDesc
[
èrgë
.
hi°_dús
[i]],

469 
èrgë
.
hi°_rcs
[
i
].
x
,Å¨gë.hi°_rcs[i].
y
,Å¨gë.hi°_rcs[i].
width
,Å¨gë.hi°_rcs[i].
height
);

471  
Ál£
;

475 
¶e·
 = 0.0, 
§ight
 = 0.0, 
sup
 = 0.0, 
sdown
 = 0.0;

476 
size_t
 
i
 = 0; i < 
èrgë
.
hi°_dú_˙t
.
	`size
(); i++) {

477 
¶e·
 +
èrgë
.
hi°_dú_˙t
[
i
].
dis_À·
;

478 
§ight
 +
èrgë
.
hi°_dú_˙t
[
i
].
dis_right
;

479 
sup
 +
èrgë
.
hi°_dú_˙t
[
i
].
dis_up
;

480 
sdown
 +
èrgë
.
hi°_dú_˙t
[
i
].
dis_down
;

486 
r
 = 0.0;

487 i‡(
r
 < 
¶e·
) {

488 
dú
 = 
LEFT
;

489 
r
 = 
¶e·
;

492 i‡(
r
 < 
§ight
) {

493 
dú
 = 
RIGHT
;

494 
r
 = 
§ight
;

497 i‡(
r
 < 
sup
) {

498 
dú
 = 
UP
;

499 
r
 = 
sup
;

502 i‡(
r
 < 
sdown
) {

503 
dú
 = 
DOWN
;

504 
r
 = 
sdown
;

507 
rc
 = 
èrgë
.rc;

509 
c⁄fúmed
 = 
åue
;

511  
c⁄fúmed
;

512 
	}
}

	@sample/libdetect2/det/DetectWithOF3.h

1 #¥agm®
⁄˚


2 
	~"dëe˘.h
"

6 ˛as†
	cDëe˘WôhOF3
 : 
public
 
Dëe˘


9 
fb_pyrsˇÀ_
, 
	mfb_pﬁysigma_
;

10 
	mfb_Àvñs_
, 
	mfb_wösize_
, 
	mfb_ôîs_
, 
	mfb_pﬁyn_
;

12 
	mcv
::
M©
 
d_gøy_¥ev_
, 
	md_gøy_cuº_
, 
	md_di°™˚_
, 
	md_™gÀ_
, 
	md_dx_
, 
	md_dy_
;

13 
boﬁ
 
	md_fú°_
;

15 
	mthªshﬁd_›tiˇl_Êow_
;

17 
	mcv
::
M©
 
kî_îode_
, 
	mkî_dû©e_
;

19 
	mup_™gÀ_
;

21 
	mmîge_mode_
;

23 
	mdñay_
;

25 
	mdebug_lmax_
, 
	mdebug_lmö_
;

26 
	mdebug_max_dis_
;

28 
	m¨ó_Á˘‹_ab_
[2];

29 
	m¨ó_bŸtom_y_
;

30 
	m¨ó_bŸtom_max_
, 
	m¨ó_max_
, 
	m¨ó_mö_
;

31 
	m¨ó_bŸtom_mö_
;

34 
	sDúC¡


36 
	mÀ·
, 
	mright
, 
	mup
, 
	mdown
;

37 
	mdis_À·
, 
	mdis_right
, 
	mdis_up
, 
	mdis_down
;

41 
	sT¨gë


43 
	g°amp_fú°
, 
	g°amp_œ°
;

45 
	gcv
::
Re˘
 
rc
;

47 
	g°d
::
deque
<
cv
::
Re˘
> 
hi°_rcs
;

48 
	g°d
::
deque
<> 
hi°_dús
;

49 
	g°d
::
deque
<
cv
::
M©
> 
hi°_of_dx
;

50 
	g°d
::
deque
<
cv
::
M©
> 
hi°_of_dy
;

51 
	g°d
::
deque
<
DúC¡
> 
hi°_dú_˙t
;

54 
	g°d
::
	tve˘‹
<
	tT¨gë
> 
	tTARGETS
;

55 
TARGETS
 
	gèrgës_
;

57 
	gpublic
:

58 
Dëe˘WôhOF3
(
KVC⁄fig
 *
cfg
);

59 ~
Dëe˘WôhOF3
();

61 
	g¥iv©e
:

62 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
);

64 
	g¥iv©e
:

65 
ˇlc_›tiˇl_Êow
(c⁄° 
cv
::
M©
 &
p0
, c⁄° cv::M© &
p1
, cv::M© &
dis
, cv::M© &
™g
, cv::M© &
dx
, cv::M© &
dy
);

66 
show_›tiˇl_Êow
(
cv
::
M©
 &
‹igö
, c⁄° cv::M© &
dis
, c⁄° cv::M© &
™g
);

67 
gë_mŸi⁄_ª˘s
(c⁄° 
cv
::
M©
 &
dis
, c⁄° cv::M© &
™g
, 
°d
::
ve˘‹
<cv::
Re˘
> &
rcs
, std::ve˘‹<> &
dús
,

68 
°d
::
ve˘‹
<
DúC¡
> &
dú˙ts
);

69 
Dú
 
gë_roi_¥›îty
(c⁄° 
cv
::
Re˘
 &
roi
, c⁄° cv::
M©
 &
dis
, c⁄° cv::M© &
dis_bö
, c⁄° cv::M© &
™g
, 
DúC¡
 &
dc
);

70 
ölöe
 
Dú
 
	$™g2dú
(
™g
) const;

71 
	`mîge_èrgës
(c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
mŸi⁄_rcs
, c⁄° std::ve˘‹<> &
dús
,

72 c⁄° 
°d
::
ve˘‹
<
DúC¡
> &
dú˙ts
, c⁄° 
cv
::
M©
 &
dx
, c⁄° cv::M© &
dy
);

73 
	`mîge_èrgës
();

74 
boﬁ
 
	$™Æyze_èrgë_hi°
(c⁄° 
T¨gë
 &
èrgë
, 
Dú
 &
dú
, 
cv
::
Re˘
 &
rc
) const;

75 
boﬁ
 
	$ˇlc_¨ó
(
y
, &
¨ó_mö
, &
¨ó_max
) const;

76 
	}
};

	@sample/libdetect2/det/DetectWithOF4.cpp

1 
	~"Dëe˘WôhOF4.h
"

3 
	gDëe˘WôhOF4
::
	$Dëe˘WôhOF4
(
KVC⁄fig
 *
cfg
)

4 : 
	$Dëe˘
(
cfg
)

6 
thªshﬁd_diff_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of4_threshold_diff", "25.0"));

8 
s
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of4_kernel_erode_size", "3"));

9 
kî_îode_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(
s
, s));

10 
s
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of4_kernel_dilate_size", "21"));

11 
kî_dû©e_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(
s
, s));

12 
	}
}

14 
	gDëe˘WôhOF4
::~
	$Dëe˘WôhOF4
()

16 
	}
}

18 
°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF4
::
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
)

21 
°d
::
ve˘‹
<
cv
::
Re˘
> 
diff_rcs
 = 
gë_diff_ª˘s
(
gøy_¥ev
, 
gøy_cuº
);

24 
size_t
 
	gi
 = 0; i < 
	gdiff_rcs
.
size
(); i++) {

25 
boﬁ
 
	g√w_mt
 = 
åue
;

26 
size_t
 
	gj
 = 0; j < 
	gmŸi⁄_obje˘s_
.
size
(); j++) {

27 i‡(
is_¸oss
(
mŸi⁄_obje˘s_
[
j
].
gë_cuº_brc
(), 
diff_rcs
[
i
])) {

28 
	g√w_mt
 = 
Ál£
;

33 i‡(
	g√w_mt
) {

34 
MŸi⁄Obje˘
 
mo
(
this
, 
diff_rcs
[
i
], 
gøy_¥ev
);

35 i‡(
	gmo
.
is_movög
()) {

36 
	gmŸi⁄_obje˘s_
.
push_back
(
mo
);

41 
	gi
 = 
mŸi⁄_obje˘s_
.
size
()-1; i >= 0; i--) {

42 
	gmŸi⁄_obje˘s_
[
i
].
døw_hi°
(
‹igö
);

43 
	gmŸi⁄_obje˘s_
[
i
].
åack
(
gøy_cuº
);

44 i‡(!
	gmŸi⁄_obje˘s_
[
i
].
is_movög
()) {

45 
	gmŸi⁄_obje˘s_
.
îa£
(
mŸi⁄_obje˘s_
.
begö
()+
i
);

49 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

50 
	gdús
.
˛ór
();

51  
	grcs
;

	@sample/libdetect2/det/DetectWithOF4.h

1 #¥agm®
⁄˚


2 
	~"dëe˘.h
"

7 ˛as†
	cDëe˘WôhOF4
 : 
public
 
Dëe˘


9 
°d
::
	tve˘‹
<
	tcv
::
	tPoöt
> 
	tCONTOUR
;

10 
	m°d
::
	tve˘‹
<
	tcv
::
	tPoöt2f
> 
	tFEATURES
;

23 ˛as†
	cMŸi⁄Obje˘


25 
Dëe˘WôhOF4
 *
	m∑ª¡_
;

26 
	m°d
::
ve˘‹
<
CONTOUR
> 
c⁄tours_hi°_
;

27 
	m°d
::
ve˘‹
<
cv
::
Poöt2f
> 
món_±_hi°_
;

28 
	mmax_„©uªs_
, 
	mmö_„©uªs_
;

29 
FEATURES
 
	mcuº_„©uªs_
;

30 
boﬁ
 
	mmovög_
;

31 
	mcv
::
M©
 
¥ev_
;

32 
	m°amp_upd©e_
;

34 
	mpublic
:

35 
MŸi⁄Obje˘
(
Dëe˘WôhOF4
 *
∑ª¡
, c⁄° 
cv
::
Re˘
 &
brc
, c⁄° cv::
M©
 &
cuº_gøy
Ë: 
∑ª¡_
(parent)

37 
max_„©uªs_
 = 300;

38 
	mmö_„©uªs_
 = 10;

40 
CONTOUR
 
	mªgi⁄
;

41 
	mªgi⁄
.
push_back
(
brc
.
é
());

42 
	mªgi⁄
.
push_back
(
cv
::
Poöt
(
brc
.
x
, brc.
y
+brc.
height
));

43 
	mªgi⁄
.
push_back
(
brc
.
br
());

44 
	mªgi⁄
.
push_back
(
cv
::
Poöt
(
brc
.
x
+brc.
width
, brc.
y
));

46 
	mcuº_„©uªs_
 = 
upd©e_„©uªs
(
max_„©uªs_
, 
cuº_„©uªs_
, 
ªgi⁄
, 
cuº_gøy
);

47 
	mmovög_
 = 
cuº_„©uªs_
.
size
(Ë> 
mö_„©uªs_
;

48 
	m¥ev_
 = 
cuº_gøy
;

50 i‡(
	mmovög_
) {

51 
	mc⁄tours_hi°_
.
push_back
(
ªgi⁄
);

52 
	mmón_±_hi°_
.
push_back
(
món_±
(
cuº_„©uªs_
));

56 
boﬁ
 
is_movög
(Ëc⁄° {  
	mmovög_
; }

58 
åack
(c⁄° 
cv
::
M©
 &
gøy
)

60 
FEATURES
 
√xt_±s
;

61 
	mcv
::
M©
 
°©us
, 
	mîr
;

62 
	mcv
::
ˇlcO±iˇlFlowPyrLK
(
¥ev_
, 
gøy
, 
cuº_„©uªs_
, 
√xt_±s
, 
°©us
, 
îr
);

63 
	mcv
::
M©
 
s
 = 
°©us
.
ªsh≠e
(1, 1), 
	me
 = status.reshape(1, 1);

64 *
	mps
 = 
s
.
±r
<>(0), *
	m≥
 = s.ptr<>(0);

66 
FEATURES
 
	m„©uªs
;

67 
size_t
 
	mi
 = 0; i < 
	m°©us
.
	mcﬁs
; i++) {

68 i‡(
	mps
[
i
] == 1) {

69 
„©uªs
.
push_back
(
√xt_±s
[
i
]);

73 i‡(
	m„©uªs
.
size
(Ë< 
	mmö_„©uªs_
) {

74 
	mmovög_
 = 
Ál£
;

78 
ªmove_°øy
(
„©uªs
);

79 i‡(
	m„©uªs
.
size
(Ë< 
	mmö_„©uªs_
) {

80 
	mcuº_„©uªs_
 = 
upd©e_„©uªs
(
max_„©uªs_
, 
„©uªs
, 
gë_c⁄tour
(„©uªs), 
gøy
);

83 
	mcuº_„©uªs_
 = 
„©uªs
;

86 
	m¥ev_
 = 
gøy
;

89 
	mcv
::
Re˘
 
gë_cuº_brc
() const

91  
cv
::
boundögRe˘
(
cuº_„©uªs_
);

94 
døw_hi°
(
cv
::
M©
 &
img
) const

96 i‡(
món_±_hi°_
.
size
() > 0) {

97 
cv
::
cú˛e
(
img
, 
món_±_hi°_
[0], 2, cv::
Sˇœr
(0, 0, 255));

100 
size_t
 
	mi
 = 1; i < 
	mmón_±_hi°_
.
size
(); i++) {

101 
	mcv
::
löe
(
img
, 
món_±_hi°_
[
i
-1], món_±_hi°_[i], 
cv
::
Sˇœr
(0, 0, 255));

104 
size_t
 
	mi
 = 0; i < 
	mcuº_„©uªs_
.
size
(); i++) {

109 
	m¥iv©e
:

111 
CONTOUR
 
gë_c⁄tour
(c⁄° 
FEATURES
 &
±s
)

113 
CONTOUR
 
tmp
, 
	mc
;

114 
size_t
 
	mi
 = 0; i < 
	m±s
.
size
(); i++) {

115 
	mtmp
.
push_back
(
±s
[
i
]);

118 
	mcv
::
c⁄vexHuŒ
(
tmp
, 
c
);

119  
	mc
;

123 
	mcv
::
Poöt2f
 
món_±
(c⁄° 
FEATURES
 &
±s
) const

125 
sx
 = 0.0, 
	msy
 = 0.0;

126 
size_t
 
	mi
 = 0; i < 
	m±s
.
size
(); i++) {

127 
	msx
 +
±s
[
i
].
x
, 
	msy
 +±s[i].
y
;

129 
	mcv
::
Re˘
 
Æl
(0, 0, 
∑ª¡_
->
video_width_
,Ö¨ít_->
video_height_
);

130 
	mcv
::
Poöt2f
 
m
 = 
cv
::Poöt2f(
sx
/
±s
.
size
(), 
sy
/pts.size());

131 i‡(
	mm
.
	mx
 < 0) m.x = 0.1;

132 i‡(
	mm
.
	my
 < 0) m.y = 0.1;

133 i‡(
	mm
.
	mx
 >
∑ª¡_
->
video_width_
-0.1Ë
m
.
x
 =Öarent_->video_width_-1;

134 i‡(
	mm
.
	my
 >
∑ª¡_
->
video_height_
-0.1Ë
m
.
y
 =Öarent_->video_height_-1;

135  
	mm
;

139 
món_dis
(c⁄° 
cv
::
Poöt2f
 &
món_±
, c⁄° 
FEATURES
 &
±s
) const

141 
	msd
 = 0.0;

142 
size_t
 
	mi
 = 0; i < 
	m±s
.
size
(); i++) {

143 
	msd
 +
_di°™˚
(
món_±
, 
±s
[
i
]);

145  
	msd
 / 
	m±s
.
size
();

149 
ªmove_°øy
(
FEATURES
 &
±s
)

151 i‡(
	m±s
.
size
() < 3) {

157 
	mcv
::
Poöt2f
 
món
 = 
món_±
(
±s
);

158 
	mmdis
 = 
món_dis
(
món
, 
±s
);

160 
	mi
 = 
±s
.
size
()-1; i >= 0; i--) {

161 i‡(
_di°™˚
(
±s
[
i
], 
món
Ë> 2 * 
	mmdis
) {

162 
	m±s
.
îa£
(
±s
.
begö
(Ë+ 
i
);

168 
FEATURES
 
upd©e_„©uªs
(
max
, c⁄° FEATURES &
ﬁd
, c⁄° 
CONTOUR
 &
ªgi⁄
, c⁄° 
cv
::
M©
 &
cuº_gøy
)

170 
FEATURES
 
„©uªs
;

171 
	mcv
::
Re˘
 
brc
 = 
cv
::
boundögRe˘
(
ªgi⁄
);

172 
	mcv
::
goodFótuªsToTøck
(
cuº_gøy
(
brc
), 
„©uªs
, 
max
 - 
ﬁd
.
size
(), 0.05, 1.0);

174 
size_t
 
	mi
 = 0; i < 
	m„©uªs
.
size
(); i++) {

175 
	m„©uªs
[
i
].
	mx
 +
brc
.
x
;

176 
	m„©uªs
[
i
].
	my
 +
brc
.
y
;

180 
size_t
 
	mi
 = 0; i < 
	mﬁd
.
size
(); i++) {

181 i‡(!
has_ßme_„©uª_±
(
„©uªs
, 
ﬁd
[
i
])) {

182 
	m„©uªs
.
push_back
(
ﬁd
[
i
]);

186  
	m„©uªs
;

189 
boﬁ
 
has_ßme_„©uª_±
(c⁄° 
FEATURES
 &
fs
, c⁄° 
cv
::
Poöt2f
 &
±
)

191 
size_t
 
i
 = 0; 
	mi
 < 
	mfs
.
size
(); i++) {

192 i‡(
di°™˚
(
±
, 
fs
[
i
]) < 1.0) {

193  
	måue
;

196  
	mÁl£
;

199 
ölöe
 
di°™˚
(c⁄° 
cv
::
Poöt2f
 &
p0
, c⁄° cv::Poöt2‡&
p1
) const

201  
sqπ
((
p0
.
x
-
p1
.x)*’0.x-p1.xË+ (p0.
y
-p1.y)*(p0.y-p1.y));

204 
‰õnd
 
˛ass
 
	gMŸi⁄Obje˘
;

205 
	g°d
::
ve˘‹
<
MŸi⁄Obje˘
> 
mŸi⁄_obje˘s_
;

212 ˛as†
	cT¨gë


214 
	gpublic
:

215 
T¨gë
()

220 
	gthªshﬁd_diff_
;

221 
	gcv
::
M©
 
kî_îode_
, 
	gkî_dû©e_
;

223 
	gpublic
:

224 
Dëe˘WôhOF4
(
KVC⁄fig
 *
cfg
);

225 ~
Dëe˘WôhOF4
();

227 
	g¥iv©e
:

228 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
);

229 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
	$gë_diff_ª˘s
(c⁄° 
cv
::
M©
 &
¥ev
, c⁄° cv::M© &
cuº
)

231 
cv
::
M©
 
diff
;

232 
cv
::
	`absdiff
(
¥ev
, 
cuº
, 
diff
);

233 
cv
::
	`thªshﬁd
(
diff
, diff, 
thªshﬁd_diff_
, 255.0, cv::
THRESH_BINARY
);

235 
cv
::
	`îode
(
diff
, diff, 
kî_îode_
);

236 
cv
::
	`dû©e
(
diff
, diff, 
kî_dû©e_
);

238 
cv
::
	`imshow
("ed", 
diff
);

240 
°d
::
ve˘‹
<
CONTOUR
> 
c⁄tours
;

241 
cv
::
	`födC⁄tours
(
diff
, 
c⁄tours
, cv::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

243 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

244 
size_t
 
i
 = 0; i < 
c⁄tours
.
	`size
(); i++) {

245 
rcs
.
	`push_back
(
cv
::
	`boundögRe˘
(
c⁄tours
[
i
]));

248  
rcs
;

249 
	}
}

	@sample/libdetect2/det/DetectWithOF5.cpp

1 
	~<as£π.h
>

2 
	~<£t
>

3 
	~<li°
>

4 
	~"Dëe˘WôhOF5.h
"

6 
	g°d
::
	tve˘‹
<
	tcv
::
	tPoöt
> 
	tCONTOUR
;

7 
	g°d
::
	tve˘‹
<
	tCONTOUR
> 
	tCONTOURS
;

9 
	gDëe˘WôhOF5
::
	$Dëe˘WôhOF5
(
KVC⁄fig
 *
kv
Ë: 
	$Dëe˘
(
kv
)

11 
hi°_
.
∑ª¡
 = 
this
;

12 
hi°_
.
N
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of5_history_size", "7"));

13 i‡(
hi°_
.
N
 < 2) {

14 
hi°_
.
N
 = 2;

17 
kî_îode_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(3, 3));

18 
kî_dû©e_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(11, 11));

19 
kî_›í_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_OPEN
, cv::
	`Size
(3, 3));

22 
height
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("video_height", "720"));

23 
Ár_øtio
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of5_far_ratio", "0.18"));

24 
¶›e
 = (1.0 - 
Ár_øtio
Ë/ 
height
;

25 
öãr˚±
 = 
Ár_øtio
;

26 
Á˘‹s_y_
 = 
√w
 [
height
];

27 
i
 = 0; i < 
height
; i++) {

28 
Á˘‹s_y_
[
i
] = 
¶›e
 * i + 
öãr˚±
;

31 
èrgë_x_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of5_target_width", "130"));

32 
èrgë_y_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of5_target_height", "170"));

34 
mŸi⁄_M_
 = 
hi°_
.
N
;

35 
mŸi⁄_timeout_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of5_motion_timeout", "0.3"));

36 
‰ame_idx_
 = 0;

37 
thªshﬁd_diff_
 = ()
	`©of
(
cfg_
->
	`gë_vÆue
("of5_diff_threshold", "20"));

39 
cc_
 = 
√w
 
cv
::
CasˇdeCœssifõr
;

40 i‡(!
cc_
->
	`lﬂd
("data/heads-22-22-haar.xml")) {

42 
dñëe
 
cc_
;

43 
cc_
 = 0;

47 
	}
}

49 
	gDëe˘WôhOF5
::~
	$Dëe˘WôhOF5
()

51 
dñëe
 
cc_
;

52 
	}
}

54 
	gDëe˘WôhOF5
::
	$Á˘‹_y
(
y
) const

56  
Á˘‹s_y_
[
y
];

57 
	}
}

60 
	gãm∂©e
<
˛ass
 
	gT
>

61 
f2r
(
°d
::
ve˘‹
<
T
> &
±s
, c⁄° 
cv
::
Poöt
 &
off£t
)

63 
ty≥«me
 
°d
::
ve˘‹
<
T
>::
ôî©‹
 
ô
 = 
±s
.
begö
(); 
	gô
 !±s.
íd
(); ++it) {

64 
	gô
->
	gx
 +
off£t
.
x
, it->
	gy
 +off£t.
y
;

68 
	gDëe˘WôhOF5
::
dëe˘
(
cv
::
M©
 &
‹igö
, 
°d
::
ve˘‹
<cv::
Re˘
> &
èrgës
, &
Êù≥d_ödex
)

70 
	g‹igö_
 = 
‹igö
;

71 
	gcuº_
 = 
now
();

72 ++
	g‰ame_idx_
;

75 
ßve_hi°
(
‹igö
);

80 
	gcv
::
M©
 
bö_diff
 = 
hi°_
.
rgë_diff
(0);

81 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
ts
 = 
föd_diff_˛u°îs
(
bö_diff
);

82 
	gi
 = 0; i < 
	gts
.
size
(); i++) {

83 
	gcv
::
ª˘™gÀ
(
‹igö_
, 
ts
[
i
], 
cv
::
Sˇœr
(255, 255, 255), 2);

88 
CONTOURS
 
	gªgi⁄s
;

89 
föd_c⁄tours
(
ªgi⁄s
);

90 
	gcv
::
døwC⁄tours
(
‹igö
, 
ªgi⁄s
, -1, 
cv
::
Sˇœr
(0, 255, 255), 1);

93 
mîge_mŸi⁄s
(
ªgi⁄s
);

94 
døw_mŸi⁄s
();

97 
åackög_mŸi⁄s
();

98 
døw_åackög
();

101 
sum_mŸi⁄s_dí£_of
();

102 
døw_mŸi⁄s_dí£_of
();

108 
	gcv
::
Poöt
 
˚¡î
(c⁄° 
°d
::
ve˘‹
<
cv
::Poöt> &
±s
)

110 
as£π
(!
±s
.
em±y
());

112 
	gcv
::
Poöt
 
±
 = 
±s
[0];

113 
size_t
 
	gi
 = 1; i < 
	g±s
.
size
(); i++) {

114 
	g±
.
	gx
 +
±s
[
i
].
x
;

115 
	g±
.
	gy
 +
±s
[
i
].
y
;

118 
	g±
.
	gx
 /
±s
.
size
();

119 
	g±
.
	gy
 /
±s
.
size
();

121  
	g±
;

124 
ölöe
 
	gcv
::
Poöt
 
	$˚¡î
(c⁄° 
cv
::
Re˘
 &
rc
)

126 
°d
::
ve˘‹
<
cv
::
Poöt
> 
±s
;

127 
±s
.
	`push_back
(
rc
.
	`é
());

128 
±s
.
	`push_back
(
rc
.
	`br
());

130  
	`˚¡î
(
±s
);

131 
	}
}

133 
	g°d
::
ve˘‹
<
cv
::
Poöt
> 
Dëe˘WôhOF5
::
MŸi⁄
::
	$gë_c⁄tours_˚¡î
()

136 
°d
::
ve˘‹
<
cv
::
Poöt
> 
˚¡îs
;

137 
size_t
 
i
 = 0; i < 
hi°‹y
.
	`size
(); i++) {

138 
˚¡îs
.
	`push_back
(
	`˚¡î
(
hi°‹y
[
i
]));

141  
˚¡îs
;

142 
	}
}

144 
	g°d
::
ve˘‹
<
cv
::
Poöt
> 
Dëe˘WôhOF5
::
MŸi⁄
::
	$gë_brcs_˚¡î
()

147 
°d
::
ve˘‹
<
cv
::
Poöt
> 
˚¡îs
;

148 
cv
::
Poöt
 
œ°
 = 
	`˚¡î
(cv::
	`boundögRe˘
(
œ°_c⁄tour
));

149 
size_t
 
i
 = 0; i < 
hi°‹y
.
	`size
(); i++) {

150 i‡(
hi°‹y
[
i
].
	`em±y
()) {

151 
˚¡îs
.
	`push_back
(
œ°
);

154 
cv
::
Re˘
 
brc
 = cv::
	`boundögRe˘
(
hi°‹y
[
i
]);

155 
œ°
 = 
	`˚¡î
(
brc
);

156 
˚¡îs
.
	`push_back
(
œ°
);

160  
˚¡îs
;

161 
	}
}

163 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$öô_åackög
(
cv
::
CasˇdeCœssifõr
 *
cc
)

165 i‡(
åackög_öôed_
)

168 i‡(
cc
) {

171 
cv
::
M©
 
f
 = 
∑ª¡
->
hi°_
.
	`rgë
(0);

172 
cv
::
M©
 
roi
 = 
	`f
(
brc
);

173 
cc
->
	`dëe˘Mu…iSˇÀ
(
roi
, 
Á˚s
);

174 
f2r
<
cv
::
Re˘
>(
Á˚s
, 
brc
.
	`é
());

177 i‡(!
Á˚s
.
	`em±y
()) {

179 
cv
::
Re˘
 
Á˚
 = 
Á˚s
[0];

180 
roi
 = 
	`f
(
Á˚
);

181 
°d
::
ve˘‹
<
cv
::
Poöt2f
> 
c‹√rs
;

182 
cv
::
	`goodFótuªsToTøck
(
roi
, 
c‹√rs
, 10, 0.15, 3);

183 
f2r
<
cv
::
Poöt2f
>(
c‹√rs
, 
Á˚
.
	`é
());

186 
size_t
 
i
 = 0; i < 
hi°‹y
.
	`size
(); i++) {

187 
åackög_±s
.
	`push_back
(
c‹√rs
);

190 
åackög_öôed_
 = 
åue
;

198 
	}
}

200 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$upd©e_boundög_rc
()

202 
cv
::
Re˘
 
rc
 = cv::
	`boundögRe˘
(
œ°_c⁄tour
);

203 
size_t
 
k
 = 0;

204 
k
 = 0; k < 
hi°‹y
.
	`size
(); k++) {

205 i‡(!
hi°‹y
[
k
].
	`em±y
()) {

206 
rc
 = 
cv
::
	`boundögRe˘
(
hi°‹y
[
k
]);

210 ; 
k
 < 
hi°‹y
.
	`size
(); k++) {

211 i‡(!
hi°‹y
[
k
].
	`em±y
()) {

212 
rc
 |
cv
::
	`boundögRe˘
(
hi°‹y
[
k
]);

215 
brc
 = 
rc
;

216 
	}
}

218 
døw_löes
(
cv
::
M©
 &
img
, c⁄° 
°d
::
ve˘‹
<cv::
Poöt
> &
±s
, c⁄° cv::
Sˇœr
 &
cﬁ‹
)

220 
as£π
(!
±s
.
em±y
());

221 
	gcv
::
Poöt
 
p
 = 
±s
[0];

222 
size_t
 
	gi
 = 1; i < 
	g±s
.
size
(); i++) {

223 
	gcv
::
löe
(
img
, 
p
, 
±s
[
i
], 
cﬁ‹
);

224 
	gp
 = 
±s
[
i
];

228 
	gãm∂©e
 <
˛ass
 
	gT
>

229 
	$døw_löes
(
cv
::
M©
 &
img
, c⁄° 
T
 &
ps
, c⁄° T &
±
, c⁄° cv::
Sˇœr
 &
cﬁ‹
)

231 
	`as£π
(
ps
.
	`size
(Ë=
±
.size());

232 
size_t
 
i
 = 0; i < 
ps
.
	`size
(); i++) {

233 i‡(
ps
[
i
].
x
 > 0 && 
±
[i].x > 0) {

234 
cv
::
	`löe
(
img
, 
ps
[
i
], 
±
[i], 
cﬁ‹
);

237 
	}
}

239 
boﬁ
 
	gDëe˘WôhOF5
::
Hi°‹y
::
	$exi°
(
size_t
 
idx
)

242  
idx
 >
‰ame_idx_
 && idx < føme_idx_ + 
‰ames
.
	`size
();

243 
	}
}

245 
	gcv
::
M©
 
Dëe˘WôhOF5
::
Hi°‹y
::
	$gë
(
size_t
 
idx
)

247 
	`as£π
(
	`exi°
(
idx
));

248  
‰ames
[
idx
 - 
‰ame_idx_
];

249 
	}
}

251 
	gcv
::
M©
 
Dëe˘WôhOF5
::
Hi°‹y
::
	$gë_diff
(
size_t
 
idx
)

253 
	`as£π
(
	`exi°
(
idx
));

254  
diff
[
idx
 - 
‰ame_idx_
];

255 
	}
}

257 
	gcv
::
M©
 
Dëe˘WôhOF5
::
Hi°‹y
::
	$rgë
(
size_t
 
id
)

259 
	`as£π
(
id
 >0 && id < 
‰ames
.
	`size
());

260 
°d
::
deque
<
cv
::
M©
>::
c⁄°_ªvî£_ôî©‹
 
rô
 = 
‰ames
.
	`rbegö
();

261  *(
rô
+
id
);

262 
	}
}

264 
	gcv
::
M©
 
Dëe˘WôhOF5
::
Hi°‹y
::
	$rgë_diff
(
size_t
 
id
)

266 
	`as£π
(
id
 >0 && id < 
diff
.
	`size
());

267 
°d
::
deque
<
cv
::
M©
>::
c⁄°_ªvî£_ôî©‹
 
rô
 = 
diff
.
	`rbegö
();

268  *(
rô
+
id
);

269 
	}
}

271 
	gDëe˘WôhOF5
::
Hi°‹y
::
	$push
(c⁄° 
cv
::
M©
 &
img
)

274 i‡(
‰ames
.
	`size
(Ë> 
N
) {

275 
‰ames
.
	`p›_‰⁄t
();

276 
diff
.
	`p›_‰⁄t
();

277 
‰ame_idx_
++;

281 
cv
::
M©
 
gøy
;

282 
cv
::
	`cvtCﬁ‹
(
img
, 
gøy
, 
CV_RGB2GRAY
);

283 
‰ames
.
	`push_back
(
gøy
);

285 i‡(
‰ames
.
	`size
() == 1) {

287 
diff
.
	`push_back
(
cv
::
M©
::
	`zîos
(
img
.
rows
, img.
cﬁs
, 
CV_8UC1
));

288 
‰ame_idx_
 = 
∑ª¡
->frame_idx_;

291 
cv
::
M©
 
d
;

294 
cv
::
M©
 
m
 = 
	`rgë
(1);

295 
cv
::
	`absdiff
(
m
, 
gøy
, 
d
);

297 
cv
::
	`thªshﬁd
(
d
, d, 
∑ª¡
->
thªshﬁd_diff_
, 255, cv::
THRESH_BINARY
);

300 
cv
::
	`m‹phﬁogyEx
(
d
, d, cv::
MORPH_OPEN
, 
∑ª¡
->
kî_›í_
);

301 
diff
.
	`push_back
(
d
);

304 
	`as£π
(
diff
.
	`size
(Ë=
‰ames
.size());

305 
	}
}

307 
	gDëe˘WôhOF5
::
	$ßve_hi°
(c⁄° 
cv
::
M©
 &
img
)

309 
hi°_
.
	`push
(
img
);

310 
	}
}

313 
	sMîgeC⁄tour


315 
CONTOUR
 
	mc⁄tour
;

316 
	mcv
::
Poöt2f
 
˚¡î
;

317 
	mødius
;

318 
	m¨ó
;

319 
boﬁ
 
	mmîged
;

321 
boﬁ
 
›_s‹t_mc
(c⁄° 
MîgeC⁄tour
 &
p1
, c⁄° MîgeC⁄tou∏&
p2
)

323  
	mp1
.
	mødius
 > 
	mp2
.radius;

328 
ölöe
 
	$di°™˚
(c⁄° 
cv
::
Poöt2f
 &
c1
, c⁄° cv::Poöt2‡&
c2
)

330  
	`sqπ
(
	`pow
(
c1
.
x
-
c2
.x, 2Ë+Öow(c1.
y
-c2.y, 2));

331 
	}
}

334 
ölöe
 
boﬁ
 
	$is_¸oss
(c⁄° 
cv
::
Poöt2f
 &
c1
, c⁄° 
r1
,

335 c⁄° 
cv
::
Poöt2f
 &
c2
, c⁄° 
r2
)

337  
	`di°™˚
(
c1
, 
c2
Ë< 
r1
 + 
r2
;

338 
	}
}

340 
ölöe
 
boﬁ
 
	$is_¸oss
(c⁄° 
MîgeC⁄tour
 &
mc1
, c⁄° MîgeC⁄tou∏&
mc2
)

342  
	`is_¸oss
(
mc1
.
˚¡î
, mc1.
ødius
, 
mc2
.center, mc2.radius);

343 
	}
}

345 
CONTOURS
 
	$mîge_c⁄tours
(
CONTOURS
 &
cs
)

355 
CONTOURS
 
mîged
;

356 
°d
::
ve˘‹
<
MîgeC⁄tour
> 
mcs
;

357 
CONTOURS
::
c⁄°_ôî©‹
 
ô
 = 
cs
.
	`begö
(); ià!cs.
	`íd
(); ++it) {

358 
MîgeC⁄tour
 
mc
;

359 
mc
.
mîged
 = 
Ál£
;

360 
mc
.
c⁄tour
 = *
ô
;

361 
cv
::
	`möEn˛osögCú˛e
(
mc
.
c⁄tour
, mc.
˚¡î
, mc.
ødius
);

362 
mc
.
¨ó
 = 
cv
::
	`c⁄tourAªa
(mc.
c⁄tour
);

363 
mcs
.
	`push_back
(
mc
);

366 
°d
::
	`s‹t
(
mcs
.
	`begö
(), mcs.
	`íd
(), 
MîgeC⁄tour
::
›_s‹t_mc
);

368 
°d
::
ve˘‹
<
MîgeC⁄tour
>::
ôî©‹
 
ô
 = 
mcs
.
	`begö
(); ià!mcs.
	`íd
(); ++it) {

369 i‡(!
ô
->
mîged
) {

370 
°d
::
ve˘‹
<
MîgeC⁄tour
>::
ôî©‹
 
ô2
 = 
ô
+1; it2 !
mcs
.
	`íd
(); ++it2) {

371 i‡(::
	`is_¸oss
(*
ô
, *
ô2
)) {

373 
ô2
->
mîged
 = 
åue
;

374 
ô
->
c⁄tour
.
	`ö£π
(ô->c⁄tour.
	`íd
(), 
ô2
->c⁄tour.
	`begö
(), it2->contour.end());

377 i‡(
ô
->
ødius
 > 3.0 * 
ô2
->radius) {

378 i‡(
	`di°™˚
(
ô
->
˚¡î
, 
ô2
->˚¡îË< it->
ødius
 * 1.5) {

379 
ô2
->
mîged
 = 
åue
;

380 
ô
->
c⁄tour
.
	`ö£π
(ô->c⁄tour.
	`íd
(), 
ô2
->c⁄tour.
	`begö
(), it2->contour.end());

387 
°d
::
ve˘‹
<
MîgeC⁄tour
>::
c⁄°_ôî©‹
 
ô
 = 
mcs
.
	`begö
(); ià!mcs.
	`íd
(); ++it) {

388 i‡(!
ô
->
mîged
) {

389 
CONTOUR
 
huŒ
;

390 
cv
::
	`c⁄vexHuŒ
(
ô
->
c⁄tour
, 
huŒ
);

391 
mîged
.
	`push_back
(
huŒ
);

395  
mîged
;

396 
	}
}

399 ˛as†
	c›_c⁄tour_is_toooo_smÆl


401 
	m¨ó_thªshﬁd_
, *
	mÁ˘‹_y_
;

403 
	mpublic
:

404 
	$›_c⁄tour_is_toooo_smÆl
(
¨ó_thªshﬁd
, 
Á˘‹_y
[])

405 : 
	`¨ó_thªshﬁd_
(
¨ó_thªshﬁd
)

406 , 
	$Á˘‹_y_
(
Á˘‹_y
)

410 
boﬁ
 
	$›î©‹
()(c⁄° 
CONTOUR
 &
c⁄tour
) const

412 
cv
::
Re˘
 
brc
 = cv::
	`boundögRe˘
(
c⁄tour
);

413 
fy
 = 
Á˘‹_y_
[
	`CENTER_Y
(
brc
)];

414  
cv
::
	`c⁄tourAªa
(
c⁄tour
Ë< 
fy
*fy*
¨ó_thªshﬁd_
*0.1;

415 
	}
}

418 
	gDëe˘WôhOF5
::
	$mîge_c⁄tours
(
CONTOURS
 &
c⁄tours
)

420 
c⁄tours
 = ::
	`mîge_c⁄tours
(contours);

433 
›_c⁄tour_is_toooo_smÆl
 
	`ts
(
èrgë_x_
 * 
èrgë_y_
, 
Á˘‹s_y_
);

435 
c⁄tours
.
	`îa£
(
°d
::
	`ªmove_if
(c⁄tours.
	`begö
(), c⁄tours.
	`íd
(), 
ts
), contours.end());

436 
	}
}

439 
	gDëe˘WôhOF5
::
	$föd_c⁄tours
(
CONTOURS
 &
ªgi⁄s
)

441 
cv
::
M©
 
diff_sum
 = 
hi°_
.
	`rgë_diff
(0);

443 
CONTOURS
 
c⁄tours
;

444 
cv
::
	`födC⁄tours
(
diff_sum
, 
c⁄tours
, cv::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

446 
	`mîge_c⁄tours
(
c⁄tours
);

447 
ªgi⁄s
 = 
c⁄tours
;

448 
	}
}

450 
	gDëe˘WôhOF5
::
	$ªmove_timeout_mŸi⁄s
()

454 
MOTIONS
::
ôî©‹
 
ô
 = 
mŸi⁄s_
.
	`begö
(); ià!mŸi⁄s_.
	`íd
(); ) {

455 i‡(
cuº_
 - 
ô
->
°amp
 > 
mŸi⁄_timeout_
) {

456 
ô
 = 
mŸi⁄s_
.
	`îa£
(it);

459 ++
ô
;

462 
	}
}

466 
	gDëe˘WôhOF5
::
	$mîge_mŸi⁄s
(c⁄° 
CONTOURS
 &
ªgi⁄s
)

468 
	`ªmove_timeout_mŸi⁄s
();

472 
°d
::
£t
<
size_t
> 
mîged_idxs
;

473 
°d
::
ve˘‹
<
size_t
> 
exp_idxs
;

474 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

476 
MŸi⁄
 &
m
 = 
mŸi⁄s_
[
i
];

477 
exp_idxs
.
	`˛ór
();

480 i‡(
m
.
hi°‹y
.
	`size
(Ë> m.
M
) {

481 
m
.
hi°‹y
.
	`p›_‰⁄t
();

482 i‡(
m
.
åackög_öôed_
) {

483 
m
.
åackög_±s
.
	`p›_‰⁄t
();

486 
m
.
dí£_of_poss
.
	`p›_‰⁄t
();

487 
m
.
dí£_of_xs
.
	`p›_‰⁄t
();

488 
m
.
dí£_of_ys
.
	`p›_‰⁄t
();

490 
m
.
‰ame_idx_
 ++;

493 
	`as£π
(!
m
.
åackög_öôed_
 || m.
hi°‹y
.
	`size
(Ë=m.
åackög_±s
.size());

496 
cv
::
Poöt2f
 
c0
;

497 
r0
;

498 
cv
::
	`möEn˛osögCú˛e
(
m
.
œ°_c⁄tour
, 
c0
, 
r0
);

500 
size_t
 
j
 = 0; j < 
ªgi⁄s
.
	`size
(); j++) {

501 
cv
::
Poöt2f
 
c
;

502 
r
;

503 
cv
::
	`möEn˛osögCú˛e
(
ªgi⁄s
[
j
], 
c
, 
r
);

504 i‡(::
	`is_¸oss
(
c0
, 
r0
, 
c
, 
r
)) {

505 
exp_idxs
.
	`push_back
(
j
);

506 
mîged_idxs
.
	`ö£π
(
j
);

514 
boﬁ
 
upd©e
 = 
Ál£
;

515 i‡(
exp_idxs
.
	`size
() == 1) {

517 
m
.
œ°_c⁄tour
 = 
ªgi⁄s
[
exp_idxs
[0]];

518 
mŸi⁄s_
[
i
].
hi°‹y
.
	`push_back
(
m
.
œ°_c⁄tour
);

519 
mŸi⁄s_
[
i
].
°amp
 = 
cuº_
;

520 
upd©e
 = 
åue
;

522 i‡(
exp_idxs
.
	`size
() == 0) {

524 
mŸi⁄s_
[
i
].
hi°‹y
.
	`push_back
(
	`CONTOUR
());

528 
m
.
œ°_c⁄tour
 = 
ªgi⁄s
[
exp_idxs
[0]];

529 
mŸi⁄s_
[
i
].
hi°‹y
.
	`push_back
(
m
.
œ°_c⁄tour
);

530 
mŸi⁄s_
[
i
].
°amp
 = 
cuº_
;

531 
upd©e
 = 
åue
;

534 i‡(
upd©e
) {

536 
m
.
	`upd©e_boundög_rc
();

539 i‡(
m
.
dí£_of_poss
.
	`size
() > 0) {

541 
cv
::
M©
 
x
, 
y
;

542 i‡(
	`ˇlc_dí£_of
(
m
.
brc
, 
x
, 
y
)) {

543 
m
.
dí£_of_poss
.
	`push_back
(m.
brc
);

544 
m
.
dí£_of_xs
.
	`push_back
(
x
);

545 
m
.
dí£_of_ys
.
	`push_back
(
y
);

549 i‡(!
m
.
åackög_öôed_
) {

550 
m
.
	`öô_åackög
(
cc_
);

555 
	`mîge_ovîœµed_mŸi⁄s
();

558 
size_t
 
i
 = 0; i < 
ªgi⁄s
.
	`size
(); i++) {

559 i‡(
mîged_idxs
.
	`föd
(
i
Ë=mîged_idxs.
	`íd
()) {

560 c⁄° 
CONTOUR
 &
c
 = 
ªgi⁄s
[
i
];

564 c⁄° 
cv
::
Sˇœr
 
_cﬁ‹s
[] = { cv::
	`Sˇœr
(0, 128, 0), cv::Scalar(0, 0, 128), cv::Scalar(0, 128, 128), cv::Scalar(0, 255, 128), cv::Scalar(0, 255, 0),

565 
cv
::
	`Sˇœr
(128, 255, 0), cv::Scalar(128, 128, 0), cv::Scalar(255, 0, 0) };

566 c⁄° 
size_t
 
_cﬁ‹s_˙t
 = (
_cﬁ‹s
Ë/ (
cv
::
Sˇœr
);

567 
_mid
 = 0;

569 
MŸi⁄
 
m
;

570 
m
.
∑ª¡
 = 
this
;

571 
m
.
disˇrd_
 = 
Ál£
;

572 
m
.
id
 = 
_mid
++;

573 
m
.
M
 = 
mŸi⁄_M_
;

574 
m
.
hi°‹y
.
	`push_back
(
c
);

575 
m
.
œ°_c⁄tour
 = 
c
;

576 
m
.
brc
 = 
cv
::
	`boundögRe˘
(
c
);

577 
m
.
°amp
 = 
cuº_
;

578 
m
.
‰ame_idx_
 = 
hi°_
.‰ame_idx_ + hi°_.
‰ames
.
	`size
() - 1;

579 
m
.
cﬁ‹
 = 
_cﬁ‹s
[m.
id
 % 
_cﬁ‹s_˙t
];

580 
m
.
åackög_öôed_
 = 
Ál£
;

581 
m
.
	`öô_åackög
(
cc_
);

584 
cv
::
M©
 
x
, 
y
;

585 i‡(
	`ˇlc_dí£_of
(
m
.
brc
, 
x
, 
y
)) {

586 
m
.
dí£_of_poss
.
	`push_back
(m.
brc
);

587 
m
.
dí£_of_xs
.
	`push_back
(
x
);

588 
m
.
dí£_of_ys
.
	`push_back
(
y
);

591 
mŸi⁄s_
.
	`push_back
(
m
);

594 
	}
}

596 
	gDëe˘WôhOF5
::
	$døw_mŸi⁄s
()

600 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

601 
cv
::
	`ª˘™gÀ
(
‹igö_
, 
mŸi⁄s_
[
i
].
brc
, mŸi⁄s_[i].
cﬁ‹
, 2);

602 
buf
[16];

603 
	`¢¥ötf
(
buf
, (buf), "#%d", 
mŸi⁄s_
[
i
].
id
);

604 
cv
::
	`putText
(
‹igö_
, 
buf
, 
mŸi⁄s_
[
i
].
brc
.
	`é
(), cv::
FONT_HERSHEY_PLAIN
, 1.5, mŸi⁄s_[i].
cﬁ‹
, 2);

612 
cv
::
Size
 
ts
 = 
	`e°_èrgë_size
(
	`CENTER_Y
(
mŸi⁄s_
[
i
].
brc
));

613 
cv
::
Re˘
 
e°rc
, 
brc
 = cv::
	`boundögRe˘
(
mŸi⁄s_
[
i
].
œ°_c⁄tour
);

615 
e°rc
.
x
 = 
	`CENTER_X
(
mŸi⁄s_
[
i
].
brc
Ë- 
ts
.
width
 / 2;

616 
e°rc
.
y
 = 
	`CENTER_Y
(
mŸi⁄s_
[
i
].
brc
Ë- 
ts
.
height
 / 2;

617 
e°rc
.
width
 = 
ts
.width;

618 
e°rc
.
height
 = 
ts
.height;

619 
cv
::
	`ª˘™gÀ
(
‹igö_
, 
e°rc
, cv::
	`Sˇœr
(255, 255, 255));

621 
	}
}

625 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$åack
()

627 i‡(!
åackög_öôed_
)

631 i‡(
∑ª¡
->
hi°_
.
‰ames
.
	`size
() < 2) {

637 
cv
::
M©
 
îr‹
;

638 
°d
::
ve˘‹
<> 
°©us
;

639 
°d
::
ve˘‹
<
cv
::
Poöt2f
> &
¥ev_±s
 = 
åackög_±s
.
	`back
(), 
√xt_±s
;

640 
cv
::
M©
 
¥ev_img
 = 
∑ª¡
->
hi°_
.
	`rgë
(1), 
√xt_img
 =Öarent->hist_.rget(0);

641 
cv
::
	`ˇlcO±iˇlFlowPyrLK
(
¥ev_img
, 
√xt_img
, 
¥ev_±s
, 
√xt_±s
, 
°©us
, 
îr‹
);

643 
size_t
 
i
 = 0; i < 
°©us
.
	`size
(); i++) {

644 i‡(
°©us
[
i
] != 1) {

645 
√xt_±s
[
i
].
x
 = -1,Çext_±s[i].
y
 = -1;

649 
åackög_±s
.
	`push_back
(
√xt_±s
);

650 
	}
}

652 
	gDëe˘WôhOF5
::
	$åackög_mŸi⁄s
()

654 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

655 
mŸi⁄s_
[
i
].
	`åack
();

657 
	}
}

659 
	gDëe˘WôhOF5
::
	$døw_mŸi⁄_åackög
(
Dëe˘WôhOF5
::
MŸi⁄
 &
m
)

661 i‡(
m
.
åackög_±s
.
	`em±y
())

664 
°d
::
ve˘‹
<
cv
::
Poöt2f
> 
l0
 = 
m
.
åackög_±s
[0];

665 
size_t
 
i
 = 1; i < 
m
.
åackög_±s
.
	`size
(); i++) {

666 
°d
::
ve˘‹
<
cv
::
Poöt2f
> 
l
 = 
m
.
åackög_±s
[
i
];

667 
døw_löes
<
°d
::
ve˘‹
<
cv
::
Poöt2f
> >(
‹igö_
, 
l0
, 
l
, 
m
.
cﬁ‹
);

668 
l0
 = 
l
;

672 
cv
::
ve˘‹
<cv::
Poöt
> 
œ°_˛u°î
;

673 
°d
::
ve˘‹
<
cv
::
Poöt2f
> &
l1
 = 
m
.
åackög_±s
.
	`back
();

674 
size_t
 
i
 = 0; i < 
l1
.
	`size
(); i++) {

675 i‡(
l1
[
i
].
x
 < 0) ;

676 
œ°_˛u°î
.
	`push_back
(
l1
[
i
]);

679 i‡(
œ°_˛u°î
.
	`size
() > 3) {

680 
cv
::
	`ª˘™gÀ
(
‹igö_
, cv::
	`boundögRe˘
(
œ°_˛u°î
), cv::
	`Sˇœr
(0, 0, 255), 3);

682 
	}
}

685 
	gDëe˘WôhOF5
::
	$døw_åackög
()

687 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

688 
MŸi⁄
 &
m
 = 
mŸi⁄s_
[
i
];

689 
	`døw_mŸi⁄_åackög
(
m
);

691 
	}
}

693 
boﬁ
 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$œ°_hi°
(
CONTOUR
 &
c⁄tour
, 
rid
)

695 
n
 = -1;

696 
°d
::
deque
<
CONTOUR
>::
c⁄°_ªvî£_ôî©‹
 
rô
;

697 
rô
 = 
hi°‹y
.
	`rbegö
();Ñô !hi°‹y.
	`ªnd
(); ++rit) {

698 i‡(
rô
->
	`em±y
()) ;

699 
n
++;

700 i‡(
n
 =
rid
) {

701 
c⁄tour
 = *
rô
;

702  
åue
;

706  
Ál£
;

707 
	}
}

709 
boﬁ
 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$has_ßme_œ°_hi°
(c⁄° 
Dëe˘WôhOF5
::
MŸi⁄
 &
m
)

712 
CONTOUR
 
s0
, 
m0
, 
s1
, 
m1
;

713 i‡(
	`œ°_hi°
(
m0
, 0Ë&&Üa°_hi°(
m1
, 1Ë&&Üa°_hi°(
s0
, 0Ë&&Üa°_hi°(
s1
, 1)) {

714 i‡(
m0
.
	`size
(Ë=
s0
.size(Ë&& 
m1
.size(Ë=
s1
.size()) {

715 
size_t
 
i
 = 0; i < 
m0
.
	`size
(); i++) {

716 i‡(
m0
[
i
].
x
 !
s0
[i].x || m0[i].
y
 != s0[i].y) {

717  
Ál£
;

721 
size_t
 
i
 = 0; i < 
m1
.
	`size
(); i++) {

722 i‡(
m1
[
i
].
x
 !
s1
[i].x || m1[i].
y
 != m1[i].y) {

723  
Ál£
;

727  
åue
;

730  
Ál£
;

734  
Ál£
;

736 
	}
}

738 
boﬁ
 
	gDëe˘WôhOF5
::
	$›_œrgî_mŸi⁄
(c⁄° 
Dëe˘WôhOF5
::
MŸi⁄
 &
m0
, c⁄° Dëe˘WôhOF5::MŸi⁄ &
m1
)

740  
m0
.
brc
.
	`¨ó
(Ë> 
m1
.brc.area();

741 
	}
}

752 
	gDëe˘WôhOF5
::
	$mîge_ovîœµed_mŸi⁄s
()

754 
°d
::
	`s‹t
(
mŸi⁄s_
.
	`begö
(), mŸi⁄s_.
	`íd
(), 
›_œrgî_mŸi⁄
);

755 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

756 i‡(!
mŸi⁄s_
[
i
].
disˇrd_
) {

757 
size_t
 
j
 = 
i
+1; j < 
mŸi⁄s_
.
	`size
(); j++) {

758 i‡(
mŸi⁄s_
[
i
].
	`has_ßme_œ°_hi°
(mŸi⁄s_[
j
])) {

759 
mŸi⁄s_
[
j
].
disˇrd_
 = 
åue
;

766 
°d
::
ve˘‹
<
MŸi⁄
>::
ôî©‹
 
ô
 = 
mŸi⁄s_
.
	`begö
(); ià!mŸi⁄s_.
	`íd
(); ) {

767 i‡(
ô
->
disˇrd_
)

768 
ô
 = 
mŸi⁄s_
.
	`îa£
(it);

770 ++
ô
;

772 
	}
}

774 
	gcv
::
Size
 
Dëe˘WôhOF5
::
	$e°_èrgë_size
(
y
)

776  
cv
::
	`Size
(()(
èrgë_x_
 * 
Á˘‹s_y_
[
y
]), ()(
èrgë_y_
 * factors_y_[y]));

777 
	}
}

780 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘WôhOF5
::
	$föd_diff_˛u°îs
(c⁄° 
cv
::
M©
 &
diff
)

786 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

788 
cv
::
M©
 
öãgøÀd
;

789 
cv
::
	`öãgøl
(
diff
, 
öãgøÀd
);

791 
cv
::
	`imshow
("diff", 
diff
);

794 
	#Y_STEP
 10

	)

795 
	#X_STEP
 10

	)

797 
boﬁ
 
yovîÊow
 = 
Ál£
;

799 
y
 = 10; y < 
video_height_
 && !
yovîÊow
; y +
Y_STEP
) {

800 
cv
::
Size
 
ts
 = 
	`e°_èrgë_size
(
y
);

801 
height
 = 
ts
.height;

802 i‡(
y
 + 
height
 > 
video_height_
) {

803 
yovîÊow
 = 
åue
;

804 
height
 = 
video_height_
 - 
y
;

807 
width
 = 
ts
.width;

809 
x
 = 0; x < 
video_width_
; x +
X_STEP
) {

810 i‡(
x
 + 
width
 > 
video_width_
) width = video_width_ - x;

812 
p0
 = 
öãgøÀd
.
©
<>(
cv
::
	`Poöt
(
x
, 
y
));

813 
p1
 = 
öãgøÀd
.
©
<>(
cv
::
	`Poöt
(
x
+
width
, 
y
));

814 
p2
 = 
öãgøÀd
.
©
<>(
cv
::
	`Poöt
(
x
, 
y
+
height
));

815 
p3
 = 
öãgøÀd
.
©
<>(
cv
::
	`Poöt
(
x
+
width
, 
y
+width));

817 
sum
 = 
p3
 + 
p0
 - 
p1
 - 
p2
;

820 
cv
::
Re˘
 
	`rc
(
x
, 
y
, 
width
, 
height
);

821 
øtio
 = 
sum
 / 255.0 / 
rc
.
	`¨ó
();

823 i‡(
øtio
 > 0.3) {

824 
rcs
.
	`push_back
(
rc
);

829  
rcs
;

830 
	}
}

833 
boﬁ
 
	gDëe˘WôhOF5
::
	$ˇlc_dí£_of
(c⁄° 
cv
::
Re˘
 &
roi
, cv::
M©
 &
x
, cv::M© &
y
)

835 i‡(
hi°_
.
‰ames
.
	`size
() < 2)

836  
Ál£
;

838 
cv
::
M©
 
¥ev
 = 
hi°_
.
	`rgë
(1)(
roi
), 
√xt
 = hi°_.rgë(0)‘oi), 
Êow
;

839 
cv
::
	`ˇlcO±iˇlFlowF¨√back
(
¥ev
, 
√xt
, 
Êow
, 0.5, 2, 13, 1, 1.5, 1.1, 0);

840 
°d
::
ve˘‹
<
cv
::
M©
> 
xy
;

841 
cv
::
	`•lô
(
Êow
, 
xy
);

842 
x
 = 
xy
[0], 
y
 = xy[1];

844  
åue
;

845 
	}
}

848 
ölöe
 
boﬁ
 
	$is_ö
(c⁄° 
cv
::
Re˘
 &
l
, c⁄° cv::Re˘ &
s
)

850  (
l
.
x
 <
s
.x &&Ü.x+l.
width
 >s.x+s.width &&Ü.
y
 <s.y &&Ü.y+l.
height
 >= s.y+s.height);

851 
	}
}

853 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$hÕ_make_of_brc
(
size_t
 
idx
, 
cv
::
M©
 &
x
, cv::M© &
y
)

855 
	`as£π
(
idx
 >0 && idx < 
dí£_of_poss
.
	`size
());

859 
x
 = 
cv
::
M©
::
	`zîos
(cv::
	`Size
(
brc
.
width
, brc.
height
), 
CV_32F
);

860 
y
 = 
cv
::
M©
::
	`zîos
(cv::
	`Size
(
brc
.
width
, brc.
height
), 
CV_32F
);

862 
cv
::
Re˘
 
rc
 = 
dí£_of_poss
[
idx
];

863 i‡(!
	`is_ö
(
brc
, 
rc
)) {

864 
rc
 &
brc
;

866 i‡(
rc
.
width
 =0 ||Ñc.
height
 == 0) {

871 
rc
.
x
 -
brc
.x;

872 
rc
.
y
 -
brc
.y;

874 
cv
::
M©
 
t
 = 
	`x
(
rc
);

875 
dí£_of_xs
[
idx
].
	`c›yTo
(
t
);

877 
t
 = 
	`y
(
rc
);

878 
dí£_of_ys
[
idx
].
	`c›yTo
(
t
);

879 
	}
}

881 
	gDëe˘WôhOF5
::
MŸi⁄
::
	$mîge_dí£_ofs
(
cv
::
M©
 &
xx
, cv::M© &
yy
)

883 
xx
 = 
cv
::
M©
::
	`zîos
(cv::
	`Size
(
brc
.
width
, brc.
height
), 
CV_32F
);

884 
yy
 = 
cv
::
M©
::
	`zîos
(cv::
	`Size
(
brc
.
width
, brc.
height
), 
CV_32F
);

886 
size_t
 
i
 = 0; i < 
dí£_of_poss
.
	`size
(); i++) {

887 
cv
::
M©
 
x
, 
y
;

888 
	`hÕ_make_of_brc
(
i
, 
x
, 
y
);

889 
xx
 +
x
;

890 
yy
 +
y
;

892 
	}
}

894 
	gDëe˘WôhOF5
::
	$sum_mŸi⁄s_dí£_of
()

896 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

897 
MŸi⁄
 &
m
 = 
mŸi⁄s_
[
i
];

899 
cv
::
M©
 
xx
, 
yy
;

900 
m
.
	`mîge_dí£_ofs
(
xx
, 
yy
);

903 
cv
::
	`ˇπToPﬁ¨
(
xx
, 
yy
, 
m
.
dí£_sum_dis
, m.
dí£_sum_dú
, 
åue
);

905 
	}
}

907 
	gDëe˘WôhOF5
::
	$rgb_‰om_dis_™g
(c⁄° 
cv
::
M©
 &
di°™˚
, c⁄° cv::M© &
™gÀs
, cv::M© &
rgb
)

909 
cv
::
M©
 
hsv
;

910 
cv
::
M©
 
tmp_dis
;

911 
cv
::
M©
 
tmp_™g
 = 
™gÀs
;

913 
möVÆ
, 
maxVÆ
;

914 
cv
::
	`möMaxLoc
(
di°™˚
, &
möVÆ
, &
maxVÆ
);

915 
di°™˚
.
	`c⁄vîtTo
(
tmp_dis
, -1, 1 / 
maxVÆ
);

917 
cv
::
	`möMaxLoc
(
tmp_dis
, &
möVÆ
, &
maxVÆ
);

919 
cv
::
M©
 
chs
[3];

920 
chs
[0] = 
tmp_™g
;

921 
chs
[1] = 
cv
::
M©
::
	`⁄es
(
tmp_™g
.
	`size
(), 
CV_32F
);

922 
chs
[2] = 
tmp_dis
;

923 
cv
::
	`mîge
(
chs
, 3, 
hsv
);

925 
cv
::
	`cvtCﬁ‹
(
hsv
, 
rgb
, cv::
COLOR_HSV2BGR
);

926 
	}
}

928 
	gDëe˘WôhOF5
::
	$døw_mŸi⁄s_dí£_of
()

930 
cv
::
M©
 
vis
 = cv::M©::
	`zîos
(cv::
	`Size
(
‹igö_
.
cﬁs
, origö_.
rows
), 
CV_32FC3
);

932 
size_t
 
i
 = 0; i < 
mŸi⁄s_
.
	`size
(); i++) {

933 
MŸi⁄
 &
m
 = 
mŸi⁄s_
[
i
];

935 
cv
::
M©
 
rgb
;

936 i‡(
m
.
dí£_sum_dis
.
cﬁs
 > 0) {

937 
cv
::
M©
 
ndis
, 
ndú
;

938 
	`n‹mÆize_dis
(
m
.
dí£_sum_dis
, 
ndis
);

939 
	`n‹mÆize_dú
(
m
.
dí£_sum_dú
, 
ndú
);

940 
	`rgb_‰om_dis_™g
(
ndis
, 
ndú
, 
rgb
);

942 
cv
::
M©
 
r
 = 
	`vis
(
m
.
brc
);

943 
rgb
.
	`c›yTo
(
r
);

948 
	}
}

951 
	mDIR_LEFT
, 
	mDIR_RIGHT
, 
	mDIR_UP
, 
	mDIR_DOWN
,

955 c⁄° 
	g_dús0
[] = { 180, 0, 270, 90 };

957 
ölöe
 
	$_dú
(
i
)

959 
up_™gÀ_
 = 110;

960 
up_hÆf
 = 
up_™gÀ_
 / 2;

961 
up_mö
 = 270 - 
up_hÆf
, 
up_max
 = 270 + up_half;

963 i‡(
i
 >
up_mö
 && i <
up_max
) {

964  
DIR_UP
;

966 i‡(
i
 >= 45 && i <= 135) {

967  
DIR_DOWN
;

969 i‡(
i
 > 135 && i < 
up_mö
) {

970  
DIR_LEFT
;

973  
DIR_RIGHT
;

975 
	}
}

979 
	gDëe˘WôhOF5
::
	$n‹mÆize_dú
(c⁄° 
cv
::
M©
 &
dú
, cv::M© &
m
)

981 
m
 = 
cv
::
M©
::
	`zîos
(
dú
.
rows
, dú.
cﬁs
, 
CV_32F
);

983 
y
 = 0; y < 
dú
.
rows
; y++) {

984 c⁄° *
ps
 = 
dú
.
±r
<>(
y
);

985 *
±
 = 
m
.
±r
<>(
y
);

987 
x
 = 0; x < 
dú
.
cﬁs
; x++) {

988 
±
[
x
] = 
_dús0
[
	`_dú
(
ps
[x])];

991 
	}
}

995 
	gDëe˘WôhOF5
::
	$n‹mÆize_dis
(c⁄° 
cv
::
M©
 &
dis
, cv::M© &
m
)

998 
möVÆ
, 
maxVÆ
;

999 
cv
::
	`möMaxLoc
(
dis
, &
möVÆ
, &
maxVÆ
);

1000 
dis
.
	`c⁄vîtTo
(
m
, -1, 1/
maxVÆ
);

1002 
thªshﬁd
 = 0.3;

1004 
cv
::
	`thªshﬁd
(
m
, m, 
thªshﬁd
, 1.0, cv::
THRESH_BINARY
);

1005 
	}
}

	@sample/libdetect2/det/DetectWithOF5.h

1 #¥agm®
⁄˚


2 
	~"dëe˘.h
"

12 ˛as†
	cDëe˘WôhOF5
: 
public
 
Dëe˘


15 
	sMŸi⁄


17 
Dëe˘WôhOF5
 *
∑ª¡
;

18 
size_t
 
	mM
;

19 
	mid
;

20 
	m°amp
;

21 
size_t
 
	m‰ame_idx_
;

22 
	m°d
::
deque
<
°d
::
ve˘‹
<
cv
::
Poöt
> > 
hi°‹y
;

23 
	m°d
::
ve˘‹
<
cv
::
Poöt
> 
œ°_c⁄tour
;

24 
	mcv
::
Re˘
 
brc
;

25 
boﬁ
 
	måackög_öôed_
;

26 
boﬁ
 
	mdisˇrd_
;

28 
	mcv
::
Sˇœr
 
cﬁ‹
;

30 
	m°d
::
deque
<
°d
::
ve˘‹
<
cv
::
Poöt2f
> > 
åackög_±s
;

31 
	m°d
::
ve˘‹
<
cv
::
Re˘
> 
Á˚s
;

34 
	m°d
::
deque
<
cv
::
Re˘
> 
dí£_of_poss
;

35 
	m°d
::
deque
<
cv
::
M©
> 
dí£_of_xs
;

36 
	m°d
::
deque
<
cv
::
M©
> 
dí£_of_ys
;

37 
	mcv
::
M©
 
dí£_sum_dis
;

38 
	mcv
::
M©
 
dí£_sum_dú
;

40 
	m°d
::
ve˘‹
<
cv
::
Poöt
> 
gë_c⁄tours_˚¡î
();

41 
	m°d
::
ve˘‹
<
cv
::
Poöt
> 
gë_brcs_˚¡î
();

42 
upd©e_boundög_rc
();

43 
öô_åackög
(
cv
::
CasˇdeCœssifõr
 *
cc
);

44 
åack
();

45 
boﬁ
 
has_ßme_œ°_hi°
(c⁄° 
MŸi⁄
 &
m
);

46 
boﬁ
 
œ°_hi°
(
°d
::
ve˘‹
<
cv
::
Poöt
> &
c⁄t
, 
rid
);

47 
mîge_dí£_ofs
(
cv
::
M©
 &
xx
, cv::M© &
yy
);

49 
	m¥iv©e
:

50 
hÕ_make_of_brc
(
size_t
 
idx
, 
cv
::
M©
 &
x
, cv::M© &
y
);

53 
‰õnd
 
	gMŸi⁄
;

54 
	g°d
::
	tve˘‹
<
	tMŸi⁄
> 
	tMOTIONS
;

55 
MOTIONS
 
	gmŸi⁄s_
;

57 
	sHi°‹y


59 
	g°d
::
deque
<
cv
::
M©
> 
‰ames
;

60 
	g°d
::
deque
<
cv
::
M©
> 
diff
;

61 
size_t
 
	g‰ame_idx_
;

62 
size_t
 
	gN
;

63 
Dëe˘WôhOF5
 *
	g∑ª¡
;

65 
push
(c⁄° 
cv
::
M©
 &
img
);

66 
boﬁ
 
exi°
(
size_t
 
idx
);

67 
	gcv
::
M©
 
gë
(
size_t
 
idx
);

68 
	gcv
::
M©
 
rgë
(
size_t
 
rid
);

71 
	gcv
::
M©
 
gë_diff
(
size_t
 
idx
);

72 
	gcv
::
M©
 
rgë_diff
(
size_t
 
rid
);

74 
‰õnd
 
	gHi°‹y
;

75 
Hi°‹y
 
	ghi°_
;

77 
	gcv
::
M©
 
kî_îode_
, 
	gkî_dû©e_
, 
	gkî_›í_
;

78 
	gcv
::
M©
 
‹igö_
;

79 
	gcuº_
;

80 
size_t
 
	g‰ame_idx_
;

81 
	gthªshﬁd_diff_
;

83 *
	gÁ˘‹s_y_
;

85 
	gmŸi⁄_M_
;

86 
	gmŸi⁄_timeout_
;

88 
	gcv
::
CasˇdeCœssifõr
 *
cc_
;

90 
	gèrgë_x_
, 
	gèrgë_y_
;

92 
	gpublic
:

93 
Dëe˘WôhOF5
(
KVC⁄fig
 *
kv
);

94 ~
Dëe˘WôhOF5
();

96 
	g¥iv©e
:

97 
vútuÆ
 
dëe˘
(
cv
::
M©
 &
‹igö
, 
°d
::
ve˘‹
<cv::
Re˘
> &
èrgës
, &
Êù≥d_ödex
);

100 
ßve_hi°
(c⁄° 
cv
::
M©
 &
‹igö
);

103 
föd_c⁄tours
(
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > &
ªgi⁄s
);

106 
boﬁ
 
›_œrgî_mŸi⁄
(c⁄° 
Dëe˘WôhOF5
::
MŸi⁄
 &
m0
, c⁄° Dëe˘WôhOF5::MŸi⁄ &
m1
);

109 
mîge_mŸi⁄s
(c⁄° 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > &
ªgi⁄s
);

113 
mîge_ovîœµed_mŸi⁄s
();

116 
åackög_mŸi⁄s
();

117 
døw_åackög
();

118 
døw_mŸi⁄_åackög
(
MŸi⁄
 &
m
);

121 
mîge_c⁄tours
(
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > &
c⁄tours
);

124 
døw_mŸi⁄s
();

127 
ªmove_timeout_mŸi⁄s
();

130 
ölöe
 
boﬁ
 
	$›_s‹t_mŸi⁄_by_¨ó
(c⁄° 
MŸi⁄
 &
m1
, c⁄° MŸi⁄ &
m2
)

132  
m1
.
brc
.
	`¨ó
(Ë> 
m2
.brc.area();

133 
	}
}

136 
	$Á˘‹_y
(
y
) const;

139 
cv
::
Size
 
	`e°_èrgë_size
(
y
);

144 
°d
::
ve˘‹
<
cv
::
Re˘
> 
	`föd_diff_˛u°îs
(c⁄° cv::
M©
 &
bö_diff
);

147 
	`show_èrgës_size
();

150 
boﬁ
 
	`ˇlc_dí£_of
(c⁄° 
cv
::
Re˘
 &
roi
, cv::
M©
 &
x
, cv::M© &
y
);

153 
	`sum_mŸi⁄s_dí£_of
();

154 
	`døw_mŸi⁄s_dí£_of
();

157 
	`rgb_‰om_dis_™g
(c⁄° 
cv
::
M©
 &
dis
, c⁄° cv::M© &
™g
, cv::M© &
rgb
);

160 
	`n‹mÆize_dú
(c⁄° 
cv
::
M©
 &
dú
, cv::M© &
n
);

163 
	`n‹mÆize_dis
(c⁄° 
cv
::
M©
 &
dis
, cv::M© &
n
);

164 
	}
};

	@sample/libdetect2/det/History.h

1 #¥agm®
⁄˚


3 
	~<ex˚±i⁄
>

5 
	gãm∂©e
<
˛ass
 
	gT
>

6 ˛as†
	cHi°‹y


8 
	msize_
;

9 
T
 *
	md©a_
;

10 
	mpos_
;

11 
boﬁ
 
	mfuŒ_
;

13 
	mpublic
:

14 
	$Hi°‹y
(
max_size
 = 10)

16 i‡(
max_size
 < 1) {

17 
max_size
 = 1;

20 
size_
 = 
max_size
;

21 
d©a_
 = 
√w
 
T
[
size_
];

22 
pos_
 = 0;

23 
fuŒ_
 = 
Ál£
;

26 ~
	$Hi°‹y
()

28 
dñëe
 []
d©a_
;

29 
	}
}

31 
size_t
 
	$size
(Ëc⁄° {  
size_
; 
	}
}

32 
boﬁ
 
	$fuŒ
(Ëc⁄° {  
fuŒ_
; 
	}
}

34 
	gT
& 
	$¥ev
(
idx
 = 0) const

36 
idx
 %
size_
;

38 i‡(
pos_
 - 
idx
 < 0) {

39  
d©a_
[
size_
 + 
pos_
 - 
idx
];

42  
d©a_
[
pos_
 - 
idx
];

44 
	}
}

46 
	g›î©‹
++()

48 
	gpos_
++;

49 i‡(
	gpos_
 =
size_
) {

50 
fuŒ_
 = 
åue
;

52 
	gpos_
 %
size_
;

55 
	gHi°‹y
 &
	g›î©‹
++()

57 ++(*
	gthis
);

58  *
	gthis
;

	@sample/libdetect2/det/SkinMask.cpp

1 
	~"SköMask.h
"

3 
	gSköMask
::
	$SköMask
(
KVC⁄fig
 *
cfg
)

4 : 
	$cfg_
(
cfg
)

6 
kî_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(3, 3));

7 
kî2_
 = 
cv
::
	`gëSåu˘urögEÀmít
(cv::
MORPH_RECT
, cv::
	`Size
(7, 7));

9 
skö_thªs_low_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("skin_thres_low", "8"));

10 
skö_thªs_high_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("skin_thres_high", "20"));

12 
haú_thªs_high_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("hair_thres_high", "30"));

13 
	}
}

15 
	gSköMask
::~
	$SköMask
()

17 
	}
}

19 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
SköMask
::
	$föd_skö_c⁄tours
(c⁄° 
cv
::
M©
 &
‹igö
)

24 
cv
::
M©
 
hsv
;

25 
cv
::
	`cvtCﬁ‹
(
‹igö
, 
hsv
, cv::
COLOR_BGR2HSV
);

26 
°d
::
ve˘‹
<
cv
::
M©
> 
ch™√ls
;

27 
cv
::
	`•lô
(
hsv
, 
ch™√ls
);

28 
cv
::
M©
 
H
 = 
ch™√ls
[0];

30 
cv
::
	`thªshﬁd
(
H
, H, 
skö_thªs_low_
, -1, cv::
THRESH_TOZERO
);

31 
cv
::
	`thªshﬁd
(
H
, H, 
skö_thªs_high_
, -1, cv::
THRESH_TOZERO_INV
);

33 
cv
::
	`îode
(
H
, H, 
kî_
);

34 
cv
::
	`dû©e
(
H
, H, 
kî2_
);

35 
cv
::
	`blur
(
H
, H, cv::
	`Size
(3, 3));

37 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
c⁄tours
;

38 
cv
::
	`födC⁄tours
(
H
, 
c⁄tours
, cv::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

39  
c⁄tours
;

40 
	}
}

42 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
SköMask
::
	$föd_haú_c⁄tours
(c⁄° 
cv
::
M©
 &
‹igö
)

47 
cv
::
M©
 
gøy
;

48 
cv
::
	`cvtCﬁ‹
(
‹igö
, 
gøy
, cv::
COLOR_BGR2GRAY
);

50 
cv
::
	`thªshﬁd
(
gøy
, gøy, 
haú_thªs_high_
, 255, cv::
THRESH_BINARY_INV
);

51 
cv
::
	`îode
(
gøy
, gøy, 
kî_
);

52 
cv
::
	`dû©e
(
gøy
, gøy, 
kî_
);

54 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
c⁄tours
;

55 
cv
::
	`födC⁄tours
(
gøy
, 
c⁄tours
, cv::
RETR_EXTERNAL
, cv::
CHAIN_APPROX_NONE
);

56  
c⁄tours
;

57 
	}
}

	@sample/libdetect2/det/SkinMask.h

1 #¥agm®
⁄˚


3 
	~<›ícv2/›ícv.hµ
>

4 
	~"../libkvc⁄fig/KVC⁄fig.h
"

11 ˛as†
	cSköMask


13 
KVC⁄fig
 *
	mcfg_
;

14 
	mcv
::
M©
 
kî_
, 
	mkî2_
;

15 
	mskö_thªs_low_
, 
	mskö_thªs_high_
;

16 
	mhaú_thªs_high_
;

18 
	mpublic
:

19 
SköMask
(
KVC⁄fig
 *
cfg
);

20 ~
SköMask
();

22 
	m°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
föd_skö_c⁄tours
(c⁄° cv::
M©
 &
‹igö
);

23 
	m°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
föd_haú_c⁄tours
(c⁄° cv::
M©
 &
‹igö
);

	@sample/libdetect2/det/ct/CompressiveTracker.cpp

1 
	~"Com¥essiveTøckî.h
"

2 
	~<m©h.h
>

3 
	~<io°ªam
>

4 
usög
 
«me•a˚
 
	gcv
;

5 
usög
 
«me•a˚
 
	g°d
;

8 
	gCom¥essiveTøckî
::
	$Com¥essiveTøckî
()

10 
„©uªMöNumRe˘
 = 2;

11 
„©uªMaxNumRe˘
 = 4;

12 
„©uªNum
 = 50;

13 
rOuãrPosôive
 = 4;

14 
rSórchWödow
 = 25;

15 
muPosôive
 = 
ve˘‹
<>(
„©uªNum
, 0.0f);

16 
muNeg©ive
 = 
ve˘‹
<>(
„©uªNum
, 0.0f);

17 
sigmaPosôive
 = 
ve˘‹
<>(
„©uªNum
, 1.0f);

18 
sigmaNeg©ive
 = 
ve˘‹
<>(
„©uªNum
, 1.0f);

19 
À¨nR©e
 = 0.85f;

20 
	}
}

22 
	gCom¥essiveTøckî
::~
	$Com¥essiveTøckî
()

24 
	}
}

41 
Com¥essiveTøckî
::
	$HØrFótuª
(
Re˘
& 
_obje˘Box
, 
_numFótuª
)

50 
„©uªs
 = 
ve˘‹
<ve˘‹<
Re˘
> >(
_numFótuª
, vector<Rect>());

56 
„©uªsWeight
 = 
ve˘‹
<ve˘‹<> >(
_numFótuª
, vector<>());

60 
numRe˘
;

62 
Re˘
 
ª˘Temp
;

63 
weightTemp
;

65 
i
=0; i<
_numFótuª
; i++)

72 
numRe˘
 = 
	`cvFlo‹
(
∫g
.
	`unif‹m
(()
„©uªMöNumRe˘
, ()
„©uªMaxNumRe˘
));

74 
j
=0; j<
numRe˘
; j++)

80 
ª˘Temp
.
x
 = 
	`cvFlo‹
(
∫g
.
	`unif‹m
(0.0, ()(
_obje˘Box
.
width
 - 3)));

81 
ª˘Temp
.
y
 = 
	`cvFlo‹
(
∫g
.
	`unif‹m
(0.0, ()(
_obje˘Box
.
height
 - 3)));

83 
ª˘Temp
.
width
 = 
	`cvCeû
(
∫g
.
	`unif‹m
(0.0, ()(
_obje˘Box
.width -Ñe˘Temp.
x
 - 2)));

84 
ª˘Temp
.
height
 = 
	`cvCeû
(
∫g
.
	`unif‹m
(0.0, ()(
_obje˘Box
.heighà-Ñe˘Temp.
y
 - 2)));

86 
„©uªs
[
i
].
	`push_back
(
ª˘Temp
);

94 
weightTemp
 = ()
	`pow
(-1.0, 
	`cvFlo‹
(
∫g
.
	`unif‹m
(0.0, 2.0))Ë/ 
	`sqπ
((
numRe˘
));

96 
„©uªsWeight
[
i
].
	`push_back
(
weightTemp
);

100 
	}
}

108 
	gCom¥essiveTøckî
::
ßm∂eRe˘
(
M©
& 
_image
, 
Re˘
& 
_obje˘Box
, 
_rI¬î
, 
_rOuãr
, 
_maxSam∂eNum
, 
ve˘‹
<Re˘>& 
_ßm∂eBox
)

119 
	growsz
 = 
_image
.
rows
 - 
_obje˘Box
.
height
 - 1;

120 
	gcﬁsz
 = 
_image
.
cﬁs
 - 
_obje˘Box
.
width
 - 1;

126 
	göødsq
 = 
_rI¬î
*_rInner;

127 
	gouåadsq
 = 
_rOuãr
*_rOuter;

129 
	gdi°
;

131 
	gmörow
 = 
max
(0,()
_obje˘Box
.
y
-()
_rI¬î
);

132 
	gmaxrow
 = 
mö
(()
rowsz
-1,()
_obje˘Box
.
y
+()
_rI¬î
);

133 
	gmöcﬁ
 = 
max
(0,()
_obje˘Box
.
x
-()
_rI¬î
);

134 
	gmaxcﬁ
 = 
mö
(()
cﬁsz
-1,()
_obje˘Box
.
x
+()
_rI¬î
);

136 
	gi
 = 0;

140 
	g¥ob
 = (()(
_maxSam∂eNum
))/(
maxrow
-
mörow
+1)/(
maxcﬁ
-
möcﬁ
+1);

142 
	gr
;

143 
	gc
;

145 
	g_ßm∂eBox
.
˛ór
();

146 
Re˘
 
ªc
(0,0,0,0);

148  
	gr
=
mörow
;Ñ<=()
maxrow
;Ñ++ )

149  
	gc
=
möcﬁ
; c<=()
maxcﬁ
; c++ ){

151 
	gdi°
 = (
_obje˘Box
.
y
-
r
)*(_obje˘Box.y-rË+ (_obje˘Box.
x
-
c
)*(_objectBox.x-c);

158 if–
	g∫g
.
unif‹m
(0.,1.)<
	g¥ob
 && 
	gdi°
 < 
	göødsq
 && di° >
ouåadsq
 ){

160 
ªc
.
x
 = 
c
;

161 
	gªc
.
	gy
 = 
r
;

162 
	gªc
.
	gwidth
 = 
_obje˘Box
.
width
;

163 
	gªc
.
	gheight

_obje˘Box
.
height
;

165 
	g_ßm∂eBox
.
push_back
(
ªc
);

167 
	gi
++;

171 
	g_ßm∂eBox
.
ªsize
(
i
);

178 
	gCom¥essiveTøckî
::
ßm∂eRe˘
(
M©
& 
_image
, 
Re˘
& 
_obje˘Box
, 
_§w
, 
ve˘‹
<Re˘>& 
_ßm∂eBox
)

181 
	growsz
 = 
_image
.
rows
 - 
_obje˘Box
.
height
 - 1;

182 
	gcﬁsz
 = 
_image
.
cﬁs
 - 
_obje˘Box
.
width
 - 1;

183 
	göødsq
 = 
_§w
*_srw;

186 
	gdi°
;

188 
	gmörow
 = 
max
(0,()
_obje˘Box
.
y
-()
_§w
);

189 
	gmaxrow
 = 
mö
(()
rowsz
-1,()
_obje˘Box
.
y
+()
_§w
);

190 
	gmöcﬁ
 = 
max
(0,()
_obje˘Box
.
x
-()
_§w
);

191 
	gmaxcﬁ
 = 
mö
(()
cﬁsz
-1,()
_obje˘Box
.
x
+()
_§w
);

193 
	gi
 = 0;

195 
	gr
;

196 
	gc
;

198 
Re˘
 
ªc
(0,0,0,0);

199 
	g_ßm∂eBox
.
˛ór
();

201  
	gr
=
mörow
;Ñ<=()
maxrow
;Ñ++ )

202  
	gc
=
möcﬁ
; c<=()
maxcﬁ
; c++ ){

203 
	gdi°
 = (
_obje˘Box
.
y
-
r
)*(_obje˘Box.y-rË+ (_obje˘Box.
x
-
c
)*(_objectBox.x-c);

205 if–
	gdi°
 < 
	göødsq
 ){

207 
	gªc
.
	gx
 = 
c
;

208 
	gªc
.
	gy
 = 
r
;

209 
	gªc
.
	gwidth
 = 
_obje˘Box
.
width
;

210 
	gªc
.
	gheight

_obje˘Box
.
height
;

211 
	g_ßm∂eBox
.
push_back
(
ªc
);

212 
	gi
++;

216 
	g_ßm∂eBox
.
ªsize
(
i
);

225 
	gCom¥essiveTøckî
::
gëFótuªVÆue
(
M©
& 
_imageI¡egøl
, 
ve˘‹
<
Re˘
>& 
_ßm∂eBox
, M©& 
_ßm∂eFótuªVÆue
)

227 
	gßm∂eBoxSize
 = 
_ßm∂eBox
.
size
();

228 
	g_ßm∂eFótuªVÆue
.
¸óã
(
„©uªNum
, 
ßm∂eBoxSize
, 
CV_32F
);

229 
	gãmpVÆue
;

230 
	gxMö
;

231 
	gxMax
;

232 
	gyMö
;

233 
	gyMax
;

235 
	gi
=0; i<
	g„©uªNum
; i++)

237 
	gj
=0; j<
	gßm∂eBoxSize
; j++)

239 
	gãmpVÆue
 = 0.0f;

240 
size_t
 
	gk
=0; k<
	g„©uªs
[
i
].
size
(); k++)

244 
	gxMö
 = 
_ßm∂eBox
[
j
].
x
 + 
„©uªs
[
i
][
k
].x;

245 
	gxMax
 = 
_ßm∂eBox
[
j
].
x
 + 
„©uªs
[
i
][
k
].x + fótuªs[i][k].
width
;

246 
	gyMö
 = 
_ßm∂eBox
[
j
].
y
 + 
„©uªs
[
i
][
k
].y;

247 
	gyMax
 = 
_ßm∂eBox
[
j
].
y
 + 
„©uªs
[
i
][
k
].y + fótuªs[i][k].
height
;

253 
	gãmpVÆue
 +
„©uªsWeight
[
i
][
k
] *

254 (
_imageI¡egøl
.
©
<>(
yMö
, 
	gxMö
) +

255 
	g_imageI¡egøl
.
	g©
<>(
	gyMax
, 
	gxMax
) -

256 
	g_imageI¡egøl
.
	g©
<>(
	gyMö
, 
	gxMax
) -

257 
	g_imageI¡egøl
.
	g©
<>(
	gyMax
, 
	gxMö
));

259 
	g_ßm∂eFótuªVÆue
.
	g©
<>(
	gi
,
	gj
Ë
ãmpVÆue
;

274 
	gCom¥essiveTøckî
::
˛assifõrUpd©e
(
M©
& 
_ßm∂eFótuªVÆue
, 
ve˘‹
<>& 
_mu
, ve˘‹<>& 
_sigma
, 
_À¨nR©e
)

276 
Sˇœr
 
	gmuTemp
;

277 
Sˇœr
 
	gsigmaTemp
;

279 
	gi
=0; i<
	g„©uªNum
; i++)

282 
mónStdDev
(
_ßm∂eFótuªVÆue
.
row
(
i
), 
muTemp
, 
sigmaTemp
);

284 
	g_sigma
[
i
] = ()
sqπ
–
_À¨nR©e
*
_sigma
[i]*_sigma[i] + (1.0f-_À¨nR©e)*
sigmaTemp
.
vÆ
[0]*sigmaTemp.val[0]

285 + 
_À¨nR©e
*(1.0f-_À¨nR©e)*(
_mu
[
i
]-
muTemp
.
vÆ
[0])*(_mu[i]-muTemp.val[0]));

287 
	g_mu
[
i
] = 
_mu
[i]*
_À¨nR©e
 + (1.0f-_À¨nR©e)*
muTemp
.
vÆ
[0];

292 
	gCom¥essiveTøckî
::
ødioCœssifõr
(
ve˘‹
<>& 
_muPos
, ve˘‹<>& 
_sigmaPos
, ve˘‹<>& 
_muNeg
, ve˘‹<>& 
_sigmaNeg
,

293 
M©
& 
_ßm∂eFótuªVÆue
, & 
_ødioMax
, & 
_ødioMaxIndex
)

295 
	gsumRadio
;

298 
	g_ødioMax
 = -
FLT_MAX
;

300 
	g_ødioMaxIndex
 = 0;

301 
	gpPos
;

302 
	gpNeg
;

303 
	gßm∂eBoxNum
 = 
_ßm∂eFótuªVÆue
.
cﬁs
;

305 
	gj
=0; j<
	gßm∂eBoxNum
; j++)

307 
	gsumRadio
 = 0.0f;

308 
	gi
=0; i<
	g„©uªNum
; i++)

313 
	gpPos
 = 
exp
–(
_ßm∂eFótuªVÆue
.
©
<>(
i
,
j
)-
_muPos
[i])*(_ßm∂eFótuªVÆue.©<>(i,j)-_muPos[i]Ë/ -(2.0f*
_sigmaPos
[i]*_sigmaPos[i]+1e-30ËË/ (
	g_sigmaPos
[i]+1e-30);

314 
	gpNeg
 = 
exp
–(
_ßm∂eFótuªVÆue
.
©
<>(
i
,
j
)-
_muNeg
[i])*(_ßm∂eFótuªVÆue.©<>(i,j)-_muNeg[i]Ë/ -(2.0f*
_sigmaNeg
[i]*_sigmaNeg[i]+1e-30ËË/ (
	g_sigmaNeg
[i]+1e-30);

319 
	gsumRadio
 +
log
(
pPos
+1e-30Ë-Üog(
pNeg
+1e-30);

321 i‡(
	g_ødioMax
 < 
	gsumRadio
)

323 
	g_ødioMax
 = 
sumRadio
;

324 
	g_ødioMaxIndex
 = 
j
;

330 
	gCom¥essiveTøckî
::
	$öô
(
M©
& 
_‰ame
, 
Re˘
& 
_obje˘Box
)

334 
	`HØrFótuª
(
_obje˘Box
, 
„©uªNum
);

343 
	`ßm∂eRe˘
(
_‰ame
, 
_obje˘Box
, 
rOuãrPosôive
, 0, 1000000, 
ßm∂ePosôiveBox
);

348 
	`ßm∂eRe˘
(
_‰ame
, 
_obje˘Box
, 
rSórchWödow
*1.5, 
rOuãrPosôive
+4.0, 100, 
ßm∂eNeg©iveBox
);

351 
	`öãgøl
(
_‰ame
, 
imageI¡egøl
, 
CV_32F
);

353 
	`gëFótuªVÆue
(
imageI¡egøl
, 
ßm∂ePosôiveBox
, 
ßm∂ePosôiveFótuªVÆue
);

354 
	`gëFótuªVÆue
(
imageI¡egøl
, 
ßm∂eNeg©iveBox
, 
ßm∂eNeg©iveFótuªVÆue
);

356 
	`˛assifõrUpd©e
(
ßm∂ePosôiveFótuªVÆue
, 
muPosôive
, 
sigmaPosôive
, 
À¨nR©e
);

357 
	`˛assifõrUpd©e
(
ßm∂eNeg©iveFótuªVÆue
, 
muNeg©ive
, 
sigmaNeg©ive
, 
À¨nR©e
);

358 
	}
}

361 
	gcv
::
Re˘
 
Com¥essiveTøckî
::
	$¥o˚ssFøme
(
M©
& 
_‰ame
, 
cv
::
Re˘
 
obje˘Box
)

363 
cv
::
Re˘
 
_obje˘Box
;

366 
	`ßm∂eRe˘
(
_‰ame
, 
obje˘Box
, 
rSórchWödow
,
dëe˘Box
);

368 
	`öãgøl
(
_‰ame
, 
imageI¡egøl
, 
CV_32F
);

370 
	`gëFótuªVÆue
(
imageI¡egøl
, 
dëe˘Box
, 
dëe˘FótuªVÆue
);

371 
ødioMaxIndex
;

372 
ødioMax
;

374 
	`ødioCœssifõr
(
muPosôive
, 
sigmaPosôive
, 
muNeg©ive
, 
sigmaNeg©ive
, 
dëe˘FótuªVÆue
, 
ødioMax
, 
ødioMaxIndex
);

376 
_obje˘Box
 = 
dëe˘Box
[
ødioMaxIndex
];

381 
	`ßm∂eRe˘
(
_‰ame
, 
_obje˘Box
, 
rOuãrPosôive
, 0.0, 1000000, 
ßm∂ePosôiveBox
);

382 
	`ßm∂eRe˘
(
_‰ame
, 
_obje˘Box
, 
rSórchWödow
*1.5, 
rOuãrPosôive
+4.0, 100, 
ßm∂eNeg©iveBox
);

384 
	`gëFótuªVÆue
(
imageI¡egøl
, 
ßm∂ePosôiveBox
, 
ßm∂ePosôiveFótuªVÆue
);

385 
	`gëFótuªVÆue
(
imageI¡egøl
, 
ßm∂eNeg©iveBox
, 
ßm∂eNeg©iveFótuªVÆue
);

387 
	`˛assifõrUpd©e
(
ßm∂ePosôiveFótuªVÆue
, 
muPosôive
, 
sigmaPosôive
, 
À¨nR©e
);

388 
	`˛assifõrUpd©e
(
ßm∂eNeg©iveFótuªVÆue
, 
muNeg©ive
, 
sigmaNeg©ive
, 
À¨nR©e
);

389  
_obje˘Box
;

390 
	}
}

	@sample/libdetect2/det/ct/CompressiveTracker.h

15 #¥agm®
⁄˚


17 
	~<›ícv2/c‹e/c‹e.hµ
>

18 
	~<›ícv2/img¥oc/img¥oc.hµ
>

19 
	~<ve˘‹
>

21 
usög
 
	g°d
::
ve˘‹
;

22 
usög
 
«me•a˚
 
	gcv
;

24 ˛as†
	cCom¥essiveTøckî


26 
	mpublic
:

27 
Com¥essiveTøckî
();

28 ~
Com¥essiveTøckî
();

30 
	m¥iv©e
:

31 
„©uªMöNumRe˘
;

32 
	m„©uªMaxNumRe˘
;

33 
	m„©uªNum
;

34 
	mve˘‹
<ve˘‹<
	mcv
::
Re˘
> > 
„©uªs
;

35 
	mve˘‹
<ve˘‹<> > 
	m„©uªsWeight
;

36 
	mrOuãrPosôive
;

37 
	mve˘‹
<
	mcv
::
Re˘
> 
ßm∂ePosôiveBox
;

38 
	mve˘‹
<
	mcv
::
Re˘
> 
ßm∂eNeg©iveBox
;

39 
	mrSórchWödow
;

40 
M©
 
	mimageI¡egøl
;

41 
M©
 
	mßm∂ePosôiveFótuªVÆue
;

42 
M©
 
	mßm∂eNeg©iveFótuªVÆue
;

46 
	mve˘‹
<> 
	mmuPosôive
;

47 
	mve˘‹
<> 
	msigmaPosôive
;

48 
	mve˘‹
<> 
	mmuNeg©ive
;

49 
	mve˘‹
<> 
	msigmaNeg©ive
;

50 
	mÀ¨nR©e
;

51 
	mve˘‹
<
	mcv
::
Re˘
> 
dëe˘Box
;

52 
M©
 
	mdëe˘FótuªVÆue
;

53 
RNG
 
	m∫g
;

55 
	m¥iv©e
:

56 
HØrFótuª
(
cv
::
Re˘
& 
_obje˘Box
, 
_numFótuª
);

57 
ßm∂eRe˘
(
M©
& 
_image
, 
cv
::
Re˘
& 
_obje˘Box
, 
_rI¬î
, 
_rOuãr
, 
_maxSam∂eNum
, 
ve˘‹
<cv::Re˘>& 
_ßm∂eBox
);

58 
ßm∂eRe˘
(
M©
& 
_image
, 
cv
::
Re˘
& 
_obje˘Box
, 
_§w
, 
ve˘‹
<cv::Re˘>& 
_ßm∂eBox
);

59 
gëFótuªVÆue
(
M©
& 
_imageI¡egøl
, 
ve˘‹
<
cv
::
Re˘
>& 
_ßm∂eBox
, M©& 
_ßm∂eFótuªVÆue
);

60 
˛assifõrUpd©e
(
M©
& 
_ßm∂eFótuªVÆue
, 
ve˘‹
<>& 
_mu
, ve˘‹<>& 
_sigma
, 
_À¨nR©e
);

61 
ødioCœssifõr
(
ve˘‹
<>& 
_muPos
, ve˘‹<>& 
_sigmaPos
, ve˘‹<>& 
_muNeg
, ve˘‹<>& 
_sigmaNeg
,

62 
M©
& 
_ßm∂eFótuªVÆue
, & 
_ødioMax
, & 
_ødioMaxIndex
);

63 
	mpublic
:

65 
cv
::
Re˘
 
¥o˚ssFøme
(
M©
& 
_‰ame
, cv::Re˘ 
obje˘Box
);

66 
öô
(
M©
& 
_‰ame
, 
cv
::
Re˘
& 
_obje˘Box
);

	@sample/libdetect2/det/detect.cpp

1 
	~"dëe˘.h
"

3 
	~<m©h.h
>

4 
	~<Êﬂt.h
>

5 
	~<sys/°©.h
>

6 
	#MAX_PATH
 256

	)

8 
	g°d
::
°rög
 
Dëe˘
::
_log_‚ame
 = "det_s.log";

10 c⁄° *
	$gë_log_fûíame
()

12 
°d
::
°rög
 
‚ame
;

13 
time_t
 
t
 = 
	`time
(0);

14 
tm
 *
±m
 = 
	`loˇ…ime
(&
t
);

16 
day
 = 
±m
->
tm_wday
;

17 
buf
[128];

18 
	`¢¥ötf
(
buf
, (buf), "dëlog/dë_s_%d.log", 
day
);

19 
‚ame
 = 
buf
;

21  
‚ame
.
	`c_°r
();

22 
	}
}

24 
	gDëe˘
::
	$Dëe˘
(
KVC⁄fig
 *
cfg
Ë: 
	`cfg_
(cfg)

25 , 
	$‰ames_hi°‹y_
(10)

27 
debug_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("debug", "0"));

28 
debug_log_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("debug_log", "0"));

29 
debug_img_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("debug_img", "0"));

30 
debug_img2_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("debug_img2", "0"));

31 
mŸi⁄_hi°_dñay_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("motion_hist_delay", "1.5"));

32 
ßve_hi°‹y_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("save_history", "0"));

34 
	`mkdú
("detlog",666);

36 
	`sy°em
("del detlog\\*.jpg");

37 
	`sy°em
("del detlog\\*.yaml");

39 i‡(
debug_
) {

40 
cv
::
	`«medWödow
("student");

41 
cv
::
	`moveWödow
("student", 0, 540);

44 i‡(
debug_log_
) {

45 
log_öô
 = 
log_öô_fûe
;

46 
log
 = 
log_fûe
;

49 
log_öô
 = 
log_öô_dummy
;

50 
log
 = 
log_dummy
;

53 
	`log_öô
(
	`gë_log_fûíame
());

55 
	`log
("[VERSION Info]: buûdáà%s\n", 
__TIMESTAMP__
);

56 
	`log
("%s: sèπög....\n", 
__FUNCTION__
);

58 
video_width_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("video_width", "480")), 
video_height_
 =átoi(cfg_->get_value("video_height", "270"));

60 
max_duøti⁄_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("max_duration", "30.0"));

63 
m©ched_¨ó_Á˘‹_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("matched_area_factor", "5.0"));

65 
Á˘‹_0_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("factor_0", "0.2"));

67 
Á˘‹_1_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("factor_1", "1.0"));

69 
	`pﬁyfô_löór
(
Á˘‹_0_
, 
Á˘‹_1_
, 
Á˘‹_equ©i⁄_löór_y_
);

71 
èrgë_x_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of5_target_width", "130"));

72 
èrgë_y_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("of5_target_height", "170"));

77 
thªs_dis_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_threshold", "2.0"));

78 
thªs_dis_Ár_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_threshold_far", "1.4"));

79 
Ár_øtio_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("of3_threshold_far_ratio", "0.3"));

80 
thªs_¨ó_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("thres_area", "6400"));

81 
Á˚_dëe˘_Ár_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("face_detect_far", "1")) == 1;

83 i‡(
Ár_øtio_
 > 0.999) {

84 
Ár_øtio_
 = 0.999;

86 i‡(
Ár_øtio_
 < 0.0001) {

87 
Ár_øtio_
 = 0.0001;

90 i‡(
	`©oi
(
cfg_
->
	`gë_vÆue
("face_detect", "0")) == 1) {

92 
od_
 = 
√w
 
	`objdë
(
cfg_
);

93 i‡(!
od_
->
	`lﬂded
()) {

94 
	`log
("WARNING: can'tÜoad meta file\n");

95 
dñëe
 
od_
;

96 
od_
 = 0;

100 
od_
 = 0;

103 i‡(
	`©oi
(
cfg_
->
	`gë_vÆue
("skin_detect", "0")) == 1) {

104 
skö_
 = 
√w
 
	`SköMask
(
cfg_
);

105 
skö_hód_øtio_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("skin_head_ratio", "0.3"));

108 
skö_
 = 0;

111 
kî_
 = (
cv
::
M©_
<>(3, 3) << 0, -1, 0,

115 i‡(
od_
) {

116 
od_max_times_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("face_detect_max_times", "5"));

117 
	`log
("\ã«bÀ od, më®‚ame=%s\n", 
cfg_
->
	`gë_vÆue
("faces_meta_fname", 0));

120 
	`log
("\tdisable od\n");

123 i‡(
skö_
) {

124 
	`log
("\tenable skin detect\n");

127 
	`log
("\tdisable skin detect\n");

130 
Êù≥d_
 = 
Ál£
;

131 i‡(
	`©oi
(
cfg_
->
	`gë_vÆue
("flipped_mode", "0")) == 1) {

132 
Êù≥d_
 = 
åue
;

135 
	`log
("\tÁ˚_dëe˘_Ár: %d\n", 
Á˚_dëe˘_Ár_
);

136 
	`log
("\tÁ˘‹_0=%.3f\n", 
Á˘‹_0_
);

138 
	`log
("\tÁ˘‹_1=%.3f\n", 
Á˘‹_1_
);

139 
	`log
("\tm©ched_¨ó_Á˘‹: %.3f\n", 
m©ched_¨ó_Á˘‹_
);

141 
Á˘‹_y_èbÀs_
 = 
√w
 [
video_height_
];

142 
i
 = 0; i < 
video_height_
; i++) {

143 
Á˘‹_y_èbÀs_
[
i
] = 
	`Á˘‹_y
(i);

146 
max_ª˘_Á˘‹_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("max_rect_factor", "1.1"));

147 i‡(!
	`lﬂd_¨ó_ª˘
("¨ó_max_ª˘", 
¨ó_max_ª˘_
)) {

149 
¨ó_max_ª˘_
.
x
 =áªa_max_ª˘_.
y
 = 0;

150 
¨ó_max_ª˘_
.
width
 =áªa_max_ª˘_.
height
 = 0;

153 
¨ó_mö_ª˘_
.
x
 =áªa_mö_ª˘_.
y
 =áªa_mö_ª˘_.
width
 =áªa_mö_ª˘_.
height
 = 0;

154 i‡(!
	`lﬂd_¨ó_ª˘
("¨ó_mö_ª˘", 
¨ó_mö_ª˘_
)) {

155 
¨ó_mö_ª˘_
.
x
 =áªa_mö_ª˘_.
y
 = 0;

156 
¨ó_mö_ª˘_
.
width
 =áªa_mö_ª˘_.
height
 = 0;

159 
up_¨ó_tﬁî™˚_Á˘‹_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("up_area_tolerance_factor", "1.8"));

161 
max_èrgë_¨ó_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("max_target_area", "10000"));

163 
¨ó_mö_
 = 
¨ó_mö_ª˘_
.
	`¨ó
(), 
¨ó_max_
 = 
¨ó_max_ª˘_
.area();

164 
	`log
("\tmax_ª˘: [%d,%d, %d,%d],áªa=%d\n", 
¨ó_max_ª˘_
.
x
,áªa_max_ª˘_.
y
,áªa_max_ª˘_.
width
,áªa_max_ª˘_.
height
,áªa_max_ª˘_.
	`¨ó
());

165 
	`log
("\tmö_ª˘: [%d,%d, %d,%d],áªa=%d\n", 
¨ó_mö_ª˘_
.
x
,áªa_mö_ª˘_.
y
,áªa_mö_ª˘_.
width
,áªa_mö_ª˘_.
height
,áªa_mö_ª˘_.
	`¨ó
());

167 
xx
[2] = { 
	`CENTER_Y
(
¨ó_mö_ª˘_
), CENTER_Y(
¨ó_max_ª˘_
) };

168 
yy
[2] = { 
	`sqπ
(1.0*
¨ó_mö_ª˘_
.
	`¨ó
()), sqπ(1.0*
¨ó_max_ª˘_
.area()) };

169 ::
	`pﬁyfô
(2, 
xx
, 
yy
, 1, 
Á˘‹_equ©i⁄_¨ó_y_
);

171 
	`log
("\èªa_mö=%d,áªa_max=%d\n", 
¨ó_mö_
, 
¨ó_max_
);

172 
	`log
("\tof3_thªshﬁd=%.1f,Åhªs_dis_èr=%.1f, f¨_øtio=%.3f\n", 
thªs_dis_
, 
thªs_dis_Ár_
, 
Ár_øtio_
);

173 
	`log
("\âhªs_¨ó=%.1f\n", 
thªs_¨ó_
);

174 
	`log
("\tvideÿsize=%d-%d\n", 
video_width_
, 
video_height_
);

176 
	`log
("\èª®Á˘‹: %f, %f\n", 
Á˘‹_equ©i⁄_¨ó_y_
[0], factor_equation_area_y_[1]);

177 
	`log
("\tup_¨ó_tﬁî™˚_Á˘‹: %.3f\n", 
up_¨ó_tﬁî™˚_Á˘‹_
);

178 
	`log
("\tmax_èrgë_¨ó: %.1f\n", 
max_èrgë_¨ó_
);

179 
	`log
("\tmŸi⁄_hi°_dñay: %.2f\n", 
mŸi⁄_hi°_dñay_
);

180 
	`log
("\â¨gë_width: %d,Å¨gë_height: %d\n", 
èrgë_x_
, 
èrgë_y_
);

182 
fú°_
 = 
åue
;

184 
°_˙t_
 = 0;

185 
°_begö_
 = 
	`now
();

186 
°_£g_
 = 
°_begö_
;

187 
Âs_
 = -0.1;

189 
waô_key_
 = 
åue
;

190 
buf
[
MAX_PATH
];

196 
	`log
("\n");

197 
	}
}

199 
	gDëe˘
::~
	$Dëe˘
()

201 
dñëe
 
od_
;

202 
dñëe
 
skö_
;

203 
dñëe
 []
Á˘‹_y_èbÀs_
;

204 
cv
::
	`de°royAŒWödows
();

205 
	}
}

208 
boﬁ
 
like_cú˛e
(c⁄° 
°d
::
ve˘‹
<
cv
::
Poöt
> &
±s
)

212  
Ál£
;

215 
	gDëe˘
::
	$£t_Êù≥d_mode
(
íabÀd
)

218 
Êù≥d_
 = !(
íabÀd
 == 0);

220 
	`log
("INFO: së_Êù≥d_mode:É«bÀ=%d\n", 
Êù≥d_
);

223 
èrgës_
.
	`˛ór
();

224 
	}
}

226 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘
::
	$cuºít_èrgës
()

230 
°d
::
ve˘‹
<
cv
::
Re˘
> 
ªts
;

231 
size_t
 
i
 = 0; i < 
èrgës_
.
	`size
(); i++) {

232 i‡(!
od_
 || 
èrgës_
[
i
].
dëe˘e_°©e_
 == 1) {

233 
ªts
.
	`push_back
(
èrgës_
[
i
].
pos
);

237  
ªts
;

238 
	}
}

240 
	g°d
::
ve˘‹
<
Dëe˘
::
T¨gë
>::
ôî©‹
 Dëe˘::
	$föd_m©ched
(c⁄° 
cv
::
Re˘
 &
rc
, 
dú
)

242 
°d
::
ve˘‹
<
T¨gë
>::
ôî©‹
 
ô
 = 
èrgës_
.
	`begö
();

243 ; 
ô
 !
èrgës_
.
	`íd
(); ++it) {

244 i‡(
	`is_¸oss
(
ô
->
pos
, 
rc
)) {

246 i‡(
dú
 !
UP
 && 
ô
->
pos
.
	`¨ó
(Ë> 
m©ched_¨ó_Á˘‹_
 * 
rc
.area()) {

247 
	`log
(" XXX: %s: maybeá slice motion inÅarget, just discard: dir=%s, old=%d, curr=%d\n",

248 
__FUNCTION__
, 
DúDesc
[
dú
], 
ô
->
pos
.
	`¨ó
(), 
rc
.area());

251  
ô
;

255  
ô
;

256 
	}
}

258 
	gDëe˘
::
mîge_rcs
(c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
rcs
, c⁄° std::ve˘‹<> &
dús
, 
°amp
)

261 
size_t
 
	gi
 = 0; i < 
	gdús
.
size
(); i++) {

262 
	g°d
::
ve˘‹
<
T¨gë
>::
ôî©‹
 
m©ched
 = 
föd_m©ched
(
rcs
[
i
], 
dús
[i]);

263 i‡(
	gm©ched
 =
èrgës_
.
íd
()) {

265 i‡(
dús
[
i
] =
UP
) {

266 i‡(
is_èrgë
(
rcs
[
i
], 
UP
)) {

267 
T¨gë
 
t
;

268 
	gt
.
	gpos
 = 
rcs
[
i
];

269 
	gt
.
	g°amp
 = 
°amp
;

270 
	gt
.
	gupd©ed_˙t
 = 0;

271 
	gt
.
	gdú
 = 
UP
;

272 
	gèrgës_
.
push_back
(
t
);

277 i‡(
	gdús
[
i
] !
UP
) {

278 
èrgës_
.
îa£
(
m©ched
);

282 
	gm©ched
->
	gupd©ed_˙t
++;

283 
	gm©ched
->
	gpos
 |
rcs
[
i
];

285 i‡(
	gm©ched
->
	gpos
.
¨ó
(Ë> 
	gmax_èrgë_¨ó_
) {

286 
log
("WARNING: TOOOO LARGEÅargetárea: [%d,%d, %d-%d],área=%d\n",

287 
rcs
[
i
].
x
,Ñcs[i].
y
,Ñcs[i].
width
,Ñcs[i].
height
, 
m©ched
->
pos
.
¨ó
());

288 
	gèrgës_
.
îa£
(
m©ched
);

296 
boﬁ
 
	$rcs_wôh_dú
(c⁄° 
cv
::
Re˘
 &
r0
, c⁄° cv::Re˘ &
r1
, 
dú
)

299 
boﬁ
 
rc
 = 
Ál£
;

301 
dú
) {

302 
RIGHT
:

303 
rc
 = 
	`CENTER_X
(
r1
Ë> CENTER_X(
r0
);

306 
LEFT
:

307 
rc
 = 
	`CENTER_X
(
r0
Ë> CENTER_X(
r1
);

310 
DOWN
:

311 
rc
 = 
	`CENTER_Y
(
r1
Ë> CENTER_Y(
r0
);

314 
UP
:

315 
rc
 = 
	`CENTER_Y
(
r0
Ë> CENTER_Y(
r1
);

319  
rc
;

320 
	}
}

322 
boﬁ
 
	gDëe˘
::
ToooL¨ge
::
	$›î©‹
()(c⁄° 
Dëe˘
::
T¨gë
 &
t
) const

328 i‡(
t
.
pos
.
	`¨ó
(Ë* 10 < 
∑ª¡_
->
¨ó_max_
) {

329  
Ál£
;

332 
cy
 = 
	`CENTER_Y
(
t
.
pos
);

333 
exp_¨ó
 = 
	`pow
(
∑ª¡_
->
Á˘‹_equ©i⁄_¨ó_y_
[0] +Ö¨ít_->Á˘‹_equ©i⁄_¨ó_y_[1] * 
cy
, 2);

334 
¨ó
 = 
t
.
pos
.
	`¨ó
();

335 
exp_¨ó_2
 = 
∑ª¡_
->
up_¨ó_tﬁî™˚_Á˘‹_
 * 
exp_¨ó
;

337 i‡(
¨ó
 > 
∑ª¡_
->
¨ó_max_
 ||áª®> 
exp_¨ó_2
) {

338 
∑ª¡_
->
	`log
("WARNING: discardÅoooo LARGEÅarget: (%d-%d),Éxp_area=%.1f,Éxp_area_tolerance=%.1f,área=%.1f, max=%d\n",

339 
t
.
pos
.
width
,Å.pos.
height
, 
exp_¨ó
, 
exp_¨ó_2
, 
¨ó
, 
∑ª¡_
->
¨ó_max_
);

340  
åue
;

343  
Ál£
;

344 
	}
}

346 
boﬁ
 
	gDëe˘
::
ToooSmÆl
::
	$›î©‹
()(c⁄° 
Dëe˘
::
T¨gë
 &
t
) const

349  
now_
 - 
t
.
°amp
 > 0.3 &&Å.
pos
.
	`¨ó
(Ë< 
∑ª¡_
->
¨ó_mö_
;

353 i‡(
now_
 - 
t
.
°amp
 > 0.3) {

354 
cy
 = 
	`CENTER_Y
(
t
.
pos
);

355 
exp_¨ó
 = 
∑ª¡_
->
Á˘‹_equ©i⁄_¨ó_y_
[0] +Ö¨ít_->Á˘‹_equ©i⁄_¨ó_y_[1] * 
cy
;

356 
¨ó
 = 
t
.
pos
.
	`¨ó
();

358 i‡(
¨ó
 < 
∑ª¡_
->
¨ó_mö_
 ||áª®< 
exp_¨ó
 / 3) {

359 
∑ª¡_
->
	`log
("WARNING: discardÅoooo SMALLÅarget: (%d-%d),Éxp_area=%.1f,área=%.1f, min=%d\n",

360 
t
.
pos
.
width
,Å.pos.
height
, 
exp_¨ó
/3, 
¨ó
, 
∑ª¡_
->
¨ó_mö_
);

361  
åue
;

365  
Ál£
;

367 
	}
}

369 
	gDëe˘
::
	$ªmove_biggî_smÆÀr
()

372 
ToooL¨ge
 
	`é
(
this
);

373 
èrgës_
.
	`îa£
(
°d
::
	`ªmove_if
—¨gës_.
	`begö
(),Å¨gës_.
	`íd
(), 
é
),Åargets_.end());

377 
	}
}

379 
boﬁ
 
n_ö_ve˘‹
(
n
, c⁄° 
°d
::
ve˘‹
<> &
v
)

381 
°d
::
ve˘‹
<>::
c⁄°_ôî©‹
 
ô
 = 
v
.
begö
(); 
	gô
 !v.
íd
(); ++it) {

382 i‡(
	gn
 =*
ô
) {

383  
åue
;

387  
	gÁl£
;

390 
ölöe
 
boﬁ
 
	$ßme_rc
(c⁄° 
cv
::
Re˘
 &
r0
, c⁄° cv::Re˘ &
r1
)

392  
r0
.
x
 =
r1
.x &&Ñ0.
y
 =r1.y &&Ñ0.
width
 =r1.width &&Ñ0.
height
 ==Ñ1.height;

393 
	}
}

396 
	g°d
::
ve˘‹
<
Dëe˘
::
MŸi⁄s
> Dëe˘::
	$gë_√¨by_mŸi⁄_hi°
(c⁄° 
cv
::
Re˘
 &
rc
, c⁄° 
Dú
 &
dú
)

398 
°d
::
ve˘‹
<
MŸi⁄s
> 
hi°
;

399 
cv
::
Re˘
 
cuº
 = 
rc
;

400 
i
 = 
mŸi⁄_hi°s_
.
	`size
()-1; i >= 0; i--) {

402 i‡(
	`ßme_rc
(
rc
, 
mŸi⁄_hi°s_
[
i
].rcË&& 
dú
 == motion_hists_[i].dir) {

406 i‡(
	`is_¸oss
(
cuº
, 
mŸi⁄_hi°s_
[
i
].
rc
)) {

407 
hi°
.
	`push_back
(
mŸi⁄_hi°s_
[
i
]);

410 
cuº
 = 
mŸi⁄_hi°s_
[
i
].
rc
;

412  
hi°
;

413 
	}
}

415 
boﬁ
 
	gDëe˘
::
	$is_èrgë
(c⁄° 
cv
::
Re˘
 &
rc
, c⁄° 
Dú
 &
dú
)

417 i‡(
mŸi⁄_hi°_dñay_
 < 0.0) {

418  
åue
;

429 
°d
::
ve˘‹
<
MŸi⁄s
> 
hi°
 = 
	`gë_√¨by_mŸi⁄_hi°
(
rc
, 
dú
);

431 i‡(
dú
 =
UP
) {

436 
œ°_down_t›
 = 
video_height_
-1;

437 
size_t
 
i
 = 0; i < 
hi°
.
	`size
(); i++) {

438 i‡(
hi°
[
i
].
dú
 =
DOWN
) {

439 i‡(
hi°
[
i
].
rc
.
y
 < 
œ°_down_t›
) {

440 
œ°_down_t›
 = 
hi°
[
i
].
rc
.
y
;

445 i‡(
debug_
 && 
œ°_down_t›
 < 
video_height_
-1) {

446 
cv
::
	`löe
(
‹igö_
, cv::
	`Poöt
(
rc
.
x
, 
œ°_down_t›
), cv::Poöt‘c.x+rc.
width
,Üa°_down_t›), cv::
	`Sˇœr
(0, 0, 255), 3);

447 
cv
::
	`ª˘™gÀ
(
‹igö_
, 
rc
, cv::
	`Sˇœr
(0, 255, 0), 3);

450 
boﬁ
 
èrgë
 = 
rc
.
y
 < 
œ°_down_t›
;

452 i‡(
debug_
 && !
èrgë
) {

453 
cv
::
	`ª˘™gÀ
(
‹igö_
, 
rc
, cv::
	`Sˇœr
(255, 255, 255), 5);

456 i‡(!
èrgë
) {

457 
	`log
("\t%s: NOTá T¨gë ???Üa°_down_t›=%d, cuº.y=%d\n", 
__FUNCTION__
, 
œ°_down_t›
, 
rc
.
y
);

460  
èrgë
;

463  
åue
;

464 
	}
}

466 
	gDëe˘
::
upd©e_mŸi⁄_hi°
(c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
rcs
, c⁄° std::ve˘‹<> &
dús
)

469 
size_t
 
i
 = 0; 
	gi
 < 
	grcs
.
size
(); i++) {

470 
MŸi⁄s
 
	gm
 = { 
rcs
[
i
], (
Dú
)
dús
[i], 
cuº_°amp_
 };

471 
	gmŸi⁄_hi°s_
.
push_back
(
m
);

475 
	gDëe˘
::
	$ªmove_timeouãd_mŸi⁄_hi°
()

477 
TooooOldofMŸi⁄Hi°
 
	`t
(
cuº_°amp_
, 
mŸi⁄_hi°_dñay_
);

478 
mŸi⁄_hi°s_
.
	`îa£
(
°d
::
	`ªmove_if
(mŸi⁄_hi°s_.
	`begö
(), mŸi⁄_hi°s_.
	`íd
(), 
t
), motion_hists_.end());

479 
	}
}

482 
ßve_humomít
(c⁄° *
‚ame
, 
°d
::
ve˘‹
<
cv
::
M©
> &
gøys
)

485 
FILE
 *
Â
 = 
f›í
(
‚ame
, "at");

486 i‡(
	gÂ
) {

487 
Ârötf
(
Â
, "=============================\n");

489 
size_t
 
	gi
 = 0; i < 
	ggøys
.
size
(); i++) {

490 
	gcv
::
Momíts
 
m
 = 
cv
::
momíts
(
gøys
[
i
]);

491 
	ghu
[7];

492 
	gcv
::
HuMomíts
(
m
, 
hu
);

494 
Ârötf
(
Â
,"[%d-%d]: %.7f, %.7f, %.7f, %.7f, %.7f, %.7f, %.7f\n",

495 
gøys
[
i
].
cﬁs
, gøys[i].
rows
, 
log
(
hu
[0]),Üog(hu[1]),Üog(hu[2]),Üog(hu[3]),Üog(hu[4]),Üog(hu[5]),Üog(hu[6]));

497 
f˛o£
(
Â
);

501 
boﬁ
 
	gDëe˘
::
	$is_Ár
(c⁄° 
cv
::
Re˘
 &
rc
)

503  
	`CENTER_Y
(
rc
Ë/ 
video_height_
 < 
Ár_øtio_
;

504 
	}
}

506 
	gDëe˘
::
	$åy_obje˘_dëe˘
()

509 
°d
::
ve˘‹
<
T¨gë
>::
ôî©‹
 
ô
;

510 
n
 = 0;

511 
ô
 = 
èrgës_
.
	`begö
(); ià!èrgës_.
	`íd
(); 
n
++) {

513 i‡(
cuº_°amp_
 - 
ô
->
°amp
 > 0.1 && it->
dëe˘e_°©e_
 <0 && it->dëe˘e_°©e_ > 0 - 
od_max_times_
) {

514 
°d
::
ve˘‹
<
cv
::
Re˘
> 
Á˚s
;

515 
cv
::
Re˘
 
rc
 = 
ô
->
pos
;

517 i‡(
Á˚_dëe˘_Ár_
 || !
	`is_Ár
(
rc
)) {

519 
t›_dñ
 = 
rc
.
height
 / 5;

520 i‡(
rc
.
y
 >
t›_dñ
) {

521 
rc
.
y
 -
t›_dñ
;

522 
rc
.
height
 +
t›_dñ
;

526 
Ã_dñ
 = 
rc
.
width
 / 12;

527 i‡(
rc
.
x
 >
Ã_dñ
) {

528 
rc
.
x
 -
Ã_dñ
;

529 
rc
.
width
 +
Ã_dñ
;

532 i‡(
rc
.
x
 +Ñc.
width
 + 
Ã_dñ
 < 
‹igö_
.
cﬁs
) {

533 
rc
.
width
 +
Ã_dñ
;

539 
cv
::
M©
 
roi
 = 
	`‹igö_
(
rc
).
	`˛⁄e
();

540 i‡(
od_
->
	`has_Á˚s
(
roi
, 
Á˚s
)) {

541 i‡(
skö_
) {

546 
°d
::
ve˘‹
<
cv
::
Re˘
>::
ôî©‹
 
ôÁ˚
 = 
Á˚s
.
	`begö
(); itÁ˚ !Á˚s.
	`íd
(); ) {

547 
cv
::
Re˘
 
Á˚
 = *
ôÁ˚
;

548 
°d
::
ve˘‹
<°d::ve˘‹<
cv
::
Poöt
> > 
skös
 = 
skö_
->
	`föd_skö_c⁄tours
(
	`roi
(
Á˚
));

550 
¨ós
 = 0;

552 
size_t
 
i
 = 0; i < 
skös
.
	`size
(); i++) {

553 
¨ós
 +
cv
::
	`c⁄tourAªa
(
skös
[
i
]);

555 i‡(
debug_img_
) {

557 
size_t
 
x
 = 0; x < 
skös
[
i
].
	`size
(); x++) {

558 
skös
[
i
][
x
].x +
Á˚
.x;

559 
skös
[
i
][
x
].
y
 +
Á˚
.y;

564 i‡(
debug_img_
) {

566 
cv
::
	`døwC⁄tours
(
roi
, 
skös
, -1, cv::
	`Sˇœr
(0, 0, 255));

570 i‡(
¨ós
 >
Á˚
.
	`¨ó
(Ë* 
skö_hód_øtio_
) {

571 ++
ôÁ˚
;

574 
	`log
("\t%s: skö NOTÉxi° i¿[%d,%d, %d,%d]\n", 
__FUNCTION__
,

575 
rc
.
x
+
Á˚
.x,Ñc.
y
+Á˚.y, fa˚.
width
, fa˚.
height
);

577 
ôÁ˚
 = 
Á˚s
.
	`îa£
(itface);

582 i‡(
Á˚s
.
	`em±y
()) {

583 
ô
->
dëe˘e_°©e_
--;

586 
ô
->
dëe˘e_°©e_
 = 1;

587 
	`log
("\t%s: found fa˚ i¿[%d,%d, %d,%d]\n", 
__FUNCTION__
,

588 
ô
->
pos
.
x
, it->pos.
y
, it->pos.
width
, it->pos.
height
);

590 i‡(
debug_
) {

591 
°d
::
ve˘‹
<
cv
::
Re˘
>::
c⁄°_ôî©‹
 
ô
 = 
Á˚s
.
	`begö
(); ià!Á˚s.
	`íd
(); ++it) {

592 
cv
::
	`ª˘™gÀ
(
roi
, *
ô
, cv::
	`Sˇœr
(0, 255, 255));

598 
ô
->
dëe˘e_°©e_
--;

601 i‡(
debug_img_
) {

602 
‚ame
[128];

603 i‡(
ô
->
dëe˘e_°©e_
 == 1)

604 
	`¢¥ötf
(
‚ame
, (‚ame), "dëlog/èrgë_%u_%d_ok.jpg", 
°_˙t_
, 
n
);

606 
	`¢¥ötf
(
‚ame
, (‚ame), "dëlog/èrgë_%u_%d_%d.jpg", 
°_˙t_
, 
n
, 0 - 
ô
->
dëe˘e_°©e_
);

608 
cv
::
	`imwrôe
(
‚ame
, 
roi
);

613 
ô
->
dëe˘e_°©e_
 = 1;

617 i‡(
ô
->
dëe˘e_°©e_
 <0 - 
od_max_times_
) {

619 
ô
 = 
èrgës_
.
	`îa£
(it);

620 
	`log
("\tobject detection failure!!! justÑemove [%d,%d, %d-%d], chk cnt=%d\n",

621 
ô
->
pos
.
x
, it->pos.
y
, it->pos.
width
, it->pos.
height
, 
od_max_times_
);

624 ++
ô
;

627 
	}
}

629 
	gDëe˘
::
dëe˘
(
cv
::
M©
 &
‹igö
, 
°d
::
ve˘‹
<cv::
Re˘
> &
èrgës
, &
Êù≥d_ödex
)

632 
	gcuº_°amp_
 = 
now
();

633 
	gcuº
 = 
cuº_°amp_
;

635 ++
	g°_˙t_
;

636 
	g‹igö_
 = 
‹igö
;

639 i‡(
	g°_˙t_
 % 100 == 0) {

640 
Âs_
 = 100 / (
cuº
 - 
°_£g_
);

642 
log
("DEBUG: STAT:ávg: %.3ffps,Üast: %.3ffps\n",

643 
°_˙t_
 / (
cuº
 - 
°_begö_
), 
Âs_
);

645 
	g°_£g_
 = 
cuº
;

648 
	gcv
::
cvtCﬁ‹
(
‹igö
, 
gøy_cuº_
, 
cv
::
COLOR_BGR2GRAY
);

651 i‡(
	gfú°_
) {

652 
	ggøy_¥ev_
 = 
gøy_cuº_
.
˛⁄e
();

653 
	gfú°_
 = 
Ál£
;

656 
	gcv
::
imwrôe
("dëlog/dë_s_‹igö.jpg", 
‹igö
);

659 i‡(
	gßve_hi°‹y_
) {

661 
	gcv
::
M©
 &
mx
 = 
‰ames_hi°‹y_
.
¥ev
();

662 
	ggøy_cuº_
.
c›yTo
(
mx
);

663 ++
	g‰ames_hi°‹y_
;

666 i‡(
	gÊù≥d_
) {

667 
	gÊù≥d_ödex
 = 
dëe˘0
(
°_˙t_
, 
‹igö
, 
gøy_¥ev_
, 
gøy_cuº_
);

670 
	g°d
::
ve˘‹
<> 
dús
;

671 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
 = 
dëe˘0
(
°_˙t_
, 
‹igö
, 
gøy_¥ev_
, 
gøy_cuº_
, 
dús
);

673 i‡(
	grcs
.
size
(Ë> 0 || 
	gèrgës_
.size() > 0) {

674 
log
("=================%u ===================\n", 
°_˙t_
);

677 i‡(
	grcs
.
size
() > 0) {

678 
log
("M: dëe˘ FOUND %u mŸi⁄s\n", 
rcs
.
size
());

679 
size_t
 
	gi
 = 0; i < 
	grcs
.
size
(); i++) {

680 
log
("\t#%u, MOTION: %s, [%d,%d, %d-%d]\n",

681 
i
, 
DúDesc
[
dús
[i]], 
rcs
[i].
x
,Ñcs[i].
y
,Ñcs[i].
width
,Ñcs[i].
height
);

683 
log
("\n");

686 i‡(
	gmŸi⁄_hi°_dñay_
 > 0) {

688 
upd©e_mŸi⁄_hi°
(
rcs
, 
dús
);

689 
ªmove_timeouãd_mŸi⁄_hi°
();

692 i‡(
	gdebug_img2_
) {

694 
	g‚ame
[128];

695 c⁄° *
	gdú_°r
[4] = { "right", "down", "left", "up" };

696 
size_t
 
	gi
 = 0; i < 
	grcs
.
size
(); i++) {

697 
¢¥ötf
(
‚ame
, (‚ame), "dëlog/%s_%u_%d.jpg", 
dú_°r
[
dús
[
i
]], 
°_˙t_
, i);

698 
	gcv
::
M©
 
img
 = 
‹igö
(
rcs
[
i
]);

699 
	gcv
::
imwrôe
(
‚ame
, 
img
);

703 
mîge_rcs
(
rcs
, 
dús
, 
cuº
);

706 
TooOld
 
ﬁd
(
cuº
, 
max_duøti⁄_
);

707 
	gèrgës_
.
îa£
(
°d
::
ªmove_if
(
èrgës_
.
begö
(),Å¨gës_.
íd
(), 
ﬁd
),Åargets_.end());

709 i‡(
	god_
) {

710 
åy_obje˘_dëe˘
();

713 
	gèrgës
 = 
cuºít_èrgës
();

714 i‡(
	gèrgës_
.
size
() > 0) {

715 
log
("T:Åhîê¨ê%uÅ¨gës:\n", 
èrgës_
.
size
());

716 
size_t
 
	gi
 = 0; i < 
	gèrgës_
.
size
(); i++) {

717 
	gcv
::
Re˘
 &
rc
 = 
èrgës_
[
i
].
pos
;

718 
log
("\t#%u: TARGET: [%d,%d, %d-%d], duration=%.1f, odstate=%d, update_cnt=%d,área=%d\n",

719 
i
, 
rc
.
x
,Ñc.
y
,Ñc.
width
,Ñc.
height
,

720 
cuº_°amp_
 - 
èrgës_
[
i
].
°amp
,

721 
èrgës_
[
i
].
dëe˘e_°©e_
,

722 
èrgës_
[
i
].
upd©ed_˙t
,

723 
rc
.
¨ó
());

725 
log
("\n");

728 i‡(
	gdebug_
) {

730 c⁄° 
	gcv
::
Sˇœr
 
cﬁ‹s
[4] = { 
cv
::Scalar(255, 0, 0), cv::Scalar(0, 255, 255), cv::Scalar(0, 255, 0), cv::Scalar(0, 0, 255) };

731 
size_t
 
	gi
 = 0; i < 
	grcs
.
size
(); i++) {

732 
	gcv
::
ª˘™gÀ
(
‹igö
, 
rcs
[
i
], 
cﬁ‹s
[
dús
[i]], 1);

737 
	gcv
::
sw≠
(
gøy_cuº_
, 
gøy_¥ev_
);

739 i‡(
	gdebug_
) {

740 i‡(
	gÊù≥d_
) {

741 
	gbuf
[64];

742 
¢¥ötf
(
buf
, (buf), "#%d", 
Êù≥d_ödex
);

743 
	gcv
::
putText
(
‹igö
, 
buf
, 
cv
::
Poöt
(0, 30), cv::
FONT_HERSHEY_PLAIN
, 1.0, cv::
Sˇœr
(0, 0, 255));

746 
døw_¨ó_thªs_öfo
(
‹igö
);

748 
size_t
 
	gi
 = 0; i < 
	gèrgës_
.
size
(); i++) {

750 
	gcv
::
ª˘™gÀ
(
‹igö
, 
èrgës_
[
i
].
pos
, 
cv
::
Sˇœr
(0, 0, 255), 2);

753 i‡(
	gèrgës_
[
i
].
	gdëe˘e_°©e_
 == 1) {

754 
cv
::
cú˛e
(
‹igö
, cv::
Poöt
(
èrgës_
[
i
].
pos
.
x
+èrgës_[i].pos.
width
/2,Å¨gës_[i].pos.
y
+èrgës_[i].pos.
height
/2),

755 5, 
cv
::
Sˇœr
(0, 0, 255), 2);

760 
	gbuf
[64];

761 
¢¥ötf
(
buf
, (buf), "%.03f", 
Âs_
);

766 i‡(
	gwaô_key_
) {

767 
	gcv
::
waôKey
(1);

772 
	gDëe˘
::
	$døw_¨ó_thªs_öfo
(
cv
::
M©
 &
‹igö
)

774 
y°ï
 = 20;

775 
i
 = 
y°ï
; i < 
‹igö
.
rows
; i+=ystep) {

776 
cv
::
	`löe
(
‹igö
, cv::
	`Poöt
(0, 
i
), cv::Poöt(‹igö.
cﬁs
, i), cv::
	`Sˇœr
(255, 255, 255));

777 
öfo
[64];

778 
	`¢¥ötf
(
öfo
, (öfo), "%.0f", 
	`Á˘‹_y
(
i
)*Á˘‹_y(i)*
thªs_¨ó_
);

779 
cv
::
	`putText
(
‹igö
, 
öfo
, cv::
	`Poöt
(0, 
i
), cv::
FONT_HERSHEY_PLAIN
, 1.0, cv::
	`Sˇœr
(255, 255, 255));

781 
	}
}

788 
	gcv
::
M©
 
	$föd_˛u°îs
(c⁄° 
cv
::
M©
 &
m0
, c⁄° cv::
Size
 &
size
, c⁄° 
øtio
 = 0.5)

790 
cv
::
M©
 
öãgøãd
;

791 
cv
::
	`öãgøl
(
m0
, 
öãgøãd
, 
CV_32S
);

793 
dx
 = 
size
.
width
, 
dy
 = size.
height
;

795 
cx
 = (
m0
.
cﬁs
 + 
dx
-1Ë/ dx, 
cy
 = (m0.
rows
 + 
dy
-1) / dy;

797 
cv
::
M©
 
	`ªt
(
cy
, 
cx
, 
CV_8U
);

799 
y
 = 0; y < 
m0
.
rows
; y +
dy
) {

800 i‡(
y
 >
m0
.
rows
Ë
dy
 = m0.rows - (y-1) * dy;

801 
dx
 = 
size
.
width
;

803 *
p
 = 
ªt
.
±r
<>(
y
/
dy
);

805 
x
 = 0; x < 
m0
.
cﬁs
; x +
dx
) {

806 i‡(
x
 >
m0
.
cﬁs
Ë
dx
 = m0.cols - (x-1) * dx;

808 
cv
::
Re˘
 
	`mrc
(
x
, 
y
, 
dx
, 
dy
);

809 
a
 = 
öãgøãd
.
©
<>(
y
, 
x
);

810 
b
 = 
öãgøãd
.
©
<>(
y
+
dy
, 
x
);

811 
c
 = 
öãgøãd
.
©
<>(
y
+
dy
, 
x
+
dx
);

812 
d
 = 
öãgøãd
.
©
<>(
y
, 
x
+
dx
);

814 
sum
 = 
a
 + 
c
 - 
b
 - 
d
;

815 i‡(
sum
 > 
øtio
 * (
dx
 * 
dy
)) {

816 
p
[
x
/
dx
] = 255;

819 
p
[
x
/
dx
] = 0;

824  
ªt
;

825 
	}
}

827 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
Dëe˘
::
	$föd_˛u°îs
(c⁄° 
cv
::
M©
 &
m0
, c⁄° cv::
Size
 &
size0
, c⁄° 
thªshﬁd0
, 
°ïx
, 
°ïy
) const

833 
°d
::
ve˘‹
<
cv
::
Re˘
> 
rcs
;

835 
cv
::
M©
 
öãgøti⁄
, 
m
;

838 
cv
::
	`thªshﬁd
(
m0
, 
m
, 0.5, 1.0, cv::
THRESH_BINARY
);

841 
cv
::
M©
 
m1
 = ::
	`föd_˛u°îs
(
m
, cv::
	`Size
(1, 1));

842 
cv
::
	`imshow
("ii", 
m1
);

844 
cv
::
	`öãgøl
(
m
, 
öãgøti⁄
, 
CV_32S
);

846 
cv
::
	`imshow
("öãgø»image", 
öãgøti⁄
);

848 
	#DX
 5

	)

849 
	#DY
 5

	)

851 
dx
 = 
DX
, 
dy
 = 
DY
;

852 
y
 = 0; y < 
m
.
rows
; y +
dy
) {

853 i‡(
y
 + 
dy
 >
m
.
rows
) dy = m.rows - y;

854 
dx
 = 
DX
;

856 
x
 = 0; x < 
m
.
cﬁs
; x +
dx
) {

857 i‡(
x
 + 
dx
 >
m
.
cﬁs
) dx = m.cols - x;

858 
a
 = 
öãgøti⁄
.
©
<>(
y
, 
x
);

859 
b
 = 
öãgøti⁄
.
©
<>(
y
+
dy
, 
x
);

860 
c
 = 
öãgøti⁄
.
©
<>(
y
+
dy
, 
x
+
dx
);

861 
d
 = 
öãgøti⁄
.
©
<>(
y
, 
x
+
dx
);

863 
sum
 = 
a
 + 
c
 - 
b
 - 
d
;

865 i‡(
sum
 > 
dx
 * 
dy
 / 2) {

866 
rcs
.
	`push_back
(
cv
::
	`Re˘
(
x
, 
y
, 
dx
, 
dy
));

872 
m0
.
	`c⁄vîtTo
(
m
, 
CV_32F
);

873 
cv
::
	`öãgøl
(
m
, 
öãgøti⁄
, 
CV_32F
);

875 
cv
::
	`imshow
("‹igöÆ dis", 
m
);

876 
cv
::
	`imshow
("öãgø»image", 
öãgøti⁄
);

878 
low
, 
high
;

879 
cv
::
	`möMaxIdx
(
m
, &
low
, &
high
);

881 
y
 = 0; y < 
öãgøti⁄
.
rows
; y +
°ïy
) {

882 
sy
 = 
size0
.
height
 * 
	`Á˘‹_y
(
y
);

883 
sx
 = 
sy
;

885 i‡(
y
 + 
sy
 > 
öãgøti⁄
.
rows
)

886 
sy
 = 
öãgøti⁄
.
rows
 - 
y
 - 1;

888 
thªshﬁd
 = 
	`Á˘‹_y
(
y
Ë* 
thªshﬁd0
;

890 
x
 = 0; x+
sx
 <
öãgøti⁄
.
cﬁs
; x +
°ïx
) {

891 
a
 = 
öãgøti⁄
.
©
<>(
cv
::
	`Poöt
(
x
, 
y
));

892 
b
 = 
öãgøti⁄
.
©
<>(
cv
::
	`Poöt
(
x
, 
y
+
sy
));

893 
c
 = 
öãgøti⁄
.
©
<>(
cv
::
	`Poöt
(
x
+
sx
, 
y
+
sy
));

894 
d
 = 
öãgøti⁄
.
©
<>(
cv
::
	`Poöt
(
x
+
sx
, 
y
));

896 
sum
 = 
a
 + 
c
 - 
b
 - 
d
;

897 i‡(
sum
 > 100) {

898 
	`Ârötf
(
°dîr
, "sum: %.3f\n", 
sum
);

901 i‡(
sum
 > 
thªshﬁd
) {

902 
rcs
.
	`push_back
(
cv
::
	`Re˘
(
x
, 
y
, 
sx
, 
sy
));

907  
rcs
;

908 
	}
}

	@sample/libdetect2/det/detect.h

1 #¥agm®
⁄˚


3 
	~<›ícv2/›ícv.hµ
>

5 
	~"../libkvc⁄fig/KVC⁄fig.h
"

6 
	~<time.h
>

7 
	~<c°dio
>

8 
	~<as£π.h
>

9 
	~"objdë.h
"

10 
	~<°d¨g.h
>

12 
	~"pﬁyfô.h
"

13 
	~"SköMask.h
"

14 
	~<li°
>

15 
	~"Hi°‹y.h
"

17 
	#CENTER_X
(
RECT
Ë((RECT).
x
+(RECT).
width
/2)

	)

18 
	#CENTER_Y
(
RECT
Ë((RECT).
y
+(RECT).
height
/2)

	)

20 
	#_USE_MATH_DEFINES


	)

21 
	~<m©h.h
>

23 
	g°d
::
	tve˘‹
<
	tcv
::
	tRe˘
> 
	tRECTS
;

25 
	$_di°™˚
(c⁄° 
cv
::
Poöt2f
 &
p1
, c⁄° cv::Poöt2‡&
p2
)

27  
	`sqπ
(
	`pow
(
p1
.
x
-
p2
.x, 2Ë+Öow’1.
y
-p2.y, 2));

28 
	}
}

31 
	eDú


33 
	mRIGHT
 = 0,

34 
	mDOWN
 = 1,

35 
	mLEFT
 = 2,

36 
	mUP
 = 3,

39 c⁄° *
	gDúDesc
[] = {

44 
ölöe
 
boﬁ
 
	$is_¸oss
(c⁄° 
cv
::
Re˘
 &
rc1
, c⁄° cv::Re˘ &
rc2
)

46  !(
rc1
.
x
+rc1.
width
 <
rc2
.x ||Ñc2.x+rc2.width <rc1.x ||Ñc1.
y
 +Ñc1.
height
 <=Ñc2.y ||Ñc2.y+rc2.height <=Ñc1.y);

47 
	}
}

49 ˛as†
	cDëe˘


51 ˛as†
	cT¨gë


53 
	mpublic
:

54 
T¨gë
()

56 
upd©ed_˙t
 = 0;

57 
	mdëe˘e_°©e_
 = 0;

60 
	mcv
::
Re˘
 
pos
;

61 
	m°amp
;

66 
	mupd©ed_˙t
;

73 
	mdëe˘e_°©e_
;

75 
Dú
 
	mdú
;

79 ˛as†
	cMŸi⁄Re˘
 : 
public
 
T¨gë


81 
Dú
 
dú_
;

83 
	gpublic
:

84 
MŸi⁄Re˘
(c⁄° 
cv
::
Re˘
 &
rc
, 
°amp
, 
Dú
 
dú
)

86 
	gpos
 = 
rc
, 
	gT¨gë
::
°amp
 = sèmp, 
	gdú_
 = 
dú
;

89 c⁄° 
	gcv
::
Re˘
 &
rc
(Ëc⁄° {  
pos
; }

90 
°amp
(Ëc⁄° {  
	gT¨gë
::stamp; }

91 
Dú
 
dú
(Ëc⁄° {  
	gdú_
; }

94 
	g°d
::
li°
<
MŸi⁄Re˘
> 
down_mŸi⁄_ª˘s_
;

97 
	sMŸi⁄s


99 
	gcv
::
Re˘
 
rc
;

100 
Dú
 
	gdú
;

101 
	g°amp
;

103 
	g°d
::
ve˘‹
<
MŸi⁄s
> 
mŸi⁄_hi°s_
;

106 
	sTooooOldofMŸi⁄Hi°


108 
	gnow_
, 
	gdñay_
;

110 
TooooOldofMŸi⁄Hi°
(
now
, 
dñay
)

112 
	gnow_
 = 
now
, 
	gdñay_
 = 
dñay
;

115 
boﬁ
 
›î©‹
()(c⁄° 
	gMŸi⁄s
 &
	gm
) const

117  
	gnow_
 - 
	gm
.
	g°amp
 > 
	gdñay_
;

121 
boﬁ
 
	gÊù≥d_
;

124 
	g°d
::
	tve˘‹
<
	tT¨gë
> 
	tTARGETS
;

125 
TARGETS
 
	gèrgës_
;

127 
	sTooOld


129 
	g¥iv©e
:

130 
now_
;

131 
	gduøti⁄_
;

133 
	gpublic
:

134 
TooOld
(
now
, 
duøti⁄
 = 30.0)

136 
now_
 = 
now
;

137 
	gduøti⁄_
 = ()
duøti⁄
;

140 
boﬁ
 
›î©‹
 ()(c⁄° 
	gT¨gë
 &
	gt
) const

142  
	gnow_
 - 
	gt
.
	g°amp
 > 
	gduøti⁄_
;

146 ˛as†
	cToooL¨ge


148 
	g¥iv©e
:

149 
Dëe˘
 *
∑ª¡_
;

151 
	gpublic
:

152 
ToooL¨ge
(
Dëe˘
 *
dë
): 
∑ª¡_
(det) {}

153 
boﬁ
 
›î©‹
()(c⁄° 
T¨gë
 &
t
) const;

155 
‰õnd
 
˛ass
 
	gToooL¨ge
;

157 ˛as†
	cToooSmÆl


159 
	g¥iv©e
:

160 
Dëe˘
 *
∑ª¡_
;

161 
	gnow_
;

163 
	gpublic
:

164 
ToooSmÆl
(
Dëe˘
 *
dë
, 
now
): 
∑ª¡_
(dë), 
now_
(now) {}

165 
boﬁ
 
›î©‹
()(c⁄° 
	gT¨gë
 &
	gt
) const;

167 
‰õnd
 
˛ass
 
	gToooSmÆl
;

169 
	gcv
::
M©
 
kî_
;

171 
objdë
 *
	god_
;

172 
	god_max_times_
;

174 
SköMask
 *
	gskö_
;

175 
	gskö_hód_øtio_
;

177 
boﬁ
 
	gfú°_
;

178 
	gcv
::
M©
 
gøy_¥ev_
, 
	ggøy_cuº_
;

180 
size_t
 
	g°_˙t_
;

181 
	g°_begö_
, 
	g°_£g_
;

182 
	gÂs_
;

184 
	gÁ˘‹_equ©i⁄_x_
[3], 
	gÁ˘‹_equ©i⁄_y_
[3];

185 
	gÁ˘‹_equ©i⁄_löór_y_
[2];

186 
	gÁ˘‹_equ©i⁄_¨ó_y_
[2];

188 
boﬁ
 
	gwaô_key_
;

190 
	gmax_duøti⁄_
;

191 
	gmö_upd©ed_
;

192 
	gmö_upd©ed_dñay_
;

193 
	gm©ched_¨ó_Á˘‹_
;

194 
	gup_¨ó_tﬁî™˚_Á˘‹_
;

196 
	gmŸi⁄_hi°_dñay_
;

198 
boﬁ
 
	gßve_hi°‹y_
;

199 
	gèrgë_x_
, 
	gèrgë_y_
;

201 
	gpublic
:

202 
Dëe˘
(
KVC⁄fig
 *
cfg
);

203 
	gvútuÆ
 ~
Dëe˘
();

205 
vútuÆ
 
	$£t_∑øm
(
thªs_dis
, 
thªs_¨ó
, 
Á˘‹0
, 
Á˘‹05
)

208 
thªs_¨ó_
 = 
thªs_¨ó
;

210 
Á˘‹_0_
 = 
Á˘‹0
;

214 
	`pﬁyfô_löór
(
Á˘‹_0_
, 
Á˘‹_1_
, 
Á˘‹_equ©i⁄_löór_y_
);

215 
	}
}

217 
£t_Êù≥d_mode
(
íabÀd
);

218 
	g°d
::
ve˘‹
<
cv
::
Re˘
> 
cuºít_èrgës
();

219 
vútuÆ
 
dëe˘
(
cv
::
M©
 &
‹igö
, 
°d
::
ve˘‹
<cv::
Re˘
> &
èrgës
, &
Êù≥d_ödex
);

221 (*
log
)(c⁄° *
fmt
, ...);

231 
°d
::
ve˘‹
<
cv
::
Re˘
> 
	`föd_˛u°îs
(c⁄° cv::
M©
 &
m
, c⁄° cv::
Size
 &
size
 = cv::
	`Size
(100, 100), c⁄° 
thªshﬁd
 = 2500,

232 
°ïx
 = 4, 
°ïy
 = 4) const;

234 
¥Ÿe˘ed
:

236 
vútuÆ
 
°d
::
ve˘‹
<
cv
::
Re˘
> 
	`dëe˘0
(
size_t
 
°_˙t
, cv::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
, cv::ve˘‹<> &
dús
)

238  
°d
::
ve˘‹
<
cv
::
Re˘
>();

239 
	}
}

240 
vútuÆ
 
	$dëe˘0
(
size_t
 
°_˙t
, 
cv
::
M©
 &
‹igö
, cv::M© &
gøy_¥ev
, cv::M© &
gøy_cuº
Ë{  -1; 
	}
};

242 
døw_¨ó_thªs_öfo
(
cv
::
M©
 &
‹igö
);

246 
ölöe
 
	$di°™˚
(
x1
, 
y1
, 
x2
, 
y2
)

248  ()
	`sqπ
(()(
x2
-
x1
Ë* (x2-x1Ë+ (
y2
-
y1
) * (y2-y1));

249 
	}
}

251 
KVC⁄fig
 *
	gcfg_
;

252 
	gdebug_
, 
	gdebug_log_
, 
	gdebug_img_
, 
	gdebug_img2_
;

253 
	gvideo_width_
, 
	gvideo_height_
;

254 
	gcv
::
M©
 
‹igö_
;

255 
	gÁ˘‹_0_
, 
	gÁ˘‹_1_
;

256 
	gthªs_dis_
, 
	gthªs_dis_Ár_
, 
	gthªs_¨ó_
, 
	gthªs_Êù≥d_dis_
;

257 
	gÁr_øtio_
;

258 
boﬁ
 
	gÁ˚_dëe˘_Ár_
;

259 *
	gÁ˘‹_y_èbÀs_
;

260 
	gcv
::
Re˘
 
¨ó_mö_ª˘_
, 
	g¨ó_max_ª˘_
;

261 
	g¨ó_max_
, 
	g¨ó_mö_
;

262 
	gmax_ª˘_Á˘‹_
;

263 
	gcuº_°amp_
;

264 
	gmax_èrgë_¨ó_
;

265 
	gHi°‹y
<
	gcv
::
M©
> 
‰ames_hi°‹y_
;

268 
	gcv
::
Size
 
	$e°_èrgë_size
(
y
)

270  
cv
::
	`Size
(()(
èrgë_x_
 * 
	`Á˘‹_y
(
y
)), ()(
èrgë_y_
 * factor_y(y)));

271 
	}
}

273 (*
log_öô
)(c⁄° *
‚ame
);

275 
boﬁ
 
	`is_Ár
(c⁄° 
cv
::
Re˘
 &
rc
);

277 
	$now
() const

279 
timevÆ
 
tv
;

281  
tv
.
tv_£c
 +Åv.
tv_u£c
/1000000.0;

282 
	}
}

295 
	$pﬁyfô_löór
(
f0
, 
f1
, *
Á˘‹s
)

297 
xx
[2] = { 0, 
video_height_
 };

298 
yy
[2] = { 
f0
, 
f1
 };

299 ::
	`pﬁyfô
(2, 
xx
, 
yy
, 1, 
Á˘‹s
);

300 
	}
}

302 
	$Á˘‹_y
(
y
) const

323  
Á˘‹_equ©i⁄_löór_y_
[0] + fa˘‹_equ©i⁄_löór_y_[1] * 
y
;

324 
	}
}

326 
	g¥iv©e
:

327 
åy_obje˘_dëe˘
();

328 
mîge_rcs
(c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
rcs
, c⁄° std::ve˘‹<> &
dús
, 
°amp
);

329 
ªmove_biggî_smÆÀr
();

330 
ªmove_up_of_œ°_mŸi⁄
(
°d
::
ve˘‹
<
cv
::
Re˘
> &
rcs
, std::ve˘‹<> &
dús
);

331 
	g°d
::
ve˘‹
<
T¨gë
>::
ôî©‹
 
föd_m©ched
(c⁄° 
cv
::
Re˘
 &
rc
, 
dú
);

332 
boﬁ
 
is_èrgë
(c⁄° 
cv
::
Re˘
 &
rc
, c⁄° 
Dú
 &
dú
);

333 
boﬁ
 
	$lﬂd_¨ó_ª˘
(c⁄° *
key
, 
cv
::
Re˘
 &
rc
)

335 c⁄° *
v
 = 
cfg_
->
	`gë_vÆue
(
key
, 0);

336 
À·
, 
t›
, 
right
, 
bŸtom
;

337 i‡(
v
 && 4 =
	`ssˇnf
(v, "(%d,%d),(%d,%d)", &
À·
, &
t›
, &
right
, &
bŸtom
)) {

338 
rc
 = 
cv
::
	`Re˘
(cv::
	`Poöt
(
À·
, 
t›
), cv::Poöt(
right
, 
bŸtom
));

339  
åue
;

342  
Ál£
;

343 
	}
}

344 
upd©e_mŸi⁄_hi°
(c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
rcs
, c⁄° std::ve˘‹<> &
dús
);

345 
ªmove_timeouãd_mŸi⁄_hi°
();

346 
	g°d
::
ve˘‹
<
MŸi⁄s
> 
gë_√¨by_mŸi⁄_hi°
(c⁄° 
cv
::
Re˘
 &
rc
, c⁄° 
Dú
 &
d
);

349 
	g°d
::
°rög
 
_log_‚ame
;

350 
	$log_fûe
(c⁄° *
fmt
, ...)

352 
va_li°
 
¨gs
;

353 
buf
[1024];

355 
	`va_°¨t
(
¨gs
, 
fmt
);

356 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

357 
	`va_íd
(
¨gs
);

359 
FILE
 *
Â
 = 
	`f›í
(
_log_‚ame
.
	`c_°r
(), "at");

360 i‡(
Â
) {

361 
time_t
 
now
 = 
	`time
(0);

362 
tm
 *
±m
 = 
	`loˇ…ime
(&
now
);

365 
	`f˛o£
(
Â
);

367 
	}
}

369 
	$log_öô_fûe
(c⁄° *
‚ame
)

371 
_log_‚ame
 = 
‚ame
;

372 
FILE
 *
Â
 = 
	`f›í
(
‚ame
, "w");

373 i‡(
Â
) {

374 
	`Ârötf
(
Â
, "------Üog begin ---------\n");

375 
	`f˛o£
(
Â
);

377 
	}
}

379 
	$log_dummy
(c⁄° *
fmt
, ...)

381 ()
fmt
;

382 
	}
}

384 
	$log_öô_dummy
(c⁄° *
nŸu£d
)

386 ()
nŸu£d
;

387 
	}
}

	@sample/libdetect2/det/detect_main.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<›ícv2/›ícv.hµ
>

7 
	~"Dëe˘WôhOF.h
"

8 
	~"Dëe˘WôhOF2.h
"

9 
	~"Dëe˘WôhOF3.h
"

10 
	~"Dëe˘WôhOF4.h
"

11 
	~"Dëe˘WôhCT.h
"

12 
	~"Dëe˘WôhOF5.h
"

13 
	~"dëe˘_maö.h
"

14 
	~<deque
>

18 
	sCtx


20 
KVC⁄fig
 *
	mcfg_
;

21 
Dëe˘
 *
	mdëe˘‹_
;

22 
	m°d
::
ve˘‹
<
cv
::
Re˘
> 
°udíts_ª˘s
;

23 
	mcv
::
M©
 
mask_
;

24 
boﬁ
 
	mmasked_
;

25 
boﬁ
 
	mÊù≥d_
;

27 
Ctx
(c⁄° *
cfg_«me
)

29 
	mcfg_
 = 
√w
 
KVC⁄fig
(
cfg_«me
);

30 
	ma_mode
 = 
©oi
(
cfg_
->
gë_vÆue
("a_mode", "1"));

31 i‡(
	ma_mode
 == 1) {

35 i‡(
a_mode
 == 0) {

37 
dëe˘‹_
 = 
√w
 
Dëe˘WôhOF3
(
cfg_
);

39 i‡(
	ma_mode
 == -1) {

41 
dëe˘‹_
 = 
√w
 
Dëe˘WôhOF2
(
cfg_
);

43 i‡(
	ma_mode
 == 2) {

45 
dëe˘‹_
 = 
√w
 
Dëe˘WôhCT
(
cfg_
);

47 i‡(
	ma_mode
 == 4) {

48 
dëe˘‹_
 = 
√w
 
Dëe˘WôhOF4
(
cfg_
);

50 i‡(
	ma_mode
 == 5) {

51 
dëe˘‹_
 = 
√w
 
Dëe˘WôhOF5
(
cfg_
);

55 
¥ötf
("wrong mode\n");

56 
exô
(-1);

59 
	mmasked_
 = 
buûd_mask
(
mask_
);

60 
	mÊù≥d_
 = 
Ál£
;

63 ~
Ctx
()

65 
dñëe
 
	mdëe˘‹_
;

68 c⁄° 
	m°d
::
ve˘‹
<
cv
::
Re˘
> &
dëe˘
(cv::
M©
 &
‰ame
, &
Êù≥d_idx
);

70 
	m¥iv©e
:

71 
boﬁ
 
buûd_mask
(
cv
::
M©
 &
mask
)

73 
boﬁ
 
masked
 = 
Ál£
;

75 c⁄° *
	m±s
 = 
cfg_
->
gë_vÆue
("calibration_data", 0);

76 
	m°d
::
ve˘‹
<
cv
::
Poöt
> 
poöts
;

78 i‡(
	m±s
) {

79 *
	md©a
 = 
°rdup
(
±s
);

80 *
	mp
 = 
°πok
(
d©a
, ";");

81 
	mp
) {

83 
	mx
, 
	my
;

84 i‡(
ssˇnf
(
p
, "%d,%d", &
x
, &
y
) == 2) {

85 
cv
::
Poöt
 
±
(
x
, 
y
);

86 
	mpoöts
.
push_back
(
±
);

89 
	mp
 = 
°πok
(0, ";");

91 
‰ì
(
d©a
);

94 i‡(
	mpoöts
.
size
() > 3) {

95 
	mn
 = 
poöts
.
size
();

96 
	mcv
::
ve˘‹
<
cv
::
Poöt
> 
±s
;

97 
	mi
 = 0; i < 
	mn
; i++) {

98 
	m±s
.
push_back
(
poöts
[
i
]);

101 
	mmask
 = 
cv
::
M©
::
zîos
(cv::
Size
(
©oi
(
cfg_
->
gë_vÆue
("video_width", "480")),átoi(cfg_->gë_vÆue("video_height", "270"))), 
CV_8UC3
);

103 
	m°d
::
ve˘‹
<
°d
::ve˘‹<
cv
::
Poöt
> > 
±ss
;

104 
	m±ss
.
push_back
(
±s
);

105 
	mcv
::
fûlPﬁy
(
mask
, 
±ss
, 
cv
::
Sˇœr
(255, 255, 255));

107 
	mmasked
 = 
åue
;

110  
	mmasked
;

115 *
	$dë_›í
(c⁄° *
cfg_«me
)

117 
Ctx
 *
˘x
 = 
√w
 
	`Ctx
(
cfg_«me
);

120 
	`SëThªadPri‹ôy
(
	`GëCuºítThªad
(), 
THREAD_PRIORITY_TIME_CRITICAL
);

123  
˘x
;

124 
	}
}

126 
	$dë_˛o£
(*
ös
)

128 
Ctx
 *
˘x
 = (Ctx*)
ös
;

129 
dñëe
 
˘x
;

130 
	}
}

132 c⁄° 
	g_buf_size
 = 4096;

133 *
	g_buf
 = (*)
mÆloc
(
_buf_size
);

134 c⁄° *
	g_¥e
 = "{ \"stamp\":12345, \"rect\":[";

136 c⁄° *
	$dë_dëe˘
(*
dë
, 
zifImage
 *
img
)

138 
Ctx
 *
˘x
 = (Ctx*)
dë
;

140 
cv
::
M©
 
	`‰ame
(
img
->
height
, img->
width
, 
CV_8UC3
, img->
d©a
[0], img->
°ride
[0]);

141 
idx
 = -1;

142 c⁄° 
°d
::
ve˘‹
<
cv
::
Re˘
> &
rcs
 = 
˘x
->
	`dëe˘
(
‰ame
, 
idx
);

144 
	`°r˝y
(
_buf
, 
_¥e
);

145 
boﬁ
 
fú°
 = 
åue
;

146 
°d
::
ve˘‹
<
cv
::
Re˘
>::
c⁄°_ôî©‹
 
ô
 = 
rcs
.
	`begö
(); ià!rcs.
	`íd
(); ++it) {

147 i‡(!
fú°
) {

148 
	`°rˇt
(
_buf
, ",");

151 
fú°
 = 
Ál£
;

154 
tmp
[128];

155 
	`¢¥ötf
(
tmp
, —mp), "{\"x\":%d, \"y\":%d, \"width\":%d, \"height\":%d}", 
ô
->
x
, it->
y
, it->
width
, it->
height
);

156 
	`°rˇt
(
_buf
, 
tmp
);

158 
	`°rˇt
(
_buf
, " ]");

160 i‡(
åue
) {

161 
tmp
[64];

162 
	`¢¥ötf
(
tmp
, —mp), ", \"Êù≥d_idx\": %d", 
idx
);

163 
	`°rˇt
(
_buf
, 
tmp
);

166 
	`°rˇt
(
_buf
, "}");

168  
_buf
;

169 
	}
}

171 
	$dë_£t_∑øm
(*
dë
, 
thªs_dis
, 
thªs_¨ó
, 
Á˘‹_0
, 
Á˘‹_05
, 
nŸu£d
)

173 
Ctx
 *
˘x
 = (Ctx*)
dë
;

175 
˘x
->
dëe˘‹_
->
	`£t_∑øm
(
thªs_dis
, 
thªs_¨ó
, 
Á˘‹_0
, 
Á˘‹_05
);

176 
	}
}

179 c⁄° 
	g°d
::
ve˘‹
<
cv
::
Re˘
> &
Ctx
::
	$dëe˘
(
cv
::
M©
 &
‰ame
, &
Êù≥d_idx
)

181 i‡(
masked_
 && !
Êù≥d_
) {

182 
cv
::
	`bôwi£_™d
(
‰ame
, 
mask_
, frame);

185 
dëe˘‹_
->
	`dëe˘
(
‰ame
, 
°udíts_ª˘s
, 
Êù≥d_idx
);

187  
°udíts_ª˘s
;

188 
	}
}

190 
	$dë_íabÀ_gpu
(*
dë
, 
íabÀd
)

192 
	}
}

194 
	$dë_£t_Êù≥d_mode
(*
dë
, 
íabÀd
)

196 
Ctx
 *
˘x
 = (Ctx*)
dë
;

197 
˘x
->
Êù≥d_
 = 
íabÀd
 == 1;

198 
˘x
->
dëe˘‹_
->
	`£t_Êù≥d_mode
(
íabÀd
);

199 
	}
}

201 
	$dë_sour˚_°©s
(*
dë
, 
tŸÆ
, 
lo°
, 
≥ndög
, 
ˇched
)

203 
Ctx
 *
˘x
 = (Ctx*)
dë
;

204 
˘x
->
dëe˘‹_
->
	`log
("sour˚ sèts: %d, %d, %d, %d\n", 
tŸÆ
, 
lo°
, 
≥ndög
, 
ˇched
);

205 
	}
}

	@sample/libdetect2/det/detect_main.h

1 #i‚de‡
DETECT_MAIN_H__


2 
	#DETECT_MAIN_H__


	)

4 
	szifImage


7 
	mwidth
;

8 
	mheight
;

9 *
	md©a
[4];

10 
	m°ride
[4];

12 
	m°amp
;

14 *
	möã∫Æ_±r
;

15 } 
	tzifImage
;

17 
dë_˛o£
(*
ös
);

18 c⁄° *
dë_dëe˘
(*
dë
, 
zifImage
 *
img
);

19 *
dë_›í
(c⁄° *
cfg_«me
);

20 
dë_£t_Êù≥d_mod
(*
dë
, 
íabÀd
);

21 
dë_£t_∑øm
(*
dë
, 
thªs_dis
, 
thªs_¨ó
, 
Á˘‹_0
, 
Á˘‹_05
, 
nŸu£d
);

22 
dë_sour˚_°©s
(*
dë
, 
tŸÆ
, 
lo°
, 
≥ndög
, 
ˇched
);

	@sample/libdetect2/det/objdet.cpp

1 
	~"objdë.h
"

3 
	gobjdë
::
	$objdë
(
KVC⁄fig
 *
cfg
)

4 : 
	$cfg_
(
cfg
)

6 
lﬂded_
 = 
Ál£
;

8 c⁄° *
‚ame
 = 
cfg_
->
	`gë_vÆue
("faces_meta_fname", "data/faces_18_18.xml");

9 
lﬂded_
 = 
dë_Á˚s_
.
	`lﬂd
(
‚ame
);

11 
debug2_
 = 0;

12 i‡(
	`©oi
(
cfg_
->
	`gë_vÆue
("debug", "0")) == 1) {

13 
debug2_
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("debug2", "0"));

15 
	}
}

17 
	gobjdë
::~
	$objdë
()

19 
	}
}

21 
boﬁ
 
objdë
::
has_Á˚s
(c⁄° 
cv
::
M©
 &
‹igö
, 
°d
::
ve˘‹
<cv::
Re˘
> &
Á˚s
)

24 i‡(!
lﬂded_
) {

25  
Ál£
;

28 c⁄° 
	gdx
 = 2.0, 
	gdy
 = 2.0;

30 
	gcv
::
M©
 
gøy
;

31 
	gcv
::
cvtCﬁ‹
(
‹igö
, 
gøy
, 
cv
::
COLOR_BGR2GRAY
);

32 
	gcv
::
ªsize
(
gøy
, gøy, 
cv
::
Size
(gøy.
cﬁs
 * 
dx
, gøy.
rows
 * 
dy
));

33 
	gdë_Á˚s_
.
dëe˘Mu…iSˇÀ
(
gøy
, 
Á˚s
);

35 
	g°d
::
ve˘‹
<
cv
::
Re˘
>::
ôî©‹
 
ô
 = 
Á˚s
.
begö
(); 
	gô
 !Á˚s.
íd
(); ++it) {

36 i‡(
	gdebug2_
) {

37 
	gcv
::
ª˘™gÀ
(
gøy
, *
ô
, 
cv
::
Sˇœr
(255, 255, 255));

40 
	gô
->
	gx
 /
dx
, it->
	gy
 /
dy
;

41 
	gô
->
	gwidth
 /
dx
, it->
	gheight
 /
dy
;

44 i‡(
	gdebug2_
) {

45 
	gcv
::
imshow
("ªcognize", 
gøy
);

48  !
	gÁ˚s
.
em±y
();

	@sample/libdetect2/det/objdet.h

1 #¥agm®
⁄˚


3 
	~<›ícv2/›ícv.hµ
>

5 
	~"../libkvc⁄fig/KVC⁄fig.h
"

9 ˛as†
	cobjdë


11 
KVC⁄fig
 *
	mcfg_
;

12 
	mcv
::
CasˇdeCœssifõr
 
dë_Á˚s_
;

13 
boﬁ
 
	mlﬂded_
;

14 
	mdebug2_
;

16 
	mpublic
:

17 
objdë
(
KVC⁄fig
 *
cfg
);

18 
	mvútuÆ
 ~
objdë
();

20 
boﬁ
 
	$lﬂded
(Ëc⁄° {  
lﬂded_
; }

21 
boﬁ
 
	`has_Á˚s
(c⁄° 
cv
::
M©
 &
img
, 
°d
::
ve˘‹
<cv::
Re˘
> &
Á˚s
);

22 
	}
};

	@sample/libdetect2/det/polyfit.cpp

1 
	~<m©h.h
>

3 
	$gauss_sﬁve
(
n
,
A
[],
x
[],
b
[])

5 
i
,
j
,
k
,
r
;

6 
max
;

7 
k
 = 0; k < 
n
-1; k++) {

8 
max
 = 
	`Ábs
(
A
[
k
*
n
+k]);

9 
r
 = 
k
;

10 
i
 = 
k
 + 1; i < 
n
-1; i++) {

11 i‡(
max
 < 
	`Ábs
(
A
[
i
*
n
+i])) {

12 
max
 = 
	`Ábs
(
A
[
i
*
n
+i]);

13 
r
=
i
;

17 i‡(
r
 !
k
) {

18 
i
 = 0; i < 
n
; i++) {

19 
max
 = 
A
[
k
*
n
+
i
];

20 
A
[
k
*
n
+
i
] = A[
r
*n+i];

21 
A
[
r
*
n
+
i
] = 
max
;

25 
max
 = 
b
[
k
];

26 
b
[
k
] = b[
r
];

27 
b
[
r
] = 
max
;

28 
i
 = 
k
+1; i<
n
; i++) {

29 
j
 = 
k
+1; j < 
n
; j++)

30 
A
[
i
*
n
+
j
] -A[i*n+
k
] * A[k*n+j] / A[k*n+k];

31 
b
[
i
] -
A
[i*
n
+
k
] * b[k] / A[k*n+k];

35 
i
 = 
n
-1; i >0; 
x
[i] /
A
[i*n+i], i--) {

36 
j
 = 
i
+1, 
x
[i] = 
b
[i]; j<
n
; j++) {

37 
x
[
i
] -
A
[i*
n
+
j
] * x[j];

40 
	}
}

47 
	$pﬁyfô
(
n
, 
x
[], 
y
[], 
pﬁy_n
, 
a
[])

49 
i
,
j
;

50 *
ãmpx
, *
ãmpy
, *
sumxx
, *
sumxy
, *
©a
;

52 
ãmpx
 = 
√w
 [
n
];

53 
sumxx
 = 
√w
 [
pﬁy_n
*2+1];

54 
ãmpy
 = 
√w
 [
n
];

55 
sumxy
 = 
√w
 [
pﬁy_n
+1];

56 
©a
 = 
√w
 [(
pﬁy_n
+1)*(poly_n+1)];

115 
i
 = 0; i < 
n
; i++) {

116 
ãmpx
[
i
] = 1;

117 
ãmpy
[
i
] = 
y
[i];

120 
i
 = 0; i < 2*
pﬁy_n
 + 1; i++) {

121 
sumxx
[
i
] = 0;

122 
j
 = 0; j < 
n
; j++) {

123 
sumxx
[
i
] +
ãmpx
[
j
];

124 
ãmpx
[
j
] *
x
[j];

128 
i
 = 0; i < 
pﬁy_n
+1; i++) {

129 
sumxy
[
i
] = 0;

130 
j
 = 0; j < 
n
; j++) {

131 
sumxy
[
i
] +
ãmpy
[
j
];

132 
ãmpy
[
j
] *
x
[j];

137 
i
 = 0; i < 
pﬁy_n
+1; i++) {

138 
j
 = 0; j < 
pﬁy_n
+1; j++) {

139 
©a
[
i
 * (
pﬁy_n
 + 1Ë+ 
j
] = 
sumxx
[i + j];

143 
	`gauss_sﬁve
(
pﬁy_n
+1, 
©a
 , 
a
, 
sumxy
);

145 
dñëe
 []
ãmpx
;

146 
dñëe
 []
sumxx
;

147 
dñëe
 []
ãmpy
;

148 
dñëe
 []
sumxy
;

149 
dñëe
 []
©a
;

150 
	}
}

	@sample/libdetect2/det/polyfit.h

1 #¥agm®
⁄˚


3 
pﬁyfô
(
n
, 
x
[], 
y
[], 
pﬁy_n
, 
a
[]);

	@sample/libdetect2/libimagesource/VideoSourceBase.h

1 #¥agm®
⁄˚


5 
	~<cc++/thªad.h
>

6 
	~<°rög
>

7 
	~<deque
>

8 
	~<as£π.h
>

9 
	~"image_sour˚.h
"

12 
	~<libavcodec/avcodec.h
>

15 ˛as†
	cVideoSour˚Ba£
 : 
o°
::
Thªad


17 
boﬁ
 
quô_
;

18 
o°
::
Sem≠h‹e
 
£m_pics_
;

19 
o°
::
Evít
 
quô_evt_
;

20 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

21 
IMAGES
 
fifo_
, 
ˇched_
;

22 
o°
::
Muãx
 
cs_fifo_
, 
cs_ˇched_
;

23 
boﬁ
 
∑u£d_
;

25 
public
:

26 
	$VideoSour˚Ba£
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
)

28 
fmt_
 = *
fmt
;

29 
uæ_
 = 
uæ
;

31 
quô_
 = 
åue
;

34 ~
	$VideoSour˚Ba£
()

36 
	}
}

39 
	$°¨t
()

41 i‡(
quô_
) {

42 
quô_
 = 
Ál£
;

43 
∑u£d_
 = 
Ál£
;

44 
o°
::
Thªad
::
	`°¨t
();

49 
	}
}

52 
	$°›
()

54 i‡(!
quô_
) {

55 
quô_
 = 
åue
;

57 
	`joö
();

59 
	`‰ì_Æl
();

64 
	}
}

67 
zifImage
 *
	$√xt_img
()

69  
	`√xt_image
();

70 
	}
}

73 
	$‰ì_img
(
zifImage
 *
img
)

75 
	`‰ì_image
(
img
);

76 
	}
}

79 
	$∑u£
()

81 
∑u£d_
 = 
åue
;

82 
	`∑u£_§c
();

83 
	}
}

86 
	$ªsume
()

88 
	`ªsume_§c
();

89 
∑u£d_
 = 
Ál£
;

90 
	}
}

92 
¥Ÿe˘ed
:

93 
°d
::
°rög
 
uæ_
;

94 
img§c_f‹m©
 
fmt_
;

97 
vútuÆ
 
›í_§c
() = 0;

100 
vútuÆ
 
˛o£_§c
() = 0;

102 
vútuÆ
 
	$∑u£_§c
(Ë{
	}
}

103 
vútuÆ
 
	$ªsume_§c
(Ë{
	}
}

106 
vútuÆ
 
gë_§c
(
zifImage
 *
img
) = 0;

108 
zifImage
 *
	$√xt_image
()

110 i‡(
∑u£d_
) {

115 i‡(
£m_pics_
.
	`waô
(300)) {

116 
	`as£π
(!
fifo_
.
	`em±y
());

118 
o°
::
MuãxLock
 
	`Æ
(
cs_fifo_
);

119 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

120 
fifo_
.
	`p›_‰⁄t
();

121  
img
;

126 
	}
}

128 
	$‰ì_image
(
zifImage
 *
img
)

131 
o°
::
MuãxLock
 
	`Æ
(
cs_ˇched_
);

132 
ˇched_
.
	`size
() > 10) {

133 
zifImage
 *
image
 = 
ˇched_
.
	`‰⁄t
();

134 
ˇched_
.
	`p›_‰⁄t
();

135 
	`dñ_zifImage
(
image
);

138 
ˇched_
.
	`push_back
(
img
);

139 
	}
}

141 
¥iv©e
:

142 
	$dñ_zifImage
(
zifImage
 *
img
)

144 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

145 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

146 
dñëe
 
img
;

147 
	}
}

149 
zifImage
 *
	$√w_zifImage
()

151 
zifImage
 *
img
 = 
√w
 zifImage;

152 
img
->
fmt_ty≥
 = 
fmt_
.
fmt
;

153 
img
->
width
 = 
fmt_
.width;

154 
img
->
height
 = 
fmt_
.height;

155 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

156 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
fmt_
.
fmt
, fmt_.
width
, fmt_.
height
);

158 
i
 = 0; i < 4; i++) {

159 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

160 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

163  
img
;

164 
	}
}

166 
	$‰ì_Æl
()

169 
o°
::
MuãxLock
 
	`Æ
(
cs_ˇched_
);

170 !
ˇched_
.
	`em±y
()) {

171 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

172 
	`dñ_zifImage
(
img
);

173 
ˇched_
.
	`p›_‰⁄t
();

178 
o°
::
MuãxLock
 
	`Æ
(
cs_fifo_
);

179 !
fifo_
.
	`em±y
()) {

180 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

181 
	`dñ_zifImage
(
img
);

182 
fifo_
.
	`p›_‰⁄t
();

185 
	}
}

187 
size_t
 
	$fifo_size
()

189 
o°
::
MuãxLock
 
	`Æ
(
cs_fifo_
);

190  
fifo_
.
	`size
();

191 
	}
}

193 
	$ßve_image
(
zifImage
 *
img
)

195 
o°
::
MuãxLock
 
	`Æ
(
cs_fifo_
);

197 
fifo_
.
	`push_back
(
img
);

198 
£m_pics_
.
	`po°
();

199 
	}
}

201 
zifImage
 *
	$gë_em±y
()

203 
o°
::
MuãxLock
 
	`Æ
(
cs_ˇched_
);

204 i‡(
ˇched_
.
	`em±y
()) {

205  
	`√w_zifImage
();

208 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

209 
ˇched_
.
	`p›_‰⁄t
();

210  
img
;

212 
	}
}

214 
vútuÆ
 
	$run
()

216 
size_t
 
˙t
 = 0;

218 !
quô_
) {

219 i‡(
	`›í_§c
() < 0) {

220 
quô_evt_
.
	`waô
(5000);

224 !
quô_
) {

225 i‡(
∑u£d_
) {

226 
	`¶ìp
(50);

230 i‡(
	`fifo_size
() > 10) {

231 
	`¶ìp
(50);

235 
zifImage
 *
img
 = 
	`gë_em±y
();

236 
	`as£π
(
img
);

238 
rc
 = 
	`gë_§c
(
img
);

239 i‡(
rc
 == 0) {

242 i‡(
rc
 < 0) {

247 i‡(
˙t
++ % 2 == 0) {

248 
	`ßve_image
(
img
);

251 
	`‰ì_image
(
img
);

256 
	`˛o£_§c
();

258 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceFFmpeg.cpp

1 
	~"VideoSour˚FFm≥g.h
"

4 
	gVideoSour˚FFm≥g
::
	$VideoSour˚FFm≥g
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
)

5 : 
	$VideoSour˚Ba£
(
fmt
, 
uæ
)

7 
fc_
 = 0;

8 
sw_
 = 0;

9 
‰ame_
 = 0;

10 
œ°_h_
 = -1;

11 
œ°_w_
 = -1;

12 
	}
}

14 
	gVideoSour˚FFm≥g
::~
	$VideoSour˚FFm≥g
()

16 
	}
}

18 
VideoSour˚FFm≥g
::
	$›í_§c
()

20 
rc
 = 
	`avf‹m©_›í_öput
(&
fc_
, 
uæ_
.
	`c_°r
(), 0, 0);

21 i‡(
rc
 != 0) {

22 
	`Ârötf
(
°dîr
, "ERR: [img§c]: %s: c™'à›í %s\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

26 i‡(
	`avf‹m©_föd_°ªam_öfo
(
fc_
, 0) < 0) {

27 
	`Ârötf
(
°dîr
, "ERR: [img§c]: %s: c™'àföê°ªam infÿf‹ %s\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

28 
	`avf‹m©_˛o£_öput
(&
fc_
);

29 
fc_
 = 0;

33 
boﬁ
 
found_video
 = 
Ál£
;

35 
i
 = 0; i < 
fc_
->
nb_°ªams
; i++) {

36 
AVCodecC⁄ãxt
 *
codec
 = 
fc_
->
°ªams
[
i
]->codec;

37 i‡(
codec
->
codec_ty≥
 =
AVMEDIA_TYPE_VIDEO
) {

38 
AVCodec
 *
cc
 = 
	`avcodec_föd_decodî
(
codec
->
codec_id
);

39 i‡(
cc
) {

40 
	`avcodec_›í2
(
codec
, 
cc
, 0);

41 
found_video
 = 
åue
;

47 i‡(!
found_video
) {

48 
	`Ârötf
(
°dîr
, "ERR: [img§c]: %s: c™'àföd videÿ°ªam i¿%s\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

49 
	`avf‹m©_˛o£_öput
(&
fc_
);

50 
fc_
 = 0;

54 
‰ame_
 = 
	`av_‰ame_Æloc
();

57 
	}
}

59 
	gVideoSour˚FFm≥g
::
	$˛o£_§c
()

61 i‡(
fc_
) {

62 
	`avf‹m©_˛o£_öput
(&
fc_
);

63 
fc_
 = 0;

66 i‡(
sw_
) {

67 
	`sws_‰ìC⁄ãxt
(
sw_
);

68 
sw_
 = 0;

71 i‡(
‰ame_
) {

72 
	`av_‰ame_‰ì
(&
‰ame_
);

73 
‰ame_
 = 0;

76 
œ°_w_
 = 
œ°_h_
 = -1;

77 
	}
}

79 
	gVideoSour˚FFm≥g
::
	$gë_§c
(
zifImage
 *
img
)

81 
	`as£π
(
fc_
);

83 
AVPackë
 
pkg
;

84 
boﬁ
 
gŸ_video
 = 
Ál£
;

86 !
gŸ_video
) {

87 i‡(
	`av_ªad_‰ame
(
fc_
, &
pkg
) < 0) {

88 
	`Ârötf
(
°dîr
, "ERR: [img§c] %s:Ñód fømêî∏f‹ %s\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

92 
AVCodecC⁄ãxt
 *
cc
 = 
fc_
->
°ªams
[
pkg
.
°ªam_ödex
]->
codec
;

93 i‡(
cc
->
codec_ty≥
 =
AVMEDIA_TYPE_VIDEO
) {

94 
gŸ
;

95 i‡(
	`avcodec_decode_video2
(
cc
, 
‰ame_
, &
gŸ
, &
pkg
) < 0) {

96 
	`Ârötf
(
°dîr
, "WARNING: [img§c] %s: decodêvideÿ‰amêî∏f‹ %s\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

99 i‡(
gŸ
) {

100 i‡(
	`chk_sws
(
cc
)) {

101 
gŸ_video
 = 
	`ßve
(
img
);

102 
img
->
°amp
 = 
pkg
.
±s
 * 1.0 / 
cc
->
ticks_≥r_‰ame
 * cc->
time_ba£
.
num
 / cc->time_ba£.
dí
;

107 
	`av_‰ì_∑ckë
(&
pkg
);

111 
	}
}

113 
boﬁ
 
	gVideoSour˚FFm≥g
::
	$chk_sws
(
AVCodecC⁄ãxt
 *
cc
)

115 i‡(
cc
->
width
 !
œ°_w_
 || cc->
height
 !
œ°_h_
 || !
sw_
) {

116 i‡(
sw_
) {

117 
	`sws_‰ìC⁄ãxt
(
sw_
);

120 
sw_
 = 
	`sws_gëC⁄ãxt
(
cc
->
width
, cc->
height
, cc->
pix_fmt
, 
fmt_
.width, fmt_.height, fmt_.
fmt
, 
SWS_FAST_BILINEAR
, 0, 0, 0);

121 i‡(!
sw_
) {

122 
	`Ârötf
(
°dîr
, "ERR: [img§c]: %s: c™'à¸óã sws: src=[%d-%d, %d], d°=[%d-%d, %d] f‹ %s\n", 
__FUNCTION__
,

123 
cc
->
width
, cc->
height
, cc->
pix_fmt
, 
fmt_
.width, fmt_.height, fmt_.
fmt
, 
uæ_
.
	`c_°r
());

126 
œ°_w_
 = 
cc
->
width
, 
œ°_h_
 = cc->
height
;

130  
sw_
 != 0;

131 
	}
}

133 
boﬁ
 
	gVideoSour˚FFm≥g
::
	$ßve
(
zifImage
 *
img
)

135 
	`as£π
(
sw_
);

136 
	`as£π
(
‰ame_
);

137 
	`as£π
(
img
);

139 
rc
 = 
	`sws_sˇÀ
(
sw_
, 
‰ame_
->
d©a
, føme_->
löesize
, 0, 
œ°_h_
, 
img
->d©a, img->
°ride
);

140  
åue
;

141 
	}
}

143 
	gVideoSour˚FFm≥g
::
	$∑u£_§c
()

145 i‡(
fc_
) {

146 
	`av_ªad_∑u£
(
fc_
);

148 
	}
}

150 
	gVideoSour˚FFm≥g
::
	$ªsume_§c
()

152 i‡(
fc_
) {

153 
	`av_ªad_∂ay
(
fc_
);

155 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceFFmpeg.h

1 #¥agm®
⁄˚


2 
	~"videosour˚ba£.h
"

5 
	~<libavcodec/avcodec.h
>

6 
	~<libavf‹m©/avf‹m©.h
>

7 
	~<libswsˇÀ/swsˇÀ.h
>

10 ˛as†
	cVideoSour˚FFm≥g
 : 
public
 
VideoSour˚Ba£


12 
AVF‹m©C⁄ãxt
 *
fc_
;

13 
SwsC⁄ãxt
 *
sw_
;

14 
AVFøme
 *
‰ame_
;

15 
œ°_w_
, 
œ°_h_
;

17 
public
:

18 
VideoSour˚FFm≥g
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
);

19 ~
VideoSour˚FFm≥g
();

21 
¥iv©e
:

22 
vútuÆ
 
›í_§c
();

23 
vútuÆ
 
˛o£_§c
();

24 
vútuÆ
 
gë_§c
(
zifImage
 *
img
);

25 
vútuÆ
 
∑u£_§c
();

26 
vútuÆ
 
ªsume_§c
();

28 
boﬁ
 
chk_sws
(
AVCodecC⁄ãxt
 *
cc
);

29 
boﬁ
 
ßve
(
zifImage
 *
img
);

	@sample/libdetect2/libimagesource/VideoSourceForMorn.cpp

1 #i‡
SUPPORT_MORN


2 
	~"VideoSour˚F‹M‹n.h
"

3 
	~<as£π.h
>

5 #¥agm®
commít
(
lib
, "HHNetClient.lib")

6 #¥agm®
commít
(
lib
, "HH5KDecoder.lib")

8 #i‚de‡
PIX_FMT


9 
	#PIX_FMT
 
PIX_FMT_BGR24


	)

11 
	gVideoSour˚F‹M‹n
::
	$VideoSour˚F‹M‹n
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
)

13 
uæ_
.
	`assign
(
uæ
);

14 
width_
 = 
fmt
->
width
, 
height_
 = fmt->
height
;

16 
evt_
 = 
	`Cª©eEvít
(0, 0, 0, 0);

18 
dec_
 = 0;

19 
sws_
 = 0;

20 
‰ame_
 = 
	`avcodec_Æloc_‰ame
();

22 
quô_
 = 
Ál£
;

23 
	`°¨t
();

24 
	}
}

26 
	gVideoSour˚F‹M‹n
::~
	$VideoSour˚F‹M‹n
()

28 
quô_
 = 
åue
;

29 
	`joö
();

31 i‡(
dec_
Ë{ 
	`avcodec_˛o£
(dec_); 
	`av_‰ì
(dec_); }

32 i‡(
sws_
Ë
	`sws_‰ìC⁄ãxt
(sws_);

33 
	`avcodec_‰ì_‰ame
(&
‰ame_
);

34 
	`Clo£H™dÀ
(
evt_
);

36 
	`HHNET_Clo£Ch™√l
(
hO≥nCh™√l_
);

37 
	}
}

41 
	gVideoSour˚F‹M‹n
::
	$run
()

43 
HHERR_CODE
 
îrCode
;

44 
HHOPEN_CHANNEL_INFO_EX
 
›íInfo_ex
;

46 
›íInfo_ex
.
nSubCh™√l
 = 0;

47 
›íInfo_ex
.
dwClõ¡ID
 = 0;

48 
›íInfo_ex
.
nO≥nCh™√l
 = 0;

49 
›íInfo_ex
.
ªs
 = 100;

50 
›íInfo_ex
.
¥ŸocﬁTy≥
 = 
NET_PROTOCOL_TCP
;

51 
›íInfo_ex
.
funcSåómCÆlback
 = (
Ch™√lSåómCÆlback
)
_Ch™√lSåómCÆlback
;

52 
›íInfo_ex
.
pCÆlbackC⁄ãxt

this
;

55 
îrCode
 = 
	`HHNET_O≥nCh™√l
(

56 (*)
uæ_
.
	`c_°r
(),

61 (
HHOPEN_CHANNEL_INFO
*)&
›íInfo_ex
,

62 
hO≥nCh™√l_


64 
	`Ârötf
(
°dîr
, "%†hO≥¿%d\n", 
__FUNCTION__
, 
hO≥nCh™√l_
);

65 
	`Ârötf
(
°dîr
, "%†îrCodê%d\n", 
__FUNCTION__
, 
îrCode
);

67 !
quô_
){

70 
	}
}

72 
	gVideoSour˚F‹M‹n
::
	$ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
)

74 
zifImage
 *
img
 = 
	`gë_ˇched
(
width_
, 
height_
, 
PIX_FMT
);

75 
	`sws_sˇÀ
(
sws
, 
‰ame
->
d©a
, føme->
löesize
, 0, føme->
height
, 
img
->d©a, img->
°ride
);

76 
img
->
width
 = 
width_
;

77 
img
->
height
 = 
height_
;

78 
img
->
fmt_ty≥
 = 
PIX_FMT
;

79 
img
->
°amp
 = stamp;

81 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

83 if(
fifo_
.
	`size
() >= 5) {

84 
zifImage
 *
tmp
 = 
	`√xt_img
();

85 
	`‰ì_img
(
tmp
);

88 
fifo_
.
	`push_back
(
img
);

90 
	`SëEvít
(
evt_
);

91 
	}
}

93 
zifImage
 *
	gVideoSour˚F‹M‹n
::
	$gë_ˇched
(
width
, 
height
, 
fmt
)

95 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

96 i‡(!
ˇched_
.
	`em±y
()) {

97 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

98 
ˇched_
.
	`p›_‰⁄t
();

100 
	`as£π
(
width
 =
img
->width && 
height
 =img->heighà&& 
fmt
 =img->
fmt_ty≥
);

102  
img
;

105 
zifImage
 *
img
 = 
√w
 zifImage;

106 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

107 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
PIX_FMT
, 
width
, 
height
);

108 
img
->
width
 = width;

109 
img
->
height
 = height;

110 
img
->
fmt_ty≥
 = (
PixñF‹m©
)
fmt
;

112 
i
 = 0; i < 4; i++) {

113 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

114 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

117  
img
;

119 
	}
}

121 
	gVideoSour˚F‹M‹n
::
	$ßve_video
(
uöt8_t
 *
d©a
, 
Àn
, 
°amp
)

123 
AVPackë
 
pkg
;

124 
	`av_öô_∑ckë
(&
pkg
);

126 
pkg
.
d©a
 = data;

127 
pkg
.
size
 = 
Àn
;

129 
gŸ
;

130 
rc
 = 
	`avcodec_decode_video2
(
dec_
, 
‰ame_
, &
gŸ
, &
pkg
);

131 i‡(
gŸ
) {

132 
	`ßve_‰ame
(
sws_
, 
‰ame_
, 
°amp
);

134 
	}
}

136 
	gVideoSour˚F‹M‹n
::
	$Êush
()

138 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

140 !
fifo_
.
	`em±y
()) {

141 
zifImage
 *
tmp
 = 
fifo_
.
	`‰⁄t
();

142 
	`‰ì_img
(
tmp
);

144 
	}
}

146 
zifImage
 *
	gVideoSour˚F‹M‹n
::
	$√xt_img
()

148 
	`WaôF‹SögÀObje˘
(
evt_
, 500);

150 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

151 i‡(
fifo_
.
	`em±y
()) {

155 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

156 
fifo_
.
	`p›_‰⁄t
();

158  
img
;

159 
	}
}

161 
	gVideoSour˚F‹M‹n
::
	$‰ì_img
(
zifImage
 *
img
)

163 i‡(!
img
) ;

165 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

167 
ˇched_
.
	`push_back
(
img
);

168 
ˇched_
.
	`size
() > 20) {

169 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

170 
ˇched_
.
	`p›_‰⁄t
();

172 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

173 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

174 
dñëe
 
img
;

175 } 
	}
}

178 
	gVideoSour˚F‹M‹n
::
	$¥ï¨e_dec_sws
(c⁄° 
EXT_FRAME_VIDEO
 &
efv
)

180 
o°
::
MuãxLock
 
	`Æ
(
cs_dec_
);

182 i‡(
dec_
Ë{ 
	`avcodec_˛o£
(dec_); 
	`av_‰ì
(dec_); dec_ = 0; }

183 i‡(
sws_
Ë{ 
	`sws_‰ìC⁄ãxt
(sws_); sws_ = 0; }

185 
AVCodec
 *
codec
 = 0;

187 i‡(
efv
.
nVideoEncodeTy≥
 == 0x01)

188 
codec
 = 
	`avcodec_föd_decodî
(
AV_CODEC_ID_H264
);

189 i‡(
efv
.
nVideoEncodeTy≥
 == 0x03)

190 
codec
 = 
	`avcodec_föd_decodî
(
AV_CODEC_ID_MPEG4
);

192 
	`Ârötf
(
°dîr
, "ERR: %s: o∆y suµ‹àh264 o∏m≥g4, codê'%s' NoT suµ‹ãd!\n",
__FUNCTION__
, 
efv
.
nVideoEncodeTy≥
);

196 
dec_
 = 
	`avcodec_Æloc_c⁄ãxt3
(
codec
);

197 
	`avcodec_›í2
(
dec_
, 
codec
, 0);

199 
dec_
->
exåad©a_size
 = 0;

200 
dec_
->
exåad©a
 = 0;

202 
sws_
 = 
	`sws_gëC⁄ãxt
(
efv
.
nVideoWidth
,Éfv.
nVideoHeight
, 
PIX_FMT_YUV420P
, 
width_
, 
height_
, 
PIX_FMT
, 
SWS_FAST_BILINEAR
, 0, 0, 0);

205 
	}
}

207 
	gVideoSour˚F‹M‹n
::
	$Ch™√lSåómCÆlback_
(
HANDLE
 
hO≥nCh™√l
,

208 *
pSåómD©a
,

209 
DWORD
 
dwClõ¡ID
,

210 *
pC⁄ãxt
,

211 
ENCODE_VIDEO_TYPE
 
ícodeVideoTy≥
,

212 
HHAV_INFO
 *
pAVInfo
)

215 
EXT_FRAME_HEAD
 *
efh
 = (EXT_FRAME_HEAD*)((
BYTE
*)
pSåómD©a
 + (
HV_FRAME_HEAD
));

216 
	`as£π
(
efh
->
	`CheckExtFœg
(Ë=
åue
);

218 
HV_FRAME_HEAD
 *
hfh
 = (HV_FRAME_HEAD*)(
pSåómD©a
);

219 i‡(
hfh
->
°ªamFœg
 =
MY_FRAME_TYPE_I
 || hfh->°ªamFœg =
MY_FRAME_TYPE_P
) {

220 
BYTE
 *
d©a
 = (BYTE*)
pSåómD©a
 + (
HV_FRAME_HEAD
Ë+ (
EXT_FRAME_HEAD
);

221 
Àn
 = 
hfh
->
nByãNum
 - (
EXT_FRAME_HEAD
);

223 
	`ßve_video
((
uöt8_t
*)
d©a
, 
Àn
, 
hfh
->
nTime°amp
);

227 
	}
}

229 *
	$DecodeM‹n
(*
d©a
)

231 
HV_FRAME_HEAD
 *
hfh
 = (HV_FRAME_HEAD*)
d©a
;

232 
EXT_FRAME_HEAD
 *
efh
 = (EXT_FRAME_HEAD*)((
BYTE
*)
d©a
 + (
HV_FRAME_HEAD
));

234 
d©a
 = (
BYTE
*)d©®+ (
EXT_FRAME_HEAD
);

235  
d©a
;

236 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceForMorn.h

1 #i‡
SUPPORT_MORN


3 
	~<cc++/thªad.h
>

4 
	~"../libkvc⁄fig/KVC⁄fig.h
"

5 
	~"image_sour˚.h
"

6 
	~<deque
>

9 
	~<libavcodec/avcodec.h
>

10 
	~<libswsˇÀ/swsˇÀ.h
>

13 
	~"wösock2.h
"

14 
	~<HHAVDeföe.h
>

15 
	~<HHNëI¡îÁ˚.h
>

16 
	~<HH5KDecodî.h
>

18 ˛as†
	cVideoSour˚F‹M‹n
 : 
o°
::
Thªad


20 
HANDLE
 
hO≥nCh™√l_
;

21 
°d
::
°rög
 
uæ_
;

22 
boﬁ
 
quô_
;

24 
SwsC⁄ãxt
 *
sws_
;

25 
width_
, 
height_
;

26 
AVCodecC⁄ãxt
 *
dec_
;

27 
AVFøme
 *
‰ame_
;

29 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

30 
IMAGES
 
fifo_
, 
ˇched_
;

31 
o°
::
Muãx
 
cs_images_
;

32 
o°
::
Muãx
 
cs_dec_
;

34 
HANDLE
 
evt_
;

35 
public
:

36 
VideoSour˚F‹M‹n
::VideoSour˚F‹M‹n(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
);

37 ~
VideoSour˚F‹M‹n
();

39 
zifImage
 *
√xt_img
();

40 
‰ì_img
(
zifImage
 *
img
);

41 
Êush
();

43 
¥iv©e
:

44 
run
();

46 
Ch™√lSåómCÆlback_
(
HANDLE
 
hO≥nCh™√l
, *
pSãamD©a
, 
DWORD
 
dwClõ¡ID
, *
pC⁄ãxt
, 
ENCODE_VIDEO_TYPE
 
ícodeVideoTy≥
, 
HHAV_INFO
 *
pAVInfo
);

47 
	$_Ch™√lSåómCÆlback
(
HANDLE
 
hO≥nCh™√l
, *
pSåómD©a
, 
DWORD
 
dwClõ¡ID
, *
pC⁄ãxt
, 
ENCODE_VIDEO_TYPE
 
ícodeVideoTy≥
, 
HHAV_INFO
 *
pAVInfo
)

49  ((
VideoSour˚F‹M‹n
*)
pC⁄ãxt
)->
	`Ch™√lSåómCÆlback_
(
hO≥nCh™√l
,

50 
pSåómD©a
,

51 
dwClõ¡ID
,

52 
pC⁄ãxt
,

53 
ícodeVideoTy≥
,

54 
pAVInfo


58 
	`ßve_video
(
uöt8_t
 *
d©a
, 
Àn
, 
°amp
);

59 
	`¥ï¨e_dec_sws
(c⁄° 
EXT_FRAME_VIDEO
 &
vp
);

60 
	`ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
);

61 
zifImage
 *
	`gë_ˇched
(
width
, 
height
, 
fmt
);

63 
	}
};

	@sample/libdetect2/libimagesource/VideoSourceForRTSP.cpp

1 
	~"VideoSour˚F‹RTSP.h
"

3 #i‡
FFMPEG_DXVA2


4 (*
	tPFN_DXVA2_INIT
)(
	tAVCodecC⁄ãxt
 *
	tcc
);

5 
PFN_DXVA2_INIT
 
_func_dxva2_öô
;

8 
VideoSour˚F‹RTSP
::
	$VideoSour˚F‹RTSP
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
)

9 : 
	`uæ_
(
uæ
)

10 , 
	$fmt_
(*
fmt
)

12 
quô_
 = 
Ál£
;

13 
	`°¨t
();

14 
	}
}

16 
	gVideoSour˚F‹RTSP
::~
	$VideoSour˚F‹RTSP
()

18 
quô_
 = 
åue
;

19 
£m_
.
	`po°
();

20 
	`joö
();

21 
	}
}

23 
boﬁ
 
	gVideoSour˚F‹RTSP
::
	$waô
(
ms
)

25 
£m_
.
	`waô
(
ms
);

26  
quô_
;

27 
	}
}

29 
	gVideoSour˚F‹RTSP
::
	$run
()

31 
AVF‹m©C⁄ãxt
 *
˘x
 = 0;

32 
SwsC⁄ãxt
 *
sws
 = 0;

33 
œ°_w
 = -1, 
œ°_h
 = -1;

34 
AVFøme
 *
‰ame
 = 
	`avcodec_Æloc_‰ame
();

35 
size_t
 
˙t
 = 0;

37 !
quô_
) {

38 i‡(!
˘x
) {

39 
AVDi˘i⁄¨y
 *
dic
 = 0;

41 
	`av_di˘_£t
(&
dic
, "stimeout", "2000000", 0);

42 
	`av_di˘_£t
(&
dic
, "rtsp_transport", "tcp", 1);

43 
rc
 = 
	`avf‹m©_›í_öput
(&
˘x
, 
uæ_
.
	`c_°r
(), 0, &
dic
);

44 
	`av_di˘_‰ì
(&
dic
);

46 i‡(
rc
 != 0) {

47 
˘x
 = 0;

48 
	`Ârötf
(
°dîr
, "%s: o≥¿%†îr\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

51 
	`Ârötf
(
°dîr
, "%s: o≥¿%†ok\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

52 
	`avf‹m©_föd_°ªam_öfo
(
˘x
, 0);

53 
i
 = 0; i < 
˘x
->
nb_°ªams
; i++) {

54 
AVCodecC⁄ãxt
 *
codec
 = 
˘x
->
°ªams
[
i
]->codec;

55 i‡(
codec
->
codec_ty≥
 =
AVMEDIA_TYPE_VIDEO
) {

56 i‡(
codec
->
codec_id
 =
CODEC_ID_H264
) {

57 #i‡
FFMPEG_DXVA2


58 
AVHWAc˚l
 *
hw_h264
 = 0;

59 
AVHWAc˚l
 *
hw
 = 
	`av_hwac˚l_√xt
(0);

60 
hw
) {

61 i‡(
hw
->
pix_fmt
 =
AV_PIX_FMT_DXVA2_VLD
 && hw->
id
 =
CODEC_ID_H264
) {

62 
hw_h264
 = 
hw
;

63 
	`av_ªgi°î_hwac˚l
(
hw_h264
);

67 
hw
 = 
	`av_hwac˚l_√xt
(hw);

70 i‡(
hw_h264
 && 
_func_dxva2_öô
) {

71 
	`Ârötf
(
°dîr
, "DEBUG: %s:Én, h264_dxva2 suµ‹ãd!\n", 
__FUNCTION__
);

74 
	`av_log_£t_Àvñ
(
AV_LOG_DEBUG
);

75 
	`_func_dxva2_öô
(
codec
);

80 
AVCodec
 *
cc
 = 
	`avcodec_föd_decodî
(
codec
->
codec_id
);

81 
	`avcodec_›í2
(
codec
, 
cc
, 0);

87 i‡(!
˘x
) {

88 
	`waô
(5000);

92 
AVPackë
 
pkg
;

93 i‡(
	`av_ªad_‰ame
(
˘x
, &
pkg
) == 0) {

94 
AVCodecC⁄ãxt
 *
codec
 = 
˘x
->
°ªams
[
pkg
.
°ªam_ödex
]->codec;

95 i‡(
codec
->
codî_ty≥
 =
AVMEDIA_TYPE_VIDEO
) {

97 i‡(
œ°_w
 !
codec
->
width
 && 
œ°_h
 !codec->
height
) {

98 i‡(
codec
->
width
 > 0 && codec->
height
 > 0) {

99 i‡(
sws
Ë
	`sws_‰ìC⁄ãxt
(sws);

101 
œ°_w
 = 
codec
->
width
, 
œ°_h
 = codec->
height
;

102 
sws
 = 
	`sws_gëC⁄ãxt
(
œ°_w
, 
œ°_h
, 
codec
->
pix_fmt
, 
fmt_
.
width
, fmt_.
height
, fmt_.
fmt
, 
SWS_FAST_BILINEAR
, 0, 0, 0);

106 
boﬁ
 
ßve
 = 
Ál£
;

107 i‡(
˙t
 % 2)

108 
ßve
 = 
åue
;

109 
˙t
++;

110 
	`⁄e_video_‰ame
(
sws
, 
codec
, &
pkg
, 
‰ame
, 
ßve
);

113 
	`av_‰ì_∑ckë
(&
pkg
);

116 
	`Ârötf
(
°dîr
, "%s:Ñód %†îr\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

117 
	`avf‹m©_˛o£_öput
(&
˘x
);

118 
˘x
 = 0;

119 
	`waô
(5000);

124 i‡(
sws
) {

125 
	`sws_‰ìC⁄ãxt
(
sws
);

128 i‡(
‰ame
) {

129 
	`avcodec_‰ì_‰ame
(&
‰ame
);

132 i‡(
˘x
) {

133 
	`avf‹m©_˛o£_öput
(&
˘x
);

134 
˘x
 = 0;

136 
	}
}

138 
	gVideoSour˚F‹RTSP
::
	$⁄e_video_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVCodecC⁄ãxt
 *
codec
, 
AVPackë
 *
pkg
, 
AVFøme
 *
‰ame
, 
boﬁ
 
ßve
)

140 
gŸ
;

142 
rc
 = 
	`avcodec_decode_video2
(
codec
, 
‰ame
, &
gŸ
, 
pkg
);

143 i‡(
rc
 >0 && 
gŸ
) {

144 i‡(!
sws
)  -1;

145 i‡(
ßve
) {

146 
	`ßve_‰ame
(
sws
, 
‰ame
, 
pkg
->
±s
/90000.0);

152 
	`Ârötf
(
°dîr
, "E");

155 
	}
}

157 
zifImage
 *
	gVideoSour˚F‹RTSP
::
	$√xt_img
()

159 i‡(
£m_pics_
.
	`waô
(50)) {

160 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

161 i‡(
fifo_
.
	`em±y
())

164 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

165 
fifo_
.
	`p›_‰⁄t
();

166  
img
;

171 
	}
}

173 
	gVideoSour˚F‹RTSP
::
	$‰ì_img
(
zifImage
 *
img
)

175 i‡(
img
) {

176 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

178 
ˇched_
.
	`push_back
(
img
);

179 
ˇched_
.
	`size
() > 10) {

180 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

181 
ˇched_
.
	`p›_‰⁄t
();

183 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

184 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

185 
dñëe
 
img
;

188 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceForRTSP.h

1 #¥agm®
⁄˚


3 
	~"image_sour˚.h
"

4 
	~<°rög
>

5 
	~<cc++/thªad.h
>

6 
	~<deque
>

9 
	~<libavf‹m©/avf‹m©.h
>

10 
	~<libavcodec/avcodec.h
>

11 
	~<libswsˇÀ/swsˇÀ.h
>

14 ˛as†
	cVideoSour˚F‹RTSP
 : 
o°
::
Thªad


16 
°d
::
°rög
 
uæ_
;

17 
img§c_f‹m©
 
fmt_
;

18 
boﬁ
 
quô_
;

19 
o°
::
Sem≠h‹e
 
£m_
, 
£m_pics_
;

20 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

21 
IMAGES
 
fifo_
, 
ˇched_
;

22 
o°
::
Muãx
 
cs_images_
;

24 
public
:

25 
VideoSour˚F‹RTSP
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
);

26 ~
VideoSour˚F‹RTSP
();

29 
zifImage
 *
√xt_img
();

30 
‰ì_img
(
zifImage
 *
img
);

32 
¥iv©e
:

33 
run
();

34 
boﬁ
 
waô
(
ms
);

37 
⁄e_video_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVCodecC⁄ãxt
 *
˘x
, 
AVPackë
 *
pkg
, 
AVFøme
 *
‰ame
, 
boﬁ
 
ßve
);

39 
	$ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
)

41 
zifImage
 *
img
 = 
	`gë_ˇched
(
fmt_
.
width
, fmt_.
height
, fmt_.
fmt
);

43 
	`sws_sˇÀ
(
sws
, 
‰ame
->
d©a
, føme->
löesize
, 0, føme->
height
, 
img
->d©a, img->
°ride
);

44 
img
->
width
 = 
fmt_
.width;

45 
img
->
height
 = 
fmt_
.height;

46 
img
->
fmt_ty≥
 = 
fmt_
.
fmt
;

47 
img
->
°amp
 = stamp;

49 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

51 i‡(
fifo_
.
	`size
() >= 5) {

52 
	`av_log
(0, 
AV_LOG_ERROR
, "zqpkt buf overflowed, max=%d!!!!!!!\n", 5);

53 
zifImage
 *
tmp
 = 
	`√xt_img
();

54 
	`‰ì_img
(
tmp
);

58 
fifo_
.
	`push_back
(
img
);

59 
£m_pics_
.
	`po°
();

62 
zifImage
 *
	$gë_ˇched
(
width
, 
height
, 
fmt
)

64 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

65 i‡(!
ˇched_
.
	`em±y
()) {

66 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

67 
ˇched_
.
	`p›_‰⁄t
();

68  
img
;

71 
zifImage
 *
img
 = 
√w
 zifImage;

72 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

73 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
fmt_
.
fmt
, 
width
, 
height
);

74 
img
->
width
 = width;

75 
img
->
height
 = height;

76 
img
->
fmt_ty≥
 = (
PixñF‹m©
)
fmt
;

78 
i
 = 0; i < 4; i++) {

79 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

80 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

82  
img
;

84 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceForYuan.cpp

1 #i‡
SUPPORT_YUANSDK


3 
	~"VideoSour˚F‹Yu™.h
"

4 
	~<Objba£.h
>

5 
	~<as£π.h
>

7 #¥agm®
commít
(
lib
, "qcap.lib")

9 
	gVideoSour˚F‹Yu™
::
	$VideoSour˚F‹Yu™
(c⁄° 
img§c_f‹m©
 *
fmt
, 
ch™√l
)

10 : 
	`fmt_
(
fmt
)

11 , 
	$ch™√l_
(
ch™√l
)

13 
ow_
 = 
fmt
->
width
;

14 
oh_
 = 
fmt
->
height
;

16 
œ°_width_
 = -1;

17 
sws_
 = 0;

19 
evt_
 = 
	`Cª©eEvít
(0, 0, 0, 0);

21 
quô_
 = 
Ál£
;

22 
	`°¨t
();

23 
	}
}

25 
	gVideoSour˚F‹Yu™
::~
	$VideoSour˚F‹Yu™
()

27 
quô_
 = 
åue
;

28 
	`joö
();

29 
	`Clo£H™dÀ
(
evt_
);

30 
	}
}

32 
	gVideoSour˚F‹Yu™
::
	$Êush
()

34 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

36 !
fifo_
.
	`em±y
()) {

37 
zifImage
 *
tmp
 = 
fifo_
.
	`‰⁄t
();

38 
fifo_
.
	`p›_‰⁄t
();

39 
	`‰ì_img
(
tmp
);

41 
	}
}

43 
zifImage
 *
	gVideoSour˚F‹Yu™
::
	$gë_ˇched
(
width
, 
height
, 
fmt
)

45 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

46 i‡(!
ˇched_
.
	`em±y
()) {

47 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

48 
ˇched_
.
	`p›_‰⁄t
();

50 
	`as£π
(
width
 =
img
->width && 
height
 =img->heighà&& 
fmt
 =img->
fmt_ty≥
);

52  
img
;

55 
zifImage
 *
img
 = 
√w
 zifImage;

56 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

57 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
fmt_
->
fmt
, 
width
, 
height
);

58 
img
->
width
 = width;

59 
img
->
height
 = height;

60 
img
->
fmt_ty≥
 = (
PixñF‹m©
)
fmt
;

62 
i
 = 0; i < 4; i++) {

63 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

64 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

67  
img
;

69 
	}
}

71 
zifImage
 *
	gVideoSour˚F‹Yu™
::
	$√xt_img
()

73 
	`WaôF‹SögÀObje˘
(
evt_
, 500);

75 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

76 i‡(
fifo_
.
	`em±y
()) {

80 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

81 
fifo_
.
	`p›_‰⁄t
();

83  
img
;

84 
	}
}

86 
	gVideoSour˚F‹Yu™
::
	$‰ì_img
(
zifImage
 *
img
)

88 i‡(!
img
) ;

90 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

92 
ˇched_
.
	`push_back
(
img
);

93 
ˇched_
.
	`size
() > 10) {

94 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

95 
ˇched_
.
	`p›_‰⁄t
();

97 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

98 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

99 
dñëe
 
img
;

101 
	}
}

103 
	gVideoSour˚F‹Yu™
::
	$run
()

105 
	`CoInôülize
(0);

107 
˙t_
 = 0;

108 
lo°_
 = 2;

109 i‡(
lo°_
 < 0)Üost_ = 0;

111 
PVOID
 
dev
;

112 
QRESULT
 
rc
 = 
	`QCAP_CREATE
("FH8735 PCI", 
ch™√l_
, 0, &
dev
);

113 i‡(
rc
 !
QCAP_RT_OK
) {

114 
	`Ârötf
(
°dîr
, "ERR: %s: QCAP_CREATE f‹ %dÉº\n", 
__FUNCTION__
, 
ch™√l_
);

115 ::
	`exô
(-1);

118 i‡(
ch™√l_
 > 8)

119 
rc
 = 
	`QCAP_SET_VIDEO_INPUT
(
dev
, 
QCAP_INPUT_TYPE_AUTO
);

121 
rc
 = 
	`QCAP_SET_VIDEO_INPUT
(
dev
, 
QCAP_INPUT_TYPE_AUTO
);

123 
rc
 = 
	`QCAP_REGISTER_VIDEO_PREVIEW_CALLBACK
(
dev
, 
_pic_ˇŒback
, 
this
);

125 
rc
 = 
	`QCAP_RUN
(
dev
);

127 i‡(
rc
 !
QCAP_RT_OK
) {

128 
	`Ârötf
(
°dîr
, "ERR: ??? QCAP_RUNÉrr\n");

131 !
quô_
) {

132 
	`¶ìp
(100);

135 
rc
 = 
	`QCAP_STOP
(
dev
);

136 
rc
 = 
	`QCAP_DESTROY
(
dev
);

137 
	}
}

139 
	gVideoSour˚F‹Yu™
::
	$pic_ˇŒback
(
PVOID
 
dev
, 
°amp
, 
uöt8_t
 *
d©a
, 
Àn
)

141 i‡(
ch™√l_
 >= 8) {

142 
	`Ârötf
(
°dîr
, "[%d]: sèmp=%.3f, d©a=%p,Üí=%d\n", 
ch™√l_
, 
°amp
, 
d©a
, 
Àn
);

145 i‡(!
d©a
) {

148 i‡(
Àn
 == 0) {

152 
ULONG
 
width
, 
height
, 
‰amî©e
;

153 
BOOL
 
öãæóved
;

154 
QRESULT
 
rc
 = 
	`QCAP_GET_VIDEO_CURRENT_INPUT_FORMAT
(
dev
, &
width
, &
height
, &
öãæóved
, &
‰amî©e
);

156 
˙t_
++;

157 i‡((
˙t_
 % (
lo°_
+1)) != 0)

165 i‡(
width
 !
œ°_width_
 || 
height
 !
œ°_height_
) {

166 
œ°_width_
 = 
width
, 
œ°_height_
 = 
height
;

168 i‡(
sws_
Ë
	`sws_‰ìC⁄ãxt
(sws_);

169 
sws_
 = 
	`sws_gëC⁄ãxt
(
width
, 
height
, 
PIX_FMT_YUV420P
, 
ow_
, 
oh_
, 
fmt_
->
fmt
, 
SWS_FAST_BILINEAR
, 0, 0, 0);

173 
uöt8_t
 *
imgd©a
[4] = {

174 
d©a
,

175 
d©a
 + 
width
 * 
height
 + width * height / 4,

176 
d©a
 + 
width
 * 
height
,

178 
°ride
[4] = {

179 
width
,

180 
width
 / 2,

181 
width
 / 2,

185 
	`as£π
(
sws_
);

186 
zifImage
 *
img
 = 
	`gë_ˇched
(
ow_
, 
oh_
, 
fmt_
->
fmt
);

187 
	`sws_sˇÀ
(
sws_
, 
imgd©a
, 
°ride
, 0, 
height
, 
img
->
d©a
, img->stride);

189 
img
->
°amp
 = stamp;

190 
img
->
width
 = 
ow_
;

191 
img
->
height
 = 
oh_
;

192 
img
->
fmt_ty≥
 = 
fmt_
->
fmt
;

194 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

196 i‡(
fifo_
.
	`size
() >= 5) {

197 
zifImage
 *
tmp
 = 
	`√xt_img
();

198 
	`‰ì_img
(
tmp
);

201 
fifo_
.
	`push_back
(
img
);

202 
	`SëEvít
(
evt_
);

203 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceForYuan.h

1 #¥agm®
⁄˚


3 #ifde‡
SUPPORT_YUANSDK


5 
	~"image_sour˚.h
"

6 
	~<cc++/thªad.h
>

7 
	~<yu™/QCAP.H
>

8 
	~"../libkvc⁄fig/KVC⁄fig.h
"

9 
	~<deque
>

12 
	~<libavcodec/avcodec.h
>

13 
	~<libswsˇÀ/swsˇÀ.h
>

16 ˛as†
	cVideoSour˚F‹Yu™
 : 
o°
::
Thªad


18 c⁄° 
img§c_f‹m©
 *
fmt_
;

19 
ch™√l_
;

20 
boﬁ
 
quô_
;

22 
SwsC⁄ãxt
 *
sws_
;

23 
œ°_width_
, 
œ°_height_
;

25 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

26 
IMAGES
 
fifo_
, 
ˇched_
;

27 
o°
::
Muãx
 
cs_images_
;

29 
HANDLE
 
evt_
;

30 
ow_
, 
oh_
;

32 
size_t
 
˙t_
;

33 
lo°_
;

35 
public
:

36 
VideoSour˚F‹Yu™
(c⁄° 
img§c_f‹m©
 *
fmt
, 
ch™√l
);

37 ~
VideoSour˚F‹Yu™
();

40 
zifImage
 *
√xt_img
();

41 
‰ì_img
(
zifImage
 *
img
);

42 
Êush
();

44 
¥iv©e
:

45 
run
();

46 
QRETURN
 
	$_pic_ˇŒback
(
PVOID
 
pDevi˚
, 
dSam∂eTime
, 
BYTE
* 
pFømeBuf„r
, 
ULONG
 
nFømeBuf„rLí
, PVOID 
pU£rD©a
)

48 ((
VideoSour˚F‹Yu™
*)
pU£rD©a
)->
	`pic_ˇŒback
(
pDevi˚
, 
dSam∂eTime
, 
pFømeBuf„r
, 
nFømeBuf„rLí
);

49  
QRETURN
::
QCAP_RT_OK
;

51 
	`pic_ˇŒback
(
PVOID
 
dev
, 
°amp
, 
uöt8_t
 *
d©a
, 
Àn
);

52 
zifImage
 *
	`gë_ˇched
(
width
, 
height
, 
fmt
);

53 
	}
};

	@sample/libdetect2/libimagesource/VideoSourceForZqpkt.cpp

1 
	~"VideoSour˚F‹Zqpkt.h
"

2 
	~<as£π.h
>

5 
	~<libavdevi˚/avdevi˚.h
>

8 #i‡
FFMPEG_DXVA2


10 (*
	tPFN_DXVA2_INIT
)(
	tAVCodecC⁄ãxt
 *
	tcc
);

13 
HMODULE
 
_dŒ_dxva2
;

14 
PFN_DXVA2_INIT
 
_func_dxva2_öô
 = 0;

18 
	$log_öô
()

20 
	}
}

22 
	$log
(c⁄° *
fmt
, ...)

24 
	}
}

26 ˛as†
	cAVCodecInô


28 
	mo°
::
Muãx
 
cs_
;

30 
	mpublic
:

31 
	$AVCodecInô
()

33 
	`av_ªgi°î_Æl
();

34 
	`avdevi˚_ªgi°î_Æl
();

35 
	`avcodec_ªgi°î_Æl
();

36 
	`avf‹m©_√tw‹k_öô
();

37 
	`log_öô
();

39 
	`av_log_£t_Àvñ
(
AV_LOG_FATAL
);

41 #i‡
FFMPEG_DXVA2


42 
_dŒ_dxva2
 = 
	`LﬂdLibøry
("libffmpeg.dxva2.dll");

43 i‡(
_dŒ_dxva2
) {

44 
	`Ârötf
(
°dîr
, "INFO:Én,ÜoadÜibffmpeg.dxva2.dll OK\n");

46 
_func_dxva2_öô
 = (
PFN_DXVA2_INIT
)
	`GëProcAddªss
(
_dŒ_dxva2
, "dxva2_init");

47 i‡(!
_func_dxva2_öô
) {

48 
	`Ârötf
(
°dîr
, "ERR: oooh, can't get dxva2_init() funcÖtr ?????\n");

52 
	`Ârötf
(
°dîr
, "WARNING: ooh, can'tÜoadÜibffmpeg.dxva2.dll\n");

57 
o°
::
Muãx
 &
	$cs
()

59  
cs_
;

60 
	}
}

62 
AVCodecInô
 
	g_avcodec_öô
;

64 
	gVideoSour˚
::
	$›í
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
)

66 
fmt_
 = *
fmt
;

67 
ow_
 = 
fmt
->
width
, 
oh_
 = fmt->
height
;

68 
§c_
 = 0;

69 
evt_
 = 
	`Cª©eEvít
(0, 0, 0, 0);

71 
uæ_
 = 
uæ
;

73 
o°
::
MuãxLock
 
	`Æ
(
_avcodec_öô
.
	`cs
());

75 
AVCodec
 *
codec
 = 
	`avcodec_föd_decodî
(
AV_CODEC_ID_H264
);

76 
dec_
 = 
	`avcodec_Æloc_c⁄ãxt3
(
codec
);

78 
	`avcodec_›í2
(
dec_
, 
codec
, 0);

79 
‰ame_
 = 
	`avcodec_Æloc_‰ame
();

82 
quô_
 = 
Ál£
;

83 
	`°¨t
();

85 
›íed_
 = 
åue
;

88 
	}
}

90 
	gVideoSour˚
::
	$˛o£
()

92 i‡(!
›íed_
) ;

94 
quô_
 = 
åue
;

95 
	`joö
();

97 
	`avcodec_‰ì_‰ame
(&
‰ame_
);

100 
	`Clo£H™dÀ
(
evt_
);

101 
›íed_
 = 
Ál£
;

102 
	}
}

104 
	gVideoSour˚
::
	$Êush
()

106 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

108 !
fifo_
.
	`em±y
()) {

109 
zifImage
 *
tmp
 = 
fifo_
.
	`‰⁄t
();

110 
fifo_
.
	`p›_‰⁄t
();

111 
	`‰ì_img
(
tmp
);

113 
	}
}

115 
zifImage
 *
	gVideoSour˚
::
	$√xt_img
()

117 i‡(!
›íed_
)

120 
	`WaôF‹SögÀObje˘
(
evt_
, 50);

122 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

123 i‡(
fifo_
.
	`em±y
()) {

127 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

128 
fifo_
.
	`p›_‰⁄t
();

130  
img
;

131 
	}
}

133 
	gVideoSour˚
::
	$‰ì_img
(
zifImage
 *
img
)

135 i‡(!
img
) ;

137 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

139 
ˇched_
.
	`push_back
(
img
);

140 
ˇched_
.
	`size
() > 10) {

141 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

142 
ˇched_
.
	`p›_‰⁄t
();

144 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

145 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

146 
dñëe
 
img
;

148 
	}
}

150 
	gVideoSour˚
::
	$run
()

152 
SwsC⁄ãxt
 *
sws
 = 0;

153 
˙t
 = 0;

155 !
quô_
) {

156 i‡(
	`zqp§c_›í
(&
§c_
, 
uæ_
.
	`c_°r
()) < 0) {

157 
	`log
("ERR: o≥¿%†îr\n", 
uæ_
.
	`c_°r
());

159 
	`Ârötf
(
°dîr
, "ERR: %s: c™'à›í uæ=%s\n", 
__FUNCTION__
, 
uæ_
.
	`c_°r
());

160 
	`¶ìp
(5*1000);

164 !
quô_
) {

165 
zq_pkt
 *
pkt
 = 
	`zqp§c_gëpkt
(
§c_
);

166 i‡(!
pkt
) {

167 
	`log
("ERR: %s:Çë brokí!\n", 
uæ_
.
	`c_°r
());

171 i‡(
pkt
->
ty≥
 == 1) {

173 
AVPackë
 
pkg
;

175 
	`av_öô_∑ckë
(&
pkg
);

177 
pkg
.
d©a
 = (
uöt8_t
*)
pkt
->
±r
;

178 
pkg
.
size
 = 
pkt
->
Àn
;

180 
gŸ
;

181 
rc
 = 0;

182 
__åy
 {

183 
rc
 = 
	`avcodec_decode_video2
(
dec_
, 
‰ame_
, &
gŸ
, &
pkg
);

185 
	`__ex˚±
(1) {

186 
gŸ
 = 0;

187 
	`Ârötf
(
°dîr
, "EXCEPT:ávcodec_decode_video2 ....\n");

190 i‡(
gŸ
) {

191 i‡(!
sws
) {

192 
sws
 = 
	`sws_gëC⁄ãxt
(
‰ame_
->
width
, føme_->
height
, 
PIX_FMT_YUV420P
, 
ow_
, 
oh_
, 
fmt_
.
fmt
, 
SWS_FAST_BILINEAR
, 0, 0, 0);

195 
˙t
++;

196 i‡(
˙t
 % 3 == 0) {

197 
	`ßve_‰ame
(
sws
, 
‰ame_
, 
pkt
->
±s
/45000.0);

202 
	`zqp§c_‰ìpkt
(
§c_
, 
pkt
);

205 
	`zqp§c_˛o£
(
§c_
);

207 
	}
}

209 
	gVideoSour˚
::
	$ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
)

211 
zifImage
 *
img
 = 
	`gë_ˇched
(
ow_
, 
oh_
, 
fmt_
.
fmt
);

213 
	`sws_sˇÀ
(
sws
, 
‰ame
->
d©a
, føme->
löesize
, 0, føme->
height
, 
img
->d©a, img->
°ride
);

214 
img
->
width
 = 
ow_
;

215 
img
->
height
 = 
oh_
;

216 
img
->
fmt_ty≥
 = 
fmt_
.
fmt
;

217 
img
->
°amp
 = stamp;

219 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

221 i‡(
fifo_
.
	`size
() >= 5) {

223 
zifImage
 *
tmp
 = 
	`√xt_img
();

224 
	`‰ì_img
(
tmp
);

227 
fifo_
.
	`push_back
(
img
);

229 
	`SëEvít
(
evt_
);

230 
	}
}

232 
zifImage
 *
	gVideoSour˚
::
	$gë_ˇched
(
width
, 
height
, 
fmt
)

234 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

235 i‡(!
ˇched_
.
	`em±y
()) {

236 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

237 
ˇched_
.
	`p›_‰⁄t
();

239 
	`as£π
(
width
 =
img
->width && 
height
 =img->heighà&& 
fmt
 =img->
fmt_ty≥
);

241  
img
;

244 
zifImage
 *
img
 = 
√w
 zifImage;

245 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

246 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
fmt_
.
fmt
, 
width
, 
height
);

247 
img
->
width
 = width;

248 
img
->
height
 = height;

249 
img
->
fmt_ty≥
 = (
PixñF‹m©
)
fmt
;

251 
i
 = 0; i < 4; i++) {

252 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

253 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

256  
img
;

258 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceForZqpkt.h

1 #¥agm®
⁄˚


3 
	~<z⁄ekey/zqpsour˚.h
>

4 
	~<cc++/thªad.h
>

5 
	~<deque
>

7 
	~<libavf‹m©/avf‹m©.h
>

8 
	~<libavcodec/avcodec.h
>

9 
	~<libswsˇÀ/swsˇÀ.h
>

11 
	~"image_sour˚.h
"

14 ˛as†
	cVideoSour˚
 : 
o°
::
Thªad


17 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

18 
IMAGES
 
fifo_
, 
ˇched_
;

19 
o°
::
Muãx
 
cs_images_
;

20 *
§c_
;

21 
boﬁ
 
quô_
;

22 
AVCodecC⁄ãxt
 *
dec_
;

23 
AVFøme
 *
‰ame_
;

24 
HANDLE
 
evt_
;

25 
ow_
, 
oh_
;

26 
˙t_
;

27 
boﬁ
 
›íed_
;

28 
°d
::
°rög
 
uæ_
;

29 
img§c_f‹m©
 
fmt_
;

31 
	eMode


33 
M_TCP
,

34 
M_LOCAL
,

37 
Mode
 
mode_
;

39 
public
:

40 
	$VideoSour˚
(Ë: 
	$›íed_
(
Ál£
)

42 
	}
}

45 
›í
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
);

46 
˛o£
();

49 
zifImage
 *
√xt_img
();

50 
‰ì_img
(
zifImage
 *
img
);

53 
Êush
();

57 
wrôe_yuv420p
(
width
, 
height
, *
d©a
[], 
°ride
[]);

59 
¥iv©e
:

60 
run
();

61 
ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
);

62 
zifImage
 *
gë_ˇched
(
width
, 
height
, 
fmt
);

	@sample/libdetect2/libimagesource/VideoSourceFordshow.cpp

1 
	~"VideoSour˚F‹dshow.h
"

2 
	~<as£π.h
>

5 
	~<libavf‹m©/avf‹m©.h
>

6 
	~<libavdevi˚/avdevi˚.h
>

7 
	~<libavcodec/avcodec.h
>

10 #¥agm®
commít
(
lib
, "strmiids")

12 
IEnumM⁄ikî
 * 
	$_gëEnumî©‹
()

14 
ICª©eDevEnum
 *
í
;

15 
HRESULT
 
hr
 = 
	`CoCª©eIn°™˚
(
CLSID_Sy°emDevi˚Enum
, 0, 
CLSCTX_INPROC_SERVER
, 
	`IID_PPV_ARGS
(&
í
));

16 i‡(
	`SUCCEEDED
(
hr
)) {

17 
IEnumM⁄ikî
 *
em⁄ikî
;

18 
hr
 = 
í
->
	`Cª©eCœssEnumî©‹
(
CLSID_VideoI≈utDevi˚C©eg‹y
, &
em⁄ikî
, 0);

19 
í
->
	`Rñó£
();

21 i‡(
hr
 !
S_FALSE
)

22  
em⁄ikî
;

24 
	`Ârötf
(
°dîr
, "ERR: %s: Cª©eCœssEnumî©‹ f‹ VideoI≈utDevi˚C©eg‹yÉº, code=%08x\n", 
__FUNCTION__
, 
hr
);

28 
	`Ârötf
(
°dîr
, "ERR: %s: CoCª©eIn°™˚ f‹ CLSID_Sy°emDevi˚Enum ERR???, code=%08x\n", 
__FUNCTION__
, 
hr
);

31 
	}
}

33 
	$_di•œyInfo
(
IEnumM⁄ikî
 *
em⁄ikî
)

35 
IM⁄ikî
 *
m⁄ikî
;

36 
ödex
 = 0;

38 
em⁄ikî
->
	`Next
(1, &
m⁄ikî
, 0Ë=
S_OK
) {

39 
IPr›îtyBag
 *
pPr›Bag
;

40 
HRESULT
 
hr
 = 
m⁄ikî
->
	`BödToSt‹age
(0, 0, 
	`IID_PPV_ARGS
(&
pPr›Bag
));

41 i‡(
	`FAILED
(
hr
))

43 
m⁄ikî
->
	`Rñó£
();

47 
	`Ârötf
(
°dîr
, "ödex: %d\t", 
ödex
);

48 
ödex
++;

50 
VARIANT
 
v¨
;

51 
	`V¨ü¡Inô
(&
v¨
);

54 
hr
 = 
pPr›Bag
->
	`Ród
(
L
"Des¸ùti⁄", &
v¨
, 0);

55 i‡(
	`FAILED
(
hr
))

57 
hr
 = 
pPr›Bag
->
	`Ród
(
L
"FrõndlyName", &
v¨
, 0);

59 i‡(
	`SUCCEEDED
(
hr
))

61 
	`Ârötf
(
°dîr
, "%S\n", 
v¨
.
b°rVÆ
);

62 
	`V¨ü¡CÀ¨
(&
v¨
);

65 
hr
 = 
pPr›Bag
->
	`Wrôe
(
L
"FrõndlyName", &
v¨
);

68 
hr
 = 
pPr›Bag
->
	`Ród
(
L
"WaveInID", &
v¨
, 0);

69 i‡(
	`SUCCEEDED
(
hr
))

72 
	`V¨ü¡CÀ¨
(&
v¨
);

75 
hr
 = 
pPr›Bag
->
	`Ród
(
L
"Devi˚P©h", &
v¨
, 0);

76 i‡(
	`SUCCEEDED
(
hr
))

80 
	`V¨ü¡CÀ¨
(&
v¨
);

83 
pPr›Bag
->
	`Rñó£
();

84 
m⁄ikî
->
	`Rñó£
();

86 
	}
}

88 
VideoSour˚F‹dshow
::
	$VideoSour˚F‹dshow
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
)

89 : 
	`uæ_
(
uæ
)

90 , 
	$fmt_
(*
fmt
)

92 
quô_
 = 
Ál£
;

93 
	`°¨t
();

94 
	}
}

96 
VideoSour˚F‹dshow
::~
	$VideoSour˚F‹dshow
()

98 
£m_
.
	`po°
();

99 
quô_
 = 
åue
;

100 
	`joö
();

101 
	}
}

103 
	$time_now
()

105 
timevÆ
 
tv
;

106 
o°
::
	`gëtimeofday
(&
tv
, 0);

107  
tv
.
tv_£c
 +Åv.
tv_u£c
 / 1000000.0;

108 
	}
}

110 
VideoSour˚F‹dshow
::
	$run
()

112 
°d
::
°rög
 
dev_«me
 = 
uæ_
.
	`sub°r
(8);

114 i‡(
dev_«me
 == "list") {

115 
	`åy_li°
();

116 ::
	`exô
(1);

119 
dev_«me
 = "video=" + dev_name;

122 
AVF‹m©C⁄ãxt
 *
fmt˘x
 = 0;

123 
AVI≈utF‹m©
 *
if‹m©
 = 
	`av_föd_öput_f‹m©
("dshow");

124 
AVCodecC⁄ãxt
 *
decodî
 = 0;

125 
video_ödex
 = -1;

126 
AVFøme
 *
‰ame
 = 
	`avcodec_Æloc_‰ame
();

127 
SwsC⁄ãxt
 *
sws
 = 0;

129 
boﬁ
 
›íed
 = 
Ál£
;

130 
size_t
 
˙t
 = 0;

132 !
quô_
) {

133 i‡(!
›íed
) {

134 
rc
 = 
	`avf‹m©_›í_öput
(&
fmt˘x
, 
dev_«me
.
	`c_°r
(), 
if‹m©
, 0);

135 i‡(
rc
 < 0) {

136 
	`Ârötf
(
°dîr
, "ERR: %s: c™'à›í dshowÇamed '%s'\n", 
__FUNCTION__
, 
dev_«me
.
	`c_°r
());

137 
£m_
.
	`waô
(5000);

141 
	`Ârötf
(
°dîr
, "DEBUG: %s: dshowÇamed '%s' o≥√d ok!\n", 
__FUNCTION__
, 
dev_«me
.
	`c_°r
());

142 i‡(
	`avf‹m©_föd_°ªam_öfo
(
fmt˘x
, 0) < 0) {

143 
	`Ârötf
(
°dîr
, "ERR: %s:áv_föd_°ªam_öfÿîr!!!\n", 
__FUNCTION__
);

144 
	`avf‹m©_˛o£_öput
(&
fmt˘x
);

145 
£m_
.
	`waô
(5000);

149 
	`Ârötf
(
°dîr
, "DEBUG: %s: dshowÇamed '%s' quîy ok!, maybêrun\n", 
__FUNCTION__
, 
dev_«me
.
	`c_°r
());

150 
	`av_dump_f‹m©
(
fmt˘x
, 0, 
dev_«me
.
	`c_°r
(), 0);

152 
i
 = 0; i < 
fmt˘x
->
nb_°ªams
; i++) {

153 i‡(
fmt˘x
->
°ªams
[
i
]->
codec
->
codec_ty≥
 =
AVMEDIA_TYPE_VIDEO
) {

154 
video_ödex
 = 
i
;

159 i‡(
video_ödex
 < 0) {

160 
	`Ârötf
(
°dîr
, "DEBUG: %s: dshowÇamed '%s' i†NOT suµ‹àVIDEO!!!\n", 
__FUNCTION__
, 
dev_«me
.
	`c_°r
());

161 
	`avf‹m©_˛o£_öput
(&
fmt˘x
);

162 
£m_
.
	`waô
(5000);

166 
decodî
 = 
fmt˘x
->
°ªams
[
video_ödex
]->
codec
;

168 
	`Ârötf
(
°dîr
, "DEBUG: dshowÇamed '%s' videÿödex=%d\n", 
dev_«me
.
	`c_°r
(), 
video_ödex
);

170 
AVCodec
 *
codec
 = 
	`avcodec_föd_decodî
(
decodî
->
codec_id
);

171 i‡(!
codec
) {

172 
	`Ârötf
(
°dîr
, "ERR: %s: dshowÇamed '%s' c™'àföd decodî ??? codec_id=%d\n", 
__FUNCTION__
, 
dev_«me
.
	`c_°r
(), 
decodî
->
codec_id
);

173 
	`avf‹m©_˛o£_öput
(&
fmt˘x
);

174 
£m_
.
	`waô
(5000);

178 
	`avcodec_›í2
(
decodî
, 
codec
, 0);

180 
	`Ârötf
(
°dîr
, "DEBUG: dshowÇamed '%s' videÿdecodî o≥√d!\n", 
dev_«me
.
	`c_°r
());

182 
›íed
 = 
åue
;

185 i‡(
›íed
) {

186 
AVPackë
 
pkt
;

187 i‡(
	`av_ªad_‰ame
(
fmt˘x
, &
pkt
) < 0) {

188 
	`Ârötf
(
°dîr
, "ERR: dshowÇamed '%s'áv_ªad_‰amêîr!\n", 
__FUNCTION__
, 
dev_«me
.
	`c_°r
());

189 
	`¶ìp
(5000);

190 
›íed
 = 
Ál£
;

191 
	`avf‹m©_˛o£_öput
(&
fmt˘x
);

192 i‡(
sws
) {

193 
	`sws_‰ìC⁄ãxt
(
sws
);

194 
sws
 = 0;

199 i‡(
pkt
.
°ªam_ödex
 !
video_ödex
) {

200 
	`av_‰ì_∑ckë
(&
pkt
);

204 
gŸ
;

205 
	`avcodec_decode_video2
(
decodî
, 
‰ame
, &
gŸ
, &
pkt
);

206 
	`av_‰ì_∑ckë
(&
pkt
);

208 i‡(
gŸ
) {

209 i‡(
decodî
->
width
 !
fmt_
.width || decodî->
height
 !fmt_.heighà|| decodî->
pix_fmt
 !fmt_.
fmt
 || !
sws
) {

210 i‡(
sws
Ë
	`sws_‰ìC⁄ãxt
(sws);

211 
sws
 = 
	`sws_gëC⁄ãxt
(
decodî
->
width
, decodî->
height
, decodî->
pix_fmt
,

212 
fmt_
.
width
, fmt_.
height
, fmt_.
fmt
,

213 
SWS_FAST_BILINEAR
, 0, 0, 0);

214 i‡(!
sws
) {

215 
	`Ârötf
(
°dîr
, "ERR: dshowÇamed '%s' cª©êsw†Áûuª: [%dx%d, %d], [%dx%d, %d]\n", 
dev_«me
.
	`c_°r
(),

216 
decodî
->
width
, decodî->
height
, decodî->
pix_fmt
,

217 
fmt_
.
width
, fmt_.
height
, fmt_.
fmt
);

218 
	`¶ìp
(5000);

220 
›íed
 = 
Ál£
;

221 
	`avf‹m©_˛o£_öput
(&
fmt˘x
);

222 i‡(
sws
) {

223 
	`sws_‰ìC⁄ãxt
(
sws
);

224 
sws
 = 0;

230 i‡(++
˙t
 % 2)

233 
	`as£π
(
sws
);

235 
zifImage
 *
zif
 = 
	`gë_ˇched
(
fmt_
.
width
, fmt_.
height
, fmt_.
fmt
);

236 
	`as£π
(
zif
);

238 
AVPi˘uª
 *
pic
 = (AVPi˘uª*)
zif
->
öã∫Æ_±r
;

240 
	`sws_sˇÀ
(
sws
, 
‰ame
->
d©a
, føme->
löesize
, 0, 
decodî
->
height
, 
pic
->data,Öic->linesize);

242 
zif
->
°amp
 = 
	`time_now
();

244 
	`ßve_‰ame
(
zif
);

249 
	`avcodec_‰ì_‰ame
(&
‰ame
);

250 i‡(
fmt˘x
) {

251 
	`avf‹m©_˛o£_öput
(&
fmt˘x
);

254 i‡(
sws
)

255 
	`sws_‰ìC⁄ãxt
(
sws
);

256 
	}
}

258 
zifImage
 *
VideoSour˚F‹dshow
::
	$√xt_img
()

260 i‡(
£m_pics_
.
	`waô
(50)) {

261 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

262 i‡(
fifo_
.
	`em±y
())

265 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

266 
fifo_
.
	`p›_‰⁄t
();

267  
img
;

272 
	}
}

274 
VideoSour˚F‹dshow
::
	$‰ì_img
(
zifImage
 *
img
)

276 i‡(
img
) {

277 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

279 
ˇched_
.
	`push_back
(
img
);

280 
ˇched_
.
	`size
() > 5) {

281 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

282 
ˇched_
.
	`p›_‰⁄t
();

284 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

285 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

286 
dñëe
 
img
;

289 
	}
}

291 
VideoSour˚F‹dshow
::
	$åy_li°
()

293 
	`CoInôülize
(0);

294 
	`Ârötf
(
°dîr
, "%s: ...\n", 
__FUNCTION__
);

295 
IEnumM⁄ikî
 *
em
 = 
	`_gëEnumî©‹
();

296 i‡(
em
) {

297 
	`_di•œyInfo
(
em
);

298 
em
->
	`Rñó£
();

300 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceFordshow.h

1 #¥agm®
⁄˚


6 
	~"image_sour˚.h
"

8 
	~<°rög
>

9 
	~<cc++/thªad.h
>

10 
	~<deque
>

12 
	~<DShow.h
>

15 
	~<libavf‹m©/avf‹m©.h
>

16 
	~<libavcodec/avcodec.h
>

17 
	~<libswsˇÀ/swsˇÀ.h
>

20 ˛as†
	cVideoSour˚F‹dshow
 : 
o°
::
Thªad


22 
°d
::
°rög
 
uæ_
;

23 
img§c_f‹m©
 
fmt_
;

24 
boﬁ
 
quô_
;

25 
o°
::
Sem≠h‹e
 
£m_
, 
£m_pics_
;

26 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

27 
IMAGES
 
fifo_
, 
ˇched_
;

28 
o°
::
Muãx
 
cs_images_
;

30 
public
:

31 
VideoSour˚F‹dshow
(c⁄° 
img§c_f‹m©
 *
fmt
, c⁄° *
uæ
);

32 ~
VideoSour˚F‹dshow
();

34 
zifImage
 *
√xt_img
();

35 
‰ì_img
(
zifImage
 *
img
);

37 
¥iv©e
:

38 
run
();

39 
åy_li°
();

41 
zifImage
 *
	$gë_ˇched
(
width
, 
height
, 
fmt
)

43 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

44 i‡(!
ˇched_
.
	`em±y
()) {

45 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

46 
ˇched_
.
	`p›_‰⁄t
();

47  
img
;

50 
zifImage
 *
img
 = 
√w
 zifImage;

51 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

52 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
fmt_
.
fmt
, 
width
, 
height
);

53 
img
->
width
 = width;

54 
img
->
height
 = height;

55 
img
->
fmt_ty≥
 = (
PixñF‹m©
)
fmt
;

57 
i
 = 0; i < 4; i++) {

58 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

59 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

61  
img
;

65 
	$ßve_‰ame
(
zifImage
 *
img
)

67 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

69 
fifo_
.
	`push_back
(
img
);

71 i‡(
fifo_
.
	`size
() >= 5) {

72 
	`Ârötf
(
°dîr
, "zqpkt buf overflowed, max=%d!!!!!!!\n", 5);

73 
zifImage
 *
tmp
 = 
	`√xt_img
();

74 
	`‰ì_img
(
tmp
);

78 
£m_pics_
.
	`po°
();

79 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceFromIPCam.cpp

1 #¥agm®
⁄˚


2 
	~"VideoSour˚FromIPCam.h
"

3 
	~<°dio.h
>

4 
	~<as£π.h
>

5 
	~<utûôy
>

7 #i‚de‡
PIX_FMT


8 
	#PIX_FMT
 
PIX_FMT_RGB32


	)

11 
	#__func__
 
__FUNCTION__


	)

13 ˛as†
	cIPCam_Inô


15 
	mpublic
:

16 
	$IPCam_Inô
()

18 
	`IP_NET_DVR_Inô
();

20 
	}
};

22 
IPCam_Inô
 
	g_ùˇm_öô
;

24 
	$max1
(
a
, 
b
)

26  
a
 >
b
 ?á : b;

27 
	}
}

29 
	gVideoSour˚FromIPCam
::
	$VideoSour˚FromIPCam
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
)

31 
uæ_
.
	`assign
(
uæ
);

32 
ow_
 = 
fmt
->
width
, 
oh_
 = fmt->
height
;

34 
evt_
 = 
	`Cª©eEvít
(0, 0, 0, 0);

36 
dec_
 = 0;

37 
sws_
 = 0;

38 
‰ame_
 = 
	`avcodec_Æloc_‰ame
();

40 
	`°¨t
();

41 
	}
}

44 
	gVideoSour˚FromIPCam
::~
	$VideoSour˚FromIPCam
()

46 
Mesßge
 
quô
;

47 
	`po°_mesßge
(
quô
);

48 
	`joö
();

50 i‡(
dec_
Ë{ 
	`avcodec_˛o£
(dec_); 
	`av_‰ì
(dec_); }

51 i‡(
sws_
Ë
	`sws_‰ìC⁄ãxt
(sws_);

52 
	`avcodec_‰ì_‰ame
(&
‰ame_
);

53 
	`Clo£H™dÀ
(
evt_
);

55 
	`Êush
();

56 
	}
}

58 
	gVideoSour˚FromIPCam
::
	$¥ï¨e_dec_sws
(c⁄° 
VIDEO_PARAM
 &
vp
)

60 
o°
::
MuãxLock
 
	`Æ
(
cs_dec_
);

62 i‡(
dec_
Ë{ 
	`avcodec_˛o£
(dec_); 
	`av_‰ì
(dec_); dec_ = 0; }

63 i‡(
sws_
Ë{ 
	`sws_‰ìC⁄ãxt
(sws_); sws_ = 0; }

65 
AVCodec
 *
codec
 = 0;

66 i‡(!
	`°ricmp
("h264", 
vp
.
codec
))

67 
codec
 = 
	`avcodec_föd_decodî
(
AV_CODEC_ID_H264
);

68 i‡(!
	`°ricmp
("m≥g4", 
vp
.
codec
))

69 
codec
 = 
	`avcodec_föd_decodî
(
AV_CODEC_ID_MPEG4
);

71 
	`Ârötf
(
°dîr
, "ERR: %s: o∆y suµ‹àh264 o∏m≥g4, code='%s' NOT suµ‹ãd!\n", 
__func__
, 
vp
.
codec
);

75 
dec_
 = 
	`avcodec_Æloc_c⁄ãxt3
(
codec
);

76 
	`avcodec_›í2
(
dec_
, 
codec
, 0);

78 
dec_
->
exåad©a_size
 = 
vp
.
vﬁ_Àngth
;

80 
dec_
->
exåad©a
 = (
uöt8_t
 *)
	`av_mÆloc
(
	`max1
(
vp
.
vﬁ_Àngth
, 
FF_INPUT_BUFFER_PADDING_SIZE
));

81 
	`mem˝y
(
dec_
->
exåad©a
, 
vp
.
vﬁ_d©a
, vp.
vﬁ_Àngth
);

83 
sws_
 = 
	`sws_gëC⁄ãxt
(
vp
.
width
, vp.
height
, 
PIX_FMT_YUV420P
, 
ow_
, 
oh_
, 
PIX_FMT
, 
SWS_FAST_BILINEAR
, 0, 0, 0);

86 
	}
}

88 
	$dump_°ªam_av_∑øm
(c⁄° 
STREAM_AV_PARAM
 &
∑øm
)

90 
	`Ârötf
(
°dout
, "INFO: RECVVIDEOAUDIOPARAM:\n");

91 
	`Ârötf
(
°dout
, "\tprotocol: %s\n"

93 
∑øm
.
PrŸocﬁName
,Ö¨am.
bHaveAudio
,Ö¨am.
bHaveVideo
);

94 i‡(
∑øm
.
bHaveVideo
) {

95 
	`Ârötf
(
°dout
, "\tVideo:\n"

99 
∑øm
.
videoP¨am
.
codec
,

100 
∑øm
.
videoP¨am
.
width
,Ö¨am.videoP¨am.
height
,

101 
∑øm
.
videoP¨am
.
bôøã
,Ö¨am.videoP¨am.
‰amî©e
);

103 i‡(
∑øm
.
bHaveAudio
) {

104 
	`Ârötf
(
°dout
, "\tAudio:\n"

107 
∑øm
.
audioP¨am
.
codec
,

108 
∑øm
.
audioP¨am
.
ch™√ls
,Ö¨am.audioP¨am.
bô•îßm∂e
,Ö¨am.audioP¨am.
ßm∂î©e
);

110 
	}
}

112 
	gVideoSour˚FromIPCam
::
	$run
()

114 i‡(
uæ_
.
	`em±y
()) {

115 
	`Ârötf
(
°dîr
, "ERR: %s: NO 'ùˇm_ù' sëtög\n", 
__func__
);

120 
	`IP_NET_DVR_SëSètusEvítCÆlBack
(
_cb_°©us
, 
this
);

121 
	`IP_NET_DVR_SëAutoRec⁄√˘
(0, 1);

123 
LONG
 
u£rid
 = 0;

124 
u£rid
 = 
	`IP_NET_DVR_Logö
((*)
uæ_
.
	`c_°r
(), 8091, "admin", "123456", 0);

125 i‡(
u£rid
 == 0) {

126 
	`Ârötf
(
°dîr
, "ERR: %s: IP_NET_DVR_Login failure, url_='%s',Ötzport=8091, user=admin,Öasswd=123456\n",

127 
__func__
, 
uæ_
.
	`c_°r
());

131 
LONG
 
h™dÀ
 = 0;

133 
Mesßge
 
msg
;

134 
	`√xt_mesßge
(
msg
)) {

135 
	`as£π
(
msg
.
id
 == 1 || msg.id == 2);

137 i‡(
msg
.
id
 == 1) {

138 
msg
.
ev
) {

139 
EVENT_CONNECTOK
:

141 
	`IP_NET_DVR_SëAutoRec⁄√˘
(0, 0);

142 
USRE_VIDEOINFO
 
öfo
;

143 
öfo
.
bIsT˝
 = 1;

144 
öfo
.
nVideoP‹t
 = 554;

145 
öfo
.
pU£rD©a
 = 
this
;

146 
öfo
.
nVideoCh™∆e
 = 0;

148 
h™dÀ
 = 
	`IP_NET_DVR_RólPœyEx
(
u£rid
, (*)
uæ_
.
	`c_°r
(), "admö", "123456", 
_cb_d©a
, &
öfo
, 0);

150 i‡(
h™dÀ
 == 0) {

151 
	`Ârötf
(
°dîr
, "ERR: %s: IP_NET_DVR_RólPœyExÑë h™dÀ = 0, ERR\n", 
__func__
);

152 
	`po°_mesßge
(
	`Mesßge
());

157 
EVENT_CONNECTFAILED
:

159 
	`Ârötf
(
°dîr
, "ERR: %s: EVENT_CONNECTFAILEDÑecved!\n", 
__func__
);

160 
	`po°_mesßge
(
	`Mesßge
());

164 
EVENT_RECVVIDEOPARAM
:

166 
VIDEO_PARAM
 
vp
;

167 
	`mem£t
(&
vp
, 0, (vp));

168 
a
 = 
	`IP_NET_DVR_GëVideoP¨am
(
h™dÀ
, &
vp
);

170 i‡(
	`¥ï¨e_dec_sws
(
vp
) < 0) {

171 
	`po°_mesßge
(
	`Mesßge
());

176 
EVENT_RECVVIDEOAUDIOPARAM
:

178 
STREAM_AV_PARAM
 &
∑øm
 = *(STREAM_AV_PARAM*)
msg
.
d©a
;

179 
	`dump_°ªam_av_∑øm
(
∑øm
);

185 i‡(
msg
.
id
 == 2) {

190 
	`IP_NET_DVR_St›RólPœy
(
h™dÀ
);

191 
	`IP_NET_DVR_Logout
(
u£rid
);

193 
	`Ârötf
(
°dîr
, "%s:ÅhªadÅîmö©ed!\n", 
__func__
);

194 
	}
}

196 
	gVideoSour˚FromIPCam
::
	$cb_°©us
(
LONG
 
lU£r
, LONG 
nSèãCode
, *
pRós⁄
)

198 
	`Ârötf
(
°dîr
, "INFO:%s:ÜU£r=%d,ÇSèãCode=%d\n", 
__func__
, 
lU£r
, 
nSèãCode
);

199 i‡(
nSèãCode
 =
EVENT_CONNECTOK
) {

200 
Mesßge
 
	`msg
(
EVENT_CONNECTOK
, 0);

201 
	`po°_mesßge
(
msg
);

203 i‡(
nSèãCode
 =
EVENT_CONNECTFAILED
) {

204 
Mesßge
 
	`msg
(
EVENT_CONNECTFAILED
, 0);

205 
	`po°_mesßge
(
msg
);

207 i‡(
nSèãCode
 =
EVENT_RECVVIDEOPARAM
) {

208 
Mesßge
 
	`msg
(
EVENT_RECVVIDEOPARAM
, 0);

209 
	`po°_mesßge
(
msg
);

211 i‡(
nSèãCode
 =
EVENT_RECVVIDEOAUDIOPARAM
) {

212 *
±r
 = 
	`mÆloc
((
STREAM_AV_PARAM
));

213 
	`mem˝y
(
±r
, 
pRós⁄
, (
STREAM_AV_PARAM
));

215 
Mesßge
 
	`msg
(
EVENT_RECVVIDEOAUDIOPARAM
, 
±r
);

216 
	`po°_mesßge
(
msg
);

218 
	}
}

222 
	mÊag
;

223 
	md©a
;

224 
	m‰ame_ödex
;

225 
	mkey‰ame_ödex
;

226 } 
	tVIDEO_FRAME_HEADER
;

228 
	gVideoSour˚FromIPCam
::
	$cb_d©a
(
LONG
 
lRólH™dÀ
, 
DWORD
 
dwD©aTy≥
, 
BYTE
 *
d©a
, DWORD 
Àn
, 
LPFRAME_EXTDATA
 
pExtD©a
)

230 i‡(
dwD©aTy≥
 == 0) {

232 
°amp
 = 
pExtD©a
->
time°amp
;

233 
VIDEO_FRAME_HEADER
 *
pHódî
 = (VIDEO_FRAME_HEADER *)(
d©a
 + 
Àn
 - (VIDEO_FRAME_HEADER));

234 i‡(
pHódî
->
Êag
 == 0x1a2b3c4d) {

235 
Àn
 -(
VIDEO_FRAME_HEADER
);

238 
	`ßve_video
(
d©a
, 
Àn
, 
°amp
);

240 i‡(
dwD©aTy≥
 == 1) {

243 i‡(
dwD©aTy≥
 == 2) {

244 
STREAM_AV_PARAM
 &
∑øm
 = *(STREAM_AV_PARAM*)
d©a
;

245 
	`dump_°ªam_av_∑øm
(
∑øm
);

247 
	}
}

249 
	gVideoSour˚FromIPCam
::
	$ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
)

251 
zifImage
 *
img
 = 
	`gë_ˇched
(
ow_
, 
oh_
, 
PIX_FMT
);

253 
	`sws_sˇÀ
(
sws
, 
‰ame
->
d©a
, føme->
löesize
, 0, føme->
height
, 
img
->d©a, img->
°ride
);

254 
img
->
width
 = 
ow_
;

255 
img
->
height
 = 
oh_
;

256 
img
->
fmt_ty≥
 = 
PIX_FMT
;

257 
img
->
°amp
 = stamp;

259 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

261 
fifo_max_size
 = 5;

262 i‡(
fifo_
.
	`size
(Ë>
fifo_max_size
) {

264 
zifImage
 *
tmp
 = 
	`√xt_img
();

265 
	`‰ì_img
(
tmp
);

268 
fifo_
.
	`push_back
(
img
);

270 
	`SëEvít
(
evt_
);

271 
	}
}

273 
zifImage
 *
	gVideoSour˚FromIPCam
::
	$gë_ˇched
(
width
, 
height
, 
fmt
)

275 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

276 i‡(!
ˇched_
.
	`em±y
()) {

277 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

278 
ˇched_
.
	`p›_‰⁄t
();

280 
	`as£π
(
width
 =
img
->width && 
height
 =img->heighà&& 
fmt
 =img->
fmt_ty≥
);

282  
img
;

285 
zifImage
 *
img
 = 
√w
 zifImage;

286 
img
->
öã∫Æ_±r
 = 
√w
 
AVPi˘uª
;

287 
	`avpi˘uª_Æloc
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
, 
PIX_FMT
, 
width
, 
height
);

288 
img
->
width
 = width;

289 
img
->
height
 = height;

290 
img
->
fmt_ty≥
 = (
PixñF‹m©
)
fmt
;

292 
i
 = 0; i < 4; i++) {

293 
img
->
d©a
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->data[i];

294 
img
->
°ride
[
i
] = ((
AVPi˘uª
*)img->
öã∫Æ_±r
)->
löesize
[i];

297  
img
;

299 
	}
}

301 
	gVideoSour˚FromIPCam
::
	$ßve_video
(
uöt8_t
 *
d©a
, 
Àn
, 
°amp
)

303 
AVPackë
 
pkg
;

304 
	`av_öô_∑ckë
(&
pkg
);

306 
pkg
.
d©a
 = data;

307 
pkg
.
size
 = 
Àn
;

309 
gŸ
;

310 
rc
 = 
	`avcodec_decode_video2
(
dec_
, 
‰ame_
, &
gŸ
, &
pkg
);

311 i‡(
gŸ
) {

312 
	`ßve_‰ame
(
sws_
, 
‰ame_
, 
°amp
);

314 
	}
}

316 
	gVideoSour˚FromIPCam
::
	$Êush
()

318 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

320 !
fifo_
.
	`em±y
()) {

321 
zifImage
 *
tmp
 = 
fifo_
.
	`‰⁄t
();

322 
fifo_
.
	`p›_‰⁄t
();

323 
	`‰ì_img
(
tmp
);

325 
	}
}

327 
zifImage
 *
	gVideoSour˚FromIPCam
::
	$√xt_img
()

329 
	`WaôF‹SögÀObje˘
(
evt_
, 500);

331 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

332 i‡(
fifo_
.
	`em±y
()) {

336 
zifImage
 *
img
 = 
fifo_
.
	`‰⁄t
();

337 
fifo_
.
	`p›_‰⁄t
();

339  
img
;

340 
	}
}

342 
	gVideoSour˚FromIPCam
::
	$‰ì_img
(
zifImage
 *
img
)

344 i‡(!
img
) ;

346 
o°
::
MuãxLock
 
	`Æ
(
cs_images_
);

348 
ˇched_
.
	`push_back
(
img
);

350 
fifo_max_ˇched
 = 20;

351 
ˇched_
.
	`size
(Ë> 
fifo_max_ˇched
) {

352 
zifImage
 *
img
 = 
ˇched_
.
	`‰⁄t
();

353 
ˇched_
.
	`p›_‰⁄t
();

355 
	`avpi˘uª_‰ì
((
AVPi˘uª
*)
img
->
öã∫Æ_±r
);

356 
	`dñëe
 (
AVPi˘uª
*)
img
->
öã∫Æ_±r
;

357 
dñëe
 
img
;

359 
	}
}

	@sample/libdetect2/libimagesource/VideoSourceFromIPCam.h

1 #ifde‡
SUPPORT_IPCAM


2 
	~<cc++/thªad.h
>

3 
	~<NëSDKDLL.h
>

4 
	~<DŒPœyî.h
>

5 
	~<deque
>

6 
	~"image_sour˚.h
"

9 
	~<libavcodec/avcodec.h
>

10 
	~<libswsˇÀ/swsˇÀ.h
>

13 ˛as†
	cVideoSour˚FromIPCam
 : 
o°
::
Thªad


15 
°d
::
°rög
 
uæ_
;

17 
SwsC⁄ãxt
 *
sws_
;

18 
AVCodecC⁄ãxt
 *
dec_
;

19 
AVFøme
 *
‰ame_
;

21 
	sMesßge


23 
id
;

24 *
d©a
;

25 
íumNëS©©eEvít
 
ev
;

26 
medü_ty≥
;

28 
Mesßge
 (Ë: 
id
(0) {}

29 
Mesßge
 (
íumNëS©©eEvít
 
ev
, *
±r
Ë: 
id
(1),Év”v), 
d©a
(ptr) {}

30 
Mesßge
 (
medü_ty≥
, *
±r
Ë: 
id
(2), medü_ty≥(medü_ty≥), 
d©a
(ptr) {}

33 
°d
::
	tdeque
<
	tMesßge
> 
	tMESSAGES
;

34 
MESSAGES
 
msgs_
;

35 
o°
::
Muãx
 
cs_msg_
;

36 
o°
::
Sem≠h‹e
 
£m_msg_
;

37 
o°
::
Muãx
 
cs_dec_
;

39 
°d
::
	tdeque
<
	tzifImage
*> 
	tIMAGES
;

40 
IMAGES
 
fifo_
, 
ˇched_
;

41 
o°
::
Muãx
 
cs_images_
;

43 
HANDLE
 
evt_
;

44 
ow_
, 
oh_
;

46 
public
:

47 
VideoSour˚FromIPCam
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
);

48 ~
VideoSour˚FromIPCam
();

51 
zifImage
 *
√xt_img
();

52 
‰ì_img
(
zifImage
 *
img
);

53 
Êush
();

55 
¥iv©e
:

56 
run
();

58 
LONG
 
CALLBACK
 
	$_cb_d©a
(
LONG
 
lRólH™dÀ
, 
DWORD
 
dwD©aTy≥
, 
BYTE
 *
pBuf„r
, DWORD 
dwBufSize
, 
LPFRAME_EXTDATA
 
pExtD©a
)

60 i‡(
pExtD©a
 &&ÖExtD©a->
pU£rD©a
) {

61 ((
VideoSour˚FromIPCam
*)
pExtD©a
->
pU£rD©a
)->
	`cb_d©a
(
lRólH™dÀ
, 
dwD©aTy≥
, 
pBuf„r
, 
dwBufSize
,ÖExtData);

64 
	}
}

65 
cb_d©a
(
LONG
 
lRólH™dÀ
, 
DWORD
 
dwD©aTy≥
, 
BYTE
 *
pBuf„r
, DWORD 
dwBufSize
, 
LPFRAME_EXTDATA
 
pExtD©a
);

67 
LONG
 
CALLBACK
 
	$_cb_°©us
(
LONG
 
lU£r
, LONG 
nSèãCode
, *
pRe•⁄£
, *
pU£r
)

69 ((
VideoSour˚FromIPCam
*)
pU£r
)->
	`cb_°©us
(
lU£r
, 
nSèãCode
, 
pRe•⁄£
);

71 
	}
}

72 
cb_°©us
(
LONG
 
lU£r
, LONG 
nSèãCode
, *
pRós⁄
);

74 
ßve_video
(
uöt8_t
 *
d©a
, 
Àn
, 
°amp
);

75 
¥ï¨e_dec_sws
(c⁄° 
VIDEO_PARAM
 &
vp
);

77 
boﬁ
 
	$√xt_mesßge
(
Mesßge
 &
msg
)

79 
boﬁ
 
gŸ
 = 
Ál£
;

81 
ªåy
:

82 
£m_msg_
.
	`waô
();

83 
cs_msg_
.
	`íãr
();

84 i‡(!
msgs_
.
	`em±y
()) {

85 
msg
 = 
msgs_
.
	`‰⁄t
();

86 
msgs_
.
	`p›_‰⁄t
();

87 
gŸ
 = 
åue
;

89 
cs_msg_
.
	`Àave
();

91 i‡(!
gŸ
Ë
ªåy
;

93 i‡(
msg
.
id
 == 0)

94  
Ál£
;

96  
åue
;

97 
	}
}

99 
	$po°_mesßge
(c⁄° 
Mesßge
 &
msg
)

101 
o°
::
MuãxLock
 
	`Æ
(
cs_msg_
);

102 
msgs_
.
	`push_back
(
msg
);

103 
£m_msg_
.
	`po°
();

104 
	}
}

106 
ßve_‰ame
(
SwsC⁄ãxt
 *
sws
, 
AVFøme
 *
‰ame
, 
°amp
);

107 
zifImage
 *
gë_ˇched
(
width
, 
height
, 
fmt
);

	@sample/libdetect2/libimagesource/cJSON.c

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<m©h.h
>

29 
	~<°dlib.h
>

30 
	~<Êﬂt.h
>

31 
	~<limôs.h
>

32 
	~<˘y≥.h
>

33 
	~"cJSON.h
"

35 c⁄° *
	gï
;

37 c⁄° *
	$cJSON_GëEº‹På
(Ë{ 
ï
;
	}
}

39 
	$cJSON_°rˇ£cmp
(c⁄° *
s1
,c⁄° *
s2
)

41 i‡(!
s1
Ë (s1==
s2
)?0:1;if (!s2)  1;

42 ; 
	`tﬁowî
(*
s1
Ë=tﬁowî(*
s2
); ++s1, ++s2) if(*s1 == 0)  0;

43  
	`tﬁowî
(*(c⁄° *)
s1
Ë-Åﬁowî(*(c⁄° *)
s2
);

44 
	}
}

46 *(*
	gcJSON_mÆloc
)(
size_t
 
	gsz
Ë
mÆloc
;

47 (*
cJSON_‰ì
)(*
±r
Ë
‰ì
;

49 * 
	$cJSON_°rdup
(c⁄° * 
°r
)

51 
size_t
 
Àn
;

52 * 
c›y
;

54 
Àn
 = 
	`°æí
(
°r
) + 1;

55 i‡(!(
c›y
 = (*)
	`cJSON_mÆloc
(
Àn
)))  0;

56 
	`mem˝y
(
c›y
,
°r
,
Àn
);

57  
c›y
;

58 
	}
}

60 
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

62 i‡(!
hooks
) {

63 
cJSON_mÆloc
 = 
mÆloc
;

64 
cJSON_‰ì
 = 
‰ì
;

68 
cJSON_mÆloc
 = (
hooks
->
mÆloc_‚
)?hooks->mÆloc_‚:
mÆloc
;

69 
cJSON_‰ì
 = (
hooks
->
‰ì_‚
)?hooks->‰ì_‚:
‰ì
;

70 
	}
}

73 
cJSON
 *
	$cJSON_New_Iãm
()

75 
cJSON
* 
node
 = (cJSON*)
	`cJSON_mÆloc
((cJSON));

76 i‡(
node
Ë
	`mem£t
“ode,0,(
cJSON
));

77  
node
;

78 
	}
}

81 
	$cJSON_Dñëe
(
cJSON
 *
c
)

83 
cJSON
 *
√xt
;

84 
c
)

86 
√xt
=
c
->next;

87 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
chûd
Ë
	`cJSON_Dñëe
(c->child);

88 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
vÆue°rög
Ë
	`cJSON_‰ì
(c->valuestring);

89 i‡(
c
->
°rög
Ë
	`cJSON_‰ì
(c->string);

90 
	`cJSON_‰ì
(
c
);

91 
c
=
√xt
;

93 
	}
}

96 c⁄° *
	$∑r£_numbî
(
cJSON
 *
ôem
,c⁄° *
num
)

98 
n
=0,
sign
=1,
sˇÀ
=0;
subsˇÀ
=0,
signsubsˇÀ
=1;

100 i‡(*
num
=='-'Ë
sign
=-1,num++;

101 i‡(*
num
=='0')Çum++;

102 i‡(*
num
>='1' && *num<='9'Ëdÿ
n
=(n*10.0)+(*num++ -'0'); *num>='0' && *num<='9');

103 i‡(*
num
=='.' &&Çum[1]>='0' &&Çum[1]<='9'Ë{num++; dÿ
n
=“*10.0)+(*num++ -'0'),
sˇÀ
--; *num>='0' && *num<='9');}

104 i‡(*
num
=='e' || *num=='E')

105 { 
num
++;i‡(*num=='+'Ënum++; i‡(*num=='-'Ë
signsubsˇÀ
=-1,num++;

106 *
num
>='0' && *num<='9'Ë
subsˇÀ
=(subscale*10)+(*num++ - '0');

109 
n
=
sign
*n*
	`pow
(10.0,(
sˇÀ
+
subsˇÀ
*
signsubsˇÀ
));

111 
ôem
->
vÆuedoubÀ
=
n
;

112 
ôem
->
vÆueöt
=()
n
;

113 
ôem
->
ty≥
=
cJSON_Numbî
;

114  
num
;

115 
	}
}

118 *
	$¥öt_numbî
(
cJSON
 *
ôem
)

120 *
°r
;

121 
d
=
ôem
->
vÆuedoubÀ
;

122 i‡(
	`Ábs
((()
ôem
->
vÆueöt
)-
d
)<=
DBL_EPSILON
 && d<=
INT_MAX
 && d>=
INT_MIN
)

124 
°r
=(*)
	`cJSON_mÆloc
(21);

125 i‡(
°r
Ë
	`•rötf
(°r,"%d",
ôem
->
vÆueöt
);

129 
°r
=(*)
	`cJSON_mÆloc
(64);

130 i‡(
°r
)

132 i‡(
	`Ábs
(
	`Êo‹
(
d
)-d)<=
DBL_EPSILON
 && fabs(d)<1.0e60)
	`•rötf
(
°r
,"%.0f",d);

133 i‡(
	`Ábs
(
d
)<1.0e-6 || fabs(d)>1.0e9Ë
	`•rötf
(
°r
,"%e",d);

134 
	`•rötf
(
°r
,"%f",
d
);

137  
°r
;

138 
	}
}

140 
	$∑r£_hex4
(c⁄° *
°r
)

142 
h
=0;

143 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

144 
h
=h<<4;
°r
++;

145 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

146 
h
=h<<4;
°r
++;

147 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

148 
h
=h<<4;
°r
++;

149 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

150  
h
;

151 
	}
}

154 c⁄° 
	gfú°ByãM¨k
[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

155 c⁄° *
	$∑r£_°rög
(
cJSON
 *
ôem
,c⁄° *
°r
)

157 c⁄° *
±r
=
°r
+1;*
±r2
;*
out
;
Àn
=0;
uc
,
uc2
;

158 i‡(*
°r
!='\"'Ë{
ï
=str; 0;}

160 *
±r
!='\"' && *±∏&& ++
Àn
) if (*ptr++ == '\\')Ötr++;

162 
out
=(*)
	`cJSON_mÆloc
(
Àn
+1);

163 i‡(!
out
)  0;

165 
±r
=
°r
+1;
±r2
=
out
;

166 *
±r
!='\"' && *ptr)

168 i‡(*
±r
!='\\'Ë*
±r2
++=*ptr++;

171 
±r
++;

172 *
±r
)

174 'b': *
±r2
++='\b'; ;

175 'f': *
±r2
++='\f'; ;

176 'n': *
±r2
++='\n'; ;

177 'r': *
±r2
++='\r'; ;

178 't': *
±r2
++='\t'; ;

180 
uc
=
	`∑r£_hex4
(
±r
+1);ptr+=4;

182 i‡((
uc
>=0xDC00 && uc<=0xDFFF) || uc==0) ;

184 i‡(
uc
>=0xD800 && uc<=0xDBFF)

186 i‡(
±r
[1]!='\\' ||Ötr[2]!='u') ;

187 
uc2
=
	`∑r£_hex4
(
±r
+3);ptr+=6;

188 i‡(
uc2
<0xDC00 || uc2>0xDFFF) ;

189 
uc
=0x10000 + (((uc&0x3FF)<<10Ë| (
uc2
&0x3FF));

192 
Àn
=4;i‡(
uc
<0x80ËÀn=1;i‡(uc<0x800ËÀn=2;i‡(uc<0x10000ËÀn=3; 
±r2
+=len;

194 
Àn
) {

195 4: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

196 3: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

197 2: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

198 1: *--
±r2
 =(
uc
 | 
fú°ByãM¨k
[
Àn
]);

200 
±r2
+=
Àn
;

202 : *
±r2
++=*
±r
; ;

204 
±r
++;

207 *
±r2
=0;

208 i‡(*
±r
=='\"')Ötr++;

209 
ôem
->
vÆue°rög
=
out
;

210 
ôem
->
ty≥
=
cJSON_Såög
;

211  
±r
;

212 
	}
}

215 *
	$¥öt_°rög_±r
(c⁄° *
°r
)

217 c⁄° *
±r
;*
±r2
,*
out
;
Àn
=0;
tokí
;

219 i‡(!
°r
Ë 
	`cJSON_°rdup
("");

220 
±r
=
°r
;(
tokí
=*±rË&& ++
Àn
Ë{i‡(
	`°rchr
("\"\\\b\f\n\r\t",token))Üen++; if (token<32)Üen+=5;ptr++;}

222 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

223 i‡(!
out
)  0;

225 
±r2
=
out
;
±r
=
°r
;

226 *
±r2
++='\"';

227 *
±r
)

229 i‡(()*
±r
>31 && *±r!='\"' && *±r!='\\'Ë*
±r2
++=*ptr++;

232 *
±r2
++='\\';

233 
tokí
=*
±r
++)

235 '\\': *
±r2
++='\\'; ;

236 '\"': *
±r2
++='\"'; ;

237 '\b': *
±r2
++='b'; ;

238 '\f': *
±r2
++='f'; ;

239 '\n': *
±r2
++='n'; ;

240 '\r': *
±r2
++='r'; ;

241 '\t': *
±r2
++='t'; ;

242 : 
	`•rötf
(
±r2
,"u%04x",
tokí
);ptr2+=5; ;

246 *
±r2
++='\"';*ptr2++=0;

247  
out
;

248 
	}
}

250 *
	$¥öt_°rög
(
cJSON
 *
ôem
Ë{ 
	`¥öt_°rög_±r
(ôem->
vÆue°rög
);
	}
}

253 c⁄° *
∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

254 *
¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
);

255 c⁄° *
∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

256 *
¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
);

257 c⁄° *
∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

258 *
¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
);

261 c⁄° *
	$skù
(c⁄° *
ö
Ë{ö && *ö && ()*ö<=32Ëö++;  in;
	}
}

264 
cJSON
 *
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
)

266 c⁄° *
íd
=0;

267 
cJSON
 *
c
=
	`cJSON_New_Iãm
();

268 
ï
=0;

269 i‡(!
c
)  0;

271 
íd
=
	`∑r£_vÆue
(
c
,
	`skù
(
vÆue
));

272 i‡(!
íd
Ë{
	`cJSON_Dñëe
(
c
); 0;}

275 i‡(
ªquúe_nuŒ_ãrmö©ed
Ë{
íd
=
	`skù
”nd);i‡(*ídË{
	`cJSON_Dñëe
(
c
);
ï
=end; 0;}}

276 i‡(
ªtu∫_∑r£_íd
Ë*ªtu∫_∑r£_íd=
íd
;

277  
c
;

278 
	}
}

280 
cJSON
 *
	$cJSON_P¨£
(c⁄° *
vÆue
Ë{ 
	`cJSON_P¨£WôhO±s
(vÆue,0,0);
	}
}

283 *
	$cJSON_Pröt
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,1);
	}
}

284 *
	$cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,0);
	}
}

287 c⁄° *
	$∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

289 i‡(!
vÆue
)  0;

290 i‡(!
	`°∫cmp
(
vÆue
,"nuŒ",4)Ë{ 
ôem
->
ty≥
=
cJSON_NULL
;  value+4; }

291 i‡(!
	`°∫cmp
(
vÆue
,"Ál£",5)Ë{ 
ôem
->
ty≥
=
cJSON_FÆ£
;  value+5; }

292 i‡(!
	`°∫cmp
(
vÆue
,"åue",4)Ë{ 
ôem
->
ty≥
=
cJSON_True
; iãm->
vÆueöt
=1;  value+4; }

293 i‡(*
vÆue
=='\"'Ë{  
	`∑r£_°rög
(
ôem
,value); }

294 i‡(*
vÆue
=='-' || (*vÆue>='0' && *vÆue<='9')Ë{  
	`∑r£_numbî
(
ôem
,value); }

295 i‡(*
vÆue
=='['Ë{  
	`∑r£_¨øy
(
ôem
,value); }

296 i‡(*
vÆue
=='{'Ë{  
	`∑r£_obje˘
(
ôem
,value); }

298 
ï
=
vÆue
; 0;

299 
	}
}

302 *
	$¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
)

304 *
out
=0;

305 i‡(!
ôem
)  0;

306 (
ôem
->
ty≥
)&255)

308 
cJSON_NULL
: 
out
=
	`cJSON_°rdup
("null"); ;

309 
cJSON_FÆ£
: 
out
=
	`cJSON_°rdup
("false");;

310 
cJSON_True
: 
out
=
	`cJSON_°rdup
("true"); ;

311 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
);;

312 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
);;

313 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
);;

314 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
);;

316  
out
;

317 
	}
}

320 c⁄° *
	$∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

322 
cJSON
 *
chûd
;

323 i‡(*
vÆue
!='['Ë{
ï
=value; 0;}

325 
ôem
->
ty≥
=
cJSON_Aºay
;

326 
vÆue
=
	`skù
(value+1);

327 i‡(*
vÆue
==']')  value+1;

329 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

330 i‡(!
ôem
->
chûd
)  0;

331 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value)));

332 i‡(!
vÆue
)  0;

334 *
vÆue
==',')

336 
cJSON
 *
√w_ôem
;

337 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

338 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

339 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

340 i‡(!
vÆue
)  0;

343 i‡(*
vÆue
==']')  value+1;

344 
ï
=
vÆue
; 0;

345 
	}
}

348 *
	$¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
)

350 **
íåõs
;

351 *
out
=0,*
±r
,*
ªt
;
Àn
=5;

352 
cJSON
 *
chûd
=
ôem
->child;

353 
numíåõs
=0,
i
=0,
Áû
=0;

356 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

358 i‡(!
numíåõs
)

360 
out
=(*)
	`cJSON_mÆloc
(3);

361 i‡(
out
Ë
	`°r˝y
(out,"[]");

362  
out
;

365 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

366 i‡(!
íåõs
)  0;

367 
	`mem£t
(
íåõs
,0,
numíåõs
*(*));

369 
chûd
=
ôem
->child;

370 
chûd
 && !
Áû
)

372 
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
);

373 
íåõs
[
i
++]=
ªt
;

374 i‡(
ªt
Ë
Àn
+=
	`°æí
‘ë)+2+(
fmt
?1:0); 
Áû
=1;

375 
chûd
=chûd->
√xt
;

379 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

381 i‡(!
out
Ë
Áû
=1;

384 i‡(
Áû
)

386 
i
=0;i<
numíåõs
;i++Ëi‡(
íåõs
[i]Ë
	`cJSON_‰ì
(entries[i]);

387 
	`cJSON_‰ì
(
íåõs
);

392 *
out
='[';

393 
±r
=
out
+1;*ptr=0;

394 
i
=0;i<
numíåõs
;i++)

396 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

397 i‡(
i
!=
numíåõs
-1Ë{*
±r
++=',';if(
fmt
)*ptr++=' ';*ptr=0;}

398 
	`cJSON_‰ì
(
íåõs
[
i
]);

400 
	`cJSON_‰ì
(
íåõs
);

401 *
±r
++=']';*ptr++=0;

402  
out
;

403 
	}
}

406 c⁄° *
	$∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

408 
cJSON
 *
chûd
;

409 i‡(*
vÆue
!='{'Ë{
ï
=value; 0;}

411 
ôem
->
ty≥
=
cJSON_Obje˘
;

412 
vÆue
=
	`skù
(value+1);

413 i‡(*
vÆue
=='}')  value+1;

415 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

416 i‡(!
ôem
->
chûd
)  0;

417 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value)));

418 i‡(!
vÆue
)  0;

419 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

420 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

421 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

422 i‡(!
vÆue
)  0;

424 *
vÆue
==',')

426 
cJSON
 *
√w_ôem
;

427 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

428 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

429 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value+1)));

430 i‡(!
vÆue
)  0;

431 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

432 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

433 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

434 i‡(!
vÆue
)  0;

437 i‡(*
vÆue
=='}')  value+1;

438 
ï
=
vÆue
; 0;

439 
	}
}

442 *
	$¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
)

444 **
íåõs
=0,**
«mes
=0;

445 *
out
=0,*
±r
,*
ªt
,*
°r
;
Àn
=7,
i
=0,
j
;

446 
cJSON
 *
chûd
=
ôem
->child;

447 
numíåõs
=0,
Áû
=0;

449 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

451 i‡(!
numíåõs
)

453 
out
=(*)
	`cJSON_mÆloc
(
fmt
?
dïth
+4:3);

454 i‡(!
out
)  0;

455 
±r
=
out
;*ptr++='{';

456 i‡(
fmt
Ë{*
±r
++='\n';
i
=0;i<
dïth
-1;i++) *ptr++='\t';}

457 *
±r
++='}';*ptr++=0;

458  
out
;

461 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

462 i‡(!
íåõs
)  0;

463 
«mes
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

464 i‡(!
«mes
Ë{
	`cJSON_‰ì
(
íåõs
); 0;}

465 
	`mem£t
(
íåõs
,0,(*)*
numíåõs
);

466 
	`mem£t
(
«mes
,0,(*)*
numíåõs
);

469 
chûd
=
ôem
->chûd;
dïth
++;i‡(
fmt
Ë
Àn
+=depth;

470 
chûd
)

472 
«mes
[
i
]=
°r
=
	`¥öt_°rög_±r
(
chûd
->
°rög
);

473 
íåõs
[
i
++]=
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
);

474 i‡(
°r
 && 
ªt
Ë
Àn
+=
	`°æí
‘ë)+°æí(°r)+2+(
fmt
?2+
dïth
:0); 
Áû
=1;

475 
chûd
=chûd->
√xt
;

479 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

480 i‡(!
out
Ë
Áû
=1;

483 i‡(
Áû
)

485 
i
=0;i<
numíåõs
;i++Ë{i‡(
«mes
[i]Ë
	`cJSON_‰ì
“ames[i]);i‡(
íåõs
[i]) cJSON_free(entries[i]);}

486 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

491 *
out
='{';
±r
=out+1;i‡(
fmt
)*ptr++='\n';*ptr=0;

492 
i
=0;i<
numíåõs
;i++)

494 i‡(
fmt
Ë
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

495 
	`°r˝y
(
±r
,
«mes
[
i
]);±r+=
	`°æí
(names[i]);

496 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

497 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

498 i‡(
i
!=
numíåõs
-1Ë*
±r
++=',';

499 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

500 
	`cJSON_‰ì
(
«mes
[
i
]);cJSON_‰ì(
íåõs
[i]);

503 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

504 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

505 *
±r
++='}';*ptr++=0;

506  
out
;

507 
	}
}

510 
	$cJSON_GëAºaySize
(
cJSON
 *
¨øy
Ë{cJSON *
c
˜ºay->
chûd
;
i
=0;c)i++,c=c->
√xt
; i;
	}
}

511 
cJSON
 *
	$cJSON_GëAºayIãm
(
cJSON
 *
¨øy
,
ôem
Ë{cJSON *
c
˜ºay->
chûd
; ¯&& iãm>0Ëôem--,c=c->
√xt
;  c;
	}
}

512 
cJSON
 *
	$cJSON_GëObje˘Iãm
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{cJSON *
c
=obje˘->
chûd
; ¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëc=c->
√xt
;  c;
	}
}

515 
	$suffix_obje˘
(
cJSON
 *
¥ev
,cJSON *
ôem
Ë{¥ev->
√xt
=ôem;ôem->¥evıªv;
	}
}

517 
cJSON
 *
	$¸óã_ª„ªn˚
(
cJSON
 *
ôem
Ë{cJSON *
ªf
=
	`cJSON_New_Iãm
();i‡(!ªfË 0;
	`mem˝y
‘ef,ôem,(cJSON));ªf->
°rög
=0;ªf->
ty≥
|=
cJSON_IsRe„ªn˚
;ªf->
√xt
Ùef->
¥ev
=0;Ñef;
	}
}

520 
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{cJSON *
c
˜ºay->
chûd
;i‡(!ôemË; i‡(!cË{¨øy->chûd=ôem;} {¯&& c->
√xt
Ëc=c->√xt; 
	`suffix_obje˘
(c,ôem);}
	}
}

521 
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(ôem->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

522 
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{
	`cJSON_AddIãmToAºay
◊ºay,
	`¸óã_ª„ªn˚
(ôem));
	}
}

523 
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{
	`cJSON_AddIãmToObje˘
(obje˘,°rög,
	`¸óã_ª„ªn˚
(ôem));
	}
}

525 
cJSON
 *
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c)  0;

526 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

527 
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
◊ºay,which));
	}
}

528 
cJSON
 *
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëi++,c=c->
√xt
;i‡(cË 
	`cJSON_DëachIãmFromAºay
(obje˘,i); 0;
	}
}

529 
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(obje˘,°rög));
	}
}

532 
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c) ;

533 
√wôem
->
√xt
=
c
->√xt;√wôem->
¥ev
=c->prev;if (newitem->next)Çewitem->next->prev=newitem;

534 i‡(
c
==
¨øy
->
chûd
Ë¨øy->chûd=
√wôem
; √wôem->
¥ev
->
√xt
Úewôem;c->√xt=c->¥ev=0;
	`cJSON_Dñëe
(c);
	}
}

535 
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
){
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög))i++,c=c->
√xt
;if(c){√wôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_Rïœ˚IãmInAºay
(obje˘,i,√wôem);}
	}
}

538 
cJSON
 *
	$cJSON_Cª©eNuŒ
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_NULL
; iãm;
	}
}

539 
cJSON
 *
	$cJSON_Cª©eTrue
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_True
; iãm;
	}
}

540 
cJSON
 *
	$cJSON_Cª©eFÆ£
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_FÆ£
; iãm;
	}
}

541 
cJSON
 *
	$cJSON_Cª©eBoﬁ
(
b
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=b?
cJSON_True
:
cJSON_FÆ£
; iãm;
	}
}

542 
cJSON
 *
	$cJSON_Cª©eNumbî
(
num
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Numbî
;ôem->
vÆuedoubÀ
Úum;ôem->
vÆueöt
=(Íum;} iãm;
	}
}

543 
cJSON
 *
	$cJSON_Cª©eSåög
(c⁄° *
°rög
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Såög
;ôem->
vÆue°rög
=
	`cJSON_°rdup
(°rög);} iãm;
	}
}

544 
cJSON
 *
	$cJSON_Cª©eAºay
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Aºay
; iãm;
	}
}

545 
cJSON
 *
	$cJSON_Cª©eObje˘
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Obje˘
; iãm;
	}
}

548 
cJSON
 *
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

549 
cJSON
 *
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

550 
cJSON
 *
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

551 
cJSON
 *
	$cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eSåög
(°rögs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

554 
cJSON
 *
	$cJSON_Du∂iˇã
(
cJSON
 *
ôem
,
ªcur£
)

556 
cJSON
 *
√wôem
,*
˝å
,*
≈å
=0,*
√wchûd
;

558 i‡(!
ôem
)  0;

560 
√wôem
=
	`cJSON_New_Iãm
();

561 i‡(!
√wôem
)  0;

563 
√wôem
->
ty≥
=
ôem
->ty≥&(~
cJSON_IsRe„ªn˚
),√wôem->
vÆueöt
=ôem->vÆueöt,√wôem->
vÆuedoubÀ
=item->valuedouble;

564 i‡(
ôem
->
vÆue°rög
Ë{
√wôem
->vÆue°rög=
	`cJSON_°rdup
(ôem->vÆue°rög); i‡(!√wôem->vÆue°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

565 i‡(
ôem
->
°rög
Ë{
√wôem
->°rög=
	`cJSON_°rdup
(ôem->°rög); i‡(!√wôem->°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

567 i‡(!
ªcur£
Ë 
√wôem
;

569 
˝å
=
ôem
->
chûd
;

570 
˝å
)

572 
√wchûd
=
	`cJSON_Du∂iˇã
(
˝å
,1);

573 i‡(!
√wchûd
Ë{
	`cJSON_Dñëe
(
√wôem
); 0;}

574 i‡(
≈å
Ë{≈å->
√xt
=
√wchûd
,√wchûd->
¥ev
=nptr;nptr=newchild;}

575 {
√wôem
->
chûd
=
√wchûd
;
≈å
=newchild;}

576 
˝å
=˝å->
√xt
;

578  
√wôem
;

579 
	}
}

581 
	$cJSON_Möify
(*
js⁄
)

583 *
öto
=
js⁄
;

584 *
js⁄
)

586 i‡(*
js⁄
==' ') json++;

587 i‡(*
js⁄
=='\t') json++;

588 i‡(*
js⁄
=='\r') json++;

589 i‡(*
js⁄
=='\n') json++;

590 i‡(*
js⁄
=='/' && json[1]=='/') *json && *json!='\n') json++;

591 i‡(*
js⁄
=='/' && json[1]=='*') {*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}

592 i‡(*
js⁄
=='\"'){*
öto
++=*json++;*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;}

593 *
öto
++=*
js⁄
++;

595 *
öto
=0;

596 
	}
}

	@sample/libdetect2/libimagesource/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


32 
	#cJSON_FÆ£
 0

	)

33 
	#cJSON_True
 1

	)

34 
	#cJSON_NULL
 2

	)

35 
	#cJSON_Numbî
 3

	)

36 
	#cJSON_Såög
 4

	)

37 
	#cJSON_Aºay
 5

	)

38 
	#cJSON_Obje˘
 6

	)

40 
	#cJSON_IsRe„ªn˚
 256

	)

43 
	scJSON
 {

44 
cJSON
 *
√xt
,*
¥ev
;

45 
cJSON
 *
chûd
;

47 
ty≥
;

49 *
vÆue°rög
;

50 
vÆueöt
;

51 
vÆuedoubÀ
;

53 *
°rög
;

54 } 
	tcJSON
;

56 
	scJSON_Hooks
 {

57 *(*
mÆloc_‚
)(
size_t
 
sz
);

58 (*
‰ì_‚
)(*
±r
);

59 } 
	tcJSON_Hooks
;

62 
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

66 
cJSON
 *
cJSON_P¨£
(c⁄° *
vÆue
);

68 *
cJSON_Pröt
(
cJSON
 *
ôem
);

70 *
cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
);

72 
cJSON_Dñëe
(
cJSON
 *
c
);

75 
cJSON_GëAºaySize
(
cJSON
 *
¨øy
);

77 
cJSON
 *
cJSON_GëAºayIãm
(cJSON *
¨øy
,
ôem
);

79 
cJSON
 *
cJSON_GëObje˘Iãm
(cJSON *
obje˘
,c⁄° *
°rög
);

82 c⁄° *
cJSON_GëEº‹På
();

85 
cJSON
 *
cJSON_Cª©eNuŒ
();

86 
cJSON
 *
cJSON_Cª©eTrue
();

87 
cJSON
 *
cJSON_Cª©eFÆ£
();

88 
cJSON
 *
cJSON_Cª©eBoﬁ
(
b
);

89 
cJSON
 *
cJSON_Cª©eNumbî
(
num
);

90 
cJSON
 *
cJSON_Cª©eSåög
(c⁄° *
°rög
);

91 
cJSON
 *
cJSON_Cª©eAºay
();

92 
cJSON
 *
cJSON_Cª©eObje˘
();

95 
cJSON
 *
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
);

96 
cJSON
 *
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
);

97 
cJSON
 *
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
);

98 
cJSON
 *
cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
);

101 
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

102 
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

104 
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

105 
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

108 
cJSON
 *
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
,
which
);

109 
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
);

110 
cJSON
 *
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
,c⁄° *
°rög
);

111 
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
);

114 
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

115 
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

118 
cJSON
 *
cJSON_Du∂iˇã
(cJSON *
ôem
,
ªcur£
);

124 
cJSON
 *
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
);

126 
cJSON_Möify
(*
js⁄
);

129 
	#cJSON_AddNuŒToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNuŒ
())

	)

130 
	#cJSON_AddTrueToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eTrue
())

	)

131 
	#cJSON_AddFÆ£ToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eFÆ£
())

	)

132 
	#cJSON_AddBoﬁToObje˘
(
obje˘
,
«me
,
b
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eBoﬁ
(b))

	)

133 
	#cJSON_AddNumbîToObje˘
(
obje˘
,
«me
,
n
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNumbî
“))

	)

134 
	#cJSON_AddSåögToObje˘
(
obje˘
,
«me
,
s
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eSåög
(s))

	)

137 
	#cJSON_SëI¡VÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

139 #ifde‡
__˝lu•lus


	@sample/libdetect2/libimagesource/image_source.h

4 #¥agm®
⁄˚


6 #ifde‡
__˝lu•lus


9 #i‚de‡
WIN32


10 
	#__STDC_CONSTANT_MACROS


	)

11 
	#SUPPORT_YUANSDK


	)

13 
	~<libswsˇÀ/swsˇÀ.h
>

15 
img§c_t
 
	timg§c_t
;

17 
	simg§c_f‹m©


19 
PixñF‹m©
 
fmt
;

20 
width
;

21 
height
;

22 
Âs
;

23 } 
	timg§c_f‹m©
;

26 
	szifImage


28 
PixñF‹m©
 
fmt_ty≥
;

29 
width
;

30 
height
;

31 *
d©a
[4];

32 
°ride
[4];

34 
°amp
;

36 *
öã∫Æ_±r
;

37 } 
	tzifImage
;

45 
img§c_t
 *
img§c_›í
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
);

55 
img§c_t
 *
img§c_›í_js⁄
(c⁄° *
uæ
, c⁄° *
fmt_js⁄_°r
);

56 
img§c_˛o£
(
img§c_t
 *
˘x
);

61 
img§c_∑u£
(
img§c_t
 *
˘x
);

62 
img§c_ªsume
(
img§c_t
 *
˘x
);

67 
zifImage
 *
img§c_√xt
(
img§c_t
 *
˘x
);

68 
img§c_‰ì
(
img§c_t
 *
˘x
, 
zifImage
 *
img
);

70 #ifde‡
__˝lu•lus


	@sample/libdetect2/libimagesource/main.cpp

1 
	~<cc++/thªad.h
>

2 
	~"image_sour˚.h
"

4 
	~"VideoSour˚F‹Yu™.h
"

5 
	~"VideoSour˚F‹Zqpkt.h
"

7 
	~"VideoSour˚F‹RTSP.h
"

8 
	~"VideoSour˚F‹dshow.h
"

9 
	~"VideoSour˚FFm≥g.h
"

11 #i‡
SUPPORT_MORN


12 
	~"VideoSour˚F‹M‹n.h
"

15 
	~"cJSON.h
"

17 #ifde‡
WIN32


18 
	simg§c_t


20 #i‡
SUPPORT_YUANSDK


21 
VideoSour˚F‹Yu™
 *
	myu™_
;

23 
VideoSour˚
 *
	mzqpkt_
;

25 
VideoSour˚FromIPCam
 *
	mù_
;

27 
VideoSour˚F‹RTSP
 *
	mπ•_
;

28 
VideoSour˚F‹dshow
 *
	mdshow_
;

29 
VideoSour˚FFm≥g
 *
	mffm≥g_
;

30 #i‡
SUPPORT_MORN


31 
VideoSour˚F‹M‹n
 *
	mvsm_
;

34 
	mpublic
:

35 
img§c_t
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
)

37 #i‡
SUPPORT_YUANSDK


38 
	myu™_
 = 0;

40 
	mzqpkt_
 = 0;

42 
	mπ•_
 = 0;

43 
	mdshow_
 = 0;

44 
	mffm≥g_
 = 0;

45 #i‡
SUPPORT_MORN


46 
	mvsm_
 = 0;

49 i‡(!
°∫cmp
(
uæ
, "tcp://", 6)) {

50 
	mzqpkt_
 = 
√w
 
VideoSour˚
;

51 
	mzqpkt_
->
›í
(
fmt
, 
uæ
);

53 #i‡
SUPPORT_YUANSDK


54 i‡(!
°∫cmp
(
uæ
, "yuan://", 7)) {

55 
	myu™_
 = 
√w
 
VideoSour˚F‹Yu™
(
fmt
, 
©oi
(
uæ
+7));

58 i‡(!
°∫cmp
(
uæ
, "rtsp://", 7)) {

60 
	mffm≥g_
 = 
√w
 
VideoSour˚FFm≥g
(
fmt
, 
uæ
);

61 
	mffm≥g_
->
°¨t
();

63 #i‡
SUPPORT_MORN


64 if(!
°∫cmp
(
uæ
, "morn://", 7)) {

65 
	mù
[64];

66 
ssˇnf
(
uæ
, "m‹n://%s", 
ù
);

67 
	mvsm_
 = 
√w
 
VideoSour˚F‹M‹n
(
ù
, 
fmt
);

72 i‡(!
°∫cmp
(
uæ
, "ipcam://", 8)) {

73 
	mù
[64];

74 
ssˇnf
(
uæ
, "ùˇm://%s", 
ù
);

76 
	mù_
 = 
√w
 
VideoSour˚FromIPCam
(
ù
, 
fmt
);

79 i‡(!
°∫cmp
(
uæ
, "dshow://", 8)) {

80 
	mdshow_
 = 
√w
 
VideoSour˚F‹dshow
(
fmt
, 
uæ
);

83 
	mffm≥g_
 = 
√w
 
VideoSour˚FFm≥g
(
fmt
, 
uæ
);

84 
	mffm≥g_
->
°¨t
();

88 ~
img§c_t
()

90 #i‡
SUPPORT_YUANSDK


91 
dñëe
 
	myu™_
;

93 i‡(
	mzqpkt_
) {

94 
	mzqpkt_
->
˛o£
();

95 
dñëe
 
	mzqpkt_
;

97 i‡(
	mffm≥g_
) {

98 
	mffm≥g_
->
°›
();

99 
dñëe
 
	mffm≥g_
;

103 i‡(
	mù_
)

104 
dñëe
(
ù_
);

106 #i‡
SUPPORT_MORN


107 i‡(
	mvsm_
)

108 
dñëe
(
vsm_
);

110 i‡(
	mdshow_
)

111 
dñëe
 
	mdshow_
;

113 
dñëe
 
	mπ•_
;

116 
zifImage
 *
√xt
()

118 i‡(
	mzqpkt_
)

119  
	mzqpkt_
->
√xt_img
();

120 i‡(
	mffm≥g_
) {

121  
	mffm≥g_
->
√xt_img
();

123 #i‡
SUPPORT_YUANSDK


124 i‡(
	myu™_
)

125  
	myu™_
->
√xt_img
();

128 i‡(
	mù_
)

129  
	mù_
->
√xt_img
();

131 #i‡
SUPPORT_MORN


132 i‡(
	mvsm_
)

133  
	mvsm_
->
√xt_img
();

135 i‡(
	mdshow_
)

136  
	mdshow_
->
√xt_img
();

137 i‡(
	mπ•_
)

138  
	mπ•_
->
√xt_img
();

140 
	mo°
::
Thªad
::
¶ìp
(500);

145 
∑u£
()

147 i‡(
	mffm≥g_
) {

148 
	mffm≥g_
->
∑u£
();

154 
ªsume
()

156 i‡(
	mffm≥g_
) {

157 
	mffm≥g_
->
ªsume
();

163 
‰ì
(
zifImage
 *
img
)

165 i‡(
	mzqpkt_
)

166 
	mzqpkt_
->
‰ì_img
(
img
);

167 #i‡
SUPPORT_YUANSDK


168 i‡(
	myu™_
)

169 
	myu™_
->
‰ì_img
(
img
);

171 i‡(
	mffm≥g_
) {

172 
	mffm≥g_
->
‰ì_img
(
img
);

174 i‡(
	mπ•_
)

175 
	mπ•_
->
‰ì_img
(
img
);

176 i‡(
	mdshow_
)

177 
	mdshow_
->
‰ì_img
(
img
);

178 #i‡
SUPPORT_MORN


179 i‡(
	mvsm_
)

180 
	mvsm_
->
‰ì_img
(
img
);

184 
	mù_
->
‰ì_img
(
img
);

189 
	simg§c_t


191 
img§c_t
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
)

194 
zifImage
 *
√xt
()

198 
‰ì
(
zifImage
 *
img
)

202 
img§c_t
 *
	$img§c_›í
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
)

204  
√w
 
	`img§c_t
(
uæ
, 
fmt
);

205 
	}
}

207 
img§c_t
 *
	$img§c_›í_js⁄
(c⁄° *
uæ
, c⁄° *
fmt_js⁄_°r
)

209 
img§c_f‹m©
 
fmt
;

210 
fmt
.fmà
AV_PIX_FMT_BGR24
;

211 
fmt
.
width
 = 960;

212 
fmt
.
height
 = 540;

213 
fmt
.
Âs
 = 0.0;

215 i‡(
fmt_js⁄_°r
) {

216 
cJSON
 *
j
 = 
	`cJSON_P¨£
(
fmt_js⁄_°r
);

217 i‡(
j
 && j->
chûd
) {

218 
cJSON
 *
j2
 = 
j
->
chûd
;

219 
j2
) {

220 i‡(!
	`°rcmp
(
j2
->
°rög
, "pix_fmt")) {

221 i‡(
j2
->
ty≥
 =
cJSON_Numbî
)

222 
fmt
.fmà(
PixñF‹m©
)
j2
->
vÆueöt
;

224 i‡(!
	`°rcmp
(
j2
->
°rög
, "width")) {

225 i‡(
j2
->
ty≥
 =
cJSON_Numbî
)

226 
fmt
.
width
 = 
j2
->
vÆueöt
;

228 i‡(!
	`°rcmp
(
j2
->
°rög
, "height")) {

229 i‡(
j2
->
ty≥
 =
cJSON_Numbî
)

230 
fmt
.
height
 = 
j2
->
vÆueöt
;

232 i‡(!
	`°rcmp
(
j2
->
°rög
, "fps")) {

233 i‡(
j2
->
ty≥
 =
cJSON_Numbî
)

234 
fmt
.
Âs
 = 
j2
->
vÆuedoubÀ
;

237 
j2
 = j2->
√xt
;

241 i‡(
j
)

242 
	`cJSON_Dñëe
(
j
);

245 
	`Ârötf
(
°dîr
, "DEBUG: %s: usög { %d, %d, %d, %‡}\n", 
__FUNCTION__
, 
fmt
.fmt, fmt.
width
, fmt.
height
, fmt.
Âs
);

247  
	`img§c_›í
(
uæ
, &
fmt
);

248 
	}
}

250 
	$img§c_˛o£
(
img§c_t
 *
˘x
)

252 
dñëe
 
˘x
;

253 
	}
}

255 
zifImage
 *
	$img§c_√xt
(
img§c_t
 *
˘x
)

257  
˘x
->
	`√xt
();

258 
	}
}

260 
	$img§c_‰ì
(
img§c_t
 *
˘x
, 
zifImage
 *
img
)

262 
˘x
->
	`‰ì
(
img
);

263 
	}
}

265 
	$img§c_∑u£
(
img§c_t
 *
˘x
)

267  
˘x
->
	`∑u£
();

268 
	}
}

270 
	$img§c_ªsume
(
img§c_t
 *
˘x
)

272  
˘x
->
	`ªsume
();

273 
	}
}

	@sample/libdetect2/libimagesource/resource.h

7 #ifde‡
APSTUDIO_INVOKED


8 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


9 
	#_APS_NEXT_RESOURCE_VALUE
 101

	)

10 
	#_APS_NEXT_COMMAND_VALUE
 40001

	)

11 
	#_APS_NEXT_CONTROL_VALUE
 1001

	)

12 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@sample/libdetect2/libkvconfig/KVConfig.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"KVC⁄fig.h
"

5 
	gKVC⁄fig
::
	$KVC⁄fig
(c⁄° *
fûíame
)

7 
this
->
fûíame_
 = 
fûíame
;

9 
	`ªlﬂd
();

10 
	}
}

12 
	gKVC⁄fig
::~
	$KVC⁄fig
()

14 
	}
}

16 
boﬁ
 
KVC⁄fig
::
	$has_key
(c⁄° *
key
)

20  
	`gë_vÆue
(
key
) != 0;

21 
	}
}

23 
boﬁ
 
	gKVC⁄fig
::
	$dñ_key
(c⁄° *
key
)

27 
KVS
::
ôî©‹
 
ôf
 = 
kvs_
.
	`föd
(
key
);

28 i‡(
ôf
 !
kvs_
.
	`íd
()) {

29 
kvs_
.
	`îa£
(
ôf
);

30  
åue
;

33  
Ál£
;

34 
	}
}

36 c⁄° *
	gKVC⁄fig
::
	$gë_vÆue
(c⁄° *
key
, c⁄° *
def
)

40 
KVS
::
c⁄°_ôî©‹
 
ôf
 = 
kvs_
.
	`föd
(
key
);

41 i‡(
ôf
 !
kvs_
.
	`íd
())

42  
ôf
->
£c⁄d
.
	`c_°r
();

43  
def
;

44 
	}
}

46 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
KVC⁄fig
::
	$keys
()

50 
°d
::
ve˘‹
<°d::
°rög
> 
ks
;

51 
KVS
::
c⁄°_ôî©‹
 
ô
;

52 
ô
 = 
kvs_
.
	`begö
(); ià!kvs_.
	`íd
(); ++it)

53 
ks
.
	`push_back
(
ô
->
fú°
);

55  
ks
;

56 
	}
}

58 
	gKVC⁄fig
::
	$£t_vÆue
(c⁄° *
key
, c⁄° *
vÆue
)

62 
KVS
::
ôî©‹
 
ôf
 = 
kvs_
.
	`föd
(
key
);

63 i‡(
ôf
 =
kvs_
.
	`íd
()) {

64 i‡(
vÆue
) {

65 
kvs_
[
key
] = 
vÆue
;

69 i‡(
vÆue
) {

70 
ôf
->
£c⁄d
 = 
vÆue
;

73 
kvs_
.
	`îa£
(
ôf
);

78 
	}
}

80 
	gKVC⁄fig
::
	$£t_vÆue
(c⁄° *
key
, 
v
)

82 
öfo
[64];

83 
	`¢¥ötf
(
öfo
, (öfo), "%d", 
v
);

84  
	`£t_vÆue
(
key
, 
öfo
);

85 
	}
}

87 
	gKVC⁄fig
::
	$ßve_as
(c⁄° *
fûíame
)

90 
°d
::
°rög
 
tmp
;

92 i‡(!
fûíame
) {

93 
tmp
 = 
fûíame_
 + ".session";

94 
fûíame
 = 
tmp
.
	`c_°r
();

97 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "w");

98 i‡(!
Â
)  -1;

100 
KVS
::
c⁄°_ôî©‹
 
ô
;

101 
ô
 = 
kvs_
.
	`begö
(); ià!kvs_.
	`íd
(); ++it) {

102 
	`Ârötf
(
Â
, "%s=%s\n", 
ô
->
fú°
.
	`c_°r
(), it->
£c⁄d
.c_str());

104 
	`f˛o£
(
Â
);

107 
	}
}

109 
	gKVC⁄fig
::
	$ªlﬂd
()

111 
kvs_
.
	`˛ór
();

113 
	`lﬂd_‰om_fûe
(
fûíame_
.
	`c_°r
());

115 
°d
::
°rög
 
tmp
 = 
fûíame_
 + ".session";

116 
	`lﬂd_‰om_fûe
(
tmp
.
	`c_°r
());

118 
	}
}

120 
	gKVC⁄fig
::
	$˛ór
()

123 
kvs_
.
	`˛ór
();

124 
	}
}

126 
	gKVC⁄fig
::
	$lﬂd_‰om_fûe
(c⁄° *
fûíame
)

130 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

131 i‡(!
Â
) {

136 !
	`„of
(
Â
)) {

137 
löe
[1024];

138 *
p
 = 
	`fgës
(
löe
, ÷öe), 
Â
);

139 i‡(!
p
) ;

140 
p
 && 
	`is•a˚
(*p))Ö++;

141 i‡(*
p
 == '#') ;

143 
key
[64], 
vÆue
[512];

144 i‡(
	`ssˇnf
(
p
, "%63[^=] = %511[^\r\n]", 
key
, 
vÆue
) == 2) {

145 
kvs_
[
key
] = 
vÆue
;

149 
	`f˛o£
(
Â
);

150 
	}
}

	@sample/libdetect2/libkvconfig/KVConfig.h

8 #¥agm®
⁄˚


10 
	~<ve˘‹
>

11 
	~<°rög
>

12 
	~<m≠
>

15 #ifde‡
WIN32


16 #ifde‡
LIBKVCONFIG_EXPORTS


17 
	#KVCAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

19 
	#KVCAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

22 
	#KVCAPI


	)

25 ˛as†
	cKVCAPI
 
	mKVC⁄fig


27 
	m°d
::
	tm≠
<
	t°d
::
	t°rög
, std::°rög> 
	tKVS
;

28 
KVS
 
	mkvs_
;

30 
	m°d
::
°rög
 
fûíame_
;

32 
	mpublic
:

33 
KVC⁄fig
(c⁄° *
fûíame
);

34 ~
KVC⁄fig
();

36 c⁄° *
	$fûe_«me
(Ëc⁄° {  
fûíame_
.
	`c_°r
(); }

39 
boﬁ
 
	`has_key
(c⁄° *
key
);

42 c⁄° *
	`gë_vÆue
(c⁄° *
key
, c⁄° *
def
 = 0);

45 
boﬁ
 
	`dñ_key
(c⁄° *
key
);

48 
°d
::
ve˘‹
<°d::
°rög
> 
	`keys
();

51 
	`£t_vÆue
(c⁄° *
key
, c⁄° *
vÆue
);

52 
	`£t_vÆue
(c⁄° *
key
, 
v
);

55 
	`ßve_as
(c⁄° *
fûíame
);

56 
	`ªlﬂd
();

58 
	`˛ór
();

60 
¥iv©e
:

61 
	`lﬂd_‰om_fûe
(c⁄° *
fûíame
);

62 
	}
};

	@sample/libdetect_t/KVConfig.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"KVC⁄fig.h
"

5 
	gKVC⁄fig
::
	$KVC⁄fig
(c⁄° *
fûíame
)

7 
this
->
fûíame_
 = 
fûíame
;

9 
	`ªlﬂd
();

10 
	}
}

12 
	gKVC⁄fig
::~
	$KVC⁄fig
()

14 
	}
}

16 
boﬁ
 
KVC⁄fig
::
	$has_key
(c⁄° *
key
)

20  
	`gë_vÆue
(
key
) != 0;

21 
	}
}

23 
boﬁ
 
	gKVC⁄fig
::
	$dñ_key
(c⁄° *
key
)

28 
KVS
::
ôî©‹
 
ôf
 = 
kvs_
.
	`föd
(
key
);

29 i‡(
ôf
 !
kvs_
.
	`íd
()) {

30 
kvs_
.
	`îa£
(
ôf
);

31  
åue
;

34  
Ál£
;

35 
	}
}

37 c⁄° *
	gKVC⁄fig
::
	$gë_vÆue
(c⁄° *
key
, c⁄° *
def
)

41 
KVS
::
c⁄°_ôî©‹
 
ôf
 = 
kvs_
.
	`föd
(
key
);

42 i‡(
ôf
 !
kvs_
.
	`íd
())

43  
ôf
->
£c⁄d
.
	`c_°r
();

44  
def
;

45 
	}
}

47 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
KVC⁄fig
::
	$keys
()

51 
°d
::
ve˘‹
<°d::
°rög
> 
ks
;

52 
KVS
::
c⁄°_ôî©‹
 
ô
;

53 
ô
 = 
kvs_
.
	`begö
(); ià!kvs_.
	`íd
(); ++it)

54 
ks
.
	`push_back
(
ô
->
fú°
);

56  
ks
;

57 
	}
}

59 
	gKVC⁄fig
::
	$£t_vÆue
(c⁄° *
key
, c⁄° *
vÆue
)

63 
KVS
::
ôî©‹
 
ôf
 = 
kvs_
.
	`föd
(
key
);

64 i‡(
ôf
 =
kvs_
.
	`íd
()) {

65 i‡(
vÆue
) {

66 
kvs_
[
key
] = 
vÆue
;

70 i‡(
vÆue
) {

71 
ôf
->
£c⁄d
 = 
vÆue
;

74 
kvs_
.
	`îa£
(
ôf
);

79 
	}
}

81 
	gKVC⁄fig
::
	$£t_vÆue
(c⁄° *
key
, 
v
)

83 
öfo
[64];

84 
	`¢¥ötf
(
öfo
, (öfo), "%d", 
v
);

85  
	`£t_vÆue
(
key
, 
öfo
);

86 
	}
}

88 
	gKVC⁄fig
::
	$ßve_as
(c⁄° *
fûíame
)

91 
°d
::
°rög
 
tmp
;

93 i‡(!
fûíame
) {

94 
tmp
 = 
fûíame_
 + ".session";

95 
fûíame
 = 
tmp
.
	`c_°r
();

98 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "w");

99 i‡(!
Â
)  -1;

101 
KVS
::
c⁄°_ôî©‹
 
ô
;

102 
ô
 = 
kvs_
.
	`begö
(); ià!kvs_.
	`íd
(); ++it) {

103 
	`Ârötf
(
Â
, "%s=%s\n", 
ô
->
fú°
.
	`c_°r
(), it->
£c⁄d
.c_str());

105 
	`f˛o£
(
Â
);

108 
	}
}

110 
	gKVC⁄fig
::
	$ªlﬂd
()

112 
kvs_
.
	`˛ór
();

114 
	`lﬂd_‰om_fûe
(
fûíame_
.
	`c_°r
());

119 
	}
}

121 
	gKVC⁄fig
::
	$˛ór
()

124 
kvs_
.
	`˛ór
();

125 
	}
}

127 
	gKVC⁄fig
::
	$lﬂd_‰om_fûe
(c⁄° *
fûíame
)

131 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

132 i‡(!
Â
) {

137 !
	`„of
(
Â
)) {

138 
löe
[1024];

139 *
p
 = 
	`fgës
(
löe
, ÷öe), 
Â
);

140 i‡(!
p
) ;

141 
p
 && 
	`is•a˚
(*p))Ö++;

142 i‡(*
p
 == '#') ;

144 
key
[64], 
vÆue
[512];

145 i‡(
	`ssˇnf
(
p
, "%63[^=] = %511[^\r\n]", 
key
, 
vÆue
) == 2) {

146 
kvs_
[
key
] = 
vÆue
;

150 
	`f˛o£
(
Â
);

151 
	}
}

	@sample/libdetect_t/KVConfig.h

8 #¥agm®
⁄˚


10 
	~<ve˘‹
>

11 
	~<°rög
>

12 
	~<m≠
>

15 #ifde‡
WIN32


16 #ifde‡
LIBKVCONFIG_EXPORTS


17 
	#KVCAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

19 
	#KVCAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

22 
	#KVCAPI


	)

25 ˛as†
	cKVCAPI
 
	mKVC⁄fig


27 
	m°d
::
	tm≠
<
	t°d
::
	t°rög
, std::°rög> 
	tKVS
;

28 
KVS
 
	mkvs_
;

30 
	m°d
::
°rög
 
fûíame_
;

32 
	mpublic
:

33 
KVC⁄fig
(c⁄° *
fûíame
);

34 ~
KVC⁄fig
();

36 c⁄° *
	$fûe_«me
(Ëc⁄° {  
fûíame_
.
	`c_°r
(); }

39 
boﬁ
 
	`has_key
(c⁄° *
key
);

42 c⁄° *
	`gë_vÆue
(c⁄° *
key
, c⁄° *
def
 = 0);

45 
boﬁ
 
	`dñ_key
(c⁄° *
key
);

48 
°d
::
ve˘‹
<°d::
°rög
> 
	`keys
();

51 
	`£t_vÆue
(c⁄° *
key
, c⁄° *
vÆue
);

52 
	`£t_vÆue
(c⁄° *
key
, 
v
);

55 
	`ßve_as
(c⁄° *
fûíame
);

56 
	`ªlﬂd
();

58 
	`˛ór
();

60 
¥iv©e
:

61 
	`lﬂd_‰om_fûe
(c⁄° *
fûíame
);

62 
	}
};

	@sample/libdetect_t/blackboard_detect.cpp

1 
	~"bœckbﬂrd_dëe˘.h
"

2 
	~<c°dio
>

5 
	gBœckbﬂrdDëe˘ög
::
	$BœckbﬂrdDëe˘ög
(
KVC⁄fig
 *
cfg
)

6 : 
	`cfg_
(
cfg
),
	$bg_modñ
(
NULL
, NULL, 
åue
)

9 
N
 = 4;

10 
buÊí
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("buflen", "3"));;

11 
buf„r
 = 
NULL
;

12 
diff_thªshﬁd_thªe
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("diff_threshold_three", "17"));

13 
diff_thªshﬁd
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("diff_threshold", "30"));

15 
video_width_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("video_width", "960"));

16 
video_height_
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("video_height", "540"));

18 
mîge_öãrvÆ
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("bg_merge_interval", "30"));

19 
mö_¨ó
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("bg_min_area", "3"));

20 
max_¨ó
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("bg_max_area", "10000"));

21 
À¨nög_øã
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("bg_learning_rate", "0.001"));

22 
mog_thªshﬁd
 = 
	`©of
(
cfg_
->
	`gë_vÆue
("bg_mog_threshold", "135"));

23 
bg_modñ
.
	`£t
("fTau",
	`©of
(
cfg_
->
	`gë_vÆue
("bg_fTau", "0.1")));

24 
bg_modñ
.
	`£t
("v¨Thªshﬁd",
	`©of
(
cfg_
->
	`gë_vÆue
("bg_varThreshold", "60")));

26 
luv_u_max
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("bg_luv_u_max", "21"));

27 
luv_v_max
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("bg_luv_v_max", "21"));

28 
luv_u_mö
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("bg_luv_u_min", "0"));

29 
luv_v_mö
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("bg_luv_v_min", "0"));

30 
luv_L
 = 
	`©oi
(
cfg_
->
	`gë_vÆue
("bg_luv_L", "55"));

32 
ismask_
 = 
Ál£
;

34 
masked_ª˘
 = 
	`gë_ª˘
(
cfg_
->
	`gë_vÆue
("calibration_data", "0"),cfg_->get_value("calibration_data_2", "0"));

36 c⁄° *
cb_d©e
,*
cb_d©e_2
;

37 if(
cfg_
->
	`gë_vÆue
("calibration_data", "0"))

38 
cb_d©e
 = "calibration_data";

40 
cb_d©e
 = 
NULL
;

41 if(
cfg_
->
	`gë_vÆue
("calibration_data_2", "0"))

42 
cb_d©e_2
 = "calibration_data_2";

44 
cb_d©e_2
 = 
NULL
;

45 
img_mask_
 = 
	`buûd_mask
(
cb_d©e
,
cb_d©e_2
);

47 
	}
}

49 
	gBœckbﬂrdDëe˘ög
::~
	$BœckbﬂrdDëe˘ög
()

51 
	}
}

57 
BœckbﬂrdDëe˘ög
::
	$cmp_¨ó
(c⁄° 
Re˘
 & 
a
, c⁄° Re˘ & 
b
)

59  (
a
.
width
 *á.
height
 > 
b
.width * b.height);

60 
	}
}

65 
Re˘
 
	gBœckbﬂrdDëe˘ög
::
	$s‹t_ª˘
(
Re˘
 
a
, Re˘ 
b
)

67 
Re˘
 
ª˘_√w
;

68 
smÆl_x
 = 
a
.
x
;

69 
smÆl_y
 = 
a
.
y
;

70 
big_x
 = 
a
.
x
 +á.
width
;

71 
big_y
 = 
a
.
y
 +á.
height
;

72 i‡(
b
.
x
 < 
smÆl_x
)

73 
smÆl_x
 = 
b
.
x
;

74 i‡(
b
.
y
 < 
smÆl_y
)

75 
smÆl_y
 = 
b
.
y
;

76 i‡(
b
.
x
 + b.
width
 > 
big_x
)

77 
big_x
 = 
b
.
x
 + b.
width
;

78 i‡(
b
.
y
 + b.
height
 > 
big_y
)

79 
big_y
 = 
b
.
y
 + b.
height
;

80 
ª˘_√w
 = 
	`Re˘
(
smÆl_x
, 
smÆl_y
, 
big_x
 - smÆl_x, 
big_y
 - small_y);

81  
ª˘_√w
;

82 
	}
}

87 
	gBœckbﬂrdDëe˘ög
::
ª˘_fusi⁄2
(
ve˘‹
 < 
Re˘
 > &
£q
, 
öãrvÆ
)

90 
	g°d
::
s‹t
(
£q
.
begö
(), seq.
íd
(), 
cmp_¨ó
);

91 
Re˘
 
	gª˘_i
;

92 
Re˘
 
	gª˘_j
;

93 
	gnum
 = 0;

95 
	g°d
::
ve˘‹
 < 
cv
::
Re˘
 >::
ôî©‹
 
ô1
;

96 
	g°d
::
ve˘‹
 < 
cv
::
Re˘
 >::
ôî©‹
 
ô2
;

97 
	gnum
 = 0;

98 
	gô1
 = 
£q
.
begö
(); it1 !£q.
íd
();) {

99 
	gô2
 = 
ô1
 + 1; it2 !
£q
.
íd
();) {

100 
	gª˘_i
 = *
ô1
;

101 
	gª˘_j
 = *
ô2
;

102 i‡(
	gª˘_i
.
	gx
 >

103 (
	gª˘_j
.
	gx
 +Ñe˘_j.
	gwidth
 + 
	göãrvÆ
)

104 || (
	gª˘_i
.
	gx
 +Ñe˘_i.
	gwidth
 + 
	göãrvÆ
) <

105 
	gª˘_j
.
	gx


106 || 
	gª˘_i
.
	gy
 >

107 (
	gª˘_j
.
	gy
 +Ñe˘_j.
	gheight
 + 
	göãrvÆ
)

108 || (
	gª˘_i
.
	gy
 +Ñe˘_i.
	gheight
 + 
	göãrvÆ
) <

109 
	gª˘_j
.
	gy
) {

110 
	gô2
++;

114 *
	gô1
 = 
s‹t_ª˘
(
ª˘_i
, 
ª˘_j
);

115 
	gô2
 = 
£q
.
îa£
(
ô2
);

116 
	gnum
++;

119 
	gô1
++;

122 i‡(
	gnum
 == 0) {

124 
°d
::
s‹t
(
£q
.
begö
(), seq.
íd
(), 
cmp_¨ó
);

133 
	g°d
::
ve˘‹
 < 
Re˘
 > 
BœckbﬂrdDëe˘ög
::
	$ªföeSegmíts2
(
M©
 
img
, M© & 
mask
,

134 
M©
 & 
d°
,

135 
öãrvÆ
,
mö¨ó
,
max¨ó
)

137 
ve˘‹
 < 
Re˘
 > 
ª˘
;

138 
nôîs
 = 2;

139 
ve˘‹
 < ve˘‹ < 
Poöt
 > >
c⁄tours
;

140 
ve˘‹
 < ve˘‹ < 
Poöt
 > >
c⁄tours_ãmp
;

141 
ve˘‹
 < 
Vec4i
 > 
hõørchy
;

142 
ve˘‹
 < 
Re˘
 > 
right_ª˘
;

143 
M©
 
ãmp
;

148 
cv
::
	`dû©e
(
mask
, 
ãmp
, cv::
	`M©
());

149 
cv
::
	`îode
(
mask
, 
ãmp
, cv::
	`M©
());

150 
cv
::
	`îode
(
mask
, 
ãmp
, cv::
	`M©
());

151 
cv
::
	`dû©e
(
mask
, 
ãmp
, cv::
	`M©
(), cv::
	`Poöt
(-1, -1), 2);

154 
	`födC⁄tours
(
ãmp
, 
c⁄tours
, 
hõørchy
, 
CV_RETR_EXTERNAL
,

155 
CV_CHAIN_APPROX_SIMPLE
);

156 
d°
 = 
M©
::
	`zîos
(
img
.
	`size
(), 
CV_8UC3
);

157 i‡(
c⁄tours
.
	`size
() > 0) {

158 
Sˇœr
 
	`cﬁ‹
(255, 255, 255);

159 
idx
 = 0; idx < 
c⁄tours
.
	`size
(); idx++) {

160 c⁄° 
ve˘‹
 < 
Poöt
 > &
c
 = 
c⁄tours
[
idx
];

161 
Re˘
 
t
 = 
	`boundögRe˘
(
	`M©
(
c
));

162 
¨ó
 = 
	`Ábs
(
	`c⁄tourAªa
(
	`M©
(
c
)));

163 i‡(
¨ó
 >
mö_¨ó
 &&áªa<=
max¨ó
)

165 
c⁄tours_ãmp
.
	`push_back
(
c⁄tours
[
idx
]);

166 
right_ª˘
.
	`push_back
(
t
);

169 
	`døwC⁄tours
(
d°
, 
c⁄tours_ãmp
, -1, 
cﬁ‹
, 
CV_FILLED
, 8);

171 i‡(
right_ª˘
.
	`size
() > 1) {

172 
	`ª˘_fusi⁄2
(
right_ª˘
, 
öãrvÆ
);

174  
right_ª˘
;

176 
	}
}

179 
	gBœckbﬂrdDëe˘ög
::
luv_mëhod
(c⁄° 
M©
 &
img
,M© 
bg
,
°d
::
ve˘‹
<
Re˘
> &
r
)

181 
M©
 
luv_m
,
	gluv_m_ãmp
,
	gfgimg
;

182 
	gluv_m
.
¸óã
(
Size
(
img
.
cﬁs
, img.
rows
), 
CV_8UC1
);

183 
	gluv_m
.
£tTo
(0);

184 
	gluv_m_ãmp
 = 
img
.
˛⁄e
();

185 
	gluv_m_ãmp
.
£tTo
(
Sˇœr
::
Æl
(255));

186 
M©
 
	gimg_t
; M© 
	gbg_t
;

187 
cvtCﬁ‹
(
img
, 
img_t
, 
CV_BGR2YUV
);

188 
cvtCﬁ‹
(
bg
, 
bg_t
, 
CV_BGR2YUV
);

189 
	gi
 = 0; i < 
	gimg
.
	gcﬁs
; i++)

191 
	gj
 = 0; j < 
	gimg
.
	grows
; j++)

193 
Vec3b
 
	gbgr1
 = 
img_t
.
©
 < Vec3b > (
j
, 
	gi
);

194 
Vec3b
 
	gbgr2
 = 
bg_t
.
©
 < Vec3b > (
j
, 
	gi
);

195 
	gL
 =

196 (
abs
Ë(
bgr1
.
vÆ
[0] - 
bgr2
.val[0]);

197 
	gU
 =

198 (
abs
Ë(
bgr1
.
vÆ
[1] - 
bgr2
.val[1]);

199 
	gV
 =

200 (
abs
Ë((
bgr1
.
vÆ
[2] - 
bgr2
.val[2]));

201 i‡((
	gU
 >
luv_u_max
 || 
V
 >
luv_v_max
)&&(
L
 >
luv_L
))

203 
luv_m
.
©
 < >(
j
, 
i
Ë255; 
	gluv_m_ãmp
.
	g©
 < 
	gVec3b
 >(
	gj
, 
	gi
Ë
Vec3b
(0,0,0);

205 i‡((
	gU
 >
luv_u_max
 || 
V
 >
luv_v_max
)&&(
L
 < 
luv_L
))

207 
luv_m
.
©
 < >(
j
, 
i
Ë255; 
	gluv_m_ãmp
.
	g©
 < 
	gVec3b
 >(
	gj
, 
	gi
Ë
Vec3b
(0,0,255);

209 i‡((
	gU
 < 
	gluv_u_max
 && 
	gV
 < 
	gluv_v_max
 && U > 
	gluv_u_mö
 && V > 
	gluv_v_mö
)&&(
	gL
 > 
	gluv_L
))

211 
	gluv_m
.
	g©
 < >(
	gj
, 
	gi
Ë255; 
	gluv_m_ãmp
.© < 
	gVec3b
 >(j, iË
Vec3b
(255,0,0);

215 
	gluv_m
.
	g©
 < >(
	gj
, 
	gi
) = 0;

221 
	gr
=
ªföeSegmíts2
(
img
, 
luv_m
, 
fgimg
,
mîge_öãrvÆ
,
mö_¨ó
,
max_¨ó
);

223 if(
©oi
(
cfg_
->
gë_vÆue
("debug","0"))>0)

226 
imshow
("bg_luv_m_ãmp",
luv_m_ãmp
);

227 
waôKey
(1);

235 
boﬁ
 
	gBœckbﬂrdDëe˘ög
::
⁄e_‰ame_bd
(
M©
 
img
, 
ve˘‹
 < 
Re˘
 > &
r
)

237 
boﬁ
 
	ghas_ª˘
 = 
Ál£
;

238 
M©
 
	gfgmask
;

239 
bg_modñ
(
img
, 
fgmask
, 
À¨nög_øã
);

240 
M©
 
	gbg
;

241 
	gbg_modñ
.
gëBackgroundImage
(
bg
);

242 i‡(
©oi
(
cfg_
->
gë_vÆue
("debug", "0")) > 0)

244 
imshow
("bg_background image", 
bg
);

245 
waôKey
(1);

247 
luv_mëhod
(
img
,
bg
,
r
);

248 if(
	gr
.
size
()>0)

250 
	ghas_ª˘
 = 
åue
;

252  
	ghas_ª˘
;

259 
boﬁ
 
	gBœckbﬂrdDëe˘ög
::
	$buûd_mask_öã∫Æ
(c⁄° *
key
, 
M©
& 
img
)

261 
boﬁ
 
masked
 = 
Ál£
;

262 c⁄° *
±s
 = 
cfg_
->
	`gë_vÆue
(
key
, "0");

263 
°d
::
ve˘‹
 < 
Poöt
 > 
poöts
;

264 i‡(
±s
) {

265 *
d©a
 = 
	`°rdup
(
±s
);

266 *
p
 = 
	`°πok
(
d©a
, ";");

267 
p
) {

269 
x
, 
y
;

270 i‡(
	`ssˇnf
(
p
, "%d,%d", &
x
, &
y
) == 2) {

271 
CvPoöt
 
±
 = { 
x
, 
y
 };

272 
±
.
x
 =Öt.x-
masked_ª˘
.x;Öt.
y
 =Öt.y-masked_rect.y;

273 
poöts
.
	`push_back
(
±
);

276 
p
 = 
	`°πok
(0, ";");

278 
	`‰ì
(
d©a
);

281 i‡(
poöts
.
	`size
() > 3) {

282 
n
 = 
poöts
.
	`size
();

283 c⁄° 
Poöt
 **
±s
 =

284 (c⁄° 
Poöt
 **Ë
	`Æloˇ
((c⁄° Poöà*Ë* 
poöts
.
	`size
());

285 
i
 = 0; i < 
n
; i++) {

286 
±s
[
i
] = &
poöts
[i];

288 
	`fûlPﬁy
(
img
, 
±s
, &
n
, 1, 
	`CV_RGB
(255, 255, 255));

289 
masked
 = 
åue
;

292  
masked
;

293 
	}
}

296 
M©
 
	gBœckbﬂrdDëe˘ög
::
	$buûd_mask
(c⁄° *
key
, c⁄° *
key2
)

299 
CvSize
 
size
 = {
masked_ª˘
.
width
, masked_ª˘.
height
};

300 
M©
 
img
; img.
	`¸óã
(
size
,
CV_8UC3
);

302 i‡(!
ismask_
)

303 
img
.
	`£tTo
(0);

305 i‡(
key
) {

306 
ismask_
 = 
	`buûd_mask_öã∫Æ
(
key
, 
img
);

309 i‡(
key2
) {

310 
	`buûd_mask_öã∫Æ
(
key2
, 
img
);

312  
img
;

313 
	}
}

316 
	gBœckbﬂrdDëe˘ög
::
	$do_mask
(
M©
 &
img
)

318 i‡(
ismask_
)

320 
	`bôwi£_™d
(
img
, 
img_mask_
, img);

322 
	}
}

326 
	g°d
::
ve˘‹
<
cv
::
Poöt
> 
BœckbﬂrdDëe˘ög
::
	$lﬂd_roi
(c⁄° *
±s
)

328 
°d
::
ve˘‹
<
cv
::
Poöt
> 
poöts
;

337 
key
[64];

338 i‡(
±s
)

340 *
d©a
 = 
	`°rdup
(
±s
);

341 *
p
 = 
	`°πok
(
d©a
, ";");

342 
p
)

345 
x
, 
y
;

346 i‡(
	`ssˇnf
(
p
, "%d,%d", &
x
, &
y
) == 2)

348 
CvPoöt
 
±
 = { 
x
, 
y
 };

349 
poöts
.
	`push_back
(
±
);

352 
p
 = 
	`°πok
(0, ";");

354 
	`‰ì
(
d©a
);

357  
poöts
;

358 
	}
}

361 
	gBœckbﬂrdDëe˘ög
::
	$cmp_mö_x
(c⁄° 
Poöt
 & 
a
, c⁄° Poöà& 
b
)

363  (
a
.
x
 < 
b
.x);

364 
	}
}

368 
	gBœckbﬂrdDëe˘ög
::
	$cmp_mö_y
(c⁄° 
Poöt
 & 
a
, c⁄° Poöà& 
b
)

370  (
a
.
y
 < 
b
.y);

371 
	}
}

375 
	gcv
::
Re˘
 
BœckbﬂrdDëe˘ög
::
gë_poöt_ª˘
(
°d
::
ve˘‹
<
cv
::
Poöt
> 
±
)

377 
cv
::
Re˘
 
ª˘
;

378 
	gmö_x
,
	gmö_y
;

379 
	gmax_x
,
	gmax_y
;

380 
	g°d
::
s‹t
(
±
.
begö
(),Öt.
íd
(), 
cmp_mö_x
);

381 
	gmö_x
 = 
±
[0].
x
;

382 
	gmax_x
 = 
±
[±.
size
()-1].
x
;

383 
	g°d
::
s‹t
(
±
.
begö
(),Öt.
íd
(), 
cmp_mö_y
);

384 
	gmö_y
 = 
±
[0].
y
;

385 
	gmax_y
 = 
±
[±.
size
()-1].
y
;

386 
	gª˘
 = 
Re˘
(
mö_x
,
mö_y
,(
max_x
-mö_x),(
max_y
-min_y));

388 
	gª˘
 &
Re˘
(0,0,
video_width_
,
video_height_
);

389  
	gª˘
;

393 
	gcv
::
Re˘
 
BœckbﬂrdDëe˘ög
::
	$gë_ª˘
(c⁄° *
cb_d©e
,c⁄° *
cb_d©e_2
)

395 
Re˘
 
masked
;

396 
°d
::
ve˘‹
<
cv
::
Poöt
> 
±_ve˘‹
,
±_ve˘‹_1
,
±_ve˘‹_2
;

397 if(
cb_d©e
)

399 
±_ve˘‹_1
 = 
	`lﬂd_roi
(
cb_d©e
);

400 if(
±_ve˘‹_1
.
	`size
()>2)

402 
cv
::
Re˘
 
ª˘1
 = 
	`gë_poöt_ª˘
(
±_ve˘‹_1
);

403 
masked_ª˘_vec
.
	`push_back
(
ª˘1
);

404 
i
 = 0;i<
±_ve˘‹_1
.
	`size
();i++)

406 
±_ve˘‹
.
	`push_back
(
±_ve˘‹_1
[
i
]);

410 if(
cb_d©e_2
)

412 
±_ve˘‹_2
 = 
	`lﬂd_roi
(
cb_d©e_2
);

413 if(
±_ve˘‹_2
.
	`size
()>2)

415 
cv
::
Re˘
 
ª˘2
 = 
	`gë_poöt_ª˘
(
±_ve˘‹_2
);

416 
masked_ª˘_vec
.
	`push_back
(
ª˘2
);

417 
i
 = 0;i<
±_ve˘‹_2
.
	`size
();i++)

419 
±_ve˘‹
.
	`push_back
(
±_ve˘‹_2
[
i
]);

423 if(
±_ve˘‹_1
.
	`size
()<3 && 
±_ve˘‹_2
.size()<3)

425 
masked
 = 
	`Re˘
(0,0,
	`©oi
(
cfg_
->
	`gë_vÆue
("video_width", "960")),atoi(cfg_->get_value("video_height", "540")));

429 
masked
 = 
	`gë_poöt_ª˘
(
±_ve˘‹
);

431  
masked
;

432 
	}
}

	@sample/libdetect_t/blackboard_detect.h

1 #¥agm®
⁄˚


2 #i‚de‡
_bœckbﬂrd_dëe˘_h_


3 
	#_bœckbﬂrd_dëe˘_h_


	)

5 
	~<›ícv2/›ícv.hµ
>

6 
	~<time.h
>

7 
	~"KVC⁄fig.h
"

8 
usög
 
«me•a˚
 
	gcv
;

9 
usög
 
«me•a˚
 
	g°d
;

13 ˛as†
	cBœckbﬂrdDëe˘ög


15 
	mpublic
:

16 
BœckbﬂrdDëe˘ög
(
KVC⁄fig
 *
cfg
);

17 ~
BœckbﬂrdDëe˘ög
();

18 
	mdiff_thªshﬁd_thªe
;

19 
	mdiff_thªshﬁd
;

20 
	mN
;

21 
	mbuÊí
;

22 
I∂Image
 **
	mbuf„r
;

23 
KVC⁄fig
 *
	mcfg_
;

25 
	mluv_u_max
;

26 
	mluv_v_max
;

27 
	mluv_u_mö
;

28 
	mluv_v_mö
;

29 
	mluv_L
;

31 
	mmîge_öãrvÆ
;

32 
	mmö_¨ó
;

33 
	mmax_¨ó
;

35 
BackgroundSubåa˘‹MOG2
 
	mbg_modñ
;

36 
	mÀ¨nög_øã
;

37 
	mmog_thªshﬁd
;

39 
boﬁ
 
	mismask_
;

40 
M©
 
	mimg_mask_
;

41 
	mvideo_width_
;

42 
	mvideo_height_
;

44 
boﬁ
 
‰ame_dif„ªn˚_mëhod
 (
I∂Image
 *
image
,
°d
::
ve˘‹
<
cv
::
Re˘
> &
ª˘_ve˘‹
);

46 
do_mask
–
M©
 &
img
);

47 
	mcv
::
Re˘
 
masked_ª˘
;

48 
	m°d
::
ve˘‹
<
Re˘
> 
masked_ª˘_vec
;

50 
	m°d
::
ve˘‹
 < 
Re˘
 > 
ªföeSegmíts2
(
M©
 
img
, M© & 
mask
, M© & 
d°
,
öãrvÆ
,
mö¨ó
,
max¨ó
);

51 
ª˘_fusi⁄2
(
ve˘‹
 < 
Re˘
 > &
£q
, 
öãrvÆ
);

52 
Re˘
 
s‹t_ª˘
(Re˘ 
a
, Re˘ 
b
);

53 
cmp_¨ó
(c⁄° 
Re˘
 & 
a
, c⁄° Re˘ & 
b
);

54 
boﬁ
 
⁄e_‰ame_bd
–
M©
 
img
, 
ve˘‹
 < 
Re˘
 > &
r
);

57 
two_‰ame_mëhod
(
I∂Image
*
img
,I∂Image*
sûh
);

58 
cmp_func_¨ó
(c⁄° 
CvRe˘
&
a
,c⁄° CvRe˘&
b
);

59 
CvRe˘
 
mîge_ª˘
(CvRe˘ 
a
,CvRe˘ 
b
);

60 
ª˘_fusi⁄
(
°d
::
ve˘‹
<
cv
::
Re˘
> &
£q
,
I∂Image
 *
image
);

61 
¸ót_buf„r
(
I∂Image
 *
image
);

63 
boﬁ
 
buûd_mask_öã∫Æ
(c⁄° *
key
, 
M©
& 
img
);

64 
M©
 
buûd_mask
(c⁄° *
key
,c⁄° *
key2
 = 0);

65 
	m°d
::
ve˘‹
<
cv
::
Poöt
> 
lﬂd_roi
(c⁄° *
±s
);

66 
cmp_mö_x
(c⁄° 
Poöt
 & 
a
, c⁄° Poöà& 
b
);

67 
cmp_mö_y
(c⁄° 
Poöt
 & 
a
, c⁄° Poöà& 
b
);

68 
	mcv
::
Re˘
 
gë_poöt_ª˘
(
°d
::
ve˘‹
<
cv
::
Poöt
> 
±
);

69 
	mcv
::
Re˘
 
gë_ª˘
(c⁄° * 
±1
,c⁄° * 
±2
);

72 
luv_mëhod
(c⁄° 
M©
 &
img
,M© 
bg
 ,
°d
::
ve˘‹
<
Re˘
> &
r
);

	@sample/libdetect_t/image_source.h

4 #¥agm®
⁄˚


6 #ifde‡
__˝lu•lus


9 #i‚de‡
WIN32


10 
	#__STDC_CONSTANT_MACROS


	)

11 
	#SUPPORT_YUANSDK


	)

15 
img§c_t
 
	timg§c_t
;

17 
	simg§c_f‹m©


19 
PixñF‹m©
 
fmt
;

20 
width
;

21 
height
;

22 
Âs
;

23 } 
	timg§c_f‹m©
;

26 
	szifImage


28 
PixñF‹m©
 
fmt_ty≥
;

29 
width
;

30 
height
;

31 *
d©a
[4];

32 
°ride
[4];

34 
°amp
;

36 *
öã∫Æ_±r
;

37 } 
	tzifImage
;

45 
img§c_t
 *
img§c_›í
(c⁄° *
uæ
, c⁄° 
img§c_f‹m©
 *
fmt
);

55 
img§c_t
 *
img§c_›í_js⁄
(c⁄° *
uæ
, c⁄° *
fmt_js⁄_°r
);

56 
img§c_˛o£
(
img§c_t
 *
˘x
);

61 
img§c_∑u£
(
img§c_t
 *
˘x
);

62 
img§c_ªsume
(
img§c_t
 *
˘x
);

67 
zifImage
 *
img§c_√xt
(
img§c_t
 *
˘x
);

68 
img§c_‰ì
(
img§c_t
 *
˘x
, 
zifImage
 *
img
);

70 #ifde‡
__˝lu•lus


	@sample/libdetect_t/libdetect_t.cpp

1 
	~"libdëe˘_t.h
"

2 
	~"bœckbﬂrd_dëe˘.h
"

4 
	~<°rög
>

6 
	~<c°dio
>

9 
	sdë_t


11 
KVC⁄fig
 *
	mcfg_
;

12 
BœckbﬂrdDëe˘ög
 *
	mbd_dëe˘_
;

13 
I∂Image
 *
	mmasked_
;

14 
boﬁ
 
	mt_m
;

15 
boﬁ
 
	mb_m
;

16 
	m°d
::
°rög
 
ªsu…_°r
;

20 
dë_t
 *
	$dë_›í
(c⁄° *
cfg_«me
)

22 
dë_t
 *
˘x
 = 
√w
 det_t;

23 
˘x
->
cfg_
 = 
√w
 
	`KVC⁄fig
(
cfg_«me
);

25 
˘x
->
t_m
 = 
Ál£
;

26 
˘x
->
b_m
 = 
Ál£
;

31 i‡(
	`°rcmp
(
cfg_«me
, "bd_detect_trace.config") == 0)

33 
˘x
->
b_m
 = 
åue
;

34 
˘x
->
bd_dëe˘_
 = 
√w
 
	`BœckbﬂrdDëe˘ög
(˘x->
cfg_
);

37  
˘x
;

38 
	}
}

41 
	$dë_˛o£
(
dë_t
 *
˘x
)

43 
dñëe
 
˘x
->
cfg_
;

45 if(
˘x
->
b_m
Ë{ 
dñëe
 ctx->
bd_dëe˘_
; }

47 
dñëe
 
˘x
;

48 
	}
}

53 
ve˘‹_to_js⁄
(
°d
::
ve˘‹
 < 
Re˘
 > 
r
, *
buf
, 
¨ó
)

55 
	goff£t
 = 0;

56 
	goff£t
 = 
•rötf
(
buf
, "{\"°amp\":%d,", 
time
(0));

57 
	goff£t
 +
•rötf
(
buf
 + 
off£t
, "\"¨ó\":%d,",
¨ó
);

58 
	goff£t
 +
•rötf
(
buf
 + 
off£t
, "\"rect\":[");

60 
	gi
 = 0; i < 
	gr
.
size
(); i++)

62 
Re˘
 
	gt
 = 
r
[
i
];

63 i‡(
	gi
 == 0)

64 
off£t
 +=

65 
•rötf
(
buf
 + 
off£t
,

67 
t
.
x
,Å.
y
,Å.
width
,Å.
height
);

69 
	goff£t
 +=

70 
•rötf
(
buf
 + 
off£t
,

72 
t
.
x
,Å.
y
,Å.
width
,Å.
height
);

75 
°rˇt
(
buf
, "]}");

80 
	#BUFSIZE
 4096

	)

82 *
	$dë_dëe˘
(
dë_t
 * 
˘x
, 
height
,
width
,*
imgd©a
)

84 *
°r
 = (*)
	`Æloˇ
(
BUFSIZE
);

85 
boﬁ
 
i§e˘
 = 
Ál£
;

86 
°d
::
ve˘‹
 < 
Re˘
 > 
r
;

87 
ve˘‹
 < 
cv
::
Re˘
 > 
fú°_r
;

90 
M©
 
Img
 = 
cv
::
	`M©
(
height
, 
width
, 
CV_8UC3
, 
imgd©a
);

93 
	`blur
(
Img
,Img,
	`Size
(3,3));

97 if(
˘x
->
b_m
)

100 
M©
 
masked_img
 = 
	`M©
(
Img
,
˘x
->
bd_dëe˘_
->
masked_ª˘
);

101 
˘x
->
bd_dëe˘_
->
	`do_mask
(
masked_img
);

105 
i§e˘
 = 
˘x
->
bd_dëe˘_
->
	`⁄e_‰ame_bd
–
masked_img
, 
r
);

106 
i
 = 0; i<
r
.
	`size
( ); i++)

108 
cv
::
Re˘
 
box
 = 
˘x
->
bd_dëe˘_
->
masked_ª˘
;

109 
r
[
i
].
x
 =Ñ[i].x+
box
.x;

110 
r
[
i
].
y
 =Ñ[i].y+
box
.y;

111 
r
[
i
] &
cv
::
	`Re˘
(0,0,
Img
.
cﬁs
,Img.
rows
);

115 i‡(
	`©oi
(
˘x
->
cfg_
->
	`gë_vÆue
("debug", "0")) > 0)

117 
i
 = 0; i < 
r
.
	`size
(); i++)

119 
	`ª˘™gÀ
(
Img
, 
r
[
i
], 
	`Sˇœr
(0, 0, 255), 2);

122 
	`imshow
("masked_img", 
masked_img
);

123 
	`waôKey
(1);

126 i‡(
i§e˘
)

128 
boﬁ
 
ˇl1
 = 
Ál£
; boﬁ 
ˇl2
 = false;

129 
i
 = 0; i < 
r
.
	`size
( ); i++)

131 
cv
::
Poöt
 
p
 = 
	`Poöt
((
r
[
i
].
x
 +Ñ[i].
width
/2), (r[i].
y
 +Ñ[i].
height
/2));

132 
j
 = 0; j < 
˘x
->
bd_dëe˘_
->
masked_ª˘_vec
.
	`size
( ); j++)

134 
cv
::
Re˘
 
ª˘
 = 
˘x
->
bd_dëe˘_
->
masked_ª˘_vec
[
j
];

135 if(
p
.
x
 >
ª˘
.x &&Ö.x <‘e˘.x+ª˘.
width
))

137 if(
j
 =0Ë
ˇl1
 = 
åue
;

138 if(
j
 =1Ë
ˇl2
 = 
åue
;

142 
¨ó
 = 0;

143 if(
ˇl1
 =
åue
 && 
ˇl2
 =åueË
¨ó
 = 0;

144 if(
ˇl1
 =
åue
Ë
¨ó
 = 1;

145 if(
ˇl2
 =
åue
Ë
¨ó
 = 2;

146 
¨ó
 = 0;

147 
	`ve˘‹_to_js⁄
(
r
, 
°r
, 
¨ó
);

151 
	`¢¥ötf
(
°r
, 
BUFSIZE
, "{\"°amp\": %d,\"¨ó\":0,\"ª˘\": [ ] }", 
	`time
(0));

156 
˘x
->
ªsu…_°r
 = 
°r
;

157  (*)
˘x
->
ªsu…_°r
.
	`c_°r
( );

158 
	}
}

	@sample/libdetect_t/libdetect_t.h

1 #¥agm®
⁄˚


3 #i‚de‡
_libdëe˘_t_h_


4 
	#_libdëe˘_t_h_


	)

5 
	~"›ícv2/›ícv.hµ
"

7 #ifde‡
__˝lu•lus


11 
dë_t
 
	tdë_t
;

12 
zifImage
 
	tzifImage
;

17 
dë_t
 *
dë_›í
(c⁄° *
cfg_«me
);

19 
dë_˛o£
(
dë_t
 *
˘x
);

39 *
dë_dëe˘
(
dë_t
 * 
˘x
, 
height
,
width
,*
imgd©a
);

42 #ifde‡
__˝lu•lus


	@sample/region/sample_region.c

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<uni°d.h
>

32 
	~<±hªad.h
>

33 
	~<sig«l.h
>

34 
	~"lﬂdbmp.h
"

36 
	~"ßm∂e_comm.h
"

37 
	~"hi_tde_≠i.h
"

38 
	~"hi_tde_ty≥.h
"

40 
HI_BOOL
 
bExô
 = 
HI_FALSE
;

41 
HI_BOOL
 
bTøvñ
 = 
HI_FALSE
;

42 
HI_BOOL
 
bSh≠e1
 = 
HI_FALSE
;

43 
HI_BOOL
 
bSh≠e2
 = 
HI_FALSE
;

44 
HI_BOOL
 
bAªa
 = 
HI_FALSE
;

46 
HI_S32
 
gs_s32RgnC¡Cur
 = 0;

48 
	#OSD_REVERSE_RGN_MAXCNT
 16

	)

49 
	#MAX_VENC_WORK_CHN_NUM
 4

	)

51 
VIDEO_NORM_E
 
gs_íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

52 
VO_INTF_TYPE_E
 
g_íVoI¡fTy≥
 = 
VO_INTF_CVBS
;

53 
PIC_SIZE_E
 
g_íPicSize
 = 
PIC_HD1080
;

56 
SAMPLE_VI_CONFIG_S
 
g_°ViChnC⁄fig
 =

58 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
,

59 
VIDEO_ENCODING_MODE_AUTO
,

61 
ROTATE_NONE
,

62 
VI_CHN_SET_NORMAL
,

63 
WDR_MODE_NONE


66 
	#SAMPLE_RGN_NOT_PASS
(
îr
)\

68 
	`¥ötf
("\033[0;31mtest case <%s>notÖassátÜine:%dÉrr:%x\033[0;39m\n",\

69 
__FUNCTION__
,
__LINE__
,
îr
);\

70 
	`exô
(-1);\

71 }0)

	)

73 
±hªad_muãx_t
 
Rgnmuãx_Tmp
 = 
PTHREAD_MUTEX_INITIALIZER
;

75 
	shiRGN_OSD_REVERSE_INFO_S


77 
RGN_HANDLE
 
H™dÀ
;

78 
HI_U8
 
u8PîPixñLumaThrd
;

80 
VPSS_GRP
 
VpssGΩ
;

81 
VPSS_CHN
 
VpssChn
;

82 
VPSS_REGION_INFO_S
 
°LumaRgnInfo
;

84 } 
	tRGN_OSD_REVERSE_INFO_S
;

86 
	sPTHREAD_VENC


88 
VENC_CHN
 
VeChnId
;

89 
HI_S32
 
s32FrmC¡
;

91 
FILE
* 
p°ªam
;

92 } 
	tVENC_PTHREAD_INFO_S
;

94 
	shiRGN_SIZE_S


96 
HI_U32
 
u32RgnNum
;

97 
SIZE_S
 
°SIZE
;

98 } 
	tRGN_SIZE_S
;

100 
	shiRGN_ATTR_INFO_S


102 
RGN_HANDLE
 
H™dÀ
;

103 
HI_U32
 
u32RgnNum
;

104 } 
	tRGN_ATTR_INFO_S
;

106 
HI_S32
 
SAMPLE_RGN_SYS_Inô
(
HI_VOID
)

108 
HI_S32
 
s32Rë
;

109 
VB_CONF_S
 
°ruVbC⁄f
;

110 
MPP_SYS_CONF_S
 
°ruSysC⁄f
;

112 
HI_MPI_SYS_Exô
();

113 
HI_MPI_VB_Exô
();

115 
mem£t
(&
°ruVbC⁄f
, 0, (
VB_CONF_S
));

117 
°ruVbC⁄f
.
u32MaxPoﬁC¡
 = 32;

118 
°ruVbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = 2592 * 1944 * 2;

119 
°ruVbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 10;

121 
°ruVbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = 768 * 576 * 2;

122 
°ruVbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 20;

124 
°ruVbC⁄f
.
a°CommPoﬁ
[2].
u32BlkSize
 = 768 * 576 * 2;

125 
°ruVbC⁄f
.
a°CommPoﬁ
[2].
u32BlkC¡
 = 10;

126 
°ruVbC⁄f
.
a°CommPoﬁ
[3].
u32BlkSize
 = 768 * 576 * 2;

127 
°ruVbC⁄f
.
a°CommPoﬁ
[3].
u32BlkC¡
 = 10;

128 
°ruVbC⁄f
.
a°CommPoﬁ
[4].
u32BlkSize
 = 768 * 576 * 2;

129 
°ruVbC⁄f
.
a°CommPoﬁ
[4].
u32BlkC¡
 = 10;

131 
s32Rë
 = 
HI_MPI_VB_SëC⁄f
(&
°ruVbC⁄f
);

132 i‡(
HI_SUCCESS
 !
s32Rë
)

134 
¥ötf
("HI_MPI_VB_SëC⁄‡Áû! s32Rë:0x%x\n", 
s32Rë
);

135  
s32Rë
;

138 
s32Rë
 = 
HI_MPI_VB_Inô
();

139 i‡(
HI_SUCCESS
 !
s32Rë
)

141 
¥ötf
("HI_MPI_VB_Inô faû! s32Rë:0x%x\n", 
s32Rë
);

142  
s32Rë
;

145 
°ruSysC⁄f
.
u32AlignWidth
 = 64;

146 
s32Rë
 = 
HI_MPI_SYS_SëC⁄f
(&
°ruSysC⁄f
);

147 i‡(
HI_SUCCESS
 !
s32Rë
)

149 
¥ötf
("HI_MPI_SYS_SëC⁄‡Áû! s32Rë:0x%x\n", 
s32Rë
);

150 (
HI_VOID
)
HI_MPI_VB_Exô
();

151  
s32Rë
;

154 
s32Rë
 = 
HI_MPI_SYS_Inô
();

155 i‡(
HI_SUCCESS
 !
s32Rë
)

157 
¥ötf
("HI_MPI_SYS_Inô faû! s32Rë:0x%x\n", 
s32Rë
);

158 (
HI_VOID
)
HI_MPI_VB_Exô
();

159  
s32Rë
;

162  
HI_SUCCESS
;

165 
HI_S32
 
SAMPLE_RGN_SYS_Exô
(
HI_VOID
)

167 
HI_MPI_SYS_Exô
();

168 
HI_MPI_VB_Exô
();

170  
HI_SUCCESS
;

173 
HI_VOID
 
SAMPLE_RGN_Ußge1
(
HI_CHAR
* 
sPrgNm
)

175 
¥ötf
("Ußgê: %†<ötf>\n", 
sPrgNm
);

176 
¥ötf
("intf:\n");

177 
¥ötf
("\t 0) vo cvbs output, default.\n");

178 
¥ötf
("\t 1) vo BT1120 output.\n");

182 
HI_VOID
 
SAMPLE_RGN_Ußge2
(HI_VOID)

184 
¥ötf
("press sample commandás follows!\n");

185 
¥ötf
("index:\n");

186 
¥ötf
("\t 0) VI->VPSS(COVER)->VO \n");

187 
¥ötf
("\t 1) VI->VPSS(COVEREX)->VO \n");

188 
¥ötf
("\t 2) VI->VPSS(OVERLAYEX)->VO \n");

189 
¥ötf
("\t 3) VI->VPSS(OVERLAYEX)->VO/VENC(OVERLAY)->file \n");

190 
¥ötf
("\t q) quitÅhe whole sample\n");

191 
¥ötf
("sample command:");

199 
HI_VOID
 
SAMPLE_RGN_H™dÀSig
(
HI_S32
 
signo
)

201 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

203 
num
 = 0;

205 
bExô
 = 
HI_FALSE
;

206 !
bExô
 && 
num
 > 5)

208 
¶ìp
(1);

211 
HI_MPI_RGN_De°roy
(
gs_s32RgnC¡Cur
);

212 
SAMPLE_COMM_ISP_St›
();

213 
SAMPLE_COMM_SYS_Exô
();

214 
¥ötf
("\033[0;31mprogramÉxitábnormally!\033[0;39m\n");

217 
exô
(0);

223 
HI_S32
 
SAMPLE_RGN_ChgCﬁ‹
(
RGN_HANDLE
 
RgnH™dÀ
, 
HI_U32
 
u32Cﬁ‹
)

225 
HI_S32
 
s32Rë
;

226 
RGN_ATTR_S
 
°RgnAâr
;

228 
s32Rë
 = 
HI_MPI_RGN_GëAâr
(
RgnH™dÀ
, &
°RgnAâr
);

229 i‡(
HI_SUCCESS
 !
s32Rë
)

231 
SAMPLE_PRT
("HI_MPI_RGN_GëAâ∏(%d)ËÁûed wôh %#x!\n", 
RgnH™dÀ
, 
s32Rë
);

232  
HI_FAILURE
;

235 
°RgnAâr
.
unAâr
.
°Ovîœy
.
u32BgCﬁ‹
 = 
u32Cﬁ‹
;

237 
s32Rë
 = 
HI_MPI_RGN_SëAâr
(
RgnH™dÀ
, &
°RgnAâr
);

238 i‡(
HI_SUCCESS
 !
s32Rë
)

240 
SAMPLE_PRT
("HI_MPI_RGN_SëAâ∏(%d)ËÁûed wôh %#x!\n", 
RgnH™dÀ
, 
s32Rë
);

241  
HI_FAILURE
;

244  
HI_SUCCESS
;

250 
HI_S32
 
SAMPLE_RGN_LﬂdBmp
(c⁄° * 
fûíame
, 
BITMAP_S
* 
p°Bôm≠
, 
HI_BOOL
 
bFû
, 
HI_U32
 
u16FûCﬁ‹
)

252 
OSD_SURFACE_S
 
SurÁ˚
;

253 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

254 
OSD_BITMAPINFO
 
bmpInfo
;

255 
HI_U32
 
u32ByãPîPix
 = 0;

257 i‡(
GëBmpInfo
(
fûíame
, &
bmpFûeHódî
, &
bmpInfo
) < 0)

259 
¥ötf
("GetBmpInfoÉrr!\n");

260  
HI_FAILURE
;

263 
SurÁ˚
.
íCﬁ‹Fmt
 = 
OSD_COLOR_FMT_RGB1555
;

264 
u32ByãPîPix
 = 2;

266 
p°Bôm≠
->
pD©a
 = 
mÆloc
(
u32ByãPîPix
 * (
bmpInfo
.
bmiHódî
.
biWidth
Ë* (bmpInfo.bmiHódî.
biHeight
));

268 i‡(
NULL
 =
p°Bôm≠
->
pD©a
)

270 
¥ötf
("malloc osd memroyÉrr!\n");

271  
HI_FAILURE
;

274 
Cª©eSurÁ˚ByBôM≠
(
fûíame
, &
SurÁ˚
, (
HI_U8
*)(
p°Bôm≠
->
pD©a
));

276 
p°Bôm≠
->
u32Width
 = 
SurÁ˚
.
u16Width
;

277 
p°Bôm≠
->
u32Height
 = 
SurÁ˚
.
u16Height
;

278 
p°Bôm≠
->
íPixñF‹m©
 = 
PIXEL_FORMAT_RGB_1555
;

281 
i
, 
j
;

282 
HI_U16
* 
pu16Temp
;

283 
pu16Temp
 = (
HI_U16
*)
p°Bôm≠
->
pD©a
;

285 i‡(
bFû
)

287 
i
 = 0; i < 
p°Bôm≠
->
u32Height
; i++)

289 
j
 = 0; j < 
p°Bôm≠
->
u32Width
; j++)

291 i‡(
u16FûCﬁ‹
 =*
pu16Temp
)

293 *
pu16Temp
 &= 0x7FFF;

296 
pu16Temp
++;

302  
HI_SUCCESS
;

306 
HI_S32
 
SAMPLE_RGN_Upd©eC™vas
(c⁄° * 
fûíame
, 
BITMAP_S
* 
p°Bôm≠
, 
HI_BOOL
 
bFû
,

307 
HI_U32
 
u16FûCﬁ‹
, 
SIZE_S
* 
p°Size
, HI_U32 
u32Såide
, 
PIXEL_FORMAT_E
 
íPixñFmt
)

309 
OSD_SURFACE_S
 
SurÁ˚
;

310 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

311 
OSD_BITMAPINFO
 
bmpInfo
;

313 i‡(
GëBmpInfo
(
fûíame
, &
bmpFûeHódî
, &
bmpInfo
) < 0)

315 
¥ötf
("GetBmpInfoÉrr!\n");

316  
HI_FAILURE
;

319 i‡(
PIXEL_FORMAT_RGB_1555
 =
íPixñFmt
)

321 
SurÁ˚
.
íCﬁ‹Fmt
 = 
OSD_COLOR_FMT_RGB1555
;

323 i‡(
PIXEL_FORMAT_RGB_4444
 =
íPixñFmt
)

325 
SurÁ˚
.
íCﬁ‹Fmt
 = 
OSD_COLOR_FMT_RGB4444
;

327 i‡(
PIXEL_FORMAT_RGB_8888
 =
íPixñFmt
)

329 
SurÁ˚
.
íCﬁ‹Fmt
 = 
OSD_COLOR_FMT_RGB8888
;

333 
¥ötf
("Pixel format isÇot support!\n");

334  
HI_FAILURE
;

337 i‡(
NULL
 =
p°Bôm≠
->
pD©a
)

339 
¥ötf
("malloc osd memroyÉrr!\n");

340  
HI_FAILURE
;

342 
Cª©eSurÁ˚ByC™vas
(
fûíame
, &
SurÁ˚
, (
HI_U8
*)(
p°Bôm≠
->
pD©a
), 
p°Size
->
u32Width
,Ö°Size->
u32Height
, 
u32Såide
);

344 
p°Bôm≠
->
u32Width
 = 
SurÁ˚
.
u16Width
;

345 
p°Bôm≠
->
u32Height
 = 
SurÁ˚
.
u16Height
;

347 i‡(
PIXEL_FORMAT_RGB_1555
 =
íPixñFmt
)

349 
p°Bôm≠
->
íPixñF‹m©
 = 
PIXEL_FORMAT_RGB_1555
;

351 i‡(
PIXEL_FORMAT_RGB_4444
 =
íPixñFmt
)

353 
p°Bôm≠
->
íPixñF‹m©
 = 
PIXEL_FORMAT_RGB_4444
;

355 i‡(
PIXEL_FORMAT_RGB_8888
 =
íPixñFmt
)

357 
p°Bôm≠
->
íPixñF‹m©
 = 
PIXEL_FORMAT_RGB_8888
;

360 
i
, 
j
;

361 
HI_U16
* 
pu16Temp
;

362 
pu16Temp
 = (
HI_U16
*)
p°Bôm≠
->
pD©a
;

364 i‡(
bFû
)

366 
i
 = 0; i < 
p°Bôm≠
->
u32Height
; i++)

368 
j
 = 0; j < 
p°Bôm≠
->
u32Width
; j++)

370 i‡(
u16FûCﬁ‹
 =*
pu16Temp
)

372 *
pu16Temp
 &= 0x7FFF;

375 
pu16Temp
++;

381  
HI_SUCCESS
;

385 
HI_S32
 
SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚
(
TDE2_SURFACE_S
* 
p°SurÁ˚
, c⁄° 
RGN_CANVAS_INFO_S
* 
p°C™vasInfo
)

387 
HI_ASSERT
((
NULL
 !
p°SurÁ˚
Ë&& (NULL !
p°C™vasInfo
));

389 
p°C™vasInfo
->
íPixñFmt
)

391 
PIXEL_FORMAT_RGB_4444
:

393 
p°SurÁ˚
->
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB4444
;

396 
PIXEL_FORMAT_RGB_1555
:

398 
p°SurÁ˚
->
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB1555
;

401 
PIXEL_FORMAT_RGB_8888
:

403 
p°SurÁ˚
->
íCﬁ‹Fmt
 = 
TDE2_COLOR_FMT_ARGB8888
;

408 
¥ötf
("[Func]:%s [Line]:%d [Info]:invalid OsdÖixel format(%d)\n",

409 
__FUNCTION__
, 
__LINE__
, 
p°C™vasInfo
->
íPixñFmt
);

410  
HI_FAILURE
;

414 
p°SurÁ˚
->
bAÕhaExt1555
 = 
HI_FALSE
;

415 
p°SurÁ˚
->
bAÕhaMax255
 = 
HI_TRUE
;

416 
p°SurÁ˚
->
u32PhyAddr
 = 
p°C™vasInfo
->u32PhyAddr;

417 
p°SurÁ˚
->
u32Width
 = 
p°C™vasInfo
->
°Size
.u32Width;

418 
p°SurÁ˚
->
u32Height
 = 
p°C™vasInfo
->
°Size
.u32Height;

419 
p°SurÁ˚
->
u32Såide
 = 
p°C™vasInfo
->u32Stride;

421  
HI_SUCCESS
;

425 
HI_S32
 
SAMPLE_RGN_AddRevî£Cﬁ‹Task
(
TDE_HANDLE
 
h™dÀ
,

426 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
* 
p°F‹eGroundRe˘
,

427 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
* 
p°BackGroundRe˘
)

429 
HI_S32
 
s32Rë
;

430 
TDE2_OPT_S
 
°O±
 = {0};

432 
HI_ASSERT
(
NULL
 !
p°F‹eGround
);

433 
HI_ASSERT
(
NULL
 !
p°F‹eGroundRe˘
);

434 
HI_ASSERT
(
NULL
 !
p°BackGround
);

435 
HI_ASSERT
(
NULL
 !
p°BackGroundRe˘
);

437 
°O±
.
íAluCmd
 = 
TDE2_ALUCMD_ROP
;

438 
°O±
.
íR›Code_AÕha
 = 
TDE2_ROP_COPYPEN
;

439 
°O±
.
íR›Code_Cﬁ‹
 = 
TDE2_ROP_NOT
;

441 
s32Rë
 = 
HI_TDE2_Bôblô
(
h™dÀ
, 
p°BackGround
, 
p°BackGroundRe˘
, 
p°F‹eGround
,

442 
p°F‹eGroundRe˘
, 
p°BackGround
, 
p°BackGroundRe˘
, &
°O±
);

443 i‡(
HI_SUCCESS
 !
s32Rë
)

445 
¥ötf
("HI_TDE2_Bôblô faû! s32Rë: 0x%x.\n", 
s32Rë
);

446  
s32Rë
;

449  
HI_SUCCESS
;

454 
HI_S32
 
SAMPLE_RGN_Revî£OsdCﬁ‹
(
TDE2_SURFACE_S
* 
p°SrcSurÁ˚
, TDE2_SURFACE_S* 
p°D°SurÁ˚
,

455 c⁄° 
VPSS_REGION_INFO_S
* 
p°RgnInfo
)

457 
HI_S32
 
i
;

458 
HI_S32
 
s32Rë
;

459 
TDE_HANDLE
 
h™dÀ
;

460 
TDE2_RECT_S
 
°Re˘
;

463 
HI_ASSERT
(
NULL
 !
p°SrcSurÁ˚
);

464 
HI_ASSERT
(
NULL
 !
p°D°SurÁ˚
);

465 
HI_ASSERT
(
NULL
 !
p°RgnInfo
);

467 
s32Rë
 = 
HI_TDE2_O≥n
();

468 i‡(
HI_SUCCESS
 !
s32Rë
)

470 
¥ötf
("HI_TDE2_O≥¿Áû! s32Rë: 0x%x.\n", 
s32Rë
);

471  
s32Rë
;

474 
h™dÀ
 = 
HI_TDE2_BegöJob
();

475 i‡(
h™dÀ
 < 0)

477 
¥ötf
("HI_TDE2_BeginJob fail!\n");

478  
HI_FAILURE
;

481 
°Re˘
.
s32Xpos
 = 0;

482 
°Re˘
.
s32Ypos
 = 0;

483 
°Re˘
.
u32Width
 = 
p°SrcSurÁ˚
->u32Width;

484 
°Re˘
.
u32Height
 = 
p°SrcSurÁ˚
->u32Height;

485 
s32Rë
 = 
HI_TDE2_QuickC›y
(
h™dÀ
, 
p°SrcSurÁ˚
, &
°Re˘
, 
p°D°SurÁ˚
, &stRect);

486 i‡(
HI_SUCCESS
 !
s32Rë
)

488 
¥ötf
("HI_TDE2_QuickC›y faû! s32Rë: 0x%x.\n", 
s32Rë
);

489 
HI_TDE2_C™˚lJob
(
h™dÀ
);

490  
s32Rë
;

493 
i
 = 0; i < 
p°RgnInfo
->
u32Regi⁄Num
; ++i)

495 
°Re˘
.
s32Xpos
 = 
p°RgnInfo
->
p°Regi⁄
[
i
].
s32X
;

496 
°Re˘
.
s32Ypos
 = 
p°RgnInfo
->
p°Regi⁄
[
i
].
s32Y
;

497 
°Re˘
.
u32Width
 = 
p°RgnInfo
->
p°Regi⁄
[
i
].u32Width;

498 
°Re˘
.
u32Height
 = 
p°RgnInfo
->
p°Regi⁄
[
i
].u32Height;

500 
s32Rë
 = 
SAMPLE_RGN_AddRevî£Cﬁ‹Task
(
h™dÀ
, 
p°SrcSurÁ˚
, &
°Re˘
, 
p°D°SurÁ˚
, &stRect);

501 i‡(
HI_SUCCESS
 !
s32Rë
)

503 
¥ötf
("SAMPLE_RGN_AddRevî£Cﬁ‹Task faû! s32Rë: 0x%x.\n", 
s32Rë
);

504 
HI_TDE2_C™˚lJob
(
h™dÀ
);

505  
s32Rë
;

509 
s32Rë
 = 
HI_TDE2_EndJob
(
h™dÀ
, 
HI_FALSE
, HI_FALSE, 10);

510 i‡(
HI_SUCCESS
 !
s32Rë
)

512 
¥ötf
("HI_TDE2_EndJob faû! s32Rë: 0x%x.\n", 
s32Rë
);

513 
HI_TDE2_C™˚lJob
(
h™dÀ
);

514  
s32Rë
;

517 
s32Rë
 = 
HI_TDE2_WaôF‹D⁄e
(
h™dÀ
);

518 i‡(
HI_SUCCESS
 !
s32Rë
)

520 
¥ötf
("HI_TDE2_WaôF‹D⁄êÁû! s32Rë: 0x%x.\n", 
s32Rë
);

521  
s32Rë
;

524  
HI_SUCCESS
;

528 
HI_S32
 
SAMPLE_RGN_GëVoDi•œyNum
(
HI_U32
 
u32VoChnNum
)

530 
HI_S32
 
s32Di•Num
;

532 i‡(1 =
u32VoChnNum
)

534 
s32Di•Num
 = 1;

536 i‡(4 =
u32VoChnNum
)

538 
s32Di•Num
 = 2;

540 i‡(9 =
u32VoChnNum
)

542 
s32Di•Num
 = 3;

544 i‡(16 =
u32VoChnNum
)

546 
s32Di•Num
 = 4;

553  
s32Di•Num
;

557 
HI_S32
 
SAMPLE_RGN_GëVoLayî
(
VO_DEV
 
VoDev
)

559 
HI_S32
 
s32LayîNum
;

561 i‡(0 =
VoDev
)

563 
s32LayîNum
 = 0;

570  
s32LayîNum
;

573 
HI_S32
 
SAMPLE_RGN_Cª©eCovî
(
RGN_HANDLE
 
H™dÀ
, 
HI_U32
 
u32Num
)

575 
HI_S32
 
i
;

576 
HI_S32
 
s32Rë
;

577 
MPP_CHN_S
 
°Chn
;

578 
RGN_ATTR_S
 
°RgnAâr
;

579 
RGN_CHN_ATTR_S
 
°ChnAâr
;

582 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

583 
°Chn
.
s32DevId
 = 0;

584 
°Chn
.
s32ChnId
 = 0;

587 
i
 = 
H™dÀ
; i < (H™dÀ + 
u32Num
); i++)

589 
°RgnAâr
.
íTy≥
 = 
COVER_RGN
;

591 
s32Rë
 = 
HI_MPI_RGN_Cª©e
(
i
, &
°RgnAâr
);

592 i‡(
s32Rë
 !
HI_SUCCESS
)

594 
¥ötf
("HI_MPI_RGN_Cª©êÁû! s32Rë: 0x%x.\n", 
s32Rë
);

595  
s32Rë
;

598 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

599 
°ChnAâr
.
íTy≥
 = 
COVER_RGN
;

600 i‡(
i
 < 4)

602 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
íCovîTy≥
 = 
AREA_RECT
;

603 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32X
 = 10 * (
i
 - 
H™dÀ
);

604 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32Y
 = 10 * (
i
 - 
H™dÀ
);

605 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Height
 = 64 * (
i
 - 
H™dÀ
 + 1);

606 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Width
 = 64 * (
i
 - 
H™dÀ
 + 1);

610 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
íCovîTy≥
 = 
AREA_QUAD_RANGLE
;

611 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
bSﬁid
 = 
HI_TRUE
;

612 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
u32Thick
 = 2;

613 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[0].
s32X
 = 50 * 
i
;

614 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[0].
s32Y
 = 0;

615 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[1].
s32X
 = 50 + 50 * 
i
;

616 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[1].
s32Y
 = 50;

617 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[2].
s32X
 = 50 + 50 * 
i
;

618 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[2].
s32Y
 = 300;

619 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[3].
s32X
 = 50 * 
i
;

620 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°QuadR™gÀ
.
°Poöt
[3].
s32Y
 = 200;

622 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x000000ff;

623 i‡(1 =
i
 % 
COVER_MAX_NUM_VPSS
)

625 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x0000ff00;

627 i‡(2 =
i
 % 
COVER_MAX_NUM_VPSS
)

629 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00ff0000;

631 i‡(3 =
i
 % 
COVER_MAX_NUM_VPSS
)

633 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00808080;

635 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Layî
 = 
i
 - 
H™dÀ
;

637 
s32Rë
 = 
HI_MPI_RGN_AâachToChn
(
i
, &
°Chn
, &
°ChnAâr
);

638 i‡(
s32Rë
 !
HI_SUCCESS
)

640 
¥ötf
("HI_MPI_RGN_AâachToCh¿Áû! s32Rë: 0x%x. w %d, H %d\n", 
s32Rë
, \

641 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Height
, stChnAâr.unChnAâr.°CovîChn.°Re˘.
u32Width
);

642  
s32Rë
;

646  
HI_SUCCESS
;

650 
HI_S32
 
SAMPLE_RGN_Cª©eCovîEx
(
RGN_HANDLE
 
H™dÀ
, 
HI_U32
 
u32Num
)

652 
HI_S32
 
i
;

653 
HI_S32
 
s32Rë
;

654 
MPP_CHN_S
 
°Chn
;

655 
RGN_ATTR_S
 
°RgnAâr
;

656 
RGN_CHN_ATTR_S
 
°ChnAâr
;

659 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

660 
°Chn
.
s32DevId
 = 0;

661 
°Chn
.
s32ChnId
 = 
VPSS_CHN1
;

664 
i
 = 
H™dÀ
; i < (H™dÀ + 
u32Num
); i++)

666 
°RgnAâr
.
íTy≥
 = 
COVEREX_RGN
;

668 
s32Rë
 = 
HI_MPI_RGN_Cª©e
(
i
, &
°RgnAâr
);

669 i‡(
s32Rë
 !
HI_SUCCESS
)

671 
¥ötf
("HI_MPI_RGN_Cª©êÁû! s32Rë: 0x%x.\n", 
s32Rë
);

672  
s32Rë
;

675 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

676 
°ChnAâr
.
íTy≥
 = 
COVEREX_RGN
;

677 i‡(
i
 < 4)

679 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
íCovîTy≥
 = 
AREA_RECT
;

680 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32X
 = 10 * (
i
 - 
H™dÀ
);

681 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32Y
 = 10 * (
i
 - 
H™dÀ
);

682 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Height
 = 64 * (
i
 - 
H™dÀ
 + 1);

683 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Width
 = 64 * (
i
 - 
H™dÀ
 + 1);

687 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
íCovîTy≥
 = 
AREA_QUAD_RANGLE
;

688 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
bSﬁid
 = 
HI_TRUE
;

689 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
u32Thick
 = 2;

690 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[0].
s32X
 = 50 * 
i
;

691 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[0].
s32Y
 = 0;

692 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[1].
s32X
 = 50 + 50 * 
i
;

693 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[1].
s32Y
 = 50;

694 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[2].
s32X
 = 50 + 50 * 
i
;

695 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[2].
s32Y
 = 300;

696 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[3].
s32X
 = 50 * 
i
;

697 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°QuadR™gÀ
.
°Poöt
[3].
s32Y
 = 200;

699 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x000000ff;

700 i‡(1 =
i
 % 
COVEREX_MAX_NUM_VPSS
)

702 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0000ff00;

704 i‡(2 =
i
 % 
COVEREX_MAX_NUM_VPSS
)

706 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x00ff0000;

708 i‡(3 =
i
 % 
COVEREX_MAX_NUM_VPSS
)

710 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x00808080;

712 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Layî
 = 
i
 - 
H™dÀ
;

714 
s32Rë
 = 
HI_MPI_RGN_AâachToChn
(
i
, &
°Chn
, &
°ChnAâr
);

715 i‡(
s32Rë
 !
HI_SUCCESS
)

717 
¥ötf
("HI_MPI_RGN_AâachToCh¿Áû! s32Rë: 0x%x.\n", 
s32Rë
);

718  
s32Rë
;

722  
HI_SUCCESS
;

726 
HI_S32
 
SAMPLE_RGN_Cª©eOvîœyExF‹Vpss
(
RGN_HANDLE
 
H™dÀ
, 
HI_U32
 
u32Num
)

728 
HI_S32
 
i
;

729 
HI_S32
 
s32Rë
;

730 
MPP_CHN_S
 
°Chn
;

731 
HI_U32
 
u32œyî
 = 0;

732 
RGN_ATTR_S
 
°RgnAârSë
;

733 
RGN_CHN_ATTR_S
 
°ChnAâr
;

736 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

737 
°Chn
.
s32DevId
 = 0;

738 
°Chn
.
s32ChnId
 = 
VPSS_CHN2
;

740 
i
 = 
H™dÀ
; i < (H™dÀ + 
u32Num
); i++)

742 
°RgnAârSë
.
íTy≥
 = 
OVERLAYEX_RGN
;

743 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
íPixñFmt
 = 
PIXEL_FORMAT_RGB_1555
;

744 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Width
 = 300;

745 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Height
 = 300;

746 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
u32BgCﬁ‹
 = 0x000003e0;

748 i‡(1 =
i
 % 
u32Num
)

750 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Width
 = 180;

751 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Height
 = 120;

752 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
u32BgCﬁ‹
 = 0x0000001f;

754 i‡(2 =
i
 % 
u32Num
)

756 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Width
 = 160;

757 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Height
 = 120;

758 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
u32BgCﬁ‹
 = 0x00007c00;

760 i‡(3 =
i
 % 
u32Num
)

762 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Width
 = 100;

763 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
°Size
.
u32Height
 = 150;

764 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
u32BgCﬁ‹
 = 0x000007ff;

767 
s32Rë
 = 
HI_MPI_RGN_Cª©e
(
i
, &
°RgnAârSë
);

768 i‡(
s32Rë
 !
HI_SUCCESS
)

770 
¥ötf
("HI_MPI_RGN_Cª©êÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

771  
s32Rë
;

774 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

775 
°ChnAâr
.
íTy≥
 = 
OVERLAYEX_RGN
;

776 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 48;

777 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 48;

778 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32BgAÕha
 = 255;

779 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32FgAÕha
 = 255;

780 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32Layî
 = 
u32œyî
;

781 
u32œyî
++;

782 i‡(1 =
i
 % 4)

784 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 130;

785 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 330;

787 i‡(2 =
i
 % 4)

789 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 270;

790 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 300;

792 i‡(3 =
i
 % 4)

794 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 180;

795 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 400;

798 
s32Rë
 = 
HI_MPI_RGN_AâachToChn
(
i
, &
°Chn
, &
°ChnAâr
);

799 i‡(
s32Rë
 !
HI_SUCCESS
)

801 
¥ötf
("HI_MPI_RGN_AâachToCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

802  
s32Rë
;

806  
HI_SUCCESS
;

811 
HI_S32
 
SAMPLE_RGN_Cª©eOvîœyF‹Víc
(
RGN_HANDLE
 
H™dÀ
, 
HI_U32
 
u32Num
)

813 
HI_S32
 
i
;

814 
HI_S32
 
s32Rë
;

815 
MPP_CHN_S
 
°Chn
;

816 
RGN_ATTR_S
 
°RgnAâr
;

817 
RGN_CHN_ATTR_S
 
°ChnAâr
;

820 
°Chn
.
íModId
 = 
HI_ID_VENC
;

821 
°Chn
.
s32DevId
 = 0;

822 
°Chn
.
s32ChnId
 = 0;

824 
i
 = 
H™dÀ
; i < (H™dÀ + 
u32Num
); i++)

826 
°RgnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

827 
°RgnAâr
.
unAâr
.
°Ovîœy
.
íPixñFmt
 = 
PIXEL_FORMAT_RGB_1555
;

828 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 300;

829 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 300;

830 
°RgnAâr
.
unAâr
.
°Ovîœy
.
u32BgCﬁ‹
 = 0x000003e0;

832 i‡(1 =
i
 % 
u32Num
)

834 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 180;

835 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 120;

836 
°RgnAâr
.
unAâr
.
°Ovîœy
.
u32BgCﬁ‹
 = 0x0000001f;

838 i‡(2 =
i
 % 
u32Num
)

840 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 160;

841 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 120;

842 
°RgnAâr
.
unAâr
.
°Ovîœy
.
u32BgCﬁ‹
 = 0x00007c00;

844 i‡(3 =
i
 % 
u32Num
)

846 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 100;

847 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 160;

848 
°RgnAâr
.
unAâr
.
°Ovîœy
.
u32BgCﬁ‹
 = 0x000007ff;

851 
s32Rë
 = 
HI_MPI_RGN_Cª©e
(
i
, &
°RgnAâr
);

852 i‡(
s32Rë
 !
HI_SUCCESS
)

854 
¥ötf
("HI_MPI_RGN_Cª©êÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

855  
s32Rë
;

858 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

859 
°ChnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

860 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 48;

861 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 48;

862 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32BgAÕha
 = 128;

863 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32FgAÕha
 = 128;

864 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32Layî
 = 
i
;

866 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
bAbsQp
 = 
HI_FALSE
;

867 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
s32Qp
 = 0;

869 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Height
 = 16 * (
i
 % 2 + 1);

870 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Width
 = 16 * (
i
 % 2 + 1);

871 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
u32LumThªsh
 = 128;

872 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
íChgMod
 = 
LESSTHAN_LUM_THRESH
;

873 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
bInvCﬁEn
 = 
HI_FALSE
;

874 i‡(1 =
i
 % 
u32Num
)

876 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 128;

877 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 320;

879 i‡(2 =
i
 % 
u32Num
)

881 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 280;

882 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 240;

884 i‡(3 =
i
 % 
u32Num
)

886 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 180;

887 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 400;

889 
s32Rë
 = 
HI_MPI_RGN_AâachToChn
(
i
, &
°Chn
, &
°ChnAâr
);

890 i‡(
s32Rë
 !
HI_SUCCESS
)

892 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

896  
HI_SUCCESS
;

901 
HI_S32
 
SAMPLE_RGN_GëVoAâr
(
VO_DEV
 
VoDev
, 
VO_INTF_SYNC_E
 
íI¡fSync
, 
VO_PUB_ATTR_S
* 
p°PubAâr
,

902 
VO_VIDEO_LAYER_ATTR_S
* 
p°LayîAâr
, 
HI_S32
 
s32Squ¨eS‹t
, 
VO_CHN_ATTR_S
* 
a°ChnAâr
)

904 
VO_INTF_TYPE_E
 
íI¡fTy≥
;

905 
HI_U32
 
u32Frmt
, 
u32Width
, 
u32Height
, 
j
;

907 
íI¡fTy≥
 = 
VO_INTF_BT1120
;

908 i‡(
íI¡fSync
 =
VO_OUTPUT_960H_PAL
 ||ÉnI¡fSyn¯=
VO_OUTPUT_960H_NTSC


909 || 
íI¡fSync
 =
VO_OUTPUT_PAL
 ||ÉnI¡fSyn¯=
VO_OUTPUT_NTSC
)

911 
íI¡fTy≥
 = 
VO_INTF_CVBS
;

914 
íI¡fSync
)

916 
VO_OUTPUT_PAL
 :

917 
u32Width
 = 720;

918 
u32Height
 = 576;

919 
u32Frmt
 = 25;

921 
VO_OUTPUT_NTSC
 :

922 
u32Width
 = 720;

923 
u32Height
 = 480;

924 
u32Frmt
 = 30;

926 
VO_OUTPUT_1080P24
 :

927 
u32Width
 = 1920;

928 
u32Height
 = 1080;

929 
u32Frmt
 = 24;

931 
VO_OUTPUT_1080P25
 :

932 
u32Width
 = 1920;

933 
u32Height
 = 1080;

934 
u32Frmt
 = 25;

936 
VO_OUTPUT_1080P30
 :

937 
u32Width
 = 1920;

938 
u32Height
 = 1080;

939 
u32Frmt
 = 30;

941 
VO_OUTPUT_720P50
 :

942 
u32Width
 = 1280;

943 
u32Height
 = 720;

944 
u32Frmt
 = 50;

946 
VO_OUTPUT_720P60
 :

947 
u32Width
 = 1280;

948 
u32Height
 = 720;

949 
u32Frmt
 = 60;

951 
VO_OUTPUT_1080I50
 :

952 
u32Width
 = 1920;

953 
u32Height
 = 1080;

954 
u32Frmt
 = 50;

956 
VO_OUTPUT_1080I60
 :

957 
u32Width
 = 1920;

958 
u32Height
 = 1080;

959 
u32Frmt
 = 60;

961 
VO_OUTPUT_1080P50
 :

962 
u32Width
 = 1920;

963 
u32Height
 = 1080;

964 
u32Frmt
 = 50;

966 
VO_OUTPUT_1080P60
 :

967 
u32Width
 = 1920;

968 
u32Height
 = 1080;

969 
u32Frmt
 = 60;

971 
VO_OUTPUT_576P50
 :

972 
u32Width
 = 720;

973 
u32Height
 = 576;

974 
u32Frmt
 = 50;

976 
VO_OUTPUT_480P60
 :

977 
u32Width
 = 720;

978 
u32Height
 = 480;

979 
u32Frmt
 = 60;

981 
VO_OUTPUT_800x600_60
:

982 
u32Width
 = 800;

983 
u32Height
 = 600;

984 
u32Frmt
 = 60;

986 
VO_OUTPUT_1024x768_60
:

987 
u32Width
 = 1024;

988 
u32Height
 = 768;

989 
u32Frmt
 = 60;

991 
VO_OUTPUT_1280x1024_60
:

992 
u32Width
 = 1280;

993 
u32Height
 = 1024;

994 
u32Frmt
 = 60;

996 
VO_OUTPUT_1366x768_60
:

997 
u32Width
 = 1366;

998 
u32Height
 = 768;

999 
u32Frmt
 = 60;

1001 
VO_OUTPUT_1440x900_60
:

1002 
u32Width
 = 1440;

1003 
u32Height
 = 900;

1004 
u32Frmt
 = 60;

1006 
VO_OUTPUT_1280x800_60
:

1007 
u32Width
 = 1280;

1008 
u32Height
 = 800;

1009 
u32Frmt
 = 60;

1013  
HI_FAILURE
;

1016 i‡(
NULL
 !
p°PubAâr
)

1018 
p°PubAâr
->
íI¡fSync
 =ÉnIntfSync;

1019 
p°PubAâr
->
u32BgCﬁ‹
 = 0;

1020 
p°PubAâr
->
íI¡fTy≥
 =ÉnIntfType;

1023 i‡(
NULL
 !
p°LayîAâr
)

1025 
p°LayîAâr
->
°Di•Re˘
.
s32X
 = 0;

1026 
p°LayîAâr
->
°Di•Re˘
.
s32Y
 = 0;

1027 
p°LayîAâr
->
°Di•Re˘
.
u32Width
 = u32Width;

1028 
p°LayîAâr
->
°Di•Re˘
.
u32Height
 = u32Height;

1029 
p°LayîAâr
->
°ImageSize
.
u32Width
 = u32Width;

1030 
p°LayîAâr
->
°ImageSize
.
u32Height
 = u32Height;

1031 
p°LayîAâr
->
bDoubÀFøme
 = 
HI_FALSE
;

1032 
p°LayîAâr
->
bClu°îMode
 = 
HI_FALSE
;

1033 
p°LayîAâr
->
u32Di•FrmRt
 = 
u32Frmt
;

1034 
p°LayîAâr
->
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1037 i‡(
NULL
 !
a°ChnAâr
)

1039 
j
 = 0; j < (
s32Squ¨eS‹t
 * s32SquareSort); j++)

1041 
a°ChnAâr
[
j
].
°Re˘
.
s32X
 = 
ALIGN_BACK
((
u32Width
 / 
s32Squ¨eS‹t
) * (j % s32SquareSort), 4);

1042 
a°ChnAâr
[
j
].
°Re˘
.
s32Y
 = 
ALIGN_BACK
((
u32Height
 / 
s32Squ¨eS‹t
) * (j / s32SquareSort), 4);

1043 
a°ChnAâr
[
j
].
°Re˘
.
u32Width
 = 
ALIGN_BACK
(u32Width / 
s32Squ¨eS‹t
, 4);

1044 
a°ChnAâr
[
j
].
°Re˘
.
u32Height
 = 
ALIGN_BACK
(u32Heighà/ 
s32Squ¨eS‹t
, 4);

1045 
a°ChnAâr
[
j
].
u32Pri‹ôy
 = 0;

1046 
a°ChnAâr
[
j
].
bDeÊickî
 = 
HI_FALSE
;

1050  
HI_SUCCESS
;

1053 
HI_S32
 
SAMPLE_RGN_SèπVpss
(HI_S32 
s32VpssGΩNum
, 
HI_U32
 
u32VpssChn
)

1055 
HI_S32
 
i
 = 0;

1056 
HI_S32
 
s32Rë
;

1057 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

1058 
VPSS_CHN
 
VpssChn
;

1059 
VPSS_GRP_ATTR_S
 
°GΩAâr
;

1060 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

1061 
HI_U32
 
u32CovîMask
;

1062 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

1063 
SIZE_S
 
°Size
;

1065 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

1066 
mem£t
(&
°VpssChnAâr
, 0, (
VPSS_CHN_ATTR_S
));

1068 
°GΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1069 
°GΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1070 
°GΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1071 
°GΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1072 
°GΩAâr
.
bIeEn
 = 
HI_FALSE
;

1073 
°GΩAâr
.
bNrEn
 = 
HI_FALSE
;

1074 
°GΩAâr
.
bHi°En
 = 
HI_FALSE
;

1075 
°GΩAâr
.
bDciEn
 = 
HI_FALSE
;

1077 
i
 = 0; i < 
s32VpssGΩNum
; i++)

1079 
s32Rë
 = 
HI_MPI_VPSS_Cª©eGΩ
(
i
, &
°GΩAâr
);

1080 i‡(
HI_SUCCESS
 !
s32Rë
)

1082 
¥ötf
("¸óã vps†gΩ%d faû, s32Rë: 0x%x.\n", 
i
, 
s32Rë
);

1083  
s32Rë
;

1087 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1088 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1089 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1090 
°VpssChnMode
.
u32Width
 = 720;

1091 
°VpssChnMode
.
u32Height
 = 576;

1092 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1094 
°VpssChnAâr
.
bB‹dîEn
 = 
HI_FALSE
;

1095 
°VpssChnAâr
.
bSpEn
 = 
HI_FALSE
;

1096 
°VpssChnAâr
.
bFlù
 = 
HI_FALSE
;

1097 
°VpssChnAâr
.
bMúr‹
 = 
HI_FALSE
;

1098 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1099 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1101 
VpssChn
 = 0; VpssChn < 4; VpssChn++)

1103 i‡(0 =
VpssChn
)

1105 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1106 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1109 
s32Rë
 = 
HI_MPI_VPSS_SëChnMode
(
i
, 
VpssChn
, &
°VpssChnMode
);

1110 i‡(
HI_SUCCESS
 !
s32Rë
)

1112 
¥ötf
("£àvps†gΩ%d chn%d modêÁû, s32Rë: 0x%x.\n", 
i
, 
VpssChn
, 
s32Rë
);

1113  
s32Rë
;

1116 
s32Rë
 = 
HI_MPI_VPSS_SëChnAâr
(
i
, 
VpssChn
, &
°VpssChnAâr
);

1117 i‡(
HI_SUCCESS
 !
s32Rë
)

1119 
¥ötf
("£àvps†gΩ%d chn%d Aâ∏Áû, s32Rë: 0x%x.\n", 
i
, 
VpssChn
, 
s32Rë
);

1120  
s32Rë
;

1123 
s32Rë
 = 
HI_MPI_VPSS_E«bÀChn
(
i
, 
VpssChn
);

1124 i‡(
HI_SUCCESS
 !
s32Rë
)

1126 
¥ötf
("¸óã vps†gΩ%d ch∆%d faû, s32Rë: 0x%x.\n", 
i
, 
VpssChn
, 
s32Rë
);

1127  
s32Rë
;

1131 
s32Rë
 = 
HI_MPI_VPSS_SèπGΩ
(
i
);

1132 i‡(
HI_SUCCESS
 !
s32Rë
)

1134 
¥ötf
("°¨àvps†gΩ%d faû, s32Rë: 0x%x.\n", 
i
, 
s32Rë
);

1135  
s32Rë
;

1138 
u32CovîMask
 = 255;

1139 
s32Rë
 = 
HI_MPI_VPSS_SëChnCovî
(
i
, 
u32VpssChn
, 
u32CovîMask
);

1140 i‡(
HI_SUCCESS
 !
s32Rë
)

1142 
¥ötf
("HI_MPI_VPSS_SëChnCovî faû! GΩ: %d, Chn: %d! s32Rë: 0x%x.\n", 
i
, 
u32VpssChn
, 
s32Rë
);

1143  
s32Rë
;

1148  
HI_SUCCESS
;

1151 
HI_S32
 
SAMPLE_RGN_SèπVpssHD
(HI_S32 
s32VpssGΩNum
, 
HI_U32
 
u32VpssChn
)

1153 
HI_S32
 
i
 = 0;

1154 
HI_S32
 
s32Rë
;

1155 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

1156 
VPSS_CHN
 
VpssChn
;

1157 
VPSS_GRP_ATTR_S
 
°GΩAâr
;

1158 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

1159 
HI_U32
 
u32CovîMask
;

1160 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

1161 
SIZE_S
 
°Size
;

1163 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

1165 
mem£t
(&
°VpssChnAâr
, 0, (
VPSS_CHN_ATTR_S
));

1167 
°GΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1168 
°GΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1169 
°GΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1170 
°GΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1171 
°GΩAâr
.
bIeEn
 = 
HI_FALSE
;

1172 
°GΩAâr
.
bNrEn
 = 
HI_FALSE
;

1173 
°GΩAâr
.
bHi°En
 = 
HI_FALSE
;

1174 
°GΩAâr
.
bDciEn
 = 
HI_FALSE
;

1176 
i
 = 0; i < 
s32VpssGΩNum
; i++)

1178 
s32Rë
 = 
HI_MPI_VPSS_Cª©eGΩ
(
i
, &
°GΩAâr
);

1179 i‡(
HI_SUCCESS
 !
s32Rë
)

1181 
¥ötf
("¸óàvps†gΩ%d faû! s32Rë: 0x%x.\n", 
i
, 
s32Rë
);

1182  
s32Rë
;

1186 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1187 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1188 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1189 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1190 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1191 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1193 
°VpssChnAâr
.
bB‹dîEn
 = 
HI_FALSE
;

1194 
°VpssChnAâr
.
bSpEn
 = 
HI_FALSE
;

1195 
°VpssChnAâr
.
bFlù
 = 
HI_FALSE
;

1196 
°VpssChnAâr
.
bMúr‹
 = 
HI_FALSE
;

1197 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1198 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1200 
VpssChn
 = 0; VpssChn < 4; VpssChn++)

1202 
s32Rë
 = 
HI_MPI_VPSS_SëChnMode
(
i
, 
VpssChn
, &
°VpssChnMode
);

1203 i‡(
HI_SUCCESS
 !
s32Rë
)

1205 
¥ötf
("£àvps†gΩ%d chn%d modêÁû, s32Rë: 0x%x.\n", 
i
, 
VpssChn
, 
s32Rë
);

1206  
s32Rë
;

1209 
s32Rë
 = 
HI_MPI_VPSS_SëChnAâr
(
i
, 
VpssChn
, &
°VpssChnAâr
);

1210 i‡(
HI_SUCCESS
 !
s32Rë
)

1212 
¥ötf
("£àvps†gΩ%d chn%d Aâ∏Áû, s32Rë: 0x%x.\n", 
i
, 
VpssChn
, 
s32Rë
);

1213  
s32Rë
;

1216 
s32Rë
 = 
HI_MPI_VPSS_E«bÀChn
(
i
, 
VpssChn
);

1217 i‡(
HI_SUCCESS
 !
s32Rë
)

1219 
¥ötf
("¸óã vps†gΩ%d ch∆%d faû, s32Rë: 0x%x.\n", 
i
, 
VpssChn
, 
s32Rë
);

1220  
s32Rë
;

1224 
s32Rë
 = 
HI_MPI_VPSS_SèπGΩ
(
i
);

1225 i‡(
HI_SUCCESS
 !
s32Rë
)

1227 
¥ötf
("°¨àvps†gΩ%d faû! s32Rë: 0x%x.\n", 
i
, 
s32Rë
);

1228  
s32Rë
;

1231 
u32CovîMask
 = 255;

1232 
s32Rë
 = 
HI_MPI_VPSS_SëChnCovî
(
i
, 
u32VpssChn
, 
u32CovîMask
);

1233 i‡(
HI_SUCCESS
 !
s32Rë
)

1235 
¥ötf
("HI_MPI_VPSS_SëChnCovî faû! GΩ: %d, Chn: %d! s32Rë: 0x%x.\n", 
i
, 
u32VpssChn
, 
s32Rë
);

1236  
s32Rë
;

1241  
HI_SUCCESS
;

1245 
HI_S32
 
SAMPLE_RGN_St›Vpss
(HI_S32 
s32VpssGΩNum
)

1247 
HI_S32
 
i
 = 0;

1248 
HI_S32
 
s32Rë
;

1251 
i
 = 0; i < 
s32VpssGΩNum
; i++)

1253 
s32Rë
 = 
HI_MPI_VPSS_St›GΩ
(
i
);

1254 i‡(
HI_SUCCESS
 !
s32Rë
)

1256 
¥ötf
("°› vps†gΩ%d faû! s32Rë: 0x%x.\n", 
i
, 
s32Rë
);

1257  
s32Rë
;

1260 
s32Rë
 = 
HI_MPI_VPSS_De°royGΩ
(
i
);

1261 i‡(
HI_SUCCESS
 !
s32Rë
)

1263 
¥ötf
("de°roy vps†gΩ%d faû! s32Rë: 0x%x.\n", 
i
, 
s32Rë
);

1264  
s32Rë
;

1268  
HI_SUCCESS
;

1271 
HI_S32
 
SAMPLE_RGN_SèπVo
(
VO_DEV
 
VoDev
, 
HI_U32
 
u32VoChnNum
, 
VO_INTF_SYNC_E
 
íI¡fSync
)

1273 
HI_S32
 
i
;

1274 
HI_S32
 
s32Rë
;

1275 
HI_S32
 
s32Di•Num
;

1276 
VO_LAYER
 
VoLayî
;

1277 
VO_PUB_ATTR_S
 
°PubAâr
;

1278 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1279 
VO_CHN_ATTR_S
 
a°ChnAâr
[16];

1281 
s32Di•Num
 = 
SAMPLE_RGN_GëVoDi•œyNum
(
u32VoChnNum
);

1282 i‡(
s32Di•Num
 < 0)

1284 
¥ötf
("SAMPLE_RGN_GëVoDi•œyNum faûed! u32VoChnNum: %d.\n", 
u32VoChnNum
);

1285  
HI_FAILURE
;

1288 
s32Rë
 = 
SAMPLE_RGN_GëVoAâr
(
VoDev
, 
íI¡fSync
, &
°PubAâr
, &
°LayîAâr
, 
s32Di•Num
, 
a°ChnAâr
);

1289 i‡(
HI_SUCCESS
 !
s32Rë
)

1291 
¥ötf
("SAMPLE_RGN_GetVoAttr failed!\n");

1292  
HI_FAILURE
;

1295 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

1296 i‡(
VoLayî
 < 0)

1298 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

1299  
HI_FAILURE
;

1302 
s32Rë
 = 
HI_MPI_VO_DißbÀ
(
VoDev
);

1303 i‡(
HI_SUCCESS
 !
s32Rë
)

1305 
¥ötf
("HI_MPI_VO_DißbÀ faûed! s32Rë: 0x%x.\n", 
s32Rë
);

1306  
s32Rë
;

1309 
s32Rë
 = 
HI_MPI_VO_SëPubAâr
(
VoDev
, &
°PubAâr
);

1310 i‡(
HI_SUCCESS
 !
s32Rë
)

1312 
¥ötf
("HI_MPI_VO_SëPubAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

1313  
s32Rë
;

1316 
s32Rë
 = 
HI_MPI_VO_E«bÀ
(
VoDev
);

1317 i‡(
HI_SUCCESS
 !
s32Rë
)

1319 
¥ötf
("HI_MPI_VO_E«bÀ faûed! s32Rë: 0x%x.\n", 
s32Rë
);

1320  
s32Rë
;

1323 
s32Rë
 = 
HI_MPI_VO_SëVideoLayîAâr
(
VoLayî
, &
°LayîAâr
);

1324 i‡(
HI_SUCCESS
 !
s32Rë
)

1326 
¥ötf
("HI_MPI_VO_SëVideoLayîAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

1327  
s32Rë
;

1330 
s32Rë
 = 
HI_MPI_VO_E«bÀVideoLayî
(
VoLayî
);

1331 i‡(
HI_SUCCESS
 !
s32Rë
)

1333 
¥ötf
("HI_MPI_VO_E«bÀVideoLayî faûed! s32Rë: 0x%x.\n", 
s32Rë
);

1334  
s32Rë
;

1337 
i
 = 0; i < 
u32VoChnNum
; i++)

1339 
s32Rë
 = 
HI_MPI_VO_SëChnAâr
(
VoLayî
, 
i
, &
a°ChnAâr
[i]);

1340 i‡(
HI_SUCCESS
 !
s32Rë
)

1342 
¥ötf
("HI_MPI_VO_SëChnAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

1343  
s32Rë
;

1346 
s32Rë
 = 
HI_MPI_VO_E«bÀChn
(
VoLayî
, 
i
);

1347 i‡(
HI_SUCCESS
 !
s32Rë
)

1349 
¥ötf
("HI_MPI_VO_E«bÀCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

1350  
s32Rë
;

1354  
HI_SUCCESS
;

1357 
HI_S32
 
SAMPLE_RGN_St›VoChn
(
VO_DEV
 
VoDev
, 
HI_U32
 
u32VoChnNum
)

1359 
HI_S32
 
i
;

1360 
HI_S32
 
s32Rë
;

1361 
VO_LAYER
 
VoLayî
;

1363 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

1364 i‡(
VoLayî
 < 0)

1366 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

1367  
HI_FAILURE
;

1370 
i
 = 0; i < 
u32VoChnNum
; i++)

1372 
s32Rë
 = 
HI_MPI_VO_DißbÀChn
(
VoLayî
, 
i
);

1373 i‡(
HI_SUCCESS
 !
s32Rë
)

1375 
¥ötf
("HI_MPI_VO_DißbÀCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

1376  
s32Rë
;

1380  
HI_SUCCESS
;

1384 
HI_S32
 
SAMPLE_RGN_St›VoDev
(
VO_DEV
 
VoDev
)

1386 
HI_S32
 
s32Rë
;

1387 
VO_LAYER
 
VoLayî
;

1389 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

1390 i‡(
VoLayî
 < 0)

1392 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

1393  
HI_FAILURE
;

1396 
s32Rë
 = 
HI_MPI_VO_DißbÀVideoLayî
(
VoLayî
);

1397 i‡(
HI_SUCCESS
 !
s32Rë
)

1399 
¥ötf
("HI_MPI_VO_DißbÀVideoLayî faûed! s32Rë: 0x%x.\n", 
s32Rë
);

1400  
s32Rë
;

1403 
s32Rë
 = 
HI_MPI_VO_DißbÀ
(
VoDev
);

1404 i‡(
HI_SUCCESS
 !
s32Rë
)

1406 
¥ötf
("HI_MPI_VO_DißbÀ faûed! s32Rë:0x%x.\n", 
s32Rë
);

1407  
s32Rë
;

1413 
HI_S32
 
SAMPLE_RGN_SèπVíc
(
VENC_CHN
 
VícChn
)

1415 
HI_S32
 
s32Rë
;

1416 
HI_U32
 
u32PicWidth
;

1417 
HI_U32
 
u32PicHeight
;

1418 
VENC_CHN_ATTR_S
 
°ChnAâr
;

1420 
u32PicWidth
 = 720;

1421 
u32PicHeight
 = 576;

1422 
°ChnAâr
.
°VeAâr
.
íTy≥
 = 
PT_H264
;

1423 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
bByFøme
 = 
HI_TRUE
;

1425 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
u32MaxPicHeight
 = 
u32PicHeight
;

1426 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
u32MaxPicWidth
 = 
u32PicWidth
;

1427 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
u32PicHeight
 = u32PicHeight;

1428 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
u32PicWidth
 = u32PicWidth;

1429 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
u32BufSize
 = 
u32PicWidth
 * 
u32PicHeight
 * 2;

1430 
°ChnAâr
.
°VeAâr
.
°AârH264e
.
u32Profûe
 = 0;

1432 
°ChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264CBR
;

1433 
°ChnAâr
.
°RcAâr
.
°AârH264Cbr
.
‰32D°FrmR©e
 = 25;

1434 
°ChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32BôR©e
 = 1024 * 2;

1435 
°ChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32Flu˘u©eLevñ
 = 0;

1436 
°ChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32G›
 = 25;

1437 
°ChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32SrcFrmR©e
 = 25;

1438 
°ChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32SètTime
 = 1;

1440 
s32Rë
 = 
HI_MPI_VENC_Cª©eChn
(
VícChn
, &
°ChnAâr
);

1441 i‡(
HI_SUCCESS
 !
s32Rë
)

1443 
¥ötf
("HI_MPI_VENC_Cª©eCh¿îr‹, s32Rë: 0x%x.\n", 
s32Rë
);

1444  
s32Rë
;

1447 
s32Rë
 = 
HI_MPI_VENC_SèπRecvPic
(
VícChn
);

1448 i‡(
HI_SUCCESS
 !
s32Rë
)

1450 
¥ötf
("HI_MPI_VENC_SèπRecvPi¯îr‹, s32Rë: 0x%x.\n", 
s32Rë
);

1451  
s32Rë
;

1454 
¥ötf
("Venc chn create ok,ánd startÑeceiveÖicture!\n");

1456  
HI_SUCCESS
;

1459 
HI_S32
 
SAMPLE_RGN_St›Víc
(
VENC_CHN
 
VícChn
)

1461 
HI_S32
 
s32Rë
;

1463 
s32Rë
 = 
HI_MPI_VENC_St›RecvPic
(
VícChn
);

1464 i‡(
HI_SUCCESS
 !
s32Rë
)

1466 
¥ötf
("HI_MPI_VENC_St›RecvPi¯îr‹, s32Rë: 0x%x.\n", 
s32Rë
);

1467  
s32Rë
;

1470 
s32Rë
 = 
HI_MPI_VENC_De°royChn
(
VícChn
);

1471 i‡(
HI_SUCCESS
 !
s32Rë
)

1473 
¥ötf
("HI_MPI_VENC_De°royCh¿îr‹, s32Rë: 0x%x.\n", 
s32Rë
);

1474  
s32Rë
;

1477 
¥ötf
("Venc chn stopÑeceiveÖictureánd destroy ok!\n");

1479  
HI_SUCCESS
;

1486 * 
SAMPLE_RGN_VpssCovîDy«micDi•œy
(* 
p
)

1488 
HI_S32
 
s32Rë
;

1489 
HI_U32
 
u32RgnNum
;

1490 
RGN_HANDLE
 
H™dÀ
;

1491 
RGN_HANDLE
 
°¨tH™dÀ
;

1492 
MPP_CHN_S
 
°Chn
;

1493 
RGN_CHN_ATTR_S
 
°ChnAâr
;

1494 
RGN_ATTR_INFO_S
* 
p°RgnAârInfo
 = 
NULL
;

1496 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

1497 
°Chn
.
s32DevId
 = 0;

1498 
°Chn
.
s32ChnId
 = 0;

1500 
p°RgnAârInfo
 = (
RGN_ATTR_INFO_S
*)
p
;

1501 
°¨tH™dÀ
 = 
p°RgnAârInfo
->
H™dÀ
;

1502 
u32RgnNum
 = 
p°RgnAârInfo
->u32RgnNum;

1504 i‡(
u32RgnNum
 > 
COVER_MAX_NUM_VPSS
)

1506 
¥ötf
("covîÇum(%dËi†biggîÅh™ COVER_MAX_NUM_VPSS(%d)..\n", 
u32RgnNum
, 
COVER_MAX_NUM_VPSS
);

1507  
NULL
;

1510 
HI_FALSE
 =
bExô
)

1512 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1514 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1515 
°ChnAâr
.
íTy≥
 = 
COVER_RGN
;

1516 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
íCovîTy≥
 = 
AREA_RECT
;

1517 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32X
 = 32 * (
H™dÀ
 - 
°¨tH™dÀ
);

1518 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32Y
 = 32 * (
H™dÀ
 - 
°¨tH™dÀ
);

1519 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Height
 = 64;

1520 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Width
 = 64;

1521 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x0000ffff;

1522 i‡(
H™dÀ
 % 2)

1524 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00ff0000;

1526 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1528 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1529 i‡(
HI_SUCCESS
 !
s32Rë
)

1531 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1534 
¶ìp
(3);

1536 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1538 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32X
 = 32 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1539 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32Y
 = 32;

1540 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Height
 = 64;

1541 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Width
 = 64;

1542 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x0000ffff;

1543 i‡(
H™dÀ
 % 2)

1545 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00ff0000;

1547 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1549 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1550 i‡(
HI_SUCCESS
 !
s32Rë
)

1552 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1555 
¶ìp
(3);

1557 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1559 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32X
 = 60 * (
H™dÀ
 - 
°¨tH™dÀ
);

1560 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32Y
 = 60 * (
H™dÀ
 - 
°¨tH™dÀ
);

1561 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Height
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1562 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Width
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1563 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x000000ff;

1564 i‡(1 =
H™dÀ
)

1566 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x0000ff00;

1568 i‡(2 =
H™dÀ
)

1570 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00ff0000;

1572 i‡(3 =
H™dÀ
)

1574 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00808000;

1576 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1578 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1579 i‡(
HI_SUCCESS
 !
s32Rë
)

1581 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1584 
¶ìp
(3);

1586 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1588 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32X
 = 60 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1589 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
s32Y
 = 60;

1590 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Height
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1591 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
°Re˘
.
u32Width
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1592 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x000000ff;

1593 i‡(1 =
H™dÀ
)

1595 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x0000ff00;

1597 i‡(2 =
H™dÀ
)

1599 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00ff0000;

1601 i‡(3 =
H™dÀ
)

1603 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Cﬁ‹
 = 0x00800080;

1605 
°ChnAâr
.
unChnAâr
.
°CovîChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1607 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1608 i‡(
HI_SUCCESS
 !
s32Rë
)

1610 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1614 
¶ìp
(2);

1617  (
HI_VOID
*)
HI_SUCCESS
;

1623 * 
SAMPLE_RGN_VpssCovîExDy«micDi•œy
(* 
p
)

1625 
HI_S32
 
s32Rë
;

1626 
HI_U32
 
u32RgnNum
;

1627 
RGN_HANDLE
 
H™dÀ
;

1628 
RGN_HANDLE
 
°¨tH™dÀ
;

1629 
MPP_CHN_S
 
°Chn
;

1630 
RGN_CHN_ATTR_S
 
°ChnAâr
;

1631 
RGN_ATTR_INFO_S
* 
p°RgnAârInfo
 = 
NULL
;

1633 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

1634 
°Chn
.
s32DevId
 = 0;

1635 
°Chn
.
s32ChnId
 = 
VPSS_CHN1
;

1637 
p°RgnAârInfo
 = (
RGN_ATTR_INFO_S
*)
p
;

1638 
°¨tH™dÀ
 = 
p°RgnAârInfo
->
H™dÀ
;

1639 
u32RgnNum
 = 
p°RgnAârInfo
->u32RgnNum;

1641 i‡(
u32RgnNum
 > 
COVEREX_MAX_NUM_VPSS
)

1643 
¥ötf
("covîexÇum(%dËi†biggîÅh™ COVEREX_MAX_NUM_VPSS(%d)..\n", 
u32RgnNum
, 
COVEREX_MAX_NUM_VPSS
);

1644  
NULL
;

1647 
HI_FALSE
 =
bExô
)

1649 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1651 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1652 
°ChnAâr
.
íTy≥
 = 
COVEREX_RGN
;

1653 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
íCovîTy≥
 = 
AREA_RECT
;

1654 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32X
 = 32 * (
H™dÀ
 - 
°¨tH™dÀ
);

1655 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32Y
 = 32 * (
H™dÀ
 - 
°¨tH™dÀ
);

1656 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Height
 = 64;

1657 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Width
 = 64;

1658 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0000ffff;

1659 i‡(
H™dÀ
 % 2)

1661 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x00ff0000;

1663 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1665 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1666 i‡(
HI_SUCCESS
 !
s32Rë
)

1668 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1671 
¶ìp
(3);

1673 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1675 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32X
 = 32 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1676 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32Y
 = 32;

1677 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Height
 = 64;

1678 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Width
 = 64;

1679 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0000ffff;

1680 i‡(
H™dÀ
 % 2)

1682 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x00ff8000;

1684 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1686 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1687 i‡(
HI_SUCCESS
 !
s32Rë
)

1689 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1692 
¶ìp
(3);

1694 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1696 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32X
 = 60 * (
H™dÀ
 - 
°¨tH™dÀ
);

1697 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32Y
 = 60 * (
H™dÀ
 - 
°¨tH™dÀ
);

1698 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Height
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1699 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Width
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1700 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x000000ff;

1701 i‡(1 =
H™dÀ
)

1703 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0000ff00;

1705 i‡(2 =
H™dÀ
)

1707 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x00ff0000;

1709 i‡(3 =
H™dÀ
)

1711 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0080800;

1713 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1715 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1716 i‡(
HI_SUCCESS
 !
s32Rë
)

1718 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1721 
¶ìp
(3);

1723 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1725 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32X
 = 60 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1726 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
s32Y
 = 60;

1727 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Height
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1728 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
°Re˘
.
u32Width
 = 64 * ((
H™dÀ
 - 
°¨tH™dÀ
) + 1);

1729 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x000000ff;

1730 i‡(1 =
H™dÀ
)

1732 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0000ff00;

1734 i‡(2 =
H™dÀ
)

1736 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x00ff0000;

1738 i‡(3 =
H™dÀ
)

1740 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Cﬁ‹
 = 0x0080800;

1742 
°ChnAâr
.
unChnAâr
.
°CovîExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1744 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1745 i‡(
HI_SUCCESS
 !
s32Rë
)

1747 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1751 
¶ìp
(2);

1754  (
HI_VOID
*)
HI_SUCCESS
;

1761 * 
SAMPLE_RGN_VpssOSdDy«micDi•œy
(* 
p
)

1763 
HI_S32
 
s32Rë
;

1764 
HI_U32
 
u32RgnNum
;

1765 
RGN_HANDLE
 
H™dÀ
;

1766 
RGN_HANDLE
 
°¨tH™dÀ
;

1767 
MPP_CHN_S
 
°Chn
;

1768 
RGN_CHN_ATTR_S
 
°ChnAâr
;

1769 
RGN_ATTR_INFO_S
* 
p°RgnAârInfo
 = 
NULL
;

1771 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

1772 
°Chn
.
s32DevId
 = 0;

1773 
°Chn
.
s32ChnId
 = 
VPSS_CHN2
;

1775 
p°RgnAârInfo
 = (
RGN_ATTR_INFO_S
*)
p
;

1776 
°¨tH™dÀ
 = 
p°RgnAârInfo
->
H™dÀ
;

1777 
u32RgnNum
 = 
p°RgnAârInfo
->u32RgnNum;

1779 i‡(
u32RgnNum
 > 
OVERLAYEX_MAX_NUM_VPSS
)

1781 
¥ötf
("covîÇum(%dËi†biggîÅh™ OVERLAY_MAX_NUM_VPSS(%d)..\n", 
u32RgnNum
, 
OVERLAY_MAX_NUM_VPSS
);

1782  
NULL
;

1785 
HI_FALSE
 =
bExô
)

1787 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1789 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1790 
°ChnAâr
.
íTy≥
 = 
OVERLAYEX_RGN
;

1791 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 80 * (
H™dÀ
 - 
°¨tH™dÀ
);

1792 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 80 * (
H™dÀ
 - 
°¨tH™dÀ
);

1793 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32BgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1794 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32FgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1795 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1797 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1798 i‡(
HI_SUCCESS
 !
s32Rë
)

1800 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1803 
¶ìp
(3);

1805 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1807 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1808 
°ChnAâr
.
íTy≥
 = 
OVERLAYEX_RGN
;

1809 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 50 * (
H™dÀ
 - 
°¨tH™dÀ
);

1810 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 50 * (
H™dÀ
 - 
°¨tH™dÀ
);

1811 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32BgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1812 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32FgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1813 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1815 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1816 i‡(
HI_SUCCESS
 !
s32Rë
)

1818 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1821 
¶ìp
(3);

1823 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1825 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1826 
°ChnAâr
.
íTy≥
 = 
OVERLAYEX_RGN
;

1827 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 60 * (
H™dÀ
 - 
°¨tH™dÀ
);

1828 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 60 * (
H™dÀ
 - 
°¨tH™dÀ
);

1829 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32BgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1830 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32FgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1831 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1833 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1834 i‡(
HI_SUCCESS
 !
s32Rë
)

1836 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1839 
¶ìp
(3);

1841 
H™dÀ
 = 
°¨tH™dÀ
; H™dÀ < (°¨tH™dÀ + 
u32RgnNum
); Handle++)

1843 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1844 
°ChnAâr
.
íTy≥
 = 
OVERLAYEX_RGN
;

1845 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
 = 100 * (
H™dÀ
 - 
°¨tH™dÀ
);

1846 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
 = 100 * (
H™dÀ
 - 
°¨tH™dÀ
);

1847 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32BgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1848 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32FgAÕha
 = 30 * (
OVERLAYEX_MAX_NUM_VPSS
 - (
H™dÀ
 - 
°¨tH™dÀ
));

1849 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
u32Layî
 = 
H™dÀ
 - 
°¨tH™dÀ
;

1851 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1852 i‡(
HI_SUCCESS
 !
s32Rë
)

1854 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1858 
¶ìp
(2);

1861  (
HI_VOID
*)
HI_SUCCESS
;

1868 * 
SAMPLE_RGN_VícOSdDy«micDi•œy
(* 
p
)

1870 
HI_S32
 
s32Rë
;

1871 
RGN_HANDLE
 
H™dÀ
;

1872 
MPP_CHN_S
 
°Chn
;

1873 
RGN_CHN_ATTR_S
 
°ChnAâr
;

1875 
°Chn
.
íModId
 = 
HI_ID_VENC
;

1876 
°Chn
.
s32DevId
 = 0;

1877 
°Chn
.
s32ChnId
 = 0;

1880 
HI_FALSE
 =
bExô
)

1883 
H™dÀ
 = 0; Handle < 4; Handle++)

1885 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1886 
°ChnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

1887 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 80 * 
H™dÀ
;

1888 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 80 * 
H™dÀ
;

1889 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32BgAÕha
 = 16 * (8 - 
H™dÀ
);

1890 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32FgAÕha
 = 16 * (8 - 
H™dÀ
);

1891 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32Layî
 = 
H™dÀ
;

1893 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
bAbsQp
 = 
HI_FALSE
;

1894 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
s32Qp
 = 0;

1896 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Height
 = 16 * (
H™dÀ
 % 2 + 1);

1897 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Width
 = 16 * (
H™dÀ
 % 2 + 1);

1898 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
u32LumThªsh
 = 128;

1899 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
íChgMod
 = 
LESSTHAN_LUM_THRESH
;

1900 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
bInvCﬁEn
 = 
HI_FALSE
;

1902 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1903 i‡(
HI_SUCCESS
 !
s32Rë
)

1905 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1908 
¶ìp
(3);

1910 
H™dÀ
 = 0; Handle < 4; Handle++)

1912 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1913 
°ChnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

1914 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 8 * 
H™dÀ
;

1915 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 8 * 
H™dÀ
;

1916 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32BgAÕha
 = 16 * (8 - 
H™dÀ
);

1917 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32FgAÕha
 = 16 * (8 - 
H™dÀ
);

1918 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32Layî
 = 
H™dÀ
;

1920 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
bAbsQp
 = 
HI_FALSE
;

1921 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
s32Qp
 = 0;

1923 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Height
 = 16 * (
H™dÀ
 % 2 + 1);

1924 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Width
 = 16 * (
H™dÀ
 % 2 + 1);

1925 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
u32LumThªsh
 = 128;

1926 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
íChgMod
 = 
LESSTHAN_LUM_THRESH
;

1927 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
bInvCﬁEn
 = 
HI_FALSE
;

1929 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1930 i‡(
HI_SUCCESS
 !
s32Rë
)

1932 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1935 
¶ìp
(3);

1937 
H™dÀ
 = 0; Handle < 4; Handle++)

1939 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1940 
°ChnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

1941 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 8 * 
H™dÀ
;

1942 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 8 * 
H™dÀ
;

1943 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32BgAÕha
 = 16 * (8 - 
H™dÀ
);

1944 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32FgAÕha
 = 16 * (8 - 
H™dÀ
);

1945 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32Layî
 = 
H™dÀ
;

1947 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
bAbsQp
 = 
HI_FALSE
;

1948 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
s32Qp
 = 0;

1950 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Height
 = 16 * (
H™dÀ
 % 2 + 1);

1951 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Width
 = 16 * (
H™dÀ
 % 2 + 1);

1952 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
u32LumThªsh
 = 128;

1953 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
íChgMod
 = 
LESSTHAN_LUM_THRESH
;

1954 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
bInvCﬁEn
 = 
HI_FALSE
;

1956 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1957 i‡(
HI_SUCCESS
 !
s32Rë
)

1959 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1962 
¶ìp
(3);

1964 
H™dÀ
 = 0; Handle < 4; Handle++)

1966 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

1967 
°ChnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

1968 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 8 * 
H™dÀ
;

1969 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 8 * 
H™dÀ
;

1970 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32BgAÕha
 = 16 * (8 - 
H™dÀ
);

1971 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32FgAÕha
 = 16 * (8 - 
H™dÀ
);

1972 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32Layî
 = 
H™dÀ
;

1974 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
bAbsQp
 = 
HI_FALSE
;

1975 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
s32Qp
 = 0;

1977 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Height
 = 16 * (
H™dÀ
 % 2 + 1);

1978 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
°InvCﬁAªa
.
u32Width
 = 16 * (
H™dÀ
 % 2 + 1);

1979 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
u32LumThªsh
 = 128;

1980 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
íChgMod
 = 
LESSTHAN_LUM_THRESH
;

1981 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
bInvCﬁEn
 = 
HI_FALSE
;

1983 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

1984 i‡(
HI_SUCCESS
 !
s32Rë
)

1986 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

1990 
¶ìp
(2);

1993  (
HI_VOID
*)
HI_SUCCESS
;

1997 
HI_VOID
 
SAMPLE_RGN_WrôeSåómToFûe
–
FILE
* 
Â
, 
VENC_PACK_S
* 
p°NÆu
 )

1999 
HI_U8
* 
p
;

2000 
HI_U32
 
u32Lí
;

2002 
p
 = (
HI_U8
*Ë
p°NÆu
->
pu8Addr
 +Ö°NÆu->
u32Off£t
;

2004 
u32Lí
 = 
p°NÆu
->u32Lí -Ö°NÆu->
u32Off£t
;

2006 
fwrôe
(
p
, 
u32Lí
, (
HI_U8
), 
Â
);

2008 
fÊush
(
Â
);

2012 
HI_S32
 
SAMPLE_RGN_Cª©eRegi⁄
(
RGN_SIZE_S
 
°Rgnsize
)

2014 
RGN_CHN_ATTR_S
 
°ChnAâr
;

2015 
RGN_ATTR_S
 
°RgnAâr
;

2016 
HI_U32
 
i
, 
j
;

2017 
HI_S32
 
s32Rë
;

2018 
MPP_CHN_S
 
°Chn
;

2020 
i
 = 0; i < 
°Rgnsize
.
u32RgnNum
; i++)

2023 
°RgnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

2025 
°RgnAâr
.
unAâr
.
°Ovîœy
.
íPixñFmt
 = 
PIXEL_FORMAT_RGB_1555
;

2026 i‡(
bSh≠e1
)

2028 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 720;

2029 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 96;

2031 i‡(
bSh≠e2
)

2033 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 96;

2034 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 576;

2036 i‡(
bAªa
)

2038 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 
°Rgnsize
.
°SIZE
.u32Width;

2039 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 
°Rgnsize
.
°SIZE
.u32Height;

2043 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Width
 = 96;

2044 
°RgnAâr
.
unAâr
.
°Ovîœy
.
°Size
.
u32Height
 = 96;

2046 
°RgnAâr
.
unAâr
.
°Ovîœy
.
u32BgCﬁ‹
 = 0xf¯+ (0xf‡* 
i
);

2048 
s32Rë
 = 
HI_MPI_RGN_Cª©e
(
i
, &
°RgnAâr
);

2049 i‡(
HI_SUCCESS
 !
s32Rë
)

2051 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2054 
j
 = 0; j < 
MAX_VENC_WORK_CHN_NUM
; j++)

2056 
°Chn
.
íModId
 = 
HI_ID_VENC
;

2057 
°Chn
.
s32DevId
 = 
j
;

2058 
°Chn
.
s32ChnId
 = 0;

2060 
°ChnAâr
.
bShow
 = 
HI_TRUE
;

2061 
°ChnAâr
.
íTy≥
 = 
OVERLAY_RGN
;

2062 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 96 * (
i
 + 1);

2063 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 24 * (
j
 + 1);

2064 i‡(
bAªa
)

2066 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 0;

2067 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 0;

2069 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32BgAÕha
 = 128;

2070 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32FgAÕha
 = 128;

2071 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
u32Layî
 = 
i
;

2073 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
bAbsQp
 = 
HI_FALSE
;

2074 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°QpInfo
.
s32Qp
 = 0;

2076 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°InvîtCﬁ‹
.
bInvCﬁEn
 = 
HI_FALSE
;

2078 
s32Rë
 = 
HI_MPI_RGN_AâachToChn
(
i
, &
°Chn
, &
°ChnAâr
);

2079 i‡(
HI_SUCCESS
 !
s32Rë
)

2081 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2086  
HI_SUCCESS
;

2090 
HI_S32
 
SAMPLE_RGN_De°royRegi⁄
(
RGN_HANDLE
 
H™dÀ
, 
HI_U32
 
u32Num
)

2092 
HI_S32
 
i
;

2093 
HI_S32
 
s32Rë
;

2095 
i
 = 
H™dÀ
; i < (H™dÀ + 
u32Num
); i++)

2097 
s32Rë
 = 
HI_MPI_RGN_De°roy
(
i
);

2098 i‡(
HI_SUCCESS
 !
s32Rë
)

2100 
¥ötf
("HI_MPI_RGN_De°roy faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2101  
s32Rë
;

2105  
HI_SUCCESS
;

2111 
HI_S32
 
SAMPLE_RGN_GëSåóm
–HI_S32 
chnId
, 
FILE
* 
pfSåóm
 , 
HI_BOOL
 
bByFøme
)

2113 
VENC_STREAM_S
 
°Såóm
;

2114 
HI_U32
 
u32C¡
;

2115 
HI_S32
 
s32Rë
;

2116 
VENC_CHN_STAT_S
 
°ChnSèt
;

2117 
VENC_PACK_S
* 
p°Pack
;

2119 
mem£t
(&
°ChnSèt
, 0, (
VENC_CHN_STAT_S
));

2120 
s32Rë
 = 
HI_MPI_VENC_Quîy
(
chnId
, &
°ChnSèt
);

2121 i‡(
HI_SUCCESS
 !
s32Rë
)

2123 
¥ötf
("HI_MPI_VENC_Quîy faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2124  
s32Rë
;

2127 i‡(0 =
°ChnSèt
.
u32CurPacks
)

2129  
HI_FAILURE
;

2133 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*Ë
mÆloc
–(VENC_PACK_SË* 
°ChnSèt
.
u32CurPacks
);

2134 
°Såóm
.
u32PackCou¡
 = 
°ChnSèt
.
u32CurPacks
;

2136 #i‚de‡
HI_IO_NOBLOCK


2137 
	#HI_IO_NOBLOCK
 1

	)

2141 
s32Rë
 = 
HI_MPI_VENC_GëSåóm
(
chnId
, &
°Såóm
, 0);

2142 i‡(
HI_SUCCESS
 !
s32Rë
)

2144 
¥ötf
("Quîy ok buàgë faûÑë:0x%x\n", 
s32Rë
);

2145 
exô
(-1);

2146 
__FAIL__
;

2149 
p°Pack
 = 
°Såóm
.pstPack;

2151 
u32C¡
 = 0; u32C¡ < 
°ChnSèt
.
u32CurPacks
; u32Cnt++)

2153 i‡–
HI_SUCCESS
 =
s32Rë
 )

2155 i‡(
NULL
 !
pfSåóm
)

2157 
SAMPLE_RGN_WrôeSåómToFûe
(
pfSåóm
, 
p°Pack
);

2164 
p°Pack
++;

2168 i‡(
HI_SUCCESS
 =
s32Rë
)

2170 
HI_MPI_VENC_Rñó£Såóm
(
chnId
, &
°Såóm
);

2171 
HI_ASSERT
–
HI_SUCCESS
 =
s32Rë
 );

2174 i‡(
NULL
 !
°Såóm
.
p°Pack
)

2176 
‰ì
(
°Såóm
.
p°Pack
);

2179  
HI_SUCCESS
;

2181 
__FAIL__
:

2182 i‡(
NULL
 !
°Såóm
.
p°Pack
)

2184 
‰ì
(
°Såóm
.
p°Pack
);

2186  
HI_FAILURE
;

2191 
HI_VOID
* 
SAMPLE_RGN_VícGëSåóm
(* 
pD©a
)

2194 
HI_S32
 
s32ªt
;

2195 
VENC_CHN_STAT_S
 
°ChnSèt
;

2196 
VENC_PTHREAD_INFO_S
* 
p°VícThªad
;

2197 
FILE
* 
∑°ªam
;

2198 
HI_S32
 
i
 = 0;

2199 
HI_S32
 
s32Rë
 = 
HI_FAILURE
;

2200 
HI_S32
 
s32˙t
 = 0;

2201 
RGN_HANDLE
 
H™dÀ
;

2202 
MPP_CHN_S
 
°Chn
;

2203 
RGN_CHN_ATTR_S
 
°ChnAâr
;

2204 
RGN_SIZE_S
 
°Rgnsize
;

2205 
HI_U32
 
s32Tmp
 = 0;

2206 
BITMAP_S
 
°Bôm≠
;

2207 
acmd
[128];

2210 
HI_ASSERT
(
HI_NULL
 !
pD©a
);

2212 
p°VícThªad
 = (
VENC_PTHREAD_INFO_S
*)
pD©a
;

2213 
¢¥ötf
(
acmd
, 128, "[[ -êj≥g%d ]] || mkdú j≥g%d", 
p°VícThªad
->
VeChnId
,ÖstVencThread->VeChnId);

2214 
sy°em
(
acmd
);

2216 
HI_FALSE
 =
bExô
 || 
i
 < 
p°VícThªad
->
s32FrmC¡
)

2219 
H™dÀ
 = 0;

2221 
s32ªt
 = 
HI_MPI_VENC_Quîy
–
p°VícThªad
->
VeChnId
, &
°ChnSèt
 );

2222 i‡(
HI_SUCCESS
 !
s32ªt
)

2226 i‡(
°ChnSèt
.
u32CurPacks
 > 0 || stChnSèt.
u32Le·SåómByãs
 > 0)

2228 i‡(
bTøvñ
)

2230 
pfûíame
[
FILE_NAME_LEN
];

2231 
¢¥ötf
(
pfûíame
, 
FILE_NAME_LEN
, "./j≥g%d/°ªam_fff_009_%d.j≥g", 
p°VícThªad
->
VeChnId
, 
i
);

2232 
∑°ªam
 = 
f›í
–
pfûíame
, "wb" );

2233 
HI_ASSERT
–
NULL
 !
∑°ªam
);

2237 
H™dÀ
 = 0;

2239 
°Chn
.
íModId
 = 
HI_ID_VENC
;

2240 
°Chn
.
s32DevId
 = 
p°VícThªad
->
VeChnId
;

2241 
°Chn
.
s32ChnId
 = 0;

2243 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2244 i‡(
HI_SUCCESS
 !
s32Rë
)

2246 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2249 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 36 * (
s32˙t
 % 19);

2250 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 32 * (
s32˙t
 / 19);

2252 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2253 i‡(
HI_SUCCESS
 !
s32Rë
)

2255 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2258 
u¶ìp
(500);

2260 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2261 i‡(
HI_SUCCESS
 !
s32Rë
)

2263 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2266 i‡(++
s32˙t
 > (19 * 16) - 1)

2268 
s32˙t
 = 0;

2270 
¥ötf
("s32˙à%d\n", 
s32˙t
);

2273 
SAMPLE_RGN_GëSåóm
(
p°VícThªad
->
VeChnId
, 
∑°ªam
, 
HI_TRUE
);

2275 
i
++;

2277 
f˛o£
(
∑°ªam
);

2278 
¥ötf
("ò%d\n", 
i
);

2281 i‡(
bSh≠e1
)

2283 
pfûíame
[
FILE_NAME_LEN
];

2284 
s32Tmp
 = 12;

2285 i‡(
p°VícThªad
->
VeChnId
 > 0)

2286 { 
s32Tmp
 = 14; }

2287 
¢¥ötf
(
pfûíame
, 
FILE_NAME_LEN
, "./j≥g%d/°ªam_fff_0%d_%d.j≥g", 
p°VícThªad
->
VeChnId
, 
s32Tmp
, 
i
);

2288 
∑°ªam
 = 
f›í
–
pfûíame
, "wb" );

2289 
HI_ASSERT
–
NULL
 !
∑°ªam
);

2292 
H™dÀ
 = 0;

2294 
°Chn
.
íModId
 = 
HI_ID_VENC
;

2295 
°Chn
.
s32DevId
 = 
p°VícThªad
->
VeChnId
;

2296 
°Chn
.
s32ChnId
 = 0;

2298 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2299 i‡(
HI_SUCCESS
 !
s32Rë
)

2301 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2304 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 0;

2305 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 32 * 
s32˙t
;

2307 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2308 i‡(
HI_SUCCESS
 !
s32Rë
)

2310 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2313 
¶ìp
(1);

2315 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2316 i‡(
HI_SUCCESS
 !
s32Rë
)

2318 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2321 i‡(++
s32˙t
 > 25)

2323 
s32˙t
 = 0;

2325 
¥ötf
("s32˙à%d\n", 
s32˙t
);

2328 
SAMPLE_RGN_GëSåóm
(
p°VícThªad
->
VeChnId
, 
∑°ªam
, 
HI_TRUE
);

2329 
i
++;

2331 
f˛o£
(
∑°ªam
);

2332 
¥ötf
("ò%d\n", 
i
);

2334 i‡(
bSh≠e2
)

2336 
pfûíame
[
FILE_NAME_LEN
];

2337 
s32Tmp
 = 13;

2338 i‡(
p°VícThªad
->
VeChnId
 > 0)

2339 { 
s32Tmp
 = 15; }

2340 
¢¥ötf
(
pfûíame
, 
FILE_NAME_LEN
, "./j≥g%d/°ªam_fff_0%d_%d.j≥g", 
p°VícThªad
->
VeChnId
, 
s32Tmp
, 
i
);

2341 
∑°ªam
 = 
f›í
–
pfûíame
, "wb" );

2342 
HI_ASSERT
–
NULL
 !
∑°ªam
);

2346 
H™dÀ
 = 0;

2348 
°Chn
.
íModId
 = 
HI_ID_VENC
;

2349 
°Chn
.
s32DevId
 = 
p°VícThªad
->
VeChnId
;

2350 
°Chn
.
s32ChnId
 = 0;

2352 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2353 i‡(
HI_SUCCESS
 !
s32Rë
)

2355 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2358 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
 = 32 * 
s32˙t
;

2359 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
 = 0;

2361 
s32Rë
 = 
HI_MPI_RGN_SëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2362 i‡(
HI_SUCCESS
 !
s32Rë
)

2364 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2367 
¶ìp
(1);

2369 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

2370 i‡(
HI_SUCCESS
 !
s32Rë
)

2372 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2375 i‡(++
s32˙t
 > 25)

2377 
s32˙t
 = 0;

2379 
¥ötf
("s32˙à%d\n", 
s32˙t
);

2382 
SAMPLE_RGN_GëSåóm
(
p°VícThªad
->
VeChnId
, 
∑°ªam
, 
HI_TRUE
);

2383 
i
++;

2385 
f˛o£
(
∑°ªam
);

2386 
¥ötf
("ò%d\n", 
i
);

2388 i‡(
bAªa
)

2390 
pfûíame
[
FILE_NAME_LEN
];

2391 
s32Tmp
 = 16;

2392 i‡(
p°VícThªad
->
VeChnId
 > 0)

2393 { 
s32Tmp
 = 17; }

2394 
¢¥ötf
(
pfûíame
, 
FILE_NAME_LEN
, "./j≥g%d/°ªam_fff_0%d_%d.j≥g", 
p°VícThªad
->
VeChnId
, 
s32Tmp
, 
i
);

2395 
∑°ªam
 = 
f›í
–
pfûíame
, "wb" );

2396 
HI_ASSERT
–
NULL
 !
∑°ªam
);

2398 
±hªad_muãx_lock
(&
Rgnmuãx_Tmp
);

2400 
°Rgnsize
.
u32RgnNum
 = 1;

2401 
SAMPLE_RGN_De°royRegi⁄
(
H™dÀ
, 
°Rgnsize
.
u32RgnNum
);

2402 
°Rgnsize
.
°SIZE
.
u32Height
 = 36 * (
s32˙t
 + 1);

2403 
°Rgnsize
.
°SIZE
.
u32Width
 = 36 * (
s32˙t
 + 1);

2404 
SAMPLE_RGN_Cª©eRegi⁄
(
°Rgnsize
);

2407 
H™dÀ
 = 0;

2409 
SAMPLE_RGN_LﬂdBmp
("mm.bmp", &
°Bôm≠
, 
HI_FALSE
, 0);

2411 
s32Rë
 = 
HI_MPI_RGN_SëBôM≠
(
H™dÀ
, &
°Bôm≠
);

2412 i‡(
HI_SUCCESS
 !
s32Rë
)

2414 
SAMPLE_RGN_NOT_PASS
(
s32Rë
);

2417 
‰ì
(
°Bôm≠
.
pD©a
);

2419 i‡(++
s32˙t
 > 25)

2421 
s32˙t
 = 0;

2424 
±hªad_muãx_u∆ock
(&
Rgnmuãx_Tmp
);

2426 
¥ötf
("s32˙à%d\n", 
s32˙t
);

2427 
u¶ìp
(50000);

2430 
SAMPLE_RGN_GëSåóm
(
p°VícThªad
->
VeChnId
, 
∑°ªam
, 
HI_TRUE
);

2431 
i
++;

2435 
SAMPLE_RGN_GëSåóm
(
p°VícThªad
->
VeChnId
,Ö°VícThªad->
p°ªam
, 
HI_TRUE
);

2436 
i
++;

2440 
¥ötf
("\nch¿%d föish!\n", 
p°VícThªad
->
VeChnId
);

2442  
HI_NULL
;

2445 
HI_VOID
* 
SAMPLE_RGN_VpssOsdRevî£
(* 
pD©a
)

2447 
HI_S32
 
i
 = 0, 
j
 = 0;

2448 
RGN_HANDLE
 
H™dÀ
;

2449 
TDE2_SURFACE_S
 
°RgnOrignSurÁ˚
 = {0};

2450 
TDE2_SURFACE_S
 
°RgnSurÁ˚
 = {0};

2451 
RGN_CANVAS_INFO_S
 
°C™vasInfo
;

2452 
TDE_HANDLE
 
hTde
;

2453 
TDE2_RECT_S
 
°Re˘
 = {0};

2454 
VPSS_REGION_INFO_S
 
°Revî£RgnInfo
;

2455 
HI_U32
 
au32LumaD©a
[
OSD_REVERSE_RGN_MAXCNT
];

2456 
RECT_S
 
a°OsdRevRe˘
[
OSD_REVERSE_RGN_MAXCNT
];

2457 
RGN_OSD_REVERSE_INFO_S
* 
p°OsdRevî£Info
;

2458 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2459 
HI_U32
* 
pu32VúAddr
 = 
NULL
;

2460 
MPP_CHN_S
 
°MµChn
 = {0};

2461 
RGN_CHN_ATTR_S
 
°OsdChnAâr
 = {0};

2463 
HI_ASSERT
(
NULL
 !
pD©a
);

2464 
p°OsdRevî£Info
 = (
RGN_OSD_REVERSE_INFO_S
*)
pD©a
;

2465 
H™dÀ
 = 
p°OsdRevî£Info
->Handle;

2466 
HI_ASSERT
(
OSD_REVERSE_RGN_MAXCNT
 >
p°OsdRevî£Info
->
°LumaRgnInfo
.
u32Regi⁄Num
);

2468 
§™d
(
time
(
NULL
));

2471 
s32Rë
 = 
HI_MPI_RGN_GëC™vasInfo
(
H™dÀ
, &
°C™vasInfo
);

2472 i‡(
HI_SUCCESS
 !
s32Rë
)

2474 
¥ötf
("HI_MPI_RGN_GëC™vasInfÿÁû! s32Rë: 0x%x.\n", 
s32Rë
);

2475  
NULL
;

2478 
s32Rë
 = 
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
);

2479 i‡(
HI_SUCCESS
 !
s32Rë
)

2481 
¥ötf
("HI_MPI_RGN_Upd©eC™va†Áû! s32Rë: 0x%x.\n", 
s32Rë
);

2482  
NULL
;

2486 
s32Rë
 = 
SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚
(&
°RgnSurÁ˚
, &
°C™vasInfo
);

2487 i‡(
HI_SUCCESS
 !
s32Rë
)

2489 
¥ötf
("Func: %s,Üöe: %d! s32Rë: 0x%x.\n", 
__FUNCTION__
, 
__LINE__
, 
s32Rë
);

2490  
NULL
;

2493 
mem˝y
(&
°RgnOrignSurÁ˚
, &
°RgnSurÁ˚
, (stRgnOrignSurface));

2495 
s32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
°RgnOrignSurÁ˚
.
u32PhyAddr
, (**)(&
pu32VúAddr
),

2496 
NULL
, NULL, 
°RgnSurÁ˚
.
u32Såide
 * stRgnSurÁ˚.
u32Height
);

2497 i‡(
HI_SUCCESS
 !
s32Rë
)

2499 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2500  
NULL
;

2503 
s32Rë
 = 
HI_TDE2_O≥n
();

2504 i‡(
HI_SUCCESS
 !
s32Rë
)

2506 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2507  
NULL
;

2510 
hTde
 = 
HI_TDE2_BegöJob
();

2511 
HI_ASSERT
(
hTde
 >= 0);

2512 
°Re˘
.
u32Width
 = 
°RgnSurÁ˚
.u32Width;

2513 
°Re˘
.
u32Height
 = 
°RgnSurÁ˚
.u32Height;

2514 
s32Rë
 = 
HI_TDE2_QuickC›y
(
hTde
, &
°RgnSurÁ˚
, &
°Re˘
, &
°RgnOrignSurÁ˚
, &stRect);

2515 i‡(
HI_SUCCESS
 !
s32Rë
)

2517 
¥ötf
("[Func]:%†[Löe]:%d [Info]:HI_TDE2_QuickC›y faûed\n", 
__FUNCTION__
, 
__LINE__
);

2518 
HI_TDE2_C™˚lJob
(
hTde
);

2519 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2520  
NULL
;

2523 
s32Rë
 = 
HI_TDE2_EndJob
(
hTde
, 
HI_FALSE
, HI_FALSE, 10);

2524 i‡(
HI_SUCCESS
 !
s32Rë
)

2526 
HI_TDE2_C™˚lJob
(
hTde
);

2527 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2528  
NULL
;

2530 
s32Rë
 = 
HI_TDE2_WaôF‹D⁄e
(
hTde
);

2531 i‡(
HI_SUCCESS
 !
s32Rë
)

2533 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2534  
NULL
;

2538 
°MµChn
.
íModId
 = 
HI_ID_VPSS
;

2539 
°MµChn
.
s32DevId
 = 
p°OsdRevî£Info
->
VpssGΩ
;

2540 
°MµChn
.
s32ChnId
 = 
p°OsdRevî£Info
->
VpssChn
;

2541 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°MµChn
, &
°OsdChnAâr
);

2542 i‡(
HI_SUCCESS
 !
s32Rë
)

2544 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2545  
NULL
;

2548 
°Revî£RgnInfo
.
p°Regi⁄
 = (
RECT_S
*)
a°OsdRevRe˘
;

2549 
HI_FALSE
 =
bExô
)

2552 
s32Rë
 = 
HI_MPI_VPSS_GëRegi⁄Luma
(
p°OsdRevî£Info
->
VpssGΩ
,Ö°OsdRevî£Info->
VpssChn
, &’°OsdRevî£Info->
°LumaRgnInfo
), 
au32LumaD©a
, -1);

2553 i‡(
HI_SUCCESS
 !
s32Rë
)

2555 
¥ötf
("[Func]:%s [Line]:%d [Info]:HI_MPI_VPSS_GetRegionLuma VpssGrp=%d failed, s32Ret: 0x%x.\n",

2556 
__FUNCTION__
, 
__LINE__
, 
p°OsdRevî£Info
->
VpssGΩ
, 
s32Rë
);

2561 
i
 = 0, 
j
 = 0; i < 
p°OsdRevî£Info
->
°LumaRgnInfo
.
u32Regi⁄Num
; ++i)

2563 
p°OsdRevî£Info
->
u8PîPixñLumaThrd
 = 
ønd
() % 256;

2565 i‡(
au32LumaD©a
[
i
] > (
p°OsdRevî£Info
->
u8PîPixñLumaThrd
 *

2566 
p°OsdRevî£Info
->
°LumaRgnInfo
.
p°Regi⁄
[
i
].
u32Width
 *

2567 
p°OsdRevî£Info
->
°LumaRgnInfo
.
p°Regi⁄
[
i
].
u32Height
))

2570 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
s32X
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].s32X

2571 - 
°OsdChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32X
;

2572 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
s32Y
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].s32Y

2573 - 
°OsdChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.
s32Y
;

2574 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
u32Width
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].u32Width;

2575 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
u32Height
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].u32Height;

2576 ++
j
;

2580 
°Revî£RgnInfo
.
u32Regi⁄Num
 = 
j
;

2583 i‡(
HI_SUCCESS
 !
HI_MPI_RGN_GëC™vasInfo
(
H™dÀ
, &
°C™vasInfo
))

2585 
¥ötf
("[Func]:%†[Löe]:%d [Info]:HI_MPI_RGN_GëC™vasInfÿÁûed\n", 
__FUNCTION__
, 
__LINE__
);

2586 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2587  
NULL
;

2589 i‡(
HI_SUCCESS
 !
SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚
(&
°RgnSurÁ˚
, &
°C™vasInfo
))

2591 
¥ötf
("[Func]:%†[Löe]:%d [Info]:SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚ faûed\n", 
__FUNCTION__
, 
__LINE__
);

2592 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2593  
NULL
;

2596 i‡(
HI_SUCCESS
 !
SAMPLE_RGN_Revî£OsdCﬁ‹
(&
°RgnOrignSurÁ˚
, &
°RgnSurÁ˚
, &
°Revî£RgnInfo
))

2598 
¥ötf
("[Func]:%†[Löe]:%d [Info]:SAMPLE_RGN_Revî£OsdCﬁ‹ faûed\n", 
__FUNCTION__
, 
__LINE__
);

2599 
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
);

2600 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2601  
NULL
;

2605 i‡(
HI_SUCCESS
 !
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
))

2607 
¥ötf
("[Func]:%†[Löe]:%d [Info]:HI_MPI_RGN_Upd©eC™va†Áûed\n", 
__FUNCTION__
, 
__LINE__
);

2608 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2609  
NULL
;

2612 
¶ìp
(2);

2615 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2616  
HI_NULL
;

2620 
HI_VOID
* 
SAMPLE_RGN_VícOsdRevî£
(* 
pD©a
)

2622 
HI_S32
 
i
 = 0, 
j
 = 0;

2623 
RGN_HANDLE
 
H™dÀ
;

2624 
TDE2_SURFACE_S
 
°RgnOrignSurÁ˚
 = {0};

2625 
TDE2_SURFACE_S
 
°RgnSurÁ˚
 = {0};

2626 
RGN_CANVAS_INFO_S
 
°C™vasInfo
;

2627 
TDE_HANDLE
 
hTde
;

2628 
TDE2_RECT_S
 
°Re˘
 = {0};

2629 
VPSS_REGION_INFO_S
 
°Revî£RgnInfo
;

2630 
HI_U32
 
au32LumaD©a
[
OSD_REVERSE_RGN_MAXCNT
];

2631 
RECT_S
 
a°OsdRevRe˘
[
OSD_REVERSE_RGN_MAXCNT
];

2632 
RGN_OSD_REVERSE_INFO_S
* 
p°OsdRevî£Info
;

2633 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2634 
HI_U32
* 
pu32VúAddr
 = 
NULL
;

2635 
MPP_CHN_S
 
°MµChn
 = {0};

2636 
RGN_CHN_ATTR_S
 
°OsdChnAâr
 = {0};

2638 
HI_ASSERT
(
NULL
 !
pD©a
);

2639 
p°OsdRevî£Info
 = (
RGN_OSD_REVERSE_INFO_S
*)
pD©a
;

2640 
H™dÀ
 = 
p°OsdRevî£Info
->Handle;

2641 
HI_ASSERT
(
OSD_REVERSE_RGN_MAXCNT
 >
p°OsdRevî£Info
->
°LumaRgnInfo
.
u32Regi⁄Num
);

2643 
§™d
(
time
(
NULL
));

2646 
s32Rë
 = 
HI_MPI_RGN_GëC™vasInfo
(
H™dÀ
, &
°C™vasInfo
);

2647 i‡(
HI_SUCCESS
 !
s32Rë
)

2649 
¥ötf
("HI_MPI_RGN_GëC™vasInfÿÁû! s32Rë: 0x%x.\n", 
s32Rë
);

2650  
NULL
;

2653 
s32Rë
 = 
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
);

2654 i‡(
HI_SUCCESS
 !
s32Rë
)

2656 
¥ötf
("HI_MPI_RGN_Upd©eC™va†Áû! s32Rë: 0x%x.\n", 
s32Rë
);

2657  
NULL
;

2661 
s32Rë
 = 
SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚
(&
°RgnSurÁ˚
, &
°C™vasInfo
);

2662 i‡(
HI_SUCCESS
 !
s32Rë
)

2664 
¥ötf
("Func: %s,Üöe: %d! s32Rë: 0x%x.\n", 
__FUNCTION__
, 
__LINE__
, 
s32Rë
);

2665  
NULL
;

2668 
mem˝y
(&
°RgnOrignSurÁ˚
, &
°RgnSurÁ˚
, (stRgnOrignSurface));

2670 
s32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
°RgnOrignSurÁ˚
.
u32PhyAddr
, (**)(&
pu32VúAddr
),

2671 
NULL
, NULL, 
°RgnSurÁ˚
.
u32Såide
 * stRgnSurÁ˚.
u32Height
);

2672 i‡(
HI_SUCCESS
 !
s32Rë
)

2674 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2675  
NULL
;

2678 
s32Rë
 = 
HI_TDE2_O≥n
();

2679 i‡(
HI_SUCCESS
 !
s32Rë
)

2681 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2682  
NULL
;

2685 
hTde
 = 
HI_TDE2_BegöJob
();

2686 
HI_ASSERT
(
hTde
 >= 0);

2687 
°Re˘
.
u32Width
 = 
°RgnSurÁ˚
.u32Width;

2688 
°Re˘
.
u32Height
 = 
°RgnSurÁ˚
.u32Height;

2689 
s32Rë
 = 
HI_TDE2_QuickC›y
(
hTde
, &
°RgnSurÁ˚
, &
°Re˘
, &
°RgnOrignSurÁ˚
, &stRect);

2690 i‡(
HI_SUCCESS
 !
s32Rë
)

2692 
¥ötf
("[Func]:%†[Löe]:%d [Info]:HI_TDE2_QuickC›y faûed\n", 
__FUNCTION__
, 
__LINE__
);

2693 
HI_TDE2_C™˚lJob
(
hTde
);

2694 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2695  
NULL
;

2698 
s32Rë
 = 
HI_TDE2_EndJob
(
hTde
, 
HI_FALSE
, HI_FALSE, 10);

2699 i‡(
HI_SUCCESS
 !
s32Rë
)

2701 
HI_TDE2_C™˚lJob
(
hTde
);

2702 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2703  
NULL
;

2705 
s32Rë
 = 
HI_TDE2_WaôF‹D⁄e
(
hTde
);

2706 i‡(
HI_SUCCESS
 !
s32Rë
)

2708 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2709  
NULL
;

2713 
°MµChn
.
íModId
 = 
HI_ID_VENC
;

2714 
°MµChn
.
s32DevId
 = 0;

2715 
°MµChn
.
s32ChnId
 = 0;

2716 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°MµChn
, &
°OsdChnAâr
);

2717 i‡(
HI_SUCCESS
 !
s32Rë
)

2719 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2720  
NULL
;

2723 
°Revî£RgnInfo
.
p°Regi⁄
 = (
RECT_S
*)
a°OsdRevRe˘
;

2724 
HI_FALSE
 =
bExô
)

2727 
s32Rë
 = 
HI_MPI_VPSS_GëRegi⁄Luma
(
p°OsdRevî£Info
->
VpssGΩ
,Ö°OsdRevî£Info->
VpssChn
, &’°OsdRevî£Info->
°LumaRgnInfo
), 
au32LumaD©a
, -1);

2728 i‡(
HI_SUCCESS
 !
s32Rë
)

2730 
¥ötf
("[Func]:%s [Line]:%d [Info]:HI_MPI_VPSS_GetRegionLuma VpssGrp=%d failed, s32Ret: 0x%x.\n",

2731 
__FUNCTION__
, 
__LINE__
, 
p°OsdRevî£Info
->
VpssGΩ
, 
s32Rë
);

2736 
i
 = 0, 
j
 = 0; i < 
p°OsdRevî£Info
->
°LumaRgnInfo
.
u32Regi⁄Num
; ++i)

2738 
p°OsdRevî£Info
->
u8PîPixñLumaThrd
 = 
ønd
() % 256;

2740 i‡(
au32LumaD©a
[
i
] > (
p°OsdRevî£Info
->
u8PîPixñLumaThrd
 *

2741 
p°OsdRevî£Info
->
°LumaRgnInfo
.
p°Regi⁄
[
i
].
u32Width
 *

2742 
p°OsdRevî£Info
->
°LumaRgnInfo
.
p°Regi⁄
[
i
].
u32Height
))

2745 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
s32X
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].s32X

2746 - 
°OsdChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32X
;

2747 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
s32Y
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].s32Y

2748 - 
°OsdChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.
s32Y
;

2749 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
u32Width
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].u32Width;

2750 
°Revî£RgnInfo
.
p°Regi⁄
[
j
].
u32Height
 = 
p°OsdRevî£Info
->
°LumaRgnInfo
.p°Regi⁄[
i
].u32Height;

2751 ++
j
;

2755 
°Revî£RgnInfo
.
u32Regi⁄Num
 = 
j
;

2758 i‡(
HI_SUCCESS
 !
HI_MPI_RGN_GëC™vasInfo
(
H™dÀ
, &
°C™vasInfo
))

2760 
¥ötf
("[Func]:%†[Löe]:%d [Info]:HI_MPI_RGN_GëC™vasInfÿÁûed\n", 
__FUNCTION__
, 
__LINE__
);

2761 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2762  
NULL
;

2764 i‡(
HI_SUCCESS
 !
SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚
(&
°RgnSurÁ˚
, &
°C™vasInfo
))

2766 
¥ötf
("[Func]:%†[Löe]:%d [Info]:SAMPLE_RGN_C⁄vOsdCavasToTdeSurÁ˚ faûed\n", 
__FUNCTION__
, 
__LINE__
);

2767 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2768  
NULL
;

2771 i‡(
HI_SUCCESS
 !
SAMPLE_RGN_Revî£OsdCﬁ‹
(&
°RgnOrignSurÁ˚
, &
°RgnSurÁ˚
, &
°Revî£RgnInfo
))

2773 
¥ötf
("[Func]:%†[Löe]:%d [Info]:SAMPLE_RGN_Revî£OsdCﬁ‹ faûed\n", 
__FUNCTION__
, 
__LINE__
);

2774 
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
);

2775 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2776  
NULL
;

2780 i‡(
HI_SUCCESS
 !
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
))

2782 
¥ötf
("[Func]:%†[Löe]:%d [Info]:HI_MPI_RGN_Upd©eC™va†Áûed\n", 
__FUNCTION__
, 
__LINE__
);

2783 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2784  
NULL
;

2787 
¶ìp
(2);

2790 
HI_MPI_SYS_MmzFªe
(
°RgnOrignSurÁ˚
.
u32PhyAddr
, 
pu32VúAddr
);

2791  
HI_NULL
;

2806 
HI_S32
 
SAMPLE_RGN_AddCovîToVpss
(
HI_VOID
)

2808 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2809 
RGN_HANDLE
 
H™dÀ
;

2810 
HI_U32
 
u32RgnNum
;

2811 
MPP_CHN_S
 
°SrcChn
, 
°DesChn
;

2812 
HI_S32
 
s32VpssGΩNum
;

2813 
HI_U32
 
u32VpssChn
 = 0;

2814 
VO_DEV
 
VoDev
;

2815 
VO_LAYER
 
VoLayî
;

2816 
HI_U32
 
s32VoChnNum
;

2817 
VO_INTF_SYNC_E
 
íI¡fSync
;

2818 
±hªad_t
 
°RgnThªad
;

2819 
RGN_ATTR_INFO_S
 
°RgnAârInfo
;

2821 
s32Rë
 = 
SAMPLE_RGN_SYS_Inô
();

2822 i‡(
HI_SUCCESS
 !
s32Rë
)

2824 
¥ötf
("SAMPLE_RGN_SYS_Inô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2825  
s32Rë
;

2831 
H™dÀ
 = 0;

2832 
u32RgnNum
 = 8;

2833 
s32Rë
 = 
SAMPLE_RGN_Cª©eCovî
(
H™dÀ
, 
u32RgnNum
);

2834 i‡(
HI_SUCCESS
 !
s32Rë
)

2836 
¥ötf
("SAMPLE_RGN_Cª©eCovî faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2837  
s32Rë
;

2843 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
g_°ViChnC⁄fig
);

2844 i‡(
HI_SUCCESS
 !
s32Rë
)

2846 
¥ötf
("SAMPLE_COMM_VI_SèπVòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

2847  
s32Rë
;

2852 
s32VpssGΩNum
 = 1;

2853 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

2855 
u32VpssChn
 = 
VPSS_CHN1
;

2856 
s32Rë
 = 
SAMPLE_RGN_SèπVpssHD
(
s32VpssGΩNum
, 
u32VpssChn
);

2857 i‡(
HI_SUCCESS
 !
s32Rë
)

2859 
¥ötf
("SAMPLE_RGN_SèπVpssHD faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2860  
s32Rë
;

2863 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

2865 
u32VpssChn
 = 
VPSS_CHN1
;

2866 
s32Rë
 = 
SAMPLE_RGN_SèπVpss
(
s32VpssGΩNum
, 
u32VpssChn
);

2867 i‡(
HI_SUCCESS
 !
s32Rë
)

2869 
¥ötf
("SAMPLE_RGN_SèπVps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

2870  
s32Rë
;

2877 
VoDev
 = 0;

2878 
s32VoChnNum
 = 1;

2879 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

2881 
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

2883 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

2885 
íI¡fSync
 = 
VO_OUTPUT_PAL
;

2887 
s32Rë
 = 
SAMPLE_RGN_SèπVo
(
VoDev
, 
s32VoChnNum
, 
íI¡fSync
);

2888 i‡(
HI_SUCCESS
 !
s32Rë
)

2890 
¥ötf
("SAMPLE_RGN_SèπVÿÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

2891  
s32Rë
;

2897 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

2898 
°SrcChn
.
s32DevId
 = 0;

2899 
°SrcChn
.
s32ChnId
 = 0;

2901 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

2902 
°DesChn
.
s32DevId
 = 0;

2903 
°DesChn
.
s32ChnId
 = 0;

2905 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

2906 i‡(
HI_SUCCESS
 !
s32Rë
)

2908 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2909  
s32Rë
;

2915 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

2916 i‡(
VoLayî
 < 0)

2918 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

2919  
HI_FAILURE
;

2922 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

2923 
°SrcChn
.
s32DevId
 = 0;

2924 
°SrcChn
.
s32ChnId
 = 
u32VpssChn
;

2926 
°DesChn
.
íModId
 = 
HI_ID_VOU
;

2927 
°DesChn
.
s32DevId
 = 
VoLayî
;

2928 
°DesChn
.
s32ChnId
 = 0;

2930 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

2931 i‡(
HI_SUCCESS
 !
s32Rë
)

2933 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2934  
s32Rë
;

2941 
°RgnAârInfo
.
H™dÀ
 = Handle;

2942 
°RgnAârInfo
.
u32RgnNum
 = u32RgnNum;

2943 
±hªad_¸óã
(&
°RgnThªad
, 
NULL
, 
SAMPLE_RGN_VpssCovîDy«micDi•œy
, (
HI_VOID
*)&
°RgnAârInfo
);

2945 
¥ötf
("\n#############Sample start ok! Press EnterÅo switch!#############\n");

2951 
gëch¨
();

2952 
bExô
 = 
HI_TRUE
;

2954 
±hªad_joö
(
°RgnThªad
, 0);

2956 
bExô
 = 
HI_FALSE
;

2961 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

2962 i‡(
HI_SUCCESS
 !
s32Rë
)

2964 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2965  
s32Rë
;

2971 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

2972 
°SrcChn
.
s32DevId
 = 0;

2973 
°SrcChn
.
s32ChnId
 = 0;

2975 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

2976 
°DesChn
.
s32DevId
 = 0;

2977 
°DesChn
.
s32ChnId
 = 0;

2979 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

2980 i‡(
HI_SUCCESS
 !
s32Rë
)

2982 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

2983  
s32Rë
;

2989 
s32Rë
 = 
SAMPLE_RGN_St›VoChn
(
VoDev
, 
s32VoChnNum
);

2990 i‡(
HI_SUCCESS
 !
s32Rë
)

2992 
¥ötf
("SAMPLE_RGN_St›VoCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

2993  
s32Rë
;

2996 
s32Rë
 = 
SAMPLE_RGN_St›VoDev
(
VoDev
);

2997 i‡(
HI_SUCCESS
 !
s32Rë
)

2999 
¥ötf
("SAMPLE_RGN_St›VoDev faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3000  
s32Rë
;

3006 
s32Rë
 = 
SAMPLE_RGN_St›Vpss
(
s32VpssGΩNum
);

3007 i‡(
HI_SUCCESS
 !
s32Rë
)

3009 
¥ötf
("SAMPLE_RGN_St›Vps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3010  
s32Rë
;

3016 
s32Rë
 = 
SAMPLE_COMM_VI_St›Vi
(&
g_°ViChnC⁄fig
);

3017 i‡(
HI_SUCCESS
 !
s32Rë
)

3019 
¥ötf
("SAMPLE_COMM_VI_St›VòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3020  
s32Rë
;

3026 
s32Rë
 = 
SAMPLE_RGN_De°royRegi⁄
(
H™dÀ
, 
u32RgnNum
);

3027 i‡(
HI_SUCCESS
 !
s32Rë
)

3029 
¥ötf
("SAMPLE_RGN_De°royRegi⁄ faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3030  
s32Rë
;

3033 
s32Rë
 = 
SAMPLE_RGN_SYS_Exô
();

3034 i‡(
HI_SUCCESS
 !
s32Rë
)

3036 
¥ötf
("SAMPLE_RGN_SYS_Exô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3037  
s32Rë
;

3040  
HI_SUCCESS
;

3053 
HI_S32
 
SAMPLE_RGN_AddCovîExToVpss
(
HI_VOID
)

3055 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3056 
RGN_HANDLE
 
H™dÀ
;

3057 
HI_U32
 
u32RgnNum
;

3058 
MPP_CHN_S
 
°SrcChn
, 
°DesChn
;

3059 
HI_S32
 
s32VpssGΩNum
;

3060 
HI_U32
 
u32VpssChn
 = 0;

3061 
VO_DEV
 
VoDev
;

3062 
VO_LAYER
 
VoLayî
;

3063 
HI_U32
 
s32VoChnNum
;

3064 
VO_INTF_SYNC_E
 
íI¡fSync
;

3065 
±hªad_t
 
°RgnThªad
;

3066 
RGN_ATTR_INFO_S
 
°RgnAârInfo
;

3068 
s32Rë
 = 
SAMPLE_RGN_SYS_Inô
();

3069 i‡(
HI_SUCCESS
 !
s32Rë
)

3071 
¥ötf
("SAMPLE_RGN_SYS_Inô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3072  
s32Rë
;

3078 
H™dÀ
 = 0;

3079 
u32RgnNum
 = 8;

3080 
s32Rë
 = 
SAMPLE_RGN_Cª©eCovîEx
(
H™dÀ
, 
u32RgnNum
);

3081 i‡(
HI_SUCCESS
 !
s32Rë
)

3083 
¥ötf
("SAMPLE_RGN_Cª©eCovîEx faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3084  
s32Rë
;

3090 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
g_°ViChnC⁄fig
);

3091 i‡(
HI_SUCCESS
 !
s32Rë
)

3093 
¥ötf
("SAMPLE_COMM_VI_SèπVòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3094  
s32Rë
;

3100 
s32VpssGΩNum
 = 1;

3101 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

3103 
u32VpssChn
 = 
VPSS_CHN1
;

3104 
s32Rë
 = 
SAMPLE_RGN_SèπVpssHD
(
s32VpssGΩNum
, 
u32VpssChn
);

3105 i‡(
HI_SUCCESS
 !
s32Rë
)

3107 
¥ötf
("SAMPLE_RGN_SèπVpssHD faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3108  
s32Rë
;

3111 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

3113 
u32VpssChn
 = 
VPSS_CHN1
;

3114 
s32Rë
 = 
SAMPLE_RGN_SèπVpss
(
s32VpssGΩNum
, 
u32VpssChn
);

3115 i‡(
HI_SUCCESS
 !
s32Rë
)

3117 
¥ötf
("SAMPLE_RGN_SèπVps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3118  
s32Rë
;

3125 
VoDev
 = 0;

3126 
s32VoChnNum
 = 1;

3127 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

3129 
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

3131 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

3133 
íI¡fSync
 = 
VO_OUTPUT_PAL
;

3135 
s32Rë
 = 
SAMPLE_RGN_SèπVo
(
VoDev
, 
s32VoChnNum
, 
íI¡fSync
);

3136 i‡(
HI_SUCCESS
 !
s32Rë
)

3138 
¥ötf
("SAMPLE_RGN_SèπVÿÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3139  
s32Rë
;

3145 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

3146 
°SrcChn
.
s32DevId
 = 0;

3147 
°SrcChn
.
s32ChnId
 = 0;

3149 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

3150 
°DesChn
.
s32DevId
 = 0;

3151 
°DesChn
.
s32ChnId
 = 0;

3153 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3154 i‡(
HI_SUCCESS
 !
s32Rë
)

3156 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3157  
s32Rë
;

3163 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

3164 i‡(
VoLayî
 < 0)

3166 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

3167  
HI_FAILURE
;

3170 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

3171 
°SrcChn
.
s32DevId
 = 0;

3172 
°SrcChn
.
s32ChnId
 = 
u32VpssChn
;

3174 
°DesChn
.
íModId
 = 
HI_ID_VOU
;

3175 
°DesChn
.
s32DevId
 = 
VoLayî
;

3176 
°DesChn
.
s32ChnId
 = 0;

3178 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3179 i‡(
HI_SUCCESS
 !
s32Rë
)

3181 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3182  
s32Rë
;

3189 
°RgnAârInfo
.
H™dÀ
 = Handle;

3190 
°RgnAârInfo
.
u32RgnNum
 = u32RgnNum;

3191 
±hªad_¸óã
(&
°RgnThªad
, 
NULL
, 
SAMPLE_RGN_VpssCovîExDy«micDi•œy
, (
HI_VOID
*)&
°RgnAârInfo
);

3193 
¥ötf
("\n#############Sample start ok! Press EnterÅo switch!#############\n");

3199 
gëch¨
();

3200 
bExô
 = 
HI_TRUE
;

3202 
±hªad_joö
(
°RgnThªad
, 0);

3204 
bExô
 = 
HI_FALSE
;

3209 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

3210 i‡(
HI_SUCCESS
 !
s32Rë
)

3212 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3213  
s32Rë
;

3219 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

3220 
°SrcChn
.
s32DevId
 = 0;

3221 
°SrcChn
.
s32ChnId
 = 0;

3223 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

3224 
°DesChn
.
s32DevId
 = 0;

3225 
°DesChn
.
s32ChnId
 = 0;

3227 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

3228 i‡(
HI_SUCCESS
 !
s32Rë
)

3230 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3231  
s32Rë
;

3237 
s32Rë
 = 
SAMPLE_RGN_St›VoChn
(
VoDev
, 
s32VoChnNum
);

3238 i‡(
HI_SUCCESS
 !
s32Rë
)

3240 
¥ötf
("SAMPLE_RGN_St›VoCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3241  
s32Rë
;

3244 
s32Rë
 = 
SAMPLE_RGN_St›VoDev
(
VoDev
);

3245 i‡(
HI_SUCCESS
 !
s32Rë
)

3247 
¥ötf
("SAMPLE_RGN_St›VoDev faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3248  
s32Rë
;

3254 
s32Rë
 = 
SAMPLE_RGN_St›Vpss
(
s32VpssGΩNum
);

3255 i‡(
HI_SUCCESS
 !
s32Rë
)

3257 
¥ötf
("SAMPLE_RGN_St›Vps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3258  
s32Rë
;

3264 
s32Rë
 = 
SAMPLE_COMM_VI_St›Vi
(&
g_°ViChnC⁄fig
);

3265 i‡(
HI_SUCCESS
 !
s32Rë
)

3267 
¥ötf
("SAMPLE_COMM_VI_St›VòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3268  
s32Rë
;

3274 
s32Rë
 = 
SAMPLE_RGN_De°royRegi⁄
(
H™dÀ
, 
u32RgnNum
);

3275 i‡(
HI_SUCCESS
 !
s32Rë
)

3277 
¥ötf
("SAMPLE_RGN_De°royRegi⁄ faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3278  
s32Rë
;

3281 
s32Rë
 = 
SAMPLE_RGN_SYS_Exô
();

3282 i‡(
HI_SUCCESS
 !
s32Rë
)

3284 
¥ötf
("SAMPLE_RGN_SYS_Exô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3285  
s32Rë
;

3288  
HI_SUCCESS
;

3302 
HI_S32
 
SAMPLE_RGN_AddOsdToVpss
(
HI_VOID
)

3304 
RGN_HANDLE
 
H™dÀ
;

3305 
HI_S32
 
u32RgnNum
;

3306 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3307 
RGN_ATTR_S
 
°RgnAârSë
;

3308 
RGN_CANVAS_INFO_S
 
°C™vasInfo
;

3309 
RGN_CHN_ATTR_S
 
°ChnAâr
;

3310 
MPP_CHN_S
 
°Chn
;

3311 
HI_S32
 
i
;

3312 
BITMAP_S
 
°Bôm≠
;

3313 
HI_S32
 
s32VpssGΩNum
;

3314 
HI_S32
 
u32VpssChn
;

3315 
VO_DEV
 
VoDev
;

3316 
VO_LAYER
 
VoLayî
;

3317 
HI_U32
 
s32VoChnNum
;

3318 
VO_INTF_SYNC_E
 
íI¡fSync
;

3319 
MPP_CHN_S
 
°SrcChn
, 
°DesChn
;

3320 
±hªad_t
 
°RgnThªad
;

3321 
±hªad_t
 
°OsdRevî£Thªad
;

3322 
RGN_OSD_REVERSE_INFO_S
 
°OsdRevî£Info
;

3323 
RGN_ATTR_INFO_S
 
°RgnAârInfo
;

3324 
RECT_S
 
a°OsdLumaRe˘
[3];

3325 
HI_U32
 
u32OsdRe˘C¡
;

3326 
SIZE_S
 
°Size
;

3328 
s32Rë
 = 
SAMPLE_RGN_SYS_Inô
();

3329 i‡(
HI_SUCCESS
 !
s32Rë
)

3331 
¥ötf
("SAMPLE_RGN_SYS_Inô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3332  
s32Rë
;

3338 
H™dÀ
 = 0;

3339 
u32RgnNum
 = 4;

3340 
s32Rë
 = 
SAMPLE_RGN_Cª©eOvîœyExF‹Vpss
(
H™dÀ
, 
u32RgnNum
);

3341 i‡(
HI_SUCCESS
 !
s32Rë
)

3343 
¥ötf
("SAMPLE_RGN_Cª©eOvîœyExF‹Vps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3344  
s32Rë
;

3350 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
g_°ViChnC⁄fig
);

3351 i‡(
HI_SUCCESS
 !
s32Rë
)

3353 
¥ötf
("SAMPLE_COMM_VI_SèπVòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3354  
s32Rë
;

3360 
s32VpssGΩNum
 = 1;

3361 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

3363 
u32VpssChn
 = 
VPSS_CHN2
;

3364 
s32Rë
 = 
SAMPLE_RGN_SèπVpssHD
(
s32VpssGΩNum
, 
u32VpssChn
);

3365 i‡(
HI_SUCCESS
 !
s32Rë
)

3367 
¥ötf
("SAMPLE_RGN_SèπVpssHD faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3368  
s32Rë
;

3371 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

3373 
u32VpssChn
 = 
VPSS_CHN2
;

3374 
s32Rë
 = 
SAMPLE_RGN_SèπVpss
(
s32VpssGΩNum
, 
u32VpssChn
);

3375 i‡(
HI_SUCCESS
 !
s32Rë
)

3377 
¥ötf
("SAMPLE_RGN_SèπVps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3378  
s32Rë
;

3385 
VoDev
 = 0;

3386 
s32VoChnNum
 = 1;

3387 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

3389 
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

3391 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

3393 
íI¡fSync
 = 
VO_OUTPUT_PAL
;

3395 
s32Rë
 = 
SAMPLE_RGN_SèπVo
(
VoDev
, 
s32VoChnNum
, 
íI¡fSync
);

3396 i‡(
HI_SUCCESS
 !
s32Rë
)

3398 
¥ötf
("SAMPLE_RGN_SèπVÿÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3399  
s32Rë
;

3405 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

3406 
°SrcChn
.
s32DevId
 = 0;

3407 
°SrcChn
.
s32ChnId
 = 0;

3409 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

3410 
°DesChn
.
s32DevId
 = 0;

3411 
°DesChn
.
s32ChnId
 = 0;

3413 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3414 i‡(
HI_SUCCESS
 !
s32Rë
)

3416 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3417  
s32Rë
;

3423 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

3424 i‡(
VoLayî
 < 0)

3426 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

3427  
HI_FAILURE
;

3430 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

3431 
°SrcChn
.
s32DevId
 = 0;

3432 
°SrcChn
.
s32ChnId
 = 
u32VpssChn
;

3434 
°DesChn
.
íModId
 = 
HI_ID_VOU
;

3435 
°DesChn
.
s32DevId
 = 
VoLayî
;

3436 
°DesChn
.
s32ChnId
 = 0;

3438 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3439 i‡(
HI_SUCCESS
 !
s32Rë
)

3441 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3442  
s32Rë
;

3448 
s32Rë
 = 
HI_MPI_RGN_GëAâr
(
H™dÀ
, &
°RgnAârSë
);

3449 i‡(
HI_SUCCESS
 !
s32Rë
)

3451 
¥ötf
("HI_MPI_RGN_GëAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3452  
s32Rë
;

3455 
s32Rë
 = 
HI_MPI_RGN_GëC™vasInfo
(
H™dÀ
, &
°C™vasInfo
);

3456 i‡(
HI_SUCCESS
 !
s32Rë
)

3458 
¥ötf
("HI_MPI_RGN_GëC™vasInfÿÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3459  
s32Rë
;

3462 
°Bôm≠
.
pD©a
 = (
HI_VOID
*)
°C™vasInfo
.
u32VútAddr
;

3463 
°Size
.
u32Width
 = 
°C™vasInfo
.stSize.u32Width;

3464 
°Size
.
u32Height
 = 
°C™vasInfo
.stSize.u32Height;

3465 
s32Rë
 = 
SAMPLE_RGN_Upd©eC™vas
("mm.bmp", &
°Bôm≠
, 
HI_FALSE
, 0, &
°Size
, 
°C™vasInfo
.
u32Såide
,

3466 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
íPixñFmt
);

3467 i‡(
HI_SUCCESS
 !
s32Rë
)

3469 
¥ötf
("SAMPLE_RGN_Upd©eC™va†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3470  
s32Rë
;

3473 
s32Rë
 = 
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
);

3474 i‡(
HI_SUCCESS
 !
s32Rë
)

3476 
¥ötf
("HI_MPI_RGN_Upd©eC™va†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3477  
s32Rë
;

3484 
°RgnAârInfo
.
H™dÀ
 = Handle;

3485 
°RgnAârInfo
.
u32RgnNum
 = u32RgnNum;

3486 
±hªad_¸óã
(&
°RgnThªad
, 
NULL
, 
SAMPLE_RGN_VpssOSdDy«micDi•œy
, (
HI_VOID
*)&
°RgnAârInfo
);

3487 
¶ìp
(3);

3491 
u32OsdRe˘C¡
 = 3;

3492 
°OsdRevî£Info
.
H™dÀ
 = Handle;

3493 
°OsdRevî£Info
.
VpssGΩ
 = 0;

3494 
°OsdRevî£Info
.
VpssChn
 = 
u32VpssChn
;

3495 
°OsdRevî£Info
.
u8PîPixñLumaThrd
 = 128;

3496 
°OsdRevî£Info
.
°LumaRgnInfo
.
u32Regi⁄Num
 = 
u32OsdRe˘C¡
;

3497 
°OsdRevî£Info
.
°LumaRgnInfo
.
p°Regi⁄
 = 
a°OsdLumaRe˘
;

3499 
°Size
.
u32Width
 = 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.stSize.u32Width;

3500 
°Size
.
u32Height
 = 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.stSize.u32Height;

3502 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

3503 
°Chn
.
s32DevId
 = 0;

3504 
°Chn
.
s32ChnId
 = 
u32VpssChn
;

3505 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
H™dÀ
, &
°Chn
, &
°ChnAâr
);

3506 i‡(
HI_SUCCESS
 !
s32Rë
)

3508 
¥ötf
("HI_MPI_RGN_GëDi•œyAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3509  
s32Rë
;

3512 
i
 = 0; i < 
u32OsdRe˘C¡
; i++)

3514 
a°OsdLumaRe˘
[
i
].
s32X
 = ((
°Size
.
u32Width
 / 
u32OsdRe˘C¡
Ë* iË+ 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.s32X;

3515 
a°OsdLumaRe˘
[
i
].
s32Y
 = 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.s32Y;

3516 
a°OsdLumaRe˘
[
i
].
u32Width
 = (
°Size
.u32Width / 
u32OsdRe˘C¡
);

3517 
a°OsdLumaRe˘
[
i
].
u32Height
 = 
°Size
.u32Height;

3519 
±hªad_¸óã
(&
°OsdRevî£Thªad
, 
NULL
, 
SAMPLE_RGN_VpssOsdRevî£
, (
HI_VOID
*)&
°OsdRevî£Info
);

3521 
¥ötf
("\n#############Sample start ok! Press EnterÅo switch!#############\n");

3528 
gëch¨
();

3529 
bExô
 = 
HI_TRUE
;

3531 
±hªad_joö
(
°OsdRevî£Thªad
, 0);

3533 
±hªad_joö
(
°RgnThªad
, 0);

3535 
bExô
 = 
HI_FALSE
;

3540 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

3541 i‡(
HI_SUCCESS
 !
s32Rë
)

3543 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3544  
s32Rë
;

3550 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

3551 
°SrcChn
.
s32DevId
 = 0;

3552 
°SrcChn
.
s32ChnId
 = 0;

3554 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

3555 
°DesChn
.
s32DevId
 = 0;

3556 
°DesChn
.
s32ChnId
 = 0;

3558 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

3559 i‡(
HI_SUCCESS
 !
s32Rë
)

3561 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3562  
s32Rë
;

3568 
s32Rë
 = 
SAMPLE_RGN_St›VoChn
(
VoDev
, 
s32VoChnNum
);

3569 i‡(
HI_SUCCESS
 !
s32Rë
)

3571 
¥ötf
("SAMPLE_RGN_St›VoCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3572  
s32Rë
;

3575 
s32Rë
 = 
SAMPLE_RGN_St›VoDev
(
VoDev
);

3576 i‡(
HI_SUCCESS
 !
s32Rë
)

3578 
¥ötf
("SAMPLE_RGN_St›VoDev faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3579  
s32Rë
;

3585 
s32Rë
 = 
SAMPLE_RGN_St›Vpss
(
s32VpssGΩNum
);

3586 i‡(
HI_SUCCESS
 !
s32Rë
)

3588 
¥ötf
("SAMPLE_RGN_St›Vps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3589  
s32Rë
;

3595 
s32Rë
 = 
SAMPLE_COMM_VI_St›Vi
(&
g_°ViChnC⁄fig
);

3596 i‡(
HI_SUCCESS
 !
s32Rë
)

3598 
¥ötf
("SAMPLE_COMM_VI_St›VòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3599  
s32Rë
;

3605 
s32Rë
 = 
SAMPLE_RGN_De°royRegi⁄
(
H™dÀ
, 
u32RgnNum
);

3606 i‡(
HI_SUCCESS
 !
s32Rë
)

3608 
¥ötf
("SAMPLE_RGN_De°royRegi⁄ faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3609  
s32Rë
;

3612 
s32Rë
 = 
SAMPLE_RGN_SYS_Exô
();

3613 i‡(
HI_SUCCESS
 !
s32Rë
)

3615 
¥ötf
("SAMPLE_RGN_SYS_Exô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3616  
s32Rë
;

3619  
HI_SUCCESS
;

3636 
HI_S32
 
SAMPLE_RGN_AddOsdToVícAndVpss
(
HI_VOID
)

3638 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

3639 
RGN_HANDLE
 
H™dÀ
;

3640 
RGN_HANDLE
 
VícOsdH™dÀ
;

3641 
RGN_HANDLE
 
VpssOsdH™dÀ
;

3642 
HI_S32
 
u32VícRgnNum
;

3643 
HI_S32
 
u32VpssRgnNum
;

3644 
RGN_ATTR_S
 
°RgnAârSë
;

3645 
RGN_CANVAS_INFO_S
 
°C™vasInfo
;

3646 
BITMAP_S
 
°Bôm≠
;

3647 
MPP_CHN_S
 
°SrcChn
, 
°DesChn
;

3648 
RGN_CHN_ATTR_S
 
°ChnAâr
;

3649 
MPP_CHN_S
 
°Chn
;

3650 
HI_S32
 
i
;

3652 
VO_DEV
 
VoDev
;

3653 
VO_LAYER
 
VoLayî
;

3654 
HI_U32
 
s32VoChnNum
;

3655 
VO_INTF_SYNC_E
 
íI¡fSync
;

3657 
VENC_CHN
 
VícChn
;

3658 
HI_S32
 
s32VpssGΩNum
;

3659 
HI_S32
 
u32VpssChn
;

3660 
±hªad_t
 
°VícThªad
;

3661 
±hªad_t
 
°VícRgnThªad
;

3662 
±hªad_t
 
°VpssRgnThªad
;

3663 
VENC_PTHREAD_INFO_S
 
°VícGëPøm
;

3664 
±hªad_t
 
°VpssOsdRevî£Thªad
;

3665 
±hªad_t
 
°VícOsdRevî£Thªad
;

3666 
RGN_OSD_REVERSE_INFO_S
 
°VpssOsdRevî£Info
;

3667 
RGN_OSD_REVERSE_INFO_S
 
°VícOsdRevî£Info
;

3668 
RGN_ATTR_INFO_S
 
°RgnAârInfo
;

3669 
RECT_S
 
a°VpssOsdLumaRe˘
[3];

3670 
RECT_S
 
a°VícOsdLumaRe˘
[3];

3671 
HI_U32
 
u32VpssOsdRe˘C¡
;

3672 
HI_U32
 
u32VícOsdRe˘C¡
;

3673 
SIZE_S
 
°Size
;

3674 
FILE
* 
∑°ªam
 = 
NULL
;

3676 
s32Rë
 = 
SAMPLE_RGN_SYS_Inô
();

3677 i‡(
HI_SUCCESS
 !
s32Rë
)

3679 
¥ötf
("SAMPLE_RGN_SYS_Inô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3680  
s32Rë
;

3686 
VícOsdH™dÀ
 = 0;

3687 
u32VícRgnNum
 = 4;

3688 
s32Rë
 = 
SAMPLE_RGN_Cª©eOvîœyF‹Víc
(
VícOsdH™dÀ
, 
u32VícRgnNum
);

3689 i‡(
HI_SUCCESS
 !
s32Rë
)

3691 
¥ötf
("SAMPLE_RGN_Cª©eOvîœyF‹Ví¯Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3692  
s32Rë
;

3698 
VpssOsdH™dÀ
 = 
u32VícRgnNum
;

3699 
u32VpssRgnNum
 = 4;

3700 
s32Rë
 = 
SAMPLE_RGN_Cª©eOvîœyExF‹Vpss
(
VpssOsdH™dÀ
, 
u32VpssRgnNum
);

3701 i‡(
HI_SUCCESS
 !
s32Rë
)

3703 
¥ötf
("SAMPLE_RGN_Cª©eOvîœyExF‹Vps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3704  
s32Rë
;

3710 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
g_°ViChnC⁄fig
);

3711 i‡(
HI_SUCCESS
 !
s32Rë
)

3713 
¥ötf
("SAMPLE_COMM_VI_SèπVòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3714  
s32Rë
;

3720 
s32VpssGΩNum
 = 1;

3721 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

3723 
u32VpssChn
 = 
VPSS_CHN1
;

3724 
s32Rë
 = 
SAMPLE_RGN_SèπVpssHD
(
s32VpssGΩNum
, 
u32VpssChn
);

3725 i‡(
HI_SUCCESS
 !
s32Rë
)

3727 
¥ötf
("SAMPLE_RGN_SèπVpssHD faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3728  
s32Rë
;

3731 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

3733 
u32VpssChn
 = 
VPSS_CHN1
;

3734 
s32Rë
 = 
SAMPLE_RGN_SèπVpss
(
s32VpssGΩNum
, 
u32VpssChn
);

3735 i‡(
HI_SUCCESS
 !
s32Rë
)

3737 
¥ötf
("SAMPLE_RGN_SèπVps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3738  
s32Rë
;

3745 
VoDev
 = 0;

3746 
s32VoChnNum
 = 1;

3747 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

3749 
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

3751 i‡(
VO_INTF_CVBS
 =
g_íVoI¡fTy≥
)

3753 
íI¡fSync
 = 
VO_OUTPUT_PAL
;

3755 
s32Rë
 = 
SAMPLE_RGN_SèπVo
(
VoDev
, 
s32VoChnNum
, 
íI¡fSync
);

3756 i‡(
HI_SUCCESS
 !
s32Rë
)

3758 
¥ötf
("SAMPLE_RGN_SèπVÿÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3759  
s32Rë
;

3765 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

3766 
°SrcChn
.
s32DevId
 = 0;

3767 
°SrcChn
.
s32ChnId
 = 0;

3769 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

3770 
°DesChn
.
s32DevId
 = 0;

3771 
°DesChn
.
s32ChnId
 = 0;

3773 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3774 i‡(
HI_SUCCESS
 !
s32Rë
)

3776 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3777  
s32Rë
;

3783 
VoLayî
 = 
SAMPLE_RGN_GëVoLayî
(
VoDev
);

3784 i‡(
VoLayî
 < 0)

3786 
¥ötf
("SAMPLE_RGN_GëVoLayî faûed! VoDev: %d.\n", 
VoDev
);

3787  
HI_FAILURE
;

3790 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

3791 
°SrcChn
.
s32DevId
 = 0;

3792 
°SrcChn
.
s32ChnId
 = 
VPSS_CHN2
;

3794 
°DesChn
.
íModId
 = 
HI_ID_VOU
;

3795 
°DesChn
.
s32DevId
 = 
VoLayî
;

3796 
°DesChn
.
s32ChnId
 = 0;

3798 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3799 i‡(
HI_SUCCESS
 !
s32Rë
)

3801 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3802  
s32Rë
;

3807 
VícChn
 = 0;

3808 
s32Rë
 = 
SAMPLE_RGN_SèπVíc
(
VícChn
);

3809 i‡(
HI_SUCCESS
 !
s32Rë
)

3811 
¥ötf
("SAMPLE_RGN_SèπVí¯Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3812  
s32Rë
;

3818 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

3819 
°SrcChn
.
s32DevId
 = 0;

3820 
°SrcChn
.
s32ChnId
 = 
u32VpssChn
;

3822 
°DesChn
.
íModId
 = 
HI_ID_VENC
;

3823 
°DesChn
.
s32DevId
 = 0;

3824 
°DesChn
.
s32ChnId
 = 0;

3826 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°DesChn
);

3827 i‡(
HI_SUCCESS
 !
s32Rë
)

3829 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3830  
s32Rë
;

3836 
H™dÀ
 = 
VícOsdH™dÀ
; H™dÀ <
u32VícRgnNum
; Handle += u32VencRgnNum)

3838 
s32Rë
 = 
HI_MPI_RGN_GëAâr
(
H™dÀ
, &
°RgnAârSë
);

3839 i‡(
HI_SUCCESS
 !
s32Rë
)

3841 
¥ötf
("HI_MPI_RGN_GëAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3842  
s32Rë
;

3845 
s32Rë
 = 
HI_MPI_RGN_GëC™vasInfo
(
H™dÀ
, &
°C™vasInfo
);

3846 i‡(
HI_SUCCESS
 !
s32Rë
)

3848 
¥ötf
("HI_MPI_RGN_GëC™vasInfÿÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

3849  
s32Rë
;

3852 
°Bôm≠
.
pD©a
 = (
HI_VOID
*)
°C™vasInfo
.
u32VútAddr
;

3853 
°Size
.
u32Width
 = 
°C™vasInfo
.stSize.u32Width;

3854 
°Size
.
u32Height
 = 
°C™vasInfo
.stSize.u32Height;

3855 
s32Rë
 = 
SAMPLE_RGN_Upd©eC™vas
("mm.bmp", &
°Bôm≠
, 
HI_FALSE
, 0, &
°Size
, 
°C™vasInfo
.
u32Såide
,

3856 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.
íPixñFmt
);

3857 i‡(
HI_SUCCESS
 !
s32Rë
)

3859 
¥ötf
("SAMPLE_RGN_Upd©eC™va†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3860  
s32Rë
;

3863 
s32Rë
 = 
HI_MPI_RGN_Upd©eC™vas
(
H™dÀ
);

3864 i‡(
HI_SUCCESS
 !
s32Rë
)

3866 
¥ötf
("HI_MPI_RGN_Upd©eC™va†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3867  
s32Rë
;

3875 
±hªad_¸óã
(&
°VícRgnThªad
, 
NULL
, 
SAMPLE_RGN_VícOSdDy«micDi•œy
, NULL);

3876 
°RgnAârInfo
.
H™dÀ
 = 
VpssOsdH™dÀ
;

3877 
°RgnAârInfo
.
u32RgnNum
 = 
u32VpssRgnNum
;

3878 
±hªad_¸óã
(&
°VpssRgnThªad
, 
NULL
, 
SAMPLE_RGN_VpssOSdDy«micDi•œy
, (
HI_VOID
*)&
°RgnAârInfo
);

3879 
¶ìp
(3);

3884 
u32VpssOsdRe˘C¡
 = 3;

3885 
°VpssOsdRevî£Info
.
H™dÀ
 = 
VpssOsdH™dÀ
;

3886 
°VpssOsdRevî£Info
.
VpssGΩ
 = 0;

3887 
°VpssOsdRevî£Info
.
VpssChn
 = 
VPSS_CHN2
;

3888 
°VpssOsdRevî£Info
.
u8PîPixñLumaThrd
 = 128;

3889 
°VpssOsdRevî£Info
.
°LumaRgnInfo
.
u32Regi⁄Num
 = 
u32VpssOsdRe˘C¡
;

3890 
°VpssOsdRevî£Info
.
°LumaRgnInfo
.
p°Regi⁄
 = 
a°VpssOsdLumaRe˘
;

3892 
s32Rë
 = 
HI_MPI_RGN_GëAâr
(
VpssOsdH™dÀ
, &
°RgnAârSë
);

3893 i‡(
HI_SUCCESS
 !
s32Rë
)

3895 
¥ötf
("HI_MPI_RGN_GëAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3896  
s32Rë
;

3898 
°Size
.
u32Width
 = 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.stSize.u32Width;

3899 
°Size
.
u32Height
 = 
°RgnAârSë
.
unAâr
.
°OvîœyEx
.stSize.u32Height;

3901 
°Chn
.
íModId
 = 
HI_ID_VPSS
;

3902 
°Chn
.
s32DevId
 = 0;

3903 
°Chn
.
s32ChnId
 = 
VPSS_CHN2
;

3904 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
VpssOsdH™dÀ
, &
°Chn
, &
°ChnAâr
);

3905 i‡(
HI_SUCCESS
 !
s32Rë
)

3907 
¥ötf
("HI_MPI_RGN_GëDi•œyAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3908  
s32Rë
;

3911 
i
 = 0; i < 
u32VpssOsdRe˘C¡
; i++)

3913 
a°VpssOsdLumaRe˘
[
i
].
s32X
 = ((
°Size
.
u32Width
 / 
u32VpssOsdRe˘C¡
Ë* iË+ 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.s32X;

3914 
a°VpssOsdLumaRe˘
[
i
].
s32Y
 = 
°ChnAâr
.
unChnAâr
.
°OvîœyExChn
.
°Poöt
.s32Y;

3915 
a°VpssOsdLumaRe˘
[
i
].
u32Width
 = (
°Size
.u32Width / 
u32VpssOsdRe˘C¡
);

3916 
a°VpssOsdLumaRe˘
[
i
].
u32Height
 = 
°Size
.u32Height;

3918 
±hªad_¸óã
(&
°VpssOsdRevî£Thªad
, 
NULL
, 
SAMPLE_RGN_VpssOsdRevî£
, (
HI_VOID
*)&
°VpssOsdRevî£Info
);

3924 
u32VícOsdRe˘C¡
 = 3;

3925 
°VícOsdRevî£Info
.
H™dÀ
 = 
VícOsdH™dÀ
;

3926 
°VícOsdRevî£Info
.
VpssGΩ
 = 0;

3927 
°VícOsdRevî£Info
.
VpssChn
 = 
u32VpssChn
;

3928 
°VícOsdRevî£Info
.
u8PîPixñLumaThrd
 = 128;

3929 
°VícOsdRevî£Info
.
°LumaRgnInfo
.
u32Regi⁄Num
 = 
u32VícOsdRe˘C¡
;

3930 
°VícOsdRevî£Info
.
°LumaRgnInfo
.
p°Regi⁄
 = 
a°VícOsdLumaRe˘
;

3932 
s32Rë
 = 
HI_MPI_RGN_GëAâr
(
VícOsdH™dÀ
, &
°RgnAârSë
);

3933 i‡(
HI_SUCCESS
 !
s32Rë
)

3935 
¥ötf
("HI_MPI_RGN_GëAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3936  
s32Rë
;

3938 
°Size
.
u32Width
 = 
°RgnAârSë
.
unAâr
.
°Ovîœy
.stSize.u32Width;

3939 
°Size
.
u32Height
 = 
°RgnAârSë
.
unAâr
.
°Ovîœy
.stSize.u32Height;

3941 
°Chn
.
íModId
 = 
HI_ID_VENC
;

3942 
°Chn
.
s32DevId
 = 0;

3943 
°Chn
.
s32ChnId
 = 0;

3944 
s32Rë
 = 
HI_MPI_RGN_GëDi•œyAâr
(
VícOsdH™dÀ
, &
°Chn
, &
°ChnAâr
);

3945 i‡(
HI_SUCCESS
 !
s32Rë
)

3947 
¥ötf
("HI_MPI_RGN_GëDi•œyAâ∏Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

3948  
s32Rë
;

3951 
i
 = 0; i < 
u32VícOsdRe˘C¡
; i++)

3953 
a°VícOsdLumaRe˘
[
i
].
s32X
 = ((
°Size
.
u32Width
 / 
u32VícOsdRe˘C¡
Ë* iË+ 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.s32X;

3954 
a°VícOsdLumaRe˘
[
i
].
s32Y
 = 
°ChnAâr
.
unChnAâr
.
°OvîœyChn
.
°Poöt
.s32Y;

3955 
a°VícOsdLumaRe˘
[
i
].
u32Width
 = (
°Size
.u32Width / 
u32VícOsdRe˘C¡
);

3956 
a°VícOsdLumaRe˘
[
i
].
u32Height
 = 
°Size
.u32Height;

3958 
±hªad_¸óã
(&
°VícOsdRevî£Thªad
, 
NULL
, 
SAMPLE_RGN_VícOsdRevî£
, (
HI_VOID
*)&
°VícOsdRevî£Info
);

3964 
pfûíame
[
FILE_NAME_LEN
];

3965 
¢¥ötf
(
pfûíame
, 
FILE_NAME_LEN
, "venc_encode_stream.h264");

3966 
∑°ªam
 = 
f›í
(
pfûíame
, "wb");

3967 
HI_ASSERT
–
NULL
 !
∑°ªam
);

3969 
°VícGëPøm
.
p°ªam
 = 
∑°ªam
;

3970 
°VícGëPøm
.
VeChnId
 = 
VícChn
;

3971 
°VícGëPøm
.
s32FrmC¡
 = 0;

3972 
±hªad_¸óã
(&
°VícThªad
, 0, 
SAMPLE_RGN_VícGëSåóm
, (
HI_VOID
*)&
°VícGëPøm
);

3974 
¥ötf
("\n#############Sample start ok! Press EnterÅo switch!#############\n");

3980 
gëch¨
();

3981 
bExô
 = 
HI_TRUE
;

3982 
±hªad_joö
(
°VícThªad
, 0);

3983 
±hªad_joö
(
°VpssRgnThªad
, 0);

3984 
±hªad_joö
(
°VícRgnThªad
, 0);

3985 
±hªad_joö
(
°VpssOsdRevî£Thªad
, 0);

3986 
±hªad_joö
(
°VícOsdRevî£Thªad
, 0);

3988 
bExô
 = 
HI_FALSE
;

3993 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

3994 i‡(
HI_SUCCESS
 !
s32Rë
)

3996 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

3997  
s32Rë
;

4004 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

4005 
°SrcChn
.
s32DevId
 = 0;

4006 
°SrcChn
.
s32ChnId
 = 
VPSS_CHN2
;

4008 
°DesChn
.
íModId
 = 
HI_ID_VOU
;

4009 
°DesChn
.
s32DevId
 = 
VoLayî
;

4010 
°DesChn
.
s32ChnId
 = 0;

4012 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

4013 i‡(
HI_SUCCESS
 !
s32Rë
)

4015 
¥ötf
("HI_MPI_SYS_UnBöd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

4016  
s32Rë
;

4022 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

4023 
°SrcChn
.
s32DevId
 = 0;

4024 
°SrcChn
.
s32ChnId
 = 0;

4026 
°DesChn
.
íModId
 = 
HI_ID_VPSS
;

4027 
°DesChn
.
s32DevId
 = 0;

4028 
°DesChn
.
s32ChnId
 = 0;

4030 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°DesChn
);

4031 i‡(
HI_SUCCESS
 !
s32Rë
)

4033 
¥ötf
("HI_MPI_SYS_Böd faûed! s32Rë: 0x%x.\n", 
s32Rë
);

4034  
s32Rë
;

4040 
s32Rë
 = 
SAMPLE_RGN_St›Víc
(
VícChn
);

4041 i‡(
HI_SUCCESS
 !
s32Rë
)

4043 
¥ötf
("SAMPLE_RGN_St›Ví¯Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

4044  
s32Rë
;

4050 
s32Rë
 = 
SAMPLE_RGN_St›VoChn
(
VoDev
, 
s32VoChnNum
);

4051 i‡(
HI_SUCCESS
 !
s32Rë
)

4053 
¥ötf
("SAMPLE_RGN_St›VoCh¿Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

4054  
s32Rë
;

4057 
s32Rë
 = 
SAMPLE_RGN_St›VoDev
(
VoDev
);

4058 i‡(
HI_SUCCESS
 !
s32Rë
)

4060 
¥ötf
("SAMPLE_RGN_St›VoDev faûed! s32Rë: 0x%x.\n", 
s32Rë
);

4061  
s32Rë
;

4067 
s32Rë
 = 
SAMPLE_RGN_St›Vpss
(
s32VpssGΩNum
);

4068 i‡(
HI_SUCCESS
 !
s32Rë
)

4070 
¥ötf
("SAMPLE_RGN_St›Vps†Áûed! s32Rë: 0x%x.\n", 
s32Rë
);

4071  
s32Rë
;

4077 
s32Rë
 = 
SAMPLE_COMM_VI_St›Vi
(&
g_°ViChnC⁄fig
);

4078 i‡(
HI_SUCCESS
 !
s32Rë
)

4080 
¥ötf
("SAMPLE_COMM_VI_St›VòÁûed! s32Rë: 0x%x.\n", 
s32Rë
);

4081  
s32Rë
;

4087 
s32Rë
 = 
SAMPLE_RGN_De°royRegi⁄
(
VícOsdH™dÀ
, 
u32VícRgnNum
 + 
u32VpssRgnNum
);

4088 i‡(
HI_SUCCESS
 !
s32Rë
)

4090 
¥ötf
("SAMPLE_RGN_De°royRegi⁄ faûed! s32Rë: 0x%x.\n", 
s32Rë
);

4091  
s32Rë
;

4094 
s32Rë
 = 
SAMPLE_RGN_SYS_Exô
();

4095 i‡(
HI_SUCCESS
 !
s32Rë
)

4097 
¥ötf
("SAMPLE_RGN_SYS_Exô faûed! s32Rë: 0x%x.\n", 
s32Rë
);

4098  
s32Rë
;

4101  
s32Rë
;

4109 
maö
(
¨gc
, * 
¨gv
[])

4111 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

4112 
HI_CHAR
 
ch
;

4114 
bExô
 = 
HI_FALSE
;

4116 i‡–(
¨gc
 < 2Ë|| (1 !
°æí
(
¨gv
[1])))

4118 
SAMPLE_RGN_Ußge1
(
¨gv
[0]);

4119  
HI_FAILURE
;

4122 
sig«l
(
SIGINT
, 
SAMPLE_RGN_H™dÀSig
);

4123 
sig«l
(
SIGTERM
, 
SAMPLE_RGN_H™dÀSig
);

4124 i‡((
¨gc
 > 1Ë&& *
¨gv
[1] == '1')

4126 
g_íVoI¡fTy≥
 = 
VO_INTF_BT1120
;

4129 
g_°ViChnC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

4131 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
g_íPicSize
);

4135 
SAMPLE_RGN_Ußge2
();

4136 
ch
 = 
gëch¨
();

4137 
gëch¨
();

4138 
ch
)

4142 
s32Rë
 = 
SAMPLE_RGN_AddCovîToVpss
();

4147 
s32Rë
 = 
SAMPLE_RGN_AddCovîExToVpss
();

4152 
s32Rë
 = 
SAMPLE_RGN_AddOsdToVpss
();

4157 
s32Rë
 = 
SAMPLE_RGN_AddOsdToVícAndVpss
();

4163 
bExô
 = 
HI_TRUE
;

4168 
¥ötf
("input invaild!ÖleaseÅryágain.\n");

4173 i‡(
bExô
)

4179  
s32Rë
;

4185 #ifde‡
__˝lu•lus


4186 #i‡
__˝lu•lus


	@sample/scene_auto/sample_scene.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<±hªad.h
>

7 
	~<sig«l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

11 
	~<sys/io˘l.h
>

13 
	~"hi_comm_i•.h
"

14 
	~"mpi_awb.h
"

15 
	~"mpi_i•.h
"

16 
	~"hi_ty≥.h
"

17 
	~"hi_§dk_s˚√auto_deföe_ext.h
"

18 
	~"hi_§dk_s˚√auto_ext.h
"

20 
	#CFGFILE
 "s˚√auto.öi"

	)

23 
	$SAMPLE_SCENE_H™dÀSig
(
HI_S32
 
signo
)

25 
ªt
;

27 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

29 
ªt
 = 
	`HI_SRDK_SCENEAUTO_St›
();

30 i‡(
HI_SUCCESS
 !
ªt
)

32 
	`¥ötf
("HI_SRDK_SCENEAUTO_Stop failed\n");

33 
	`exô
(-1);

35 
ªt
 = 
	`HI_SRDK_SCENEAUTO_DeInô
();

36 i‡(
ªt
 != 0)

38 
	`¥ötf
("HI_SRDK_SCENEAUTO_DeInit failed\n");

39 
	`exô
(-1);

42 
	`exô
(-1);

43 
	}
}

46 
	$maö
(
¨gc
, * 
¨gv
[])

48 
ªt
;

49 
choi˚
;

50 
•ecüls˚√
;

51 
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
 
eS≥cülS˚√
;

52 * 
fûe_«me
;

53 
HI_BOOL
 
b_hñp
 = 0;

55 
fûe_«me
 = (*)
CFGFILE
;

57 i‡(
¨gc
 > 1)

59 
fûe_«me
 = 
¨gv
[1];

60 i‡(!
	`°rcmp
(
¨gv
[1], "-h"))

62 
b_hñp
 = 1;

67 
b_hñp
 = 1;

70 i‡(
b_hñp
)

72 
	`¥ötf
("/***************************************************************/\n\n");

73 
	`¥ötf
("usage: ./sample_scene ini_path.\n\n");

74 
	`¥ötf
("forÉxample: ./sample_scene ini/IPC/sceneauto_178.ini\n\n");

75 
	`¥ötf
("/***************************************************************/\n\n");

79 
ªt
 = 
	`HI_SRDK_SCENEAUTO_Inô
(
fûe_«me
);

80 i‡(
ªt
 != 0)

82 
	`¥ötf
("HI_SRDK_SCENEAUTO_Init failed\n");

86 
	`sig«l
(
SIGINT
, 
SAMPLE_SCENE_H™dÀSig
);

87 
	`sig«l
(
SIGTERM
, 
SAMPLE_SCENE_H™dÀSig
);

89 
	`¥ötf
("init success\n");

94 
	`¥ötf
("1.sceneauto start\n");

95 
	`¥ötf
("2.sceneauto stop\n");

96 
	`¥ötf
("3.set specialmode\n");

97 
	`¥ötf
("4.get specialmode\n");

99 
	`sˇnf
("%d", &
choi˚
);

100 
choi˚
)

103 
ªt
 = 
	`HI_SRDK_SCENEAUTO_Sèπ
();

104 i‡(
HI_SUCCESS
 !
ªt
)

106 
	`¥ötf
("HI_SRDK_SCENEAUTO_Start failed\n");

111 
ªt
 = 
	`HI_SRDK_SCENEAUTO_St›
();

112 i‡(
HI_SUCCESS
 !
ªt
)

114 
	`¥ötf
("HI_SRDK_SCENEAUTO_Stop failed\n");

119 
	`¥ötf
("please inputÅhe specialscene(0-blc, 1-ir, 2-hlc, 3-dynamic, 4-drc, 5-specialnone)");

120 
	`sˇnf
("%d", &
•ecüls˚√
);

121 
•ecüls˚√
)

124 
eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_BLC
;

125 
ªt
 = 
	`HI_SRDK_SCENEAUTO_SëS≥cülMode
(&
eS≥cülS˚√
);

126 i‡(
HI_SUCCESS
 !
ªt
)

128 
	`¥ötf
("HI_SRDK_SCENEAUTO_SetSpecialMode failed\n");

133 
eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
;

134 
ªt
 = 
	`HI_SRDK_SCENEAUTO_SëS≥cülMode
(&
eS≥cülS˚√
);

135 i‡(
HI_SUCCESS
 !
ªt
)

137 
	`¥ötf
("HI_SRDK_SCENEAUTO_SetSpecialMode failed\n");

142 
eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
;

143 
ªt
 = 
	`HI_SRDK_SCENEAUTO_SëS≥cülMode
(&
eS≥cülS˚√
);

144 i‡(
HI_SUCCESS
 !
ªt
)

146 
	`¥ötf
("HI_SRDK_SCENEAUTO_SetSpecialMode failed\n");

151 
eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_DYNAMIC
;

152 
ªt
 = 
	`HI_SRDK_SCENEAUTO_SëS≥cülMode
(&
eS≥cülS˚√
);

153 i‡(
HI_SUCCESS
 !
ªt
)

155 
	`¥ötf
("HI_SRDK_SCENEAUTO_SetSpecialMode failed\n");

160 
eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_DRC
;

161 
ªt
 = 
	`HI_SRDK_SCENEAUTO_SëS≥cülMode
(&
eS≥cülS˚√
);

162 i‡(
HI_SUCCESS
 !
ªt
)

164 
	`¥ötf
("HI_SRDK_SCENEAUTO_SetSpecialMode failed\n");

169 
eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
;

170 
ªt
 = 
	`HI_SRDK_SCENEAUTO_SëS≥cülMode
(&
eS≥cülS˚√
);

171 i‡(
HI_SUCCESS
 !
ªt
)

173 
	`¥ötf
("HI_SRDK_SCENEAUTO_SetSpecialMode failed\n");

178 
	`¥ötf
("unkonw input\n");

183 
ªt
 = 
	`HI_SRDK_SCENEAUTO_GëS≥cülMode
(&
eS≥cülS˚√
);

184 i‡(
HI_SUCCESS
 !
ªt
)

186 
	`¥ötf
("HI_SRDK_SCENEAUTO_GetSpecialMode failed\n");

189 
	`¥ötf
("cuºíàs˚√ i†%d\n", 
eS≥cülS˚√
);

192 
	`¥ötf
("unkonw input\n");

196 
	`¶ìp
(1);

199 
ªt
 = 
	`HI_SRDK_SCENEAUTO_DeInô
();

200 i‡(
ªt
 != 0)

202 
	`¥ötf
("HI_SRDK_SCENEAUTO_DeInit failed\n");

205 
	`¥ötf
("deinit success\n");

208 
	}
}

	@sample/scene_auto/src/adapt/hi3516a/hi_sceneauto_adpt.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<m©h.h
>

6 
	~<±hªad.h
>

7 
	~<sys/¥˘l.h
>

8 
	~"hi_s˚√auto_comm.h
"

9 
	~"hi_s˚√auto_comm_ext.h
"

10 
	~"hi_comm⁄.h
"

11 
	~"hi_comm_i•.h
"

12 
	~"hi_comm_vpss.h
"

13 
	~"hi_comm_video.h
"

14 
	~"hi_comm_sys.h
"

15 
	~"hi_comm_vo.h
"

16 
	~"hi_comm_rc.h
"

17 
	~"hi_comm_víc.h
"

18 
	~"hi_ive.h
"

19 
	~"hi_comm_ive.h
"

20 
	~"hi_comm_vgs.h
"

22 
	~"mpi_i•.h
"

23 
	~"mpi_víc.h
"

24 
	~"mpi_´.h
"

25 
	~"mpi_vi.h
"

26 
	~"mpi_awb.h
"

27 
	~"mpi_vpss.h
"

28 
	~"mpi_vb.h
"

29 
	~"mpi_sys.h
"

30 
	~"mpi_vi.h
"

31 
	~"mpi_vo.h
"

32 
	~"mpi_ive.h
"

34 #ifde‡
__˝lu•lus


35 #i‡
__˝lu•lus


40 
	#IVE2_ALIGN
 16

	)

41 
	#ˇlcSåide
(
width
,
Æign
Ë((width+Æign-1)&(~◊lign-1)))

	)

42 
	#CCIMGWIDTH
 160

	)

43 
	#CCIMGHEIGHT
 128

	)

44 
HI_U16
 
u16IThªshTabÀ
[12] = {20, 25, 30, 35, 40, 50, 60, 70, 75, 80, 85, 90};

45 
HI_U16
 
u16PThªshTabÀ
[12] = {20, 25, 30, 35, 40, 50, 60, 70, 75, 80, 85, 90};

48 
	#CHECK_RET
(
«me
,
ex¥ess
)\

	)

50 i‡(
HI_SUCCESS
 !
ex¥ess
)\

52 
¥ötf
("%s failedát %s: LINE: %d !Érrno:%x \n",\

53 
«me
, 
__FUNCTION__
, 
__LINE__
, 
ex¥ess
);\

57 
	#IVE_MMZ_FREE
(
phy
,
vú
)\

	)

59 i‡((0 !(
phy
)Ë&& (
NULL
 !(
vú
)))\

61 
HI_MPI_SYS_MmzFªe
((
phy
),(
vú
));\

62 (
phy
) = 0;\

63 (
vú
Ë
NULL
;\

67 
__ölöe
 
iClù2
(
x
, 
b
) {{ if (x < 0) x = 0; };{ if (x > b) x = b; };  x; }

68 
__ölöe
 
iClù3
(
x
, 
a
,
b
) {{ if (x <á) x =á; };{ if (x > b) x = b; };  x; }

69 
__ölöe
 
iMö2
(
a
, 
b
) {{ if (a > b)á = b; }; á; }

70 
__ölöe
 
iMax2
(
a
, 
b
) {{ if (a > b) b =á; };  b; }

71 
__ölöe
 
iMö3
(
a
, 
b
, 
c
) {{ if (a > b)á = b; }; { if (a > c)á = c; }; á; }

73 
	eHI_MBRCMODE_E


75 
E_MBINTEG
 = 0,

76 
E_MBSTEP
 = 1,

77 
E_MBDEFAULT
 = 2

78 } 
	tMBRCMODE_E
;

80 
	sIVE_MD


82 
±hªad_t
 
hIveMBThªad
;

83 
IVE_IMAGE_S
 
°Img1
;

84 
IVE_IMAGE_S
 
°Img3
;

85 
IVE_IMAGE_S
 
°Img4
;

86 
IVE_IMAGE_S
 
°Img5
;

88 
VIDEO_FRAME_INFO_S
 
°CCSˇÀTmp
;

89 
VIDEO_FRAME_INFO_S
 
°CCSˇÀOut
;

90 
IVE_IMAGE_S
 
°CCI¡egtmp
;

91 
IVE_IMAGE_S
 
°CCI¡eg
;

92 
IVE_IMAGE_S
 
°CCCÆBuf
;

95 
IVE_IMAGE_S
 
°Hi°Info
;

96 
HI_U16
 
u16VideoWidth
 ;

97 
HI_U16
 
u16VideoHeight
;

98 
HI_U16
 
u16OriWidth
;

99 
HI_U16
 
u16OriHeight
;

100 
HI_BOOL
 
bSt›Sig«l
;

101 
HI_BOOL
 
bPau£
;

102 
MBRCMODE_E
 
eRCMode
;

103 
HI_U32
 
ViExtChn
;

104 
HI_S32
 
s32VpssGΩ
;

105 
HI_S32
 
s32VpssChn
;

106 } 
	tIVE_MD
;

108 
IVE_MD
 
°IveMd
;

110 
	shiVENC_FACE_CFG_S


112 
HI_BOOL
 
bI¡ø4Ang
[2][35];

113 
HI_BOOL
 
bI¡ø8Ang
[2][35];

114 
HI_BOOL
 
bI¡ø16Ang
[2][35];

115 
HI_BOOL
 
bI¡ø32Ang
[2][35];

116 
HI_BOOL
 
bIm¥oveEn
[2];

118 
HI_U32
 
u32N‹m32MaxNum
[2];

119 
HI_U32
 
u32N‹m32PrŸe˘Num
[2];

120 
HI_U32
 
u32N‹m16MaxNum
[2];

121 
HI_U32
 
u32N‹m16PrŸe˘Num
[2];

123 
HI_U32
 
u32Skö32MaxNum
[2];

124 
HI_U32
 
u32Skö32PrŸe˘Num
[2];

125 
HI_U32
 
u32Skö16MaxNum
[2];

126 
HI_U32
 
u32Skö16PrŸe˘Num
[2];

128 
HI_U32
 
u32Stûl32MaxNum
[2];

129 
HI_U32
 
u32Stûl32PrŸe˘Num
[2];

130 
HI_U32
 
u32Stûl16MaxNum
[2];

131 
HI_U32
 
u32Stûl16PrŸe˘Num
[2];

133 
HI_U32
 
u32Hedge32MaxNum
[2];

134 
HI_U32
 
u32Hedge32PrŸe˘Num
[2];

135 
HI_U32
 
u32Hedge16MaxNum
[2];

136 
HI_U32
 
u32Hedge16PrŸe˘Num
[2];

138 
HI_U8
 
u8N‹mI¡ø32RdCo°
[2];

139 
HI_U8
 
u8N‹mI¡ø16RdCo°
[2];

140 
HI_U8
 
u8N‹mI¡ø8RdCo°
[2];

141 
HI_U8
 
u8N‹mI¡ø4RdCo°
[2];

143 
HI_U8
 
u8N‹mMîg64RdCo°
[2];

144 
HI_U8
 
u8N‹mMîg32RdCo°
[2];

145 
HI_U8
 
u8N‹mMîg16RdCo°
[2];

146 
HI_U8
 
u8N‹mMîg8RdCo°
[2];

148 
HI_U8
 
u8N‹mFme64RdCo°
[2];

149 
HI_U8
 
u8N‹mFme32RdCo°
[2];

150 
HI_U8
 
u8N‹mFme16RdCo°
[2];

151 
HI_U8
 
u8N‹mFme8RdCo°
[2];

153 
HI_U8
 
u8SköI¡ø32RdCo°
[2];

154 
HI_U8
 
u8SköI¡ø16RdCo°
[2];

155 
HI_U8
 
u8SköI¡ø8RdCo°
[2];

156 
HI_U8
 
u8SköI¡ø4RdCo°
[2];

158 
HI_U8
 
u8SköMîg64RdCo°
[2];

159 
HI_U8
 
u8SköMîg32RdCo°
[2];

160 
HI_U8
 
u8SköMîg16RdCo°
[2];

161 
HI_U8
 
u8SköMîg8RdCo°
[2];

163 
HI_U8
 
u8SköFme64RdCo°
[2];

164 
HI_U8
 
u8SköFme32RdCo°
[2];

165 
HI_U8
 
u8SköFme16RdCo°
[2];

166 
HI_U8
 
u8SköFme8RdCo°
[2];

168 
HI_U8
 
u8HedgeI¡ø32RdCo°
[2];

169 
HI_U8
 
u8HedgeI¡ø16RdCo°
[2];

170 
HI_U8
 
u8HedgeI¡ø8RdCo°
[2];

171 
HI_U8
 
u8HedgeI¡ø4RdCo°
[2];

173 
HI_U8
 
u8HedgeMîg64RdCo°
[2];

174 
HI_U8
 
u8HedgeMîg32RdCo°
[2];

175 
HI_U8
 
u8HedgeMîg16RdCo°
[2];

176 
HI_U8
 
u8HedgeMîg8RdCo°
[2];

178 
HI_U8
 
u8HedgeFme64RdCo°
[2];

179 
HI_U8
 
u8HedgeFme32RdCo°
[2];

180 
HI_U8
 
u8HedgeFme16RdCo°
[2];

181 
HI_U8
 
u8HedgeFme8RdCo°
[2];

183 
HI_BOOL
 
bSåoEdgeEn
[2];

184 
HI_U32
 
u32SåoEdgeQpDñè
[2];

186 
HI_BOOL
 
bSköEn
[2];

187 
HI_U32
 
u32SköQpDñè
[2];

189 
HI_U8
 
u8SköUMax
[2];

190 
HI_U8
 
u8SköUMö
[2];

191 
HI_U8
 
u8SköVMax
[2];

192 
HI_U8
 
u8SköVMö
[2];

194 
HI_U32
 
u32SköNum
[2];

195 
HI_U8
 
u8HedgeC¡
[2];

196 
HI_U8
 
u8HedgeThr
[2];

198 
HI_U32
 
u32StûlThr
[2];

200 } 
	tVENC_FACE_CFG_S
;

203 
HI_S32
 
HI_MPI_VPSS_SëNRV2P¨am
(
VPSS_GRP
 
VpssGΩ
, c⁄° 
VPSS_GRP_VPPNRXEX_S
* 
p°VpssGΩVµNrEx
);

204 
HI_S32
 
HI_MPI_VPSS_GëNRV2P¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_VPPNRXEX_S
* 
p°VpssGΩVµNrEx
);

205 
HI_S32
 
HI_MPI_VENC_SëFa˚Cfg
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_FACE_CFG_S
* 
p°Fa˚Cfg
);

206 
HI_S32
 
HI_MPI_VENC_GëFa˚Cfg
(
VENC_CHN
 
VeChn
, 
VENC_FACE_CFG_S
* 
p°Fa˚Cfg
);

207 
HI_S32
 
HI_MPI_VPSS_SëNRV3P¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_VPPNRBEX_S
 *
p°VpssNrP¨am
);

208 
HI_S32
 
HI_MPI_VPSS_GëNRV3P¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_VPPNRBEX_S
 *
p°VpssNrP¨am
);

210 
IVE_Dëe˘De°‹y
(
IVE_MD
* 
p°IveMd
)

212 i‡(
	gp°IveMd
->
	g°Hi°Info
.
	gu32PhyAddr
[0])

214 
IVE_MMZ_FREE
(
p°IveMd
->
°Hi°Info
.
u32PhyAddr
[0],Ö°IveMd->°Hi°Info.
pu8VúAddr
[0]);

215 
	gp°IveMd
->
	g°Hi°Info
.
	gu32PhyAddr
[0] = 0;

218 i‡(
	gp°IveMd
->
	g°Img3
.
	gu32PhyAddr
[0])

220 
IVE_MMZ_FREE
(
p°IveMd
->
°Img3
.
u32PhyAddr
[0],Ö°IveMd->°Img3.
pu8VúAddr
[0]);

221 
	gp°IveMd
->
	g°Img3
.
	gu32PhyAddr
[0] = 0;

224 i‡(
	gp°IveMd
->
	g°Img5
.
	gu32PhyAddr
[0])

226 
IVE_MMZ_FREE
(
p°IveMd
->
°Img5
.
u32PhyAddr
[0],Ö°IveMd->°Img5.
pu8VúAddr
[0]);

227 
	gp°IveMd
->
	g°Img5
.
	gu32PhyAddr
[0] = 0;

230 i‡(
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32PhyAddr
[0])

232 
IVE_MMZ_FREE
(
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32PhyAddr
[0],Ö°IveMd->°CCSˇÀTmp.°VFøme.
pVúAddr
[0]);

233 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32PhyAddr
[0] = 0;

236 i‡(
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32PhyAddr
[0])

238 
IVE_MMZ_FREE
(
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32PhyAddr
[0],Ö°IveMd->°CCSˇÀOut.°VFøme.
pVúAddr
[0]);

239 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32PhyAddr
[0] = 0;

242 i‡(
	gp°IveMd
->
	g°CCI¡egtmp
.
	gu32PhyAddr
[0])

244 
IVE_MMZ_FREE
(
p°IveMd
->
°CCI¡egtmp
.
u32PhyAddr
[0],Ö°IveMd->°CCI¡egtmp.
pu8VúAddr
[0]);

245 
	gp°IveMd
->
	g°CCI¡egtmp
.
	gu32PhyAddr
[0] = 0;

248 i‡(
	gp°IveMd
->
	g°CCCÆBuf
.
	gpu8VúAddr
[0])

250 
‰ì
(
p°IveMd
->
°CCCÆBuf
.
pu8VúAddr
[0]);

251 
	gp°IveMd
->
	g°CCCÆBuf
.
	gpu8VúAddr
[0] = 0;

254  
	gHI_SUCCESS
;

258 
IVE_Dëe˘Inô
(
IVE_MD
* 
p°IveMd
)

261 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

262 
HI_U32
 
	gu32Size
 = 0;

263 
	gi
;

265 
VPSS_GRP
 
	g°VpssGΩ
 = 
p°IveMd
->
s32VpssGΩ
;

266 
VPSS_CHN
 
	g°VpssChn
 = 
p°IveMd
->
s32VpssChn
;

267 
HI_U32
 
	gu32Dïth
 = 1;

268 
	gs32Rë
 = 
HI_MPI_VPSS_SëDïth
(
°VpssGΩ
, 
°VpssChn
, 
u32Dïth
);

269 i‡(
	gs32Rë
 !
HI_SUCCESS
)

271 
CHECK_RET
("HI_MPI_VPSS_SëDïth faû\n", 
s32Rë
);

272 
	gFAIL
;

274 
	gp°IveMd
->
	g°Img3
.
	gíTy≥
 = 
IVE_IMAGE_TYPE_U64C1
;

275 
	gp°IveMd
->
	g°Img3
.
	gu16Width
 = ((
p°IveMd
->
u16OriWidth
 >> 3) & (~0xf)) + 2;

276 
	gp°IveMd
->
	g°Img3
.
	gu16Height
 = ((
p°IveMd
->
u16OriHeight
 >> 3) & (~0xf)) + 1;

277 
	gp°IveMd
->
	g°Img3
.
	gu16Såide
[0] = 
ˇlcSåide
–(
p°IveMd
->
°Img3
.
u16Width
), 
IVE2_ALIGN
) << 3;

278 
	gu32Size
 = 
p°IveMd
->
°Img3
.
u16Såide
[0] *Ö°IveMd->°Img3.
u16Height
;

279 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
p°IveMd
->
°Img3
.
u32PhyAddr
[0], (**)&p°IveMd->°Img3.
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

280 i‡(
	gs32Rë
 !
HI_SUCCESS
)

282 
CHECK_RET
("p°IveMd->°Imagê3 mÆlo¯Áû\n", 
s32Rë
);

283 
	gFAIL
;

286 
mem£t
(
p°IveMd
->
°Img3
.
pu8VúAddr
[0], 0, 16 +Ö°IveMd->°Img3.
u16Såide
[0]);

287 
	gi
 = 1; i < 
	gp°IveMd
->
	g°Img3
.
	gu16Height
; i++)

289 
mem£t
(
p°IveMd
->
°Img3
.
pu8VúAddr
[0] + 
i
 *Ö°IveMd->°Img3.
u16Såide
[0], 0, 16);

291 
	gp°IveMd
->
	g°Img4
.
	gíTy≥
 = 
IVE_IMAGE_TYPE_U64C1
;

292 
	gp°IveMd
->
	g°Img4
.
	gu16Width
 = ((
p°IveMd
->
u16OriWidth
 >> 3) & (~0xf));

293 
	gp°IveMd
->
	g°Img4
.
	gu16Height
 = ((
p°IveMd
->
u16OriHeight
 >> 3) & (~0xf));

294 
	gp°IveMd
->
	g°Img4
.
	gu16Såide
[0] = (
p°IveMd
->
°Img3
.
u16Såide
[0] >> 3);

295 
	gp°IveMd
->
	g°Img4
.
	gu32PhyAddr
[0] = 
p°IveMd
->
°Img3
.
u32PhyAddr
[0] + 16 +Ö°IveMd->°Img3.
u16Såide
[0];

296 
	gp°IveMd
->
	g°Img4
.
	gpu8VúAddr
[0] = 
p°IveMd
->
°Img3
.
pu8VúAddr
[0] + 16 +Ö°IveMd->°Img3.
u16Såide
[0];

299 
	gp°IveMd
->
	g°Img5
.
	gíTy≥
 = 
IVE_IMAGE_TYPE_U8C1
;

300 
	gp°IveMd
->
	g°Img5
.
	gu16Width
 = (
p°IveMd
->
u16OriWidth
 >> 4) & (~0x3);

301 
	gp°IveMd
->
	g°Img5
.
	gu16Height
 = (
p°IveMd
->
u16OriHeight
 >> 4) & (~0x3);

302 
	gp°IveMd
->
	g°Img5
.
	gu16Såide
[0] = 
p°IveMd
->
°Img5
.
u16Width
;

303 
	gu32Size
 = 
p°IveMd
->
°Img5
.
u16Såide
[0] *Ö°IveMd->°Img5.
u16Height
;

304 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
p°IveMd
->
°Img5
.
u32PhyAddr
[0], (**)&p°IveMd->°Img5.
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

305 i‡(
	gs32Rë
 !
HI_SUCCESS
)

307 
CHECK_RET
("p°IveMd->°Imagê5 faû \n", 
s32Rë
);

308 
¥ötf
("Ælo¯size: %d w %d h %d s %d\n", 
u32Size
, 
p°IveMd
->
°Img5
.
u16Width
,Ö°IveMd->°Img5.
u16Height
,Ö°IveMd->°Img5.
u16Såide
[0]);

309 
	gFAIL
;

312 
mem˝y
(&
p°IveMd
->
°Img1
, &p°IveMd->
°Img5
, (pstIveMd->stImg5));

314 i‡((
	gp°IveMd
->
	g°Img1
.
	gu16Såide
[0] & (
	gIVE2_ALIGN
 - 1)) != 0)

316 
i
 = 4; 
	gi
 < 255; i++)

318 i‡(
	gu32Size
 =(
u32Size
 / (
i
 * 
IVE2_ALIGN
)) * (i * IVE2_ALIGN))

321 i‡(
	gi
 == 255)

323 
¥ötf
("can't find stride,can't use ive hist\n");

324 
	gFAIL
;

326 
	gp°IveMd
->
	g°Img1
.
	gu16Såide
[0] = 
i
 * 
IVE2_ALIGN
;

327 
	gp°IveMd
->
	g°Img1
.
	gu16Width
 = 
p°IveMd
->
°Img1
.
u16Såide
[0];

328 
	gp°IveMd
->
	g°Img1
.
	gu16Height
 = 
u32Size
 / (
i
 * 
IVE2_ALIGN
);

331 
	gu32Size
 = 1024 * 4;

332 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
p°IveMd
->
°Hi°Info
.
u32PhyAddr
[0], (**)&p°IveMd->°Hi°Info.
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

333 i‡(
	gs32Rë
 !
HI_SUCCESS
)

335 
CHECK_RET
("p°IveMd->°Hi°InfÿÁû\n", 
s32Rë
);

336 
	gFAIL
;

341 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32Width
 = 
ˇlcSåide
(
MAX2
((
p°IveMd
->
u16OriWidth
 >> 4), 
CCIMGWIDTH
), 
IVE2_ALIGN
);

342 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32Height
 = 
MAX2
((
p°IveMd
->
u16OriWidth
 >> 4), 
CCIMGHEIGHT
);

343 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32Såide
[0] = 
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32Width
;

344 
	gu32Size
 = 
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32Width
 *Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Height
 * 3 >> 1;

345 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32PhyAddr
[0], (**)&p°IveMd->°CCSˇÀTmp.°VFøme.
pVúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

346 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gíPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

347 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gíCom¥essMode
 = 
COMPRESS_MODE_NONE
;

348 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32PhyAddr
[1] = 
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32PhyAddr
[0] +Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Såide
[0] *Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Height
;

349 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gpVúAddr
[1] = (
HI_VOID
*)((
HI_U8
*)
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
pVúAddr
[0] +Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Såide
[0] *Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Height
);

350 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32PhyAddr
[2] = 
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32PhyAddr
[1] + (p°IveMd->°CCSˇÀTmp.°VFøme.
u32Såide
[1] *Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Height
 >> 1) + 1;

351 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gpVúAddr
[2] = (
HI_VOID
*)((
HI_U8
*)
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
pVúAddr
[1] + (p°IveMd->°CCSˇÀTmp.°VFøme.
u32Såide
[1] *Ö°IveMd->°CCSˇÀTmp.°VFøme.
u32Height
 >> 1) + 1);

352 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32Såide
[1] = 
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32Såide
[0];

353 
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32Såide
[2] = 
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32Såide
[0];

354 i‡(
	gs32Rë
 !
HI_SUCCESS
)

356 
CHECK_RET
("p°IveMd->°CCSˇÀTm∞Áû\n", 
s32Rë
);

357 
	gFAIL
;

359 i‡–(
	gp°IveMd
->
	g°CCSˇÀTmp
.
	g°VFøme
.
	gu32Width
 =
CCIMGWIDTH
Ë&& (
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
u32Height
 =
CCIMGHEIGHT
) )

361 
mem£t
(&
p°IveMd
->
°CCSˇÀOut
, 0, (pstIveMd->stCCScaleOut));

365 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32Width
 = 
CCIMGWIDTH
;

366 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32Height
 = 
CCIMGHEIGHT
;

367 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32Såide
[0] = 
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32Width
;

368 
	gu32Size
 = 
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32Width
 *Ö°IveMd->°CCSˇÀOut.°VFøme.
u32Height
 * 3 >> 1;

369 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32PhyAddr
[0], (**)&p°IveMd->°CCSˇÀOut.°VFøme.
pVúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

370 i‡(
	gs32Rë
 !
HI_SUCCESS
)

372 
CHECK_RET
("p°IveMd->°CCSˇÀOuàÁû\n", 
s32Rë
);

373 
	gFAIL
;

375 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gíPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

376 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gíCom¥essMode
 = 
COMPRESS_MODE_NONE
;

377 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32PhyAddr
[1] = 
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32PhyAddr
[0] +Ö°IveMd->°CCSˇÀOut.°VFøme.
u32Såide
[0] *Ö°IveMd->°CCSˇÀOut.°VFøme.
u32Height
;

378 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gpVúAddr
[1] = (
HI_VOID
*)((
HI_U8
*)
p°IveMd
->
°CCSˇÀTmp
.
°VFøme
.
pVúAddr
[0] +Ö°IveMd->
°CCSˇÀOut
.°VFøme.
u32Såide
[0] *Ö°IveMd->°CCSˇÀOut.°VFøme.
u32Height
);

379 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32PhyAddr
[2] = 
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32PhyAddr
[1] + (p°IveMd->°CCSˇÀOut.°VFøme.
u32Såide
[1] *Ö°IveMd->°CCSˇÀOut.°VFøme.
u32Height
 >> 1) + 1;

380 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gpVúAddr
[2] = (
HI_VOID
*)((
HI_U8
*)
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
pVúAddr
[1] + (p°IveMd->°CCSˇÀOut.°VFøme.
u32Såide
[1] *Ö°IveMd->°CCSˇÀOut.°VFøme.
u32Height
 >> 1) + 1);

381 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32Såide
[1] = 
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32Såide
[0];

382 
	gp°IveMd
->
	g°CCSˇÀOut
.
	g°VFøme
.
	gu32Såide
[2] = 
p°IveMd
->
°CCSˇÀOut
.
°VFøme
.
u32Såide
[0];

386 
	gp°IveMd
->
	g°CCI¡egtmp
.
	gu16Width
 = 
CCIMGWIDTH
;

387 
	gp°IveMd
->
	g°CCI¡egtmp
.
	gu16Height
 = 
CCIMGHEIGHT
 + 1;

388 
	gp°IveMd
->
	g°CCI¡egtmp
.
	gu16Såide
[0] = (
ˇlcSåide
(
p°IveMd
->
°CCI¡egtmp
.
u16Width
 + 4, 
IVE2_ALIGN
)) << 2;

389 
	gu32Size
 = 
p°IveMd
->
°CCI¡egtmp
.
u16Såide
[0] *Ö°IveMd->°CCI¡egtmp.
u16Height
;

390 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc
(&
p°IveMd
->
°CCI¡egtmp
.
u32PhyAddr
[0], (**)&p°IveMd->°CCI¡egtmp.
pu8VúAddr
[0], 
NULL
, 
HI_NULL
, 
u32Size
);

391 i‡(
	gs32Rë
 !
HI_SUCCESS
)

393 
CHECK_RET
("p°IveMd->°CCI¡eg faû\n", 
s32Rë
);

394 
	gFAIL
;

396 
mem£t
(
p°IveMd
->
°CCI¡egtmp
.
pu8VúAddr
[0], 0, (p°IveMd->°CCI¡egtmp.
u16Såide
[0]));

397 
	gi
 = 0; i < 
	gp°IveMd
->
	g°CCI¡egtmp
.
	gu16Height
; i++)

399 
mem£t
(
p°IveMd
->
°CCI¡egtmp
.
pu8VúAddr
[0] + 
i
 *Ö°IveMd->°CCI¡egtmp.
u16Såide
[0], 0, 16);

401 
mem˝y
(&
p°IveMd
->
°CCI¡eg
, &p°IveMd->
°CCI¡egtmp
, (
IVE_IMAGE_S
));

402 
	gp°IveMd
->
	g°CCI¡eg
.
	gu16Såide
[0] = 
p°IveMd
->
°CCI¡egtmp
.
u16Såide
[0] >> 2;

403 
	gp°IveMd
->
	g°CCI¡eg
.
	gu32PhyAddr
[0] = 
p°IveMd
->
°CCI¡egtmp
.
u32PhyAddr
[0] + (p°IveMd->°CCI¡egtmp.
u16Såide
[0] + 16);

404 
	gp°IveMd
->
	g°CCI¡eg
.
	gpu8VúAddr
[0] = 
p°IveMd
->
°CCI¡egtmp
.
pu8VúAddr
[0] + (p°IveMd->°CCI¡egtmp.
u16Såide
[0] + 16);

405 
	gp°IveMd
->
	g°CCI¡eg
.
	gu16Height
 = 
p°IveMd
->
°CCI¡egtmp
.
u16Height
 - 1;

406 
	gp°IveMd
->
	g°CCI¡eg
.
	gíTy≥
 = 
IVE_IMAGE_TYPE_U32C1
;

408 
	gp°IveMd
->
	g°CCCÆBuf
.
	gu16Width
 = (
CCIMGWIDTH
 << 4Ë+ (
CCIMGHEIGHT
 << 4);

409 
	gp°IveMd
->
	g°CCCÆBuf
.
	gu16Height
 = 1;

410 
	gp°IveMd
->
	g°CCCÆBuf
.
	gu16Såide
[0] = 
p°IveMd
->
°CCCÆBuf
.
u16Width
;

411 
	gp°IveMd
->
	g°CCCÆBuf
.
	gpu8VúAddr
[0] = (
HI_U8
*)
mÆloc
(
p°IveMd
->
°CCCÆBuf
.
u16Width
);

412 i‡(
	gp°IveMd
->
	g°CCCÆBuf
.
	gpu8VúAddr
[0] =
HI_NULL
)

414 
CHECK_RET
("p°IveMd->°CCI¡eg faû\n", 
s32Rë
);

415 
	gFAIL
;

421 
	gFAIL
:

422 i‡(
HI_SUCCESS
 !
s32Rë
)

424 
IVE_Dëe˘De°‹y
(
p°IveMd
);

426  
	gs32Rë
;

429 
HI_MPI_IVE_GëFøme
(
ViExtChn
, 
VIDEO_FRAME_INFO_S
* 
p°FømeInfo
, 
s32GëFømeMûliSec
)

431 
	gs32Rë
;

432 
VPSS_GRP
 
	gVpssGΩ
;

433 
VPSS_CHN
 
	gVpssChn
;

435 
	gVpssGΩ
 = 
°IveMd
.
s32VpssGΩ
;

436 
	gVpssChn
 = 
°IveMd
.
s32VpssChn
;

438 
	gs32Rë
 = 
HI_MPI_VPSS_GëChnFøme
–
VpssGΩ
, 
VpssChn
, 
p°FømeInfo
, 
s32GëFømeMûliSec
);

439 i‡(
	gs32Rë
 !
HI_SUCCESS
)

441 
CHECK_RET
("gë fømêÁûed\n", 
s32Rë
);

442  
	gs32Rë
;

445  
	gs32Rë
;

448 
HI_MPI_IVE_Rñó£Føme
(
ViExtChn
, 
VIDEO_FRAME_INFO_S
* 
p°FømeInfo
)

450 
	gs32Rë
;

451 
VPSS_GRP
 
	gVpssGΩ
;

452 
VPSS_CHN
 
	gVpssChn
;

453 
	gVpssGΩ
 = 
°IveMd
.
s32VpssGΩ
;

454 
	gVpssChn
 = 
°IveMd
.
s32VpssChn
;

457 
	gs32Rë
 = 
HI_MPI_VPSS_Rñó£ChnFøme
–
VpssGΩ
, 
VpssChn
, 
p°FømeInfo
);

458 i‡(
	gs32Rë
 !
HI_SUCCESS
)

460 
CHECK_RET
("ªÀa£ fømêÁûed\n", 
s32Rë
);

461  
	gs32Rë
;

464  
	gs32Rë
;

467 
EncMadiCÆ
(
IVE_IMAGE_S
* 
p°D°Image
, IVE_IMAGE_S* 
p°SrcImage
, 
off£txy
)

469 
	gs32EncOff£t
;

470 
HI_U32
 
	gu32VÆAL
, 
	gu32VÆBL
, 
	gu32VÆCL
, 
	gu32VÆDL
;

471 
HI_U32
 
	gu32VÆAH
, 
	gu32VÆBH
, 
	gu32VÆCH
, 
	gu32VÆDH
;

472 
HI_U8
* 
	gpu8Img
;

473 
HI_U32
 
	gmón
, 
	gsqsum
, *
	gpu32Src
;

474 
HI_U64
 
	gu64VÆA
, 
	gu64VÆB
, 
	gu64VÆC
, 
	gu64VÆD
;

475 
	gi
, 
	gj
;

476 
	gs32EncOff£t
 = (
p°SrcImage
->
u16Width
 *Ö°SrcImage->
u16Height
 >> 8Ë* 
off£txy
;

477 
	gpu8Img
 = 
p°D°Image
->
pu8VúAddr
[0] + 
s32EncOff£t
;

478 
	gpu32Src
 = (
HI_U32
*)
p°SrcImage
->
pu8VúAddr
[0];

479 
	gi
 = 0; i < (
	gp°SrcImage
->
	gu16Height
 >> 4); i++)

481 
	gu32VÆAL
 = 
pu32Src
[-2];

482 
	gu32VÆAH
 = 
pu32Src
[-1];

483 
	gu32VÆCL
 = 
pu32Src
[15 * (
p°SrcImage
->
u16Såide
[0] * 2) - 2];

484 
	gu32VÆCH
 = 
pu32Src
[15 * (
p°SrcImage
->
u16Såide
[0] * 2) - 1];

485 
	gj
 = 0; j < (
	gp°SrcImage
->
	gu16Width
 >> 4); j++)

487 
	gu32VÆBL
 = 
pu32Src
[(
j
 * 16 + 15Ë* 2 - (
p°SrcImage
->
u16Såide
[0] * 2)];

488 
	gu32VÆBH
 = 
pu32Src
[(
j
 * 16 + 15Ë* 2 + 1 - (
p°SrcImage
->
u16Såide
[0] * 2)];

489 
	gu32VÆDL
 = 
pu32Src
[
j
 * 32 + 30 * (
p°SrcImage
->
u16Såide
[0]) + 30];

490 
	gu32VÆDH
 = 
pu32Src
[
j
 * 32 + 30 * (
p°SrcImage
->
u16Såide
[0]) + 30 + 1];

491 
	gmón
 = ((
u32VÆAL
 & 0xfffffffË+ (
u32VÆDL
 & 0xfffffffË- (
u32VÆBL
 & 0xfffffffË- (
u32VÆCL
 & 0xfffffff));

492 
	gu64VÆA
 = (
u32VÆAH
 << 4);

493 
	gu64VÆA
 = (
u32VÆAL
 >> 28Ë| 
u64VÆA
;

494 
	gu64VÆB
 = (
u32VÆBH
 << 4);

495 
	gu64VÆB
 = (
u32VÆBL
 >> 28Ë| 
u64VÆB
;

496 
	gu64VÆC
 = (
u32VÆCH
 << 4);

497 
	gu64VÆC
 = (
u32VÆCL
 >> 28Ë| 
u64VÆC
;

498 
	gu64VÆD
 = (
u32VÆDH
 << 4);

499 
	gu64VÆD
 = (
u32VÆDL
 >> 28Ë| 
u64VÆD
;

500 
	gsqsum
 = (
u64VÆD
 + 
u64VÆA
 - 
u64VÆB
 - 
u64VÆC
);

501 *
	gpu8Img
++ = (
HI_U8
)(
MAX2
((
sqπ
((
HI_S32
)(
sqsum
 - (
món
 * mean >> 8) + 64) >> 8)), 0));

502 
	gu32VÆAL
 = 
u32VÆBL
;

503 
	gu32VÆAH
 = 
u32VÆBH
;

504 
	gu32VÆCL
 = 
u32VÆDL
;

505 
	gu32VÆCH
 = 
u32VÆDH
;

508 
	gpu32Src
 +((
p°SrcImage
->
u16Såide
[0]) << 5);

513 
HI_S32
 
EncSëMbQp
(
EncChn
, * 
ps32Hi°
, 
width
, 
height
, 
u32Hi°Size
)

515 
	gi
, 
	gj
;

516 
	gf32Á˘‹
;

517 
HI_U16
 
	gu16Hi°
[256];

518 
HI_U32
 
	gpu32IThªsh
[12];

519 
HI_U32
 
	gpu32PThªsh
[12];

520 
VENC_RC_PARAM_S
 
	g°RcP¨am
;

521 
	gs32Rë
;

522 
	gj
 = 0;

523 
	gf32Á˘‹
 = 1.0 / 
u32Hi°Size
;

524 
	gu16Hi°
[0] = 
ps32Hi°
[0];

525 
	gi
 = 1; i < 256; i++)

527 
	gu16Hi°
[
i
] = 
u16Hi°
[ò- 1] + 
ps32Hi°
[i];

528 
	gu16Hi°
[
i
 - 1] = (
HI_U16
)(
u16Hi°
[ò- 1] * 
f32Á˘‹
 * 100);

530 
	gu16Hi°
[255] = 100;

531 
	gi
 = 0; i < 12; i++)

533 
	gpu32IThªsh
[
i
] = 255;

534 
	gpu32PThªsh
[
i
] = 255;

536 
	gi
 = 0;

537 
	gj
 = 0; j < 12; j++)

539 (
	gu16Hi°
[
i
] < 
	gu16IThªshTabÀ
[
j
]Ë&& (
	gi
 < 254))

541 
	gi
++;

543 
	gpu32IThªsh
[
j
] = 
MIN2
(
i
 + 1, 255);

545 
	gi
 = 0;

546 
	gj
 = 0; j < 12; j++)

548 (
	gu16Hi°
[
i
] < 
	gu16PThªshTabÀ
[
j
]Ë&& (
	gi
 < 254))

550 
	gi
++;

552 
	gpu32PThªsh
[
j
] = 
MIN2
(
i
 + 1, 255);

555 
	gs32Rë
 = 
HI_MPI_VENC_GëRcP¨am
(
EncChn
, &
°RcP¨am
);

556 i‡(
	gHI_SUCCESS
 !
s32Rë
)

558 
CHECK_RET
("HI_MPI_VENC_GëRcP¨am faûed\n", 
s32Rë
);

560 
mem˝y
(
°RcP¨am
.
u32ThrdI
, 
pu32IThªsh
, 12 * 4);

561 
mem˝y
(
°RcP¨am
.
u32ThrdP
, 
pu32PThªsh
, 12 * 4);

562 
	gs32Rë
 = 
HI_MPI_VENC_SëRcP¨am
(
EncChn
, &
°RcP¨am
);

563 i‡(
	gHI_SUCCESS
 !
s32Rë
)

565 
CHECK_RET
("HI_MPI_VENC_SëRcP¨am faûed\n", 
s32Rë
);

567  
	gs32Rë
;

570 
	#HI3516A_RC


	)

571 
HI_S32
 
EncSëMbQpSec
(
EncChn
, * 
ps32Hi°
, 
width
, 
height
, 
u32Hi°Size
)

573 
	gi
, 
	gSèticMadi
[25] = {0}, 
	g≥r˚¡madi
[25], 
	gtŸÆmadi
[25], 
	gtŸÆ≥r˚¡madi
[25], 
	gège8
 = 25, 
	gège2
 = 2, 
	gège5
 = 7, 
	gdp
 = 0;

574 
	gmbnum
, 
	gœ°mbnum
;

575 
HI_U32
 
	gpu32IThªsh
[12];

576 
HI_U32
 
	gpu32PThªsh
[12];

577 
VENC_RC_PARAM_S
 
	g°RcP¨am
;

578 
	gs32Rë
;

580 
	gmbnum
 = 
u32Hi°Size
;

581 
	gœ°mbnum
 = 0;

582 
	gi
 = 0; i < 24; i++)

584 
	gSèticMadi
[
i
] = 
ps32Hi°
[2 * i] +Ös32Hist[2 * i + 1];

585 
	gœ°mbnum
 +
SèticMadi
[
i
];

587 
	gSèticMadi
[24] = 
mbnum
 - 
œ°mbnum
;

589 
	gi
 = 0; i < 25; i++)

591 
	g≥r˚¡madi
[
i
] = 
SèticMadi
[i] * 100 / 
mbnum
;

593 
	gtŸÆmadi
[0] = 
SèticMadi
[0];

594 
	gtŸÆ≥r˚¡madi
[0] = 
≥r˚¡madi
[0];

595 
	gi
 = 1; i < 25; i++)

597 
	gtŸÆmadi
[
i
] = 
tŸÆmadi
[ò- 1] + 
SèticMadi
[i];

598 
	gtŸÆ≥r˚¡madi
[
i
] = 
tŸÆmadi
[i] * 100 / 
mbnum
;

600 
	gi
 = 1; i < 25; i++)

602 i‡(
	gtŸÆ≥r˚¡madi
[
i
] >80 && 
tŸÆ≥r˚¡madi
[i - 1] < 80)

604 
ège8
 = 
i
 * 2;

607 
	gi
 = 1; i < 25; i++)

609 i‡(
	gtŸÆ≥r˚¡madi
[
i
] >50 && 
tŸÆ≥r˚¡madi
[i - 1] < 50)

611 
ège5
 = 
i
 * 2;

614 
	gi
 = 1; i < 25; i++)

616 i‡(
	gtŸÆ≥r˚¡madi
[
i
] >20 && 
tŸÆ≥r˚¡madi
[i - 1] < 20)

618 
ège2
 = 
i
 * 2 + 1;

621 #ifde‡
HI3516A_RC


623 i‡(
	gtŸÆ≥r˚¡madi
[0] < 1 &&Åotalpercentmadi[1] < 5)

625 
	gpu32IThªsh
[0] = 
ège2
;

626 
	gpu32IThªsh
[1] = 
ège2
;

627 
	gpu32IThªsh
[2] = 
ège2
;

628 
	gpu32IThªsh
[3] = 
ège2
;

632 
	gpu32IThªsh
[0] = 
ège2
;

633 
	gpu32IThªsh
[1] = 
ège2
;

634 
	gpu32IThªsh
[2] = 
ège2
 + 2;

635 
	gpu32IThªsh
[3] = 
ège2
 + 2;

641 i‡(
	gtŸÆ≥r˚¡madi
[0] < 1 &&Åotalpercentmadi[1] < 5)

643 
	gpu32IThªsh
[0] = 0;

644 
	gpu32IThªsh
[1] = 0;

645 
	gpu32IThªsh
[2] = 2;

646 
	gpu32IThªsh
[3] = 2;

650 i‡(
	gtŸÆ≥r˚¡madi
[1] < 10 && 
	g≥r˚¡madi
[0] == 0)

652 
pu32IThªsh
[0] = 0;

653 
	gpu32IThªsh
[1] = 0;

654 
	gpu32IThªsh
[2] = 3;

655 
	gpu32IThªsh
[3] = 3;

657 i‡(
	gtŸÆ≥r˚¡madi
[1] > 30 &&Åotalpercentmadi[2] > 50)

659 
	gpu32IThªsh
[0] = 2;

660 
	gpu32IThªsh
[1] = 2;

661 
	gpu32IThªsh
[2] = 4;

662 
	gpu32IThªsh
[3] = 4;

666 
	gpu32IThªsh
[0] = 3;

667 
	gpu32IThªsh
[1] = 3;

668 
	gpu32IThªsh
[2] = 5;

669 
	gpu32IThªsh
[3] = 5;

675 
	gège8
 = 
MAX2
(
ège8
, 15);

676 
	gège5
 = 
MAX2
(
ège5
, 7);

677 
	gdp
 = (
ège8
 - 
ège5
) / 3;

678 
	gpu32PThªsh
[0] = 
pu32IThªsh
[0];

679 
	gpu32PThªsh
[1] = 
pu32IThªsh
[1];

680 
	gpu32PThªsh
[2] = 
pu32IThªsh
[2];

681 
	gpu32PThªsh
[3] = 
pu32IThªsh
[3];

682  
	gi
 = 0; i < 5; i++)

684 
	gpu32PThªsh
[
i
] = 
ège5
;

686  
	gi
 = 5; i < 9; i++)

688 
	gpu32PThªsh
[
i
] = 
pu32PThªsh
[4] + 
dp
;

690  
	gi
 = 9; i < 12; i++)

692 
	gpu32PThªsh
[
i
] = 
pu32PThªsh
[8] + 
dp
 + 1;

694 
	gdp
 = (
ège8
 - 
pu32IThªsh
[3] + 2) / 4;

695  
	gi
 = 4; i < 11; i++)

697 
	gpu32IThªsh
[
i
] = 
pu32IThªsh
[ò- 1] + 
dp
;

698 
	gpu32IThªsh
[
i
 + 1] = 
pu32IThªsh
[i];

699 
	gi
++;

702  
	gi
 = 0; i < 12; i++)

704 
¥ötf
("%d\t", 
pu32IThªsh
[
i
]);

706 
¥ötf
("\n");

708 
	gs32Rë
 = 
HI_MPI_VENC_GëRcP¨am
(
EncChn
, &
°RcP¨am
);

709 i‡(
	gHI_SUCCESS
 !
s32Rë
)

711 
CHECK_RET
("HI_MPI_VENC_GëRcP¨am faûed\n", 
s32Rë
);

713 
mem˝y
(
°RcP¨am
.
u32ThrdI
, 
pu32IThªsh
, 12 * 4);

714 
mem˝y
(
°RcP¨am
.
u32ThrdP
, 
pu32PThªsh
, 12 * 4);

715 
	gs32Rë
 = 
HI_MPI_VENC_SëRcP¨am
(
EncChn
, &
°RcP¨am
);

716 i‡(
	gHI_SUCCESS
 !
s32Rë
)

718 
CHECK_RET
("HI_MPI_VENC_SëRcP¨am faûed\n", 
s32Rë
);

720  
	gs32Rë
;

724 
HI_VOID
* 
ImageA«lyProc
(HI_VOID* 
pArgs
)

726 
IVE_MD
* 
	gp°IveMd
;

727 
HI_S32
 
	gs32Rë
;

729 
IVE_IMAGE_S
 
	g°SrcImage
;

730 
IVE_HANDLE
 
	gIveH™dÀ
;

731 
HI_U32
 
	gu32Off£t
;

732 
IVE_INTEG_CTRL_S
 
	geIveI¡egCål
;

734 
HI_BOOL
 
	gbFöish
, 
	gbBlock
;

735 
IVE_MEM_INFO_S
 
	g°Hi°Mem
;

736 
	gi
, 
	gj
;

737 
VIDEO_FRAME_INFO_S
* 
	gp°FømeInfo
;

738 
¥˘l
(
PR_SET_NAME
, ()"ImageAnaly", 0, 0, 0);

740 
	gp°IveMd
 = (
IVE_MD
*)
pArgs
;

741 
	gbBlock
 = 
HI_TRUE
;

742 
	gp°FømeInfo
 = (
VIDEO_FRAME_INFO_S
*)
mÆloc
((VIDEO_FRAME_INFO_S) * 2);

743 i‡(
	gp°FømeInfo
 =
NULL
)

745 
¥ötf
("can'tálloc frame info\n");

746  
	gNULL
;

748 
	geIveI¡egCål
.
	gíOutCål
 = 
IVE_INTEG_OUT_CTRL_COMBINE
;

749 
	g°SrcImage
.
	gíTy≥
 = 
IVE_IMAGE_TYPE_U8C1
;

751 
	g°SrcImage
.
	gu16Height
 = (
p°IveMd
->
u16OriHeight
 >> 3) & (~0xf);

752 
	g°SrcImage
.
	gu16Width
 = (
p°IveMd
->
u16OriWidth
 >> 3) & (~0xf);

756 
	gp°IveMd
->
	gbSt›Sig«l
 =
HI_FALSE
)

758 
s32Rë
 = 
HI_MPI_IVE_GëFøme
(0, 
p°FømeInfo
, 200);

759 i‡(
	gHI_SUCCESS
 !
s32Rë
)

761 
u¶ìp
(200000);

764 
	gi
 = 0; i < 8; i++)

766 
	gj
 = 0; j < 8; j++)

768 
	gu32Off£t
 = (
j
 * 
°SrcImage
.
u16Width
Ë+ (
i
 * (°SrcImage.
u16Height
Ë* 
p°FømeInfo
->
°VFøme
.
u32Såide
[0]);

769 
	g°SrcImage
.
	gpu8VúAddr
[0] = ((
HI_U8
*)
p°FømeInfo
->
°VFøme
.
pVúAddr
[0] + 
u32Off£t
);

770 
	g°SrcImage
.
	gu32PhyAddr
[0] = 
p°FømeInfo
->
°VFøme
.
u32PhyAddr
[0] + 
u32Off£t
;

771 
	g°SrcImage
.
	gu16Såide
[0] = 
p°FømeInfo
->
°VFøme
.
u32Såide
[0];

773 
	gs32Rë
 = 
HI_MPI_IVE_I¡eg
(&
IveH™dÀ
, &
°SrcImage
, &
p°IveMd
->
°Img4
, &
eIveI¡egCål
, 
HI_FALSE
);

774 i‡(
	gHI_SUCCESS
 !
s32Rë
)

776 
CHECK_RET
("HI_MPI_IVE_I¡eg faûed\n", 
s32Rë
);

777 (
	gHI_VOID
)
HI_MPI_IVE_Rñó£Føme
(0, 
p°FømeInfo
);

778 
	gANALYFAIL
;

780 
	gs32Rë
 = 
HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

781 i‡(
	gHI_SUCCESS
 !
s32Rë
 || 
bFöish
 !
HI_TRUE
)

783 
CHECK_RET
("HI_MPI_IVE_Quîy faûed\n", 
s32Rë
);

784 (
	gHI_VOID
)
HI_MPI_IVE_Rñó£Føme
(0, 
p°FømeInfo
);

785 
	gANALYFAIL
;

787 
EncMadiCÆ
(&
p°IveMd
->
°Img5
, &p°IveMd->
°Img4
, 
i
 * 8 + 
j
);

788 
	gs32Rë
 = 
HI_MPI_SYS_MmzFlushCache
(
p°IveMd
->
°Img4
.
u32PhyAddr
[0],Ö°IveMd->°Img4.
pu8VúAddr
[0],

789 (
p°IveMd
->
°Img4
.
u16Såide
[0] *Ö°IveMd->°Img4.
u16Height
 << 3));

790 
CHECK_RET
("HI_MPI_SYS_MmzFlushCachêÁûed\n", 
s32Rë
);

794 
u¶ìp
(10000);

799 
	g°Hi°Mem
.
	gpu8VúAddr
 = 
p°IveMd
->
°Hi°Info
.
pu8VúAddr
[0];

800 
	g°Hi°Mem
.
	gu32PhyAddr
 = 
p°IveMd
->
°Hi°Info
.
u32PhyAddr
[0];

801 
	g°Hi°Mem
.
	gu32Size
 = 4 * 1024;

803 
	gs32Rë
 = 
HI_MPI_SYS_MmzFlushCache
(
p°IveMd
->
°Img5
.
u32PhyAddr
[0],Ö°IveMd->°Img5.
pu8VúAddr
[0],

804 
p°IveMd
->
°Img5
.
u16Såide
[0] *Ö°IveMd->°Img5.
u16Height
);

805 
CHECK_RET
("HI_MPI_SYS_MmzFlushCachêÁûed\n", 
s32Rë
);

808 
	gs32Rë
 = 
HI_MPI_IVE_Hi°
(&
IveH™dÀ
, &
p°IveMd
->
°Img1
, &
°Hi°Mem
, 
HI_FALSE
);

810 i‡(
	gHI_SUCCESS
 !
s32Rë
)

812 
CHECK_RET
("HI_MPI_IVE_Hi° faûed\n", 
s32Rë
);

813 (
	gHI_VOID
)
HI_MPI_IVE_Rñó£Føme
(0, 
p°FømeInfo
);

814 
	gANALYFAIL
;

816 
	gs32Rë
 = 
HI_MPI_IVE_Quîy
(
IveH™dÀ
, &
bFöish
, 
bBlock
);

817 i‡(
	gHI_SUCCESS
 !
s32Rë
)

819 
CHECK_RET
("HI_MPI_IVE_Quîy faûed\n", 
s32Rë
);

820 (
	gHI_VOID
)
HI_MPI_IVE_Rñó£Føme
(0, 
p°FømeInfo
);

821 
	gANALYFAIL
;

823 
	gs32Rë
 = 
HI_MPI_IVE_Rñó£Føme
(0, 
p°FømeInfo
);

824 i‡(
	gHI_SUCCESS
 !
s32Rë
)

826 
CHECK_RET
("HI_MPI_IVE_Rñó£FømêÁûed\n", 
s32Rë
);

827 
	gANALYFAIL
;

829 i‡(
	gp°IveMd
->
	geRCMode
 =
E_MBINTEG
)

831 
s32Rë
 = 
EncSëMbQp
(0, (*)(
p°IveMd
->
°Hi°Info
.
pu8VúAddr
[0]),Ö°IveMd->
u16OriWidth
,Ö°IveMd->
u16OriHeight
,Ö°IveMd->
°Img5
.
u16Width
 *Ö°IveMd->°Img5.
u16Height
);

835 
	gs32Rë
 = 
EncSëMbQpSec
(0, (*)(
p°IveMd
->
°Hi°Info
.
pu8VúAddr
[0]),Ö°IveMd->
u16OriWidth
,Ö°IveMd->
u16OriHeight
,Ö°IveMd->
°Img5
.
u16Width
 *Ö°IveMd->°Img5.
u16Height
);

837 i‡(
	gHI_SUCCESS
 !
s32Rë
)

839 
CHECK_RET
("EncSëMbQ∞Áûed\n", 
s32Rë
);

840 (
	gHI_VOID
)
HI_MPI_IVE_Rñó£Føme
(0, 
p°FømeInfo
);

841 
	gANALYFAIL
;

843 
u¶ìp
(2000000);

845 
	gANALYFAIL
:

846 
‰ì
(
p°FømeInfo
);

848  
	gHI_NULL
;

852 
HI_S32
 
CommS˚√autoIVESèπ
(HI_S32 
s32VpssGΩ
, HI_S32 
s32VpssChn
)

854 
HI_S32
 
	gs32Rë
 = 0;

855 
VPSS_GRP
 
	gVpssGΩ
 = 
s32VpssGΩ
;

856 
VPSS_CHN
 
	gVpssChn
 = 
s32VpssChn
;

857 
VPSS_CHN_MODE_S
 
	g°VpssChnMode
;

858 
	gViExtChn
 = 
VIU_EXT_CHN_START
;

860 
mem£t
(&
°IveMd
, 0, (
IVE_MD
));

861 
	g°IveMd
.
	gs32VpssGΩ
 = 
s32VpssGΩ
;

862 
	g°IveMd
.
	gs32VpssChn
 = 
s32VpssChn
;

863 
	gs32Rë
 = 
HI_MPI_VPSS_GëChnMode
(
VpssGΩ
, 
VpssChn
, &
°VpssChnMode
);

864 i‡(
	gHI_SUCCESS
 !
s32Rë
)

866 
¥ötf
("HI_MPI_VPSS_GetChnMode failed\n");

867  
	gHI_FAILURE
;

871 
	g°IveMd
.
	gu16OriWidth
 = 
°VpssChnMode
.
u32Width
;

872 
	g°IveMd
.
	gu16OriHeight
 = 
°VpssChnMode
.
u32Height
;

874 
	g°IveMd
.
	gbPau£
 = 
HI_TRUE
;

875 
	g°IveMd
.
	gbSt›Sig«l
 = 
HI_FALSE
;

877 
IVE_Dëe˘Inô
(&
°IveMd
);

879 
	g°IveMd
.
	gViExtChn
 = 
ViExtChn
;

881 
	gs32Rë
 = 
±hªad_¸óã
(&
°IveMd
.
hIveMBThªad
, 0, 
ImageA«lyProc
, (
HI_VOID
*)&stIveMd);

882 i‡(
	gHI_SUCCESS
 !
s32Rë
)

884 
¥ötf
("create ImageAnalyProcÅhread failed\n");

885  
	gHI_FAILURE
;

888  
	gHI_SUCCESS
;

891 
HI_S32
 
CommS˚√autoIVESt›
()

893 
	g°IveMd
.
	gbSt›Sig«l
 = 
HI_TRUE
;

895 ()
±hªad_joö
(
°IveMd
.
hIveMBThªad
, 
NULL
);

896 
IVE_Dëe˘De°‹y
(&
°IveMd
);

898  
	gHI_SUCCESS
;

901 
HI_S32
 
CommS˚√autoSëRegi°î
(HI_S32 
s32I•Dev
, 
HI_U32
 
u32Addr
, HI_U32 
u32VauÀ
)

903 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

904 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

906 
	gs32Rë
 = 
HI_MPI_ISP_SëRegi°î
(
I•Dev
, 
u32Addr
, 
u32VauÀ
);

907 i‡(
	gHI_SUCCESS
 !
s32Rë
)

909 
¥ötf
("HI_MPI_ISP_SetRegister failed\n");

910  
	gHI_FAILURE
;

913  
	gHI_SUCCESS
;

916 
HI_S32
 
CommS˚√autoGëAcmAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_ACM_ATTR_S
* 
p°Ad±AcmAâr
)

918 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

919 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

920 
ISP_ACM_ATTR_S
 
	g°AcmAâr
;

922 
	gs32Rë
 = 
HI_MPI_ISP_GëAcmAâr
(
I•Dev
, &
°AcmAâr
);

923 i‡(
	gHI_SUCCESS
 !
s32Rë
)

925 
¥ötf
("HI_MPI_ISP_GetAcmAttr failed\n");

926  
	gHI_FAILURE
;

929 
	gp°Ad±AcmAâr
->
	gbE«bÀ
 = 
°AcmAâr
.
bE«bÀ
;

930 
	gp°Ad±AcmAâr
->
	gu32Cb¸Thr
 = 
°AcmAâr
.
u32Cb¸Thr
;

931 
	gp°Ad±AcmAâr
->
	gu32GaöHue
 = 
°AcmAâr
.
u32GaöHue
;

932 
	gp°Ad±AcmAâr
->
	gu32GaöLuma
 = 
°AcmAâr
.
u32GaöLuma
;

933 
	gp°Ad±AcmAâr
->
	gu32GaöS©
 = 
°AcmAâr
.
u32GaöS©
;

935  
	gHI_SUCCESS
;

938 
HI_S32
 
CommS˚√autoSëAcmAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_ACM_ATTR_S
* 
p°Ad±AcmAâr
)

940 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

941 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

942 
ISP_ACM_ATTR_S
 
	g°AcmAâr
;

944 
	gs32Rë
 = 
HI_MPI_ISP_GëAcmAâr
(
I•Dev
, &
°AcmAâr
);

945 i‡(
	gHI_SUCCESS
 !
s32Rë
)

947 
¥ötf
("HI_MPI_ISP_GetAcmAttr failed\n");

948  
	gHI_FAILURE
;

952 
	g°AcmAâr
.
	gbE«bÀ
 = 
p°Ad±AcmAâr
->
bE«bÀ
;

953 
	g°AcmAâr
.
	gu32Cb¸Thr
 = 
p°Ad±AcmAâr
->
u32Cb¸Thr
;

954 
	g°AcmAâr
.
	gu32GaöHue
 = 
p°Ad±AcmAâr
->
u32GaöHue
;

955 
	g°AcmAâr
.
	gu32GaöLuma
 = 
p°Ad±AcmAâr
->
u32GaöLuma
;

956 
	g°AcmAâr
.
	gu32GaöS©
 = 
p°Ad±AcmAâr
->
u32GaöS©
;

958 
	gs32Rë
 = 
HI_MPI_ISP_SëAcmAâr
(
I•Dev
, &
°AcmAâr
);

959 i‡(
	gHI_SUCCESS
 !
s32Rë
)

961 
¥ötf
("HI_MPI_ISP_SetAcmAttr failed\n");

962  
	gHI_FAILURE
;

965  
	gHI_SUCCESS
;

968 
HI_S32
 
CommS˚√autoGëCcmAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_CCM_ATTR_S
* 
p°Ad±CcmAâr
)

970 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

971 
HI_S32
 
	gi
;

972 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

973 
ISP_COLORMATRIX_ATTR_S
 
	g°CcmAâr
;

975 
	gs32Rë
 = 
HI_MPI_ISP_GëCCMAâr
(
I•Dev
, &
°CcmAâr
);

976 i‡(
	gHI_SUCCESS
 !
s32Rë
)

978 
¥ötf
("HI_MPI_ISP_GetCCMAttr failed\n");

979  
	gHI_FAILURE
;

982 
	gp°Ad±CcmAâr
->
	gu16HighCﬁ‹Temp
 = 
°CcmAâr
.
°Auto
.
u16HighCﬁ‹Temp
;

983 
	gp°Ad±CcmAâr
->
	gu16MidCﬁ‹Temp
 = 
°CcmAâr
.
°Auto
.
u16MidCﬁ‹Temp
;

984 
	gp°Ad±CcmAâr
->
	gu16LowCﬁ‹Temp
 = 
°CcmAâr
.
°Auto
.
u16LowCﬁ‹Temp
;

986 
	gi
 = 0; i < 9; i++)

989 
	gp°Ad±CcmAâr
->
	gau16HighCCM
[
i
] = 
°CcmAâr
.
°Auto
.
au16HighCCM
[i];

990 
	gp°Ad±CcmAâr
->
	gau16MidCCM
[
i
] = 
°CcmAâr
.
°Auto
.
au16MidCCM
[i];

991 
	gp°Ad±CcmAâr
->
	gau16LowCCM
[
i
] = 
°CcmAâr
.
°Auto
.
au16LowCCM
[i];

994  
	gHI_SUCCESS
;

997 
HI_S32
 
CommS˚√autoSëCcmAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_CCM_ATTR_S
* 
p°Ad±CcmAâr
)

999 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1000 
HI_S32
 
	gi
;

1001 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1002 
ISP_COLORMATRIX_ATTR_S
 
	g°CcmAâr
;

1004 
	gs32Rë
 = 
HI_MPI_ISP_GëCCMAâr
(
I•Dev
, &
°CcmAâr
);

1005 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1007 
¥ötf
("HI_MPI_ISP_GetCCMAttr failed\n");

1008  
	gHI_FAILURE
;

1011 
	g°CcmAâr
.
	g°Auto
.
	gu16HighCﬁ‹Temp
 = 
p°Ad±CcmAâr
->
u16HighCﬁ‹Temp
;

1012 
	g°CcmAâr
.
	g°Auto
.
	gu16MidCﬁ‹Temp
 = 
p°Ad±CcmAâr
->
u16MidCﬁ‹Temp
;

1013 
	g°CcmAâr
.
	g°Auto
.
	gu16LowCﬁ‹Temp
 = 
p°Ad±CcmAâr
->
u16LowCﬁ‹Temp
;

1015 
	gi
 = 0; i < 9; i++)

1018 
	g°CcmAâr
.
	g°Auto
.
	gau16HighCCM
[
i
] = 
p°Ad±CcmAâr
->
au16HighCCM
[i];

1019 
	g°CcmAâr
.
	g°Auto
.
	gau16MidCCM
[
i
] = 
p°Ad±CcmAâr
->
au16MidCCM
[i];

1020 
	g°CcmAâr
.
	g°Auto
.
	gau16LowCCM
[
i
] = 
p°Ad±CcmAâr
->
au16LowCCM
[i];

1023 
	g°CcmAâr
.
	gíOpTy≥
 = 
OP_TYPE_AUTO
;

1024 
	gs32Rë
 = 
HI_MPI_ISP_SëCCMAâr
(
I•Dev
, &
°CcmAâr
);

1025 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1027 
¥ötf
("HI_MPI_ISP_GetCCMAttr failed\n");

1028  
	gHI_FAILURE
;

1031  
	gHI_SUCCESS
;

1034 
HI_S32
 
CommS˚√autoGëDemoßic
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DEMOSAIC_S
* 
p°Ad±Demoßic
)

1036 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1037 
HI_S32
 
	gi
;

1038 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1039 
ISP_DEMOSAIC_ATTR_S
 
	g°DemoßicAâr
;

1041 
	gs32Rë
 = 
HI_MPI_ISP_GëDemoßicAâr
(
I•Dev
, &
°DemoßicAâr
);

1042 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1044 
¥ötf
("HI_MPI_ISP_GetDemosaicAttr failed\n");

1045  
	gHI_FAILURE
;

1048 
	gp°Ad±Demoßic
->
	gu8AaSl›e
 = 
°DemoßicAâr
.
u8AaSl›e
;

1049 
	gp°Ad±Demoßic
->
	gu8UuSl›e
 = 
°DemoßicAâr
.
u8UuSl›e
;

1050 
	gp°Ad±Demoßic
->
	gu8VaSl›e
 = 
°DemoßicAâr
.
u8VaSl›e
;

1051 
	gp°Ad±Demoßic
->
	gu8VhSl›e
 = 
°DemoßicAâr
.
u8VhSl›e
;

1052 
	gi
 = 0; i < 16; i++)

1054 
	gp°Ad±Demoßic
->
	gau8LumThªsh
[
i
] = 
°DemoßicAâr
.
au8LumThªsh
[i];

1057  
	gHI_SUCCESS
;

1060 
HI_S32
 
CommS˚√autoSëDemoßic
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DEMOSAIC_S
* 
p°Ad±Demoßic
)

1062 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1063 
HI_S32
 
	gi
;

1064 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1065 
ISP_DEMOSAIC_ATTR_S
 
	g°DemoßicAâr
;

1067 
	gs32Rë
 = 
HI_MPI_ISP_GëDemoßicAâr
(
I•Dev
, &
°DemoßicAâr
);

1068 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1070 
¥ötf
("HI_MPI_ISP_GetDemosaicAttr failed\n");

1071  
	gHI_FAILURE
;

1074 
	g°DemoßicAâr
.
	gu8AaSl›e
 = 
p°Ad±Demoßic
->
u8AaSl›e
;

1075 
	g°DemoßicAâr
.
	gu8UuSl›e
 = 
p°Ad±Demoßic
->
u8UuSl›e
;

1076 
	g°DemoßicAâr
.
	gu8VaSl›e
 = 
p°Ad±Demoßic
->
u8VaSl›e
;

1077 
	g°DemoßicAâr
.
	gu8VhSl›e
 = 
p°Ad±Demoßic
->
u8VhSl›e
;

1078 
	gi
 = 0; i < 16; i++)

1080 
	g°DemoßicAâr
.
	gau8LumThªsh
[
i
] = 
p°Ad±Demoßic
->
au8LumThªsh
[i];

1082 
	gs32Rë
 = 
HI_MPI_ISP_SëDemoßicAâr
(
I•Dev
, &
°DemoßicAâr
);

1083 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1085 
¥ötf
("HI_MPI_ISP_SetDemosaicAttr failed\n");

1086  
	gHI_FAILURE
;

1089  
	gHI_SUCCESS
;

1092 
HI_S32
 
CommS˚√autoGëSh¨≥n
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_SHARPEN_S
* 
p°Ad±Sh¨≥n
)

1094 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1095 
HI_S32
 
	gi
;

1096 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1097 
ISP_SHARPEN_ATTR_S
 
	g°Sh¨≥nAâr
;

1099 
	gs32Rë
 = 
HI_MPI_ISP_GëSh¨≥nAâr
(
I•Dev
, &
°Sh¨≥nAâr
);

1100 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1102 
¥ötf
("HI_MPI_ISP_GetSharpenAttr failed\n");

1103  
	gHI_FAILURE
;

1106 
	gi
 = 0; i < 16; i++)

1108 
	gp°Ad±Sh¨≥n
->
	gau8Sh¨≥nD
[
i
] = 
°Sh¨≥nAâr
.
°Auto
.
au8Sh¨≥nD
[i];

1109 
	gp°Ad±Sh¨≥n
->
	gau8Sh¨≥nRGB
[
i
] = 
°Sh¨≥nAâr
.
°Auto
.
au8Sh¨≥nRGB
[i];

1110 
	gp°Ad±Sh¨≥n
->
	gau8Sh¨≥nUd
[
i
] = 
°Sh¨≥nAâr
.
°Auto
.
au8Sh¨≥nUd
[i];

1113  
	gHI_SUCCESS
;

1116 
HI_S32
 
CommS˚√autoSëSh¨≥n
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_SHARPEN_S
* 
p°Ad±Sh¨≥n
)

1118 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1119 
HI_S32
 
	gi
;

1120 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1121 
ISP_SHARPEN_ATTR_S
 
	g°Sh¨≥nAâr
;

1123 
	gs32Rë
 = 
HI_MPI_ISP_GëSh¨≥nAâr
(
I•Dev
, &
°Sh¨≥nAâr
);

1124 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1126 
¥ötf
("HI_MPI_ISP_GetSharpenAttr failed\n");

1127  
	gHI_FAILURE
;

1130 
	gi
 = 0; i < 16; i++)

1132 
	g°Sh¨≥nAâr
.
	g°Auto
.
	gau8Sh¨≥nD
[
i
] = 
p°Ad±Sh¨≥n
->
au8Sh¨≥nD
[i];

1133 
	g°Sh¨≥nAâr
.
	g°Auto
.
	gau8Sh¨≥nRGB
[
i
] = 
p°Ad±Sh¨≥n
->
au8Sh¨≥nRGB
[i];

1134 
	g°Sh¨≥nAâr
.
	g°Auto
.
	gau8Sh¨≥nUd
[
i
] = 
p°Ad±Sh¨≥n
->
au8Sh¨≥nUd
[i];

1137 
	gs32Rë
 = 
HI_MPI_ISP_SëSh¨≥nAâr
(
I•Dev
, &
°Sh¨≥nAâr
);

1138 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1140 
¥ötf
("HI_MPI_ISP_GetSharpenAttr failed\n");

1141  
	gHI_FAILURE
;

1144  
	gHI_SUCCESS
;

1147 
HI_S32
 
CommS˚√autoGëDP
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DP_S
* 
p°Ad±DP
)

1149 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1150 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1151 
ISP_DP_ATTR_S
 
	g°DPAâr
;

1153 
	gs32Rë
 = 
HI_MPI_ISP_GëDPAâr
(
I•Dev
, &
°DPAâr
);

1154 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1156 
¥ötf
("HI_MPI_ISP_GetDPAttr failed\n");

1157  
	gHI_FAILURE
;

1159 
	gp°Ad±DP
->
	gu16Sl›e
 = 
°DPAâr
.
°Dy«micAâr
.
u16Sl›e
;

1161  
	gHI_SUCCESS
;

1164 
HI_S32
 
CommS˚√autoSëDP
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DP_S
* 
p°Ad±DP
)

1166 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1167 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1168 
ISP_DP_ATTR_S
 
	g°DPAâr
;

1170 
	gs32Rë
 = 
HI_MPI_ISP_GëDPAâr
(
I•Dev
, &
°DPAâr
);

1171 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1173 
¥ötf
("HI_MPI_ISP_GetDPAttr failed\n");

1174  
	gHI_FAILURE
;

1177 
	g°DPAâr
.
	g°Dy«micAâr
.
	gu16Sl›e
 = 
p°Ad±DP
->
u16Sl›e
;

1178 
	gs32Rë
 = 
HI_MPI_ISP_SëDPAâr
(
I•Dev
, &
°DPAâr
);

1179 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1181 
¥ötf
("HI_MPI_ISP_SetDPAttr failed\n");

1182  
	gHI_FAILURE
;

1185  
	gHI_SUCCESS
;

1188 
HI_S32
 
CommS˚√autoGëPubAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_PUBATTR_S
* 
p°Ad±PubAâr
)

1190 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1191 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1192 
ISP_PUB_ATTR_S
 
	g°PubAâr
;

1194 
	gs32Rë
 = 
HI_MPI_ISP_GëPubAâr
(
I•Dev
, &
°PubAâr
);

1195 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1197 
¥ötf
("HI_MPI_ISP_GetPubAttr failed\n");

1198  
	gHI_FAILURE
;

1201 
	gp°Ad±PubAâr
->
	gu32Føme
 = (
HI_U32
)
°PubAâr
.
f32FømeR©e
;

1203  
	gHI_SUCCESS
;

1206 
HI_S32
 
CommS˚√autoGëGamma
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_GAMMA_S
* 
p°Ad±Gamma
)

1208 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1209 
HI_S32
 
	gi
;

1210 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1211 
ISP_GAMMA_ATTR_S
 
	g°GammaAâr
;

1213 
	gs32Rë
 = 
HI_MPI_ISP_GëGammaAâr
(
I•Dev
, &
°GammaAâr
);

1214 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1216 
¥ötf
("HI_MPI_ISP_GetGammaAttr failed\n");

1217  
	gHI_FAILURE
;

1220 
	gp°Ad±Gamma
->
	gu8CurveTy≥
 = 
°GammaAâr
.
íCurveTy≥
;

1221 
	gi
 = 0; i < 257; i++)

1223 
	gp°Ad±Gamma
->
	gau16GammaTabÀ
[
i
] = 
°GammaAâr
.
u16TabÀ
[i];

1226  
	gHI_SUCCESS
;

1229 
HI_S32
 
CommS˚√autoSëGamma
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_GAMMA_S
* 
p°Ad±Gamma
)

1231 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1232 
HI_S32
 
	gi
;

1233 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1234 
ISP_GAMMA_ATTR_S
 
	g°GammaAâr
;

1236 
	gs32Rë
 = 
HI_MPI_ISP_GëGammaAâr
(
I•Dev
, &
°GammaAâr
);

1237 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1239 
¥ötf
("HI_MPI_ISP_GetGammaAttr failed\n");

1240  
	gHI_FAILURE
;

1243 
	gp°Ad±Gamma
->
	gu8CurveTy≥
)

1246 
°GammaAâr
.
íCurveTy≥
 = 
ISP_GAMMA_CURVE_DEFAULT
;

1249 
°GammaAâr
.
íCurveTy≥
 = 
ISP_GAMMA_CURVE_SRGB
;

1252 
°GammaAâr
.
íCurveTy≥
 = 
ISP_GAMMA_CURVE_USER_DEFINE
;

1257 
	gi
 = 0; i < 257; i++)

1259 
	g°GammaAâr
.
	gu16TabÀ
[
i
] = 
p°Ad±Gamma
->
au16GammaTabÀ
[i];

1262 
	gs32Rë
 = 
HI_MPI_ISP_SëGammaAâr
(
I•Dev
, &
°GammaAâr
);

1263 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1265 
¥ötf
("HI_MPI_ISP_GetGammaAttr failed\n");

1266  
	gHI_FAILURE
;

1269  
	gHI_SUCCESS
;

1272 
HI_S32
 
CommS˚√autoGëH264Tøns
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H264TRANS_S
* 
p°Ad±H264Tøns
)

1274 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1275 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1276 
VENC_PARAM_H264_TRANS_S
 
	g°H264Tøns
;

1278 
	gs32Rë
 = 
HI_MPI_VENC_GëH264Tøns
(
VícChn
, &
°H264Tøns
);

1279 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1281 
¥ötf
("HI_MPI_VENC_GetH264Trans failed\n");

1282  
	gHI_FAILURE
;

1285 
	gp°Ad±H264Tøns
->
	gchroma_qp_ödex_off£t
 = 
°H264Tøns
.
chroma_qp_ödex_off£t
;

1287  
	gHI_SUCCESS
;

1290 
HI_S32
 
CommS˚√autoSëH264Tøns
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H264TRANS_S
* 
p°Ad±H264Tøns
)

1292 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1293 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1294 
VENC_PARAM_H264_TRANS_S
 
	g°H264Tøns
;

1296 
	gs32Rë
 = 
HI_MPI_VENC_GëH264Tøns
(
VícChn
, &
°H264Tøns
);

1297 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1299 
¥ötf
("HI_MPI_VENC_GetH264Trans failed\n");

1300  
	gHI_FAILURE
;

1303 
	g°H264Tøns
.
	gchroma_qp_ödex_off£t
 = 
p°Ad±H264Tøns
->
chroma_qp_ödex_off£t
;

1305 
	gs32Rë
 = 
HI_MPI_VENC_SëH264Tøns
(
VícChn
, &
°H264Tøns
);

1306 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1308 
¥ötf
("HI_MPI_VENC_SetH264Trans failed\n");

1309  
	gHI_FAILURE
;

1312  
	gHI_SUCCESS
;

1315 
HI_S32
 
CommS˚√autoGëH24Deblock
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H264_DEBLOCK_S
* 
p°Ad±H264Deblock
)

1317 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1318 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1319 
VENC_PARAM_H264_DBLK_S
 
	g°H264Dblk
;

1321 
	gs32Rë
 = 
HI_MPI_VENC_GëH264Dblk
(
VícChn
, &
°H264Dblk
);

1322 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1324 
¥ötf
("HI_MPI_VENC_GetH264Dblk failed\n");

1325  
	gHI_FAILURE
;

1328 
	gp°Ad±H264Deblock
->
	gdißbÀ_deblockög_fûãr_idc
 = 
°H264Dblk
.
dißbÀ_deblockög_fûãr_idc
;

1329 
	gp°Ad±H264Deblock
->
	g¶i˚_Æpha_c0_off£t_div2
 = 
°H264Dblk
.
¶i˚_Æpha_c0_off£t_div2
;

1330 
	gp°Ad±H264Deblock
->
	g¶i˚_bëa_off£t_div2
 = 
°H264Dblk
.
¶i˚_bëa_off£t_div2
;

1332  
	gHI_SUCCESS
;

1335 
HI_S32
 
CommS˚√autoSëH24Deblock
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H264_DEBLOCK_S
* 
p°Ad±H264Deblock
)

1337 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1338 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1339 
VENC_PARAM_H264_DBLK_S
 
	g°H264Dblk
;

1341 
	gs32Rë
 = 
HI_MPI_VENC_GëH264Dblk
(
VícChn
, &
°H264Dblk
);

1342 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1344 
¥ötf
("HI_MPI_VENC_GetH264Dblk failed\n");

1345  
	gHI_FAILURE
;

1348 
	g°H264Dblk
.
	gdißbÀ_deblockög_fûãr_idc
 = 
p°Ad±H264Deblock
->
dißbÀ_deblockög_fûãr_idc
;

1349 
	g°H264Dblk
.
	g¶i˚_Æpha_c0_off£t_div2
 = 
p°Ad±H264Deblock
->
¶i˚_Æpha_c0_off£t_div2
;

1350 
	g°H264Dblk
.
	g¶i˚_bëa_off£t_div2
 = 
p°Ad±H264Deblock
->
¶i˚_bëa_off£t_div2
;

1352 
	gs32Rë
 = 
HI_MPI_VENC_SëH264Dblk
(
VícChn
, &
°H264Dblk
);

1353 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1355 
¥ötf
("HI_MPI_VENC_GetH264Dblk failed\n");

1356  
	gHI_FAILURE
;

1359  
	gHI_SUCCESS
;

1362 
HI_S32
 
CommS˚√autoGëH264RcP¨am
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H264_RCPARAM_S
* 
p°Ad±H264RCP¨am
)

1364 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1365 
HI_S32
 
	gi
;

1366 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1367 
VENC_RC_PARAM_S
 
	g°RCP¨am
;

1368 
VENC_CHN_ATTR_S
 
	g°ChnAâr
;

1370 
	gs32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°ChnAâr
);

1371 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1373 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

1374  
	gHI_FAILURE
;

1376 i‡(
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
 !
VENC_RC_MODE_H264CBR
 && 
°ChnAâr
.
°RcAâr
.
íRcMode
 !
VENC_RC_MODE_H264VBR
)

1378  
HI_SUCCESS
;

1380 
	gs32Rë
 = 
HI_MPI_VENC_GëRcP¨am
(
VícChn
, &
°RCP¨am
);

1381 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1383 
¥ötf
("HI_MPI_VENC_GetRcParam failed\n");

1384  
	gHI_FAILURE
;

1387 
	gp°Ad±H264RCP¨am
->
	gu32QpDñè
 = 
°RCP¨am
.
u32RowQpDñè
;

1388 
	gi
 = 0; i < 12; i++)

1390 
	gp°Ad±H264RCP¨am
->
	gu32ThrdI
[
i
] = 
°RCP¨am
.
u32ThrdI
[i];

1391 
	gp°Ad±H264RCP¨am
->
	gu32ThrdP
[
i
] = 
°RCP¨am
.
u32ThrdP
[i];

1393 
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
)

1395 
	gVENC_RC_MODE_H264CBR
:

1396 
p°Ad±H264RCP¨am
->
s32IPQPDñè
 = 
°RCP¨am
.
°P¨amH264Cbr
.s32IPQPDelta;

1398 
	gVENC_RC_MODE_H264VBR
:

1399 
p°Ad±H264RCP¨am
->
s32IPQPDñè
 = 
°RCP¨am
.
°P¨amH264VBR
.s32IPQPDelta;

1405  
	gHI_SUCCESS
;

1408 
HI_S32
 
CommS˚√autoSëH264RcP¨am
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H264_RCPARAM_S
* 
p°Ad±H264RCP¨am
)

1410 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1411 
HI_S32
 
	gi
;

1412 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1413 
VENC_RC_PARAM_S
 
	g°RCP¨am
;

1414 
VENC_CHN_ATTR_S
 
	g°ChnAâr
;

1415 
	gs32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°ChnAâr
);

1416 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1418 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

1419  
	gHI_FAILURE
;

1421 i‡(
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
 !
VENC_RC_MODE_H264CBR
 && 
°ChnAâr
.
°RcAâr
.
íRcMode
 !
VENC_RC_MODE_H264VBR
)

1423  
HI_SUCCESS
;

1426 
	gs32Rë
 = 
HI_MPI_VENC_GëRcP¨am
(
VícChn
, &
°RCP¨am
);

1427 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1429 
¥ötf
("HI_MPI_VENC_GetRcParam failed\n");

1430  
	gHI_FAILURE
;

1433 
	g°RCP¨am
.
	gu32RowQpDñè
 = 
p°Ad±H264RCP¨am
->
u32QpDñè
;

1434 
	gi
 = 0; i < 12; i++)

1436 
	g°RCP¨am
.
	gu32ThrdI
[
i
] = 
p°Ad±H264RCP¨am
->
u32ThrdI
[i];

1437 
	g°RCP¨am
.
	gu32ThrdP
[
i
] = 
p°Ad±H264RCP¨am
->
u32ThrdP
[i];

1439 
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
)

1441 
	gVENC_RC_MODE_H264CBR
:

1442 
°RCP¨am
.
°P¨amH264Cbr
.
s32IPQPDñè
 = 
p°Ad±H264RCP¨am
->s32IPQPDelta;

1444 
	gVENC_RC_MODE_H264VBR
:

1445 
°RCP¨am
.
°P¨amH264VBR
.
s32IPQPDñè
 = 
p°Ad±H264RCP¨am
->s32IPQPDelta;

1451 
	gs32Rë
 = 
HI_MPI_VENC_SëRcP¨am
(
VícChn
, &
°RCP¨am
);

1452 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1454 
¥ötf
("HI_MPI_VENC_SetRcParam failed\n");

1455  
	gHI_FAILURE
;

1458  
	gHI_SUCCESS
;

1461 
HI_S32
 
CommS˚√autoGëAERouã
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_AEROUTE_S
* 
p°Ad±AERouã
)

1463 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1464 
HI_S32
 
	gi
;

1465 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1466 
ISP_AE_ROUTE_S
 
	g°AERouã
;

1468 
	gs32Rë
 = 
HI_MPI_ISP_GëAERouãAâr
(
I•Dev
, &
°AERouã
);

1469 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1471 
¥ötf
("HI_MPI_ISP_GetAERouteAttr failed\n");

1472  
	gHI_FAILURE
;

1475 
	gp°Ad±AERouã
->
	gu32TŸÆNum
 = 
°AERouã
.
u32TŸÆNum
;

1476 
	gi
 = 0; i < 8; i++)

1478 
	gp°Ad±AERouã
->
	ga°RouãNode
[
i
].
	gu32I¡Time
 = 
°AERouã
.
a°RouãNode
[i].
u32I¡Time
;

1479 
	gp°Ad±AERouã
->
	ga°RouãNode
[
i
].
	gu32SysGaö
 = 
°AERouã
.
a°RouãNode
[i].
u32SysGaö
;

1482  
	gHI_SUCCESS
;

1485 
HI_S32
 
CommS˚√autoSëAERouã
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_AEROUTE_S
* 
p°Ad±AERouã
)

1487 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1488 
HI_S32
 
	gi
;

1489 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1490 
ISP_AE_ROUTE_S
 
	g°AERouã
;

1492 
	gs32Rë
 = 
HI_MPI_ISP_GëAERouãAâr
(
I•Dev
, &
°AERouã
);

1493 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1495 
¥ötf
("HI_MPI_ISP_GetAERouteAttr failed\n");

1496  
	gHI_FAILURE
;

1499 
	g°AERouã
.
	gu32TŸÆNum
 = 
p°Ad±AERouã
->
u32TŸÆNum
;

1500 
	gi
 = 0; i < 8; i++)

1502 
	g°AERouã
.
	ga°RouãNode
[
i
].
	gu32I¡Time
 = 
p°Ad±AERouã
->
a°RouãNode
[i].
u32I¡Time
;

1503 
	g°AERouã
.
	ga°RouãNode
[
i
].
	gu32SysGaö
 = 
p°Ad±AERouã
->
a°RouãNode
[i].
u32SysGaö
;

1506 
	gs32Rë
 = 
HI_MPI_ISP_SëAERouãAâr
(
I•Dev
, &
°AERouã
);

1507 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1509 
¥ötf
("HI_MPI_ISP_GetAERouteAttr failed\n");

1510  
	gHI_FAILURE
;

1513  
	gHI_SUCCESS
;

1516 
HI_S32
 
CommS˚√autoGëDCIP¨am
(HI_S32 
s32ViDev
, 
ADPT_SCENEAUTO_DCIPARAM_S
* 
p°Ad±DCIP¨a
)

1518 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1519 
VI_DCI_PARAM_S
 
	g°DCIP¨am
;

1521 
	gs32Rë
 = 
HI_MPI_VI_GëDCIP¨am
(
s32ViDev
, &
°DCIP¨am
);

1522 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1524 
¥ötf
("HI_MPI_VI_GetDCIParam failed\n");

1525  
	gHI_FAILURE
;

1527 
	gp°Ad±DCIP¨a
->
	gbE«bÀ
 = 
°DCIP¨am
.
bE«bÀ
;

1528 
	gp°Ad±DCIP¨a
->
	gu32BœckGaö
 = 
°DCIP¨am
.
u32BœckGaö
;

1529 
	gp°Ad±DCIP¨a
->
	gu32C⁄åa°Gaö
 = 
°DCIP¨am
.
u32C⁄åa°Gaö
;

1530 
	gp°Ad±DCIP¨a
->
	gu32LightGaö
 = 
°DCIP¨am
.
u32LightGaö
;

1532  
	gHI_SUCCESS
;

1536 
HI_S32
 
CommS˚√autoSëDCIP¨am
(HI_S32 
s32ViDev
, c⁄° 
ADPT_SCENEAUTO_DCIPARAM_S
* 
p°Ad±DCIP¨a
)

1538 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1539 
VI_DCI_PARAM_S
 
	g°DCIP¨am
;

1541 
	gs32Rë
 = 
HI_MPI_VI_GëDCIP¨am
(
s32ViDev
, &
°DCIP¨am
);

1542 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1544 
¥ötf
("HI_MPI_VI_GetDCIParam failed\n");

1545  
	gHI_FAILURE
;

1548 
	g°DCIP¨am
.
	gbE«bÀ
 = 
p°Ad±DCIP¨a
->
bE«bÀ
;

1549 
	g°DCIP¨am
.
	gu32BœckGaö
 = 
p°Ad±DCIP¨a
->
u32BœckGaö
;

1550 
	g°DCIP¨am
.
	gu32C⁄åa°Gaö
 = 
p°Ad±DCIP¨a
->
u32C⁄åa°Gaö
;

1551 
	g°DCIP¨am
.
	gu32LightGaö
 = 
p°Ad±DCIP¨a
->
u32LightGaö
;

1553 
	gs32Rë
 = 
HI_MPI_VI_SëDCIP¨am
(
s32ViDev
, &
°DCIP¨am
);

1554 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1556 
¥ötf
("HI_MPI_VI_SetDCIParam failed\n");

1557  
	gHI_FAILURE
;

1560  
	gHI_SUCCESS
;

1563 
HI_S32
 
CommS˚√autoGëDRCAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DRCATTR_S
* 
p°Ad±DRCAâr
)

1565 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1566 
ISP_DRC_ATTR_S
 
	g°DRCAâr
;

1568 
	gs32Rë
 = 
HI_MPI_ISP_GëDRCAâr
(
s32I•Dev
, &
°DRCAâr
);

1569 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1571 
¥ötf
("HI_MPI_ISP_GetDRCAttr failed\n");

1572  
	gHI_FAILURE
;

1575 
	gp°Ad±DRCAâr
->
	gbE«bÀ
 = 
°DRCAâr
.
bE«bÀ
;

1576 i‡(
	g°DRCAâr
.
	gíOpTy≥
 =
OP_TYPE_MANUAL
)

1578 
p°Ad±DRCAâr
->
bM™ulE«bÀ
 = 
HI_TRUE
;

1582 
	gp°Ad±DRCAâr
->
	gbM™ulE«bÀ
 = 
HI_FALSE
;

1584 
	gp°Ad±DRCAâr
->
	gu32Såígth
 = 
°DRCAâr
.
°M™uÆ
.
u32Såígth
;

1585 
	gp°Ad±DRCAâr
->
	gu32Sl›eMax
 = 
°DRCAâr
.
u32Sl›eMax
;

1586 
	gp°Ad±DRCAâr
->
	gu32Sl›eMö
 = 
°DRCAâr
.
u32Sl›eMö
;

1587 
	gp°Ad±DRCAâr
->
	gu32V¨ün˚S∑˚
 = 
°DRCAâr
.
u32V¨ün˚S∑˚
;

1588 
	gp°Ad±DRCAâr
->
	gu32V¨ün˚I¡ísôy
 = 
°DRCAâr
.
u32V¨ün˚I¡ísôy
;

1589 
	gp°Ad±DRCAâr
->
	gu32WhôeLevñ
 = 
°DRCAâr
.
u32WhôeLevñ
;

1590 
	gp°Ad±DRCAâr
->
	gu32BœckLevñ
 = 
°DRCAâr
.
u32BœckLevñ
;

1592  
	gHI_SUCCESS
;

1595 
HI_S32
 
CommS˚√autoSëDRCAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DRCATTR_S
* 
p°Ad±DRCAâr
)

1597 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1598 
ISP_DRC_ATTR_S
 
	g°DRCAâr
;

1600 
	gs32Rë
 = 
HI_MPI_ISP_GëDRCAâr
(
s32I•Dev
, &
°DRCAâr
);

1601 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1603 
¥ötf
("HI_MPI_ISP_GetDRCAttr failed\n");

1604  
	gHI_FAILURE
;

1607 
	g°DRCAâr
.
	gbE«bÀ
 = 
p°Ad±DRCAâr
->
bE«bÀ
;

1608 i‡(
	gp°Ad±DRCAâr
->
	gbM™ulE«bÀ
 =
HI_TRUE
)

1610 
°DRCAâr
.
íOpTy≥
 = 
OP_TYPE_MANUAL
;

1614 
	g°DRCAâr
.
	gíOpTy≥
 = 
OP_TYPE_AUTO
;

1616 
	g°DRCAâr
.
	g°M™uÆ
.
	gu32Såígth
 = 
p°Ad±DRCAâr
->
u32Såígth
;

1617 
	g°DRCAâr
.
	gu32Sl›eMax
 = 
p°Ad±DRCAâr
->
u32Sl›eMax
;

1618 
	g°DRCAâr
.
	gu32Sl›eMö
 = 
p°Ad±DRCAâr
->
u32Sl›eMö
;

1619 
	g°DRCAâr
.
	gu32V¨ün˚S∑˚
 = 
p°Ad±DRCAâr
->
u32V¨ün˚S∑˚
;

1620 
	g°DRCAâr
.
	gu32V¨ün˚I¡ísôy
 = 
p°Ad±DRCAâr
->
u32V¨ün˚I¡ísôy
;

1621 
	g°DRCAâr
.
	gu32WhôeLevñ
 = 
p°Ad±DRCAâr
->
u32WhôeLevñ
;

1622 
	g°DRCAâr
.
	gu32BœckLevñ
 = 
p°Ad±DRCAâr
->
u32BœckLevñ
;

1624 
	gs32Rë
 = 
HI_MPI_ISP_SëDRCAâr
(
s32I•Dev
, &
°DRCAâr
);

1625 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1627 
¥ötf
("HI_MPI_ISP_SetDRCAttr failed\n");

1628  
	gHI_FAILURE
;

1631  
	gHI_SUCCESS
;

1634 
HI_S32
 
CommS˚√autoGëS©uøti⁄
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_SATURATION_S
* 
p°Ad±S©uøti⁄
)

1636 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1637 
HI_S32
 
	gi
;

1638 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1639 
ISP_SATURATION_ATTR_S
 
	g°S©uøti⁄
;

1641 
	gs32Rë
 = 
HI_MPI_ISP_GëS©uøti⁄Aâr
(
I•Dev
, &
°S©uøti⁄
);

1642 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1644 
¥ötf
("HI_MPI_ISP_GetSaturationAttr failed\n");

1645  
	gHI_FAILURE
;

1648 
	gp°Ad±S©uøti⁄
->
	gu8OpTy≥
 = 
°S©uøti⁄
.
íOpTy≥
;

1649 
	gp°Ad±S©uøti⁄
->
	gu8M™uÆS©
 = 
°S©uøti⁄
.
°M™uÆ
.
u8S©uøti⁄
;

1650 
	gi
 = 0; i < 16; i++)

1652 
	gp°Ad±S©uøti⁄
->
	gau8AutoS©
[
i
] = 
°S©uøti⁄
.
°Auto
.
au8S©
[i];

1655  
	gHI_SUCCESS
;

1658 
HI_S32
 
CommS˚√autoSëS©uøti⁄
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_SATURATION_S
* 
p°Ad±S©uøti⁄
)

1660 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1661 
HI_S32
 
	gi
;

1662 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1663 
ISP_SATURATION_ATTR_S
 
	g°S©uøti⁄
;

1665 
	gs32Rë
 = 
HI_MPI_ISP_GëS©uøti⁄Aâr
(
I•Dev
, &
°S©uøti⁄
);

1666 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1668 
¥ötf
("HI_MPI_ISP_GetSaturationAttr failed\n");

1669  
	gHI_FAILURE
;

1672 
	gp°Ad±S©uøti⁄
->
	gu8OpTy≥
)

1675 
°S©uøti⁄
.
íOpTy≥
 = 
OP_TYPE_AUTO
;

1678 
°S©uøti⁄
.
íOpTy≥
 = 
OP_TYPE_MANUAL
;

1683 
	g°S©uøti⁄
.
	g°M™uÆ
.
	gu8S©uøti⁄
 = 
p°Ad±S©uøti⁄
->
u8M™uÆS©
;

1684 
	gi
 = 0; i < 16; i++)

1686 
	g°S©uøti⁄
.
	g°Auto
.
	gau8S©
[
i
] = 
p°Ad±S©uøti⁄
->
au8AutoS©
[i];

1689 
	gs32Rë
 = 
HI_MPI_ISP_SëS©uøti⁄Aâr
(
I•Dev
, &
°S©uøti⁄
);

1690 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1692 
¥ötf
("HI_MPI_ISP_SetSaturationAttr failed\n");

1693  
	gHI_FAILURE
;

1696  
	gHI_SUCCESS
;

1699 
HI_S32
 
CommS˚√autoGëDISAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DIS_ATTR_S
* 
p°Ad±DisAâr
)

1701 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1702 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1703 
ISP_DIS_ATTR_S
 
	g°DisAâr
;

1705 
	gp°Ad±DisAâr
->
	gbE«bÀ
 = 
HI_FALSE
;

1706 
	gs32Rë
 = 
HI_MPI_ISP_GëDISAâr
(
I•Dev
, &
°DisAâr
);

1707 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1710 i‡(0xA0108008 =(
HI_U32
)
s32Rë
)

1712  
HI_SUCCESS
;

1715 
¥ötf
("HI_MPI_ISP_GetDISAttr failed\n");

1716  
	gHI_FAILURE
;

1719 
	gp°Ad±DisAâr
->
	gbE«bÀ
 = 
°DisAâr
.
bE«bÀ
;

1721  
	gHI_SUCCESS
;

1724 
HI_S32
 
CommS˚√autoSëDISAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DIS_ATTR_S
* 
p°Ad±DisAâr
)

1726 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1727 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1728 
ISP_DIS_ATTR_S
 
	g°DisAâr
;

1730 
	gs32Rë
 = 
HI_MPI_ISP_GëDISAâr
(
I•Dev
, &
°DisAâr
);

1731 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1734 i‡(0xA0108008 =(
HI_U32
)
s32Rë
)

1736  
HI_SUCCESS
;

1738 
¥ötf
("HI_MPI_ISP_GetDISAttr failed\n");

1739  
	gHI_FAILURE
;

1742 
	g°DisAâr
.
	gbE«bÀ
 = 
p°Ad±DisAâr
->
bE«bÀ
;

1744 
	gs32Rë
 = 
HI_MPI_ISP_SëDISAâr
(
I•Dev
, &
°DisAâr
);

1745 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1747 
¥ötf
("HI_MPI_ISP_SetDISAttr failed\n");

1748  
	gHI_FAILURE
;

1751  
	gHI_SUCCESS
;

1754 
HI_S32
 
CommS˚√autoGëAEAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_AEATTR_S
* 
p°Ad±AEAâr
)

1756 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1757 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1758 
ISP_EXPOSURE_ATTR_S
 
	g°ExposuªAâr
;

1759 
	gi
,
	gj
;

1761 
	gs32Rë
 = 
HI_MPI_ISP_GëExposuªAâr
(
I•Dev
, &
°ExposuªAâr
);

1762 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1764 
¥ötf
("HI_MPI_ISP_GetExposureAttr failed\n");

1765  
	gHI_FAILURE
;

1768 
	gp°Ad±AEAâr
->
	gu8ExpCom≥nßti⁄
 = 
°ExposuªAâr
.
°Auto
.
u8Com≥nßti⁄
;

1769 
	gp°Ad±AEAâr
->
	gu16BœckDñayFøme
 = 
°ExposuªAâr
.
°Auto
.
°AEDñayAâr
.
u16BœckDñayFøme
;

1770 
	gp°Ad±AEAâr
->
	gu16WhôeDñayFøme
 = 
°ExposuªAâr
.
°Auto
.
°AEDñayAâr
.
u16WhôeDñayFøme
;

1771 
	g°ExposuªAâr
.
	g°Auto
.
	gíAESå©egyMode
)

1773 
	gAE_EXP_HIGHLIGHT_PRIOR
:

1774 
p°Ad±AEAâr
->
u8AESå©egyMode
 = 0;

1776 
	gAE_EXP_LOWLIGHT_PRIOR
:

1777 
p°Ad±AEAâr
->
u8AESå©egyMode
 = 1;

1780 
p°Ad±AEAâr
->
u8AESå©egyMode
 = 0;

1782 
	gp°Ad±AEAâr
->
	gu8AESå©egyMode
 = 
°ExposuªAâr
.
°Auto
.
íAESå©egyMode
;

1783 
	gp°Ad±AEAâr
->
	gu8MaxHi°Off£t
 = 
°ExposuªAâr
.
°Auto
.
u8MaxHi°Off£t
;

1784 
	gp°Ad±AEAâr
->
	gu16Hi°R©ioSl›e
 = 
°ExposuªAâr
.
°Auto
.
u16Hi°R©ioSl›e
;

1785 
	gp°Ad±AEAâr
->
	gu8S≥ed
 = 
°ExposuªAâr
.
°Auto
.
u8S≥ed
;

1786 
	gp°Ad±AEAâr
->
	gu8Tﬁî™˚
 = 
°ExposuªAâr
.
°Auto
.
u8Tﬁî™˚
;

1787 
	gp°Ad±AEAâr
->
	gu32SysGaöMax
 = 
°ExposuªAâr
.
°Auto
.
°SysGaöR™ge
.
u32Max
;

1788 
	gp°Ad±AEAâr
->
	gu8AERunI¡îvÆ
 =
°ExposuªAâr
.
u8AERunI¡îvÆ
;

1790 
	gi
 = 0; i < 
	gAE_ZONE_ROW
; i++)

1792 
	gj
 = 0; j < 
	gAE_ZONE_COLUMN
; j++)

1794 
	gp°Ad±AEAâr
->
	gau8AeWeight
[
i
][
j
] = 
°ExposuªAâr
.
°Auto
.
au8Weight
[i][j];

1797  
	gHI_SUCCESS
;

1800 
HI_S32
 
CommS˚√autoSëAEAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_AEATTR_S
* 
p°Ad±AEAâr
)

1802 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1803 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1804 
ISP_EXPOSURE_ATTR_S
 
	g°ExposuªAâr
;

1805 
	gi
,
	gj
;

1807 
	gs32Rë
 = 
HI_MPI_ISP_GëExposuªAâr
(
I•Dev
, &
°ExposuªAâr
);

1808 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1810 
¥ötf
("HI_MPI_ISP_GetExposureAttr failed\n");

1811  
	gHI_FAILURE
;

1814 
	g°ExposuªAâr
.
	g°Auto
.
	gíAESå©egyMode
 = 
AE_EXP_HIGHLIGHT_PRIOR
;

1815 
	g°ExposuªAâr
.
	g°Auto
.
	gu8Com≥nßti⁄
 = 
p°Ad±AEAâr
->
u8ExpCom≥nßti⁄
;

1816 
	g°ExposuªAâr
.
	g°Auto
.
	g°AEDñayAâr
.
	gu16BœckDñayFøme
 = 
p°Ad±AEAâr
->
u16BœckDñayFøme
;

1817 
	g°ExposuªAâr
.
	g°Auto
.
	g°AEDñayAâr
.
	gu16WhôeDñayFøme
 = 
p°Ad±AEAâr
->
u16WhôeDñayFøme
;

1818 
	gp°Ad±AEAâr
->
	gu8AESå©egyMode
)

1821 
°ExposuªAâr
.
°Auto
.
íAESå©egyMode
 = 
AE_EXP_HIGHLIGHT_PRIOR
;

1824 
°ExposuªAâr
.
°Auto
.
íAESå©egyMode
 = 
AE_EXP_LOWLIGHT_PRIOR
;

1827 
°ExposuªAâr
.
°Auto
.
íAESå©egyMode
 = 
AE_EXP_HIGHLIGHT_PRIOR
;

1830 
	g°ExposuªAâr
.
	g°Auto
.
	gu8MaxHi°Off£t
 = 
p°Ad±AEAâr
->
u8MaxHi°Off£t
;

1831 
	g°ExposuªAâr
.
	g°Auto
.
	gu16Hi°R©ioSl›e
 = 
p°Ad±AEAâr
->
u16Hi°R©ioSl›e
;

1832 
	g°ExposuªAâr
.
	g°Auto
.
	gu8S≥ed
 = 
p°Ad±AEAâr
->
u8S≥ed
;

1833 
	g°ExposuªAâr
.
	g°Auto
.
	gu8Tﬁî™˚
 = 
p°Ad±AEAâr
->
u8Tﬁî™˚
;

1834 
	g°ExposuªAâr
.
	g°Auto
.
	g°SysGaöR™ge
.
	gu32Max
 = 
p°Ad±AEAâr
->
u32SysGaöMax
;

1835 
	g°ExposuªAâr
.
	gu8AERunI¡îvÆ
 = 
p°Ad±AEAâr
->
u8AERunI¡îvÆ
;

1837 
	gi
 = 0; i < 
	gAE_ZONE_ROW
; i++)

1839 
	gj
 = 0; j < 
	gAE_ZONE_COLUMN
; j++)

1841 
	g°ExposuªAâr
.
	g°Auto
.
	gau8Weight
[
i
][
j
] = 
p°Ad±AEAâr
->
au8AeWeight
[i][j];

1844 
	gs32Rë
 = 
HI_MPI_ISP_SëExposuªAâr
(
I•Dev
, &
°ExposuªAâr
);

1845 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1847 
¥ötf
("HI_MPI_ISP_SetExposureAttr failed\n");

1848  
	gHI_FAILURE
;

1851  
	gHI_SUCCESS
;

1854 
HI_S32
 
CommS˚√autoGëExposuªInfo
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_EXPOSUREINFO_S
* 
p°Ad±ExposuªInfo
)

1856 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1857 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1858 
HI_S32
 
	gi
;

1859 
ISP_EXP_INFO_S
 
	g°I•ExpInfo
;

1861 
	gs32Rë
 = 
HI_MPI_ISP_QuîyExposuªInfo
(
I•Dev
, &
°I•ExpInfo
);

1862 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1864 
¥ötf
("HI_MPI_ISP_QueryExposureInfo failed\n");

1865  
	gHI_FAILURE
;

1867 
	gp°Ad±ExposuªInfo
->
	gu32AGaö
 = 
°I•ExpInfo
.
u32AGaö
;

1868 
	gp°Ad±ExposuªInfo
->
	gu32DGaö
 = 
°I•ExpInfo
.
u32DGaö
;

1869 
	gp°Ad±ExposuªInfo
->
	gu32ISPDGaö
 = 
°I•ExpInfo
.
u32ISPDGaö
;

1870 
	gp°Ad±ExposuªInfo
->
	gu32ExpTime
 = 
°I•ExpInfo
.
u32ExpTime
;

1871 
	gp°Ad±ExposuªInfo
->
	gu32Exposuª
 = 
°I•ExpInfo
.
u32Exposuª
;

1872 
	gp°Ad±ExposuªInfo
->
	gu8AveLum
 = 
°I•ExpInfo
.
u8AveLum
;

1874 
	gi
 = 0; i < 256; i++)

1876 
	gp°Ad±ExposuªInfo
->
	gu32Hi°256VÆue
[
i
] = 
°I•ExpInfo
.
u32AE_Hi°256VÆue
[i];

1879  
	gHI_SUCCESS
;

1882 
HI_S32
 
CommS˚√autoGëWDRAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_WDRATTR_S
* 
p°Ad±WDRAâr
)

1884 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1885 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1886 
ISP_WDR_MODE_S
 
	g°WDRMode
;

1888 
	gs32Rë
 = 
HI_MPI_ISP_GëWDRMode
(
I•Dev
, &
°WDRMode
);

1889 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1891 
¥ötf
("HI_MPI_ISP_GetWDRMode failed\n");

1892  
	gHI_FAILURE
;

1894 
	gp°Ad±WDRAâr
->
	gu8WdrMode
 = 
°WDRMode
.
íWDRMode
;

1896  
	gHI_SUCCESS
;

1899 
HI_S32
 
CommS˚√autoGëQuîyI¬îSèãInfo
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_STATEINFO_S
* 
p°Ad±SètInfo
)

1901 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1902 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1903 
ISP_INNER_STATE_INFO_S
 
	g°I¬îSèãInfo
;

1905 
	gs32Rë
 = 
HI_MPI_ISP_QuîyI¬îSèãInfo
(
I•Dev
, &
°I¬îSèãInfo
);

1906 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1908 
¥ötf
("HI_MPI_ISP_GetDRCAttr failed\n");

1909  
	gHI_FAILURE
;

1912 
	gp°Ad±SètInfo
->
	gu32DRCSåígthA˘uÆ
 = 
°I¬îSèãInfo
.
u32DRCSåígthA˘uÆ
;

1913 
	gp°Ad±SètInfo
->
	gu32DefogSåígthA˘uÆ
 = 
°I¬îSèãInfo
.
u32DefogSåígthA˘uÆ
;

1915  
	gHI_SUCCESS
;

1918 
HI_S32
 
CommS˚√autoGëBôøã
(HI_S32 
s32VícChn
, 
HI_U32
* 
pu32Bôøã
)

1920 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1921 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

1922 
VENC_CHN_ATTR_S
 
	g°VícChnAâr
;

1924 
	gs32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°VícChnAâr
);

1925 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1927 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

1928  
	gHI_FAILURE
;

1930 *
	gpu32Bôøã
 = 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32BôR©e
;

1932  
	gHI_SUCCESS
;

1935 
HI_S32
 
CommS˚√autoGëDefogAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DEFOG_ATTR_S
* 
p°Ad±DefogAâr
)

1937 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1938 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1939 
ISP_DEFOG_ATTR_S
 
	g°DefogAâr
;

1941 
	gs32Rë
 = 
HI_MPI_ISP_GëDeFogAâr
(
I•Dev
, &
°DefogAâr
);

1942 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1944 
¥ötf
("HI_MPI_ISP_GetDeFogAttr failed\n");

1945  
	gHI_FAILURE
;

1948 
	gp°Ad±DefogAâr
->
	gbE«bÀ
 = 
°DefogAâr
.
bE«bÀ
;

1950  
	gHI_SUCCESS
;

1953 
HI_S32
 
CommS˚√autoSëFPNAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_FPN_ATTR_S
* 
p°Ad±F≤Aâr
)

1955 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1956 
ISP_DEV
 
	gI•Dev
 = 
s32I•Dev
;

1957 
ISP_FPN_ATTR_S
 
	g°F≤Aâr
;

1959 
	gs32Rë
 = 
HI_MPI_ISP_GëFPNAâr
(
I•Dev
, &
°F≤Aâr
);

1960 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1962 
¥ötf
("HI_MPI_ISP_GetFPNAttr failed\n");

1963  
	gHI_FAILURE
;

1966 
	g°F≤Aâr
.
	gbE«bÀ
 = 
p°Ad±F≤Aâr
->
bE«bÀ
;

1968 
	gs32Rë
 = 
HI_MPI_ISP_SëFPNAâr
(
I•Dev
, &
°F≤Aâr
);

1969 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1971 
¥ötf
("HI_MPI_ISP_SetFPNAttr failed\n");

1972  
	gHI_FAILURE
;

1975  
	gHI_SUCCESS
;

1978 
HI_S32
 
CommS˚√autoSë3DNR
(HI_S32 
s32VpssGΩ
, 
ADPT_SCENEAUTO_3DNR
 *
p°Ad±3dƒ
)

1980 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

1981 
VPSS_GRP
 
	gVpssGΩ
 = 
s32VpssGΩ
;

1982 
VPSS_GRP_VPPNRBEX_S
 
	g°Vµƒbex
;

1984 
	gs32Rë
 = 
HI_MPI_VPSS_GëNRV3P¨am
(
VpssGΩ
, &
°Vµƒbex
);

1985 i‡(
	gHI_SUCCESS
 !
s32Rë
)

1987 
¥ötf
("HI_MPI_VPSS_GetNRV3Param failed\n");

1990 
	g°Vµƒbex
.
	giNRb
.
	gSBSi
 = 
p°Ad±3dƒ
->
u8SBS
[0];

1991 
	g°Vµƒbex
.
	giNRb
.
	gSBSj
 = 
p°Ad±3dƒ
->
u8SBS
[1];

1992 
	g°Vµƒbex
.
	giNRb
.
	gSBSk
 = 
p°Ad±3dƒ
->
u8SBS
[2];

1993 
	g°Vµƒbex
.
	giNRb
.
	gPSFS
 = 
p°Ad±3dƒ
->
u16PSFS
;

1994 
	g°Vµƒbex
.
	giNRb
.
	gSBTi
 = 
p°Ad±3dƒ
->
u8SBT
[0];

1995 
	g°Vµƒbex
.
	giNRb
.
	gSBTj
 = 
p°Ad±3dƒ
->
u8SBT
[1];

1996 
	g°Vµƒbex
.
	giNRb
.
	gSBTk
 = 
p°Ad±3dƒ
->
u8SBT
[2];

1998 
	g°Vµƒbex
.
	giNRb
.
	gSDSi
 = 
p°Ad±3dƒ
->
u8SDS
[0];

1999 
	g°Vµƒbex
.
	giNRb
.
	gSDSj
 = 
p°Ad±3dƒ
->
u8SDS
[1];

2000 
	g°Vµƒbex
.
	giNRb
.
	gSDSk
 = 
p°Ad±3dƒ
->
u8SDS
[2];

2001 
	g°Vµƒbex
.
	giNRb
.
	gSDTi
 = 
p°Ad±3dƒ
->
u8SDT
[0];

2002 
	g°Vµƒbex
.
	giNRb
.
	gSDTj
 = 
p°Ad±3dƒ
->
u8SDT
[1];

2003 
	g°Vµƒbex
.
	giNRb
.
	gSDTk
 = 
p°Ad±3dƒ
->
u8SDT
[2];

2005 
	g°Vµƒbex
.
	giNRb
.
	gSBFi
 = 
p°Ad±3dƒ
->
u16SBF
[0];

2006 
	g°Vµƒbex
.
	giNRb
.
	gSBFj
 = 
p°Ad±3dƒ
->
u16SBF
[1];

2007 
	g°Vµƒbex
.
	giNRb
.
	gSBFk
 = 
p°Ad±3dƒ
->
u16SBF
[2];

2008 
	g°Vµƒbex
.
	giNRb
.
	gSFC
 = 
p°Ad±3dƒ
->
u8SFC
;

2009 
	g°Vµƒbex
.
	giNRb
.
	gSHPi
 = 
p°Ad±3dƒ
->
u8SHP
[0];

2010 
	g°Vµƒbex
.
	giNRb
.
	gSHPj
 = 
p°Ad±3dƒ
->
u8SHP
[1];

2011 
	g°Vµƒbex
.
	giNRb
.
	gSHPk
 = 
p°Ad±3dƒ
->
u8SHP
[2];

2012 
	g°Vµƒbex
.
	giNRb
.
	gTFC
 = 
p°Ad±3dƒ
->
u8TFC
;

2014 
	g°Vµƒbex
.
	giNRb
.
	gTFSi
 = 
p°Ad±3dƒ
->
u16TFS
[0];

2015 
	g°Vµƒbex
.
	giNRb
.
	gTFSj
 = 
p°Ad±3dƒ
->
u16TFS
[1];

2016 
	g°Vµƒbex
.
	giNRb
.
	gTFSk
 = 
p°Ad±3dƒ
->
u16TFS
[2];

2017 
	g°Vµƒbex
.
	giNRb
.
	gTFRi
 = 
p°Ad±3dƒ
->
u16TFR
[0];

2018 
	g°Vµƒbex
.
	giNRb
.
	gTFRj
 = 
p°Ad±3dƒ
->
u16TFR
[1];

2019 
	g°Vµƒbex
.
	giNRb
.
	gTFRk
 = 
p°Ad±3dƒ
->
u16TFR
[2];

2021 
	g°Vµƒbex
.
	giNRb
.
	gMDZi
 = 
p°Ad±3dƒ
->
u16MDZ
[0];

2022 
	g°Vµƒbex
.
	giNRb
.
	gMDZj
 = 
p°Ad±3dƒ
->
u16MDZ
[1];

2023 
	g°Vµƒbex
.
	giNRb
.
	gMATH
 = 
p°Ad±3dƒ
->
u16MDZ
[2];

2024 
	g°Vµƒbex
.
	giNRb
.
	gPo°
 = 
p°Ad±3dƒ
->
u16POST
;

2026 
	g°Vµƒbex
.
	gMABW
 = 1;

2027 
	g°Vµƒbex
.
	gPo°ROW
 = 0;

2028 
	g°Vµƒbex
.
	gMATW
 = 1;

2029 
	g°Vµƒbex
.
	gMDAF
 = 3;

2030 
	g°Vµƒbex
.
	gTextThr
 = 16;

2031 
	g°Vµƒbex
.
	gMTFS
 = 255;

2032 
	g°Vµƒbex
.
	gExTfThr
 = 12;

2034 
	gs32Rë
 = 
HI_MPI_VPSS_SëNRV3P¨am
(
VpssGΩ
, &
°Vµƒbex
);

2035 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2037 
¥ötf
("HI_MPI_VPSS_SetNRV3Param failed\n");

2040  
	gHI_SUCCESS
;

2043 
HI_S32
 
CommS˚√autoGëVícAâr
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_VENC_ATTR_S
* 
p°Ad±VícAâr
)

2045 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

2046 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

2047 
VENC_CHN_ATTR_S
 
	g°VícChnAâr
;

2049 
	gs32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°VícChnAâr
);

2050 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2052 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

2053  
	gHI_FAILURE
;

2056 
	g°VícChnAâr
.
	g°RcAâr
.
	gíRcMode
)

2058 
	gVENC_RC_MODE_H264FIXQP
:

2059 
VENC_RC_MODE_H264CBR
:

2060 
p°Ad±VícAâr
->
eRcMode
 = 
ADPT_SCENEAUTO_RCMODE_H264
;

2061 
	gp°Ad±VícAâr
->
	gu32BôR©e
 = 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32BôR©e
;

2063 
	gVENC_RC_MODE_H265FIXQP
:

2064 
VENC_RC_MODE_H265CBR
:

2065 
p°Ad±VícAâr
->
eRcMode
 = 
ADPT_SCENEAUTO_RCMODE_H265
;

2066 
	gp°Ad±VícAâr
->
	gu32BôR©e
 = 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32BôR©e
;

2068 
	gVENC_RC_MODE_H264VBR
:

2069 
p°Ad±VícAâr
->
eRcMode
 = 
ADPT_SCENEAUTO_RCMODE_H264
;

2070 
	gp°Ad±VícAâr
->
	gu32BôR©e
 = 
°VícChnAâr
.
°RcAâr
.
°AârH264Vbr
.
u32MaxBôR©e
;

2072 
	gVENC_RC_MODE_H265VBR
:

2073 
p°Ad±VícAâr
->
eRcMode
 = 
ADPT_SCENEAUTO_RCMODE_H265
;

2074 
	gp°Ad±VícAâr
->
	gu32BôR©e
 = 
°VícChnAâr
.
°RcAâr
.
°AârH265Vbr
.
u32MaxBôR©e
;

2080  
	gHI_SUCCESS
;

2083 
HI_S32
 
CommS˚√autoGëH265Fa˚Cfg
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H265_FACE_CFG_S
* 
p°Ad±H265Fa˚Cfg
)

2085 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

2086 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

2087 
VENC_FACE_CFG_S
 
	g°VícFa˚Cfg
;

2089 
	gs32Rë
 = 
HI_MPI_VENC_GëFa˚Cfg
(
VícChn
, &
°VícFa˚Cfg
);

2090 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2092 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

2093  
	gHI_FAILURE
;

2097 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø4RdCo°_I
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø4RdCo°
[0];

2098 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø8RdCo°_I
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø8RdCo°
[0];

2099 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø16RdCo°_I
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø16RdCo°
[0];

2100 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø32RdCo°_I
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø32RdCo°
[0];

2101 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø4RdCo°_I
 = 
°VícFa˚Cfg
.
u8SköI¡ø4RdCo°
[0];

2102 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø8RdCo°_I
 = 
°VícFa˚Cfg
.
u8SköI¡ø8RdCo°
[0];

2103 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø16RdCo°_I
 = 
°VícFa˚Cfg
.
u8SköI¡ø16RdCo°
[0];

2104 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø32RdCo°_I
 = 
°VícFa˚Cfg
.
u8SköI¡ø32RdCo°
[0];

2105 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø4RdCo°_I
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø4RdCo°
[0];

2106 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø8RdCo°_I
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø8RdCo°
[0];

2107 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø16RdCo°_I
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø16RdCo°
[0];

2108 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø32RdCo°_I
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø32RdCo°
[0];

2110 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø4RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø4RdCo°
[1];

2111 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø8RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø8RdCo°
[1];

2112 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø16RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø16RdCo°
[1];

2113 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mI¡ø32RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mI¡ø32RdCo°
[1];

2114 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø4RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköI¡ø4RdCo°
[1];

2115 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø8RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköI¡ø8RdCo°
[1];

2116 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø16RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköI¡ø16RdCo°
[1];

2117 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköI¡ø32RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköI¡ø32RdCo°
[1];

2118 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø4RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø4RdCo°
[1];

2119 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø8RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø8RdCo°
[1];

2120 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø16RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø16RdCo°
[1];

2121 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeI¡ø32RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeI¡ø32RdCo°
[1];

2123 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mFme8RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mFme8RdCo°
[1];

2124 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mFme16RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mFme16RdCo°
[1];

2125 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mFme32RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mFme32RdCo°
[1];

2126 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mFme64RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mFme64RdCo°
[1];

2127 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköFme8RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköFme8RdCo°
[1];

2128 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköFme16RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköFme16RdCo°
[1];

2129 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköFme32RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköFme32RdCo°
[1];

2130 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköFme64RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköFme64RdCo°
[1];

2131 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeFme8RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeFme8RdCo°
[1];

2132 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeFme16RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeFme16RdCo°
[1];

2133 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeFme32RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeFme32RdCo°
[1];

2134 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeFme64RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeFme64RdCo°
[1];

2136 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mMîg8RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mMîg8RdCo°
[1];

2137 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mMîg16RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mMîg16RdCo°
[1];

2138 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mMîg32RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mMîg32RdCo°
[1];

2139 
	gp°Ad±H265Fa˚Cfg
->
	gu8N‹mMîg64RdCo°_P
 = 
°VícFa˚Cfg
.
u8N‹mMîg64RdCo°
[1];

2140 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköMîg8RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköMîg8RdCo°
[1];

2141 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköMîg16RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköMîg16RdCo°
[1];

2142 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköMîg32RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköMîg32RdCo°
[1];

2143 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköMîg64RdCo°_P
 = 
°VícFa˚Cfg
.
u8SköMîg64RdCo°
[1];

2144 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeMîg8RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeMîg8RdCo°
[1];

2145 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeMîg16RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeMîg16RdCo°
[1];

2146 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeMîg32RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeMîg32RdCo°
[1];

2147 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeMîg64RdCo°_P
 = 
°VícFa˚Cfg
.
u8HedgeMîg64RdCo°
[1];

2149 
	gp°Ad±H265Fa˚Cfg
->
	gbSköEn_I
 = 
°VícFa˚Cfg
.
bSköEn
[0];

2150 
	gp°Ad±H265Fa˚Cfg
->
	gu32SköQpDñè_I
 = 
°VícFa˚Cfg
.
u32SköQpDñè
[0];

2151 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköUMax_I
 = 
°VícFa˚Cfg
.
u8SköUMax
[0];

2152 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköUMö_I
 = 
°VícFa˚Cfg
.
u8SköUMö
[0];

2153 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköVMax_I
 = 
°VícFa˚Cfg
.
u8SköVMax
[0];

2154 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköVMö_I
 = 
°VícFa˚Cfg
.
u8SköVMö
[0];

2155 
	gp°Ad±H265Fa˚Cfg
->
	gu32SköNum_I
 = 
°VícFa˚Cfg
.
u32SköNum
[0];

2157 
	gp°Ad±H265Fa˚Cfg
->
	gbSköEn_P
 = 
°VícFa˚Cfg
.
bSköEn
[1];;

2158 
	gp°Ad±H265Fa˚Cfg
->
	gu32SköQpDñè_P
 = 
°VícFa˚Cfg
.
u32SköQpDñè
[1];

2159 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköUMax_P
 = 
°VícFa˚Cfg
.
u8SköUMax
[1];

2160 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköUMö_P
 = 
°VícFa˚Cfg
.
u8SköUMö
[1];

2161 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköVMax_P
 = 
°VícFa˚Cfg
.
u8SköVMax
[1];

2162 
	gp°Ad±H265Fa˚Cfg
->
	gu8SköVMö_P
 = 
°VícFa˚Cfg
.
u8SköVMö
[1];

2163 
	gp°Ad±H265Fa˚Cfg
->
	gu32SköNum_P
 = 
°VícFa˚Cfg
.
u32SköNum
[1];

2165 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeThr_I
 = 
°VícFa˚Cfg
.
u8HedgeThr
[0];

2166 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeC¡_I
 = 
°VícFa˚Cfg
.
u8HedgeC¡
[0];

2167 
	gp°Ad±H265Fa˚Cfg
->
	gbSåoEdgeEn_I
 = 
°VícFa˚Cfg
.
bSåoEdgeEn
[0];

2168 
	gp°Ad±H265Fa˚Cfg
->
	gu32SåoEdgeQpDñè_I
 = 
°VícFa˚Cfg
.
u32SåoEdgeQpDñè
[0];

2170 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeThr_P
 = 
°VícFa˚Cfg
.
u8HedgeThr
[1];

2171 
	gp°Ad±H265Fa˚Cfg
->
	gu8HedgeC¡_P
 = 
°VícFa˚Cfg
.
u8HedgeC¡
[1];

2172 
	gp°Ad±H265Fa˚Cfg
->
	gbSåoEdgeEn_P
 = 
°VícFa˚Cfg
.
bSåoEdgeEn
[1];

2173 
	gp°Ad±H265Fa˚Cfg
->
	gu32SåoEdgeQpDñè_P
 = 
°VícFa˚Cfg
.
u32SåoEdgeQpDñè
[1];

2175 
	gp°Ad±H265Fa˚Cfg
->
	gbIm¥oveEn_I
 = 
°VícFa˚Cfg
.
bIm¥oveEn
[0];

2177 
	gp°Ad±H265Fa˚Cfg
->
	gbIm¥oveEn_P
 = 
°VícFa˚Cfg
.
bIm¥oveEn
[1];

2178 
	gp°Ad±H265Fa˚Cfg
->
	gu32N‹m32MaxNum_P
 = 
°VícFa˚Cfg
.
u32N‹m32MaxNum
[1];

2179 
	gp°Ad±H265Fa˚Cfg
->
	gu32N‹m16MaxNum_P
 = 
°VícFa˚Cfg
.
u32N‹m16MaxNum
[1];

2180 
	gp°Ad±H265Fa˚Cfg
->
	gu32N‹m32PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32N‹m32PrŸe˘Num
[1];

2181 
	gp°Ad±H265Fa˚Cfg
->
	gu32N‹m16PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32N‹m16PrŸe˘Num
[1];

2182 
	gp°Ad±H265Fa˚Cfg
->
	gu32Skö32MaxNum_P
 = 
°VícFa˚Cfg
.
u32Skö32MaxNum
[1];

2183 
	gp°Ad±H265Fa˚Cfg
->
	gu32Skö16MaxNum_P
 = 
°VícFa˚Cfg
.
u32Skö16MaxNum
[1];

2184 
	gp°Ad±H265Fa˚Cfg
->
	gu32Skö32PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32Skö32PrŸe˘Num
[1];

2185 
	gp°Ad±H265Fa˚Cfg
->
	gu32Skö16PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32Skö16PrŸe˘Num
[1];

2186 
	gp°Ad±H265Fa˚Cfg
->
	gu32Stûl32MaxNum_P
 = 
°VícFa˚Cfg
.
u32Stûl32MaxNum
[1];

2187 
	gp°Ad±H265Fa˚Cfg
->
	gu32Stûl16MaxNum_P
 = 
°VícFa˚Cfg
.
u32Stûl16MaxNum
[1];

2188 
	gp°Ad±H265Fa˚Cfg
->
	gu32Stûl32PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32Stûl32PrŸe˘Num
[1];

2189 
	gp°Ad±H265Fa˚Cfg
->
	gu32Stûl16PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32Stûl16PrŸe˘Num
[1];

2190 
	gp°Ad±H265Fa˚Cfg
->
	gu32Hedge32MaxNum_P
 = 
°VícFa˚Cfg
.
u32Hedge32MaxNum
[1];

2191 
	gp°Ad±H265Fa˚Cfg
->
	gu32Hedge16MaxNum_P
 = 
°VícFa˚Cfg
.
u32Hedge16MaxNum
[1];

2192 
	gp°Ad±H265Fa˚Cfg
->
	gu32Hedge32PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32Hedge32PrŸe˘Num
[1];

2193 
	gp°Ad±H265Fa˚Cfg
->
	gu32Hedge16PrŸe˘Num_P
 = 
°VícFa˚Cfg
.
u32Hedge16PrŸe˘Num
[1];

2196  
	gHI_SUCCESS
;

2199 
HI_S32
 
CommS˚√autoSëH265Fa˚Cfg
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H265_FACE_CFG_S
* 
p°Ad±H265Fa˚Cfg
)

2201 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

2202 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

2203 
VENC_FACE_CFG_S
 
	g°VícFa˚Cfg
;

2205 
	gs32Rë
 = 
HI_MPI_VENC_GëFa˚Cfg
(
VícChn
, &
°VícFa˚Cfg
);

2206 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2208 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

2209  
	gHI_FAILURE
;

2213 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø4RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø4RdCo°_I
;

2214 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø8RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø8RdCo°_I
;

2215 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø16RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø16RdCo°_I
;

2216 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø32RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø32RdCo°_I
;

2217 
	g°VícFa˚Cfg
.
	gu8SköI¡ø4RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø4RdCo°_I
;

2218 
	g°VícFa˚Cfg
.
	gu8SköI¡ø8RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø8RdCo°_I
;

2219 
	g°VícFa˚Cfg
.
	gu8SköI¡ø16RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø16RdCo°_I
;

2220 
	g°VícFa˚Cfg
.
	gu8SköI¡ø32RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø32RdCo°_I
;

2221 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø4RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø4RdCo°_I
;

2222 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø8RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø8RdCo°_I
;

2223 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø16RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø16RdCo°_I
;

2224 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø32RdCo°
[0] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø32RdCo°_I
;

2226 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø4RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø4RdCo°_P
;

2227 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø8RdCo°_P
;

2228 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø16RdCo°_P
;

2229 
	g°VícFa˚Cfg
.
	gu8N‹mI¡ø32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mI¡ø32RdCo°_P
;

2230 
	g°VícFa˚Cfg
.
	gu8SköI¡ø4RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø4RdCo°_P
;

2231 
	g°VícFa˚Cfg
.
	gu8SköI¡ø8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø8RdCo°_P
;

2232 
	g°VícFa˚Cfg
.
	gu8SköI¡ø16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø16RdCo°_P
;

2233 
	g°VícFa˚Cfg
.
	gu8SköI¡ø32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköI¡ø32RdCo°_P
;

2234 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø4RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø4RdCo°_P
;

2235 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø8RdCo°_P
;

2236 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø16RdCo°_P
;

2237 
	g°VícFa˚Cfg
.
	gu8HedgeI¡ø32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeI¡ø32RdCo°_P
;

2239 
	g°VícFa˚Cfg
.
	gu8N‹mFme8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mFme8RdCo°_P
;

2240 
	g°VícFa˚Cfg
.
	gu8N‹mFme16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mFme16RdCo°_P
;

2241 
	g°VícFa˚Cfg
.
	gu8N‹mFme32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mFme32RdCo°_P
;

2242 
	g°VícFa˚Cfg
.
	gu8N‹mFme64RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mFme64RdCo°_P
;

2243 
	g°VícFa˚Cfg
.
	gu8SköFme8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköFme8RdCo°_P
;

2244 
	g°VícFa˚Cfg
.
	gu8SköFme16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköFme16RdCo°_P
;

2245 
	g°VícFa˚Cfg
.
	gu8SköFme32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköFme32RdCo°_P
;

2246 
	g°VícFa˚Cfg
.
	gu8SköFme64RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköFme64RdCo°_P
;

2247 
	g°VícFa˚Cfg
.
	gu8HedgeFme8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeFme8RdCo°_P
;

2248 
	g°VícFa˚Cfg
.
	gu8HedgeFme16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeFme16RdCo°_P
;

2249 
	g°VícFa˚Cfg
.
	gu8HedgeFme32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeFme32RdCo°_P
;

2250 
	g°VícFa˚Cfg
.
	gu8HedgeFme64RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeFme64RdCo°_P
;

2252 
	g°VícFa˚Cfg
.
	gu8N‹mMîg8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mMîg8RdCo°_P
;

2253 
	g°VícFa˚Cfg
.
	gu8N‹mMîg16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mMîg16RdCo°_P
;

2254 
	g°VícFa˚Cfg
.
	gu8N‹mMîg32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mMîg32RdCo°_P
;

2255 
	g°VícFa˚Cfg
.
	gu8N‹mMîg64RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8N‹mMîg64RdCo°_P
;

2256 
	g°VícFa˚Cfg
.
	gu8SköMîg8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköMîg8RdCo°_P
;

2257 
	g°VícFa˚Cfg
.
	gu8SköMîg16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköMîg16RdCo°_P
;

2258 
	g°VícFa˚Cfg
.
	gu8SköMîg32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköMîg32RdCo°_P
;

2259 
	g°VícFa˚Cfg
.
	gu8SköMîg64RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköMîg64RdCo°_P
;

2260 
	g°VícFa˚Cfg
.
	gu8HedgeMîg8RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeMîg8RdCo°_P
;

2261 
	g°VícFa˚Cfg
.
	gu8HedgeMîg16RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeMîg16RdCo°_P
;

2262 
	g°VícFa˚Cfg
.
	gu8HedgeMîg32RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeMîg32RdCo°_P
;

2263 
	g°VícFa˚Cfg
.
	gu8HedgeMîg64RdCo°
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeMîg64RdCo°_P
;

2265 
	g°VícFa˚Cfg
.
	gbSköEn
[0] = 
p°Ad±H265Fa˚Cfg
->
bSköEn_I
;

2266 
	g°VícFa˚Cfg
.
	gu32SköQpDñè
[0] = 
p°Ad±H265Fa˚Cfg
->
u32SköQpDñè_I
;

2267 
	g°VícFa˚Cfg
.
	gu8SköUMax
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköUMax_I
;

2268 
	g°VícFa˚Cfg
.
	gu8SköUMö
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköUMö_I
;

2269 
	g°VícFa˚Cfg
.
	gu8SköVMax
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköVMax_I
;

2270 
	g°VícFa˚Cfg
.
	gu8SköVMö
[0] = 
p°Ad±H265Fa˚Cfg
->
u8SköVMö_I
;

2271 
	g°VícFa˚Cfg
.
	gu32SköNum
[0] = 
p°Ad±H265Fa˚Cfg
->
u32SköNum_I
;

2273 
	g°VícFa˚Cfg
.
	gbSköEn
[1] = 
p°Ad±H265Fa˚Cfg
->
bSköEn_P
;

2274 
	g°VícFa˚Cfg
.
	gu32SköQpDñè
[1] = 
p°Ad±H265Fa˚Cfg
->
u32SköQpDñè_P
;

2275 
	g°VícFa˚Cfg
.
	gu8SköUMax
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköUMax_P
;

2276 
	g°VícFa˚Cfg
.
	gu8SköUMö
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköUMö_P
;

2277 
	g°VícFa˚Cfg
.
	gu8SköVMax
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköVMax_P
;

2278 
	g°VícFa˚Cfg
.
	gu8SköVMö
[1] = 
p°Ad±H265Fa˚Cfg
->
u8SköVMö_P
;

2279 
	g°VícFa˚Cfg
.
	gu32SköNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32SköNum_P
;

2281 
	g°VícFa˚Cfg
.
	gu8HedgeThr
[0] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeThr_I
;

2282 
	g°VícFa˚Cfg
.
	gu8HedgeC¡
[0] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeC¡_I
;

2283 
	g°VícFa˚Cfg
.
	gbSåoEdgeEn
[0] = 
p°Ad±H265Fa˚Cfg
->
bSåoEdgeEn_I
;

2284 
	g°VícFa˚Cfg
.
	gu32SåoEdgeQpDñè
[0] = 
p°Ad±H265Fa˚Cfg
->
u32SåoEdgeQpDñè_I
;

2286 
	g°VícFa˚Cfg
.
	gu8HedgeThr
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeThr_P
;

2287 
	g°VícFa˚Cfg
.
	gu8HedgeC¡
[1] = 
p°Ad±H265Fa˚Cfg
->
u8HedgeC¡_P
;

2288 
	g°VícFa˚Cfg
.
	gbSåoEdgeEn
[1] = 
p°Ad±H265Fa˚Cfg
->
bSåoEdgeEn_P
;

2289 
	g°VícFa˚Cfg
.
	gu32SåoEdgeQpDñè
[1] = 
p°Ad±H265Fa˚Cfg
->
u32SåoEdgeQpDñè_P
;

2291 
	g°VícFa˚Cfg
.
	gbIm¥oveEn
[0] = 
p°Ad±H265Fa˚Cfg
->
bIm¥oveEn_I
;

2293 
	g°VícFa˚Cfg
.
	gbIm¥oveEn
[1] = 
p°Ad±H265Fa˚Cfg
->
bIm¥oveEn_P
;

2294 
	g°VícFa˚Cfg
.
	gu32N‹m32MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32N‹m32MaxNum_P
;

2295 
	g°VícFa˚Cfg
.
	gu32N‹m16MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32N‹m16MaxNum_P
;

2296 
	g°VícFa˚Cfg
.
	gu32N‹m32PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32N‹m32PrŸe˘Num_P
;

2297 
	g°VícFa˚Cfg
.
	gu32N‹m16PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32N‹m16PrŸe˘Num_P
;

2298 
	g°VícFa˚Cfg
.
	gu32Skö32MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Skö32MaxNum_P
;

2299 
	g°VícFa˚Cfg
.
	gu32Skö16MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Skö16MaxNum_P
;

2300 
	g°VícFa˚Cfg
.
	gu32Skö32PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Skö32PrŸe˘Num_P
;

2301 
	g°VícFa˚Cfg
.
	gu32Skö16PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Skö16PrŸe˘Num_P
;

2302 
	g°VícFa˚Cfg
.
	gu32Stûl32MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Stûl32MaxNum_P
;

2303 
	g°VícFa˚Cfg
.
	gu32Stûl16MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Stûl16MaxNum_P
;

2304 
	g°VícFa˚Cfg
.
	gu32Stûl32PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Stûl32PrŸe˘Num_P
;

2305 
	g°VícFa˚Cfg
.
	gu32Stûl16PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Stûl16PrŸe˘Num_P
;

2306 
	g°VícFa˚Cfg
.
	gu32Hedge32MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Hedge32MaxNum_P
;

2307 
	g°VícFa˚Cfg
.
	gu32Hedge16MaxNum
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Hedge16MaxNum_P
;

2308 
	g°VícFa˚Cfg
.
	gu32Hedge32PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Hedge32PrŸe˘Num_P
;

2309 
	g°VícFa˚Cfg
.
	gu32Hedge16PrŸe˘Num
[1] = 
p°Ad±H265Fa˚Cfg
->
u32Hedge16PrŸe˘Num_P
;

2312 
	gs32Rë
 = 
HI_MPI_VENC_SëFa˚Cfg
(
VícChn
, &
°VícFa˚Cfg
);

2313 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2315 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

2316  
	gHI_FAILURE
;

2319  
	gHI_SUCCESS
;

2322 
HI_S32
 
CommS˚√autoGëH265RcP¨am
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H265_RCPARAM_S
* 
p°Ad±H265RCP¨am
)

2324 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

2325 
HI_S32
 
	gi
;

2326 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

2327 
VENC_RC_PARAM_S
 
	g°RCP¨am
;

2328 
VENC_CHN_ATTR_S
 
	g°ChnAâr
;

2329 
	gs32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°ChnAâr
);

2330 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2332 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

2333  
	gHI_FAILURE
;

2335 i‡(
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
 !
VENC_RC_MODE_H265CBR
 && 
°ChnAâr
.
°RcAâr
.
íRcMode
 !
VENC_RC_MODE_H265VBR
)

2337  
HI_SUCCESS
;

2340 
	gs32Rë
 = 
HI_MPI_VENC_GëRcP¨am
(
VícChn
, &
°RCP¨am
);

2341 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2343 
¥ötf
("HI_MPI_VENC_GetRcParam failed\n");

2344  
	gHI_FAILURE
;

2347 
	gp°Ad±H265RCP¨am
->
	gu32QpDñè
 = 
°RCP¨am
.
u32RowQpDñè
;

2349 
	gi
 = 0; i < 12; i++)

2351 
	gp°Ad±H265RCP¨am
->
	gu32ThrdI
[
i
] = 
°RCP¨am
.
u32ThrdI
[i];

2352 
	gp°Ad±H265RCP¨am
->
	gu32ThrdP
[
i
] = 
°RCP¨am
.
u32ThrdP
[i];

2354 
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
)

2356 
	gVENC_RC_MODE_H265CBR
:

2357 
p°Ad±H265RCP¨am
->
s32IPQPDñè
 = 
°RCP¨am
.
°P¨amH265Cbr
.s32IPQPDelta;

2359 
	gVENC_RC_MODE_H265VBR
:

2360 
p°Ad±H265RCP¨am
->
s32IPQPDñè
 = 
°RCP¨am
.
°P¨amH265Vbr
.s32IPQPDelta;

2366  
	gHI_SUCCESS
;

2369 
HI_S32
 
CommS˚√autoSëH265RcP¨am
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H265_RCPARAM_S
* 
p°Ad±H265RCP¨am
)

2371 
HI_S32
 
	gs32Rë
 = 
HI_SUCCESS
;

2372 
HI_S32
 
	gi
;

2373 
VENC_CHN
 
	gVícChn
 = 
s32VícChn
;

2374 
VENC_RC_PARAM_S
 
	g°RCP¨am
;

2375 
VENC_CHN_ATTR_S
 
	g°ChnAâr
;

2376 
	gs32Rë
 = 
HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°ChnAâr
);

2377 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2379 
¥ötf
("HI_MPI_VENC_GetChnAttr failed\n");

2380  
	gHI_FAILURE
;

2382 i‡(
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
 !
VENC_RC_MODE_H265CBR
 && 
°ChnAâr
.
°RcAâr
.
íRcMode
 !
VENC_RC_MODE_H265VBR
)

2384  
HI_SUCCESS
;

2387 
	gs32Rë
 = 
HI_MPI_VENC_GëRcP¨am
(
VícChn
, &
°RCP¨am
);

2388 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2390 
¥ötf
("HI_MPI_VENC_GetRcParam failed\n");

2391  
	gHI_FAILURE
;

2394 
	g°RCP¨am
.
	gu32RowQpDñè
 = 
p°Ad±H265RCP¨am
->
u32QpDñè
;

2395 
	g°ChnAâr
.
	g°RcAâr
.
	gíRcMode
)

2397 
	gVENC_RC_MODE_H265CBR
:

2398 
°RCP¨am
.
°P¨amH265Cbr
.
s32IPQPDñè
 = 
p°Ad±H265RCP¨am
->s32IPQPDelta;

2400 
	gVENC_RC_MODE_H265VBR
:

2401 
°RCP¨am
.
°P¨amH265Vbr
.
s32IPQPDñè
 = 
p°Ad±H265RCP¨am
->s32IPQPDelta;

2406 
	gi
 = 0; i < 12; i++)

2408 
	g°RCP¨am
.
	gu32ThrdI
[
i
] = 
p°Ad±H265RCP¨am
->
u32ThrdI
[i];

2409 
	g°RCP¨am
.
	gu32ThrdP
[
i
] = 
p°Ad±H265RCP¨am
->
u32ThrdP
[i];

2412 
	gs32Rë
 = 
HI_MPI_VENC_SëRcP¨am
(
VícChn
, &
°RCP¨am
);

2413 i‡(
	gHI_SUCCESS
 !
s32Rë
)

2415 
¥ötf
("HI_MPI_VENC_SetRcParam failed\n");

2416  
	gHI_FAILURE
;

2419  
	gHI_SUCCESS
;

2423 #ifde‡
__˝lu•lus


2424 #i‡
__˝lu•lus


	@sample/scene_auto/src/common/hi_srdk_sceneauto.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<±hªad.h
>

4 
	~<sys/¥˘l.h
>

5 
	~"hi_ty≥.h
"

7 
	~"öù¨£r.h
"

8 
	~"hi_s˚√auto_comm.h
"

9 
	~"hi_s˚√auto_comm_ext.h
"

10 
	~"hi_s˚√auto_deföe.h
"

11 
	~"hi_§dk_s˚√auto_deföe_ext.h
"

12 
	~"hi_§dk_s˚√auto_ext.h
"

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	#MAX_LEVEL
 32

	)

24 
di˘i⁄¨y
* 
g_S˚√autodi˘i⁄¨y
 = 
NULL
;

25 
HI_BOOL
 
g_bS˚√autoInô
 = 
HI_FALSE
;

26 
HI_BOOL
 
g_bS˚√autoSèπ
 = 
HI_FALSE
;

27 
HI_BOOL
 
g_bN‹mÆThªadFœg
 = 
HI_FALSE
;

28 
HI_BOOL
 
g_bS≥cülThªadFœg
 = 
HI_FALSE
;

29 
SCENEAUTO_INIPARA_S
 
g_°INIP¨a
;

30 
SCENEAUTO_PREVIOUSPARA_S
 
g_°PªviousP¨a
;

31 
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
 
g_eS≥cülS˚√
;

32 
ADPT_SCENEAUTO_VENC_RCMODE_E
 
g_eVícRcMode
;

34 
±hªad_muãx_t
 
g_°S˚√autoLock
 = 
PTHREAD_MUTEX_INITIALIZER
;

36 
±hªad_t
 
g_±hS˚√AutoN‹mÆ
;

37 
±hªad_t
 
g_±hS˚√AutoS≥cül
;

39 
	#CHECK_SCENEAUTO_INIT
()\

	)

41 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);\

42 i‡(
HI_FALSE
 =
g_bS˚√autoInô
)\

44 
¥ötf
("func:%s,löe:%d,ÖÀa£ inô s˚√autÿfú°!\n",
__FUNCTION__
,
__LINE__
);\

45 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);\

46  
HI_FAILURE
;\

48 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);\

51 
	#CHECK_ISP_RUN
(
chn
Ë\

	)

53 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);\

54 if(
HI_FALSE
 =
g_bS˚√autoSèπ
)\

56 
¥ötf
("func:%s,löe:%d,ÖÀa£ makês˚√autÿru¿!\n",
__FUNCTION__
,
__LINE__
);\

57 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);\

58  
HI_FAILURE
;\

60 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);\

63 
	#CHECK_NULL_PTR
(
±r
)\

	)

65 if(
NULL
 =
±r
)\

67 
¥ötf
("func:%s,löe:%d, NULLÖoöãr\n",
__FUNCTION__
,
__LINE__
);\

68  
HI_FAILURE
;\

72 
__ölöe
 
iClù2
(
x
, 
b
) {{ if (x < 0) x = 0; };{ if (x > b) x = b; };  x; }

73 
__ölöe
 
iMö2
(
a
, 
b
) {{ if (a > b)á = b; }; á; }

74 
__ölöe
 
iMax2
(
a
, 
b
) {{ if (a > b) b =á; };  b; }

75 
MAEWeight
[128];

76 
Weight
(c⁄° * 
b
)

78 c⁄° * 
pszVRBegö
 = 
b
;

79 c⁄° * 
pszVREnd
 = 
pszVRBegö
;

80 
u32Cou¡
 = 0;

81 
ãmp
[20];

82 
mycou¡
 = 0;

83 
Àngth
 = 
°æí
(
b
);

84 
ª
;

85 
mem£t
(
ãmp
, 0, 20);

86 
i
 = 0;

87 
HI_BOOL
 
bx
 = 
HI_FALSE
;

89 (
pszVREnd
 !
NULL
))

91 i‡((
mycou¡
 > 
Àngth
) || (mycount ==Üength))

95 (*
pszVREnd
 != '|') && (*pszVREnd != '\0') && (*pszVREnd != ','))

97 i‡(*
pszVREnd
 == 'x')

99 
bx
 = 
HI_TRUE
;

101 
pszVREnd
++;

102 
u32Cou¡
++;

103 
mycou¡
++;

105 
mem˝y
(
ãmp
, 
pszVRBegö
, 
u32Cou¡
);

107 i‡(
bx
 =
HI_TRUE
)

109 * 
°r
;

110 
ª
 = ()
°πﬁ
(
ãmp
 + 2, &
°r
, 16);

111 
MAEWeight
[
i
] = 
ª
;

116 
MAEWeight
[
i
] = 
©oi
(
ãmp
);

118 
mem£t
(
ãmp
, 0, 20);

119 
u32Cou¡
 = 0;

120 
pszVREnd
++;

121 
pszVRBegö
 = 
pszVREnd
;

122 
mycou¡
++;

123 
i
++;

125  
i
;

128 
HI_S32
 
I¡îpﬁ©i⁄CÆcuœã
(HI_S32 
s32VÆue1
,

129 
HI_S32
 
s32VÆue2
,

130 
HI_S32
 
s32D©a1
,

131 
HI_S32
 
s32D©a2
,

132 
HI_S32
 
s32D©a
)

134 
HI_S32
 
s32Resu…
;

136 i‡(
s32D©a2
 =
s32D©a1
)

138 
s32Resu…
 = 
s32VÆue2
;

142 
s32Resu…
 = ((
s32VÆue2
 - 
s32VÆue1
Ë* (
s32D©a
 - 
s32D©a1
)Ë/ (
s32D©a2
 - s32Data1) + s32Value1;

144  
s32Resu…
;

147 
GëDPsOrDSs
(
S
, 
thªsh
, 
øtio
)

149 
i
 = (((
S
 < 
thªsh
) ? S :Åhresh) << 4);

151 
j
 = ((
øtio
 >32Ë? (
S
 << 4) :

152 ((
øtio
 > 0 ) ? ((
S
 *Ñatio + 1) >> 1) : 0));

154 i‡(
j
 > 
i
) { i = j; }

155  
i
;

158 
M≠MTFS
(*
µ
, *
ps
, c⁄° 
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°3dƒcfg
)

160 i‡(
p°3dƒcfg
 =
NULL
)

162 
¥ötf
("PE is NULL!\n");

163  
HI_FAILURE
;

168 
dp
 = 
GëDPsOrDSs
(
p°3dƒcfg
->
u8SBS
[2],Ö°3dƒcfg->
u8TextThr
,Ö°3dƒcfg->
u8SBT
[2]);

169 
ds
 = 
GëDPsOrDSs
(
p°3dƒcfg
->
u8SDS
[2],Ö°3dƒcfg->
u8TextThr
,Ö°3dƒcfg->
u8SDT
[2]);

170 
k
;

172 i‡–
p°3dƒcfg
->
u8MTFS
 < 128)

174 
k
 = 
iMö2
–
p°3dƒcfg
->
u8MTFS
, 16 );

176 i‡((
p°3dƒcfg
->
u8SBT
[2] > 32Ë|| (p°3dƒcfg->
u8SDT
[2] > 32))

178 
k
 = 0;

182 
i
 = (
iMax2
(
p°3dƒcfg
->
u8SBS
[2],p°3dƒcfg->
u8SDS
[2]Ë<< 4), 
j
 = iMax2(
dp
,
ds
);

183 
k
 = (–(
i
 << 1)+ 
j
 +(1 << 6) ) >> 7);

184 
k
 +(–(
i
 << 1)+(
j
 * 3)+(1 << 8) ) >> 9);

185 
k
 = 
iClù2
( 34 - k * 3, 16 );

188 i‡(
µ
 !
NULL
Ë{ *µ = 
dp
; }

189 i‡(
ps
 !
NULL
Ë{ *p†
ds
; }

191  
k
;

195 
M≠ISO
(
iso
)

197 
j
, 
i
 = (
iso
 >= 200);

198 
i
 +–(
iso
 >= (200 << 1)) + (iso >= (400 << 1)) + (iso >= (400 << 2)) + (iso >= (400 << 3)) + (iso >= (400 << 4)) );

199 
i
 +–(
iso
 >= (400 << 5)) + (iso >= (400 << 6)) + (iso >= (400 << 7)) + (iso >= (400 << 8)) + (iso >= (400 << 9)) );

200 
j
 = ( (
iso
 > (112 << 
i
)) + (iso > (125 << i)) + (iso > (141 << i)) + (iso > (158 << i)) + (iso > (178 << i)) );

201  (
i
 * 6 + 
j
 + (
iso
 >= 25) + (iso >= 50) + (iso >= 100));

203 
HI_VOID
 
I¡îpﬁ©e
(
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°3dƒcfg
, 
HI_U32
 
u32Mid
,

204 c⁄° 
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°L3dƒcfg
, 
HI_U32
 
u32Le·
,

205 c⁄° 
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°R3dƒcfg
, 
HI_U32
 
u32Right
)

207 
k
, 
À·
, 
right
, 
i
 = ((
u32Mid
 > 3Ë? 
M≠ISO
(u32MidË: 
iMö2
(71,-u32Mid));

208 
À·
 = ((
u32Le·
 > 3Ë? 
M≠ISO
(u32Le·Ë: 
iMö2
(71,-u32Le·Ë); i‡(
i
 <À·Ë{ *
p°3dƒcfg
 = *
p°L3dƒcfg
; ; }

209 
right
 = ((
u32Right
 > 3Ë? 
M≠ISO
(u32Right): 
iMö2
(71,-u32Right)); i‡(
i
 >rightË{ *
p°3dƒcfg
 = *
p°R3dƒcfg
; ; }

210 
k
 = (
right
 - 
À·
); *
p°3dƒcfg
 = *(–(
i
+((k * 3Ë>> 2)Ë<ÑighàË? 
p°L3dƒcfg
 : 
p°R3dƒcfg
);

211 i‡(
p°L3dƒcfg
->
u16POST
 =
p°R3dƒcfg
->u16POST)

213 
p°3dƒcfg
->
u16POST
 = 
p°L3dƒcfg
->u16POST;

214 
p°3dƒcfg
->
u16PSFS
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16PSFS + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16PSFS + (
k
 >> 1)) / k );

215 i‡((
p°L3dƒcfg
->
u8SHP
[0] > 64Ë=(
p°R3dƒcfg
->u8SHP[0] > 64))

217 
p°3dƒcfg
->
u8SBS
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SBS[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SBS[0] + (
k
 >> 1)) / k );

218 
p°3dƒcfg
->
u8SDS
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SDS[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SDS[0] + (
k
 >> 1)) / k );

219 
p°3dƒcfg
->
u8SBT
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SBT[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SBT[0] + (
k
 >> 1)) / k );

220 
p°3dƒcfg
->
u8SDT
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SDT[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SDT[0] + (
k
 >> 1)) / k );

221 
p°3dƒcfg
->
u8SHP
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SHP[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SHP[0] + (
k
 >> 1)) / k );

222 
p°3dƒcfg
->
u16TFR
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16TFR[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16TFR[0] + (
k
 >> 1)) / k );

223 
p°3dƒcfg
->
u16TFS
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16TFS[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16TFS[0] + (
k
 >> 1)) / k );

224 
p°3dƒcfg
->
u16MDZ
[0] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16MDZ[0] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16MDZ[0] + (
k
 >> 1)) / k );

226 i‡((
p°L3dƒcfg
->
u8SHP
[1] > 64Ë=(
p°R3dƒcfg
->u8SHP[1] > 64))

228 
p°3dƒcfg
->
u8SBS
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SBS[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SBS[1] + (
k
 >> 1)) / k );

229 
p°3dƒcfg
->
u8SDS
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SDS[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SDS[1] + (
k
 >> 1)) / k );

230 
p°3dƒcfg
->
u8SBT
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SBT[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SBT[1] + (
k
 >> 1)) / k );

231 
p°3dƒcfg
->
u8SDT
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SDT[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SDT[1] + (
k
 >> 1)) / k );

232 
p°3dƒcfg
->
u8SHP
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SHP[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SHP[1] + (
k
 >> 1)) / k );

233 
p°3dƒcfg
->
u16TFR
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16TFR[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16TFR[1] + (
k
 >> 1)) / k );

234 
p°3dƒcfg
->
u16TFS
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16TFS[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16TFS[1] + (
k
 >> 1)) / k );

235 
p°3dƒcfg
->
u16MDZ
[1] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16MDZ[1] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16MDZ[1] + (
k
 >> 1)) / k );

236 
p°3dƒcfg
->
u8Po°ROW
–((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8Po°ROW + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8Po°ROW + (
k
 >> 1)) / k );

238 
p°3dƒcfg
->
u8SBS
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SBS[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SBS[2] + (
k
 >> 1)) / k );

239 
p°3dƒcfg
->
u8SDS
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SDS[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SDS[2] + (
k
 >> 1)) / k );

240 
p°3dƒcfg
->
u8SBT
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SBT[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SBT[2] + (
k
 >> 1)) / k );

241 
p°3dƒcfg
->
u8SDT
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SDT[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SDT[2] + (
k
 >> 1)) / k );

242 
p°3dƒcfg
->
u8SHP
[2] = (–
iMö2
(
p°L3dƒcfg
->u8SHP[2], 64Ë* (
right
 - 
i
) +

243 
iMö2
(
p°R3dƒcfg
->
u8SHP
[2], 64Ë* (
i
 - 
À·
Ë+ (
k
 >> 1) ) / k);

244 
p°3dƒcfg
->
u16TFR
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16TFR[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16TFR[2] + (
k
 >> 1)) / k );

245 
p°3dƒcfg
->
u16TFS
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16TFS[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16TFS[2] + (
k
 >> 1)) / k );

246 
p°3dƒcfg
->
u16MDZ
[2] = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u16MDZ[2] + (ò- 
À·
Ë* 
p°R3dƒcfg
->u16MDZ[2] + (
k
 >> 1)) / k );

247 
p°3dƒcfg
->
u8SFC
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8SFC + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8SFC + (
k
 >> 1)) / k );

248 
p°3dƒcfg
->
u8TFC
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8TFC + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8TFC + (
k
 >> 1)) / k );

249 
p°3dƒcfg
->
u8ExTfThr
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8ExTfTh∏+ (ò- 
À·
Ë* 
p°R3dƒcfg
->u8ExTfTh∏+ (
k
 >> 1)) / k );

250 
p°3dƒcfg
->
u8TextThr
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8TextTh∏+ (ò- 
À·
Ë* 
p°R3dƒcfg
->u8TextTh∏+ (
k
 >> 1)) / k );

251 
p°3dƒcfg
->
u8MDAF
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8MDAF + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8MDAF + (
k
 >> 1)) / k );

252 
p°3dƒcfg
->
u8MABW
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8MABW + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8MABW + (
k
 >> 1)) / k );

253 
p°3dƒcfg
->
u8MATW
 = ( ((
right
 - 
i
Ë* 
p°L3dƒcfg
->u8MATW + (ò- 
À·
Ë* 
p°R3dƒcfg
->u8MATW + (
k
 >> 1)) / k );

254 
p°3dƒcfg
->
u8MTFS
 = (–
M≠MTFS
–
NULL
, NULL, 
p°L3dƒcfg
 ) * (
right
 - 
i
) +

255 
M≠MTFS
–
NULL
, NULL, 
p°R3dƒcfg
 ) * (
i
 - 
À·
Ë+ (
k
 >> 1) ) / k);

259 
HI_S32
 
S˚√Auto_SëDRC
()

261 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

262 
HI_S32
 
s32I•Dev
;

263 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DRCAâr
;

264 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

265 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

266 i‡(
HI_SUCCESS
 !
s32Rë
)

268 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

269  
HI_FAILURE
;

271 
°Ad±DRCAâr
.
bE«bÀ
 = 
g_°INIP¨a
.
°DRC
.
bDRCE«bÀ
;

272 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
g_°INIP¨a
.
°DRC
.
bDRCM™ulE«bÀ
;

273 
°Ad±DRCAâr
.
u32Såígth
 = 
g_°INIP¨a
.
°DRC
.u32Strength;

274 
°Ad±DRCAâr
.
u32Sl›eMax
 = 
g_°INIP¨a
.
°DRC
.u32SlopeMax;

275 
°Ad±DRCAâr
.
u32Sl›eMö
 = 
g_°INIP¨a
.
°DRC
.u32SlopeMin;

276 
°Ad±DRCAâr
.
u32V¨ün˚S∑˚
 = 
g_°INIP¨a
.
°DRC
.u32VarianceSpace;

277 
°Ad±DRCAâr
.
u32V¨ün˚I¡ísôy
 = 
g_°INIP¨a
.
°DRC
.u32VarianceIntensity;

278 
°Ad±DRCAâr
.
u32WhôeLevñ
 = 
g_°INIP¨a
.
°DRC
.u32WhiteLevel;

279 
°Ad±DRCAâr
.
u32BœckLevñ
 = 
g_°INIP¨a
.
°DRC
.u32BlackLevel;

280 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

281 i‡(
HI_SUCCESS
 !
s32Rë
)

283 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

284  
HI_FAILURE
;

286  
HI_SUCCESS
;

288 
HI_S32
 
S˚√Auto_SëDy«mic
()

290 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

291 
HI_S32
 
i
;

292 
HI_S32
 
s32I•Dev
;

293 
ADPT_SCENEAUTO_AEROUTE_S
 
°Ad±AERouã
;

295 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

297 
°Ad±AERouã
.
u32TŸÆNum
 = 
g_°INIP¨a
.
°Fa°Dy«mic
.
s32TŸÆNum
;

298 
i
 = 0; i < 
g_°INIP¨a
.
°Fa°Dy«mic
.
s32TŸÆNum
; i++)

300 
°Ad±AERouã
.
a°RouãNode
[
i
].
u32I¡Time
 = 
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
[i].u32IntTime;

301 
°Ad±AERouã
.
a°RouãNode
[
i
].
u32SysGaö
 = 
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
[i].u32SysGain;

304 
s32Rë
 = 
CommS˚√autoSëAERouã
(
s32I•Dev
, &
°Ad±AERouã
);

305 i‡(
HI_SUCCESS
 !
s32Rë
)

307 
¥ötf
("CommSceneautoSetAERoute failed\n");

308  
HI_FAILURE
;

311  
HI_SUCCESS
;

314 
HI_S32
 
S˚√Auto_SëHLC
()

316 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

317 
HI_S32
 
i
;

318 
HI_S32
 
s32I•Dev
;

319 
HI_S32
 
s32ViDev
;

320 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

321 
ADPT_SCENEAUTO_DCIPARAM_S
 
°Ad±DCIP¨am
;

322 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DRCAâr
;

323 
ADPT_SCENEAUTO_SATURATION_S
 
°Ad±S©uøti⁄
;

324 
ADPT_SCENEAUTO_GAMMA_S
 
°Ad±Gamma
;

325 
ADPT_SCENEAUTO_SHARPEN_S
 
°Ad±Sh¨≥n
;

327 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

328 
s32ViDev
 = 
g_°INIP¨a
.
°MpInfo
.s32ViDev;

331 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

332 i‡(
HI_SUCCESS
 !
s32Rë
)

334 
¥ötf
("CommSceneautoGetAEAttr failed\n");

335  
HI_FAILURE
;

337 
°Ad±AEAâr
.
u8ExpCom≥nßti⁄
 = 
g_°INIP¨a
.
°HLC
.u8ExpCompensation;

338 
°Ad±AEAâr
.
u16BœckDñayFøme
 = 
g_°INIP¨a
.
°HLC
.u16BlackDelayFrame;

339 
°Ad±AEAâr
.
u16WhôeDñayFøme
 = 
g_°INIP¨a
.
°HLC
.u16WhiteDelayFrame;

340 
°Ad±AEAâr
.
u8S≥ed
 = 
g_°INIP¨a
.
°HLC
.u8Speed;

341 
°Ad±AEAâr
.
u8Tﬁî™˚
 = 
g_°INIP¨a
.
°HLC
.u8Tolerance;

342 
°Ad±AEAâr
.
u16Hi°R©ioSl›e
 = 
g_°INIP¨a
.
°HLC
.u16HistRatioSlope;

343 
°Ad±AEAâr
.
u8MaxHi°Off£t
 = 
g_°INIP¨a
.
°HLC
.u8MaxHistOffset;

344 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

345 i‡(
HI_SUCCESS
 !
s32Rë
)

347 
¥ötf
("CommSceneautoSetAEAttr failed\n");

348  
HI_FAILURE
;

352 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨am
);

353 i‡(
HI_SUCCESS
 !
s32Rë
)

355 
¥ötf
("CommSceneautoGetDCIParam failed\n");

356  
HI_FAILURE
;

358 
°Ad±DCIP¨am
.
bE«bÀ
 = 
g_°INIP¨a
.
°HLC
.
bDCIE«bÀ
;

359 
°Ad±DCIP¨am
.
u32BœckGaö
 = 
g_°INIP¨a
.
°HLC
.
u32DCIBœckGaö
;

360 
°Ad±DCIP¨am
.
u32C⁄åa°Gaö
 = 
g_°INIP¨a
.
°HLC
.
u32DCIC⁄åa°Gaö
;

361 
°Ad±DCIP¨am
.
u32LightGaö
 = 
g_°INIP¨a
.
°HLC
.
u32DCILightGaö
;

362 
s32Rë
 = 
CommS˚√autoSëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨am
);

363 i‡(
HI_SUCCESS
 !
s32Rë
)

365 
¥ötf
("CommSceneautoSetDCIParam failed\n");

366  
HI_FAILURE
;

370 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

371 i‡(
HI_SUCCESS
 !
s32Rë
)

373 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

374  
HI_FAILURE
;

376 
°Ad±DRCAâr
.
bE«bÀ
 = 
g_°INIP¨a
.
°HLC
.
bDRCE«bÀ
;

377 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
g_°INIP¨a
.
°HLC
.
bDRCM™ulE«bÀ
;

378 
°Ad±DRCAâr
.
u32Såígth
 = 
g_°INIP¨a
.
°HLC
.
u32DRCSåígthT¨gë
;

379 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

380 i‡(
HI_SUCCESS
 !
s32Rë
)

382 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

383  
HI_FAILURE
;

387 
s32Rë
 = 
CommS˚√autoGëS©uøti⁄
(
s32I•Dev
, &
°Ad±S©uøti⁄
);

388 i‡(
HI_SUCCESS
 !
s32Rë
)

390 
¥ötf
("CommSceneautoGetSaturation failed\n");

391  
HI_FAILURE
;

393 
°Ad±S©uøti⁄
.
u8OpTy≥
 = 0;

394 
i
 = 0; i < 16; i++)

396 
°Ad±S©uøti⁄
.
au8AutoS©
[
i
] = 
g_°INIP¨a
.
°HLC
.
u8S©uøti⁄
[i];

398 
s32Rë
 = 
CommS˚√autoSëS©uøti⁄
(
s32I•Dev
, &
°Ad±S©uøti⁄
);

399 i‡(
HI_SUCCESS
 !
s32Rë
)

401 
¥ötf
("CommSceneautoSetSaturation failed\n");

402  
HI_FAILURE
;

406 
i
 = 0; i < 257; i++)

408 
°Ad±Gamma
.
au16GammaTabÀ
[
i
] = 
g_°INIP¨a
.
°HLC
.
u16GammaTabÀ
[i];

410 
°Ad±Gamma
.
u8CurveTy≥
 = 2;

411 
s32Rë
 = 
CommS˚√autoSëGamma
(
s32I•Dev
, &
°Ad±Gamma
);

412 i‡(
HI_SUCCESS
 !
s32Rë
)

414 
¥ötf
("CommSceneautoSetGamma failed\n");

415  
HI_FAILURE
;

419 
s32Rë
 = 
CommS˚√autoGëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

420 i‡(
HI_SUCCESS
 !
s32Rë
)

422 
¥ötf
("CommSceneautoGetSharpen failed\n");

423  
HI_FAILURE
;

425 
i
 = 0; i < 16; i++)

427 
°Ad±Sh¨≥n
.
au8Sh¨≥nRGB
[
i
] = 
g_°INIP¨a
.
°HLC
.au8SharpenRGB[i];

428 
°Ad±Sh¨≥n
.
au8Sh¨≥nUd
[
i
] = 
g_°INIP¨a
.
°HLC
.au8SharpenUd[i];

430 
s32Rë
 = 
CommS˚√autoSëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

431 i‡(
HI_SUCCESS
 !
s32Rë
)

433 
¥ötf
("CommSceneautoSetSharpen failed\n");

434  
HI_FAILURE
;

436  
HI_SUCCESS
;

439 
HI_S32
 
S˚√Auto_SëIR
()

441 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

442 
HI_S32
 
i
,
j
;

443 
HI_S32
 
s32I•Dev
;

444 
HI_S32
 
s32ViDev
;

445 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

446 
ADPT_SCENEAUTO_DCIPARAM_S
 
°Ad±DCIP¨am
;

447 
ADPT_SCENEAUTO_SATURATION_S
 
°S©uøti⁄
;

448 
ADPT_SCENEAUTO_DEMOSAIC_S
 
°Ad±Demoßic
;

449 
ADPT_SCENEAUTO_SHARPEN_S
 
°Ad±Sh¨≥n
;

450 
ADPT_SCENEAUTO_GAMMA_S
 
°Ad±Gamma
;

451 
ADPT_SCENEAUTO_DP_S
 
°Ad±DP
;

453 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

454 
s32ViDev
 = 
g_°INIP¨a
.
°MpInfo
.s32ViDev;

457 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

458 i‡(
HI_SUCCESS
 !
s32Rë
)

460 
¥ötf
("CommSceneautoGetAEAttr failed\n");

461  
HI_FAILURE
;

464 
°Ad±AEAâr
.
u16Hi°R©ioSl›e
 = 
g_°INIP¨a
.
°IR
.u16HistRatioSlope;

465 
°Ad±AEAâr
.
u16BœckDñayFøme
 = 
g_°INIP¨a
.
°IR
.u16BlackDelayFrame;

466 
°Ad±AEAâr
.
u16WhôeDñayFøme
 = 
g_°INIP¨a
.
°IR
.u16WhiteDelayFrame;

467 
°Ad±AEAâr
.
u8S≥ed
 = 
g_°INIP¨a
.
°IR
.u8Speed;

469 
°Ad±AEAâr
.
u8Tﬁî™˚
 = 
g_°INIP¨a
.
°IR
.u8Tolerance;

470 
i
 = 0; i < 
AE_WEIGHT_ROW
; i++)

472 
j
 = 0; j < 
AE_WEIGHT_COLUMN
; j++)

474 
°Ad±AEAâr
.
au8AeWeight
[
i
][
j
] = 
g_°INIP¨a
.
°IR
.
au8Weight
[i][j];

477 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

478 i‡(
HI_SUCCESS
 !
s32Rë
)

480 
¥ötf
("CommSceneautoSetAEAttr failed\n");

481  
HI_FAILURE
;

484 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨am
);

485 i‡(
HI_SUCCESS
 !
s32Rë
)

487 
¥ötf
("CommSceneautoGetDCIParam failed\n");

488  
HI_FAILURE
;

490 
°Ad±DCIP¨am
.
bE«bÀ
 = 
g_°INIP¨a
.
°IR
.
bDCIE«bÀ
;

491 
°Ad±DCIP¨am
.
u32BœckGaö
 = 
g_°INIP¨a
.
°IR
.
u32DCIBœckGaö
;

492 
°Ad±DCIP¨am
.
u32C⁄åa°Gaö
 = 
g_°INIP¨a
.
°IR
.
u32DCIC⁄åa°Gaö
;

493 
°Ad±DCIP¨am
.
u32LightGaö
 = 
g_°INIP¨a
.
°IR
.
u32DCILightGaö
;

494 
s32Rë
 = 
CommS˚√autoSëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨am
);

495 i‡(
HI_SUCCESS
 !
s32Rë
)

497 
¥ötf
("CommSceneautoSetDCIParam failed\n");

498  
HI_FAILURE
;

500 
s32Rë
 = 
CommS˚√autoGëDP
(
s32ViDev
, &
°Ad±DP
);

501 i‡(
HI_SUCCESS
 !
s32Rë
)

503 
¥ötf
("CommSceneautoGetDP failed\n");

504  
HI_FAILURE
;

506 
°Ad±DP
.
u16Sl›e
 = 
g_°INIP¨a
.
°IR
.u16Slope;

507 
s32Rë
 = 
CommS˚√autoSëDP
(
s32ViDev
, &
°Ad±DP
);

508 i‡(
HI_SUCCESS
 !
s32Rë
)

510 
¥ötf
("CommSceneautoSetDP failed\n");

511  
HI_FAILURE
;

514 
s32Rë
 = 
CommS˚√autoGëS©uøti⁄
(
s32I•Dev
, &
°S©uøti⁄
);

515 i‡(
HI_SUCCESS
 !
s32Rë
)

517 
¥ötf
("CommSceneautoGetSaturation failed\n");

518  
HI_FAILURE
;

520 
°S©uøti⁄
.
u8OpTy≥
 = 1;

521 
°S©uøti⁄
.
u8M™uÆS©
 = 0;

522 
s32Rë
 = 
CommS˚√autoSëS©uøti⁄
(
s32I•Dev
, &
°S©uøti⁄
);

523 i‡(
HI_SUCCESS
 !
s32Rë
)

525 
¥ötf
("CommSceneautoSetSaturation failed\n");

526  
HI_FAILURE
;

529 
s32Rë
 = 
CommS˚√autoGëDemoßic
(
s32I•Dev
, &
°Ad±Demoßic
);

530 i‡(
HI_SUCCESS
 !
s32Rë
)

532 
¥ötf
("CommSceneautoGetDemosaic failed\n");

533  
HI_FAILURE
;

535 
i
 = 0; i < 16; i++)

537 
°Ad±Demoßic
.
au8LumThªsh
[
i
] = 
g_°INIP¨a
.
°IR
.au8LumThresh[i];

539 
s32Rë
 = 
CommS˚√autoSëDemoßic
(
s32I•Dev
, &
°Ad±Demoßic
);

540 i‡(
HI_SUCCESS
 !
s32Rë
)

542 
¥ötf
("CommSceneautoSetDemosaic failed\n");

543  
HI_FAILURE
;

546 
s32Rë
 = 
CommS˚√autoGëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

547 i‡(
HI_SUCCESS
 !
s32Rë
)

549 
¥ötf
("CommSceneautoGetSharpen failed\n");

550  
HI_FAILURE
;

552 
i
 = 0; i < 16; i++)

554 
°Ad±Sh¨≥n
.
au8Sh¨≥nD
[
i
] = 
g_°INIP¨a
.
°IR
.au8SharpenD[i];

555 
°Ad±Sh¨≥n
.
au8Sh¨≥nRGB
[
i
] = 
g_°INIP¨a
.
°IR
.au8SharpenRGB[i];

556 
°Ad±Sh¨≥n
.
au8Sh¨≥nUd
[
i
] = 
g_°INIP¨a
.
°IR
.au8SharpenUd[i];

558 
s32Rë
 = 
CommS˚√autoSëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

559 i‡(
HI_SUCCESS
 !
s32Rë
)

561 
¥ötf
("CommSceneautoSetSharpen failed\n");

562  
HI_FAILURE
;

565 
i
 = 0; i < 257; i++)

567 
°Ad±Gamma
.
au16GammaTabÀ
[
i
] = 
g_°INIP¨a
.
°IR
.
u16GammaTabÀ
[i];

569 
°Ad±Gamma
.
u8CurveTy≥
 = 2;

570 
s32Rë
 = 
CommS˚√autoSëGamma
(
s32I•Dev
, &
°Ad±Gamma
);

571 i‡(
HI_SUCCESS
 !
s32Rë
)

573 
¥ötf
("CommSceneautoSetGamma failed\n");

574  
HI_FAILURE
;

577  
HI_SUCCESS
;

580 
HI_S32
 
S˚√Auto_SëBLC
()

582 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

583 
HI_S32
 
s32I•Dev
;

584 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

586 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

588 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

589 i‡(
HI_SUCCESS
 !
s32Rë
)

591 
¥ötf
("CommSceneautoGetAEAttr failed\n");

592  
HI_FAILURE
;

595 
°Ad±AEAâr
.
u8AESå©egyMode
 = 
g_°INIP¨a
.
°BLC
.u8AEStrategyMode;

596 
°Ad±AEAâr
.
u16Hi°R©ioSl›e
 = 
g_°INIP¨a
.
°BLC
.u16HistRatioSlope;

597 
°Ad±AEAâr
.
u8MaxHi°Off£t
 = 
g_°INIP¨a
.
°BLC
.u8MaxHistOffset;

599 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

600 i‡(
HI_SUCCESS
 !
s32Rë
)

602 
¥ötf
("CommSceneautoSetAEAttr failed\n");

603  
HI_FAILURE
;

606  
HI_SUCCESS
;

609 
HI_S32
 
S˚√Auto_HLCAutoOn
()

611 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

612 
HI_S32
 
i
;

613 
HI_S32
 
s32I•Dev
;

614 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DRCAâr
;

615 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

617 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

618 i‡(
HI_SUCCESS
 !
s32Rë
)

620 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

621  
HI_FAILURE
;

623 
°Ad±DRCAâr
.
bE«bÀ
 = 
HI_FALSE
;

624 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
HI_TRUE
;

625 
°Ad±DRCAâr
.
u32Såígth
 = 0;

626 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

627 i‡(
HI_SUCCESS
 !
s32Rë
)

629 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

630  
HI_FAILURE
;

633 
u¶ìp
(100000);

634 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

635 i‡(
HI_SUCCESS
 !
s32Rë
)

637 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

638  
HI_FAILURE
;

640 
°Ad±DRCAâr
.
bE«bÀ
 = 
HI_TRUE
;

641 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
HI_TRUE
;

642 
°Ad±DRCAâr
.
u32Såígth
 = 0;

643 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

644 i‡(
HI_SUCCESS
 !
s32Rë
)

646 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

647  
HI_FAILURE
;

650 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

651 i‡(
HI_SUCCESS
 !
s32Rë
)

653 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

654  
HI_FAILURE
;

656 
°Ad±DRCAâr
.
bE«bÀ
 = 
HI_TRUE
;

657 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
HI_TRUE
;

658 
°Ad±DRCAâr
.
u32Såígth
 = 0;

659 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

660 i‡(
HI_SUCCESS
 !
s32Rë
)

662 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

663  
HI_FAILURE
;

667 
i
 = 1; i < 128; i++)

669 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

670 i‡(
HI_SUCCESS
 !
s32Rë
)

672 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

673  
HI_FAILURE
;

675 
°Ad±DRCAâr
.
bE«bÀ
 = 
HI_TRUE
;

676 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
HI_TRUE
;

677 
°Ad±DRCAâr
.
u32Såígth
 = 
i
;

678 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

679 i‡(
HI_SUCCESS
 !
s32Rë
)

681 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

682  
HI_FAILURE
;

684 
u¶ìp
(5000);

687  
HI_SUCCESS
;

690 
HI_S32
 
S˚√Auto_HLCAutoOff
()

692 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

693 
HI_S32
 
i
;

694 
HI_S32
 
s32I•Dev
;

695 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DRCAâr
;

696 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

698 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

699 i‡(
HI_SUCCESS
 !
s32Rë
)

701 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

702  
HI_FAILURE
;

705 
i
 = 
°Ad±DRCAâr
.
u32Såígth
; i >= 0; i--)

707 
°Ad±DRCAâr
.
u32Såígth
 = 
i
;

708 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

709 i‡(
HI_SUCCESS
 !
s32Rë
)

711 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

712  
HI_FAILURE
;

714 
u¶ìp
(5000);

717 
°Ad±DRCAâr
.
bE«bÀ
 = 
HI_FALSE
;

718 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
HI_FALSE
;

719 
°Ad±DRCAâr
.
u32Såígth
 = 0;

720 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

721 i‡(
HI_SUCCESS
 !
s32Rë
)

723 
¥ötf
("CommSceneautoSetDRCAttr failed\n");

724  
HI_FAILURE
;

727  
HI_SUCCESS
;

730 
HI_S32
 
S˚√Auto_SëDemoßic
(HI_S32 
s32I•Dev
, HI_S32 
s32DemoßicExpLevñ
, HI_S32 
s32DemoßicBôøãLevñ
)

732 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

733 
ADPT_SCENEAUTO_DEMOSAIC_S
 
°Ad±Demoßic
;

735 
s32Rë
 = 
CommS˚√autoGëDemoßic
(
s32I•Dev
, &
°Ad±Demoßic
);

736 i‡(
HI_SUCCESS
 !
s32Rë
)

738 
¥ötf
("CommSceneautoGetDemosaic failed\n");

739  
HI_FAILURE
;

742 
°Ad±Demoßic
.
u8UuSl›e
 = 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
s32DemoßicBôøãLevñ
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
s32DemoßicExpLevñ
].u8UuSlope;

743 
°Ad±Demoßic
.
u8VaSl›e
 = 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
s32DemoßicBôøãLevñ
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
s32DemoßicExpLevñ
].u8VaSlope;

744 
°Ad±Demoßic
.
u8AaSl›e
 = 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
s32DemoßicBôøãLevñ
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
s32DemoßicExpLevñ
].u8AaSlope;

745 
°Ad±Demoßic
.
u8VhSl›e
 = 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
s32DemoßicBôøãLevñ
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
s32DemoßicExpLevñ
].u8VhSlope;

747 
s32Rë
 = 
CommS˚√autoSëDemoßic
(
s32I•Dev
, &
°Ad±Demoßic
);

748 i‡(
HI_SUCCESS
 !
s32Rë
)

750 
¥ötf
("CommSceneautoSetDemosaic failed\n");

751  
HI_FAILURE
;

754  
HI_SUCCESS
;

757 
HI_S32
 
S˚√Auto_SëAERó…edBô
(HI_S32 
s32I•Dev
, HI_S32 
s32AEBôøãLevñ
)

759 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

760 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

762 i‡((
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 !
g_eS≥cülS˚√
Ë&& (
SRDK_SCENEAUTO_SPECIAL_SCENE_BLC
 !g_eS≥cülS˚√Ë&& (
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
 != g_eSpecialScene))

764 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

765 i‡(
HI_SUCCESS
 !
s32Rë
)

767 
¥ötf
("CommSceneautoGetAEAttr failed\n");

768  
HI_FAILURE
;

771 
°Ad±AEAâr
.
u8S≥ed
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
s32AEBôøãLevñ
].u8Speed;

772 
°Ad±AEAâr
.
u8Tﬁî™˚
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
s32AEBôøãLevñ
].u8Tolerance;

773 
°Ad±AEAâr
.
u16BœckDñayFøme
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
s32AEBôøãLevñ
].u16BlackDelayFrame;

774 
°Ad±AEAâr
.
u16WhôeDñayFøme
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
s32AEBôøãLevñ
].u16WhiteDelayFrame;

775 
°Ad±AEAâr
.
u32SysGaöMax
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
s32AEBôøãLevñ
].u32SysGainMax;

777 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

778 i‡(
HI_SUCCESS
 !
s32Rë
)

780 
¥ötf
("CommSceneautoSetAEAttr failed\n");

781  
HI_FAILURE
;

785  
HI_SUCCESS
;

788 
HI_S32
 
S˚√Auto_SëSh¨≥n
(HI_S32 
s32I•Dev
, HI_S32 
s32Sh¨≥nBôøãLevñ
)

790 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

791 
HI_S32
 
i
;

792 
ADPT_SCENEAUTO_SHARPEN_S
 
°Ad±Sh¨≥n
;

794 i‡((
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 !
g_eS≥cülS˚√
)&&(
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
 != g_eSpecialScene))

796 
s32Rë
 = 
CommS˚√autoGëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

797 i‡(
HI_SUCCESS
 !
s32Rë
)

799 
¥ötf
("CommSceneautoGetSharpen failed\n");

800  
HI_FAILURE
;

803 
i
 = 0; i < 
EXPOSURE_LEVEL
; i++)

805 
°Ad±Sh¨≥n
.
au8Sh¨≥nD
[
i
] = 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
[
s32Sh¨≥nBôøãLevñ
].au8SharpenD[i];

806 
°Ad±Sh¨≥n
.
au8Sh¨≥nRGB
[
i
] = 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
[
s32Sh¨≥nBôøãLevñ
].au8SharpenRGB[i];

807 
°Ad±Sh¨≥n
.
au8Sh¨≥nUd
[
i
] = 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
[
s32Sh¨≥nBôøãLevñ
].au8SharpenUd[i];

810 
s32Rë
 = 
CommS˚√autoSëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

811 i‡(
HI_SUCCESS
 !
s32Rë
)

813 
¥ötf
("CommSceneautoSetSharpen failed\n");

814  
HI_FAILURE
;

818  
HI_SUCCESS
;

821 
HI_S32
 
S˚√Auto_SëH265Fa˚Cfg
(HI_S32 
s32VícChn
, HI_S32 
s32H265Fa˚CfgExpLevñ
, HI_S32 
s32H265Fa˚CfgBôøãLevñ
)

823 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

824 
ADPT_SCENEAUTO_H265_FACE_CFG_S
 
°Ad±H265Fa˚Cfg
;

825 
s32Rë
 = 
CommS˚√autoGëH265Fa˚Cfg
(
s32VícChn
, &
°Ad±H265Fa˚Cfg
);

826 i‡(
HI_SUCCESS
 !
s32Rë
)

828 
¥ötf
("CommSceneautoGetH265FaceCfg failed\n");

829  
HI_FAILURE
;

831 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø4RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra4RdCost_I;

832 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø8RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra8RdCost_I;

833 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø16RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra16RdCost_I;

834 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø32RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra32RdCost_I;

835 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø4RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra4RdCost_I;

836 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø8RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra8RdCost_I;

837 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø16RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra16RdCost_I;

838 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø32RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra32RdCost_I;

839 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø4RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra4RdCost_I;

840 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø8RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra8RdCost_I;

841 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø16RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra16RdCost_I;

842 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø32RdCo°_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra32RdCost_I;

843 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø4RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra4RdCost_P;

844 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra8RdCost_P;

845 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra16RdCost_P;

846 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormIntra32RdCost_P;

847 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø4RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra4RdCost_P;

848 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra8RdCost_P;

849 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra16RdCost_P;

850 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinIntra32RdCost_P;

851 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø4RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra4RdCost_P;

852 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra8RdCost_P;

853 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra16RdCost_P;

854 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeIntra32RdCost_P;

855 
°Ad±H265Fa˚Cfg
.
u8N‹mFme8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormFme8RdCost_P;

856 
°Ad±H265Fa˚Cfg
.
u8N‹mFme16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormFme16RdCost_P;

857 
°Ad±H265Fa˚Cfg
.
u8N‹mFme32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormFme32RdCost_P;

858 
°Ad±H265Fa˚Cfg
.
u8N‹mFme64RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormFme64RdCost_P;

859 
°Ad±H265Fa˚Cfg
.
u8SköFme8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinFme8RdCost_P;

860 
°Ad±H265Fa˚Cfg
.
u8SköFme16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinFme16RdCost_P;

861 
°Ad±H265Fa˚Cfg
.
u8SköFme32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinFme32RdCost_P;

862 
°Ad±H265Fa˚Cfg
.
u8SköFme64RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinFme64RdCost_P;

863 
°Ad±H265Fa˚Cfg
.
u8HedgeFme8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeFme8RdCost_P;

864 
°Ad±H265Fa˚Cfg
.
u8HedgeFme16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeFme16RdCost_P;

865 
°Ad±H265Fa˚Cfg
.
u8HedgeFme32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeFme32RdCost_P;

866 
°Ad±H265Fa˚Cfg
.
u8HedgeFme64RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeFme64RdCost_P;

867 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormMerg8RdCost_P;

868 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormMerg16RdCost_P;

869 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormMerg32RdCost_P;

870 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg64RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8NormMerg64RdCost_P;

871 
°Ad±H265Fa˚Cfg
.
u8SköMîg8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinMerg8RdCost_P;

872 
°Ad±H265Fa˚Cfg
.
u8SköMîg16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinMerg16RdCost_P;

873 
°Ad±H265Fa˚Cfg
.
u8SköMîg32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinMerg32RdCost_P;

874 
°Ad±H265Fa˚Cfg
.
u8SköMîg64RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinMerg64RdCost_P;

875 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg8RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeMerg8RdCost_P;

876 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg16RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeMerg16RdCost_P;

877 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg32RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeMerg32RdCost_P;

878 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg64RdCo°_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeMerg64RdCost_P;

879 
°Ad±H265Fa˚Cfg
.
bSköEn_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].bSkinEn_I;

880 
°Ad±H265Fa˚Cfg
.
u32SköQpDñè_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32SkinQpDelta_I;

881 
°Ad±H265Fa˚Cfg
.
u8SköUMax_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinUMax_I;

882 
°Ad±H265Fa˚Cfg
.
u8SköUMö_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinUMin_I;

883 
°Ad±H265Fa˚Cfg
.
u8SköVMax_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinVMax_I;

884 
°Ad±H265Fa˚Cfg
.
u8SköVMö_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinVMin_I;

885 
°Ad±H265Fa˚Cfg
.
u32SköNum_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32SkinNum_I;

886 
°Ad±H265Fa˚Cfg
.
bSköEn_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].bSkinEn_P;

887 
°Ad±H265Fa˚Cfg
.
u32SköQpDñè_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32SkinQpDelta_P;

888 
°Ad±H265Fa˚Cfg
.
u8SköUMax_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinUMax_P;

889 
°Ad±H265Fa˚Cfg
.
u8SköUMö_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinUMin_P;

890 
°Ad±H265Fa˚Cfg
.
u8SköVMax_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinVMax_P;

891 
°Ad±H265Fa˚Cfg
.
u8SköVMö_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8SkinVMin_P;

892 
°Ad±H265Fa˚Cfg
.
u32SköNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32SkinNum_P;

893 
°Ad±H265Fa˚Cfg
.
u8HedgeThr_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeThr_I;

894 
°Ad±H265Fa˚Cfg
.
u8HedgeC¡_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeCnt_I;

895 
°Ad±H265Fa˚Cfg
.
bSåoEdgeEn_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].bStroEdgeEn_I;

896 
°Ad±H265Fa˚Cfg
.
u32SåoEdgeQpDñè_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32StroEdgeQpDelta_I;

897 
°Ad±H265Fa˚Cfg
.
u8HedgeThr_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeThr_P;

898 
°Ad±H265Fa˚Cfg
.
u8HedgeC¡_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u8HedgeCnt_P;

899 
°Ad±H265Fa˚Cfg
.
bSåoEdgeEn_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].bStroEdgeEn_P;

900 
°Ad±H265Fa˚Cfg
.
u32SåoEdgeQpDñè_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32StroEdgeQpDelta_P;

901 
°Ad±H265Fa˚Cfg
.
bIm¥oveEn_I
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].bImproveEn_I;

902 
°Ad±H265Fa˚Cfg
.
bIm¥oveEn_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].bImproveEn_P;

903 
°Ad±H265Fa˚Cfg
.
u32N‹m32MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Norm32MaxNum_P;

904 
°Ad±H265Fa˚Cfg
.
u32N‹m16MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Norm16MaxNum_P;

905 
°Ad±H265Fa˚Cfg
.
u32N‹m32PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Norm32ProtectNum_P;

906 
°Ad±H265Fa˚Cfg
.
u32N‹m16PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Norm16ProtectNum_P;

907 
°Ad±H265Fa˚Cfg
.
u32Skö32MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Skin32MaxNum_P;

908 
°Ad±H265Fa˚Cfg
.
u32Skö16MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Skin16MaxNum_P;

909 
°Ad±H265Fa˚Cfg
.
u32Skö32PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Skin32ProtectNum_P;

910 
°Ad±H265Fa˚Cfg
.
u32Skö16PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Skin16ProtectNum_P;

911 
°Ad±H265Fa˚Cfg
.
u32Stûl32MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Still32MaxNum_P;

912 
°Ad±H265Fa˚Cfg
.
u32Stûl16MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Still16MaxNum_P;

913 
°Ad±H265Fa˚Cfg
.
u32Stûl32PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Still32ProtectNum_P;

914 
°Ad±H265Fa˚Cfg
.
u32Stûl16PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Still16ProtectNum_P;

915 
°Ad±H265Fa˚Cfg
.
u32Hedge32MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Hedge32MaxNum_P;

916 
°Ad±H265Fa˚Cfg
.
u32Hedge16MaxNum_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Hedge16MaxNum_P;

917 
°Ad±H265Fa˚Cfg
.
u32Hedge32PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Hedge32ProtectNum_P;

918 
°Ad±H265Fa˚Cfg
.
u32Hedge16PrŸe˘Num_P
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
s32H265Fa˚CfgBôøãLevñ
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
s32H265Fa˚CfgExpLevñ
].u32Hedge16ProtectNum_P;

919 
s32Rë
 = 
CommS˚√autoSëH265Fa˚Cfg
(
s32VícChn
, &
°Ad±H265Fa˚Cfg
);

920 i‡(
HI_SUCCESS
 !
s32Rë
)

922 
¥ötf
("CommSceneautoSetH265FaceCfg failed\n");

923  
HI_FAILURE
;

925  
HI_SUCCESS
;

927 
HI_S32
 
S˚√Auto_SëH265RcP¨am
(HI_S32 
s32VícChn
, HI_S32 
s32VícBôøãLevñ
)

929 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

930 
HI_S32
 
i
;

931 
ADPT_SCENEAUTO_H265_RCPARAM_S
 
°Ad±H265RCP¨am
;

932 
s32Rë
 = 
CommS˚√autoGëH265RcP¨am
(
s32VícChn
, &
°Ad±H265RCP¨am
);

933 i‡(
HI_SUCCESS
 !
s32Rë
)

935 
¥ötf
("CommSceneautoGetH265RcParam failed\n");

936  
HI_FAILURE
;

938 
°Ad±H265RCP¨am
.
u32QpDñè
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
s32VícBôøãLevñ
].
u32DñèQP
;

939 
°Ad±H265RCP¨am
.
s32IPQPDñè
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
s32VícBôøãLevñ
].s32IPQPDelta;

940 
i
 = 0; i < 12; i++)

942 
°Ad±H265RCP¨am
.
u32ThrdI
[
i
] = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
s32VícBôøãLevñ
].u32ThrdI[i];

943 
°Ad±H265RCP¨am
.
u32ThrdP
[
i
] = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
s32VícBôøãLevñ
].u32ThrdP[i];

945 
s32Rë
 = 
CommS˚√autoSëH265RcP¨am
(
s32VícChn
, &
°Ad±H265RCP¨am
);

946 i‡(
HI_SUCCESS
 !
s32Rë
)

948 
¥ötf
("CommSceneautoSetH265RcParam failed\n");

949  
HI_FAILURE
;

951  
HI_SUCCESS
;

953 
HI_S32
 
S˚√Auto_SëH264RcP¨am
(HI_S32 
s32VícChn
, HI_S32 
s32VícBôøãLevñ
)

955 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

956 
HI_S32
 
i
;

957 
ADPT_SCENEAUTO_H264_RCPARAM_S
 
°Ad±H264RCP¨am
;

959 
s32Rë
 = 
CommS˚√autoGëH264RcP¨am
(
s32VícChn
, &
°Ad±H264RCP¨am
);

960 i‡(
HI_SUCCESS
 !
s32Rë
)

962 
¥ötf
("CommSceneautoGetH264RcParam failed\n");

963  
HI_FAILURE
;

966 
°Ad±H264RCP¨am
.
u32QpDñè
 = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].
u32DñèQP
;

967 
i
 = 0; i < 12; i++)

969 
°Ad±H264RCP¨am
.
u32ThrdI
[
i
] = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].u32ThrdI[i];

970 
°Ad±H264RCP¨am
.
u32ThrdP
[
i
] = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].u32ThrdP[i];

972 
°Ad±H264RCP¨am
.
s32IPQPDñè
 = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].s32IPQPDelta;

974 
s32Rë
 = 
CommS˚√autoSëH264RcP¨am
(
s32VícChn
, &
°Ad±H264RCP¨am
);

975 i‡(
HI_SUCCESS
 !
s32Rë
)

977 
¥ötf
("CommSceneautoSetH264RcParam failed\n");

978  
HI_FAILURE
;

981  
HI_SUCCESS
;

984 
HI_S32
 
S˚√Auto_SëH264Debﬁck
(HI_S32 
s32VícChn
, HI_S32 
s32VícBôøãLevñ
)

986 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

987 
ADPT_SCENEAUTO_H264_DEBLOCK_S
 
°Ad±H264Deblock
;

989 
s32Rë
 = 
CommS˚√autoGëH24Deblock
(
s32VícChn
, &
°Ad±H264Deblock
);

990 i‡(
HI_SUCCESS
 !
s32Rë
)

992 
¥ötf
("CommSceneautoSetH24Deblock failed\n");

993  
HI_FAILURE
;

996 
°Ad±H264Deblock
.
dißbÀ_deblockög_fûãr_idc
 = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].
°H264Dblk
.disable_deblocking_filter_idc;

997 
°Ad±H264Deblock
.
¶i˚_Æpha_c0_off£t_div2
 = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].
°H264Dblk
.slice_alpha_c0_offset_div2;

998 
°Ad±H264Deblock
.
¶i˚_bëa_off£t_div2
 = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].
°H264Dblk
.slice_beta_offset_div2;

999 
s32Rë
 = 
CommS˚√autoSëH24Deblock
(
s32VícChn
, &
°Ad±H264Deblock
);

1000 i‡(
HI_SUCCESS
 !
s32Rë
)

1002 
¥ötf
("CommSceneautoSetH24Deblock failed\n");

1003  
HI_FAILURE
;

1006  
HI_SUCCESS
;

1009 
HI_S32
 
S˚√Auto_SëH264Tøns
(HI_S32 
s32VícChn
, HI_S32 
s32VícBôøãLevñ
)

1011 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1012 
ADPT_SCENEAUTO_H264TRANS_S
 
°Ad±H264Tøns
;

1014 
s32Rë
 = 
CommS˚√autoGëH264Tøns
(
s32VícChn
, &
°Ad±H264Tøns
);

1015 i‡(
HI_SUCCESS
 !
s32Rë
)

1017 
¥ötf
("CommSceneautoGetH264Trans failed\n");

1018  
HI_FAILURE
;

1021 
°Ad±H264Tøns
.
chroma_qp_ödex_off£t
 = 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
s32VícBôøãLevñ
].
s32chroma_qp_ödex_off£t
;

1022 
s32Rë
 = 
CommS˚√autoSëH264Tøns
(
s32VícChn
, &
°Ad±H264Tøns
);

1023 i‡(
HI_SUCCESS
 !
s32Rë
)

1025 
¥ötf
("CommSceneautoSetH264Trans failed\n");

1026  
HI_FAILURE
;

1029  
HI_SUCCESS
;

1032 
HI_S32
 
S˚√Auto_SëDP
(HI_S32 
s32I•Dev
, HI_S32 
s32DpExpLevñ
)

1034 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1035 
ADPT_SCENEAUTO_DP_S
 
°Ad±Dp
;

1037 i‡((
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 !
g_eS≥cülS˚√
))

1039 
s32Rë
 = 
CommS˚√autoGëDP
(
s32I•Dev
, &
°Ad±Dp
);

1040 i‡(
HI_SUCCESS
 !
s32Rë
)

1042 
¥ötf
("CommSceneautoGetDP failed\n");

1043  
HI_FAILURE
;

1046 
°Ad±Dp
.
u16Sl›e
 = 
g_°INIP¨a
.
°IniDP
.
p°DPAâr
[
s32DpExpLevñ
].u16Slope;

1047 
s32Rë
 = 
CommS˚√autoSëDP
(
s32I•Dev
, &
°Ad±Dp
);

1048 i‡(
HI_SUCCESS
 !
s32Rë
)

1050 
¥ötf
("CommSceneautoSetDP failed\n");

1051  
HI_FAILURE
;

1054  
HI_SUCCESS
;

1057 
HI_S32
 
S˚√Auto_SëGamma
(HI_S32 
s32I•Dev
, HI_S32 
s32GammaExpLevñ
, HI_S32 
s32La°GammaExpLevñ
)

1059 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1060 
HI_U32
 
u32Temp
;

1061 
HI_S32
 
i
, 
j
;

1062 
ADPT_SCENEAUTO_GAMMA_S
 
°Ad±Gamma
;

1064 i‡((
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 !
g_eS≥cülS˚√
Ë&& (
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
 != g_eSpecialScene))

1066 
j
 = 0; j < 
g_°INIP¨a
.
°IniGamma
.
s32I¡îvÆ
; j++)

1068 
i
 = 0; i < 257; i++)

1070 i‡(
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
s32La°GammaExpLevñ
].
u16TabÀ
[
i
] > g_°INIP¨a.°IniGamma.p°Gamma[
s32GammaExpLevñ
].u16Table[i])

1072 
u32Temp
 = ((
HI_U32
)(
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
s32La°GammaExpLevñ
].
u16TabÀ
[
i
] - g_°INIP¨a.°IniGamma.p°Gamma[
s32GammaExpLevñ
].u16Table[i])) << 8;

1073 
u32Temp
 = (u32Tem∞* (
j
 + 1)Ë/ 
g_°INIP¨a
.
°IniGamma
.
s32I¡îvÆ
;

1074 
u32Temp
 = u32Temp >> 8;

1075 
°Ad±Gamma
.
au16GammaTabÀ
[
i
] = 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
s32La°GammaExpLevñ
].
u16TabÀ
[i] - (
HI_U32
)
u32Temp
;

1079 
u32Temp
 = ((
HI_U32
)(
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
s32GammaExpLevñ
].
u16TabÀ
[
i
] - g_°INIP¨a.°IniGamma.p°Gamma[
s32La°GammaExpLevñ
].u16Table[i])) << 8;

1080 
u32Temp
 = (u32Tem∞* (
j
 + 1)Ë/ 
g_°INIP¨a
.
°IniGamma
.
s32I¡îvÆ
;

1081 
u32Temp
 = u32Temp >> 8;

1082 
°Ad±Gamma
.
au16GammaTabÀ
[
i
] = 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
s32La°GammaExpLevñ
].
u16TabÀ
[i] + (
HI_U32
)
u32Temp
;

1085 
°Ad±Gamma
.
u8CurveTy≥
 = 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
s32GammaExpLevñ
].u8CurveType;

1087 
s32Rë
 = 
CommS˚√autoSëGamma
(
s32I•Dev
, &
°Ad±Gamma
);

1088 i‡(
HI_SUCCESS
 !
s32Rë
)

1090 
¥ötf
("CommSceneautoSetGamma failed\n");

1091  
HI_FAILURE
;

1093 
u¶ìp
(80000);

1096  
HI_SUCCESS
;

1098 
HI_S32
 
S˚√Auto_SëDeÁu…Gamma
()

1100 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1101 
HI_S32
 
i
;

1102 
ADPT_SCENEAUTO_GAMMA_S
 
°Ad±Gamma
;

1103 
HI_S32
 
s32I•Dev
;

1105 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

1107 
i
 = 0; i < 257; i++)

1109 
°Ad±Gamma
.
au16GammaTabÀ
[
i
] = 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[0].
u16TabÀ
[i];

1111 
°Ad±Gamma
.
u8CurveTy≥
 = 2;

1113 
s32Rë
 = 
CommS˚√autoSëGamma
(
s32I•Dev
, &
°Ad±Gamma
);

1114 i‡(
HI_SUCCESS
 !
s32Rë
)

1116 
¥ötf
("CommSceneautoSetGamma failed\n");

1117  
HI_FAILURE
;

1120  
HI_SUCCESS
;

1123 
HI_S32
 
S˚«uto_SëIRAERó…edExp
(HI_S32 
s32I•Dev
, HI_S32 
s32IRAECurPos
)

1125 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1126 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

1128 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

1129 i‡(
HI_SUCCESS
 !
s32Rë
)

1131 
¥ötf
("CommSceneautoGetAEAttr failed\n");

1132  
HI_FAILURE
;

1135 
°Ad±AEAâr
.
u8ExpCom≥nßti⁄
 = 
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
[
s32IRAECurPos
];

1136 
°Ad±AEAâr
.
u8MaxHi°Off£t
 = 
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
[
s32IRAECurPos
];

1138 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

1139 i‡(
HI_SUCCESS
 !
s32Rë
)

1141 
¥ötf
("CommSceneautoSetAEAttr failed\n");

1142  
HI_FAILURE
;

1145  
HI_SUCCESS
;

1148 
HI_S32
 
S˚«uto_SëAERó…edExp
(HI_S32 
s32I•Dev
, HI_S32 
s32AECurPos
)

1150 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1151 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

1153 i‡((
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 !
g_eS≥cülS˚√
Ë&& (
SRDK_SCENEAUTO_SPECIAL_SCENE_BLC
 !g_eS≥cülS˚√Ë&& (
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
 != g_eSpecialScene))

1155 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

1156 i‡(
HI_SUCCESS
 !
s32Rë
)

1158 
¥ötf
("CommSceneautoGetAEAttr failed\n");

1159  
HI_FAILURE
;

1162 
°Ad±AEAâr
.
u8ExpCom≥nßti⁄
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
[
s32AECurPos
].
u8AECom≥ßti⁄
;

1163 
°Ad±AEAâr
.
u8MaxHi°Off£t
 = 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
[
s32AECurPos
].
u8AEHi°Off£t
;;

1165 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

1166 i‡(
HI_SUCCESS
 !
s32Rë
)

1168 
¥ötf
("CommSceneautoSetAEAttr failed\n");

1169  
HI_FAILURE
;

1173  
HI_SUCCESS
;

1176 
HI_S32
 
S˚√auto_Së3DNR
(
HI_U32
 
s32VpssGΩ
, 
SCENEAUTO_INIPARAM_3DNRCFG_S
 
°S˚√auto3dƒ
)

1178 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1179 
HI_S32
 
s32Index
;

1180 
ADPT_SCENEAUTO_3DNR
 
°Ad±S˚√auto3dƒ
;

1182 
°Ad±S˚√auto3dƒ
.
u8SFC
 = 
°S˚√auto3dƒ
.u8SFC;

1183 
°Ad±S˚√auto3dƒ
.
u8TFC
 = 
°S˚√auto3dƒ
.u8TFC;

1184 
°Ad±S˚√auto3dƒ
.
u16PSFS
 = 
°S˚√auto3dƒ
.u16PSFS;

1185 
°Ad±S˚√auto3dƒ
.
u16POST
 = 
°S˚√auto3dƒ
.u16POST;

1186 
s32Index
 = 0; s32Index < 3; s32Index++)

1188 
°Ad±S˚√auto3dƒ
.
u8SBS
[
s32Index
] = 
°S˚√auto3dƒ
.u8SBS[s32Index];

1189 
°Ad±S˚√auto3dƒ
.
u8SBT
[
s32Index
] = 
°S˚√auto3dƒ
.u8SBT[s32Index];

1190 
°Ad±S˚√auto3dƒ
.
u8SDS
[
s32Index
] = 
°S˚√auto3dƒ
.u8SDS[s32Index];

1191 
°Ad±S˚√auto3dƒ
.
u8SDT
[
s32Index
] = 
°S˚√auto3dƒ
.u8SDT[s32Index];

1192 
°Ad±S˚√auto3dƒ
.
u8SHP
[
s32Index
] = 
°S˚√auto3dƒ
.u8SHP[s32Index];

1193 
°Ad±S˚√auto3dƒ
.
u16TFS
[
s32Index
] = 
°S˚√auto3dƒ
.u16TFS[s32Index];

1194 
°Ad±S˚√auto3dƒ
.
u16TFR
[
s32Index
] = 
°S˚√auto3dƒ
.u16TFR[s32Index];

1195 
°Ad±S˚√auto3dƒ
.
u16SBF
[
s32Index
] = 
°S˚√auto3dƒ
.u16SBF[s32Index];

1196 
°Ad±S˚√auto3dƒ
.
u16MDZ
[
s32Index
] = 
°S˚√auto3dƒ
.u16MDZ[s32Index];

1199 
°Ad±S˚√auto3dƒ
.
u8MABW
 = 
°S˚√auto3dƒ
.u8MABW;

1200 
°Ad±S˚√auto3dƒ
.
u8Po°ROW
 = 
°S˚√auto3dƒ
.u8PostROW;

1201 
°Ad±S˚√auto3dƒ
.
u8MATW
 = 
°S˚√auto3dƒ
.u8MATW;

1202 
°Ad±S˚√auto3dƒ
.
u8MDAF
 = 
°S˚√auto3dƒ
.u8MDAF;

1203 
°Ad±S˚√auto3dƒ
.
u8TextThr
 = 
°S˚√auto3dƒ
.u8TextThr;

1204 
°Ad±S˚√auto3dƒ
.
u8MTFS
 = 
°S˚√auto3dƒ
.u8MTFS;

1205 
°Ad±S˚√auto3dƒ
.
u8ExTfThr
 = 
°S˚√auto3dƒ
.u8ExTfThr;

1207 
s32Rë
 = 
CommS˚√autoSë3DNR
(
s32VpssGΩ
, &
°Ad±S˚√auto3dƒ
);

1208 i‡(
HI_SUCCESS
 !
s32Rë
)

1210 
¥ötf
("CommSceneautoSet3DNR failed\n");

1211  
HI_FAILURE
;

1213  
HI_SUCCESS
;

1216 
HI_S32
 
S˚√auto_IVESt›
()

1218 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1220 
s32Rë
 = 
CommS˚√autoIVESt›
();

1221 i‡(
HI_SUCCESS
 !
s32Rë
)

1223 
¥ötf
("CommSceneautoIVEStop failed\n");

1224  
HI_FAILURE
;

1227  
HI_SUCCESS
;

1230 
HI_S32
 
S˚√auto_IVESèπ
()

1232 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1233 
HI_S32
 
s32VpssGΩ
;

1234 
HI_S32
 
s32VpssChn
;

1236 
s32VpssGΩ
 = 
g_°INIP¨a
.
°MpInfo
.s32VpssGrp;

1237 
s32VpssChn
 = 
g_°INIP¨a
.
°MpInfo
.s32VpssChn;

1238 
s32Rë
 = 
CommS˚√autoIVESèπ
(
s32VpssGΩ
, 
s32VpssChn
);

1239 i‡(
HI_SUCCESS
 !
s32Rë
)

1241 
¥ötf
("CommSceneautoIVEStart failed\n");

1242  
HI_FAILURE
;

1245  
HI_SUCCESS
;

1248 
HI_S32
 
S˚√Auto_SëAERouã
()

1250 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1251 
HI_S32
 
i
;

1252 
HI_S32
 
s32I•Dev
;

1253 
ADPT_SCENEAUTO_AEROUTE_S
 
°Ad±AERouã
;

1255 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

1258 
°Ad±AERouã
.
u32TŸÆNum
 = 
g_°INIP¨a
.
°N‹mÆDy«mic
.
s32TŸÆNum
;

1259 
i
 = 0; i < 
g_°INIP¨a
.
°N‹mÆDy«mic
.
s32TŸÆNum
; i++)

1261 
°Ad±AERouã
.
a°RouãNode
[
i
].
u32I¡Time
 = 
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
[i].u32IntTime;

1262 
°Ad±AERouã
.
a°RouãNode
[
i
].
u32SysGaö
 = 
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
[i].u32SysGain;

1265 
s32Rë
 = 
CommS˚√autoSëAERouã
(
s32I•Dev
, &
°Ad±AERouã
);

1266 i‡(
HI_SUCCESS
 !
s32Rë
)

1268 
¥ötf
("CommSceneautoSetAERoute failed\n");

1269  
HI_FAILURE
;

1272  
HI_SUCCESS
;

1275 
HI_S32
 
S˚√Auto_SëPªviousP¨a
()

1277 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1278 
HI_S32
 
i
,
j
;

1279 
HI_S32
 
s32I•Dev
;

1280 
HI_S32
 
s32ViDev
;

1281 
HI_S32
 
s32VícChn
;

1282 
ADPT_SCENEAUTO_DEMOSAIC_S
 
°Ad±Demoßic
;

1283 
ADPT_SCENEAUTO_SHARPEN_S
 
°Ad±Sh¨≥n
;

1284 
ADPT_SCENEAUTO_DP_S
 
°Ad±DP
;

1285 
ADPT_SCENEAUTO_GAMMA_S
 
°Ad±Gamma
;

1286 
ADPT_SCENEAUTO_H264_DEBLOCK_S
 
°Ad±H264Deblock
;

1287 
ADPT_SCENEAUTO_H264TRANS_S
 
°Ad±H264Tøns
;

1288 
ADPT_SCENEAUTO_H264_RCPARAM_S
 
°Ad±H264RcP¨am
;

1289 
ADPT_SCENEAUTO_H265_RCPARAM_S
 
°Ad±H265RcP¨am
;

1290 
ADPT_SCENEAUTO_H265_FACE_CFG_S
 
°Ad±H265Fa˚Cfg
;

1291 
ADPT_SCENEAUTO_AEROUTE_S
 
°Ad±AERouã
;

1292 
ADPT_SCENEAUTO_DCIPARAM_S
 
°Ad±DCIP¨a
;

1293 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DRCAâr
;

1294 
ADPT_SCENEAUTO_SATURATION_S
 
°Ad±S©uøti⁄
;

1295 
ADPT_SCENEAUTO_DIS_ATTR_S
 
°Ad±DISAâr
;

1296 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

1297 
ADPT_SCENEAUTO_VENC_ATTR_S
 
°Ad±VícAâr
;

1298 
ADPT_SCENEAUTO_CCM_ATTR_S
 
°Ad±CcmAâr
;

1299 
ADPT_SCENEAUTO_ACM_ATTR_S
 
°Ad±AcmAâr
;

1301 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

1302 
s32ViDev
 = 
g_°INIP¨a
.
°MpInfo
.s32ViDev;

1303 
s32VícChn
 = 
g_°INIP¨a
.
°MpInfo
.s32VencChn;

1306 
°Ad±Demoßic
.
u8AaSl›e
 = 
g_°PªviousP¨a
.
°Demoßic
.u8AaSlope;

1307 
°Ad±Demoßic
.
u8UuSl›e
 = 
g_°PªviousP¨a
.
°Demoßic
.u8UuSlope;

1308 
°Ad±Demoßic
.
u8VaSl›e
 = 
g_°PªviousP¨a
.
°Demoßic
.u8VaSlope;

1309 
°Ad±Demoßic
.
u8VhSl›e
 = 
g_°PªviousP¨a
.
°Demoßic
.u8VhSlope;

1310 
i
 = 0; i < 16; i++)

1312 
°Ad±Demoßic
.
au8LumThªsh
[
i
] = 
g_°PªviousP¨a
.
°Demoßic
.au8LumThresh[i];

1314 
s32Rë
 = 
CommS˚√autoSëDemoßic
(
s32I•Dev
, &
°Ad±Demoßic
);

1315 i‡(
HI_SUCCESS
 !
s32Rë
)

1317 
¥ötf
("Adpt_GetDemosaic failed\n");

1318  
HI_FAILURE
;

1322 
i
 = 0; i < 16; i++)

1324 
°Ad±Sh¨≥n
.
au8Sh¨≥nD
[
i
] = 
g_°PªviousP¨a
.
°Sh¨≥n
.au8SharpenD[i];

1325 
°Ad±Sh¨≥n
.
au8Sh¨≥nRGB
[
i
] = 
g_°PªviousP¨a
.
°Sh¨≥n
.au8SharpenRGB[i];

1326 
°Ad±Sh¨≥n
.
au8Sh¨≥nUd
[
i
] = 
g_°PªviousP¨a
.
°Sh¨≥n
.au8SharpenUd[i];

1328 
s32Rë
 = 
CommS˚√autoSëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

1329 i‡(
HI_SUCCESS
 !
s32Rë
)

1331 
¥ötf
("Adpt_GetDemosaic failed\n");

1332  
HI_FAILURE
;

1336 
°Ad±DP
.
u16Sl›e
 = 
g_°PªviousP¨a
.
°DP
.u16Slope;

1337 
s32Rë
 = 
CommS˚√autoSëDP
(
s32I•Dev
, &
°Ad±DP
);

1338 i‡(
HI_SUCCESS
 !
s32Rë
)

1340 
¥ötf
("CommSceneautoGetDP failed\n");

1341  
HI_FAILURE
;

1345 
°Ad±Gamma
.
u8CurveTy≥
 = 
g_°PªviousP¨a
.
°Gamma
.u8CurveType;

1346 
i
 = 0 ; i < 257; i++)

1348 
°Ad±Gamma
.
au16GammaTabÀ
[
i
] = 
g_°PªviousP¨a
.
°Gamma
.
u16TabÀ
[i];

1350 
s32Rë
 = 
CommS˚√autoSëGamma
(
s32I•Dev
, &
°Ad±Gamma
);

1351 i‡(
HI_SUCCESS
 !
s32Rë
)

1353 
¥ötf
("CommSceneautoGetGamma failed\n");

1354  
HI_FAILURE
;

1358 
°Ad±CcmAâr
.
u16HighCﬁ‹Temp
 = 
g_°PªviousP¨a
.
°Ccm
.u16HighColorTemp;

1359 
°Ad±CcmAâr
.
u16MidCﬁ‹Temp
 = 
g_°PªviousP¨a
.
°Ccm
.u16MidColorTemp;

1360 
°Ad±CcmAâr
.
u16LowCﬁ‹Temp
 = 
g_°PªviousP¨a
.
°Ccm
.u16LowColorTemp;

1361 
i
 = 0; i < 9; i++)

1363 
°Ad±CcmAâr
.
au16HighCCM
[
i
] = 
g_°PªviousP¨a
.
°Ccm
.au16HighCCM[i];

1364 
°Ad±CcmAâr
.
au16MidCCM
[
i
] = 
g_°PªviousP¨a
.
°Ccm
.au16MidCCM[i];

1365 
°Ad±CcmAâr
.
au16LowCCM
[
i
] = 
g_°PªviousP¨a
.
°Ccm
.au16LowCCM[i];

1367 
s32Rë
 = 
CommS˚√autoSëCcmAâr
(
s32I•Dev
, &
°Ad±CcmAâr
);

1368 i‡(
HI_SUCCESS
 !
s32Rë
)

1370 
¥ötf
("CommSceneautoGetCcmAttr failed\n");

1371  
HI_FAILURE
;

1375 
°Ad±AcmAâr
.
bE«bÀ
 = 
g_°PªviousP¨a
.
°Acm
.bEnable;

1376 
°Ad±AcmAâr
.
u32Cb¸Thr
 = 
g_°PªviousP¨a
.
°Acm
.u32CbcrThr;

1377 
°Ad±AcmAâr
.
u32GaöHue
 = 
g_°PªviousP¨a
.
°Acm
.u32GainHue;

1378 
°Ad±AcmAâr
.
u32GaöLuma
 = 
g_°PªviousP¨a
.
°Acm
.u32GainLuma;

1379 
°Ad±AcmAâr
.
u32GaöS©
 = 
g_°PªviousP¨a
.
°Acm
.u32GainSat;

1380 
s32Rë
 = 
CommS˚√autoSëAcmAâr
(
s32I•Dev
, &
°Ad±AcmAâr
);

1381 i‡(
HI_SUCCESS
 !
s32Rë
)

1383 
¥ötf
("CommSceneautoGetAcmAttr failed\n");

1384  
HI_FAILURE
;

1388 
g_eVícRcMode
)

1390 
ADPT_SCENEAUTO_RCMODE_H264
:

1391 
s32Rë
 = 
CommS˚√autoGëVícAâr
(
s32VícChn
, &
°Ad±VícAâr
);

1392 i‡(
HI_SUCCESS
 !
s32Rë
)

1394 
¥ötf
("CommSceneautoGetVencAttr failed\n");

1395  
HI_FAILURE
;

1397 i‡(
ADPT_SCENEAUTO_RCMODE_H264
 =
°Ad±VícAâr
.
eRcMode
)

1399 
°Ad±H264Deblock
.
dißbÀ_deblockög_fûãr_idc
 = 
g_°PªviousP¨a
.
°H264Víc
.
°H264Dblk
.disable_deblocking_filter_idc;

1400 
°Ad±H264Deblock
.
¶i˚_Æpha_c0_off£t_div2
 = 
g_°PªviousP¨a
.
°H264Víc
.
°H264Dblk
.slice_alpha_c0_offset_div2;

1401 
°Ad±H264Deblock
.
¶i˚_bëa_off£t_div2
 = 
g_°PªviousP¨a
.
°H264Víc
.
°H264Dblk
.slice_beta_offset_div2;

1402 
s32Rë
 = 
CommS˚√autoSëH24Deblock
(
s32VícChn
, &
°Ad±H264Deblock
);

1403 i‡(
HI_SUCCESS
 !
s32Rë
)

1405 
¥ötf
("CommSceneautoSetH24Deblock failed\n");

1406  
HI_FAILURE
;

1409 
°Ad±H264Tøns
.
chroma_qp_ödex_off£t
 = 
g_°PªviousP¨a
.
°H264Víc
.
s32chroma_qp_ödex_off£t
;

1410 
s32Rë
 = 
CommS˚√autoSëH264Tøns
(
s32VícChn
, &
°Ad±H264Tøns
);

1411 i‡(
HI_SUCCESS
 !
s32Rë
)

1413 
¥ötf
("CommSceneautoSetH264Trans failed\n");

1414  
HI_FAILURE
;

1417 
°Ad±H264RcP¨am
.
s32IPQPDñè
 = 
g_°PªviousP¨a
.
°H264Víc
.s32IPQPDelta;

1418 
°Ad±H264RcP¨am
.
u32QpDñè
 = 
g_°PªviousP¨a
.
°H264Víc
.
u32DñèQP
;

1419 
i
 = 0; i < 12; i++)

1421 
°Ad±H264RcP¨am
.
u32ThrdI
[
i
] = 
g_°PªviousP¨a
.
°H264Víc
.u32ThrdI[i];

1422 
°Ad±H264RcP¨am
.
u32ThrdP
[
i
] = 
g_°PªviousP¨a
.
°H264Víc
.u32ThrdP[i];

1424 
s32Rë
 = 
CommS˚√autoSëH264RcP¨am
(
s32VícChn
, &
°Ad±H264RcP¨am
);

1425 i‡(
HI_SUCCESS
 !
s32Rë
)

1427 
¥ötf
("CommSceneautoSetH264RcParam failed\n");

1428  
HI_FAILURE
;

1432 
ADPT_SCENEAUTO_RCMODE_H265
:

1433 
s32Rë
 = 
CommS˚√autoGëVícAâr
(
s32VícChn
, &
°Ad±VícAâr
);

1434 i‡(
HI_SUCCESS
 !
s32Rë
)

1436 
¥ötf
("CommSceneautoGetVencAttr failed\n");

1437  
HI_FAILURE
;

1439 i‡(
ADPT_SCENEAUTO_RCMODE_H265
 =
°Ad±VícAâr
.
eRcMode
)

1441 
°Ad±H265RcP¨am
.
u32QpDñè
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.
u32DñèQP
;

1442 
°Ad±H265RcP¨am
.
s32IPQPDñè
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.s32IPQPDelta;

1443 
i
 = 0; i < 12; i++)

1445 
°Ad±H265RcP¨am
.
u32ThrdI
[
i
] = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.u32ThrdI[i];

1446 
°Ad±H265RcP¨am
.
u32ThrdP
[
i
] = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.u32ThrdP[i];

1448 
s32Rë
 = 
CommS˚√autoSëH265RcP¨am
(
s32VícChn
, &
°Ad±H265RcP¨am
);

1449 i‡(
HI_SUCCESS
 !
s32Rë
)

1451 
¥ötf
("CommSceneautoGetH265RcParam failed\n");

1452  
HI_FAILURE
;

1455 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø4RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra4RdCost_I;

1456 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø8RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra8RdCost_I;

1457 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø16RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra16RdCost_I;

1458 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø32RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra32RdCost_I;

1459 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø4RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra4RdCost_I;

1460 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø8RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra8RdCost_I;

1461 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø16RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra16RdCost_I;

1462 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø32RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra32RdCost_I;

1463 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø4RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra4RdCost_I;

1464 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø8RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra8RdCost_I;

1465 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø16RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra16RdCost_I;

1466 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø32RdCo°_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra32RdCost_I;

1467 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø4RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra4RdCost_P;

1468 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra8RdCost_P;

1469 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra16RdCost_P;

1470 
°Ad±H265Fa˚Cfg
.
u8N‹mI¡ø32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormIntra32RdCost_P;

1471 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø4RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra4RdCost_P;

1472 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra8RdCost_P;

1473 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra16RdCost_P;

1474 
°Ad±H265Fa˚Cfg
.
u8SköI¡ø32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinIntra32RdCost_P;

1475 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø4RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra4RdCost_P;

1476 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra8RdCost_P;

1477 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra16RdCost_P;

1478 
°Ad±H265Fa˚Cfg
.
u8HedgeI¡ø32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeIntra32RdCost_P;

1479 
°Ad±H265Fa˚Cfg
.
u8N‹mFme8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormFme8RdCost_P;

1480 
°Ad±H265Fa˚Cfg
.
u8N‹mFme16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormFme16RdCost_P;

1481 
°Ad±H265Fa˚Cfg
.
u8N‹mFme32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormFme32RdCost_P;

1482 
°Ad±H265Fa˚Cfg
.
u8N‹mFme64RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormFme64RdCost_P;

1483 
°Ad±H265Fa˚Cfg
.
u8SköFme8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinFme8RdCost_P;

1484 
°Ad±H265Fa˚Cfg
.
u8SköFme16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinFme16RdCost_P;

1485 
°Ad±H265Fa˚Cfg
.
u8SköFme32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinFme32RdCost_P;

1486 
°Ad±H265Fa˚Cfg
.
u8SköFme64RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinFme64RdCost_P;

1487 
°Ad±H265Fa˚Cfg
.
u8HedgeFme8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeFme8RdCost_P;

1488 
°Ad±H265Fa˚Cfg
.
u8HedgeFme16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeFme16RdCost_P;

1489 
°Ad±H265Fa˚Cfg
.
u8HedgeFme32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeFme32RdCost_P;

1490 
°Ad±H265Fa˚Cfg
.
u8HedgeFme64RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeFme64RdCost_P;

1491 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormMerg8RdCost_P;

1492 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormMerg16RdCost_P;

1493 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormMerg32RdCost_P;

1494 
°Ad±H265Fa˚Cfg
.
u8N‹mMîg64RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8NormMerg64RdCost_P;

1495 
°Ad±H265Fa˚Cfg
.
u8SköMîg8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinMerg8RdCost_P;

1496 
°Ad±H265Fa˚Cfg
.
u8SköMîg16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinMerg16RdCost_P;

1497 
°Ad±H265Fa˚Cfg
.
u8SköMîg32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinMerg32RdCost_P;

1498 
°Ad±H265Fa˚Cfg
.
u8SköMîg64RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinMerg64RdCost_P;

1499 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg8RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeMerg8RdCost_P;

1500 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg16RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeMerg16RdCost_P;

1501 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg32RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeMerg32RdCost_P;

1502 
°Ad±H265Fa˚Cfg
.
u8HedgeMîg64RdCo°_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeMerg64RdCost_P;

1503 
°Ad±H265Fa˚Cfg
.
bSköEn_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.bSkinEn_I;

1504 
°Ad±H265Fa˚Cfg
.
u32SköQpDñè_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32SkinQpDelta_I;

1505 
°Ad±H265Fa˚Cfg
.
u8SköUMax_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinUMax_I;

1506 
°Ad±H265Fa˚Cfg
.
u8SköUMö_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinUMin_I;

1507 
°Ad±H265Fa˚Cfg
.
u8SköVMax_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinVMax_I;

1508 
°Ad±H265Fa˚Cfg
.
u8SköVMö_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinVMin_I;

1509 
°Ad±H265Fa˚Cfg
.
u32SköNum_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32SkinNum_I;

1510 
°Ad±H265Fa˚Cfg
.
bSköEn_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.bSkinEn_P;

1511 
°Ad±H265Fa˚Cfg
.
u32SköQpDñè_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32SkinQpDelta_P;

1512 
°Ad±H265Fa˚Cfg
.
u8SköUMax_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinUMax_P;

1513 
°Ad±H265Fa˚Cfg
.
u8SköUMö_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinUMin_P;

1514 
°Ad±H265Fa˚Cfg
.
u8SköVMax_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinVMax_P;

1515 
°Ad±H265Fa˚Cfg
.
u8SköVMö_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8SkinVMin_P;

1516 
°Ad±H265Fa˚Cfg
.
u32SköNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32SkinNum_P;

1517 
°Ad±H265Fa˚Cfg
.
u8HedgeThr_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeThr_I;

1518 
°Ad±H265Fa˚Cfg
.
u8HedgeC¡_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeCnt_I;

1519 
°Ad±H265Fa˚Cfg
.
bSåoEdgeEn_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.bStroEdgeEn_I;

1520 
°Ad±H265Fa˚Cfg
.
u32SåoEdgeQpDñè_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32StroEdgeQpDelta_I;

1521 
°Ad±H265Fa˚Cfg
.
u8HedgeThr_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeThr_P;

1522 
°Ad±H265Fa˚Cfg
.
u8HedgeC¡_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u8HedgeCnt_P;

1523 
°Ad±H265Fa˚Cfg
.
bSåoEdgeEn_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.bStroEdgeEn_P;

1524 
°Ad±H265Fa˚Cfg
.
u32SåoEdgeQpDñè_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32StroEdgeQpDelta_P;

1525 
°Ad±H265Fa˚Cfg
.
bIm¥oveEn_I
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.bImproveEn_I;

1526 
°Ad±H265Fa˚Cfg
.
bIm¥oveEn_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.bImproveEn_P;

1527 
°Ad±H265Fa˚Cfg
.
u32N‹m32MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Norm32MaxNum_P;

1528 
°Ad±H265Fa˚Cfg
.
u32N‹m16MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Norm16MaxNum_P;

1529 
°Ad±H265Fa˚Cfg
.
u32N‹m32PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Norm32ProtectNum_P;

1530 
°Ad±H265Fa˚Cfg
.
u32N‹m16PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Norm16ProtectNum_P;

1531 
°Ad±H265Fa˚Cfg
.
u32Skö32MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Skin32MaxNum_P;

1532 
°Ad±H265Fa˚Cfg
.
u32Skö16MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Skin16MaxNum_P;

1533 
°Ad±H265Fa˚Cfg
.
u32Skö32PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Skin32ProtectNum_P;

1534 
°Ad±H265Fa˚Cfg
.
u32Skö16PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Skin16ProtectNum_P;

1535 
°Ad±H265Fa˚Cfg
.
u32Stûl32MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Still32MaxNum_P;

1536 
°Ad±H265Fa˚Cfg
.
u32Stûl16MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Still16MaxNum_P;

1537 
°Ad±H265Fa˚Cfg
.
u32Stûl32PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Still32ProtectNum_P;

1538 
°Ad±H265Fa˚Cfg
.
u32Stûl16PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Still16ProtectNum_P;

1539 
°Ad±H265Fa˚Cfg
.
u32Hedge32MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Hedge32MaxNum_P;

1540 
°Ad±H265Fa˚Cfg
.
u32Hedge16MaxNum_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Hedge16MaxNum_P;

1541 
°Ad±H265Fa˚Cfg
.
u32Hedge32PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Hedge32ProtectNum_P;

1542 
°Ad±H265Fa˚Cfg
.
u32Hedge16PrŸe˘Num_P
 = 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.u32Hedge16ProtectNum_P;

1544 
s32Rë
 = 
CommS˚√autoSëH265Fa˚Cfg
(
s32VícChn
, &
°Ad±H265Fa˚Cfg
);

1545 i‡(
HI_SUCCESS
 !
s32Rë
)

1547 
¥ötf
("CommSceneautoSetH265FaceCfg failed\n");

1548  
HI_FAILURE
;

1557 
°Ad±AERouã
.
u32TŸÆNum
 = 
g_°PªviousP¨a
.
°AERouã
.u32TotalNum;

1558 
i
 = 0; i < 8; i++)

1560 
°Ad±AERouã
.
a°RouãNode
[
i
].
u32I¡Time
 = 
g_°PªviousP¨a
.
°AERouã
.astRouteNode[i].u32IntTime;

1561 
°Ad±AERouã
.
a°RouãNode
[
i
].
u32SysGaö
 = 
g_°PªviousP¨a
.
°AERouã
.astRouteNode[i].u32SysGain;

1563 
s32Rë
 = 
CommS˚√autoSëAERouã
(
s32I•Dev
, &
°Ad±AERouã
);

1564 i‡(
HI_SUCCESS
 !
s32Rë
)

1566 
¥ötf
("CommSceneautoGetAERoute failed\n");

1567  
HI_FAILURE
;

1571 
°Ad±DCIP¨a
.
bE«bÀ
 = 
g_°PªviousP¨a
.
°DCIP¨am
.
bE™bÀ
;

1572 
°Ad±DCIP¨a
.
u32BœckGaö
 = 
g_°PªviousP¨a
.
°DCIP¨am
.u32BlackGain;

1573 
°Ad±DCIP¨a
.
u32C⁄åa°Gaö
 = 
g_°PªviousP¨a
.
°DCIP¨am
.u32ContrastGain;

1574 
°Ad±DCIP¨a
.
u32LightGaö
 = 
g_°PªviousP¨a
.
°DCIP¨am
.u32LightGain;

1575 
s32Rë
 = 
CommS˚√autoSëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨a
);

1576 i‡(
HI_SUCCESS
 !
s32Rë
)

1578 
¥ötf
("CommSceneautoGetDCIParam failed\n");

1579  
HI_FAILURE
;

1583 
°Ad±DRCAâr
.
bE«bÀ
 = 
g_°PªviousP¨a
.
°DRCAâr
.bEnable;

1584 
°Ad±DRCAâr
.
bM™ulE«bÀ
 = 
g_°PªviousP¨a
.
°DRCAâr
.bManulEnable;

1585 
°Ad±DRCAâr
.
u32Såígth
 = 
g_°PªviousP¨a
.
°DRCAâr
.
s32Såígth
;

1586 
°Ad±DRCAâr
.
u32Sl›eMax
 = 
g_°PªviousP¨a
.
°DRCAâr
.u32SlopeMax;

1587 
°Ad±DRCAâr
.
u32Sl›eMö
 = 
g_°PªviousP¨a
.
°DRCAâr
.u32SlopeMin;

1588 
°Ad±DRCAâr
.
u32V¨ün˚S∑˚
 = 
g_°PªviousP¨a
.
°DRCAâr
.u32VarianceSpace;

1589 
°Ad±DRCAâr
.
u32V¨ün˚I¡ísôy
 = 
g_°PªviousP¨a
.
°DRCAâr
.u32VarianceIntensity;

1590 
°Ad±DRCAâr
.
u32WhôeLevñ
 = 
g_°PªviousP¨a
.
°DRCAâr
.u32WhiteLevel;

1591 
°Ad±DRCAâr
.
u32BœckLevñ
 = 
g_°PªviousP¨a
.
°DRCAâr
.u32BlackLevel;

1592 
s32Rë
 = 
CommS˚√autoSëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

1593 i‡(
HI_SUCCESS
 !
s32Rë
)

1595 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1596  
HI_FAILURE
;

1600 
°Ad±S©uøti⁄
.
u8OpTy≥
 = 
g_°PªviousP¨a
.
°S©uøti⁄
.u8OpType;

1601 
°Ad±S©uøti⁄
.
u8M™uÆS©
 = 
g_°PªviousP¨a
.
°S©uøti⁄
.u8ManualSat;

1602 
i
 = 0; i < 16; i++)

1604 
°Ad±S©uøti⁄
.
au8AutoS©
[
i
] = 
g_°PªviousP¨a
.
°S©uøti⁄
.au8AutoSat[i];

1606 
s32Rë
 = 
CommS˚√autoSëS©uøti⁄
(
s32I•Dev
, &
°Ad±S©uøti⁄
);

1607 i‡(
HI_SUCCESS
 !
s32Rë
)

1609 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1610  
HI_FAILURE
;

1614 
°Ad±DISAâr
.
bE«bÀ
 = 
g_°PªviousP¨a
.
°Dis
.bEnable;

1615 
s32Rë
 = 
CommS˚√autoSëDISAâr
(
s32I•Dev
, &
°Ad±DISAâr
);

1616 i‡(
HI_SUCCESS
 !
s32Rë
)

1618 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1619  
HI_FAILURE
;

1623 
°Ad±AEAâr
.
u8ExpCom≥nßti⁄
 = 
g_°PªviousP¨a
.
°AEAâr
.u8ExpCompensation;

1624 
°Ad±AEAâr
.
u16BœckDñayFøme
 = 
g_°PªviousP¨a
.
°AEAâr
.u16BlackDelayFrame;

1625 
°Ad±AEAâr
.
u16WhôeDñayFøme
 = 
g_°PªviousP¨a
.
°AEAâr
.u16WhiteDelayFrame;

1626 
°Ad±AEAâr
.
u8AESå©egyMode
 = 
g_°PªviousP¨a
.
°AEAâr
.u8AEStrategyMode;

1627 
°Ad±AEAâr
.
u8MaxHi°Off£t
 = 
g_°PªviousP¨a
.
°AEAâr
.u8MaxHistOffset;

1628 
°Ad±AEAâr
.
u16Hi°R©ioSl›e
 = 
g_°PªviousP¨a
.
°AEAâr
.u16HistRatioSlope;

1629 
°Ad±AEAâr
.
u8S≥ed
 = 
g_°PªviousP¨a
.
°AEAâr
.u8Speed;

1630 
°Ad±AEAâr
.
u8Tﬁî™˚
 = 
g_°PªviousP¨a
.
°AEAâr
.u8Tolerance;

1631 
°Ad±AEAâr
.
u32SysGaöMax
 = 
g_°PªviousP¨a
.
°AEAâr
.u32SysGainMax;

1632 
i
 = 0; i < 
AE_WEIGHT_ROW
; i++)

1634 
j
 = 0; j < 
AE_WEIGHT_COLUMN
; j++)

1636 
°Ad±AEAâr
.
au8AeWeight
[
i
][
j
] = 
g_°PªviousP¨a
.
°AEAâr
.au8AeWeight[i][j];

1639 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

1640 i‡(
HI_SUCCESS
 !
s32Rë
)

1642 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1643  
HI_FAILURE
;

1646  
HI_SUCCESS
;

1649 
HI_S32
 
S˚√auto_GëPªviousP¨a
()

1651 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1652 
HI_S32
 
i
,
j
;

1653 
HI_S32
 
s32I•Dev
;

1654 
HI_S32
 
s32ViDev
;

1655 
HI_S32
 
s32VícChn
;

1656 
ADPT_SCENEAUTO_DEMOSAIC_S
 
°Ad±Demoßic
;

1657 
ADPT_SCENEAUTO_SHARPEN_S
 
°Ad±Sh¨≥n
;

1658 
ADPT_SCENEAUTO_DP_S
 
°Ad±DP
;

1659 
ADPT_SCENEAUTO_GAMMA_S
 
°Ad±Gamma
;

1660 
ADPT_SCENEAUTO_H264_DEBLOCK_S
 
°Ad±H264Deblock
;

1661 
ADPT_SCENEAUTO_H264TRANS_S
 
°Ad±H264Tøns
;

1662 
ADPT_SCENEAUTO_H264_RCPARAM_S
 
°Ad±H264RcP¨am
;

1663 
ADPT_SCENEAUTO_H265_RCPARAM_S
 
°Ad±H265RcP¨am
;

1664 
ADPT_SCENEAUTO_H265_FACE_CFG_S
 
°Ad±H265Fa˚Cfg
;

1665 
ADPT_SCENEAUTO_AEROUTE_S
 
°Ad±AERouã
;

1666 
ADPT_SCENEAUTO_DCIPARAM_S
 
°Ad±DCIP¨a
;

1667 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DRCAâr
;

1668 
ADPT_SCENEAUTO_SATURATION_S
 
°Ad±S©uøti⁄
;

1669 
ADPT_SCENEAUTO_DIS_ATTR_S
 
°Ad±DISAâr
;

1670 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

1671 
ADPT_SCENEAUTO_VENC_ATTR_S
 
°Ad±VícAâr
;

1672 
ADPT_SCENEAUTO_CCM_ATTR_S
 
°Ad±CcmAâr
;

1673 
ADPT_SCENEAUTO_ACM_ATTR_S
 
°Ad±AcmAâr
;

1675 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

1676 
s32ViDev
 = 
g_°INIP¨a
.
°MpInfo
.s32ViDev;

1677 
s32VícChn
 = 
g_°INIP¨a
.
°MpInfo
.s32VencChn;

1680 
s32Rë
 = 
CommS˚√autoGëDemoßic
(
s32I•Dev
, &
°Ad±Demoßic
);

1681 i‡(
HI_SUCCESS
 !
s32Rë
)

1683 
¥ötf
("Adpt_GetDemosaic failed\n");

1684  
HI_FAILURE
;

1686 
g_°PªviousP¨a
.
°Demoßic
.
u8AaSl›e
 = 
°Ad±Demoßic
.u8AaSlope;

1687 
g_°PªviousP¨a
.
°Demoßic
.
u8UuSl›e
 = 
°Ad±Demoßic
.u8UuSlope;

1688 
g_°PªviousP¨a
.
°Demoßic
.
u8VaSl›e
 = 
°Ad±Demoßic
.u8VaSlope;

1689 
g_°PªviousP¨a
.
°Demoßic
.
u8VhSl›e
 = 
°Ad±Demoßic
.u8VhSlope;

1690 
i
 = 0; i < 16; i++)

1692 
g_°PªviousP¨a
.
°Demoßic
.
au8LumThªsh
[
i
] = 
°Ad±Demoßic
.au8LumThresh[i];

1696 
s32Rë
 = 
CommS˚√autoGëSh¨≥n
(
s32I•Dev
, &
°Ad±Sh¨≥n
);

1697 i‡(
HI_SUCCESS
 !
s32Rë
)

1699 
¥ötf
("Adpt_GetDemosaic failed\n");

1700  
HI_FAILURE
;

1702 
i
 = 0; i < 16; i++)

1704 
g_°PªviousP¨a
.
°Sh¨≥n
.
au8Sh¨≥nD
[
i
] = 
°Ad±Sh¨≥n
.au8SharpenD[i];

1705 
g_°PªviousP¨a
.
°Sh¨≥n
.
au8Sh¨≥nRGB
[
i
] = 
°Ad±Sh¨≥n
.au8SharpenRGB[i];

1706 
g_°PªviousP¨a
.
°Sh¨≥n
.
au8Sh¨≥nUd
[
i
] = 
°Ad±Sh¨≥n
.au8SharpenUd[i];

1710 
s32Rë
 = 
CommS˚√autoGëDP
(
s32I•Dev
, &
°Ad±DP
);

1711 i‡(
HI_SUCCESS
 !
s32Rë
)

1713 
¥ötf
("CommSceneautoGetDP failed\n");

1714  
HI_FAILURE
;

1716 
g_°PªviousP¨a
.
°DP
.
u16Sl›e
 = 
°Ad±DP
.u16Slope;

1719 
s32Rë
 = 
CommS˚√autoGëGamma
(
s32I•Dev
, &
°Ad±Gamma
);

1720 i‡(
HI_SUCCESS
 !
s32Rë
)

1722 
¥ötf
("CommSceneautoGetGamma failed\n");

1723  
HI_FAILURE
;

1725 
g_°PªviousP¨a
.
°Gamma
.
u8CurveTy≥
 = 
°Ad±Gamma
.u8CurveType;

1726 
i
 = 0 ; i < 257; i++)

1728 
g_°PªviousP¨a
.
°Gamma
.
u16TabÀ
[
i
] = 
°Ad±Gamma
.
au16GammaTabÀ
[i];

1732 
s32Rë
 = 
CommS˚√autoGëCcmAâr
(
s32I•Dev
, &
°Ad±CcmAâr
);

1733 i‡(
HI_SUCCESS
 !
s32Rë
)

1735 
¥ötf
("CommSceneautoGetCcmAttr failed\n");

1736  
HI_FAILURE
;

1738 
g_°PªviousP¨a
.
°Ccm
.
u16HighCﬁ‹Temp
 = 
°Ad±CcmAâr
.u16HighColorTemp;

1739 
g_°PªviousP¨a
.
°Ccm
.
u16MidCﬁ‹Temp
 = 
°Ad±CcmAâr
.u16MidColorTemp;

1740 
g_°PªviousP¨a
.
°Ccm
.
u16LowCﬁ‹Temp
 = 
°Ad±CcmAâr
.u16LowColorTemp;

1741 
i
 = 0; i < 9; i++)

1743 
g_°PªviousP¨a
.
°Ccm
.
au16HighCCM
[
i
] = 
°Ad±CcmAâr
.au16HighCCM[i];

1744 
g_°PªviousP¨a
.
°Ccm
.
au16MidCCM
[
i
] = 
°Ad±CcmAâr
.au16MidCCM[i];

1745 
g_°PªviousP¨a
.
°Ccm
.
au16LowCCM
[
i
] = 
°Ad±CcmAâr
.au16LowCCM[i];

1749 
s32Rë
 = 
CommS˚√autoGëAcmAâr
(
s32I•Dev
, &
°Ad±AcmAâr
);

1750 i‡(
HI_SUCCESS
 !
s32Rë
)

1752 
¥ötf
("CommSceneautoGetAcmAttr failed\n");

1753  
HI_FAILURE
;

1755 
g_°PªviousP¨a
.
°Acm
.
bE«bÀ
 = 
°Ad±AcmAâr
.bEnable;

1756 
g_°PªviousP¨a
.
°Acm
.
u32Cb¸Thr
 = 
°Ad±AcmAâr
.u32CbcrThr;

1757 
g_°PªviousP¨a
.
°Acm
.
u32GaöHue
 = 
°Ad±AcmAâr
.u32GainHue;

1758 
g_°PªviousP¨a
.
°Acm
.
u32GaöLuma
 = 
°Ad±AcmAâr
.u32GainLuma;

1759 
g_°PªviousP¨a
.
°Acm
.
u32GaöS©
 = 
°Ad±AcmAâr
.u32GainSat;

1762 
s32Rë
 = 
CommS˚√autoGëVícAâr
(
s32VícChn
, &
°Ad±VícAâr
);

1763 i‡(
HI_SUCCESS
 !
s32Rë
)

1765 
¥ötf
("CommSceneautoGetVencAttr failed\n");

1766  
HI_FAILURE
;

1769 
°Ad±VícAâr
.
eRcMode
)

1771 
ADPT_SCENEAUTO_RCMODE_H264
:

1772 
g_eVícRcMode
 = 
ADPT_SCENEAUTO_RCMODE_H264
;

1774 
s32Rë
 = 
CommS˚√autoGëH24Deblock
(
s32VícChn
, &
°Ad±H264Deblock
);

1775 i‡(
HI_SUCCESS
 !
s32Rë
)

1777 
¥ötf
("CommSceneautoGetH24Deblock failed\n");

1778  
HI_FAILURE
;

1780 
g_°PªviousP¨a
.
°H264Víc
.
°H264Dblk
.
dißbÀ_deblockög_fûãr_idc
 = 
°Ad±H264Deblock
.disable_deblocking_filter_idc;

1781 
g_°PªviousP¨a
.
°H264Víc
.
°H264Dblk
.
¶i˚_Æpha_c0_off£t_div2
 = 
°Ad±H264Deblock
.slice_alpha_c0_offset_div2;

1782 
g_°PªviousP¨a
.
°H264Víc
.
°H264Dblk
.
¶i˚_bëa_off£t_div2
 = 
°Ad±H264Deblock
.slice_beta_offset_div2;

1784 
s32Rë
 = 
CommS˚√autoGëH264Tøns
(
s32VícChn
, &
°Ad±H264Tøns
);

1785 i‡(
HI_SUCCESS
 !
s32Rë
)

1787 
¥ötf
("CommSceneautoGetH264Trans failed\n");

1788  
HI_FAILURE
;

1790 
g_°PªviousP¨a
.
°H264Víc
.
s32chroma_qp_ödex_off£t
 = 
°Ad±H264Tøns
.
chroma_qp_ödex_off£t
;

1792 
s32Rë
 = 
CommS˚√autoGëH264RcP¨am
(
s32VícChn
, &
°Ad±H264RcP¨am
);

1793 i‡(
HI_SUCCESS
 !
s32Rë
)

1795 
¥ötf
("CommSceneautoGetRcParam failed\n");

1796  
HI_FAILURE
;

1798 
g_°PªviousP¨a
.
°H264Víc
.
s32IPQPDñè
 = 
°Ad±H264RcP¨am
.s32IPQPDelta;

1799 
g_°PªviousP¨a
.
°H264Víc
.
u32DñèQP
 = 
°Ad±H264RcP¨am
.
u32QpDñè
;

1800 
i
 = 0; i < 12; i++)

1802 
g_°PªviousP¨a
.
°H264Víc
.
u32ThrdI
[
i
] = 
°Ad±H264RcP¨am
.u32ThrdI[i];

1803 
g_°PªviousP¨a
.
°H264Víc
.
u32ThrdP
[
i
] = 
°Ad±H264RcP¨am
.u32ThrdP[i];

1807 
ADPT_SCENEAUTO_RCMODE_H265
:

1808 
g_eVícRcMode
 = 
ADPT_SCENEAUTO_RCMODE_H265
;

1809 
s32Rë
 = 
CommS˚√autoGëH265RcP¨am
(
s32VícChn
, &
°Ad±H265RcP¨am
);

1810 i‡(
HI_SUCCESS
 !
s32Rë
)

1812 
¥ötf
("CommSceneautoGetH265RcParam failed\n");

1813  
HI_FAILURE
;

1815 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.
u32DñèQP
 = 
°Ad±H265RcP¨am
.
u32QpDñè
;

1816 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.
s32IPQPDñè
 = 
°Ad±H265RcP¨am
.s32IPQPDelta;

1817 
i
 = 0; i < 12; i++)

1819 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.
u32ThrdI
[
i
] = 
°Ad±H265RcP¨am
.u32ThrdI[i];

1820 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícRcP¨am
.
u32ThrdP
[
i
] = 
°Ad±H265RcP¨am
.u32ThrdP[i];

1822 
s32Rë
 = 
CommS˚√autoGëH265Fa˚Cfg
(
s32VícChn
, &
°Ad±H265Fa˚Cfg
);

1823 i‡(
HI_SUCCESS
 !
s32Rë
)

1825 
¥ötf
("CommSceneautoGetH265FaceCfg failed\n");

1826  
HI_FAILURE
;

1829 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø4RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra4RdCost_I;

1830 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø8RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra8RdCost_I;

1831 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø16RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra16RdCost_I;

1832 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø32RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra32RdCost_I;

1833 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø4RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra4RdCost_I;

1834 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø8RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra8RdCost_I;

1835 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø16RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra16RdCost_I;

1836 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø32RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra32RdCost_I;

1837 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø4RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra4RdCost_I;

1838 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø8RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra8RdCost_I;

1839 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø16RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra16RdCost_I;

1840 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø32RdCo°_I
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra32RdCost_I;

1841 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø4RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra4RdCost_P;

1842 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra8RdCost_P;

1843 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra16RdCost_P;

1844 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mI¡ø32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormIntra32RdCost_P;

1845 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø4RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra4RdCost_P;

1846 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra8RdCost_P;

1847 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra16RdCost_P;

1848 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköI¡ø32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinIntra32RdCost_P;

1849 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø4RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra4RdCost_P;

1850 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra8RdCost_P;

1851 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra16RdCost_P;

1852 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeI¡ø32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeIntra32RdCost_P;

1853 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mFme8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormFme8RdCost_P;

1854 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mFme16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormFme16RdCost_P;

1855 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mFme32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormFme32RdCost_P;

1856 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mFme64RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormFme64RdCost_P;

1857 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköFme8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinFme8RdCost_P;

1858 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköFme16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinFme16RdCost_P;

1859 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköFme32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinFme32RdCost_P;

1860 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköFme64RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinFme64RdCost_P;

1861 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeFme8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeFme8RdCost_P;

1862 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeFme16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeFme16RdCost_P;

1863 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeFme32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeFme32RdCost_P;

1864 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeFme64RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeFme64RdCost_P;

1865 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mMîg8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormMerg8RdCost_P;

1866 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mMîg16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormMerg16RdCost_P;

1867 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mMîg32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormMerg32RdCost_P;

1868 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8N‹mMîg64RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8NormMerg64RdCost_P;

1869 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköMîg8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinMerg8RdCost_P;

1870 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköMîg16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinMerg16RdCost_P;

1871 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköMîg32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinMerg32RdCost_P;

1872 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköMîg64RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinMerg64RdCost_P;

1873 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeMîg8RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeMerg8RdCost_P;

1874 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeMîg16RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeMerg16RdCost_P;

1875 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeMîg32RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeMerg32RdCost_P;

1876 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeMîg64RdCo°_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeMerg64RdCost_P;

1877 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
bSköEn_I
 = 
°Ad±H265Fa˚Cfg
.bSkinEn_I;

1878 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32SköQpDñè_I
 = 
°Ad±H265Fa˚Cfg
.u32SkinQpDelta_I;

1879 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköUMax_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinUMax_I;

1880 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköUMö_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinUMin_I;

1881 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköVMax_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinVMax_I;

1882 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköVMö_I
 = 
°Ad±H265Fa˚Cfg
.u8SkinVMin_I;

1883 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32SköNum_I
 = 
°Ad±H265Fa˚Cfg
.u32SkinNum_I;

1884 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
bSköEn_P
 = 
°Ad±H265Fa˚Cfg
.bSkinEn_P;

1885 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32SköQpDñè_P
 = 
°Ad±H265Fa˚Cfg
.u32SkinQpDelta_P;

1886 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköUMax_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinUMax_P;

1887 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköUMö_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinUMin_P;

1888 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköVMax_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinVMax_P;

1889 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8SköVMö_P
 = 
°Ad±H265Fa˚Cfg
.u8SkinVMin_P;

1890 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32SköNum_P
 = 
°Ad±H265Fa˚Cfg
.u32SkinNum_P;

1891 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeThr_I
 = 
°Ad±H265Fa˚Cfg
.u8HedgeThr_I;

1892 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeC¡_I
 = 
°Ad±H265Fa˚Cfg
.u8HedgeCnt_I;

1893 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
bSåoEdgeEn_I
 = 
°Ad±H265Fa˚Cfg
.bStroEdgeEn_I;

1894 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32SåoEdgeQpDñè_I
 = 
°Ad±H265Fa˚Cfg
.u32StroEdgeQpDelta_I;

1895 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeThr_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeThr_P;

1896 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u8HedgeC¡_P
 = 
°Ad±H265Fa˚Cfg
.u8HedgeCnt_P;

1897 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
bSåoEdgeEn_P
 = 
°Ad±H265Fa˚Cfg
.bStroEdgeEn_P;

1898 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32SåoEdgeQpDñè_P
 = 
°Ad±H265Fa˚Cfg
.u32StroEdgeQpDelta_P;

1899 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
bIm¥oveEn_I
 = 
°Ad±H265Fa˚Cfg
.bImproveEn_I;

1900 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
bIm¥oveEn_P
 = 
°Ad±H265Fa˚Cfg
.bImproveEn_P;

1901 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32N‹m32MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Norm32MaxNum_P;

1902 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32N‹m16MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Norm16MaxNum_P;

1903 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32N‹m32PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Norm32ProtectNum_P;

1904 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32N‹m16PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Norm16ProtectNum_P;

1905 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Skö32MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Skin32MaxNum_P;

1906 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Skö16MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Skin16MaxNum_P;

1907 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Skö32PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Skin32ProtectNum_P;

1908 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Skö16PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Skin16ProtectNum_P;

1909 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Stûl32MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Still32MaxNum_P;

1910 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Stûl16MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Still16MaxNum_P;

1911 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Stûl32PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Still32ProtectNum_P;

1912 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Stûl16PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Still16ProtectNum_P;

1913 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Hedge32MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Hedge32MaxNum_P;

1914 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Hedge16MaxNum_P
 = 
°Ad±H265Fa˚Cfg
.u32Hedge16MaxNum_P;

1915 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Hedge32PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Hedge32ProtectNum_P;

1916 
g_°PªviousP¨a
.
°H265Víc
.
°H265VícFa˚Cfg
.
u32Hedge16PrŸe˘Num_P
 = 
°Ad±H265Fa˚Cfg
.u32Hedge16ProtectNum_P;

1924 
s32Rë
 = 
CommS˚√autoGëAERouã
(
s32I•Dev
, &
°Ad±AERouã
);

1925 i‡(
HI_SUCCESS
 !
s32Rë
)

1927 
¥ötf
("CommSceneautoGetAERoute failed\n");

1928  
HI_FAILURE
;

1930 
g_°PªviousP¨a
.
°AERouã
.
u32TŸÆNum
 = 
°Ad±AERouã
.u32TotalNum;

1931 
i
 = 0; i < 8; i++)

1933 
g_°PªviousP¨a
.
°AERouã
.
a°RouãNode
[
i
].
u32I¡Time
 = 
°Ad±AERouã
.astRouteNode[i].u32IntTime;

1934 
g_°PªviousP¨a
.
°AERouã
.
a°RouãNode
[
i
].
u32SysGaö
 = 
°Ad±AERouã
.astRouteNode[i].u32SysGain;

1938 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨a
);

1939 i‡(
HI_SUCCESS
 !
s32Rë
)

1941 
¥ötf
("CommSceneautoGetDCIParam failed\n");

1942  
HI_FAILURE
;

1944 
g_°PªviousP¨a
.
°DCIP¨am
.
bE™bÀ
 = 
°Ad±DCIP¨a
.
bE«bÀ
;

1945 
g_°PªviousP¨a
.
°DCIP¨am
.
u32BœckGaö
 = 
°Ad±DCIP¨a
.u32BlackGain;

1946 
g_°PªviousP¨a
.
°DCIP¨am
.
u32C⁄åa°Gaö
 = 
°Ad±DCIP¨a
.u32ContrastGain;

1947 
g_°PªviousP¨a
.
°DCIP¨am
.
u32LightGaö
 = 
°Ad±DCIP¨a
.u32LightGain;

1950 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DRCAâr
);

1951 i‡(
HI_SUCCESS
 !
s32Rë
)

1953 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1954  
HI_FAILURE
;

1956 
g_°PªviousP¨a
.
°DRCAâr
.
bE«bÀ
 = 
°Ad±DRCAâr
.bEnable;

1957 
g_°PªviousP¨a
.
°DRCAâr
.
bM™ulE«bÀ
 = 
°Ad±DRCAâr
.bManulEnable;

1958 
g_°PªviousP¨a
.
°DRCAâr
.
s32Såígth
 = 
°Ad±DRCAâr
.
u32Såígth
;

1959 
g_°PªviousP¨a
.
°DRCAâr
.
u32Sl›eMax
 = 
°Ad±DRCAâr
.u32SlopeMax;

1960 
g_°PªviousP¨a
.
°DRCAâr
.
u32Sl›eMö
 = 
°Ad±DRCAâr
.u32SlopeMin;

1961 
g_°PªviousP¨a
.
°DRCAâr
.
u32V¨ün˚S∑˚
 = 
°Ad±DRCAâr
.u32VarianceSpace;

1962 
g_°PªviousP¨a
.
°DRCAâr
.
u32V¨ün˚I¡ísôy
 = 
°Ad±DRCAâr
.u32VarianceIntensity;

1963 
g_°PªviousP¨a
.
°DRCAâr
.
u32WhôeLevñ
 = 
°Ad±DRCAâr
.u32WhiteLevel;

1964 
g_°PªviousP¨a
.
°DRCAâr
.
u32BœckLevñ
 = 
°Ad±DRCAâr
.u32BlackLevel;

1967 
s32Rë
 = 
CommS˚√autoGëS©uøti⁄
(
s32I•Dev
, &
°Ad±S©uøti⁄
);

1968 i‡(
HI_SUCCESS
 !
s32Rë
)

1970 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1971  
HI_FAILURE
;

1973 
g_°PªviousP¨a
.
°S©uøti⁄
.
u8OpTy≥
 = 
°Ad±S©uøti⁄
.u8OpType;

1974 
g_°PªviousP¨a
.
°S©uøti⁄
.
u8M™uÆS©
 = 
°Ad±S©uøti⁄
.u8ManualSat;

1975 
i
 = 0; i < 16; i++)

1977 
g_°PªviousP¨a
.
°S©uøti⁄
.
au8AutoS©
[
i
] = 
°Ad±S©uøti⁄
.au8AutoSat[i];

1981 
s32Rë
 = 
CommS˚√autoGëDISAâr
(
s32I•Dev
, &
°Ad±DISAâr
);

1982 i‡(
HI_SUCCESS
 !
s32Rë
)

1984 
¥ötf
("CommSceneautoGetDISAttr failed\n");

1985  
HI_FAILURE
;

1987 
g_°PªviousP¨a
.
°Dis
.
bE«bÀ
 = 
°Ad±DISAâr
.bEnable;

1990 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

1991 i‡(
HI_SUCCESS
 !
s32Rë
)

1993 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

1994  
HI_FAILURE
;

1996 
g_°PªviousP¨a
.
°AEAâr
.
u8ExpCom≥nßti⁄
 = 
°Ad±AEAâr
.u8ExpCompensation;

1997 
g_°PªviousP¨a
.
°AEAâr
.
u16BœckDñayFøme
 = 
°Ad±AEAâr
.u16BlackDelayFrame;

1998 
g_°PªviousP¨a
.
°AEAâr
.
u16WhôeDñayFøme
 = 
°Ad±AEAâr
.u16WhiteDelayFrame;

1999 
g_°PªviousP¨a
.
°AEAâr
.
u8AESå©egyMode
 = 
°Ad±AEAâr
.u8AEStrategyMode;

2000 
g_°PªviousP¨a
.
°AEAâr
.
u8MaxHi°Off£t
 = 
°Ad±AEAâr
.u8MaxHistOffset;

2001 
g_°PªviousP¨a
.
°AEAâr
.
u16Hi°R©ioSl›e
 = 
°Ad±AEAâr
.u16HistRatioSlope;

2002 
g_°PªviousP¨a
.
°AEAâr
.
u8S≥ed
 = 
°Ad±AEAâr
.u8Speed;

2003 
g_°PªviousP¨a
.
°AEAâr
.
u8Tﬁî™˚
 = 
°Ad±AEAâr
.u8Tolerance;

2004 
g_°PªviousP¨a
.
°AEAâr
.
u32SysGaöMax
 = 
°Ad±AEAâr
.u32SysGainMax;

2005 
i
 = 0; i < 
AE_WEIGHT_ROW
; i++)

2007 
j
 = 0; j < 
AE_WEIGHT_COLUMN
; j++)

2009 
g_°PªviousP¨a
.
°AEAâr
.
au8AeWeight
[
i
][
j
] = 
°Ad±AEAâr
.au8AeWeight[i][j];

2012  
HI_SUCCESS
;

2015 
HI_VOID
 
S˚√auto_FªeMem
()

2018 i‡(
NULL
 !
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
)

2020 
‰ì
(
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
);

2021 
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
 = 
NULL
;

2024 i‡(
NULL
 !
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
)

2026 
‰ì
(
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
);

2027 
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
 = 
NULL
;

2030 i‡(
NULL
 !
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
)

2032 
‰ì
(
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
);

2033 
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
 = 
NULL
;

2036 i‡(
NULL
 !
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
)

2038 
‰ì
(
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
);

2039 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
 = 
NULL
;

2042 i‡(
NULL
 !
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
)

2044 
‰ì
(
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
);

2045 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
 = 
NULL
;

2048 i‡(
NULL
 !
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
)

2050 
‰ì
(
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
);

2051 
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
 = 
NULL
;

2054 i‡(
NULL
 !
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
)

2056 
‰ì
(
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
);

2057 
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
 = 
NULL
;

2060 i‡(
NULL
 !
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
)

2062 
‰ì
(
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
);

2063 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
 = 
NULL
;

2066 i‡(
NULL
 !
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
)

2068 
‰ì
(
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
);

2069 
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
 = 
NULL
;

2072 i‡(
NULL
 !
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
)

2074 
‰ì
(
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
);

2075 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
 = 
NULL
;

2078 i‡(
NULL
 !
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
)

2080 
‰ì
(
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
);

2081 
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
 = 
NULL
;

2084 i‡(
NULL
 !
g_°INIP¨a
.
°IniDP
.
p°DPAâr
)

2086 
‰ì
(
g_°INIP¨a
.
°IniDP
.
p°DPAâr
);

2087 
g_°INIP¨a
.
°IniDP
.
p°DPAâr
 = 
NULL
;

2090 i‡(
NULL
 !
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
)

2092 
‰ì
(
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
);

2093 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
 = 
NULL
;

2097 i‡(
NULL
 !
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
)

2099 
‰ì
(
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
);

2100 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
 = 
NULL
;

2104 i‡(
NULL
 !
g_°INIP¨a
.
°IniGamma
.
p°Gamma
)

2106 
‰ì
(
g_°INIP¨a
.
°IniGamma
.
p°Gamma
);

2107 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
 = 
NULL
;

2110 i‡(
NULL
 !
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
)

2112 
‰ì
(
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
);

2113 
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
 = 
NULL
;

2116 i‡(
NULL
 !
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
)

2118 
‰ì
(
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
);

2119 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
 = 
NULL
;

2124 i‡(
NULL
 !
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
)

2126 
‰ì
(
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
);

2127 
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
 = 
NULL
;

2130 i‡(
NULL
 !
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
)

2132 
‰ì
(
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
);

2133 
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
 = 
NULL
;

2136 i‡(
NULL
 !
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
)

2138 
‰ì
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
);

2139 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
 = 
NULL
;

2142 i‡(
NULL
 !
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
)

2144 
‰ì
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
);

2145 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
 = 
NULL
;

2148 i‡(
NULL
 !
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
)

2150 
‰ì
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
);

2151 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
 = 
NULL
;

2154 i‡(
NULL
 !
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
)

2156 
‰ì
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
);

2157 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
 = 
NULL
;

2160 i‡(
NULL
 !
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
)

2162 
‰ì
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
);

2163 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
 = 
NULL
;

2166 i‡(
NULL
 !
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
)

2168 
‰ì
(
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
);

2169 
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
 = 
NULL
;

2172 i‡(
NULL
 !
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
)

2174 
‰ì
(
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
);

2175 
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
 = 
NULL
;

2178 i‡(
NULL
 !
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
)

2180 
‰ì
(
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
);

2181 
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
 = 
NULL
;

2184 i‡(
NULL
 !
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
)

2186 
‰ì
(
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
);

2187 
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
 = 
NULL
;

2190 i‡(
NULL
 !
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
)

2192 
‰ì
(
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
);

2193 
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
 = 
NULL
;

2196 i‡(
NULL
 !
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
)

2198 
‰ì
(
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
);

2199 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
 = 
NULL
;

2202 i‡(
NULL
 !
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
)

2204 
‰ì
(
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
);

2205 
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
 = 
NULL
;

2207 i‡(
NULL
 !
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
)

2209 
‰ì
(
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
);

2210 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
 = 
NULL
;

2213 i‡(
NULL
 !
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
)

2215 
‰ì
(
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
);

2216 
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
 = 
NULL
;

2219 i‡(
NULL
 !
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
)

2221 
‰ì
(
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
);

2222 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
 = 
NULL
;

2226 
HI_S32
 
S˚√auto_LﬂdINIP¨a
()

2228 
HI_S32
 
s32Temp
 = 0;

2229 
HI_S32
 
s32Off£t
 = 0;

2230 
HI_S32
 
i
, 
j
;

2231 
HI_CHAR
 
szTempSå
[128];

2232 
HI_CHAR
* 
pszTempSå
;

2235 
s32Temp
 = 0;

2236 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:I•Dev", 
HI_FAILURE
);

2237 i‡(
HI_FAILURE
 =
s32Temp
)

2239 
¥ötf
("common:IspDev failed\n");

2240  
HI_FAILURE
;

2242 
g_°INIP¨a
.
°MpInfo
.
s32I•Dev
 = 
s32Temp
;

2245 
s32Temp
 = 0;

2246 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:ViDev", 
HI_FAILURE
);

2247 i‡(
HI_FAILURE
 =
s32Temp
)

2249 
¥ötf
("common:ViDev failed\n");

2250  
HI_FAILURE
;

2252 
g_°INIP¨a
.
°MpInfo
.
s32ViDev
 = 
s32Temp
;

2255 
s32Temp
 = 0;

2256 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:ViChn", 
HI_FAILURE
);

2257 i‡(
HI_FAILURE
 =
s32Temp
)

2259 
¥ötf
("common:ViChn failed\n");

2260  
HI_FAILURE
;

2262 
g_°INIP¨a
.
°MpInfo
.
s32ViChn
 = 
s32Temp
;

2265 
s32Temp
 = 0;

2266 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:VpssGΩ", 
HI_FAILURE
);

2267 i‡(
HI_FAILURE
 =
s32Temp
)

2269 
¥ötf
("common:VpssGrp failed\n");

2270  
HI_FAILURE
;

2272 
g_°INIP¨a
.
°MpInfo
.
s32VpssGΩ
 = 
s32Temp
;

2275 
s32Temp
 = 0;

2276 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:VpssChn", 
HI_FAILURE
);

2277 i‡(
HI_FAILURE
 =
s32Temp
)

2279 
¥ötf
("common:VpssChn failed\n");

2280  
HI_FAILURE
;

2282 
g_°INIP¨a
.
°MpInfo
.
s32VpssChn
 = 
s32Temp
;

2285 
s32Temp
 = 0;

2286 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:VícGΩ", 
HI_FAILURE
);

2287 i‡(
HI_FAILURE
 =
s32Temp
)

2289 
¥ötf
("common:VencGrp failed\n");

2290  
HI_FAILURE
;

2292 
g_°INIP¨a
.
°MpInfo
.
s32VícGΩ
 = 
s32Temp
;

2295 
s32Temp
 = 0;

2296 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:VícChn", 
HI_FAILURE
);

2297 i‡(
HI_FAILURE
 =
s32Temp
)

2299 
¥ötf
("common:VencChn failed\n");

2300  
HI_FAILURE
;

2302 
g_°INIP¨a
.
°MpInfo
.
s32VícChn
 = 
s32Temp
;

2305 
s32Temp
 = 0;

2306 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:IVE_E«bÀ", 
HI_FAILURE
);

2307 i‡(
HI_FAILURE
 =
s32Temp
)

2309 
¥ötf
("common:IVE_Enable failed\n");

2310  
HI_FAILURE
;

2312 
g_°INIP¨a
.
°ThªshVÆue
.
bIVEE«bÀ
 = (
HI_BOOL
)
s32Temp
;

2314 
s32Temp
 = 0;

2315 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:HLC_AutoE«bÀ", 
HI_FAILURE
);

2316 i‡(
HI_FAILURE
 =
s32Temp
)

2318 
¥ötf
("common:HLC_AutoEnable failed\n");

2319  
HI_FAILURE
;

2321 
g_°INIP¨a
.
°ThªshVÆue
.
bHLCAutoE«bÀ
 = (
HI_BOOL
)
s32Temp
;

2324 
s32Temp
 = 0;

2325 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:HLC_thr_⁄", 
HI_FAILURE
);

2326 i‡(
HI_FAILURE
 =
s32Temp
)

2328 
¥ötf
("common:HLC_thr_on failed\n");

2329  
HI_FAILURE
;

2331 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCOnThªsh
 = 
s32Temp
;

2334 
s32Temp
 = 0;

2335 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:HLC_thr_off", 
HI_FAILURE
);

2336 i‡(
HI_FAILURE
 =
s32Temp
)

2338 
¥ötf
("common:HLC_thr_off failed\n");

2339  
HI_FAILURE
;

2341 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCOffThªsh
 = 
s32Temp
;

2344 
s32Temp
 = 0;

2345 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:HLC_tﬁî™˚", 
HI_FAILURE
);

2346 i‡(
HI_FAILURE
 =
s32Temp
)

2348 
¥ötf
("common:HLC_tolerance failed\n");

2349  
HI_FAILURE
;

2351 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCTﬁî™˚
 = 
s32Temp
;

2354 
s32Temp
 = 0;

2355 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:HLC_ex±hr", 
HI_FAILURE
);

2356 i‡(
HI_FAILURE
 =
s32Temp
)

2358 
¥ötf
("common:HLC_expthr failed\n");

2359  
HI_FAILURE
;

2361 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCExpThªsh
 = 
s32Temp
;

2364 
s32Temp
 = 0;

2365 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:HLC_cou¡", 
HI_FAILURE
);

2366 i‡(
HI_FAILURE
 =
s32Temp
)

2368 
¥ötf
("common:HLC_count failed\n");

2369  
HI_FAILURE
;

2371 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCCou¡
 = 
s32Temp
;

2374 
s32Temp
 = 0;

2375 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:ave_lum_thªsh", 
HI_FAILURE
);

2376 i‡(
HI_FAILURE
 =
s32Temp
)

2378 
¥ötf
("common:ave_lum_thresh failed\n");

2379  
HI_FAILURE
;

2381 
g_°INIP¨a
.
°ThªshVÆue
.
u32AveLumThªsh
 = 
s32Temp
;

2384 
s32Temp
 = 0;

2385 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:dñè_dis_ex±hªsh", 
HI_FAILURE
);

2386 i‡(
HI_FAILURE
 =
s32Temp
)

2388 
¥ötf
("common:delta_dis_expthresh failed\n");

2389  
HI_FAILURE
;

2391 
g_°INIP¨a
.
°ThªshVÆue
.
u32DñèDisExpThªash
 = 
s32Temp
;

2394 
s32Temp
 = 0;

2395 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:Ân_exp_thªsh", 
HI_FAILURE
);

2396 i‡(
HI_FAILURE
 =
s32Temp
)

2398 
¥ötf
("common:fpn_exp_thresh failed\n");

2399  
HI_FAILURE
;

2401 
g_°INIP¨a
.
°ThªshVÆue
.
u32F≤ExpThªsh
 = 
s32Temp
;

2404 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "common:dci_strength_lut");

2405 i‡(
NULL
 =
pszTempSå
)

2407 
¥ötf
("common:dci_strength_lutÉrror\n");

2408  
HI_FAILURE
;

2410 
s32Temp
 = 
Weight
(
pszTempSå
);

2411 
i
 = 0; i < 
s32Temp
; i++)

2413 
g_°INIP¨a
.
au8DciSåígthLut
[
i
] = 
MAEWeight
[i];

2417 
s32Temp
 = 0;

2418 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "comm⁄:u32DRCSåígthThªsh", 
HI_FAILURE
);

2419 i‡(
HI_FAILURE
 =
s32Temp
)

2421 
¥ötf
("common:u32DRCStrengthThresh failed\n");

2422  
HI_FAILURE
;

2424 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
 = 
s32Temp
;

2428 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "nrprofile:nplut_default_1");

2429 i‡(
NULL
 =
pszTempSå
)

2431 
¥ötf
("nrprofile:nplut_default_1Érror\n");

2432  
HI_FAILURE
;

2434 
s32Temp
 = 
Weight
(
pszTempSå
);

2435 
i
 = 0; i < 128; i++)

2437 
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…1
[
i
] = 
MAEWeight
[i];

2441 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "nrprofile:nplut_default_2");

2442 i‡(
NULL
 =
pszTempSå
)

2444 
¥ötf
("nrprofile:nplut_default_2Érror\n");

2445  
HI_FAILURE
;

2447 
s32Temp
 = 
Weight
(
pszTempSå
);

2448 
i
 = 0; i < 128; i++)

2450 
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…2
[
i
] = 
MAEWeight
[i];

2454 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "nrprofile:nplut_1");

2455 i‡(
NULL
 =
pszTempSå
)

2457 
¥ötf
("nrprofile:nplut_1Érror\n");

2458  
HI_FAILURE
;

2460 
s32Temp
 = 
Weight
(
pszTempSå
);

2461 
i
 = 0; i < 128; i++)

2463 
g_°INIP¨a
.
°IniNRProfûe
.
au8Np1
[
i
] = 
MAEWeight
[i];

2467 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "nrprofile:nplut_2");

2468 i‡(
NULL
 =
pszTempSå
)

2470 
¥ötf
("nrprofile:nplut_2Érror\n");

2471  
HI_FAILURE
;

2473 
s32Temp
 = 
Weight
(
pszTempSå
);

2474 
i
 = 0; i < 128; i++)

2476 
g_°INIP¨a
.
°IniNRProfûe
.
au8Np2
[
i
] = 
MAEWeight
[i];

2480 
s32Temp
 = 0;

2481 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "ƒ¥ofûe:ex∂ow", 
HI_FAILURE
);

2482 i‡(
HI_FAILURE
 =
s32Temp
)

2484 
¥ötf
("nrprofile:explow failed\n");

2485  
HI_FAILURE
;

2487 
g_°INIP¨a
.
°IniNRProfûe
.
u32ExpLow
 = 
s32Temp
;

2490 
s32Temp
 = 0;

2491 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "ƒ¥ofûe:exphigh", 
HI_FAILURE
);

2492 i‡(
HI_FAILURE
 =
s32Temp
)

2494 
¥ötf
("nrprofile:exphigh failed\n");

2495  
HI_FAILURE
;

2497 
g_°INIP¨a
.
°IniNRProfûe
.
u32ExpHigh
 = 
s32Temp
;

2501 
s32Temp
 = 0;

2502 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "AE:´RunI¡îvÆ", 
HI_FAILURE
);

2503 i‡(
HI_FAILURE
 =
s32Temp
)

2505 
¥ötf
("AE:aeRunInterval failed\n");

2506  
HI_FAILURE
;

2508 
g_°INIP¨a
.
°IniAE
.
u8AERunI¡îvÆ
 = 
s32Temp
;

2510 
s32Temp
 = 0;

2511 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "AE:´BôøãCou¡", 
HI_FAILURE
);

2512 i‡(
HI_FAILURE
 =
s32Temp
)

2514 
¥ötf
("AE:aeBitrateCount failed\n");

2515  
HI_FAILURE
;

2517 
g_°INIP¨a
.
°IniAE
.
s32BôøãCou¡
 = 
s32Temp
;

2518 
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniAE.
s32BôøãCou¡
) * (HI_U32));

2519 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
);

2520 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
 = (
SCENEAUTO_AERELATEDBIT_S
*)
mÆloc
((g_°INIP¨a.°IniAE.
s32BôøãCou¡
) * (SCENEAUTO_AERELATEDBIT_S));

2521 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
);

2524 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "AE:aeBitrateThresh");

2525 i‡(
NULL
 =
pszTempSå
)

2527 
¥ötf
("AE:aeBitrateThreshÉrror\n");

2528  
HI_FAILURE
;

2530 
s32Temp
 = 
Weight
(
pszTempSå
);

2531 
i
 = 0; i < 
g_°INIP¨a
.
°IniAE
.
s32BôøãCou¡
; i++)

2533 
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
[
i
] = 
MAEWeight
[i];

2536 
i
 = 0; i < 
g_°INIP¨a
.
°IniAE
.
s32BôøãCou¡
; i++)

2539 
¢¥ötf
(
szTempSå
, (szTempSå), "AE:u8S≥ed_%d", 
i
);

2540 
s32Temp
 = 0;

2541 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

2542 i‡(
HI_FAILURE
 =
s32Temp
)

2544 
¥ötf
("AE:u8S≥ed_%d faûed\n", 
i
);

2545  
HI_FAILURE
;

2547 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
i
].
u8S≥ed
 = 
s32Temp
;

2550 
¢¥ötf
(
szTempSå
, (szTempSå), "AE:u8Tﬁî™˚_%d", 
i
);

2551 
s32Temp
 = 0;

2552 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

2553 i‡(
HI_FAILURE
 =
s32Temp
)

2555 
¥ötf
("AE:u8Tﬁî™˚_%d faûed\n", 
i
);

2556  
HI_FAILURE
;

2558 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
i
].
u8Tﬁî™˚
 = 
s32Temp
;

2561 
¢¥ötf
(
szTempSå
, (szTempSå), "AE:u16BœckDñayFøme_%d", 
i
);

2562 
s32Temp
 = 0;

2563 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

2564 i‡(
HI_FAILURE
 =
s32Temp
)

2566 
¥ötf
("AE:u16BœckDñayFøme_%d faûed\n", 
i
);

2567  
HI_FAILURE
;

2569 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
i
].
u16BœckDñayFøme
 = 
s32Temp
;

2572 
¢¥ötf
(
szTempSå
, (szTempSå), "AE:u16WhôeDñayFøme_%d", 
i
);

2573 
s32Temp
 = 0;

2574 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

2575 i‡(
HI_FAILURE
 =
s32Temp
)

2577 
¥ötf
("AE:u16WhôeDñayFøme_%d faûed\n", 
i
);

2578  
HI_FAILURE
;

2580 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
i
].
u16WhôeDñayFøme
 = 
s32Temp
;

2581 
¢¥ötf
(
szTempSå
, (szTempSå), "AE:u32SysGaöMax_%d", 
i
);

2582 
s32Temp
 = 0;

2583 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

2584 i‡(
HI_FAILURE
 =
s32Temp
)

2586 
¥ötf
("AE:u32SysGaöMax_%d faûed\n", 
i
);

2587  
HI_FAILURE
;

2589 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edBô
[
i
].
u32SysGaöMax
 = 
s32Temp
;

2592 
s32Temp
 = 0;

2593 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "AE:´ExpCou¡", 
HI_FAILURE
);

2594 i‡(
HI_FAILURE
 =
s32Temp
)

2596 
¥ötf
("AE:aeExpCount failed\n");

2597  
HI_FAILURE
;

2599 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
 = 
s32Temp
;

2600 
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniAE.
s32ExpCou¡
) * (HI_U32));

2601 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
);

2602 
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniAE.
s32ExpCou¡
) * (HI_U32));

2603 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
);

2604 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
 = (
SCENEAUTO_AERELATEDEXP_S
*)
mÆloc
((g_°INIP¨a.°IniAE.
s32ExpCou¡
) * (SCENEAUTO_AERELATEDEXP_S));

2605 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
 );

2607 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "AE:aeExpDtoLThresh");

2608 i‡(
NULL
 =
pszTempSå
)

2610 
¥ötf
("AE:aeExpDtoLThreshÉrror\n");

2611  
HI_FAILURE
;

2613 
s32Temp
 = 
Weight
(
pszTempSå
);

2614 
i
 = 0; i < 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
; i++)

2616 
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
[
i
] = 
MAEWeight
[i];

2619 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "AE:aeExpLtoDThresh");

2620 i‡(
NULL
 =
pszTempSå
)

2622 
¥ötf
("AE:aeExpLtoDThreshÉrror\n");

2623  
HI_FAILURE
;

2625 
s32Temp
 = 
Weight
(
pszTempSå
);

2626 
i
 = 0; i < 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
; i++)

2628 
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
[
i
] = 
MAEWeight
[i];

2631 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "AE:aeCompesation");

2632 i‡(
NULL
 =
pszTempSå
)

2634 
¥ötf
("AE:aeCompesationÉrror\n");

2635  
HI_FAILURE
;

2637 
s32Temp
 = 
Weight
(
pszTempSå
);

2638 
i
 = 0; i < 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
; i++)

2640 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
[
i
].
u8AECom≥ßti⁄
 = 
MAEWeight
[i];

2643 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "AE:aeHistOffset");

2644 i‡(
NULL
 =
pszTempSå
)

2646 
¥ötf
("AE:aeHistOffsetÉrror\n");

2647  
HI_FAILURE
;

2649 
s32Temp
 = 
Weight
(
pszTempSå
);

2650 
i
 = 0; i < 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
; i++)

2652 
g_°INIP¨a
.
°IniAE
.
p°AERñ©edExp
[
i
].
u8AEHi°Off£t
 = 
MAEWeight
[i];

2656 
s32Temp
 = 0;

2657 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "demoßic:BôøãCou¡", 
HI_FAILURE
);

2658 i‡(
HI_FAILURE
 =
s32Temp
)

2660 
¥ötf
("demosaic:BitrateCount failed\n");

2661  
HI_FAILURE
;

2663 
g_°INIP¨a
.
°IniDemoßic
.
s32BôøãCou¡
 = 
s32Temp
;

2664 
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniDemoßic.
s32BôøãCou¡
) * (HI_U32));

2665 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
);

2667 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "demosaic:BitrateThresh");

2668 i‡(
NULL
 =
pszTempSå
)

2670 
¥ötf
("demosaic:BitrateThreshÉrror\n");

2671  
HI_FAILURE
;

2673 
s32Temp
 = 
Weight
(
pszTempSå
);

2674 
i
 = 0; i < 
g_°INIP¨a
.
°IniDemoßic
.
s32BôøãCou¡
; i++)

2676 
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
[
i
] = 
MAEWeight
[i];

2679 
s32Temp
 = 0;

2680 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "demoßic:ExpCou¡", 
HI_FAILURE
);

2681 i‡(
HI_FAILURE
 =
s32Temp
)

2683 
¥ötf
("demosaic:ExpCount failed\n");

2684  
HI_FAILURE
;

2686 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
 = 
s32Temp
;

2687 
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
) * (HI_U32));

2688 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
);

2690 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "demosaic:ExpThresh");

2691 i‡(
NULL
 =
pszTempSå
)

2693 
¥ötf
("demosaic:ExpThreshÉrror\n");

2694  
HI_FAILURE
;

2696 
s32Temp
 = 
Weight
(
pszTempSå
);

2697 
i
 = 0; i < 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
; i++)

2699 
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
[
i
] = 
MAEWeight
[i];

2702 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
 = (
SCENEAUTO_DEMOSAIC_S
*)
mÆloc
((g_°INIP¨a.°IniDemoßic.
s32BôøãCou¡
Ë* (g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
) * (SCENEAUTO_DEMOSAIC_S));

2703 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
);

2705 
i
 = 0; i < 
g_°INIP¨a
.
°IniDemoßic
.
s32BôøãCou¡
; i++)

2708 
¢¥ötf
(
szTempSå
, (szTempSå), "demoßic:UuSÕ€_%d", 
i
);

2709 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2710 i‡(
NULL
 =
pszTempSå
)

2712 
¥ötf
("demoßic:UuSÕ€_%dÉº‹\n", 
i
);

2713  
HI_FAILURE
;

2715 
s32Temp
 = 
Weight
(
pszTempSå
);

2716 
j
 = 0; j < 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
; j++)

2718 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
i
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
j
].
u8UuSl›e
 = 
MAEWeight
[j];

2722 
¢¥ötf
(
szTempSå
, (szTempSå), "demoßic:VaSl›e_%d", 
i
);

2723 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2724 i‡(
NULL
 =
pszTempSå
)

2726 
¥ötf
("demoßic:VaSl›e_%dÉº‹\n", 
i
);

2727  
HI_FAILURE
;

2729 
s32Temp
 = 
Weight
(
pszTempSå
);

2730 
j
 = 0; j < 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
; j++)

2732 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
i
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
j
].
u8VaSl›e
 = 
MAEWeight
[j];

2736 
¢¥ötf
(
szTempSå
, (szTempSå), "demoßic:AaSl›e_%d", 
i
);

2737 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2738 i‡(
NULL
 =
pszTempSå
)

2740 
¥ötf
("demoßic:AaSl›e_%dÉº‹\n", 
i
);

2741  
HI_FAILURE
;

2743 
s32Temp
 = 
Weight
(
pszTempSå
);

2744 
j
 = 0; j < 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
; j++)

2746 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
i
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
j
].
u8AaSl›e
 = 
MAEWeight
[j];

2750 
¢¥ötf
(
szTempSå
, (szTempSå), "demoßic:VhSl›e_%d", 
i
);

2751 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2752 i‡(
NULL
 =
pszTempSå
)

2754 
¥ötf
("demoßic:VhSl›e_%dÉº‹\n", 
i
);

2755  
HI_FAILURE
;

2757 
s32Temp
 = 
Weight
(
pszTempSå
);

2758 
j
 = 0; j < 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
; j++)

2760 
g_°INIP¨a
.
°IniDemoßic
.
p°Demoßic
[
i
 * g_°INIP¨a.°IniDemoßic.
s32ExpCou¡
 + 
j
].
u8VhSl›e
 = 
MAEWeight
[j];

2765 
s32Temp
 = 0;

2766 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "sh¨≥n:sh¨≥nBôøãCou¡", 
HI_FAILURE
);

2767 i‡(
HI_FAILURE
 =
s32Temp
)

2769 
¥ötf
("sharpen:sharpenBitrateCount failed\n");

2770  
HI_FAILURE
;

2772 
g_°INIP¨a
.
°IniSh¨≥n
.
s32BôøãCou¡
 = 
s32Temp
;

2773 
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniSh¨≥n.
s32BôøãCou¡
) * (HI_U32));

2774 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
);

2777 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "sharpen:sharpenBitrateThresh");

2778 i‡(
NULL
 =
pszTempSå
)

2780 
¥ötf
("sharpen:sharpenBitrateThreshÉrror\n");

2781  
HI_FAILURE
;

2783 
s32Temp
 = 
Weight
(
pszTempSå
);

2784 
i
 = 0; i < 
g_°INIP¨a
.
°IniSh¨≥n
.
s32BôøãCou¡
; i++)

2786 
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
[
i
] = 
MAEWeight
[i];

2789 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
 = (
SCENEAUTO_SHARPEN_S
*)
mÆloc
((g_°INIP¨a.°IniSh¨≥n.
s32BôøãCou¡
) * (SCENEAUTO_SHARPEN_S));

2790 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
);

2792 
i
 = 0; i < 
g_°INIP¨a
.
°IniSh¨≥n
.
s32BôøãCou¡
; i++)

2795 
¢¥ötf
(
szTempSå
, (szTempSå), "sh¨≥n:Sh¨≥nD_%d", 
i
);

2796 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2797 i‡(
NULL
 =
pszTempSå
)

2799 
¥ötf
("sh¨≥n:Sh¨≥nD_%dÉº‹\n", 
i
);

2800  
HI_FAILURE
;

2802 
s32Temp
 = 
Weight
(
pszTempSå
);

2803 
j
 = 0; j < 
EXPOSURE_LEVEL
; j++)

2805 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
[
i
].
au8Sh¨≥nD
[
j
] = 
MAEWeight
[j];

2809 
¢¥ötf
(
szTempSå
, (szTempSå), "sh¨≥n:Sh¨≥nRGB_%d", 
i
);

2810 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2811 i‡(
NULL
 =
pszTempSå
)

2813 
¥ötf
("sh¨≥n:Sh¨≥nRGB_%dÉº‹\n", 
i
);

2814  
HI_FAILURE
;

2816 
s32Temp
 = 
Weight
(
pszTempSå
);

2817 
j
 = 0; j < 
EXPOSURE_LEVEL
; j++)

2819 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
[
i
].
au8Sh¨≥nRGB
[
j
] = 
MAEWeight
[j];

2823 
¢¥ötf
(
szTempSå
, (szTempSå), "sh¨≥n:Sh¨≥nUd_%d", 
i
);

2824 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2825 i‡(
NULL
 =
pszTempSå
)

2827 
¥ötf
("sh¨≥n:Sh¨≥nUd_%dÉº‹\n", 
i
);

2828  
HI_FAILURE
;

2830 
s32Temp
 = 
Weight
(
pszTempSå
);

2831 
j
 = 0; j < 
EXPOSURE_LEVEL
; j++)

2833 
g_°INIP¨a
.
°IniSh¨≥n
.
p°Sh¨≥n
[
i
].
au8Sh¨≥nUd
[
j
] = 
MAEWeight
[j];

2838 
s32Temp
 = 0;

2839 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "dp:ExpCou¡", 
HI_FAILURE
);

2840 i‡(
HI_FAILURE
 =
s32Temp
)

2842 
¥ötf
("dp:ExpCount failed\n");

2843  
HI_FAILURE
;

2845 
g_°INIP¨a
.
°IniDP
.
s32ExpCou¡
 = 
s32Temp
;

2846 
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniDP.
s32ExpCou¡
) * (HI_U32));

2847 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
);

2848 
g_°INIP¨a
.
°IniDP
.
p°DPAâr
 = (
SCENEAUTO_DEPATTR_S
*)
mÆloc
((g_°INIP¨a.°IniDP.
s32ExpCou¡
) * (SCENEAUTO_DEPATTR_S));

2849 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniDP
.
p°DPAâr
);

2851 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "dp:ExpThresh");

2852 i‡(
NULL
 =
pszTempSå
)

2854 
¥ötf
("dp:ExpThreshÉrror\n");

2855  
HI_FAILURE
;

2857 
s32Temp
 = 
Weight
(
pszTempSå
);

2858 
i
 = 0; i < 
g_°INIP¨a
.
°IniDP
.
s32ExpCou¡
; i++)

2860 
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
[
i
] = 
MAEWeight
[i];

2863 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "dp:u16Slop");

2864 i‡(
NULL
 =
pszTempSå
)

2866 
¥ötf
("dp:u16SlopÉrror\n");

2867  
HI_FAILURE
;

2869 
s32Temp
 = 
Weight
(
pszTempSå
);

2870 
i
 = 0; i < 
g_°INIP¨a
.
°IniDP
.
s32ExpCou¡
; i++)

2872 
g_°INIP¨a
.
°IniDP
.
p°DPAâr
[
i
].
u16Sl›e
 = 
MAEWeight
[i];

2876 
s32Temp
 = 0;

2877 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "gamma:DñayCou¡", 
HI_FAILURE
);

2878 i‡(
HI_FAILURE
 =
s32Temp
)

2880 
¥ötf
("gamma:DelayCount failed\n");

2881  
HI_FAILURE
;

2883 
g_°INIP¨a
.
°IniGamma
.
u32DñayCou¡
 = 
s32Temp
;

2886 
s32Temp
 = 0;

2887 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "gamma:I¡îvÆ", 
HI_FAILURE
);

2888 i‡(
HI_FAILURE
 =
s32Temp
)

2890 
¥ötf
("gamma:Interval failed\n");

2891  
HI_FAILURE
;

2893 
g_°INIP¨a
.
°IniGamma
.
s32I¡îvÆ
 = 
s32Temp
;

2896 
s32Temp
 = 0;

2897 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "gamma:ExpCou¡", 
HI_FAILURE
);

2898 i‡(
HI_FAILURE
 =
s32Temp
)

2900 
¥ötf
("gamma:ExpCount failed\n");

2901  
HI_FAILURE
;

2903 
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
 = 
s32Temp
;

2905 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniGamma.
s32ExpCou¡
) * (HI_U32));

2906 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
);

2907 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniGamma.
s32ExpCou¡
) * (HI_U32));

2908 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
);

2909 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
 = (
SCENEAUTO_GAMMA_S
*)
mÆloc
((g_°INIP¨a.°IniGamma.
s32ExpCou¡
) * (SCENEAUTO_GAMMA_S));

2910 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniGamma
.
p°Gamma
);

2912 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "gamma:ExpThreshLtoD");

2913 i‡(
NULL
 =
pszTempSå
)

2915 
¥ötf
("gamma:ExpThreshLtoDÉrror\n");

2916  
HI_FAILURE
;

2918 
s32Temp
 = 
Weight
(
pszTempSå
);

2919 
i
 = 0; i < 
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
; i++)

2921 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
[
i
] = 
MAEWeight
[i];

2924 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "gamma:ExpThreshDtoL");

2925 i‡(
NULL
 =
pszTempSå
)

2927 
¥ötf
("gamma:ExpThreshDtoLÉrror\n");

2928  
HI_FAILURE
;

2930 
s32Temp
 = 
Weight
(
pszTempSå
);

2931 
i
 = 0; i < 
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
; i++)

2933 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
[
i
] = 
MAEWeight
[i];

2936 
i
 = 0; i < 
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
; i++)

2938 
s32Off£t
 = 0;

2940 
¢¥ötf
(
szTempSå
, (szTempSå), "gamma:gamma.0_%d", 
i
);

2941 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2942 i‡(
NULL
 =
pszTempSå
)

2944 
¥ötf
("gamma:gamma.0_%dÉº‹\n", 
i
);

2945  
HI_FAILURE
;

2947 
s32Temp
 = 
Weight
(
pszTempSå
);

2948 
j
 = 0; j < 
s32Temp
; j++)

2950 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
i
].
u16TabÀ
[
j
] = 
MAEWeight
[j];

2952 
s32Off£t
 +
s32Temp
;

2954 
¢¥ötf
(
szTempSå
, (szTempSå), "gamma:gamma.1_%d", 
i
);

2955 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2956 i‡(
NULL
 =
pszTempSå
)

2958 
¥ötf
("gamma:gamma.1_%dÉº‹\n", 
i
);

2959  
HI_FAILURE
;

2961 
s32Temp
 = 
Weight
(
pszTempSå
);

2962 
j
 = 0; j < 
s32Temp
; j++)

2964 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
i
].
u16TabÀ
[
s32Off£t
 + 
j
] = 
MAEWeight
[j];

2966 
s32Off£t
 +
s32Temp
;

2968 
¢¥ötf
(
szTempSå
, (szTempSå), "gamma:gamma.2_%d", 
i
);

2969 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

2970 i‡(
NULL
 =
pszTempSå
)

2972 
¥ötf
("gamma:gamma.2_%dÉº‹\n", 
i
);

2973  
HI_FAILURE
;

2975 
s32Temp
 = 
Weight
(
pszTempSå
);

2976 
j
 = 0; j < 
s32Temp
; j++)

2978 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
i
].
u16TabÀ
[
s32Off£t
 + 
j
] = 
MAEWeight
[j];

2981 
g_°INIP¨a
.
°IniGamma
.
p°Gamma
[
i
].
u8CurveTy≥
 = 2;

2986 
s32Temp
 = 0;

2987 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "h264víc:vícBôøãCou¡", 
HI_FAILURE
);

2988 i‡(
HI_FAILURE
 =
s32Temp
)

2990 
¥ötf
("h264venc:vencBitrateCount failed\n");

2991  
HI_FAILURE
;

2993 
g_°INIP¨a
.
°IniH264Víc
.
s32BôøãCou¡
 = 
s32Temp
;

2994 
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniH264Víc.
s32BôøãCou¡
) * (HI_U32));

2995 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
);

2996 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
 = (
SCENEAUTO_H264VENC_S
*)
mÆloc
((g_°INIP¨a.°IniH264Víc.
s32BôøãCou¡
) * (SCENEAUTO_H264VENC_S));

2997 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
);

2999 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "h264venc:vencBitrateThresh");

3000 i‡(
NULL
 =
pszTempSå
)

3002 
¥ötf
("h264venc:vencBitrateThreshÉrror\n");

3003  
HI_FAILURE
;

3005 
s32Temp
 = 
Weight
(
pszTempSå
);

3006 
i
 = 0; i < 
g_°INIP¨a
.
°IniH264Víc
.
s32BôøãCou¡
; i++)

3008 
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
[
i
] = 
MAEWeight
[i];

3011 
i
 = 0; i < 
g_°INIP¨a
.
°IniH264Víc
.
s32BôøãCou¡
; i++)

3014 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:chroma_qp_ödex_off£t_%d", 
i
);

3015 
s32Temp
 = 0;

3016 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3017 i‡(
HI_FAILURE
 =
s32Temp
)

3019 
¥ötf
("h264víc:chroma_qp_ödex_off£t_%d faûed\n", 
i
);

3020  
HI_FAILURE
;

3022 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
s32chroma_qp_ödex_off£t
 = 
s32Temp
;

3025 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:dißbÀ_deblockög_fûãr_idc_%d", 
i
);

3026 
s32Temp
 = 0;

3027 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3028 i‡(
HI_FAILURE
 =
s32Temp
)

3030 
¥ötf
("h264víc:dißbÀ_deblockög_fûãr_idc_%d faûed\n", 
i
);

3031  
HI_FAILURE
;

3033 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
°H264Dblk
.
dißbÀ_deblockög_fûãr_idc
 = 
s32Temp
;

3036 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:¶i˚_Æpha_c0_off£t_div2_%d", 
i
);

3037 
s32Temp
 = 0;

3038 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3039 i‡(
HI_FAILURE
 =
s32Temp
)

3041 
¥ötf
("h264víc:¶i˚_Æpha_c0_off£t_div2_%d faûed\n", 
i
);

3042  
HI_FAILURE
;

3044 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
°H264Dblk
.
¶i˚_Æpha_c0_off£t_div2
 = 
s32Temp
;

3047 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:¶i˚_bëa_off£t_div2_%d", 
i
);

3048 
s32Temp
 = 0;

3049 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3050 i‡(
HI_FAILURE
 =
s32Temp
)

3052 
¥ötf
("h264víc:¶i˚_bëa_off£t_div2_%d faûed\n", 
i
);

3053  
HI_FAILURE
;

3055 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
°H264Dblk
.
¶i˚_bëa_off£t_div2
 = 
s32Temp
;

3058 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:u32DñèQP_%d", 
i
);

3059 
s32Temp
 = 0;

3060 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3061 i‡(
HI_FAILURE
 =
s32Temp
)

3063 
¥ötf
("h264víc:u32DñèQP_%d faûed\n", 
i
);

3064  
HI_FAILURE
;

3066 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
u32DñèQP
 = 
s32Temp
;

3069 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:s32IPQPDñè_%d", 
i
);

3070 
s32Temp
 = 0;

3071 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3072 i‡(
HI_FAILURE
 =
s32Temp
)

3074 
¥ötf
("h264víc:s32IPQPDñè_%d faûed\n", 
i
);

3075  
HI_FAILURE
;

3077 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
s32IPQPDñè
 = 
s32Temp
;

3080 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:ThªshI_%d", 
i
);

3081 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3082 i‡(
NULL
 =
pszTempSå
)

3084 
¥ötf
("h264víc:ThªshI_%dÉº‹\n", 
i
);

3085  
HI_FAILURE
;

3087 
s32Temp
 = 
Weight
(
pszTempSå
);

3088 
j
 = 0; j < 12; j++)

3090 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
u32ThrdI
[
j
] = 
MAEWeight
[j];

3094 
¢¥ötf
(
szTempSå
, (szTempSå), "h264víc:ThªshP_%d", 
i
);

3095 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3096 i‡(
NULL
 =
pszTempSå
)

3098 
¥ötf
("h264víc:ThªshP_%dÉº‹\n", 
i
);

3099  
HI_FAILURE
;

3101 
s32Temp
 = 
Weight
(
pszTempSå
);

3102 
j
 = 0; j < 12; j++)

3104 
g_°INIP¨a
.
°IniH264Víc
.
p°H264Víc
[
i
].
u32ThrdP
[
j
] = 
MAEWeight
[j];

3110 
s32Temp
 = 0;

3111 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "h265víc:vícBôøãCou¡", 
HI_FAILURE
);

3112 i‡(
HI_FAILURE
 =
s32Temp
)

3114 
¥ötf
("h264venc:vencBitrateCount failed\n");

3115  
HI_FAILURE
;

3117 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
s32BôøãCou¡
 = 
s32Temp
;

3118 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniH265Víc.°IniH265VícRcP¨am.
s32BôøãCou¡
) * (HI_U32));

3119 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
);

3120 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
 = (
SCENEAUTO_H265VENC_RCPARAM_S
*)
mÆloc
((g_°INIP¨a.°IniH265Víc.°IniH265VícRcP¨am.
s32BôøãCou¡
) * (SCENEAUTO_H265VENC_RCPARAM_S));

3121 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
);

3124 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "h265venc:vencBitrateThresh");

3125 i‡(
NULL
 =
pszTempSå
)

3127 
¥ötf
("h265venc:vencBitrateThreshÉrror\n");

3128  
HI_FAILURE
;

3130 
s32Temp
 = 
Weight
(
pszTempSå
);

3131 
i
 = 0; i < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
s32BôøãCou¡
; i++)

3133 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
[
i
] = 
MAEWeight
[i];

3136 
i
 = 0; i < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
s32BôøãCou¡
; i++)

3139 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32RowQpDñè_%d", 
i
);

3140 
s32Temp
 = 0;

3141 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3142 i‡(
HI_FAILURE
 =
s32Temp
)

3144 
¥ötf
("h265víc:u32RowQpDñè_%d faûed\n", 
i
);

3145  
HI_FAILURE
;

3147 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
i
].
u32DñèQP
 = 
s32Temp
;

3150 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:s32IPQPDñè_%d", 
i
);

3151 
s32Temp
 = 0;

3152 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

3153 i‡(
HI_FAILURE
 =
s32Temp
)

3155 
¥ötf
("h265víc:s32IPQPDñè_%d faûed\n", 
i
);

3156  
HI_FAILURE
;

3158 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
i
].
s32IPQPDñè
 = 
s32Temp
;

3160 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:ThªshI_%d", 
i
);

3161 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3162 i‡(
NULL
 =
pszTempSå
)

3164 
¥ötf
("h265víc:ThªshI_%dÉº‹\n", 
i
);

3165  
HI_FAILURE
;

3167 
s32Temp
 = 
Weight
(
pszTempSå
);

3168 
j
 = 0; j < 12; j++)

3170 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
i
].
u32ThrdI
[
j
] = 
MAEWeight
[j];

3174 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:ThªshP_%d", 
i
);

3175 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3176 i‡(
NULL
 =
pszTempSå
)

3178 
¥ötf
("h265víc:ThªshP_%dÉº‹\n", 
i
);

3179  
HI_FAILURE
;

3181 
s32Temp
 = 
Weight
(
pszTempSå
);

3182 
j
 = 0; j < 12; j++)

3184 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
p°H265VícRcP¨am
[
i
].
u32ThrdP
[
j
] = 
MAEWeight
[j];

3190 
s32Temp
 = 0;

3191 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "h265víc:vícBôøãCou¡", 
HI_FAILURE
);

3192 i‡(
HI_FAILURE
 =
s32Temp
)

3194 
¥ötf
("h265venc:vencBitrateCount failed\n");

3195  
HI_FAILURE
;

3197 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32BôøãCou¡
 = 
s32Temp
;

3198 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32BôøãCou¡
) * (HI_U32));

3199 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
);

3201 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "h265venc:vencBitrateThresh");

3202 i‡(
NULL
 =
pszTempSå
)

3204 
¥ötf
("h265venc:vencBitrateThreshÉrror\n");

3205  
HI_FAILURE
;

3207 
s32Temp
 = 
Weight
(
pszTempSå
);

3208 
i
 = 0; i < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32BôøãCou¡
; i++)

3210 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
[
i
] = 
MAEWeight
[i];

3213 
s32Temp
 = 0;

3214 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "h265víc:ExpCou¡", 
HI_FAILURE
);

3215 i‡(
HI_FAILURE
 =
s32Temp
)

3217 
¥ötf
("h265venc:ExpCount failed\n");

3218  
HI_FAILURE
;

3220 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
 = 
s32Temp
;

3221 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
) * (HI_U32));

3222 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
);

3224 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "h265venc:ExpThresh");

3225 i‡(
NULL
 =
pszTempSå
)

3227 
¥ötf
("h265venc:ExpThreshÉrror\n");

3228  
HI_FAILURE
;

3230 
s32Temp
 = 
Weight
(
pszTempSå
);

3231 
i
 = 0; i < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; i++)

3233 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
[
i
] = 
MAEWeight
[i];

3236 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
 = (
SCENEAUTO_H265VENC_FACECFG_S
*)
mÆloc
((g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32BôøãCou¡
Ë* (g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
) * (SCENEAUTO_H265VENC_FACECFG_S));

3237 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
);

3239 
i
 = 0; i < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32BôøãCou¡
; i++)

3242 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø4RdCo°_I_%d", 
i
);

3243 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3244 i‡(
NULL
 =
pszTempSå
)

3246 
¥ötf
("h265víc:u8N‹mI¡ø4RdCo°_I_%dÉº‹\n", 
i
);

3247  
HI_FAILURE
;

3249 
s32Temp
 = 
Weight
(
pszTempSå
);

3250 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3252 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø4RdCo°_I
 = 
MAEWeight
[j];

3255 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø8RdCo°_I_%d", 
i
);

3256 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3257 i‡(
NULL
 =
pszTempSå
)

3259 
¥ötf
("h265víc:u8N‹mI¡ø8RdCo°_I_%dÉº‹\n", 
i
);

3260  
HI_FAILURE
;

3262 
s32Temp
 = 
Weight
(
pszTempSå
);

3263 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3265 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø8RdCo°_I
 = 
MAEWeight
[j];

3268 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø16RdCo°_I_%d", 
i
);

3269 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3270 i‡(
NULL
 =
pszTempSå
)

3272 
¥ötf
("h265víc:u8N‹mI¡ø16RdCo°_I_%dÉº‹\n", 
i
);

3273  
HI_FAILURE
;

3275 
s32Temp
 = 
Weight
(
pszTempSå
);

3276 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3278 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø16RdCo°_I
 = 
MAEWeight
[j];

3281 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø32RdCo°_I_%d", 
i
);

3282 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3283 i‡(
NULL
 =
pszTempSå
)

3285 
¥ötf
("h265víc:u8N‹mI¡ø32RdCo°_I_%dÉº‹\n", 
i
);

3286  
HI_FAILURE
;

3288 
s32Temp
 = 
Weight
(
pszTempSå
);

3289 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3291 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø32RdCo°_I
 = 
MAEWeight
[j];

3294 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø4RdCo°_I_%d", 
i
);

3295 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3296 i‡(
NULL
 =
pszTempSå
)

3298 
¥ötf
("h265víc:u8SköI¡ø4RdCo°_I_%dÉº‹\n", 
i
);

3299  
HI_FAILURE
;

3301 
s32Temp
 = 
Weight
(
pszTempSå
);

3302 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3304 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø4RdCo°_I
 = 
MAEWeight
[j];

3307 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø8RdCo°_I_%d", 
i
);

3308 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3309 i‡(
NULL
 =
pszTempSå
)

3311 
¥ötf
("h265víc:u8SköI¡ø8RdCo°_I_%dÉº‹\n", 
i
);

3312  
HI_FAILURE
;

3314 
s32Temp
 = 
Weight
(
pszTempSå
);

3315 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3317 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø8RdCo°_I
 = 
MAEWeight
[j];

3320 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø16RdCo°_I_%d", 
i
);

3321 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3322 i‡(
NULL
 =
pszTempSå
)

3324 
¥ötf
("h265víc:u8SköI¡ø16RdCo°_I_%dÉº‹\n", 
i
);

3325  
HI_FAILURE
;

3327 
s32Temp
 = 
Weight
(
pszTempSå
);

3328 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3330 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø16RdCo°_I
 = 
MAEWeight
[j];

3333 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø32RdCo°_I_%d", 
i
);

3334 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3335 i‡(
NULL
 =
pszTempSå
)

3337 
¥ötf
("h265víc:u8SköI¡ø32RdCo°_I_%dÉº‹\n", 
i
);

3338  
HI_FAILURE
;

3340 
s32Temp
 = 
Weight
(
pszTempSå
);

3341 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3343 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø32RdCo°_I
 = 
MAEWeight
[j];

3346 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø4RdCo°_I_%d", 
i
);

3347 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3348 i‡(
NULL
 =
pszTempSå
)

3350 
¥ötf
("h265víc:u8HedgeI¡ø4RdCo°_I_%dÉº‹\n", 
i
);

3351  
HI_FAILURE
;

3353 
s32Temp
 = 
Weight
(
pszTempSå
);

3354 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3356 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø4RdCo°_I
 = 
MAEWeight
[j];

3359 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø8RdCo°_I_%d", 
i
);

3360 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3361 i‡(
NULL
 =
pszTempSå
)

3363 
¥ötf
("h265víc:u8HedgeI¡ø8RdCo°_I_%dÉº‹\n", 
i
);

3364  
HI_FAILURE
;

3366 
s32Temp
 = 
Weight
(
pszTempSå
);

3367 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3369 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø8RdCo°_I
 = 
MAEWeight
[j];

3372 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø16RdCo°_I_%d", 
i
);

3373 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3374 i‡(
NULL
 =
pszTempSå
)

3376 
¥ötf
("h265víc:u8HedgeI¡ø16RdCo°_I_%dÉº‹\n", 
i
);

3377  
HI_FAILURE
;

3379 
s32Temp
 = 
Weight
(
pszTempSå
);

3380 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3382 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø16RdCo°_I
 = 
MAEWeight
[j];

3385 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø32RdCo°_I_%d", 
i
);

3386 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3387 i‡(
NULL
 =
pszTempSå
)

3389 
¥ötf
("h265víc:u8HedgeI¡ø32RdCo°_I_%dÉº‹\n", 
i
);

3390  
HI_FAILURE
;

3392 
s32Temp
 = 
Weight
(
pszTempSå
);

3393 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3395 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø32RdCo°_I
 = 
MAEWeight
[j];

3398 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø4RdCo°_P_%d", 
i
);

3399 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3400 i‡(
NULL
 =
pszTempSå
)

3402 
¥ötf
("h265víc:u8N‹mI¡ø4RdCo°_P_%dÉº‹\n", 
i
);

3403  
HI_FAILURE
;

3405 
s32Temp
 = 
Weight
(
pszTempSå
);

3406 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3408 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø4RdCo°_P
 = 
MAEWeight
[j];

3411 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø8RdCo°_P_%d", 
i
);

3412 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3413 i‡(
NULL
 =
pszTempSå
)

3415 
¥ötf
("h265víc:u8N‹mI¡ø8RdCo°_P_%dÉº‹\n", 
i
);

3416  
HI_FAILURE
;

3418 
s32Temp
 = 
Weight
(
pszTempSå
);

3419 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3421 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø8RdCo°_P
 = 
MAEWeight
[j];

3424 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø16RdCo°_P_%d", 
i
);

3425 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3426 i‡(
NULL
 =
pszTempSå
)

3428 
¥ötf
("h265víc:u8N‹mI¡ø16RdCo°_P_%dÉº‹\n", 
i
);

3429  
HI_FAILURE
;

3431 
s32Temp
 = 
Weight
(
pszTempSå
);

3432 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3434 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø16RdCo°_P
 = 
MAEWeight
[j];

3437 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mI¡ø32RdCo°_P_%d", 
i
);

3438 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3439 i‡(
NULL
 =
pszTempSå
)

3441 
¥ötf
("h265víc:u8N‹mI¡ø32RdCo°_P_%dÉº‹\n", 
i
);

3442  
HI_FAILURE
;

3444 
s32Temp
 = 
Weight
(
pszTempSå
);

3445 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3447 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mI¡ø32RdCo°_P
 = 
MAEWeight
[j];

3450 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø4RdCo°_P_%d", 
i
);

3451 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3452 i‡(
NULL
 =
pszTempSå
)

3454 
¥ötf
("h265víc:u8SköI¡ø4RdCo°_P_%dÉº‹\n", 
i
);

3455  
HI_FAILURE
;

3457 
s32Temp
 = 
Weight
(
pszTempSå
);

3458 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3460 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø4RdCo°_P
 = 
MAEWeight
[j];

3463 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø8RdCo°_P_%d", 
i
);

3464 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3465 i‡(
NULL
 =
pszTempSå
)

3467 
¥ötf
("h265víc:u8SköI¡ø8RdCo°_P_%dÉº‹\n", 
i
);

3468  
HI_FAILURE
;

3470 
s32Temp
 = 
Weight
(
pszTempSå
);

3471 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3473 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø8RdCo°_P
 = 
MAEWeight
[j];

3476 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø16RdCo°_P_%d", 
i
);

3477 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3478 i‡(
NULL
 =
pszTempSå
)

3480 
¥ötf
("h265víc:u8SköI¡ø16RdCo°_P_%dÉº‹\n", 
i
);

3481  
HI_FAILURE
;

3483 
s32Temp
 = 
Weight
(
pszTempSå
);

3484 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3486 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø16RdCo°_P
 = 
MAEWeight
[j];

3489 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköI¡ø32RdCo°_P_%d", 
i
);

3490 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3491 i‡(
NULL
 =
pszTempSå
)

3493 
¥ötf
("h265víc:u8SköI¡ø32RdCo°_P_%dÉº‹\n", 
i
);

3494  
HI_FAILURE
;

3496 
s32Temp
 = 
Weight
(
pszTempSå
);

3497 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3499 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköI¡ø32RdCo°_P
 = 
MAEWeight
[j];

3502 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø4RdCo°_P_%d", 
i
);

3503 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3504 i‡(
NULL
 =
pszTempSå
)

3506 
¥ötf
("h265víc:u8HedgeI¡ø4RdCo°_P_%dÉº‹\n", 
i
);

3507  
HI_FAILURE
;

3509 
s32Temp
 = 
Weight
(
pszTempSå
);

3510 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3512 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø4RdCo°_P
 = 
MAEWeight
[j];

3515 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø8RdCo°_P_%d", 
i
);

3516 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3517 i‡(
NULL
 =
pszTempSå
)

3519 
¥ötf
("h265víc:u8HedgeI¡ø8RdCo°_P_%dÉº‹\n", 
i
);

3520  
HI_FAILURE
;

3522 
s32Temp
 = 
Weight
(
pszTempSå
);

3523 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3525 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø8RdCo°_P
 = 
MAEWeight
[j];

3528 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø16RdCo°_P_%d", 
i
);

3529 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3530 i‡(
NULL
 =
pszTempSå
)

3532 
¥ötf
("h265víc:u8HedgeI¡ø16RdCo°_P_%dÉº‹\n", 
i
);

3533  
HI_FAILURE
;

3535 
s32Temp
 = 
Weight
(
pszTempSå
);

3536 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3538 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø16RdCo°_P
 = 
MAEWeight
[j];

3541 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeI¡ø32RdCo°_P_%d", 
i
);

3542 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3543 i‡(
NULL
 =
pszTempSå
)

3545 
¥ötf
("h265víc:u8HedgeI¡ø32RdCo°_P_%dÉº‹\n", 
i
);

3546  
HI_FAILURE
;

3548 
s32Temp
 = 
Weight
(
pszTempSå
);

3549 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3551 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeI¡ø32RdCo°_P
 = 
MAEWeight
[j];

3554 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mFme8RdCo°_P_%d", 
i
);

3555 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3556 i‡(
NULL
 =
pszTempSå
)

3558 
¥ötf
("h265víc:u8N‹mFme8RdCo°_P_%dÉº‹\n", 
i
);

3559  
HI_FAILURE
;

3561 
s32Temp
 = 
Weight
(
pszTempSå
);

3562 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3564 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mFme8RdCo°_P
 = 
MAEWeight
[j];

3567 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mFme16RdCo°_P_%d", 
i
);

3568 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3569 i‡(
NULL
 =
pszTempSå
)

3571 
¥ötf
("h265víc:u8N‹mFme16RdCo°_P_%dÉº‹\n", 
i
);

3572  
HI_FAILURE
;

3574 
s32Temp
 = 
Weight
(
pszTempSå
);

3575 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3577 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mFme16RdCo°_P
 = 
MAEWeight
[j];

3580 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mFme32RdCo°_P_%d", 
i
);

3581 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3582 i‡(
NULL
 =
pszTempSå
)

3584 
¥ötf
("h265víc:u8N‹mFme32RdCo°_P_%dÉº‹\n", 
i
);

3585  
HI_FAILURE
;

3587 
s32Temp
 = 
Weight
(
pszTempSå
);

3588 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3590 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mFme32RdCo°_P
 = 
MAEWeight
[j];

3593 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mFme64RdCo°_P_%d", 
i
);

3594 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3595 i‡(
NULL
 =
pszTempSå
)

3597 
¥ötf
("h265víc:u8N‹mFme64RdCo°_P_%dÉº‹\n", 
i
);

3598  
HI_FAILURE
;

3600 
s32Temp
 = 
Weight
(
pszTempSå
);

3601 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3603 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mFme64RdCo°_P
 = 
MAEWeight
[j];

3605 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköFme8RdCo°_P_%d", 
i
);

3606 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3607 i‡(
NULL
 =
pszTempSå
)

3609 
¥ötf
("h265víc:u8SköFme8RdCo°_P_%dÉº‹\n", 
i
);

3610  
HI_FAILURE
;

3612 
s32Temp
 = 
Weight
(
pszTempSå
);

3613 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3615 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköFme8RdCo°_P
 = 
MAEWeight
[j];

3617 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköFme16RdCo°_P_%d", 
i
);

3618 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3619 i‡(
NULL
 =
pszTempSå
)

3621 
¥ötf
("h265víc:u8SköFme16RdCo°_P_%dÉº‹\n", 
i
);

3622  
HI_FAILURE
;

3624 
s32Temp
 = 
Weight
(
pszTempSå
);

3625 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3627 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköFme16RdCo°_P
 = 
MAEWeight
[j];

3629 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköFme32RdCo°_P_%d", 
i
);

3630 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3631 i‡(
NULL
 =
pszTempSå
)

3633 
¥ötf
("h265víc:u8SköFme32RdCo°_P_%dÉº‹\n", 
i
);

3634  
HI_FAILURE
;

3636 
s32Temp
 = 
Weight
(
pszTempSå
);

3637 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3639 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköFme32RdCo°_P
 = 
MAEWeight
[j];

3641 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköFme64RdCo°_P_%d", 
i
);

3642 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3643 i‡(
NULL
 =
pszTempSå
)

3645 
¥ötf
("h265víc:u8SköFme64RdCo°_P_%dÉº‹\n", 
i
);

3646  
HI_FAILURE
;

3648 
s32Temp
 = 
Weight
(
pszTempSå
);

3649 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3651 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköFme64RdCo°_P
 = 
MAEWeight
[j];

3654 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeFme8RdCo°_P_%d", 
i
);

3655 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3656 i‡(
NULL
 =
pszTempSå
)

3658 
¥ötf
("h265víc:u8HedgeFme8RdCo°_P_%dÉº‹\n", 
i
);

3659  
HI_FAILURE
;

3661 
s32Temp
 = 
Weight
(
pszTempSå
);

3662 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3664 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeFme8RdCo°_P
 = 
MAEWeight
[j];

3667 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeFme16RdCo°_P_%d", 
i
);

3668 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3669 i‡(
NULL
 =
pszTempSå
)

3671 
¥ötf
("h265víc:u8HedgeFme16RdCo°_P_%dÉº‹\n", 
i
);

3672  
HI_FAILURE
;

3674 
s32Temp
 = 
Weight
(
pszTempSå
);

3675 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3677 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeFme16RdCo°_P
 = 
MAEWeight
[j];

3680 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeFme32RdCo°_P_%d", 
i
);

3681 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3682 i‡(
NULL
 =
pszTempSå
)

3684 
¥ötf
("h265víc:u8HedgeFme32RdCo°_P_%dÉº‹\n", 
i
);

3685  
HI_FAILURE
;

3687 
s32Temp
 = 
Weight
(
pszTempSå
);

3688 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3690 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeFme32RdCo°_P
 = 
MAEWeight
[j];

3693 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeFme64RdCo°_P_%d", 
i
);

3694 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3695 i‡(
NULL
 =
pszTempSå
)

3697 
¥ötf
("h265víc:u8HedgeFme64RdCo°_P_%dÉº‹\n", 
i
);

3698  
HI_FAILURE
;

3700 
s32Temp
 = 
Weight
(
pszTempSå
);

3701 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3703 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeFme64RdCo°_P
 = 
MAEWeight
[j];

3706 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mMîg8RdCo°_P_%d", 
i
);

3707 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3708 i‡(
NULL
 =
pszTempSå
)

3710 
¥ötf
("h265víc:u8N‹mMîg8RdCo°_P_%dÉº‹\n", 
i
);

3711  
HI_FAILURE
;

3713 
s32Temp
 = 
Weight
(
pszTempSå
);

3714 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3716 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mMîg8RdCo°_P
 = 
MAEWeight
[j];

3719 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mMîg16RdCo°_P_%d", 
i
);

3720 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3721 i‡(
NULL
 =
pszTempSå
)

3723 
¥ötf
("h265víc:u8N‹mMîg16RdCo°_P_%dÉº‹\n", 
i
);

3724  
HI_FAILURE
;

3726 
s32Temp
 = 
Weight
(
pszTempSå
);

3727 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3729 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mMîg16RdCo°_P
 = 
MAEWeight
[j];

3732 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mMîg32RdCo°_P_%d", 
i
);

3733 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3734 i‡(
NULL
 =
pszTempSå
)

3736 
¥ötf
("h265víc:u8N‹mMîg32RdCo°_P_%dÉº‹\n", 
i
);

3737  
HI_FAILURE
;

3739 
s32Temp
 = 
Weight
(
pszTempSå
);

3740 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3742 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mMîg32RdCo°_P
 = 
MAEWeight
[j];

3745 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8N‹mMîg64RdCo°_P_%d", 
i
);

3746 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3747 i‡(
NULL
 =
pszTempSå
)

3749 
¥ötf
("h265víc:u8N‹mMîg64RdCo°_P_%dÉº‹\n", 
i
);

3750  
HI_FAILURE
;

3752 
s32Temp
 = 
Weight
(
pszTempSå
);

3753 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3755 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8N‹mMîg64RdCo°_P
 = 
MAEWeight
[j];

3757 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköMîg8RdCo°_P_%d", 
i
);

3758 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3759 i‡(
NULL
 =
pszTempSå
)

3761 
¥ötf
("h265víc:u8SköMîg8RdCo°_P_%dÉº‹\n", 
i
);

3762  
HI_FAILURE
;

3764 
s32Temp
 = 
Weight
(
pszTempSå
);

3765 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3767 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköMîg8RdCo°_P
 = 
MAEWeight
[j];

3769 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköMîg16RdCo°_P_%d", 
i
);

3770 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3771 i‡(
NULL
 =
pszTempSå
)

3773 
¥ötf
("h265víc:u8SköMîg16RdCo°_P_%dÉº‹\n", 
i
);

3774  
HI_FAILURE
;

3776 
s32Temp
 = 
Weight
(
pszTempSå
);

3777 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3779 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköMîg16RdCo°_P
 = 
MAEWeight
[j];

3781 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköMîg32RdCo°_P_%d", 
i
);

3782 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3783 i‡(
NULL
 =
pszTempSå
)

3785 
¥ötf
("h265víc:u8SköMîg32RdCo°_P_%dÉº‹\n", 
i
);

3786  
HI_FAILURE
;

3788 
s32Temp
 = 
Weight
(
pszTempSå
);

3789 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3791 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköMîg32RdCo°_P
 = 
MAEWeight
[j];

3793 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköMîg64RdCo°_P_%d", 
i
);

3794 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3795 i‡(
NULL
 =
pszTempSå
)

3797 
¥ötf
("h265víc:u8SköMîg64RdCo°_P_%dÉº‹\n", 
i
);

3798  
HI_FAILURE
;

3800 
s32Temp
 = 
Weight
(
pszTempSå
);

3801 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3803 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköMîg64RdCo°_P
 = 
MAEWeight
[j];

3806 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeMîg8RdCo°_P_%d", 
i
);

3807 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3808 i‡(
NULL
 =
pszTempSå
)

3810 
¥ötf
("h265víc:u8HedgeMîg8RdCo°_P_%dÉº‹\n", 
i
);

3811  
HI_FAILURE
;

3813 
s32Temp
 = 
Weight
(
pszTempSå
);

3814 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3816 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeMîg8RdCo°_P
 = 
MAEWeight
[j];

3819 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeMîg16RdCo°_P_%d", 
i
);

3820 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3821 i‡(
NULL
 =
pszTempSå
)

3823 
¥ötf
("h265víc:u8HedgeMîg16RdCo°_P_%dÉº‹\n", 
i
);

3824  
HI_FAILURE
;

3826 
s32Temp
 = 
Weight
(
pszTempSå
);

3827 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3829 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeMîg16RdCo°_P
 = 
MAEWeight
[j];

3832 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeMîg32RdCo°_P_%d", 
i
);

3833 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3834 i‡(
NULL
 =
pszTempSå
)

3836 
¥ötf
("h265víc:u8HedgeMîg32RdCo°_P_%dÉº‹\n", 
i
);

3837  
HI_FAILURE
;

3839 
s32Temp
 = 
Weight
(
pszTempSå
);

3840 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3842 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeMîg32RdCo°_P
 = 
MAEWeight
[j];

3845 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeMîg64RdCo°_P_%d", 
i
);

3846 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3847 i‡(
NULL
 =
pszTempSå
)

3849 
¥ötf
("h265víc:u8HedgeMîg64RdCo°_P_%dÉº‹\n", 
i
);

3850  
HI_FAILURE
;

3852 
s32Temp
 = 
Weight
(
pszTempSå
);

3853 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3855 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeMîg64RdCo°_P
 = 
MAEWeight
[j];

3858 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:bSköEn_I_%d", 
i
);

3859 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3860 i‡(
NULL
 =
pszTempSå
)

3862 
¥ötf
("h265víc:bSköEn_I_%dÉº‹\n", 
i
);

3863  
HI_FAILURE
;

3865 
s32Temp
 = 
Weight
(
pszTempSå
);

3866 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3868 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
bSköEn_I
 = (
HI_BOOL
)
MAEWeight
[j];

3871 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32SköQpDñè_I_%d", 
i
);

3872 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3873 i‡(
NULL
 =
pszTempSå
)

3875 
¥ötf
("h265víc:u32SköQpDñè_I_%dÉº‹\n", 
i
);

3876  
HI_FAILURE
;

3878 
s32Temp
 = 
Weight
(
pszTempSå
);

3879 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3881 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32SköQpDñè_I
 = 
MAEWeight
[j];

3884 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköUMax_I_%d", 
i
);

3885 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3886 i‡(
NULL
 =
pszTempSå
)

3888 
¥ötf
("h265víc:u8SköUMax_I_%dÉº‹\n", 
i
);

3889  
HI_FAILURE
;

3891 
s32Temp
 = 
Weight
(
pszTempSå
);

3892 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3894 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköUMax_I
 = 
MAEWeight
[j];

3897 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköUMö_I_%d", 
i
);

3898 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3899 i‡(
NULL
 =
pszTempSå
)

3901 
¥ötf
("h265víc:u8SköUMö_I_%dÉº‹\n", 
i
);

3902  
HI_FAILURE
;

3904 
s32Temp
 = 
Weight
(
pszTempSå
);

3905 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3907 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköUMö_I
 = 
MAEWeight
[j];

3910 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköVMax_I_%d", 
i
);

3911 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3912 i‡(
NULL
 =
pszTempSå
)

3914 
¥ötf
("h265víc:u8SköVMax_I_%dÉº‹\n", 
i
);

3915  
HI_FAILURE
;

3917 
s32Temp
 = 
Weight
(
pszTempSå
);

3918 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3920 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköVMax_I
 = 
MAEWeight
[j];

3923 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköVMö_I_%d", 
i
);

3924 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3925 i‡(
NULL
 =
pszTempSå
)

3927 
¥ötf
("h265víc:u8SköVMö_I_%dÉº‹\n", 
i
);

3928  
HI_FAILURE
;

3930 
s32Temp
 = 
Weight
(
pszTempSå
);

3931 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3933 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköVMö_I
 = 
MAEWeight
[j];

3936 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32SköNum_I_%d", 
i
);

3937 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3938 i‡(
NULL
 =
pszTempSå
)

3940 
¥ötf
("h265víc:u32SköNum_I_%dÉº‹\n", 
i
);

3941  
HI_FAILURE
;

3943 
s32Temp
 = 
Weight
(
pszTempSå
);

3944 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3946 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32SköNum_I
 = 
MAEWeight
[j];

3949 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:bSköEn_P_%d", 
i
);

3950 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3951 i‡(
NULL
 =
pszTempSå
)

3953 
¥ötf
("h265víc:bSköEn_P_%dÉº‹\n", 
i
);

3954  
HI_FAILURE
;

3956 
s32Temp
 = 
Weight
(
pszTempSå
);

3957 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3959 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
bSköEn_P
 = (
HI_BOOL
)
MAEWeight
[j];

3962 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32SköQpDñè_P_%d", 
i
);

3963 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3964 i‡(
NULL
 =
pszTempSå
)

3966 
¥ötf
("h265víc:u32SköQpDñè_P_%dÉº‹\n", 
i
);

3967  
HI_FAILURE
;

3969 
s32Temp
 = 
Weight
(
pszTempSå
);

3970 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3972 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32SköQpDñè_P
 = 
MAEWeight
[j];

3975 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköUMax_P_%d", 
i
);

3976 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3977 i‡(
NULL
 =
pszTempSå
)

3979 
¥ötf
("h265víc:u8SköUMax_P_%dÉº‹\n", 
i
);

3980  
HI_FAILURE
;

3982 
s32Temp
 = 
Weight
(
pszTempSå
);

3983 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3985 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköUMax_P
 = 
MAEWeight
[j];

3988 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköUMö_P_%d", 
i
);

3989 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

3990 i‡(
NULL
 =
pszTempSå
)

3992 
¥ötf
("h265víc:u8SköUMö_P_%dÉº‹\n", 
i
);

3993  
HI_FAILURE
;

3995 
s32Temp
 = 
Weight
(
pszTempSå
);

3996 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

3998 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköUMö_P
 = 
MAEWeight
[j];

4001 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköVMax_P_%d", 
i
);

4002 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4003 i‡(
NULL
 =
pszTempSå
)

4005 
¥ötf
("h265víc:u8SköVMax_P_%dÉº‹\n", 
i
);

4006  
HI_FAILURE
;

4008 
s32Temp
 = 
Weight
(
pszTempSå
);

4009 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4011 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköVMax_P
 = 
MAEWeight
[j];

4014 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8SköVMö_P_%d", 
i
);

4015 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4016 i‡(
NULL
 =
pszTempSå
)

4018 
¥ötf
("h265víc:u8SköVMö_P_%dÉº‹\n", 
i
);

4019  
HI_FAILURE
;

4021 
s32Temp
 = 
Weight
(
pszTempSå
);

4022 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4024 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8SköVMö_P
 = 
MAEWeight
[j];

4027 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32SköNum_P_%d", 
i
);

4028 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4029 i‡(
NULL
 =
pszTempSå
)

4031 
¥ötf
("h265víc:u32SköNum_P_%dÉº‹\n", 
i
);

4032  
HI_FAILURE
;

4034 
s32Temp
 = 
Weight
(
pszTempSå
);

4035 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4037 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32SköNum_P
 = 
MAEWeight
[j];

4040 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeThr_I_%d", 
i
);

4041 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4042 i‡(
NULL
 =
pszTempSå
)

4044 
¥ötf
("h265víc:u8HedgeThr_I_%dÉº‹\n", 
i
);

4045  
HI_FAILURE
;

4047 
s32Temp
 = 
Weight
(
pszTempSå
);

4048 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4050 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeThr_I
 = 
MAEWeight
[j];

4053 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeC¡_I_%d", 
i
);

4054 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4055 i‡(
NULL
 =
pszTempSå
)

4057 
¥ötf
("h265víc:u8HedgeC¡_I_%dÉº‹\n", 
i
);

4058  
HI_FAILURE
;

4060 
s32Temp
 = 
Weight
(
pszTempSå
);

4061 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4063 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeC¡_I
 = 
MAEWeight
[j];

4066 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:bSåoEdgeEn_I_%d", 
i
);

4067 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4068 i‡(
NULL
 =
pszTempSå
)

4070 
¥ötf
("h265víc:bSåoEdgeEn_I_%dÉº‹\n", 
i
);

4071  
HI_FAILURE
;

4073 
s32Temp
 = 
Weight
(
pszTempSå
);

4074 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4076 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
bSåoEdgeEn_I
 = (
HI_BOOL
)
MAEWeight
[j];

4079 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32SåoEdgeQpDñè_I_%d", 
i
);

4080 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4081 i‡(
NULL
 =
pszTempSå
)

4083 
¥ötf
("h265víc:u32SåoEdgeQpDñè_I_%dÉº‹\n", 
i
);

4084  
HI_FAILURE
;

4086 
s32Temp
 = 
Weight
(
pszTempSå
);

4087 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4089 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32SåoEdgeQpDñè_I
 = 
MAEWeight
[j];

4092 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeThr_P_%d", 
i
);

4093 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4094 i‡(
NULL
 =
pszTempSå
)

4096 
¥ötf
("h265víc:u8HedgeThr_P_%dÉº‹\n", 
i
);

4097  
HI_FAILURE
;

4099 
s32Temp
 = 
Weight
(
pszTempSå
);

4100 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4102 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeThr_P
 = 
MAEWeight
[j];

4105 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u8HedgeC¡_P_%d", 
i
);

4106 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4107 i‡(
NULL
 =
pszTempSå
)

4109 
¥ötf
("h265víc:u8HedgeC¡_P_%dÉº‹\n", 
i
);

4110  
HI_FAILURE
;

4112 
s32Temp
 = 
Weight
(
pszTempSå
);

4113 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4115 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u8HedgeC¡_P
 = 
MAEWeight
[j];

4118 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:bSåoEdgeEn_P_%d", 
i
);

4119 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4120 i‡(
NULL
 =
pszTempSå
)

4122 
¥ötf
("h265víc:bSåoEdgeEn_P_%dÉº‹\n", 
i
);

4123  
HI_FAILURE
;

4125 
s32Temp
 = 
Weight
(
pszTempSå
);

4126 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4128 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
bSåoEdgeEn_P
 = (
HI_BOOL
)
MAEWeight
[j];

4131 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32SåoEdgeQpDñè_P_%d", 
i
);

4132 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4133 i‡(
NULL
 =
pszTempSå
)

4135 
¥ötf
("h265víc:u32SåoEdgeQpDñè_P_%dÉº‹\n", 
i
);

4136  
HI_FAILURE
;

4138 
s32Temp
 = 
Weight
(
pszTempSå
);

4139 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4141 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32SåoEdgeQpDñè_P
 = 
MAEWeight
[j];

4144 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:bIm¥oveEn_I_%d", 
i
);

4145 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4146 i‡(
NULL
 =
pszTempSå
)

4148 
¥ötf
("h265víc:bIm¥oveEn_I_%dÉº‹\n", 
i
);

4149  
HI_FAILURE
;

4151 
s32Temp
 = 
Weight
(
pszTempSå
);

4152 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4154 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
bIm¥oveEn_I
 = (
HI_BOOL
)
MAEWeight
[j];

4157 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:bIm¥oveEn_P_%d", 
i
);

4158 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4159 i‡(
NULL
 =
pszTempSå
)

4161 
¥ötf
("h265víc:bIm¥oveEn_P_%dÉº‹\n", 
i
);

4162  
HI_FAILURE
;

4164 
s32Temp
 = 
Weight
(
pszTempSå
);

4165 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4167 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
bIm¥oveEn_P
 = (
HI_BOOL
)
MAEWeight
[j];

4170 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32N‹m32MaxNum_P_%d", 
i
);

4171 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4172 i‡(
NULL
 =
pszTempSå
)

4174 
¥ötf
("h265víc:u32N‹m32MaxNum_P_%dÉº‹\n", 
i
);

4175  
HI_FAILURE
;

4177 
s32Temp
 = 
Weight
(
pszTempSå
);

4178 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4180 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32N‹m32MaxNum_P
 = 
MAEWeight
[j];

4183 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32N‹m16MaxNum_P_%d", 
i
);

4184 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4185 i‡(
NULL
 =
pszTempSå
)

4187 
¥ötf
("h265víc:u32N‹m16MaxNum_P_%dÉº‹\n", 
i
);

4188  
HI_FAILURE
;

4190 
s32Temp
 = 
Weight
(
pszTempSå
);

4191 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4193 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32N‹m16MaxNum_P
 = 
MAEWeight
[j];

4196 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32N‹m32PrŸe˘Num_P_%d", 
i
);

4197 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4198 i‡(
NULL
 =
pszTempSå
)

4200 
¥ötf
("h265víc:u32N‹m32PrŸe˘Num_P_%dÉº‹\n", 
i
);

4201  
HI_FAILURE
;

4203 
s32Temp
 = 
Weight
(
pszTempSå
);

4204 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4206 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32N‹m32PrŸe˘Num_P
 = 
MAEWeight
[j];

4209 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32N‹m16PrŸe˘Num_P_%d", 
i
);

4210 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4211 i‡(
NULL
 =
pszTempSå
)

4213 
¥ötf
("h265víc:u32N‹m16PrŸe˘Num_P_%dÉº‹\n", 
i
);

4214  
HI_FAILURE
;

4216 
s32Temp
 = 
Weight
(
pszTempSå
);

4217 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4219 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32N‹m16PrŸe˘Num_P
 = 
MAEWeight
[j];

4222 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Skö32MaxNum_P_%d", 
i
);

4223 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4224 i‡(
NULL
 =
pszTempSå
)

4226 
¥ötf
("h265víc:u32Skö32MaxNum_P_%dÉº‹\n", 
i
);

4227  
HI_FAILURE
;

4229 
s32Temp
 = 
Weight
(
pszTempSå
);

4230 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4232 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Skö32MaxNum_P
 = 
MAEWeight
[j];

4235 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Skö16MaxNum_P_%d", 
i
);

4236 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4237 i‡(
NULL
 =
pszTempSå
)

4239 
¥ötf
("h265víc:u32Skö16MaxNum_P_%dÉº‹\n", 
i
);

4240  
HI_FAILURE
;

4242 
s32Temp
 = 
Weight
(
pszTempSå
);

4243 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4245 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Skö16MaxNum_P
 = 
MAEWeight
[j];

4248 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Skö32PrŸe˘Num_P_%d", 
i
);

4249 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4250 i‡(
NULL
 =
pszTempSå
)

4252 
¥ötf
("h265víc:u32Skö32PrŸe˘Num_P_%dÉº‹\n", 
i
);

4253  
HI_FAILURE
;

4255 
s32Temp
 = 
Weight
(
pszTempSå
);

4256 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4258 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Skö32PrŸe˘Num_P
 = 
MAEWeight
[j];

4261 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Skö16PrŸe˘Num_P_%d", 
i
);

4262 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4263 i‡(
NULL
 =
pszTempSå
)

4265 
¥ötf
("h265víc:u32Skö16PrŸe˘Num_P_%dÉº‹\n", 
i
);

4266  
HI_FAILURE
;

4268 
s32Temp
 = 
Weight
(
pszTempSå
);

4269 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4271 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Skö16PrŸe˘Num_P
 = 
MAEWeight
[j];

4274 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Stûl32MaxNum_P_%d", 
i
);

4275 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4276 i‡(
NULL
 =
pszTempSå
)

4278 
¥ötf
("h265víc:u32Stûl32MaxNum_P_%dÉº‹\n", 
i
);

4279  
HI_FAILURE
;

4281 
s32Temp
 = 
Weight
(
pszTempSå
);

4282 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4284 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Stûl32MaxNum_P
 = 
MAEWeight
[j];

4287 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Stûl16MaxNum_P_%d", 
i
);

4288 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4289 i‡(
NULL
 =
pszTempSå
)

4291 
¥ötf
("h265víc:u32Stûl16MaxNum_P_%dÉº‹\n", 
i
);

4292  
HI_FAILURE
;

4294 
s32Temp
 = 
Weight
(
pszTempSå
);

4295 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4297 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Stûl16MaxNum_P
 = 
MAEWeight
[j];

4300 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Stûl32PrŸe˘Num_P_%d", 
i
);

4301 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4302 i‡(
NULL
 =
pszTempSå
)

4304 
¥ötf
("h265víc:u32Stûl32PrŸe˘Num_P_%dÉº‹\n", 
i
);

4305  
HI_FAILURE
;

4307 
s32Temp
 = 
Weight
(
pszTempSå
);

4308 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4310 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Stûl32PrŸe˘Num_P
 = 
MAEWeight
[j];

4313 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Stûl16PrŸe˘Num_P_%d", 
i
);

4314 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4315 i‡(
NULL
 =
pszTempSå
)

4317 
¥ötf
("h265víc:u32Stûl16PrŸe˘Num_P_%dÉº‹\n", 
i
);

4318  
HI_FAILURE
;

4320 
s32Temp
 = 
Weight
(
pszTempSå
);

4321 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4323 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Stûl16PrŸe˘Num_P
 = 
MAEWeight
[j];

4326 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Hedge32MaxNum_P_%d", 
i
);

4327 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4328 i‡(
NULL
 =
pszTempSå
)

4330 
¥ötf
("h265víc:u32Hedge32MaxNum_P_%dÉº‹\n", 
i
);

4331  
HI_FAILURE
;

4333 
s32Temp
 = 
Weight
(
pszTempSå
);

4334 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4336 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Hedge32MaxNum_P
 = 
MAEWeight
[j];

4339 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Hedge16MaxNum_P_%d", 
i
);

4340 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4341 i‡(
NULL
 =
pszTempSå
)

4343 
¥ötf
("h265víc:u32Hedge16MaxNum_P_%dÉº‹\n", 
i
);

4344  
HI_FAILURE
;

4346 
s32Temp
 = 
Weight
(
pszTempSå
);

4347 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4349 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Hedge16MaxNum_P
 = 
MAEWeight
[j];

4352 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Hedge32PrŸe˘Num_P_%d", 
i
);

4353 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4354 i‡(
NULL
 =
pszTempSå
)

4356 
¥ötf
("h265víc:u32Hedge32PrŸe˘Num_P_%dÉº‹\n", 
i
);

4357  
HI_FAILURE
;

4359 
s32Temp
 = 
Weight
(
pszTempSå
);

4360 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4362 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Hedge32PrŸe˘Num_P
 = 
MAEWeight
[j];

4365 
¢¥ötf
(
szTempSå
, (szTempSå), "h265víc:u32Hedge16PrŸe˘Num_P_%d", 
i
);

4366 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4367 i‡(
NULL
 =
pszTempSå
)

4369 
¥ötf
("h265víc:u32Hedge16PrŸe˘Num_P_%dÉº‹\n", 
i
);

4370  
HI_FAILURE
;

4372 
s32Temp
 = 
Weight
(
pszTempSå
);

4373 
j
 = 0; j < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; j++)

4375 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
p°H265VícFa˚Cfg
[
i
 * g_°INIP¨a.°IniH265Víc.°IniH265VícFa˚Cfg.
s32ExpCou¡
 + 
j
].
u32Hedge16PrŸe˘Num_P
 = 
MAEWeight
[j];

4381 
s32Temp
 = 0;

4382 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "3dƒ:3DƒIsoCou¡", 
HI_FAILURE
);

4383 i‡(
HI_FAILURE
 =
s32Temp
)

4385 
¥ötf
("3dnr:3DnrIsoCount failed\n");

4386  
HI_FAILURE
;

4388 
g_°INIP¨a
.
°Ini3dƒ
.
s323DƒIsoCou¡
 = 
s32Temp
;

4389 
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
 = (
HI_U32
 *)
mÆloc
((g_°INIP¨a.°Ini3dƒ.
s323DƒIsoCou¡
) * (HI_U32));

4390 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
);

4391 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
 = (
SCENEAUTO_INIPARAM_3DNRCFG_S
 *)
mÆloc
((g_°INIP¨a.°Ini3dƒ.
s323DƒIsoCou¡
) * (SCENEAUTO_INIPARAM_3DNRCFG_S));

4392 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
);

4395 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "3dnr:3DnrIsoThresh");

4396 i‡(
NULL
 =
pszTempSå
)

4398 
¥ötf
("3dnr:3DnrIsoThreshÉrror\n");

4399  
HI_FAILURE
;

4401 
s32Temp
 = 
Weight
(
pszTempSå
);

4402 
i
 = 0; i < 
g_°INIP¨a
.
°Ini3dƒ
.
s323DƒIsoCou¡
; i++)

4404 
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
[
i
] = 
MAEWeight
[i];

4407 
i
 = 0; i < 
g_°INIP¨a
.
°Ini3dƒ
.
s323DƒIsoCou¡
; i++)

4410 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SBS_%d", 
i
);

4411 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4412 i‡(
NULL
 =
pszTempSå
)

4414 
¥ötf
("3dƒ:SBS_%dÉº‹\n", 
i
);

4415  
HI_FAILURE
;

4417 
s32Temp
 = 
Weight
(
pszTempSå
);

4418 
j
 = 0; j < 3; j++)

4420 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8SBS
[
j
] = 
MAEWeight
[j];

4423 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:PSFS_%d", 
i
);

4424 
s32Temp
 = 0;

4425 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

4426 i‡(
HI_FAILURE
 =
s32Temp
)

4428 
¥ötf
("3dƒ:PSFS_%d faûed\n", 
i
);

4429  
HI_FAILURE
;

4431 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u16PSFS
 = 
s32Temp
;

4433 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SBT_%d", 
i
);

4434 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4435 i‡(
NULL
 =
pszTempSå
)

4437 
¥ötf
("3dƒ:SBT_%dÉº‹\n", 
i
);

4438  
HI_FAILURE
;

4440 
s32Temp
 = 
Weight
(
pszTempSå
);

4441 
j
 = 0; j < 3; j++)

4443 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8SBT
[
j
] = 
MAEWeight
[j];

4446 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SDS_%d", 
i
);

4447 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4448 i‡(
NULL
 =
pszTempSå
)

4450 
¥ötf
("3dƒ:SDS_%dÉº‹\n", 
i
);

4451  
HI_FAILURE
;

4453 
s32Temp
 = 
Weight
(
pszTempSå
);

4454 
j
 = 0; j < 3; j++)

4456 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8SDS
[
j
] = 
MAEWeight
[j];

4459 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SDT_%d", 
i
);

4460 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4461 i‡(
NULL
 =
pszTempSå
)

4463 
¥ötf
("3dƒ:SDT_%dÉº‹\n", 
i
);

4464  
HI_FAILURE
;

4466 
s32Temp
 = 
Weight
(
pszTempSå
);

4467 
j
 = 0; j < 3; j++)

4469 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8SDT
[
j
] = 
MAEWeight
[j];

4472 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SBF_%d", 
i
);

4473 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4474 i‡(
NULL
 =
pszTempSå
)

4476 
¥ötf
("3dƒ:SBF_%dÉº‹\n", 
i
);

4477  
HI_FAILURE
;

4479 
s32Temp
 = 
Weight
(
pszTempSå
);

4480 
j
 = 0; j < 3; j++)

4482 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u16SBF
[
j
] = 
MAEWeight
[j];

4485 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SFC_%d", 
i
);

4486 
s32Temp
 = 0;

4487 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

4488 i‡(
HI_FAILURE
 =
s32Temp
)

4490 
¥ötf
("3dƒ:SFC_%d faûed\n", 
i
);

4491  
HI_FAILURE
;

4493 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8SFC
 = 
s32Temp
;

4495 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:SHP_%d", 
i
);

4496 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4497 i‡(
NULL
 =
pszTempSå
)

4499 
¥ötf
("3dƒ:SHP_%dÉº‹\n", 
i
);

4500  
HI_FAILURE
;

4502 
s32Temp
 = 
Weight
(
pszTempSå
);

4503 
j
 = 0; j < 3; j++)

4505 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8SHP
[
j
] = 
MAEWeight
[j];

4508 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:TFC_%d", 
i
);

4509 
s32Temp
 = 0;

4510 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

4511 i‡(
HI_FAILURE
 =
s32Temp
)

4513 
¥ötf
("3dƒ:TFC_%d faûed\n", 
i
);

4514  
HI_FAILURE
;

4516 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u8TFC
 = 
s32Temp
;

4518 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:TFS_%d", 
i
);

4519 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4520 i‡(
NULL
 =
pszTempSå
)

4522 
¥ötf
("3dƒ:TFS_%dÉº‹\n", 
i
);

4523  
HI_FAILURE
;

4525 
s32Temp
 = 
Weight
(
pszTempSå
);

4526 
j
 = 0; j < 3; j++)

4528 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u16TFS
[
j
] = 
MAEWeight
[j];

4531 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:TFR_%d", 
i
);

4532 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4533 i‡(
NULL
 =
pszTempSå
)

4535 
¥ötf
("3dƒ:TFR_%dÉº‹\n", 
i
);

4536  
HI_FAILURE
;

4538 
s32Temp
 = 
Weight
(
pszTempSå
);

4539 
j
 = 0; j < 3; j++)

4541 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u16TFR
[
j
] = 
MAEWeight
[j];

4544 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:MDZ_%d", 
i
);

4545 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4546 i‡(
NULL
 =
pszTempSå
)

4548 
¥ötf
("3dƒ:MDZ_%dÉº‹\n", 
i
);

4549  
HI_FAILURE
;

4551 
s32Temp
 = 
Weight
(
pszTempSå
);

4552 
j
 = 0; j < 3; j++)

4554 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u16MDZ
[
j
] = 
MAEWeight
[j];

4557 
¢¥ötf
(
szTempSå
, (szTempSå), "3dƒ:POST_%d", 
i
);

4558 
s32Temp
 = 0;

4559 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

4560 i‡(
HI_FAILURE
 =
s32Temp
)

4562 
¥ötf
("3dƒ:POST_%d faûed\n", 
i
);

4563  
HI_FAILURE
;

4565 
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
i
].
u16POST
 = 
s32Temp
;

4572 
s32Temp
 = 0;

4573 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "BLC:AESå©egyMode", 
HI_FAILURE
);

4574 i‡(
HI_FAILURE
 =
s32Temp
)

4576 
¥ötf
("BLC:AEStrategyMode failed\n");

4577  
HI_FAILURE
;

4579 
g_°INIP¨a
.
°BLC
.
u8AESå©egyMode
 = 
s32Temp
;

4581 
s32Temp
 = 0;

4582 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "BLC:MaxHi°Off£t", 
HI_FAILURE
);

4583 i‡(
HI_FAILURE
 =
s32Temp
)

4585 
¥ötf
("BLC:MaxHistOffset failed\n");

4586  
HI_FAILURE
;

4588 
g_°INIP¨a
.
°BLC
.
u8MaxHi°Off£t
 = 
s32Temp
;

4590 
s32Temp
 = 0;

4591 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "BLC:Hi°R©ioSl›e", 
HI_FAILURE
);

4592 i‡(
HI_FAILURE
 =
s32Temp
)

4594 
¥ötf
("BLC:HistRatioSlope failed\n");

4595  
HI_FAILURE
;

4597 
g_°INIP¨a
.
°BLC
.
u16Hi°R©ioSl›e
 = 
s32Temp
;

4600 
s32Temp
 = 0;

4601 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DYNAMIC:TŸÆNum_Á°", 
HI_FAILURE
);

4602 i‡(
HI_FAILURE
 =
s32Temp
)

4604 
¥ötf
("DYNAMIC:TotalNum_fast failed\n");

4605  
HI_FAILURE
;

4607 
g_°INIP¨a
.
°Fa°Dy«mic
.
s32TŸÆNum
 = 
s32Temp
;

4608 
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
 = (
SCENEAUTO_ROUTE_NODE_S
*)
mÆloc
((g_°INIP¨a.°Fa°Dy«mic.
s32TŸÆNum
) *  (SCENEAUTO_ROUTE_NODE_S));

4609 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
);

4611 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "DYNAMIC:IntTime_fast");

4612 i‡(
NULL
 =
pszTempSå
)

4614 
¥ötf
("DYNAMIC:IntTime_fastÉrror\n");

4615  
HI_FAILURE
;

4617 
s32Temp
 = 
Weight
(
pszTempSå
);

4618 
i
 = 0; i < 
g_°INIP¨a
.
°Fa°Dy«mic
.
s32TŸÆNum
; i++)

4620 
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
[
i
].
u32I¡Time
 = 
MAEWeight
[i];

4623 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "DYNAMIC:SysGain_fast");

4624 i‡(
NULL
 =
pszTempSå
)

4626 
¥ötf
("DYNAMIC:SysGain_fastÉrror\n");

4627  
HI_FAILURE
;

4629 
s32Temp
 = 
Weight
(
pszTempSå
);

4630 
i
 = 0; i < 
g_°INIP¨a
.
°Fa°Dy«mic
.
s32TŸÆNum
; i++)

4632 
g_°INIP¨a
.
°Fa°Dy«mic
.
p°RouãNode
[
i
].
u32SysGaö
 = 
MAEWeight
[i];

4635 
s32Temp
 = 0;

4636 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DYNAMIC:TŸÆNum_n‹mÆ", 
HI_FAILURE
);

4637 i‡(
HI_FAILURE
 =
s32Temp
)

4639 
¥ötf
("DYNAMIC:TotalNum_normal failed\n");

4640  
HI_FAILURE
;

4642 
g_°INIP¨a
.
°N‹mÆDy«mic
.
s32TŸÆNum
 = 
s32Temp
;

4643 
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
 = (
SCENEAUTO_ROUTE_NODE_S
*)
mÆloc
((g_°INIP¨a.
°Fa°Dy«mic
.
s32TŸÆNum
) *  (SCENEAUTO_ROUTE_NODE_S));

4644 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
);

4646 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "DYNAMIC:IntTime_normal");

4647 i‡(
NULL
 =
pszTempSå
)

4649 
¥ötf
("DYNAMIC:IntTime_normalÉrror\n");

4650  
HI_FAILURE
;

4652 
s32Temp
 = 
Weight
(
pszTempSå
);

4653 
i
 = 0; i < 
g_°INIP¨a
.
°N‹mÆDy«mic
.
s32TŸÆNum
; i++)

4655 
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
[
i
].
u32I¡Time
 = 
MAEWeight
[i];

4658 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "DYNAMIC:SysGain_normal");

4659 i‡(
NULL
 =
pszTempSå
)

4661 
¥ötf
("DYNAMIC:SysGain_normalÉrror\n");

4662  
HI_FAILURE
;

4664 
s32Temp
 = 
Weight
(
pszTempSå
);

4665 
i
 = 0; i < 
g_°INIP¨a
.
°N‹mÆDy«mic
.
s32TŸÆNum
; i++)

4667 
g_°INIP¨a
.
°N‹mÆDy«mic
.
p°RouãNode
[
i
].
u32SysGaö
 = 
MAEWeight
[i];

4671 
s32Temp
 = 0;

4672 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:ExpCom≥nßti⁄", 
HI_FAILURE
);

4673 i‡(
HI_FAILURE
 =
s32Temp
)

4675 
¥ötf
("HLC:ExpCompensation failed\n");

4676  
HI_FAILURE
;

4678 
g_°INIP¨a
.
°HLC
.
u8ExpCom≥nßti⁄
 = 
s32Temp
;

4680 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "HLC:Saturation");

4681 i‡(
NULL
 =
pszTempSå
)

4683 
¥ötf
("HLC:SaturationÉrror\n");

4684  
HI_FAILURE
;

4686 
s32Temp
 = 
Weight
(
pszTempSå
);

4687 
i
 = 0; i < 16; i++)

4689 
g_°INIP¨a
.
°HLC
.
u8S©uøti⁄
[
i
] = 
MAEWeight
[i];

4692 
s32Temp
 = 0;

4693 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:BœckDñayFøme", 
HI_FAILURE
);

4694 i‡(
HI_FAILURE
 =
s32Temp
)

4696 
¥ötf
("HLC:BlackDelayFrame failed\n");

4697  
HI_FAILURE
;

4699 
g_°INIP¨a
.
°HLC
.
u16BœckDñayFøme
 = 
s32Temp
;

4701 
s32Temp
 = 0;

4702 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:WhôeDñayFøme", 
HI_FAILURE
);

4703 i‡(
HI_FAILURE
 =
s32Temp
)

4705 
¥ötf
("HLC:WhiteDelayFrame failed\n");

4706  
HI_FAILURE
;

4708 
g_°INIP¨a
.
°HLC
.
u16WhôeDñayFøme
 = 
s32Temp
;

4711 
s32Temp
 = 0;

4712 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:u8S≥ed", 
HI_FAILURE
);

4713 i‡(
HI_FAILURE
 =
s32Temp
)

4715 
¥ötf
("HLC:u8Speed failed\n");

4716  
HI_FAILURE
;

4718 
g_°INIP¨a
.
°HLC
.
u8S≥ed
 = 
s32Temp
;

4720 
s32Temp
 = 0;

4721 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:Hi°R©ioSl›e", 
HI_FAILURE
);

4722 i‡(
HI_FAILURE
 =
s32Temp
)

4724 
¥ötf
("HLC:HistRatioSlope failed\n");

4725  
HI_FAILURE
;

4727 
g_°INIP¨a
.
°HLC
.
u16Hi°R©ioSl›e
 = 
s32Temp
;

4729 
s32Temp
 = 0;

4730 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:MaxHi°Off£t", 
HI_FAILURE
);

4731 i‡(
HI_FAILURE
 =
s32Temp
)

4733 
¥ötf
("HLC:MaxHistOffset failed\n");

4734  
HI_FAILURE
;

4736 
g_°INIP¨a
.
°HLC
.
u8MaxHi°Off£t
 = 
s32Temp
;

4738 
s32Temp
 = 0;

4739 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:u8Tﬁî™˚", 
HI_FAILURE
);

4740 i‡(
HI_FAILURE
 =
s32Temp
)

4742 
¥ötf
("HLC:u8Tolerance failed\n");

4743  
HI_FAILURE
;

4745 
g_°INIP¨a
.
°HLC
.
u8Tﬁî™˚
 = 
s32Temp
;

4747 
s32Temp
 = 0;

4748 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DCIE«bÀ", 
HI_FAILURE
);

4749 i‡(
HI_FAILURE
 =
s32Temp
)

4751 
¥ötf
("HLC:DCIEnable failed\n");

4752  
HI_FAILURE
;

4754 
g_°INIP¨a
.
°HLC
.
bDCIE«bÀ
 = (
HI_BOOL
)
s32Temp
;

4756 
s32Temp
 = 0;

4757 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DCIBœckGaö", 
HI_FAILURE
);

4758 i‡(
HI_FAILURE
 =
s32Temp
)

4760 
¥ötf
("HLC:DCIBlackGain failed\n");

4761  
HI_FAILURE
;

4763 
g_°INIP¨a
.
°HLC
.
u32DCIBœckGaö
 = 
s32Temp
;

4765 
s32Temp
 = 0;

4766 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DCIC⁄åa°Gaö", 
HI_FAILURE
);

4767 i‡(
HI_FAILURE
 =
s32Temp
)

4769 
¥ötf
("HLC:DCIContrastGain failed\n");

4770  
HI_FAILURE
;

4772 
g_°INIP¨a
.
°HLC
.
u32DCIC⁄åa°Gaö
 = 
s32Temp
;

4774 
s32Temp
 = 0;

4775 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DCILightGaö", 
HI_FAILURE
);

4776 i‡(
HI_FAILURE
 =
s32Temp
)

4778 
¥ötf
("HLC:DCILightGain failed\n");

4779  
HI_FAILURE
;

4781 
g_°INIP¨a
.
°HLC
.
u32DCILightGaö
 = 
s32Temp
;

4783 
s32Temp
 = 0;

4784 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DCILightGaö", 
HI_FAILURE
);

4785 i‡(
HI_FAILURE
 =
s32Temp
)

4787 
¥ötf
("HLC:DCILightGain failed\n");

4788  
HI_FAILURE
;

4790 
g_°INIP¨a
.
°HLC
.
u32DCILightGaö
 = 
s32Temp
;

4792 
s32Temp
 = 0;

4793 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DRCE«bÀ", 
HI_FAILURE
);

4794 i‡(
HI_FAILURE
 =
s32Temp
)

4796 
¥ötf
("HLC:DRCEnable failed\n");

4797  
HI_FAILURE
;

4799 
g_°INIP¨a
.
°HLC
.
bDRCE«bÀ
 = (
HI_BOOL
)
s32Temp
;

4801 
s32Temp
 = 0;

4802 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DRCM™ulE«bÀ", 
HI_FAILURE
);

4803 i‡(
HI_FAILURE
 =
s32Temp
)

4805 
¥ötf
("HLC:DRCManulEnable failed\n");

4806  
HI_FAILURE
;

4808 
g_°INIP¨a
.
°HLC
.
bDRCM™ulE«bÀ
 = (
HI_BOOL
)
s32Temp
;

4810 
s32Temp
 = 0;

4811 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:DRCSåígthT¨gë", 
HI_FAILURE
);

4812 i‡(
HI_FAILURE
 =
s32Temp
)

4814 
¥ötf
("HLC:DRCStrengthTarget failed\n");

4815  
HI_FAILURE
;

4817 
g_°INIP¨a
.
°HLC
.
u32DRCSåígthT¨gë
 = 
s32Temp
;

4819 
s32Off£t
 = 0;

4820 
¢¥ötf
(
szTempSå
, (szTempStr), "HLC:gamma_0");

4821 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4822 i‡(
NULL
 =
pszTempSå
)

4824 
¥ötf
("HLC:gamma_0Érror\n");

4825  
HI_FAILURE
;

4827 
s32Temp
 = 
Weight
(
pszTempSå
);

4828 
i
 = 0; i < 
s32Temp
; i++)

4830 
g_°INIP¨a
.
°HLC
.
u16GammaTabÀ
[
i
] = 
MAEWeight
[i];

4832 
s32Off£t
 +
s32Temp
;

4834 
¢¥ötf
(
szTempSå
, (szTempStr), "HLC:gamma_1");

4835 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4836 i‡(
NULL
 =
pszTempSå
)

4838 
¥ötf
("HLC:gamma_1Érror\n");

4839  
HI_FAILURE
;

4841 
s32Temp
 = 
Weight
(
pszTempSå
);

4842 
i
 = 0; i < 
s32Temp
; i++)

4844 
g_°INIP¨a
.
°HLC
.
u16GammaTabÀ
[
s32Off£t
 + 
i
] = 
MAEWeight
[i];

4846 
s32Off£t
 +
s32Temp
;

4848 
¢¥ötf
(
szTempSå
, (szTempStr), "HLC:gamma_2");

4849 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

4850 i‡(
NULL
 =
pszTempSå
)

4852 
¥ötf
("HLC:gamma_2Érror\n");

4853  
HI_FAILURE
;

4855 
s32Temp
 = 
Weight
(
pszTempSå
);

4856 
i
 = 0; i < 
s32Temp
; i++)

4858 
g_°INIP¨a
.
°HLC
.
u16GammaTabÀ
[
s32Off£t
 + 
i
] = 
MAEWeight
[i];

4862 
s32Temp
 = 0;

4863 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:ExpCou¡", 
HI_FAILURE
);

4864 i‡(
HI_FAILURE
 =
s32Temp
)

4866 
¥ötf
("IR:ExpCount failed\n");

4867  
HI_FAILURE
;

4869 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
 = 
s32Temp
;

4870 
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IR.
s32ExpCou¡
) * (HI_U32));

4871 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
);

4872 
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
 = (
HI_U32
*)
mÆloc
((g_°INIP¨a.°IR.
s32ExpCou¡
) * (HI_U32));

4873 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
);

4874 
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
 = (
HI_U8
*)
mÆloc
((g_°INIP¨a.°IR.
s32ExpCou¡
) * (HI_U8));

4875 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
);

4876 
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
 = (
HI_U8
*)
mÆloc
((g_°INIP¨a.°IR.
s32ExpCou¡
) * (HI_U8));

4877 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
);

4880 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:ExpThreshLtoH");

4881 i‡(
NULL
 =
pszTempSå
)

4883 
¥ötf
("IR:ExpThreshLtoHÉrror\n");

4884  
HI_FAILURE
;

4886 
s32Temp
 = 
Weight
(
pszTempSå
);

4887 
i
 = 0; i < 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
; i++)

4889 
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
[
i
] = 
MAEWeight
[i];

4893 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:ExpThreshHtoL");

4894 i‡(
NULL
 =
pszTempSå
)

4896 
¥ötf
("IR:ExpThreshHtoLÉrror\n");

4897  
HI_FAILURE
;

4899 
s32Temp
 = 
Weight
(
pszTempSå
);

4900 
i
 = 0; i < 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
; i++)

4902 
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
[
i
] = 
MAEWeight
[i];

4906 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:ExpCompensation");

4907 i‡(
NULL
 =
pszTempSå
)

4909 
¥ötf
("IR:ExpCompensationÉrror\n");

4910  
HI_FAILURE
;

4912 
s32Temp
 = 
Weight
(
pszTempSå
);

4913 
i
 = 0; i < 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
; i++)

4915 
g_°INIP¨a
.
°IR
.
pu8ExpCom≥nßti⁄
[
i
] = 
MAEWeight
[i];

4919 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:MaxHistOffset");

4920 i‡(
NULL
 =
pszTempSå
)

4922 
¥ötf
("IR:MaxHistOffsetÉrror\n");

4923  
HI_FAILURE
;

4925 
s32Temp
 = 
Weight
(
pszTempSå
);

4926 
i
 = 0; i < 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
; i++)

4928 
g_°INIP¨a
.
°IR
.
pu8MaxHi°Off£t
[
i
] = 
MAEWeight
[i];

4932 
s32Temp
 = 0;

4933 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:u16Hi°R©ioSl›e", 
HI_FAILURE
);

4934 i‡(
HI_FAILURE
 =
s32Temp
)

4936 
¥ötf
("IR:u16HistRatioSlope failed\n");

4937  
HI_FAILURE
;

4939 
g_°INIP¨a
.
°IR
.
u16Hi°R©ioSl›e
 = 
s32Temp
;

4942 
s32Temp
 = 0;

4943 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:BœckDñayFøme", 
HI_FAILURE
);

4944 i‡(
HI_FAILURE
 =
s32Temp
)

4946 
¥ötf
("IR:BlackDelayFrame failed\n");

4947  
HI_FAILURE
;

4949 
g_°INIP¨a
.
°IR
.
u16BœckDñayFøme
 = 
s32Temp
;

4952 
s32Temp
 = 0;

4953 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:WhôeDñayFøme", 
HI_FAILURE
);

4954 i‡(
HI_FAILURE
 =
s32Temp
)

4956 
¥ötf
("IR:WhiteDelayFrame failed\n");

4957  
HI_FAILURE
;

4959 
g_°INIP¨a
.
°IR
.
u16WhôeDñayFøme
 = 
s32Temp
;

4962 
s32Temp
 = 0;

4963 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:u8Tﬁî™˚", 
HI_FAILURE
);

4964 i‡(
HI_FAILURE
 =
s32Temp
)

4966 
¥ötf
("IR:u8Tolerance failed\n");

4967  
HI_FAILURE
;

4969 
g_°INIP¨a
.
°IR
.
u8Tﬁî™˚
 = 
s32Temp
;

4971 
s32Temp
 = 0;

4972 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:u8S≥ed", 
HI_FAILURE
);

4973 i‡(
HI_FAILURE
 =
s32Temp
)

4975 
¥ötf
("IR:u8Speed failed\n");

4976  
HI_FAILURE
;

4978 
g_°INIP¨a
.
°IR
.
u8S≥ed
 = 
s32Temp
;

4981 
s32Temp
 = 0;

4982 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:DCIE«bÀ", 
HI_FAILURE
);

4983 i‡(
HI_FAILURE
 =
s32Temp
)

4985 
¥ötf
("IR:DCIEnable failed\n");

4986  
HI_FAILURE
;

4988 
g_°INIP¨a
.
°IR
.
bDCIE«bÀ
 = (
HI_BOOL
)
s32Temp
;

4991 
s32Temp
 = 0;

4992 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:DCIBœckGaö", 
HI_FAILURE
);

4993 i‡(
HI_FAILURE
 =
s32Temp
)

4995 
¥ötf
("IR:DCIBlackGain failed\n");

4996  
HI_FAILURE
;

4998 
g_°INIP¨a
.
°IR
.
u32DCIBœckGaö
 = 
s32Temp
;

5001 
s32Temp
 = 0;

5002 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:DCIC⁄åa°Gaö", 
HI_FAILURE
);

5003 i‡(
HI_FAILURE
 =
s32Temp
)

5005 
¥ötf
("IR:DCIContrastGain failed\n");

5006  
HI_FAILURE
;

5008 
g_°INIP¨a
.
°IR
.
u32DCIC⁄åa°Gaö
 = 
s32Temp
;

5011 
s32Temp
 = 0;

5012 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:DCILightGaö", 
HI_FAILURE
);

5013 i‡(
HI_FAILURE
 =
s32Temp
)

5015 
¥ötf
("IR:DCILightGain failed\n");

5016  
HI_FAILURE
;

5018 
g_°INIP¨a
.
°IR
.
u32DCILightGaö
 = 
s32Temp
;

5019 
s32Temp
 = 0;

5020 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:IRu16Sl›e", 
HI_FAILURE
);

5021 i‡(
HI_FAILURE
 =
s32Temp
)

5023 
¥ötf
("IR:IRu16Slope failed\n");

5024  
HI_FAILURE
;

5026 
g_°INIP¨a
.
°IR
.
u16Sl›e
 = 
s32Temp
;

5029 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:au8LumThresh");

5030 i‡(
NULL
 =
pszTempSå
)

5032 
¥ötf
("IR:au8LumThreshÉrror\n");

5033  
HI_FAILURE
;

5035 
s32Temp
 = 
Weight
(
pszTempSå
);

5036 
i
 = 0; i < 16; i++)

5038 
g_°INIP¨a
.
°IR
.
au8LumThªsh
[
i
] = 
MAEWeight
[i];

5042 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:au8SharpenD");

5043 i‡(
NULL
 =
pszTempSå
)

5045 
¥ötf
("IR:au8SharpenDÉrror\n");

5046  
HI_FAILURE
;

5048 
s32Temp
 = 
Weight
(
pszTempSå
);

5049 
i
 = 0; i < 16; i++)

5051 
g_°INIP¨a
.
°IR
.
au8Sh¨≥nD
[
i
] = 
MAEWeight
[i];

5055 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:au8SharpenUd");

5056 i‡(
NULL
 =
pszTempSå
)

5058 
¥ötf
("IR:au8SharpenUdÉrror\n");

5059  
HI_FAILURE
;

5061 
s32Temp
 = 
Weight
(
pszTempSå
);

5062 
i
 = 0; i < 16; i++)

5064 
g_°INIP¨a
.
°IR
.
au8Sh¨≥nUd
[
i
] = 
MAEWeight
[i];

5068 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:au8SharpenRGB");

5069 i‡(
NULL
 =
pszTempSå
)

5071 
¥ötf
("IR:au8SharpenRGBÉrror\n");

5072  
HI_FAILURE
;

5074 
s32Temp
 = 
Weight
(
pszTempSå
);

5075 
i
 = 0; i < 16; i++)

5077 
g_°INIP¨a
.
°IR
.
au8Sh¨≥nRGB
[
i
] = 
MAEWeight
[i];

5081 
s32Off£t
 = 0;

5082 
¢¥ötf
(
szTempSå
, (szTempStr), "IR:gamma_0");

5083 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5084 i‡(
NULL
 =
pszTempSå
)

5086 
¥ötf
("IR:gamma_0Érror\n");

5087  
HI_FAILURE
;

5089 
s32Temp
 = 
Weight
(
pszTempSå
);

5090 
i
 = 0; i < 
s32Temp
; i++)

5092 
g_°INIP¨a
.
°IR
.
u16GammaTabÀ
[
i
] = 
MAEWeight
[i];

5094 
s32Off£t
 +
s32Temp
;

5096 
¢¥ötf
(
szTempSå
, (szTempStr), "IR:gamma_1");

5097 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5098 i‡(
NULL
 =
pszTempSå
)

5100 
¥ötf
("IR:gamma_1Érror\n");

5101  
HI_FAILURE
;

5103 
s32Temp
 = 
Weight
(
pszTempSå
);

5104 
i
 = 0; i < 
s32Temp
; i++)

5106 
g_°INIP¨a
.
°IR
.
u16GammaTabÀ
[
s32Off£t
 + 
i
] = 
MAEWeight
[i];

5108 
s32Off£t
 +
s32Temp
;

5110 
¢¥ötf
(
szTempSå
, (szTempStr), "IR:gamma_2");

5111 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5112 i‡(
NULL
 =
pszTempSå
)

5114 
¥ötf
("IR:gamma_2Érror\n");

5115  
HI_FAILURE
;

5117 
s32Temp
 = 
Weight
(
pszTempSå
);

5118 
i
 = 0; i < 
s32Temp
; i++)

5120 
g_°INIP¨a
.
°IR
.
u16GammaTabÀ
[
s32Off£t
 + 
i
] = 
MAEWeight
[i];

5123 
i
 = 0; i < 
AE_WEIGHT_ROW
; i++)

5125 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:expweight_%d", 
i
);

5126 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5127 i‡(
NULL
 =
pszTempSå
)

5129 
¥ötf
("IR:expweight_%dÉº‹\n", 
i
);

5130  
HI_FAILURE
;

5132 
s32Temp
 = 
Weight
(
pszTempSå
);

5133 
j
 = 0; j < 
AE_WEIGHT_COLUMN
; j++)

5135 
g_°INIP¨a
.
°IR
.
au8Weight
[
i
][
j
] = 
MAEWeight
[j];

5140 
s32Temp
 = 0;

5141 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "IR:3DƒIsoCou¡", 
HI_FAILURE
);

5142 i‡(
HI_FAILURE
 =
s32Temp
)

5144 
¥ötf
("IR:3DnrIsoCount failed\n");

5145  
HI_FAILURE
;

5147 
g_°INIP¨a
.
°IR
.
s323DƒIsoCou¡
 = 
s32Temp
;

5148 
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
 = (
HI_U32
 *)
mÆloc
((g_°INIP¨a.°IR.
s323DƒIsoCou¡
) * (HI_U32));

5149 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
);

5150 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
 = (
SCENEAUTO_INIPARAM_3DNRCFG_S
 *)
mÆloc
((g_°INIP¨a.°IR.
s323DƒIsoCou¡
) * (SCENEAUTO_INIPARAM_3DNRCFG_S));

5151 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
);

5154 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "IR:3DnrIsoThresh");

5155 i‡(
NULL
 =
pszTempSå
)

5157 
¥ötf
("IR:3DnrIsoThreshÉrror\n");

5158  
HI_FAILURE
;

5160 
s32Temp
 = 
Weight
(
pszTempSå
);

5161 
i
 = 0; i < 
g_°INIP¨a
.
°IR
.
s323DƒIsoCou¡
; i++)

5163 
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
[
i
] = 
MAEWeight
[i];

5165 
i
 = 0; i < 
g_°INIP¨a
.
°IR
.
s323DƒIsoCou¡
; i++)

5168 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SBS_%d", 
i
);

5169 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5170 i‡(
NULL
 =
pszTempSå
)

5172 
¥ötf
("IR:SBS_%dÉº‹\n", 
i
);

5173  
HI_FAILURE
;

5175 
s32Temp
 = 
Weight
(
pszTempSå
);

5176 
j
 = 0; j < 3; j++)

5178 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8SBS
[
j
] = 
MAEWeight
[j];

5181 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:PSFS_%d", 
i
);

5182 
s32Temp
 = 0;

5183 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5184 i‡(
HI_FAILURE
 =
s32Temp
)

5186 
¥ötf
("IR:PSFS_%d faûed\n", 
i
);

5187  
HI_FAILURE
;

5189 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u16PSFS
 = 
s32Temp
;

5191 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SBT_%d", 
i
);

5192 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5193 i‡(
NULL
 =
pszTempSå
)

5195 
¥ötf
("IR:SBT_%dÉº‹\n", 
i
);

5196  
HI_FAILURE
;

5198 
s32Temp
 = 
Weight
(
pszTempSå
);

5199 
j
 = 0; j < 3; j++)

5201 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8SBT
[
j
] = 
MAEWeight
[j];

5204 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SDS_%d", 
i
);

5205 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5206 i‡(
NULL
 =
pszTempSå
)

5208 
¥ötf
("IR:SDS_%dÉº‹\n", 
i
);

5209  
HI_FAILURE
;

5211 
s32Temp
 = 
Weight
(
pszTempSå
);

5212 
j
 = 0; j < 3; j++)

5214 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8SDS
[
j
] = 
MAEWeight
[j];

5217 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SDT_%d", 
i
);

5218 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5219 i‡(
NULL
 =
pszTempSå
)

5221 
¥ötf
("IR:SDT_%dÉº‹\n", 
i
);

5222  
HI_FAILURE
;

5224 
s32Temp
 = 
Weight
(
pszTempSå
);

5225 
j
 = 0; j < 3; j++)

5227 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8SDT
[
j
] = 
MAEWeight
[j];

5230 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SBF_%d", 
i
);

5231 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5232 i‡(
NULL
 =
pszTempSå
)

5234 
¥ötf
("IR:SBF_%dÉº‹\n", 
i
);

5235  
HI_FAILURE
;

5237 
s32Temp
 = 
Weight
(
pszTempSå
);

5238 
j
 = 0; j < 3; j++)

5240 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u16SBF
[
j
] = 
MAEWeight
[j];

5243 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SFC_%d", 
i
);

5244 
s32Temp
 = 0;

5245 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5246 i‡(
HI_FAILURE
 =
s32Temp
)

5248 
¥ötf
("IR:SFC_%d faûed\n", 
i
);

5249  
HI_FAILURE
;

5251 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8SFC
 = 
s32Temp
;

5253 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:SHP_%d", 
i
);

5254 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5255 i‡(
NULL
 =
pszTempSå
)

5257 
¥ötf
("IR:SHP_%dÉº‹\n", 
i
);

5258  
HI_FAILURE
;

5260 
s32Temp
 = 
Weight
(
pszTempSå
);

5261 
j
 = 0; j < 3; j++)

5263 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8SHP
[
j
] = 
MAEWeight
[j];

5266 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:TFC_%d", 
i
);

5267 
s32Temp
 = 0;

5268 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5269 i‡(
HI_FAILURE
 =
s32Temp
)

5271 
¥ötf
("IR:TFC_%d faûed\n", 
i
);

5272  
HI_FAILURE
;

5274 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u8TFC
 = 
s32Temp
;

5276 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:TFS_%d", 
i
);

5277 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5278 i‡(
NULL
 =
pszTempSå
)

5280 
¥ötf
("IR:TFS_%dÉº‹\n", 
i
);

5281  
HI_FAILURE
;

5283 
s32Temp
 = 
Weight
(
pszTempSå
);

5284 
j
 = 0; j < 3; j++)

5286 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u16TFS
[
j
] = 
MAEWeight
[j];

5289 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:TFR_%d", 
i
);

5290 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5291 i‡(
NULL
 =
pszTempSå
)

5293 
¥ötf
("IR:TFR_%dÉº‹\n", 
i
);

5294  
HI_FAILURE
;

5296 
s32Temp
 = 
Weight
(
pszTempSå
);

5297 
j
 = 0; j < 3; j++)

5299 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u16TFR
[
j
] = 
MAEWeight
[j];

5302 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:MDZ_%d", 
i
);

5303 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5304 i‡(
NULL
 =
pszTempSå
)

5306 
¥ötf
("IR:MDZ_%dÉº‹\n", 
i
);

5307  
HI_FAILURE
;

5309 
s32Temp
 = 
Weight
(
pszTempSå
);

5310 
j
 = 0; j < 3; j++)

5312 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u16MDZ
[
j
] = 
MAEWeight
[j];

5315 
¢¥ötf
(
szTempSå
, (szTempSå), "IR:POST_%d", 
i
);

5316 
s32Temp
 = 0;

5317 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5318 i‡(
HI_FAILURE
 =
s32Temp
)

5320 
¥ötf
("IR:POST_%d faûed\n", 
i
);

5321  
HI_FAILURE
;

5323 
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
i
].
u16POST
 = 
s32Temp
;

5326 
s32Temp
 = 0;

5327 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "HLC:3DƒIsoCou¡", 
HI_FAILURE
);

5328 i‡(
HI_FAILURE
 =
s32Temp
)

5330 
¥ötf
("HLC:3DnrIsoCount failed\n");

5331  
HI_FAILURE
;

5333 
g_°INIP¨a
.
°HLC
.
s323DƒIsoCou¡
 = 
s32Temp
;

5334 
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
 = (
HI_U32
 *)
mÆloc
((g_°INIP¨a.°HLC.
s323DƒIsoCou¡
) * (HI_U32));

5335 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
);

5336 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
 = (
SCENEAUTO_INIPARAM_3DNRCFG_S
 *)
mÆloc
((g_°INIP¨a.°HLC.
s323DƒIsoCou¡
) * (SCENEAUTO_INIPARAM_3DNRCFG_S));

5337 
CHECK_NULL_PTR
(
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
);

5339 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "HLC:3DnrIsoThresh");

5340 i‡(
NULL
 =
pszTempSå
)

5342 
¥ötf
("HLC:3DnrIsoThreshÉrror\n");

5343  
HI_FAILURE
;

5345 
s32Temp
 = 
Weight
(
pszTempSå
);

5346 
i
 = 0; i < 
g_°INIP¨a
.
°HLC
.
s323DƒIsoCou¡
; i++)

5348 
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
[
i
] = 
MAEWeight
[i];

5350 
i
 = 0; i < 
g_°INIP¨a
.
°HLC
.
s323DƒIsoCou¡
; i++)

5353 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SBS_%d", 
i
);

5354 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5355 i‡(
NULL
 =
pszTempSå
)

5357 
¥ötf
("HLC:SBS_%dÉº‹\n", 
i
);

5358  
HI_FAILURE
;

5360 
s32Temp
 = 
Weight
(
pszTempSå
);

5361 
j
 = 0; j < 3; j++)

5363 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8SBS
[
j
] = 
MAEWeight
[j];

5366 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:PSFS_%d", 
i
);

5367 
s32Temp
 = 0;

5368 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5369 i‡(
HI_FAILURE
 =
s32Temp
)

5371 
¥ötf
("HLC:PSFS_%d faûed\n", 
i
);

5372  
HI_FAILURE
;

5374 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u16PSFS
 = 
s32Temp
;

5376 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SBT_%d", 
i
);

5377 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5378 i‡(
NULL
 =
pszTempSå
)

5380 
¥ötf
("HLC:SBT_%dÉº‹\n", 
i
);

5381  
HI_FAILURE
;

5383 
s32Temp
 = 
Weight
(
pszTempSå
);

5384 
j
 = 0; j < 3; j++)

5386 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8SBT
[
j
] = 
MAEWeight
[j];

5389 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SDS_%d", 
i
);

5390 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5391 i‡(
NULL
 =
pszTempSå
)

5393 
¥ötf
("HLC:SDS_%dÉº‹\n", 
i
);

5394  
HI_FAILURE
;

5396 
s32Temp
 = 
Weight
(
pszTempSå
);

5397 
j
 = 0; j < 3; j++)

5399 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8SDS
[
j
] = 
MAEWeight
[j];

5402 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SDT_%d", 
i
);

5403 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5404 i‡(
NULL
 =
pszTempSå
)

5406 
¥ötf
("HLC:SDT_%dÉº‹\n", 
i
);

5407  
HI_FAILURE
;

5409 
s32Temp
 = 
Weight
(
pszTempSå
);

5410 
j
 = 0; j < 3; j++)

5412 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8SDT
[
j
] = 
MAEWeight
[j];

5415 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SBF_%d", 
i
);

5416 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5417 i‡(
NULL
 =
pszTempSå
)

5419 
¥ötf
("HLC:SBF_%dÉº‹\n", 
i
);

5420  
HI_FAILURE
;

5422 
s32Temp
 = 
Weight
(
pszTempSå
);

5423 
j
 = 0; j < 3; j++)

5425 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u16SBF
[
j
] = 
MAEWeight
[j];

5428 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SFC_%d", 
i
);

5429 
s32Temp
 = 0;

5430 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5431 i‡(
HI_FAILURE
 =
s32Temp
)

5433 
¥ötf
("HLC:SFC_%d faûed\n", 
i
);

5434  
HI_FAILURE
;

5436 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8SFC
 = 
s32Temp
;

5438 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:SHP_%d", 
i
);

5439 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5440 i‡(
NULL
 =
pszTempSå
)

5442 
¥ötf
("HLC:SHP_%dÉº‹\n", 
i
);

5443  
HI_FAILURE
;

5445 
s32Temp
 = 
Weight
(
pszTempSå
);

5446 
j
 = 0; j < 3; j++)

5448 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8SHP
[
j
] = 
MAEWeight
[j];

5451 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:TFC_%d", 
i
);

5452 
s32Temp
 = 0;

5453 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5454 i‡(
HI_FAILURE
 =
s32Temp
)

5456 
¥ötf
("HLC:TFC_%d faûed\n", 
i
);

5457  
HI_FAILURE
;

5459 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u8TFC
 = 
s32Temp
;

5461 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:TFS_%d", 
i
);

5462 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5463 i‡(
NULL
 =
pszTempSå
)

5465 
¥ötf
("HLC:TFS_%dÉº‹\n", 
i
);

5466  
HI_FAILURE
;

5468 
s32Temp
 = 
Weight
(
pszTempSå
);

5469 
j
 = 0; j < 3; j++)

5471 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u16TFS
[
j
] = 
MAEWeight
[j];

5474 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:TFR_%d", 
i
);

5475 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5476 i‡(
NULL
 =
pszTempSå
)

5478 
¥ötf
("HLC:TFR_%dÉº‹\n", 
i
);

5479  
HI_FAILURE
;

5481 
s32Temp
 = 
Weight
(
pszTempSå
);

5482 
j
 = 0; j < 3; j++)

5484 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u16TFR
[
j
] = 
MAEWeight
[j];

5487 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:MDZ_%d", 
i
);

5488 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
);

5489 i‡(
NULL
 =
pszTempSå
)

5491 
¥ötf
("HLC:MDZ_%dÉº‹\n", 
i
);

5492  
HI_FAILURE
;

5494 
s32Temp
 = 
Weight
(
pszTempSå
);

5495 
j
 = 0; j < 3; j++)

5497 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u16MDZ
[
j
] = 
MAEWeight
[j];

5500 
¢¥ötf
(
szTempSå
, (szTempSå), "HLC:POST_%d", 
i
);

5501 
s32Temp
 = 0;

5502 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, 
szTempSå
, 
HI_FAILURE
);

5503 i‡(
HI_FAILURE
 =
s32Temp
)

5505 
¥ötf
("HLC:POST_%d faûed\n", 
i
);

5506  
HI_FAILURE
;

5508 
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
i
].
u16POST
 = 
s32Temp
;

5511 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "HLC:au8SharpenUd");

5512 if(
NULL
 =
pszTempSå
)

5514 
¥ötf
("HLC:au8SharpenUdÉrror\n");

5515  
HI_FAILURE
;

5517 
s32Temp
 = 
Weight
(
pszTempSå
);

5518 
i
 = 0; i < 16; i++)

5520 
g_°INIP¨a
.
°HLC
.
au8Sh¨≥nUd
[
i
] = 
MAEWeight
[i];

5523 
pszTempSå
 = 
öù¨£r_gë°r
(
g_S˚√autodi˘i⁄¨y
, "HLC:au8SharpenRGB");

5524 if(
NULL
 =
pszTempSå
)

5526 
¥ötf
("HLC:au8SharpenRGBÉrror\n");

5527  
HI_FAILURE
;

5529 
s32Temp
 = 
Weight
(
pszTempSå
);

5530 
i
 = 0; i < 16; i++)

5532 
g_°INIP¨a
.
°HLC
.
au8Sh¨≥nRGB
[
i
] = 
MAEWeight
[i];

5534 
s32Temp
 = 0;

5535 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCE«bÀ", 
HI_FAILURE
);

5536 i‡(
HI_FAILURE
 =
s32Temp
)

5538 
¥ötf
("DRC:DRCEnable failed\n");

5539  
HI_FAILURE
;

5541 
g_°INIP¨a
.
°DRC
.
bDRCE«bÀ
 = (
HI_BOOL
)
s32Temp
;

5542 
s32Temp
 = 0;

5543 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCM™ulE«bÀ", 
HI_FAILURE
);

5544 i‡(
HI_FAILURE
 =
s32Temp
)

5546 
¥ötf
("DRC:DRCManulEnable failed\n");

5547  
HI_FAILURE
;

5549 
g_°INIP¨a
.
°DRC
.
bDRCM™ulE«bÀ
 = (
HI_BOOL
)
s32Temp
;

5550 
s32Temp
 = 0;

5551 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCSåígthT¨gë", 
HI_FAILURE
);

5552 i‡(
HI_FAILURE
 =
s32Temp
)

5554 
¥ötf
("DRC:DRCStrengthTarget failed\n");

5555  
HI_FAILURE
;

5557 
g_°INIP¨a
.
°DRC
.
u32Såígth
 = (
HI_BOOL
)
s32Temp
;

5558 
s32Temp
 = 0;

5559 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32Sl›eMax", 
HI_FAILURE
);

5560 i‡(
HI_FAILURE
 =
s32Temp
)

5562 
¥ötf
("DRC:DRCu32SlopeMax failed\n");

5563  
HI_FAILURE
;

5565 
g_°INIP¨a
.
°DRC
.
u32Sl›eMax
 = (
HI_BOOL
)
s32Temp
;

5566 
s32Temp
 = 0;

5567 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32Sl›eMö", 
HI_FAILURE
);

5568 i‡(
HI_FAILURE
 =
s32Temp
)

5570 
¥ötf
("DRC:DRCu32SlopeMin failed\n");

5571  
HI_FAILURE
;

5573 
g_°INIP¨a
.
°DRC
.
u32Sl›eMö
 = (
HI_BOOL
)
s32Temp
;

5574 
s32Temp
 = 0;

5575 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32V¨ün˚S∑˚", 
HI_FAILURE
);

5576 i‡(
HI_FAILURE
 =
s32Temp
)

5578 
¥ötf
("DRC:DRCu32VarianceSpace failed\n");

5579  
HI_FAILURE
;

5581 
g_°INIP¨a
.
°DRC
.
u32V¨ün˚S∑˚
 = (
HI_BOOL
)
s32Temp
;

5582 
s32Temp
 = 0;

5583 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32V¨ün˚I¡ísôy", 
HI_FAILURE
);

5584 i‡(
HI_FAILURE
 =
s32Temp
)

5586 
¥ötf
("DRC:DRCu32VarianceIntensity failed\n");

5587  
HI_FAILURE
;

5589 
g_°INIP¨a
.
°DRC
.
u32V¨ün˚I¡ísôy
 = (
HI_BOOL
)
s32Temp
;

5590 
s32Temp
 = 0;

5591 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32WhôeLevñ", 
HI_FAILURE
);

5592 i‡(
HI_FAILURE
 =
s32Temp
)

5594 
¥ötf
("DRC:DRCu32WhiteLevel failed\n");

5595  
HI_FAILURE
;

5597 
g_°INIP¨a
.
°DRC
.
u32WhôeLevñ
 = (
HI_BOOL
)
s32Temp
;

5598 
s32Temp
 = 0;

5599 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32BœckLevñ", 
HI_FAILURE
);

5600 i‡(
HI_FAILURE
 =
s32Temp
)

5602 
¥ötf
("DRC:DRCu32BlackLevel failed\n");

5603  
HI_FAILURE
;

5605 
g_°INIP¨a
.
°DRC
.
u32BœckLevñ
 = (
HI_BOOL
)
s32Temp
;

5606 
s32Temp
 = 0;

5607 
s32Temp
 = 
öù¨£r_gëöt
(
g_S˚√autodi˘i⁄¨y
, "DRC:DRCu32BœckLevñ", 
HI_FAILURE
);

5608 i‡(
HI_FAILURE
 =
s32Temp
)

5610 
¥ötf
("DRC:DRCu32BlackLevel failed\n");

5611  
HI_FAILURE
;

5613 
g_°INIP¨a
.
°DRC
.
u32BœckLevñ
 = (
HI_BOOL
)
s32Temp
;

5615  
HI_SUCCESS
;

5618 
HI_VOID
 
S˚√auto_FªeDi˘
()

5620 i‡(
NULL
 !
g_S˚√autodi˘i⁄¨y
)

5622 
öù¨£r_‰ìdi˘
(
g_S˚√autodi˘i⁄¨y
);

5624 
g_S˚√autodi˘i⁄¨y
 = 
NULL
;

5627 
HI_S32
 
S˚√auto_LﬂdFûe
(c⁄° 
HI_CHAR
* 
pszFILENAME
)

5629 i‡(
NULL
 !
g_S˚√autodi˘i⁄¨y
)

5631 
g_S˚√autodi˘i⁄¨y
 = 
NULL
;

5635 
g_S˚√autodi˘i⁄¨y
 = 
öù¨£r_lﬂd
(
pszFILENAME
);

5636 i‡(
NULL
 =
g_S˚√autodi˘i⁄¨y
)

5638 
¥ötf
("%†öòlﬂd faûed\n", 
pszFILENAME
);

5639  
HI_FAILURE
;

5642  
HI_SUCCESS
;

5645 * 
S˚√Auto_N‹mÆThªad
(* 
pVoid
)

5647 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

5648 
HI_S32
 
i
;

5649 
HI_S32
 
s32AECurPos
 = 0;

5650 
HI_S32
 
s32IRAECurPos
 = 0;

5651 
HI_U32
 
u32NRProfûeVauÀ
;

5652 
HI_U32
 
u32NRProfûeAddr
;

5653 
HI_U32
 
u32Exposuª
 = 0;

5654 
HI_U32
 
u32Iso
 = 0;

5655 
HI_U32
 
u32La°Exposuª
 = (
MAX_LEVEL
 + 1);

5656 
HI_S32
 
s32GammaExpLevñ
 = 0;

5657 
HI_S32
 
s32La°GammaExpLevñ
 = 0;

5658 
HI_U32
 
u32GammaExposuª
 = 0;

5659 
HI_U32
 
u32La°GammaExposuª
 = 0;

5660 
HI_U32
 
u32GammaCou¡
 = 0;

5661 
HI_S32
 
s32DpExpLevñ
 = 0;

5662 
HI_S32
 
s32La°DpExpLevñ
 = (
MAX_LEVEL
 + 1);

5663 
HI_S32
 
s32DemoßicExpLevñ
 = 0;

5664 
HI_S32
 
s32La°DemoßicExpLevñ
 = (
MAX_LEVEL
 + 1);

5665 
HI_U32
 
u32Bôøã
 = 0;

5666 
HI_U32
 
u32La°Bôøã
 = (
MAX_LEVEL
 + 1);

5667 
HI_S32
 
s32VícBôøãLevñ
 = 0;

5668 
HI_S32
 
s32La°VícBôøãLevñ
 = (
MAX_LEVEL
 + 1);

5669 
HI_S32
 
s32Sh¨≥nBôøãLevñ
 = 0;

5670 
HI_S32
 
s32La°Sh¨≥nBôøãLevñ
 = (
MAX_LEVEL
 + 1);

5671 
HI_S32
 
s32AEBôøãLevñ
 = 0;

5672 
HI_S32
 
s32La°AEBôøãLevñ
 = (
MAX_LEVEL
 + 1);

5673 
HI_S32
 
s32DemoßicBôøãLevñ
 = 0;

5674 
HI_S32
 
s32La°DemoßicBôøãLevñ
 = (
MAX_LEVEL
 + 1);

5675 
HI_S32
 
s32H265Fa˚CfgBôøãLevñ
 = 0;

5676 
HI_S32
 
s32La°H265Fa˚CfgBôøãLevñ
 = (
MAX_LEVEL
 + 1);

5677 
HI_S32
 
s32H265Fa˚CfgExpLevñ
 = 0;

5678 
HI_S32
 
s32La°H265Fa˚CfgExpLevñ
 = (
MAX_LEVEL
 + 1);

5679 
HI_S32
 
s32I•Dev
 = 0;

5680 
HI_S32
 
s32VícChn
 = 0;

5681 
HI_S32
 
s32VpssGΩ
 = 0;

5682 
HI_S32
 
s32ViDev
 = 0;

5683 
HI_U64
 
u64Temp
 = 0;

5684 
HI_U8
 
u8DciSåígth
 = 0;

5685 
HI_BOOL
 
bDefogSèã
 = 
HI_FALSE
;

5686 
HI_BOOL
 
bDciE«bÀ
;

5687 
HI_U32
 
u32BœckGaö
;

5688 
HI_U32
 
u32C⁄åa°Gaö
;

5689 
HI_U32
 
u32LightGaö
;

5690 
ADPT_SCENEAUTO_EXPOSUREINFO_S
 
°Ad±ExposuªInfo
;

5691 
ADPT_SCENEAUTO_DRCATTR_S
 
°Ad±DrcAâr
;

5692 
ADPT_SCENEAUTO_WDRATTR_S
 
°Ad±WdrAâr
;

5693 
ADPT_SCENEAUTO_STATEINFO_S
 
°Ad±SètInfo
;

5694 
ADPT_SCENEAUTO_DEFOG_ATTR_S
 
°Ad±DefogAâr
;

5695 
ADPT_SCENEAUTO_DCIPARAM_S
 
°Ad±DciP¨am
;

5696 
ADPT_SCENEAUTO_VENC_ATTR_S
 
°Ad±VícAâr
;

5697 
HI_S32
 
s32IsoLevñ
;

5698 
SCENEAUTO_INIPARAM_3DNRCFG_S
 
°S˚√auto3dƒ
;

5700 
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
 
eS≥cülS˚√
;

5701 
eS≥cülS˚√
 = 
g_eS≥cülS˚√
;

5703 
¥˘l
(
PR_SET_NAME
, ()"SceneautoNormalThread", 0, 0, 0);

5704 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

5705 
s32VícChn
 = 
g_°INIP¨a
.
°MpInfo
.s32VencChn;

5706 
s32VpssGΩ
 = 
g_°INIP¨a
.
°MpInfo
.s32VpssGrp;

5707 
s32ViDev
 = 
g_°INIP¨a
.
°MpInfo
.s32ViDev;

5708 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DciP¨am
);

5709 i‡(
HI_SUCCESS
 !
s32Rë
)

5711 
¥ötf
("CommSceneautoGetDCIParam failed\n");

5713 
bDciE«bÀ
 = 
°Ad±DciP¨am
.
bE«bÀ
;

5714 
u32BœckGaö
 = 
°Ad±DciP¨am
.u32BlackGain;

5715 
u32C⁄åa°Gaö
 = 
°Ad±DciP¨am
.u32ContrastGain;

5716 
u32LightGaö
 = 
°Ad±DciP¨am
.u32LightGain;

5720 
HI_TRUE
 =
g_bN‹mÆThªadFœg
)

5723 
s32Rë
 = 
CommS˚√autoGëExposuªInfo
(
s32I•Dev
, &
°Ad±ExposuªInfo
);

5724 i‡(
HI_SUCCESS
 !
s32Rë
)

5726 
¥ötf
("CommSceneautoGetExposureInfo failed\n");

5728 
u64Temp
 = ((
HI_U64
)
°Ad±ExposuªInfo
.
u32AGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32DGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32ISPDGaö
) >> 30;

5729 
u32Exposuª
 = (
HI_U32
)
u64Temp
 * 
°Ad±ExposuªInfo
.
u32ExpTime
;

5732 
s32Rë
 = 
CommS˚√autoGëDRCAâr
(
s32I•Dev
, &
°Ad±DrcAâr
);

5733 i‡(
HI_SUCCESS
)

5735 
¥ötf
("CommSceneautoGetDRCAttr failed\n");

5737 
s32Rë
 = 
CommS˚√autoGëWDRAâr
(
s32I•Dev
, &
°Ad±WdrAâr
);

5738 i‡(
HI_SUCCESS
)

5740 
¥ötf
("CommSceneautoGetWDRAttr failed\n");

5744 i‡(
°Ad±WdrAâr
.
u8WdrMode
 != 0)

5746 
s32Rë
 = 
CommS˚√autoGëQuîyI¬îSèãInfo
(
s32I•Dev
, &
°Ad±SètInfo
);

5747 i‡(
HI_SUCCESS
)

5749 
¥ötf
("CommSceneautoGetQueryInnerStateInfo failed\n");

5752 i‡(
°Ad±SètInfo
.
u32DRCSåígthA˘uÆ
 < 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
)

5754 
°Ad±SètInfo
.
u32DRCSåígthA˘uÆ
 = 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
;

5757 
u64Temp
 = ((
HI_U64
)
°Ad±ExposuªInfo
.
u32AGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32DGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32ISPDGaö
 * 100) >> 30;

5758 
u64Temp
 = (u64Tem∞* 
°Ad±SètInfo
.
u32DRCSåígthA˘uÆ
Ë/ 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
;

5759 
u32Exposuª
 = (
HI_U32
)
u64Temp
;

5762 
u32Iso
 = 
u32Exposuª
;

5766 i‡(
°Ad±DrcAâr
.
bE«bÀ
 =
HI_TRUE
)

5768 
s32Rë
 = 
CommS˚√autoGëQuîyI¬îSèãInfo
(
s32I•Dev
, &
°Ad±SètInfo
);

5769 i‡(
HI_SUCCESS
)

5771 
¥ötf
("CommSceneautoGetQueryInnerStateInfo failed\n");

5774 i‡(
°Ad±SètInfo
.
u32DRCSåígthA˘uÆ
 < 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
)

5776 
°Ad±SètInfo
.
u32DRCSåígthA˘uÆ
 = 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
;

5779 
u32Exposuª
 = (u32Exposuª * 
°Ad±SètInfo
.
u32DRCSåígthA˘uÆ
Ë/ 
g_°INIP¨a
.
°ThªshVÆue
.
u32DRCSåígthThªsh
;

5782 
u32Iso
 = 100 * (
u32Exposuª
 / 
°Ad±ExposuªInfo
.
u32ExpTime
);

5787 
u32GammaExposuª
 = 
u32Exposuª
;

5788 i‡(
u32GammaExposuª
 !
u32La°GammaExposuª
)

5791 i‡(
u32GammaExposuª
 > 
u32La°GammaExposuª
)

5793 
s32GammaExpLevñ
 = 0; s32GammaExpLevñ < 
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
; s32GammaExpLevel++)

5795 i‡(
u32GammaExposuª
 <
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshLtoD
[
s32GammaExpLevñ
])

5800 i‡(
s32GammaExpLevñ
 >
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
)

5802 
s32GammaExpLevñ
 = 
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
 - 1;

5805 i‡(
u32GammaExposuª
 < 
u32La°GammaExposuª
)

5807 
s32GammaExpLevñ
 = (
g_°INIP¨a
.
°IniGamma
.
s32ExpCou¡
 - 1); s32GammaExpLevel >= 0; s32GammaExpLevel--)

5809 i‡(
u32GammaExposuª
 > 
g_°INIP¨a
.
°IniGamma
.
pu32ExpThªshDtoL
[
s32GammaExpLevñ
])

5814 i‡(
s32GammaExpLevñ
 <= 0)

5816 
s32GammaExpLevñ
 = 0;

5819 i‡(
s32GammaExpLevñ
 !
s32La°GammaExpLevñ
)

5821 
u32GammaCou¡
++;

5822 i‡(
u32GammaCou¡
 > 
g_°INIP¨a
.
°IniGamma
.
u32DñayCou¡
)

5824 
s32Rë
 = 
S˚√Auto_SëGamma
(
s32I•Dev
, 
s32GammaExpLevñ
, 
s32La°GammaExpLevñ
);

5825 i‡(
HI_SUCCESS
 !
s32Rë
)

5827 
¥ötf
("SceneAuto_SetGamma failed\n");

5829 
u32GammaCou¡
 = 0;

5830 
s32La°GammaExpLevñ
 = 
s32GammaExpLevñ
;

5831 
u32La°GammaExposuª
 = 
u32GammaExposuª
;

5836 
u32GammaCou¡
 = 0;

5839 i‡((
u32Exposuª
 !
u32La°Exposuª
) ||

5840 (
eS≥cülS˚√
 !
g_eS≥cülS˚√
))

5843 i‡(
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
 =
g_eS≥cülS˚√
)

5845 
s32IsoLevñ
 = 0; s32IsoLevñ < 
g_°INIP¨a
.
°HLC
.
s323DƒIsoCou¡
; s32IsoLevel++)

5847 i‡(
u32Iso
 <
g_°INIP¨a
.
°HLC
.
pu323DƒIsoThªsh
[
s32IsoLevñ
])

5852 i‡(
s32IsoLevñ
 =
g_°INIP¨a
.
°HLC
.
s323DƒIsoCou¡
)

5854 
s32IsoLevñ
 = 
g_°INIP¨a
.
°HLC
.
s323DƒIsoCou¡
 - 1;

5857 
I¡îpﬁ©e
(&
°S˚√auto3dƒ
, 
u32Iso
,

5858 &
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
s32IsoLevñ
 - 1], g_°INIP¨a.°HLC.
pu323DƒIsoThªsh
[s32IsoLevel - 1],

5859 &
g_°INIP¨a
.
°HLC
.
p°3dƒP¨am
[
s32IsoLevñ
], g_°INIP¨a.°HLC.
pu323DƒIsoThªsh
[s32IsoLevel]);

5862 i‡(
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 =
g_eS≥cülS˚√
)

5864 
s32IsoLevñ
 = 0; s32IsoLevñ < 
g_°INIP¨a
.
°IR
.
s323DƒIsoCou¡
; s32IsoLevel++)

5866 i‡(
u32Iso
 <
g_°INIP¨a
.
°IR
.
pu323DƒIsoThªsh
[
s32IsoLevñ
])

5871 i‡(
s32IsoLevñ
 =
g_°INIP¨a
.
°IR
.
s323DƒIsoCou¡
)

5873 
s32IsoLevñ
 = 
g_°INIP¨a
.
°IR
.
s323DƒIsoCou¡
 - 1;

5876 
I¡îpﬁ©e
(&
°S˚√auto3dƒ
, 
u32Iso
,

5877 &
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
s32IsoLevñ
 - 1], g_°INIP¨a.°IR.
pu323DƒIsoThªsh
[s32IsoLevel - 1],

5878 &
g_°INIP¨a
.
°IR
.
p°3dƒP¨am
[
s32IsoLevñ
], g_°INIP¨a.°IR.
pu323DƒIsoThªsh
[s32IsoLevel]);

5884 
s32IsoLevñ
 = 0; s32IsoLevñ < 
g_°INIP¨a
.
°Ini3dƒ
.
s323DƒIsoCou¡
; s32IsoLevel++)

5886 i‡(
u32Iso
 <
g_°INIP¨a
.
°Ini3dƒ
.
pu323DƒIsoThªsh
[
s32IsoLevñ
])

5891 i‡(
s32IsoLevñ
 =
g_°INIP¨a
.
°Ini3dƒ
.
s323DƒIsoCou¡
)

5893 
s32IsoLevñ
 = 
g_°INIP¨a
.
°Ini3dƒ
.
s323DƒIsoCou¡
 - 1;

5896 
I¡îpﬁ©e
(&
°S˚√auto3dƒ
, 
u32Iso
,

5897 &
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
s32IsoLevñ
 - 1], g_°INIP¨a.°Ini3dƒ.
pu323DƒIsoThªsh
[s32IsoLevel - 1],

5898 &
g_°INIP¨a
.
°Ini3dƒ
.
p°3dƒP¨am
[
s32IsoLevñ
], g_°INIP¨a.°Ini3dƒ.
pu323DƒIsoThªsh
[s32IsoLevel]);

5902 
s32Rë
 = 
S˚√auto_Së3DNR
(
s32VpssGΩ
, 
°S˚√auto3dƒ
);

5903 i‡(
HI_SUCCESS
 !
s32Rë
)

5905 
¥ötf
("Sceneauto_SetNormal3DNR failed\n");

5910 i‡(
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
 =
g_eS≥cülS˚√
)

5912 i‡(
u32Exposuª
 > 
u32La°Exposuª
)

5914 
i
 = 
s32IRAECurPos
; i < 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
; i++)

5916 i‡(
u32Exposuª
 > 
g_°INIP¨a
.
°IR
.
pu32ExpThªshLtoH
[
i
])

5918 
s32IRAECurPos
 = 
i
 + 1;

5925 i‡(
s32IRAECurPos
 >
g_°INIP¨a
.
°IR
.
s32ExpCou¡
)

5927 
s32IRAECurPos
 = 
g_°INIP¨a
.
°IR
.
s32ExpCou¡
 - 1;

5930 i‡(
u32Exposuª
 < 
u32La°Exposuª
)

5932 
i
 = 
s32IRAECurPos
; i >= 0; i--)

5934 i‡(
u32Exposuª
 < 
g_°INIP¨a
.
°IR
.
pu32ExpThªshHtoL
[
i
])

5936 
s32IRAECurPos
 = 
i
;

5944 
s32Rë
 = 
S˚«uto_SëIRAERó…edExp
(
s32I•Dev
, 
s32IRAECurPos
);

5945 i‡(
HI_SUCCESS
 !
s32Rë
)

5947 
¥ötf
("Scenauto_SetAERealtedExp failed\n");

5952 i‡(
u32Exposuª
 > 
u32La°Exposuª
)

5954 
i
 = 
s32AECurPos
; i < 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
; i++)

5956 i‡(
u32Exposuª
 > 
g_°INIP¨a
.
°IniAE
.
pu32AEExpLtoDThªsh
[
i
])

5958 
s32AECurPos
 = 
i
 + 1;

5966 i‡(
s32AECurPos
 >
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
)

5968 
s32AECurPos
 = 
g_°INIP¨a
.
°IniAE
.
s32ExpCou¡
 - 1;

5971 i‡(
u32Exposuª
 < 
u32La°Exposuª
)

5973 
i
 = 
s32AECurPos
; i >= 0; i--)

5975 i‡(
u32Exposuª
 < 
g_°INIP¨a
.
°IniAE
.
pu32AEExpDtoLThªsh
[
i
])

5977 
s32AECurPos
 = 
i
;

5985 
s32Rë
 = 
S˚«uto_SëAERó…edExp
(
s32I•Dev
, 
s32AECurPos
);

5986 i‡(
HI_SUCCESS
 !
s32Rë
)

5988 
¥ötf
("Scenauto_SetAERealtedExp failed\n");

5994 
s32DpExpLevñ
 = 0; s32DpExpLevñ < 
g_°INIP¨a
.
°IniDP
.
s32ExpCou¡
; s32DpExpLevel++)

5996 i‡(
u32Exposuª
 <
g_°INIP¨a
.
°IniDP
.
pu32ExpThªsh
[
s32DpExpLevñ
])

6001 i‡(
s32DpExpLevñ
 =
g_°INIP¨a
.
°IniDP
.
s32ExpCou¡
)

6003 
s32DpExpLevñ
 = 
g_°INIP¨a
.
°IniDP
.
s32ExpCou¡
 - 1;

6006 i‡(
s32DpExpLevñ
 !
s32La°DpExpLevñ
)

6008 
s32La°DpExpLevñ
 = 
s32DpExpLevñ
;

6009 
s32Rë
 = 
S˚√Auto_SëDP
(
s32I•Dev
, 
s32DpExpLevñ
);

6010 i‡(
HI_SUCCESS
 !
s32Rë
)

6012 
¥ötf
("SceneAuto_SetDP failed\n");

6017 i‡((
u32Exposuª
 >
g_°INIP¨a
.
°IniNRProfûe
.
u32ExpLow
Ë&& (u32Exposuª <g_°INIP¨a.°IniNRProfûe.
u32ExpHigh
))

6019 
i
 = 0; i < 128; i = i + 4)

6021 
u32NRProfûeVauÀ
 = ((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np1
[
i
])

6022 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np1
[
i
 + 1]) << 8)

6023 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np1
[
i
 + 2]) << 16)

6024 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np1
[
i
 + 3]) << 24);

6026 
u32NRProfûeAddr
 = 0x205A0900 + 
i
;

6028 
s32Rë
 = 
CommS˚√autoSëRegi°î
(
s32I•Dev
, 
u32NRProfûeAddr
, 
u32NRProfûeVauÀ
);

6029 i‡(
HI_SUCCESS
 !
s32Rë
)

6031 
¥ötf
("CommSceneautoSetRegister failed\n");

6034 
u32NRProfûeVauÀ
 = ((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np2
[
i
])

6035 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np2
[
i
 + 1]) << 8)

6036 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np2
[
i
 + 2]) << 16)

6037 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8Np2
[
i
 + 3]) << 24);

6039 
u32NRProfûeAddr
 = 0x205A0C00 + 
i
;

6041 
s32Rë
 = 
CommS˚√autoSëRegi°î
(
s32I•Dev
, 
u32NRProfûeAddr
, 
u32NRProfûeVauÀ
);

6042 i‡(
HI_SUCCESS
 !
s32Rë
)

6044 
¥ötf
("CommSceneautoSetRegister failed\n");

6051 
i
 = 0; i < 128; i = i + 4)

6053 
u32NRProfûeVauÀ
 = ((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…1
[
i
])

6054 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…1
[
i
 + 1]) << 8)

6055 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…1
[
i
 + 2]) << 16)

6056 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…1
[
i
 + 3]) << 24);

6058 
u32NRProfûeAddr
 = 0x205A0900 + 
i
;

6060 
s32Rë
 = 
CommS˚√autoSëRegi°î
(
s32I•Dev
, 
u32NRProfûeAddr
, 
u32NRProfûeVauÀ
);

6061 i‡(
HI_SUCCESS
 !
s32Rë
)

6063 
¥ötf
("CommSceneautoSetRegister failed\n");

6066 
u32NRProfûeVauÀ
 = ((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…2
[
i
])

6067 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…2
[
i
 + 1]) << 8)

6068 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…2
[
i
 + 2]) << 16)

6069 + (((
HI_U32
)
g_°INIP¨a
.
°IniNRProfûe
.
au8NpDeÁu…2
[
i
 + 3]) << 24);

6071 
u32NRProfûeAddr
 = 0x205A0C00 + 
i
;

6073 
s32Rë
 = 
CommS˚√autoSëRegi°î
(
s32I•Dev
, 
u32NRProfûeAddr
, 
u32NRProfûeVauÀ
);

6074 i‡(
HI_SUCCESS
 !
s32Rë
)

6076 
¥ötf
("CommSceneautoSetRegister failed\n");

6085 
s32Rë
 = 
CommS˚√autoGëVícAâr
(
s32VícChn
, &
°Ad±VícAâr
);

6086 i‡(
HI_SUCCESS
 !
s32Rë
)

6088 
¥ötf
("HI_SceneAuto_GetBitrate failed\n");

6090 
u32Bôøã
 = 
°Ad±VícAâr
.
u32BôR©e
;

6092 i‡(
u32Bôøã
 !
u32La°Bôøã
)

6094 
s32Rë
 = 
CommS˚√autoGëVícAâr
(
s32VícChn
, &
°Ad±VícAâr
);

6095 i‡(
HI_SUCCESS
 !
s32Rë
)

6097 
¥ötf
("HI_SceneAuto_GetBitrate failed\n");

6099 
°Ad±VícAâr
.
eRcMode
)

6101 
ADPT_SCENEAUTO_RCMODE_H264
:

6102 
s32VícBôøãLevñ
 = 0; s32VícBôøãLevñ < 
g_°INIP¨a
.
°IniH264Víc
.
s32BôøãCou¡
; s32VencBitrateLevel++)

6104 i‡(
u32Bôøã
 <
g_°INIP¨a
.
°IniH264Víc
.
pu32BôøãThªsh
[
s32VícBôøãLevñ
])

6109 i‡(
s32VícBôøãLevñ
 =
g_°INIP¨a
.
°IniH264Víc
.
s32BôøãCou¡
)

6111 
s32VícBôøãLevñ
 = 
g_°INIP¨a
.
°IniH264Víc
.
s32BôøãCou¡
 - 1;

6114 i‡(
s32VícBôøãLevñ
 !
s32La°VícBôøãLevñ
)

6116 
s32La°VícBôøãLevñ
 = 
s32VícBôøãLevñ
;

6118 
s32Rë
 = 
S˚√Auto_SëH264Tøns
(
s32VícChn
, 
s32VícBôøãLevñ
);

6119 i‡(
HI_SUCCESS
 !
s32Rë
)

6121 
¥ötf
("SceneAuto_SetH264Trans failed\n");

6124 
s32Rë
 = 
S˚√Auto_SëH264Debﬁck
(
s32VícChn
, 
s32VícBôøãLevñ
);

6125 i‡(
HI_SUCCESS
 !
s32Rë
)

6127 
¥ötf
("SceneAuto_SetH264Debolck failed\n");

6130 
s32Rë
 = 
S˚√Auto_SëH264RcP¨am
(
s32VícChn
, 
s32VícBôøãLevñ
);

6131 i‡(
HI_SUCCESS
 !
s32Rë
)

6133 
¥ötf
("SceneAuto_SetH264RcParam failed\n");

6137 
ADPT_SCENEAUTO_RCMODE_H265
:

6138 
s32VícBôøãLevñ
 = 0; s32VícBôøãLevñ < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
s32BôøãCou¡
; s32VencBitrateLevel++)

6140 i‡(
u32Bôøã
 <
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
pu32BôøãThªsh
[
s32VícBôøãLevñ
])

6145 i‡(
s32VícBôøãLevñ
 =
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
s32BôøãCou¡
)

6147 
s32VícBôøãLevñ
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícRcP¨am
.
s32BôøãCou¡
 - 1;

6149 i‡(
s32VícBôøãLevñ
 !
s32La°VícBôøãLevñ
)

6151 
s32La°VícBôøãLevñ
 = 
s32VícBôøãLevñ
;

6152 
s32Rë
 = 
S˚√Auto_SëH265RcP¨am
(
s32VícChn
, 
s32VícBôøãLevñ
);

6153 i‡(
HI_SUCCESS
 !
s32Rë
)

6155 
¥ötf
("SceneAuto_SetH265RcParam failed\n");

6163 
s32Sh¨≥nBôøãLevñ
 = 0; s32Sh¨≥nBôøãLevñ < 
g_°INIP¨a
.
°IniSh¨≥n
.
s32BôøãCou¡
; s32SharpenBitrateLevel++)

6165 i‡(
u32Bôøã
 <
g_°INIP¨a
.
°IniSh¨≥n
.
pu32BôøãThªsh
[
s32Sh¨≥nBôøãLevñ
])

6171 i‡(
s32Sh¨≥nBôøãLevñ
 =
g_°INIP¨a
.
°IniSh¨≥n
.
s32BôøãCou¡
)

6173 
s32Sh¨≥nBôøãLevñ
 = 
g_°INIP¨a
.
°IniSh¨≥n
.
s32BôøãCou¡
 - 1;

6176 i‡(
s32Sh¨≥nBôøãLevñ
 !
s32La°Sh¨≥nBôøãLevñ
)

6178 
s32La°Sh¨≥nBôøãLevñ
 = 
s32Sh¨≥nBôøãLevñ
;

6180 
s32Rë
 = 
S˚√Auto_SëSh¨≥n
(
s32I•Dev
, 
s32Sh¨≥nBôøãLevñ
);

6181 i‡(
HI_SUCCESS
 !
s32Rë
)

6183 
¥ötf
("SceneAuto_SetSharpen failed\n");

6187 
s32AEBôøãLevñ
 = 0; s32AEBôøãLevñ < 
g_°INIP¨a
.
°IniAE
.
s32BôøãCou¡
; s32AEBitrateLevel++)

6189 i‡(
u32Bôøã
 <
g_°INIP¨a
.
°IniAE
.
pu32BôøãThªsh
[
s32AEBôøãLevñ
])

6195 i‡(
s32AEBôøãLevñ
 =
g_°INIP¨a
.
°IniAE
.
s32BôøãCou¡
)

6197 
s32AEBôøãLevñ
 = 
g_°INIP¨a
.
°IniAE
.
s32BôøãCou¡
 - 1;

6200 i‡(
s32AEBôøãLevñ
 !
s32La°AEBôøãLevñ
)

6202 
s32La°AEBôøãLevñ
 = 
s32AEBôøãLevñ
;

6204 
s32Rë
 = 
S˚√Auto_SëAERó…edBô
(
s32I•Dev
, 
s32AEBôøãLevñ
);

6205 i‡(
HI_SUCCESS
 !
s32Rë
)

6207 
¥ötf
("SceneAuto_SetAERealtedBit failed\n");

6212 i‡((
u32Bôøã
 !
u32La°Bôøã
Ë|| (
u32Exposuª
 !
u32La°Exposuª
))

6214 
s32DemoßicBôøãLevñ
 = 0; s32DemoßicBôøãLevñ < 
g_°INIP¨a
.
°IniDemoßic
.
s32BôøãCou¡
; s32DemosaicBitrateLevel++)

6216 i‡(
u32Bôøã
 <
g_°INIP¨a
.
°IniDemoßic
.
pu32BôøãThªsh
[
s32DemoßicBôøãLevñ
])

6222 i‡(
s32DemoßicBôøãLevñ
 =
g_°INIP¨a
.
°IniDemoßic
.
s32BôøãCou¡
)

6224 
s32DemoßicBôøãLevñ
 = 
g_°INIP¨a
.
°IniDemoßic
.
s32BôøãCou¡
 - 1;

6227 
s32DemoßicExpLevñ
 = 0; s32DemoßicExpLevñ < 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
; s32DemosaicExpLevel++)

6229 i‡(
u32Exposuª
 <
g_°INIP¨a
.
°IniDemoßic
.
pu32ExpThªsh
[
s32DemoßicExpLevñ
])

6234 i‡(
s32DemoßicExpLevñ
 =
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
)

6236 
s32DemoßicExpLevñ
 = 
g_°INIP¨a
.
°IniDemoßic
.
s32ExpCou¡
 - 1;

6239 i‡((
s32DemoßicBôøãLevñ
 !
s32La°DemoßicBôøãLevñ
Ë|| (
s32DemoßicExpLevñ
 !
s32La°DemoßicExpLevñ
))

6241 
s32La°DemoßicBôøãLevñ
 = 
s32DemoßicBôøãLevñ
;

6242 
s32La°DemoßicExpLevñ
 = 
s32DemoßicExpLevñ
;

6244 
s32Rë
 = 
S˚√Auto_SëDemoßic
(
s32I•Dev
, 
s32DemoßicExpLevñ
, 
s32DemoßicBôøãLevñ
);

6245 i‡(
HI_SUCCESS
 !
s32Rë
)

6247 
¥ötf
("SceneAuto_SetDemosaic failed\n");

6250 
s32Rë
 = 
CommS˚√autoGëVícAâr
(
s32VícChn
, &
°Ad±VícAâr
);

6251 i‡(
HI_SUCCESS
 !
s32Rë
)

6253 
¥ötf
("HI_SceneAuto_GetBitrate failed\n");

6255 i‡(
ADPT_SCENEAUTO_RCMODE_H265
 =
°Ad±VícAâr
.
eRcMode
)

6257 
s32H265Fa˚CfgBôøãLevñ
 = 0; s32H265Fa˚CfgBôøãLevñ < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32BôøãCou¡
; s32H265FaceCfgBitrateLevel++)

6259 i‡(
u32Bôøã
 <
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32BôøãThªsh
[
s32H265Fa˚CfgBôøãLevñ
])

6265 i‡(
s32H265Fa˚CfgBôøãLevñ
 =
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32BôøãCou¡
)

6267 
s32H265Fa˚CfgBôøãLevñ
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32BôøãCou¡
 - 1;

6269 
s32H265Fa˚CfgExpLevñ
 = 0; s32H265Fa˚CfgExpLevñ < 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
; s32H265FaceCfgExpLevel++)

6271 i‡(
u32Exposuª
 <
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
pu32ExpThªsh
[
s32H265Fa˚CfgExpLevñ
])

6276 i‡(
s32H265Fa˚CfgExpLevñ
 =
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
)

6278 
s32H265Fa˚CfgExpLevñ
 = 
g_°INIP¨a
.
°IniH265Víc
.
°IniH265VícFa˚Cfg
.
s32ExpCou¡
 - 1;

6280 i‡((
s32H265Fa˚CfgBôøãLevñ
 !
s32La°H265Fa˚CfgBôøãLevñ
Ë|| (
s32H265Fa˚CfgExpLevñ
 !
s32La°H265Fa˚CfgExpLevñ
))

6282 
s32La°H265Fa˚CfgBôøãLevñ
 = 
s32H265Fa˚CfgBôøãLevñ
;

6283 
s32La°H265Fa˚CfgExpLevñ
 = 
s32H265Fa˚CfgExpLevñ
;

6284 
s32Rë
 = 
S˚√Auto_SëH265Fa˚Cfg
(
s32VícChn
, 
s32H265Fa˚CfgExpLevñ
, 
s32H265Fa˚CfgBôøãLevñ
);

6285 i‡(
HI_SUCCESS
 !
s32Rë
)

6287 
¥ötf
("SceneAuto_SetH265FaceCfg failed\n");

6295 
u32La°Exposuª
 = 
u32Exposuª
;

6296 
u32La°Bôøã
 = 
u32Bôøã
;

6297 
u¶ìp
(1000000);

6300 
s32Rë
 = 
CommS˚√autoGëDefogAâr
(
s32I•Dev
, &
°Ad±DefogAâr
);

6301 i‡(
HI_SUCCESS
 !
s32Rë
)

6303 
¥ötf
("CommSceneautoGetDefogAttr failed\n");

6305 i‡(
°Ad±DefogAâr
.
bE«bÀ
 =
HI_TRUE
)

6307 
s32Rë
 = 
CommS˚√autoGëQuîyI¬îSèãInfo
(
s32I•Dev
, &
°Ad±SètInfo
);

6308 i‡(
HI_SUCCESS
 !
s32Rë
)

6310 
¥ötf
("CommSceneautoGetQueryInnerStateInfo failed\n");

6313 i‡((
°Ad±SètInfo
.
u32DefogSåígthA˘uÆ
 <= 128) || (stAdptStatInfo.u32DefogStrengthActual >= 240))

6315 
u8DciSåígth
 = 32;

6319 
u8DciSåígth
 = 
g_°INIP¨a
.
au8DciSåígthLut
[
°Ad±SètInfo
.
u32DefogSåígthA˘uÆ
 - 129];

6322 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DciP¨am
);

6323 i‡(
HI_SUCCESS
 !
s32Rë
)

6325 
¥ötf
("CommSceneautoGetDCIParam failed\n");

6327 i‡(
HI_FALSE
 =
bDefogSèã
)

6329 
bDciE«bÀ
 = 
°Ad±DciP¨am
.
bE«bÀ
;

6330 
u32BœckGaö
 = 
°Ad±DciP¨am
.u32BlackGain;

6331 
u32C⁄åa°Gaö
 = 
°Ad±DciP¨am
.u32ContrastGain;

6332 
u32LightGaö
 = 
°Ad±DciP¨am
.u32LightGain;

6333 
bDefogSèã
 = 
HI_TRUE
;

6335 
°Ad±DciP¨am
.
bE«bÀ
 = 
HI_TRUE
;

6336 
°Ad±DciP¨am
.
u32BœckGaö
 = 
u8DciSåígth
;

6337 
°Ad±DciP¨am
.
u32C⁄åa°Gaö
 = 
u8DciSåígth
;

6338 
°Ad±DciP¨am
.
u32LightGaö
 = 
u8DciSåígth
;

6339 
s32Rë
 = 
CommS˚√autoSëDCIP¨am
(
s32ViDev
, &
°Ad±DciP¨am
);

6340 i‡(
HI_SUCCESS
 !
s32Rë
)

6342 
¥ötf
("CommSceneautoSetDCIParam failed\n");

6347 i‡(
HI_TRUE
 =
bDefogSèã
)

6349 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DciP¨am
);

6350 i‡(
HI_SUCCESS
 !
s32Rë
)

6352 
¥ötf
("CommSceneautoGetDCIParam failed\n");

6354 
°Ad±DciP¨am
.
bE«bÀ
 = 
bDciE«bÀ
;

6355 
°Ad±DciP¨am
.
u32BœckGaö
 = u32BlackGain;

6356 
°Ad±DciP¨am
.
u32C⁄åa°Gaö
 = u32ContrastGain;

6357 
°Ad±DciP¨am
.
u32LightGaö
 = u32LightGain;

6358 
s32Rë
 = 
CommS˚√autoSëDCIP¨am
(
s32ViDev
, &
°Ad±DciP¨am
);

6359 i‡(
HI_SUCCESS
 !
s32Rë
)

6361 
¥ötf
("CommSceneautoSetDCIParam failed\n");

6363 
bDefogSèã
 = 
HI_FALSE
;

6368  
NULL
;

6371 * 
S˚√Auto_S≥cülThªad
(* 
pVoid
)

6373 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

6374 
HI_S32
 
s32I•Dev
;

6375 
HI_U64
 
u64Temp
;

6376 
HI_U32
 
u32Exposuª
 = 0;

6377 
HI_U32
 
u32La°Exposuª
 = 0;

6378 
HI_U32
 
u32DñèExposuª
 = 0;

6379 
HI_U8
 
u8AveLum
 = 0;

6380 
HI_U8
 
u8La°AveLum
 = 0;

6381 
HI_U8
 
u8Dñ©aAveLum
 = 0;

6382 
HI_U8
 
u8Cou¡
 = 0;

6383 
HI_U32
 
u32Hi°Sum
 = 0;

6384 
HI_U32
 
u32HLCDñèExp
 = 0;

6385 
HI_BOOL
 
bHLCSèã
 = 
HI_FALSE
;

6386 
HI_U8
 
u8HLCCou¡
 = 0;

6387 
ADPT_SCENEAUTO_EXPOSUREINFO_S
 
°Ad±ExposuªInfo
;

6388 
ADPT_SCENEAUTO_DIS_ATTR_S
 
°Ad±DisAâr
;

6389 
°Ad±DisAâr
.
bE«bÀ
 = 
HI_TRUE
;

6390 
¥˘l
(
PR_SET_NAME
, ()"SceneautoSpecialThread", 0, 0, 0);

6392 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

6394 
s32Rë
 = 
CommS˚√autoGëExposuªInfo
(
s32I•Dev
, &
°Ad±ExposuªInfo
);

6395 i‡(
HI_SUCCESS
 !
s32Rë
)

6397 
¥ötf
("CommSceneautoGetExposureInfo failed\n");

6399 
u64Temp
 = ((
HI_U64
)
°Ad±ExposuªInfo
.
u32AGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32DGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32ISPDGaö
) >> 30;

6400 
u32Exposuª
 = (
HI_U32
)
u64Temp
 * 
°Ad±ExposuªInfo
.
u32ExpTime
;

6401 
u8AveLum
 = 
°Ad±ExposuªInfo
.u8AveLum;

6402 
u32La°Exposuª
 = 
u32Exposuª
;

6403 
u8La°AveLum
 = 
u8AveLum
;

6405 
g_bS≥cülThªadFœg
 =
HI_TRUE
)

6407 
s32Rë
 = 
CommS˚√autoGëExposuªInfo
(
s32I•Dev
, &
°Ad±ExposuªInfo
);

6408 i‡(
HI_SUCCESS
 !
s32Rë
)

6410 
¥ötf
("CommSceneautoGetExposureInfo failed\n");

6412 
u64Temp
 = ((
HI_U64
)
°Ad±ExposuªInfo
.
u32AGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32DGaö
 * (HI_U64)°Ad±ExposuªInfo.
u32ISPDGaö
) >> 30;

6413 
u32Exposuª
 = (
HI_U32
)
u64Temp
 * 
°Ad±ExposuªInfo
.
u32ExpTime
;

6414 
u8AveLum
 = 
°Ad±ExposuªInfo
.u8AveLum;

6416 i‡(
u32La°Exposuª
 == 0)

6418 
u32La°Exposuª
 = 
u32Exposuª
;

6423 i‡(
HI_TRUE
 =
g_°INIP¨a
.
°ThªshVÆue
.
bHLCAutoE«bÀ
)

6425 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6426 i‡(
g_eS≥cülS˚√
 =
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
)

6428 i‡(
u32Exposuª
 > 
u32La°Exposuª
)

6430 
u32HLCDñèExp
 = 
u32Exposuª
 - 
u32La°Exposuª
;

6434 
u32HLCDñèExp
 = 
u32La°Exposuª
 - 
u32Exposuª
;

6437 
s32Rë
 = 
CommS˚√autoGëExposuªInfo
(
s32I•Dev
, &
°Ad±ExposuªInfo
);

6438 i‡(
HI_SUCCESS
 !
s32Rë
)

6440 
¥ötf
("CommSceneautoGetExposureInfo failed\n");

6442 
u32Hi°Sum
 = 
°Ad±ExposuªInfo
.
u32Hi°256VÆue
[0]

6443 + 
°Ad±ExposuªInfo
.
u32Hi°256VÆue
[1]

6444 + 
°Ad±ExposuªInfo
.
u32Hi°256VÆue
[2]

6445 + 
°Ad±ExposuªInfo
.
u32Hi°256VÆue
[3];

6447 i‡((
u32HLCDñèExp
 < 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCTﬁî™˚
)

6448 && (
u32Exposuª
 < 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCExpThªsh
))

6450 i‡(
HI_FALSE
 =
bHLCSèã
)

6452 i‡(
u32Hi°Sum
 > 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCOnThªsh
)

6454 
u8HLCCou¡
++;

6455 i‡(
u8HLCCou¡
 > 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCCou¡
)

6457 
s32Rë
 = 
S˚√Auto_HLCAutoOn
();

6458 i‡(
HI_SUCCESS
 !
s32Rë
)

6460 
¥ötf
("SceneAuto_SetHLC failed\n");

6462 
bHLCSèã
 = 
HI_TRUE
;

6463 
u8HLCCou¡
 = 0;

6464 
¥ötf
("\n\n-----------------------HLC ON------------------------\n\n");

6469 
u8HLCCou¡
 = 0;

6475 i‡(
u32Hi°Sum
 < 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCOffThªsh
)

6477 
u8HLCCou¡
++;

6478 i‡(
u8HLCCou¡
 > 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCCou¡
)

6480 
s32Rë
 = 
S˚√Auto_HLCAutoOff
();

6481 i‡(
HI_SUCCESS
 !
s32Rë
)

6483 
¥ötf
("SceneAuto_SetHLC failed\n");

6485 
bHLCSèã
 = 
HI_FALSE
;

6486 
¥ötf
("\n\n-----------------------HLC OFF------------------------\n\n");

6487 
u8HLCCou¡
 = 0;

6492 
u8HLCCou¡
 = 0;

6498 i‡((
HI_TRUE
 =
bHLCSèã
Ë&& (
u32Hi°Sum
 < 
g_°INIP¨a
.
°ThªshVÆue
.
u32HLCOffThªsh
))

6500 
s32Rë
 = 
S˚√Auto_HLCAutoOff
();

6501 i‡(
HI_SUCCESS
 !
s32Rë
)

6503 
¥ötf
("SceneAuto_HLCOff failed\n");

6505 
bHLCSèã
 = 
HI_FALSE
;

6506 
u8HLCCou¡
 = 0;

6507 
¥ötf
("\n\n-----------------------HLC OFF------------------------\n\n");

6511 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6514 i‡((
u32La°Exposuª
 !
u32Exposuª
Ë|| (
u8La°AveLum
 !
u8AveLum
))

6516 i‡(
u32Exposuª
 > 
u32La°Exposuª
)

6518 
u32DñèExposuª
 = (
u32Exposuª
 * 256 / 
u32La°Exposuª
) - 256;

6522 
u32DñèExposuª
 = (
u32La°Exposuª
 * 256 / 
u32Exposuª
) - 256;

6525 i‡(
u8AveLum
 >
u8La°AveLum
)

6527 
u8Dñ©aAveLum
 = 
u8AveLum
 - 
u8La°AveLum
;

6531 
u8Dñ©aAveLum
 = 
u8La°AveLum
 - 
u8AveLum
;

6534 i‡(
g_°PªviousP¨a
.
°Dis
.
bE«bÀ
 =
HI_TRUE
)

6538 i‡((
u32DñèExposuª
 > 
g_°INIP¨a
.
°ThªshVÆue
.
u32DñèDisExpThªash
Ë|| (
u8Dñ©aAveLum
 > g_°INIP¨a.°ThªshVÆue.
u32AveLumThªsh
))

6541 i‡(
°Ad±DisAâr
.
bE«bÀ
 =
HI_TRUE
)

6543 
¥ötf
("\n\n----------------DIS DISABLE--------------------\n\n");

6544 
°Ad±DisAâr
.
bE«bÀ
 = 
HI_FALSE
;

6545 
s32Rë
 = 
CommS˚√autoSëDISAâr
(
s32I•Dev
, &
°Ad±DisAâr
);

6546 i‡(
HI_SUCCESS
 !
s32Rë
)

6548 
¥ötf
("CommSceneautoSetDISAttr failed\n");

6550 
¶ìp
(1);

6552 
u8Cou¡
 = 0;

6556 i‡(
°Ad±DisAâr
.
bE«bÀ
 =
HI_FALSE
)

6558 
u8Cou¡
++;

6559 i‡(
u8Cou¡
 > 7)

6561 
¥ötf
("\n\n----------------DIS ENABLE--------------------\n\n");

6562 
°Ad±DisAâr
.
bE«bÀ
 = 
HI_TRUE
;

6563 
s32Rë
 = 
CommS˚√autoSëDISAâr
(
s32I•Dev
, &
°Ad±DisAâr
);

6564 i‡(
HI_SUCCESS
 !
s32Rë
)

6566 
¥ötf
("CommSceneautoSetDISAttr failed\n");

6568 
u8Cou¡
 = 0;

6576 i‡(
u32Exposuª
 > 
g_°INIP¨a
.
°ThªshVÆue
.
u32F≤ExpThªsh
)

6578 
°Ad±F≤Aâr
.
bE«bÀ
 = 
HI_FALSE
;

6579 
s32Rë
 = 
CommS˚√autoSëFPNAâr
(
s32I•Dev
, &
°Ad±F≤Aâr
);

6580 i‡(
HI_SUCCESS
 !
s32Rë
)

6582 
¥ötf
("CommSceneautoSetFPNAttr failed\n");

6587 
°Ad±F≤Aâr
.
bE«bÀ
 = 
HI_TRUE
;

6588 
s32Rë
 = 
CommS˚√autoSëFPNAâr
(
s32I•Dev
, &
°Ad±F≤Aâr
);

6589 i‡(
HI_SUCCESS
 !
s32Rë
)

6591 
¥ötf
("CommSceneautoSetFPNAttr failed\n");

6596 
u8La°AveLum
 = 
u8AveLum
;

6597 
u32La°Exposuª
 = 
u32Exposuª
;

6600 
u¶ìp
(40000);

6603  
NULL
;

6606 
HI_S32
 
HI_SRDK_SCENEAUTO_GëS≥cülMode
(
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
* 
≥S≥cülS˚√
)

6608 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6609 *
≥S≥cülS˚√
 = 
g_eS≥cülS˚√
;

6610 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6611  
HI_SUCCESS
;

6614 
HI_S32
 
HI_SRDK_SCENEAUTO_SëS≥cülMode
(c⁄° 
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
* 
≥S≥cülS˚√
)

6616 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

6617 
CHECK_SCENEAUTO_INIT
();

6618 
CHECK_NULL_PTR
(
≥S≥cülS˚√
);

6620 
¥ötf
("*≥S≥cülS˚√ = %d\n", *
≥S≥cülS˚√
);

6622 i‡((*
≥S≥cülS˚√
 !
SRDK_SCENEAUTO_SPECIAL_SCENE_BLC
) &&

6623 (*
≥S≥cülS˚√
 !
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
) &&

6624 (*
≥S≥cülS˚√
 !
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
) &&

6625 (*
≥S≥cülS˚√
 !
SRDK_SCENEAUTO_SPECIAL_SCENE_DYNAMIC
) &&

6626 (*
≥S≥cülS˚√
 !
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
) &&

6627 (*
≥S≥cülS˚√
 !
SRDK_SCENEAUTO_SPECIAL_SCENE_DRC
))

6629 
¥ötf
("error input! unknow special scene!");

6630  
HI_FAILURE
;

6633 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6634 
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
 
eS≥cülS˚√
 = *
≥S≥cülS˚√
;

6636 i‡(
g_eS≥cülS˚√
 !
eS≥cülS˚√
)

6638 i‡((
HI_TRUE
 !
g_bS˚√autoSèπ
Ë&& (
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
 =
g_eS≥cülS˚√
))

6640 
s32Rë
 = 
S˚√auto_GëPªviousP¨a
();

6641 i‡(
HI_SUCCESS
 !
s32Rë
)

6643 
¥ötf
("Sceneauto_GetPreviousPara failed\n");

6644 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6645  
HI_FAILURE
;

6650 
s32Rë
 = 
S˚√Auto_SëPªviousP¨a
();

6651 i‡(
HI_SUCCESS
 !
s32Rë
)

6653 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6654 
¥ötf
("SceneAuto_SetPreviousPara failed\n");

6655  
HI_FAILURE
;

6659 
eS≥cülS˚√
)

6661 
SRDK_SCENEAUTO_SPECIAL_SCENE_BLC
:

6662 
s32Rë
 = 
S˚√Auto_SëBLC
();

6663 i‡(
HI_SUCCESS
 !
s32Rë
)

6665 
¥ötf
("SceneAuto_SetBLC failed\n");

6666 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6667  
HI_FAILURE
;

6671 
SRDK_SCENEAUTO_SPECIAL_SCENE_IR
:

6672 
s32Rë
 = 
S˚√Auto_SëIR
();

6673 i‡(
HI_SUCCESS
 !
s32Rë
)

6675 
¥ötf
("SceneAuto_SetBLC failed\n");

6676 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6677  
HI_FAILURE
;

6680 
SRDK_SCENEAUTO_SPECIAL_SCENE_HLC
:

6681 
s32Rë
 = 
S˚√Auto_SëHLC
();

6682 i‡(
HI_SUCCESS
 !
s32Rë
)

6684 
¥ötf
("SceneAuto_SetHLC failed\n");

6685 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6686  
HI_FAILURE
;

6689 
SRDK_SCENEAUTO_SPECIAL_SCENE_DYNAMIC
:

6690 
s32Rë
 = 
S˚√Auto_SëDy«mic
();

6691 i‡(
HI_SUCCESS
 !
s32Rë
)

6693 
¥ötf
("SceneAuto_SetDynamic failed\n");

6694 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6695  
HI_FAILURE
;

6698 
SRDK_SCENEAUTO_SPECIAL_SCENE_DRC
:

6699 
s32Rë
 = 
S˚√Auto_SëDRC
();

6700 i‡(
HI_SUCCESS
 !
s32Rë
)

6702 
¥ötf
("SceneAuto_SetDRC failed\n");

6703 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6704  
HI_FAILURE
;

6707 
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
:

6708 
s32Rë
 = 
S˚√Auto_SëPªviousP¨a
();

6709 i‡(
HI_SUCCESS
 !
s32Rë
)

6711 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6712 
¥ötf
("SceneAuto_SetPreviousPara failed\n");

6713  
HI_FAILURE
;

6717 
¥ötf
("unkonw choice\n");

6721 
g_eS≥cülS˚√
 = 
eS≥cülS˚√
;

6723 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6724  
HI_SUCCESS
;

6727 
HI_S32
 
HI_SRDK_SCENEAUTO_St›
()

6729 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

6730 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6731 i‡(
HI_FALSE
 =
g_bS˚√autoSèπ
)

6733 
¥ötf
("SRDK SCENEAUTO Module has been stoppedálready!\n");

6734 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6735  
HI_SUCCESS
;

6738 
g_bN‹mÆThªadFœg
 = 
HI_FALSE
;

6740 
g_bS≥cülThªadFœg
 = 
HI_FALSE
;

6741 ()
±hªad_joö
(
g_±hS˚√AutoN‹mÆ
, 
NULL
);

6742 ()
±hªad_joö
(
g_±hS˚√AutoS≥cül
, 
NULL
);

6744 i‡(
HI_TRUE
 =
g_°INIP¨a
.
°ThªshVÆue
.
bIVEE«bÀ
)

6746 
s32Rë
 = 
S˚√auto_IVESt›
();

6747 i‡(
HI_SUCCESS
 !
s32Rë
)

6749 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6750 
¥ötf
("SceneAuto_SetPreviousPara failed\n");

6751  
HI_FAILURE
;

6754 
s32Rë
 = 
S˚√Auto_SëPªviousP¨a
();

6755 i‡(
HI_SUCCESS
 !
s32Rë
)

6757 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6758 
¥ötf
("SceneAuto_SetPreviousPara failed\n");

6759  
HI_FAILURE
;

6762 
g_bS˚√autoSèπ
 = 
HI_FALSE
;

6763 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6765 
¥ötf
("SRDK SCENEAUTO Module has been stopped successfully!\n");

6767  
HI_SUCCESS
;

6770 
HI_S32
 
HI_SRDK_SCENEAUTO_Sèπ
()

6772 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

6773 
HI_S32
 
s32ViDev
;

6774 
HI_S32
 
s32I•Dev
;

6775 
ADPT_SCENEAUTO_DCIPARAM_S
 
°Ad±DCIP¨am
;

6776 
ADPT_SCENEAUTO_AEATTR_S
 
°Ad±AEAâr
;

6777 
CHECK_SCENEAUTO_INIT
();

6779 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6780 i‡(
HI_TRUE
 =
g_bS˚√autoSèπ
)

6782 
¥ötf
("SRDK SCENEAUTO Module is startálready!\n");

6783 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6784  
HI_SUCCESS
;

6786 
s32ViDev
 = 
g_°INIP¨a
.
°MpInfo
.s32ViDev;

6787 
s32I•Dev
 = 
g_°INIP¨a
.
°MpInfo
.s32IspDev;

6788 
s32Rë
 = 
CommS˚√autoGëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨am
);

6789 i‡(
HI_SUCCESS
 !
s32Rë
)

6791 
¥ötf
("CommSceneautoGetDCIParam failed\n");

6792 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6793  
HI_FAILURE
;

6795 
°Ad±DCIP¨am
.
bE«bÀ
 = 
HI_TRUE
;

6796 
°Ad±DCIP¨am
.
u32BœckGaö
 = 32;

6797 
°Ad±DCIP¨am
.
u32C⁄åa°Gaö
 = 32;

6798 
°Ad±DCIP¨am
.
u32LightGaö
 = 32;

6799 
s32Rë
 = 
CommS˚√autoSëDCIP¨am
(
s32ViDev
, &
°Ad±DCIP¨am
);

6800 i‡(
HI_SUCCESS
 !
s32Rë
)

6802 
¥ötf
("CommSceneautoSetDCIParam failed\n");

6803 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6804  
HI_FAILURE
;

6806 i‡(
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
 =
g_eS≥cülS˚√
)

6808 
s32Rë
 = 
S˚√auto_GëPªviousP¨a
();

6809 i‡(
HI_SUCCESS
 !
s32Rë
)

6811 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6812 
¥ötf
("Sceneauto_GetPreviousPara failed\n");

6813  
HI_FAILURE
;

6816 
s32Rë
 = 
S˚√Auto_SëAERouã
();

6817 i‡(
HI_SUCCESS
 !
s32Rë
)

6819 
¥ötf
("SceneAuto_SetAERoute failed\n");

6820 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6821  
HI_FAILURE
;

6824 
s32Rë
 = 
S˚√Auto_SëDeÁu…Gamma
();

6825 i‡(
HI_SUCCESS
 !
s32Rë
)

6827 
¥ötf
("SceneAuto_SetDefaultGamma failed\n");

6828 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6829  
HI_FAILURE
;

6832 
s32Rë
 = 
CommS˚√autoGëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

6833 i‡(
HI_SUCCESS
 !
s32Rë
)

6835 
¥ötf
("CommSceneautoGetAEAttr failed\n");

6836 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6837  
HI_FAILURE
;

6839 
°Ad±AEAâr
.
u8AERunI¡îvÆ
 = 
g_°INIP¨a
.
°IniAE
.u8AERunInterval;

6840 
s32Rë
 = 
CommS˚√autoSëAEAâr
(
s32I•Dev
, &
°Ad±AEAâr
);

6841 i‡(
HI_SUCCESS
 !
s32Rë
)

6843 
¥ötf
("CommSceneautoSetAEAttr failed\n");

6844 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6845  
HI_FAILURE
;

6847 
g_bN‹mÆThªadFœg
 = 
HI_TRUE
;

6848 
g_bS≥cülThªadFœg
 = 
HI_TRUE
;

6851 
s32Rë
 = 
±hªad_¸óã
(&
g_±hS˚√AutoN‹mÆ
, 
NULL
, 
S˚√Auto_N‹mÆThªad
, NULL);

6852 i‡(
HI_SUCCESS
 !
s32Rë
)

6854 
¥ötf
("pthread_create SceneAuto_NormalThread failed \n");

6855 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6856  
HI_FAILURE
;

6859 
s32Rë
 = 
±hªad_¸óã
(&
g_±hS˚√AutoS≥cül
, 
NULL
, 
S˚√Auto_S≥cülThªad
, NULL);

6860 i‡(
HI_SUCCESS
 !
s32Rë
)

6862 
¥ötf
("pthread_create SceneAuto_SpecialThread failed \n");

6863 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6864  
HI_FAILURE
;

6867 i‡(
HI_TRUE
 =
g_°INIP¨a
.
°ThªshVÆue
.
bIVEE«bÀ
)

6869 
s32Rë
 = 
S˚√auto_IVESèπ
();

6870 i‡(
HI_SUCCESS
 !
s32Rë
)

6872 
¥ötf
("Sceneauto_IVEStart failed\n");

6873 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6874  
HI_FAILURE
;

6878 
g_bS˚√autoSèπ
 = 
HI_TRUE
;

6879 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6881 
¥ötf
("SRDK SCENEAUTO Module has been started successfully!\n");

6883  
HI_SUCCESS
;

6886 
HI_S32
 
HI_SRDK_SCENEAUTO_DeInô
()

6889 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6890 i‡(
HI_FALSE
 =
g_bS˚√autoInô
)

6892 
¥ötf
("SRDK SCENEAUTO Module hasÇot been inited !\n");

6893 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6894  
HI_SUCCESS
;

6897 i‡(
HI_TRUE
 =
g_bN‹mÆThªadFœg
)

6899 
g_bN‹mÆThªadFœg
 = 
HI_FALSE
;

6900 ()
±hªad_joö
(
g_±hS˚√AutoN‹mÆ
, 
NULL
);

6902 i‡(
HI_TRUE
 =
g_bS≥cülThªadFœg
)

6904 
g_bS≥cülThªadFœg
 = 
HI_FALSE
;

6905 ()
±hªad_joö
(
g_±hS˚√AutoS≥cül
, 
NULL
);

6907 
S˚√auto_FªeDi˘
();

6908 
S˚√auto_FªeMem
();

6909 
g_bS˚√autoInô
 = 
HI_FALSE
;

6910 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6912 
¥ötf
("SRDK SCENEAUTO Module has been deinited successfully!\n");

6914  
HI_SUCCESS
;

6917 
HI_S32
 
HI_SRDK_SCENEAUTO_Inô
(c⁄° 
HI_CHAR
* 
pszFûeName
)

6919 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

6921 
CHECK_NULL_PTR
(
pszFûeName
);

6923 
±hªad_muãx_lock
(&
g_°S˚√autoLock
);

6924 i‡(
HI_TRUE
 =
g_bS˚√autoInô
)

6926 
¥ötf
("SRDK SCENEAUTO Module has been initedálready\n");

6927 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6928  
HI_SUCCESS
;

6931 
s32Rë
 = 
S˚√auto_LﬂdFûe
(
pszFûeName
);

6932 i‡(
HI_SUCCESS
 !
s32Rë
)

6934 
¥ötf
("Sceneauto_LoadFile failed\n");

6935 
S˚√auto_FªeDi˘
();

6936 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6937  
HI_FAILURE
;

6940 
s32Rë
 = 
S˚√auto_LﬂdINIP¨a
();

6941 i‡(
HI_SUCCESS
 !
s32Rë
)

6943 
¥ötf
("Sceneauto_LoadCommonPara failed\n");

6944 
S˚√auto_FªeDi˘
();

6945 
S˚√auto_FªeMem
();

6946 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6947  
HI_FAILURE
;

6950 
g_bS˚√autoInô
 = 
HI_TRUE
;

6951 
g_eS≥cülS˚√
 = 
SRDK_SCENEAUTO_SPECIAL_SCENE_NONE
;

6952 
g_eVícRcMode
 = 
ADPT_SCENEAUTO_RCMODE_BUTT
;

6953 
±hªad_muãx_u∆ock
(&
g_°S˚√autoLock
);

6955 
¥ötf
("SRDK SCENUAUTO Module has been inited successfully!\n");

6957  
HI_SUCCESS
;

6960 #ifde‡
__˝lu•lus


6961 #i‡
__˝lu•lus


	@sample/scene_auto/src/include/hi_sceneauto_comm.h

1 #i‚de‡
__HI_SCENEAUTO_COMM_H__


2 
	#__HI_SCENEAUTO_COMM_H__


	)

4 
	~"hi_ty≥.h
"

6 #ifde‡
__˝lu•lus


7 #i‡
__˝lu•lus


12 
	#AE_WEIGHT_ROW
 15

	)

13 
	#AE_WEIGHT_COLUMN
 17

	)

14 
	ehiADPT_VENC_RCMODE_E


16 
ADPT_SCENEAUTO_RCMODE_H264
 = 0,

17 
ADPT_SCENEAUTO_RCMODE_H265
,

19 
ADPT_SCENEAUTO_RCMODE_BUTT
,

20 } 
	tADPT_SCENEAUTO_VENC_RCMODE_E
;

23 
	shiADPT_SCENEAUTO_DEMOSAIC_S


25 
HI_U8
 
u8VhSl›e
;

26 
HI_U8
 
u8AaSl›e
;

27 
HI_U8
 
u8VaSl›e
;

28 
HI_U8
 
u8UuSl›e
;

29 
HI_U8
 
au8LumThªsh
[16];

30 } 
	tADPT_SCENEAUTO_DEMOSAIC_S
;

32 
	shiADPT_SCENEAUTO_SHARPEN_S


34 
HI_U8
 
au8Sh¨≥nD
[16];

35 
HI_U8
 
au8Sh¨≥nUd
[16];

36 
HI_U8
 
au8Sh¨≥nRGB
[16];

37 } 
	tADPT_SCENEAUTO_SHARPEN_S
;

39 
	shiADPT_SCENEAUTO_DP_S


41 
HI_U16
 
u16Sl›e
;

42 } 
	tADPT_SCENEAUTO_DP_S
;

44 
	shiADPT_SCENEAUTO_PUBATTR_S


46 
HI_U32
 
u32Føme
;

47 } 
	tADPT_SCENEAUTO_PUBATTR_S
;

49 
	shiADPT_SCENEAUTO_GAMMA_S


51 
HI_U8
 
u8CurveTy≥
;

52 
HI_U16
 
au16GammaTabÀ
[257];

53 } 
	tADPT_SCENEAUTO_GAMMA_S
;

55 
	shiADPT_SCENEAUTO_H264TRANS_S


57 
HI_S32
 
chroma_qp_ödex_off£t
;

58 } 
	tADPT_SCENEAUTO_H264TRANS_S
;

60 
	shiADPT_SCENEAUTO_H264_DEBLOCK_S


62 
HI_U32
 
dißbÀ_deblockög_fûãr_idc
;

63 
HI_S32
 
¶i˚_Æpha_c0_off£t_div2
;

64 
HI_S32
 
¶i˚_bëa_off£t_div2
;

65 } 
	tADPT_SCENEAUTO_H264_DEBLOCK_S
;

67 
	shiADPT_SCENEAUTO_H264_RCPARAM_S


69 
HI_U32
 
u32ThrdI
[12];

70 
HI_U32
 
u32ThrdP
[12];

71 
HI_U32
 
u32QpDñè
;

72 
HI_S32
 
s32IPQPDñè
;

73 } 
	tADPT_SCENEAUTO_H264_RCPARAM_S
;

75 
	shiADPT_SCENEAUTO_AEROUTE_NODE_S


77 
HI_U32
 
u32I¡Time
;

78 
HI_U32
 
u32SysGaö
;

79 } 
	tADPT_SCENEAUTO_AEROUTE_NODE_S
;

81 
	shiADPT_SCENEAUTO_AEROUTE_S


83 
HI_U32
 
u32TŸÆNum
;

84 
ADPT_SCENEAUTO_AEROUTE_NODE_S
 
a°RouãNode
[8];

85 } 
	tADPT_SCENEAUTO_AEROUTE_S
;

87 
	shiADPT_SCENEAUTO_DCIPARAM_S


89 
HI_BOOL
 
bE«bÀ
;

90 
HI_U32
 
u32BœckGaö
;

91 
HI_U32
 
u32C⁄åa°Gaö
;

92 
HI_U32
 
u32LightGaö
;

93 } 
	tADPT_SCENEAUTO_DCIPARAM_S
;

95 
	shiADPT_SCENEAUTO_DRCATTR_S


97 
HI_BOOL
 
bE«bÀ
;

98 
HI_BOOL
 
bM™ulE«bÀ
;

99 
HI_U32
 
u32Såígth
;

100 
HI_U32
 
u32Sl›eMax
;

101 
HI_U32
 
u32Sl›eMö
;

102 
HI_U32
 
u32V¨ün˚S∑˚
;

103 
HI_U32
 
u32V¨ün˚I¡ísôy
;

104 
HI_U32
 
u32WhôeLevñ
;

105 
HI_U32
 
u32BœckLevñ
;

106 } 
	tADPT_SCENEAUTO_DRCATTR_S
;

108 
	shiADPT_SCENEAUTO_SATURATION_S


110 
HI_U8
 
u8OpTy≥
;

111 
HI_U8
 
u8M™uÆS©
;

112 
HI_U8
 
au8AutoS©
[16];

113 } 
	tADPT_SCENEAUTO_SATURATION_S
;

115 
	shiADPT_SCENEAUTO_DIS_ATTR_S


117 
HI_BOOL
 
bE«bÀ
;

118 } 
	tADPT_SCENEAUTO_DIS_ATTR_S
;

120 
	shiADPT_SCENEAUTO_AEATTR_S


122 
HI_U8
 
u8S≥ed
;

123 
HI_U8
 
u8Tﬁî™˚
;

124 
HI_U8
 
u8ExpCom≥nßti⁄
;

125 
HI_U16
 
u16BœckDñayFøme
;

126 
HI_U16
 
u16WhôeDñayFøme
;

127 
HI_U8
 
u8AESå©egyMode
;

128 
HI_U8
 
u8MaxHi°Off£t
;

129 
HI_U16
 
u16Hi°R©ioSl›e
;

130 
HI_U32
 
u32SysGaöMax
;

131 
HI_U8
 
u8AERunI¡îvÆ
;

132 
HI_U8
 
au8AeWeight
[
AE_WEIGHT_ROW
][
AE_WEIGHT_COLUMN
];

133 } 
	tADPT_SCENEAUTO_AEATTR_S
;

135 
	shiADPT_SCENEAUTO_EXPOSUREINFO_S


137 
HI_U32
 
u32Exposuª
;

138 
HI_U32
 
u32AGaö
;

139 
HI_U32
 
u32DGaö
;

140 
HI_U32
 
u32ISPDGaö
;

141 
HI_U32
 
u32ExpTime
;

142 
HI_U8
 
u8AveLum
;

143 
HI_U32
 
u32Hi°256VÆue
[256];

144 } 
	tADPT_SCENEAUTO_EXPOSUREINFO_S
;

146 
	shiADPT_SCENEAUTO_WDRATTR_S


148 
HI_U8
 
u8WdrMode
;

149 } 
	tADPT_SCENEAUTO_WDRATTR_S
;

151 
	shiADPT_SCENEAUTO_STATEINFO_S


153 
HI_U32
 
u32DRCSåígthA˘uÆ
;

154 
HI_U32
 
u32DefogSåígthA˘uÆ
;

155 } 
	tADPT_SCENEAUTO_STATEINFO_S
;

157 
	shiADPT_SCENEAUTO_3DNR_S


159 
HI_S32
 
s32SHP0
;

160 
HI_S32
 
s32SHP1
;

161 
HI_S32
 
s32SHP2
;

163 
HI_S32
 
s32MDDZ0
;

164 
HI_S32
 
s32MDDZ1
;

165 
HI_S32
 
s32MDDZ2
;

167 
HI_S32
 
s32TFS0
;

168 
HI_S32
 
s32TFS1
;

169 
HI_S32
 
s32TFS2
;

171 
HI_S32
 
s32SFS0
;

172 
HI_S32
 
s32SFS1
;

173 
HI_S32
 
s32SFS2
;

175 
HI_S32
 
s32TFP0
;

176 
HI_S32
 
s32TFP1
;

177 
HI_S32
 
s32TFP2
;

179 
HI_S32
 
s32SPS0
;

180 
HI_S32
 
s32SPS1
;

181 
HI_S32
 
s32SPS2
;

183 
HI_S32
 
s32TFR0
;

184 
HI_S32
 
s32TFR1
;

185 
HI_S32
 
s32TFR2
;

187 
HI_S32
 
s32SPT0
;

188 
HI_S32
 
s32SPT1
;

189 
HI_S32
 
s32SPT2
;

191 
HI_S32
 
s32SBF0
;

192 
HI_S32
 
s32SBF1
;

193 
HI_S32
 
s32SBF2
;

195 
HI_S32
 
s32SFC
;

196 
HI_S32
 
s32TFC
;

197 
HI_S32
 
s32Mdn
;

199 
HI_S32
 
s32MATW
;

200 
HI_S32
 
s32MATH
;

201 } 
	tADPT_SCENEAUTO_3DNR_S
;

203 
	shiADPT_SCENEAUTO_DEFOG_ATTR_S


205 
HI_BOOL
 
bE«bÀ
;

206 } 
	tADPT_SCENEAUTO_DEFOG_ATTR_S
;

207 
	shiADPT_SCENEAUTO_3DNR


209 
HI_U8
 
u8SBS
[3];

210 
HI_U8
 
u8SBT
[3];

211 
HI_U8
 
u8SDS
[3];

212 
HI_U8
 
u8SDT
[3];

213 
HI_U8
 
u8SFC
;

214 
HI_U8
 
u8SHP
[3];

215 
HI_U8
 
u8TFC
;

216 
HI_U16
 
u16PSFS
;

217 
HI_U16
 
u16POST
;

218 
HI_U16
 
u16TFS
[3];

219 
HI_U16
 
u16TFR
[3];

220 
HI_U16
 
u16SBF
[3];

221 
HI_U16
 
u16MDZ
[3];

222 
HI_U8
 
u8MABW
;

223 
HI_U8
 
u8Po°ROW
;

224 
HI_U8
 
u8MATW
;

225 
HI_U8
 
u8MDAF
;

226 
HI_U8
 
u8TextThr
;

227 
HI_U8
 
u8MTFS
;

228 
HI_U8
 
u8ExTfThr
;

229 }
	tADPT_SCENEAUTO_3DNR
;

231 
	shiADPT_SCENEAUTO_FPN_ATTR_S


233 
HI_BOOL
 
bE«bÀ
;

234 } 
	tADPT_SCENEAUTO_FPN_ATTR_S
;

236 
	shiADPT_SCENEAUTO_CCM_ATTR_S


238 
HI_U16
 
u16HighCﬁ‹Temp
;

239 
HI_U16
 
au16HighCCM
[9];

240 
HI_U16
 
u16MidCﬁ‹Temp
;

241 
HI_U16
 
au16MidCCM
[9];

242 
HI_U16
 
u16LowCﬁ‹Temp
;

243 
HI_U16
 
au16LowCCM
[9];

244 } 
	tADPT_SCENEAUTO_CCM_ATTR_S
;

246 
	shiADPT_SCENEAUTO_ACM_ATTR_S


248 
HI_BOOL
 
bE«bÀ
;

249 
HI_U32
 
u32Cb¸Thr
;

250 
HI_U32
 
u32GaöLuma
;

251 
HI_U32
 
u32GaöHue
;

252 
HI_U32
 
u32GaöS©
;

253 } 
	tADPT_SCENEAUTO_ACM_ATTR_S
;

256 
	shiADPT_SCENEAUTO_VENC_ATTR_S


258 
ADPT_SCENEAUTO_VENC_RCMODE_E
 
eRcMode
;

259 
HI_U32
 
u32BôR©e
;

260 } 
	tADPT_SCENEAUTO_VENC_ATTR_S
;

262 
	shiADPT_SCENEAUTO_H265_RCPARAM_S


264 
HI_U32
 
u32ThrdI
[12];

265 
HI_U32
 
u32ThrdP
[12];

266 
HI_U32
 
u32QpDñè
;

267 
HI_S32
 
s32IPQPDñè
;

268 } 
	tADPT_SCENEAUTO_H265_RCPARAM_S
;

269 
	shiADPT_SCENEAUTO_H265_FACE_CFG_S


271 
HI_U8
 
u8N‹mI¡ø4RdCo°_I
;

272 
HI_U8
 
u8N‹mI¡ø8RdCo°_I
;

273 
HI_U8
 
u8N‹mI¡ø16RdCo°_I
;

274 
HI_U8
 
u8N‹mI¡ø32RdCo°_I
;

275 
HI_U8
 
u8SköI¡ø4RdCo°_I
;

276 
HI_U8
 
u8SköI¡ø8RdCo°_I
;

277 
HI_U8
 
u8SköI¡ø16RdCo°_I
;

278 
HI_U8
 
u8SköI¡ø32RdCo°_I
;

279 
HI_U8
 
u8HedgeI¡ø4RdCo°_I
;

280 
HI_U8
 
u8HedgeI¡ø8RdCo°_I
;

281 
HI_U8
 
u8HedgeI¡ø16RdCo°_I
;

282 
HI_U8
 
u8HedgeI¡ø32RdCo°_I
;

283 
HI_U8
 
u8N‹mI¡ø4RdCo°_P
;

284 
HI_U8
 
u8N‹mI¡ø8RdCo°_P
;

285 
HI_U8
 
u8N‹mI¡ø16RdCo°_P
;

286 
HI_U8
 
u8N‹mI¡ø32RdCo°_P
;

287 
HI_U8
 
u8SköI¡ø4RdCo°_P
;

288 
HI_U8
 
u8SköI¡ø8RdCo°_P
;

289 
HI_U8
 
u8SköI¡ø16RdCo°_P
;

290 
HI_U8
 
u8SköI¡ø32RdCo°_P
;

291 
HI_U8
 
u8HedgeI¡ø4RdCo°_P
;

292 
HI_U8
 
u8HedgeI¡ø8RdCo°_P
;

293 
HI_U8
 
u8HedgeI¡ø16RdCo°_P
;

294 
HI_U8
 
u8HedgeI¡ø32RdCo°_P
;

295 
HI_U8
 
u8N‹mFme8RdCo°_P
;

296 
HI_U8
 
u8N‹mFme16RdCo°_P
;

297 
HI_U8
 
u8N‹mFme32RdCo°_P
;

298 
HI_U8
 
u8N‹mFme64RdCo°_P
;

299 
HI_U8
 
u8SköFme8RdCo°_P
;

300 
HI_U8
 
u8SköFme16RdCo°_P
;

301 
HI_U8
 
u8SköFme32RdCo°_P
;

302 
HI_U8
 
u8SköFme64RdCo°_P
;

303 
HI_U8
 
u8HedgeFme8RdCo°_P
;

304 
HI_U8
 
u8HedgeFme16RdCo°_P
;

305 
HI_U8
 
u8HedgeFme32RdCo°_P
;

306 
HI_U8
 
u8HedgeFme64RdCo°_P
;

307 
HI_U8
 
u8N‹mMîg8RdCo°_P
;

308 
HI_U8
 
u8N‹mMîg16RdCo°_P
;

309 
HI_U8
 
u8N‹mMîg32RdCo°_P
;

310 
HI_U8
 
u8N‹mMîg64RdCo°_P
;

311 
HI_U8
 
u8SköMîg8RdCo°_P
;

312 
HI_U8
 
u8SköMîg16RdCo°_P
;

313 
HI_U8
 
u8SköMîg32RdCo°_P
;

314 
HI_U8
 
u8SköMîg64RdCo°_P
;

315 
HI_U8
 
u8HedgeMîg8RdCo°_P
;

316 
HI_U8
 
u8HedgeMîg16RdCo°_P
;

317 
HI_U8
 
u8HedgeMîg32RdCo°_P
;

318 
HI_U8
 
u8HedgeMîg64RdCo°_P
;

319 
HI_BOOL
 
bSköEn_I
;

320 
HI_U32
 
u32SköQpDñè_I
;

321 
HI_U8
 
u8SköUMax_I
;

322 
HI_U8
 
u8SköUMö_I
;

323 
HI_U8
 
u8SköVMax_I
;

324 
HI_U8
 
u8SköVMö_I
;

325 
HI_U32
 
u32SköNum_I
;

326 
HI_BOOL
 
bSköEn_P
;

327 
HI_U32
 
u32SköQpDñè_P
;

328 
HI_U8
 
u8SköUMax_P
;

329 
HI_U8
 
u8SköUMö_P
;

330 
HI_U8
 
u8SköVMax_P
;

331 
HI_U8
 
u8SköVMö_P
;

332 
HI_U32
 
u32SköNum_P
;

333 
HI_U8
 
u8HedgeThr_I
;

334 
HI_U8
 
u8HedgeC¡_I
;

335 
HI_BOOL
 
bSåoEdgeEn_I
;

336 
HI_U32
 
u32SåoEdgeQpDñè_I
;

337 
HI_U8
 
u8HedgeThr_P
;

338 
HI_U8
 
u8HedgeC¡_P
;

339 
HI_BOOL
 
bSåoEdgeEn_P
;

340 
HI_U32
 
u32SåoEdgeQpDñè_P
;

341 
HI_BOOL
 
bIm¥oveEn_I
;

342 
HI_BOOL
 
bIm¥oveEn_P
;

343 
HI_U32
 
u32N‹m32MaxNum_P
;

344 
HI_U32
 
u32N‹m16MaxNum_P
;

345 
HI_U32
 
u32N‹m32PrŸe˘Num_P
;

346 
HI_U32
 
u32N‹m16PrŸe˘Num_P
;

347 
HI_U32
 
u32Skö32MaxNum_P
;

348 
HI_U32
 
u32Skö16MaxNum_P
;

349 
HI_U32
 
u32Skö32PrŸe˘Num_P
;

350 
HI_U32
 
u32Skö16PrŸe˘Num_P
;

351 
HI_U32
 
u32Stûl32MaxNum_P
;

352 
HI_U32
 
u32Stûl16MaxNum_P
;

353 
HI_U32
 
u32Stûl32PrŸe˘Num_P
;

354 
HI_U32
 
u32Stûl16PrŸe˘Num_P
;

355 
HI_U32
 
u32Hedge32MaxNum_P
;

356 
HI_U32
 
u32Hedge16MaxNum_P
;

357 
HI_U32
 
u32Hedge32PrŸe˘Num_P
;

358 
HI_U32
 
u32Hedge16PrŸe˘Num_P
;

359 } 
	tADPT_SCENEAUTO_H265_FACE_CFG_S
;

360 #ifde‡
__˝lu•lus


361 #i‡
__˝lu•lus


	@sample/scene_auto/src/include/hi_sceneauto_comm_ext.h

1 #i‚de‡
__HI_SCENEAUTO_COMM_EXT_H__


2 
	#__HI_SCENEAUTO_COMM_EXT_H__


	)

4 
	~"hi_ty≥.h
"

7 #ifde‡
__˝lu•lus


8 #i‡
__˝lu•lus


13 
HI_S32
 
CommS˚√autoGëDemoßic
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DEMOSAIC_S
* 
p°Ad±Demoßic
);

14 
HI_S32
 
CommS˚√autoSëDemoßic
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DEMOSAIC_S
* 
p°Ad±Demoßic
);

15 
HI_S32
 
CommS˚√autoGëSh¨≥n
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_SHARPEN_S
* 
p°Ad±Sh¨≥n
);

16 
HI_S32
 
CommS˚√autoSëSh¨≥n
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_SHARPEN_S
* 
p°Ad±Sh¨≥n
);

17 
HI_S32
 
CommS˚√autoGëDP
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DP_S
* 
p°Ad±DP
);

18 
HI_S32
 
CommS˚√autoSëDP
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DP_S
* 
p°Ad±DP
);

19 
HI_S32
 
CommS˚√autoGëPubAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_PUBATTR_S
* 
p°Ad±PubAâr
);

20 
HI_S32
 
CommS˚√autoGëGamma
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_GAMMA_S
* 
p°Ad±Gamma
);

21 
HI_S32
 
CommS˚√autoSëGamma
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_GAMMA_S
* 
p°Ad±Gamma
);

22 
HI_S32
 
CommS˚√autoGëH264Tøns
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H264TRANS_S
* 
p°Ad±H264Tøns
);

23 
HI_S32
 
CommS˚√autoSëH264Tøns
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H264TRANS_S
* 
p°Ad±H264Tøns
);

24 
HI_S32
 
CommS˚√autoGëH24Deblock
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H264_DEBLOCK_S
* 
p°Ad±H264Deblock
);

25 
HI_S32
 
CommS˚√autoSëH24Deblock
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H264_DEBLOCK_S
* 
p°Ad±H264Deblock
);

26 
HI_S32
 
CommS˚√autoGëH264RcP¨am
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H264_RCPARAM_S
* 
p°Ad±RCP¨am
);

27 
HI_S32
 
CommS˚√autoSëH264RcP¨am
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H264_RCPARAM_S
* 
p°Ad±RCP¨am
);

28 
HI_S32
 
CommS˚√autoGëAERouã
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_AEROUTE_S
* 
p°Ad±AERouã
);

29 
HI_S32
 
CommS˚√autoSëAERouã
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_AEROUTE_S
* 
p°Ad±AERouã
);

30 
HI_S32
 
CommS˚√autoGëDCIP¨am
(HI_S32 
s32ViDev
, 
ADPT_SCENEAUTO_DCIPARAM_S
* 
p°Ad±DCIP¨a
);

31 
HI_S32
 
CommS˚√autoSëDCIP¨am
(HI_S32 
s32ViDev
, c⁄° 
ADPT_SCENEAUTO_DCIPARAM_S
* 
p°Ad±DCIP¨a
);

32 
HI_S32
 
CommS˚√autoGëDRCAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DRCATTR_S
* 
p°Ad±DRCAâr
);

33 
HI_S32
 
CommS˚√autoSëDRCAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DRCATTR_S
* 
p°Ad±DRCAâr
);

34 
HI_S32
 
CommS˚√autoGëS©uøti⁄
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_SATURATION_S
* 
p°Ad±S©uøti⁄
);

35 
HI_S32
 
CommS˚√autoSëS©uøti⁄
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_SATURATION_S
* 
p°Ad±S©uøti⁄
);

36 
HI_S32
 
CommS˚√autoGëDISAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DIS_ATTR_S
* 
p°Ad±DisAâr
);

37 
HI_S32
 
CommS˚√autoSëDISAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_DIS_ATTR_S
* 
p°Ad±DisAâr
);

38 
HI_S32
 
CommS˚√autoGëAEAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_AEATTR_S
* 
p°Ad±AEAâr
);

39 
HI_S32
 
CommS˚√autoSëAEAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_AEATTR_S
* 
p°Ad±AEAâr
);

40 
HI_S32
 
CommS˚√autoGëExposuªInfo
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_EXPOSUREINFO_S
* 
p°Ad±ExposuªInfo
);

41 
HI_S32
 
CommS˚√autoGëWDRAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_WDRATTR_S
* 
p°Ad±WDRAâr
);

42 
HI_S32
 
CommS˚√autoGëQuîyI¬îSèãInfo
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_STATEINFO_S
* 
p°Ad±SètInfo
);

43 
HI_S32
 
CommS˚√autoGëBôøã
(HI_S32 
s32VícChn
, 
HI_U32
* 
pu32Bôøã
);

44 
HI_S32
 
CommS˚√autoGëDefogAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_DEFOG_ATTR_S
* 
p°Ad±DefogAâr
);

45 
HI_S32
 
CommS˚√autoSë3DNR
(HI_S32 
s32VpssGΩ
, 
ADPT_SCENEAUTO_3DNR
 *
p°Ad±S≥cül3dƒ
);

46 
HI_S32
 
CommS˚√autoSëFPNAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_FPN_ATTR_S
* 
p°Ad±F≤Aâr
);

47 
HI_S32
 
CommS˚√autoGëVícAâr
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_VENC_ATTR_S
* 
p°Ad±VícAâr
);

48 
HI_S32
 
CommS˚√autoGëH265Fa˚Cfg
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H265_FACE_CFG_S
* 
p°Ad±H265Fa˚Cfg
);

49 
HI_S32
 
CommS˚√autoSëH265Fa˚Cfg
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H265_FACE_CFG_S
* 
p°Ad±H265Fa˚Cfg
);

50 
HI_S32
 
CommS˚√autoGëH265RcP¨am
(HI_S32 
s32VícChn
, 
ADPT_SCENEAUTO_H265_RCPARAM_S
* 
p°Ad±H265RCP¨am
);

51 
HI_S32
 
CommS˚√autoSëH265RcP¨am
(HI_S32 
s32VícChn
, c⁄° 
ADPT_SCENEAUTO_H265_RCPARAM_S
* 
p°Ad±H265RCP¨am
);

52 
HI_S32
 
CommS˚√autoGëCcmAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_CCM_ATTR_S
* 
p°Ad±CcmAâr
);

53 
HI_S32
 
CommS˚√autoSëCcmAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_CCM_ATTR_S
* 
p°Ad±CcmAâr
);

54 
HI_S32
 
CommS˚√autoGëAcmAâr
(HI_S32 
s32I•Dev
, 
ADPT_SCENEAUTO_ACM_ATTR_S
* 
p°Ad±AcmAâr
);

55 
HI_S32
 
CommS˚√autoSëAcmAâr
(HI_S32 
s32I•Dev
, c⁄° 
ADPT_SCENEAUTO_ACM_ATTR_S
* 
p°Ad±AcmAâr
);

56 
HI_S32
 
CommS˚√autoSëRegi°î
(HI_S32 
s32I•Dev
, 
HI_U32
 
u32Addr
, HI_U32 
u32VauÀ
);

57 
HI_S32
 
CommS˚√autoIVESèπ
(HI_S32 
s32VpssGΩ
, HI_S32 
s32VpssChn
);

58 
HI_S32
 
CommS˚√autoIVESt›
();

60 #ifde‡
__˝lu•lus


61 #i‡
__˝lu•lus


	@sample/scene_auto/src/include/hi_sceneauto_define.h

1 #i‚de‡
_HI_SCENEAUTO_DEFINE_H_


2 
	#_HI_SCENEAUTO_DEFINE_H_


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


10 
	#EXPOSURE_LEVEL
 16

	)

11 
	#AE_WEIGHT_ROW
 15

	)

12 
	#AE_WEIGHT_COLUMN
 17

	)

14 
	shiSCENEAUTO_INIPARAM_MPINFO_S


16 
HI_S32
 
s32I•Dev
;

17 
HI_S32
 
s32ViDev
;

18 
HI_S32
 
s32ViChn
;

19 
HI_S32
 
s32VpssGΩ
;

20 
HI_S32
 
s32VpssChn
;

21 
HI_S32
 
s32VícGΩ
;

22 
HI_S32
 
s32VícChn
;

23 } 
	tSCENEAUTO_INIPARAM_MPINFO_S
;

25 
	shiSCENEAUTO_DEMOSAIC_S


27 
HI_U8
 
u8VhSl›e
;

28 
HI_U8
 
u8AaSl›e
;

29 
HI_U8
 
u8VaSl›e
;

30 
HI_U8
 
u8UuSl›e
;

31 
HI_U8
 
au8LumThªsh
[16];

32 } 
	tSCENEAUTO_DEMOSAIC_S
;

34 
	shiSCENEAUTO_AERELATEDBIT_S


36 
HI_U8
 
u8S≥ed
;

37 
HI_U8
 
u8Tﬁî™˚
;

38 
HI_U16
 
u16BœckDñayFøme
;

39 
HI_U16
 
u16WhôeDñayFøme
;

40 
HI_U32
 
u32SysGaöMax
;

41 } 
	tSCENEAUTO_AERELATEDBIT_S
;

43 
	shiSCENEAUTO_AERELATEDEXP_S


45 
HI_U8
 
u8AECom≥ßti⁄
;

46 
HI_U8
 
u8AEHi°Off£t
;

47 } 
	tSCENEAUTO_AERELATEDEXP_S
;

49 
	shiSCENEAUTO_SHARPEN_S


51 
HI_U8
 
au8Sh¨≥nD
[
EXPOSURE_LEVEL
];

52 
HI_U8
 
au8Sh¨≥nUd
[
EXPOSURE_LEVEL
];

53 
HI_U8
 
au8Sh¨≥nRGB
[
EXPOSURE_LEVEL
];

54 } 
	tSCENEAUTO_SHARPEN_S
;

56 
	shiSCENEAUTO_DEPATTR_S


58 
HI_U16
 
u16Sl›e
;

59 } 
	tSCENEAUTO_DEPATTR_S
;

61 
	shiSCENEAUTO_GAMMA_S


63 
HI_U8
 
u8CurveTy≥
;

64 
HI_U16
 
u16TabÀ
[257];

65 } 
	tSCENEAUTO_GAMMA_S
;

67 
	shiSCENEAUTO_ACM_S


69 
HI_BOOL
 
bE«bÀ
;

70 
HI_U32
 
u32Cb¸Thr
;

71 
HI_U32
 
u32GaöLuma
;

72 
HI_U32
 
u32GaöHue
;

73 
HI_U32
 
u32GaöS©
;

74 } 
	tSCENEAUTO_ACM_S
;

76 
	shiSCENEAUTO_CCM_S


78 
HI_U16
 
u16HighCﬁ‹Temp
;

79 
HI_U16
 
au16HighCCM
[9];

80 
HI_U16
 
u16MidCﬁ‹Temp
;

81 
HI_U16
 
au16MidCCM
[9];

82 
HI_U16
 
u16LowCﬁ‹Temp
;

83 
HI_U16
 
au16LowCCM
[9];

84 } 
	tSCENEAUTO_CCM_S
;

86 
	shiSCENEAUTO_H264DBLK_S


88 
HI_U32
 
dißbÀ_deblockög_fûãr_idc
;

89 
HI_S32
 
¶i˚_Æpha_c0_off£t_div2
;

90 
HI_S32
 
¶i˚_bëa_off£t_div2
;

91 } 
	tSCENEAUTO_H264DBLK_S
;

94 
	shiSCENEAUTO_H264VENC_S


96 
HI_U32
 
u32ThrdI
[12];

97 
HI_U32
 
u32ThrdP
[12];

98 
HI_U32
 
u32DñèQP
;

99 
HI_S32
 
s32IPQPDñè
;

100 
HI_S32
 
s32chroma_qp_ödex_off£t
;

101 
SCENEAUTO_H264DBLK_S
 
°H264Dblk
;

102 } 
	tSCENEAUTO_H264VENC_S
;

106 
	shiSCENEAUTO_ROUTE_NODE_S


108 
HI_U32
 
u32I¡Time
;

109 
HI_U32
 
u32SysGaö
;

110 } 
	tSCENEAUTO_ROUTE_NODE_S
;

112 
	shiSCENEAUTO_INIPARAM_DRC_S


114 
HI_BOOL
 
bDRCE«bÀ
;

115 
HI_BOOL
 
bDRCM™ulE«bÀ
;

116 
HI_U32
 
u32Såígth
;

117 
HI_U32
 
u32Sl›eMax
;

118 
HI_U32
 
u32Sl›eMö
;

119 
HI_U32
 
u32V¨ün˚S∑˚
;

120 
HI_U32
 
u32V¨ün˚I¡ísôy
;

121 
HI_U32
 
u32WhôeLevñ
;

122 
HI_U32
 
u32BœckLevñ
;

123 } 
	tSCENEAUTO_INIPARAM_DRC_S
;

124 
	shiSCENEAUTO_INIPARAM_DYNAMIC_S


126 
HI_S32
 
s32TŸÆNum
;

127 
SCENEAUTO_ROUTE_NODE_S
* 
p°RouãNode
;

128 } 
	tSCENEAUTO_INIPARAM_DYNAMIC_S
;

130 
	shiSCENEAUTO_INIPARAM_BLC_S


132 
HI_U8
 
u8AESå©egyMode
;

133 
HI_U8
 
u8MaxHi°Off£t
;

134 
HI_U16
 
u16Hi°R©ioSl›e
;

135 } 
	tSCENEAUTO_INIPARAM_BLC_S
;

137 
	shiSCENEAUTO_INIPARAM_3DNRCFG_S


139 
HI_U8
 
u8SBS
[3];

140 
HI_U8
 
u8SBT
[3];

141 
HI_U8
 
u8SDS
[3];

142 
HI_U8
 
u8SDT
[3];

143 
HI_U8
 
u8SFC
;

144 
HI_U8
 
u8SHP
[3];

145 
HI_U8
 
u8TFC
;

146 
HI_U16
 
u16PSFS
;

147 
HI_U16
 
u16POST
;

148 
HI_U16
 
u16TFS
[3];

149 
HI_U16
 
u16TFR
[3];

150 
HI_U16
 
u16SBF
[3];

151 
HI_U16
 
u16MDZ
[3];

152 
HI_U8
 
u8MABW
;

153 
HI_U8
 
u8Po°ROW
;

154 
HI_U8
 
u8MATW
;

155 
HI_U8
 
u8MDAF
;

156 
HI_U8
 
u8TextThr
;

157 
HI_U8
 
u8MTFS
;

158 
HI_U8
 
u8ExTfThr
;

159 }
	tSCENEAUTO_INIPARAM_3DNRCFG_S
;

160 
	shiSCENEAUTO_INIPARAM_IR_S


162 
HI_S32
 
s32ExpCou¡
;

163 
HI_U32
* 
pu32ExpThªshLtoH
;

164 
HI_U32
* 
pu32ExpThªshHtoL
;

165 
HI_U8
* 
pu8ExpCom≥nßti⁄
;

166 
HI_U8
* 
pu8MaxHi°Off£t
;

168 
HI_U16
 
u16Hi°R©ioSl›e
;

169 
HI_U16
 
u16BœckDñayFøme
;

170 
HI_U16
 
u16WhôeDñayFøme
;

171 
HI_U8
 
u8S≥ed
;

172 
HI_U8
 
u8Tﬁî™˚
;

173 
HI_BOOL
 
bDCIE«bÀ
;

174 
HI_U32
 
u32DCIBœckGaö
;

175 
HI_U32
 
u32DCIC⁄åa°Gaö
;

176 
HI_U32
 
u32DCILightGaö
;

177 
HI_U16
 
u16Sl›e
;

178 
HI_U8
 
au8LumThªsh
[16];

179 
HI_U8
 
au8Sh¨≥nD
[16];

180 
HI_U8
 
au8Sh¨≥nUd
[16];

181 
HI_U8
 
au8Sh¨≥nRGB
[16];

182 
HI_U16
 
u16GammaTabÀ
[257];

183 
HI_U8
 
au8Weight
[
AE_WEIGHT_ROW
][
AE_WEIGHT_COLUMN
];

184 
HI_S32
 
s323DƒIsoCou¡
;

185 
HI_U32
 *
pu323DƒIsoThªsh
;

186 
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°3dƒP¨am
;

187 } 
	tSCENEAUTO_INIPARAM_IR_S
;

189 
	shiSCENEAUTO_INIPARAM_HLC_S


191 
HI_U8
 
u8ExpCom≥nßti⁄
;

192 
HI_U8
 
u8S©uøti⁄
[16];

193 
HI_U16
 
u16BœckDñayFøme
;

194 
HI_U16
 
u16WhôeDñayFøme
;

195 
HI_U8
 
u8S≥ed
;

196 
HI_U16
 
u16Hi°R©ioSl›e
;

197 
HI_U8
 
u8MaxHi°Off£t
;

198 
HI_U8
 
u8Tﬁî™˚
;

199 
HI_BOOL
 
bDCIE«bÀ
;

200 
HI_U32
 
u32DCIBœckGaö
;

201 
HI_U32
 
u32DCIC⁄åa°Gaö
;

202 
HI_U32
 
u32DCILightGaö
;

203 
HI_BOOL
 
bDRCE«bÀ
;

204 
HI_BOOL
 
bDRCM™ulE«bÀ
;

205 
HI_U32
 
u32DRCSåígthT¨gë
;

206 
HI_U16
 
u16GammaTabÀ
[257];

207 
HI_U8
 
au8Sh¨≥nUd
[16];

208 
HI_U8
 
au8Sh¨≥nRGB
[16];

209 
HI_S32
 
s323DƒIsoCou¡
;

210 
HI_U32
 *
pu323DƒIsoThªsh
;

211 
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°3dƒP¨am
;

212 } 
	tSCENEAUTO_INIPARAM_HLC_S
;

214 
	shiSCENEAUTO_INIPARAM_3DNR_S


216 
HI_S32
 
s323DƒIsoCou¡
;

217 
HI_U32
 *
pu323DƒIsoThªsh
;

218 
SCENEAUTO_INIPARAM_3DNRCFG_S
 *
p°3dƒP¨am
;

219 } 
	tSCENEAUTO_INIPARAM_3DNR_S
;

221 
	shiSCENEAUTO_H265VENC_FACECFG_S


223 
HI_U8
 
u8N‹mI¡ø4RdCo°_I
;

224 
HI_U8
 
u8N‹mI¡ø8RdCo°_I
;

225 
HI_U8
 
u8N‹mI¡ø16RdCo°_I
;

226 
HI_U8
 
u8N‹mI¡ø32RdCo°_I
;

227 
HI_U8
 
u8SköI¡ø4RdCo°_I
;

228 
HI_U8
 
u8SköI¡ø8RdCo°_I
;

229 
HI_U8
 
u8SköI¡ø16RdCo°_I
;

230 
HI_U8
 
u8SköI¡ø32RdCo°_I
;

231 
HI_U8
 
u8HedgeI¡ø4RdCo°_I
;

232 
HI_U8
 
u8HedgeI¡ø8RdCo°_I
;

233 
HI_U8
 
u8HedgeI¡ø16RdCo°_I
;

234 
HI_U8
 
u8HedgeI¡ø32RdCo°_I
;

235 
HI_U8
 
u8N‹mI¡ø4RdCo°_P
;

236 
HI_U8
 
u8N‹mI¡ø8RdCo°_P
;

237 
HI_U8
 
u8N‹mI¡ø16RdCo°_P
;

238 
HI_U8
 
u8N‹mI¡ø32RdCo°_P
;

239 
HI_U8
 
u8SköI¡ø4RdCo°_P
;

240 
HI_U8
 
u8SköI¡ø8RdCo°_P
;

241 
HI_U8
 
u8SköI¡ø16RdCo°_P
;

242 
HI_U8
 
u8SköI¡ø32RdCo°_P
;

243 
HI_U8
 
u8HedgeI¡ø4RdCo°_P
;

244 
HI_U8
 
u8HedgeI¡ø8RdCo°_P
;

245 
HI_U8
 
u8HedgeI¡ø16RdCo°_P
;

246 
HI_U8
 
u8HedgeI¡ø32RdCo°_P
;

247 
HI_U8
 
u8N‹mFme8RdCo°_P
;

248 
HI_U8
 
u8N‹mFme16RdCo°_P
;

249 
HI_U8
 
u8N‹mFme32RdCo°_P
;

250 
HI_U8
 
u8N‹mFme64RdCo°_P
;

251 
HI_U8
 
u8SköFme8RdCo°_P
;

252 
HI_U8
 
u8SköFme16RdCo°_P
;

253 
HI_U8
 
u8SköFme32RdCo°_P
;

254 
HI_U8
 
u8SköFme64RdCo°_P
;

255 
HI_U8
 
u8HedgeFme8RdCo°_P
;

256 
HI_U8
 
u8HedgeFme16RdCo°_P
;

257 
HI_U8
 
u8HedgeFme32RdCo°_P
;

258 
HI_U8
 
u8HedgeFme64RdCo°_P
;

259 
HI_U8
 
u8N‹mMîg8RdCo°_P
;

260 
HI_U8
 
u8N‹mMîg16RdCo°_P
;

261 
HI_U8
 
u8N‹mMîg32RdCo°_P
;

262 
HI_U8
 
u8N‹mMîg64RdCo°_P
;

263 
HI_U8
 
u8SköMîg8RdCo°_P
;

264 
HI_U8
 
u8SköMîg16RdCo°_P
;

265 
HI_U8
 
u8SköMîg32RdCo°_P
;

266 
HI_U8
 
u8SköMîg64RdCo°_P
;

267 
HI_U8
 
u8HedgeMîg8RdCo°_P
;

268 
HI_U8
 
u8HedgeMîg16RdCo°_P
;

269 
HI_U8
 
u8HedgeMîg32RdCo°_P
;

270 
HI_U8
 
u8HedgeMîg64RdCo°_P
;

271 
HI_BOOL
 
bSköEn_I
;

272 
HI_U32
 
u32SköQpDñè_I
;

273 
HI_U8
 
u8SköUMax_I
;

274 
HI_U8
 
u8SköUMö_I
;

275 
HI_U8
 
u8SköVMax_I
;

276 
HI_U8
 
u8SköVMö_I
;

277 
HI_U32
 
u32SköNum_I
;

278 
HI_BOOL
 
bSköEn_P
;

279 
HI_U32
 
u32SköQpDñè_P
;

280 
HI_U8
 
u8SköUMax_P
;

281 
HI_U8
 
u8SköUMö_P
;

282 
HI_U8
 
u8SköVMax_P
;

283 
HI_U8
 
u8SköVMö_P
;

284 
HI_U32
 
u32SköNum_P
;

285 
HI_U8
 
u8HedgeThr_I
;

286 
HI_U8
 
u8HedgeC¡_I
;

287 
HI_BOOL
 
bSåoEdgeEn_I
;

288 
HI_U32
 
u32SåoEdgeQpDñè_I
;

289 
HI_U8
 
u8HedgeThr_P
;

290 
HI_U8
 
u8HedgeC¡_P
;

291 
HI_BOOL
 
bSåoEdgeEn_P
;

292 
HI_U32
 
u32SåoEdgeQpDñè_P
;

293 
HI_BOOL
 
bIm¥oveEn_I
;

294 
HI_BOOL
 
bIm¥oveEn_P
;

295 
HI_U32
 
u32N‹m32MaxNum_P
;

296 
HI_U32
 
u32N‹m16MaxNum_P
;

297 
HI_U32
 
u32N‹m32PrŸe˘Num_P
;

298 
HI_U32
 
u32N‹m16PrŸe˘Num_P
;

299 
HI_U32
 
u32Skö32MaxNum_P
;

300 
HI_U32
 
u32Skö16MaxNum_P
;

301 
HI_U32
 
u32Skö32PrŸe˘Num_P
;

302 
HI_U32
 
u32Skö16PrŸe˘Num_P
;

303 
HI_U32
 
u32Stûl32MaxNum_P
;

304 
HI_U32
 
u32Stûl16MaxNum_P
;

305 
HI_U32
 
u32Stûl32PrŸe˘Num_P
;

306 
HI_U32
 
u32Stûl16PrŸe˘Num_P
;

307 
HI_U32
 
u32Hedge32MaxNum_P
;

308 
HI_U32
 
u32Hedge16MaxNum_P
;

309 
HI_U32
 
u32Hedge32PrŸe˘Num_P
;

310 
HI_U32
 
u32Hedge16PrŸe˘Num_P
;

311 } 
	tSCENEAUTO_H265VENC_FACECFG_S
;

312 
	shiSCENEAUTO_H265VENC_RCPARAM_S


314 
HI_U32
 
u32ThrdI
[12];

315 
HI_U32
 
u32ThrdP
[12];

316 
HI_U32
 
u32DñèQP
;

317 
HI_S32
 
s32IPQPDñè
;

318 } 
	tSCENEAUTO_H265VENC_RCPARAM_S
;

319 
	shiSCENEAUTO_INIPARAM_H265VENC_FACECFG_S


321 
HI_S32
 
s32BôøãCou¡
;

322 
HI_U32
* 
pu32BôøãThªsh
;

323 
HI_S32
 
s32ExpCou¡
;

324 
HI_U32
* 
pu32ExpThªsh
;

325 
SCENEAUTO_H265VENC_FACECFG_S
* 
p°H265VícFa˚Cfg
;

326 } 
	tSCENEAUTO_INIPARAM_H265VENC_FACECFG_S
;

327 
	shiSCENEAUTO_INIPARAM_H265VENC_RCPARAM_S


329 
HI_S32
 
s32BôøãCou¡
;

330 
HI_U32
* 
pu32BôøãThªsh
;

331 
SCENEAUTO_H265VENC_RCPARAM_S
* 
p°H265VícRcP¨am
;

332 } 
	tSCENEAUTO_INIPARAM_H265VENC_RCPARAM_S
;

333 
	shiSCENEAUTO_INIPARAM_H265VENC_S


335 
SCENEAUTO_INIPARAM_H265VENC_RCPARAM_S
 
°IniH265VícRcP¨am
;

336 
SCENEAUTO_INIPARAM_H265VENC_FACECFG_S
 
°IniH265VícFa˚Cfg
;

337 } 
	tSCENEAUTO_INIPARAM_H265VENC_S
;

338 
	shiSCENEAUTO_H265VENC_S


340 
SCENEAUTO_H265VENC_RCPARAM_S
 
°H265VícRcP¨am
;

341 
SCENEAUTO_H265VENC_FACECFG_S
 
°H265VícFa˚Cfg
;

342 } 
	tSCENEAUTO_H265VENC_S
;

344 
	shiSCENEAUTO_INIPARAM_H264VENC_S


346 
HI_S32
 
s32BôøãCou¡
;

347 
HI_U32
* 
pu32BôøãThªsh
;

348 
SCENEAUTO_H264VENC_S
* 
p°H264Víc
;

349 } 
	tSCENEAUTO_INIPARAM_H264VENC_S
;

351 
	shiSCENEAUTO_INIPARAM_GAMMA_S


353 
HI_S32
 
s32ExpCou¡
;

354 
HI_U32
 
u32DñayCou¡
;

355 
HI_S32
 
s32I¡îvÆ
;

356 
HI_U32
* 
pu32ExpThªshLtoD
;

357 
HI_U32
* 
pu32ExpThªshDtoL
;

358 
SCENEAUTO_GAMMA_S
* 
p°Gamma
;

359 } 
	tSCENEAUTO_INIPARAM_GAMMA_S
;

361 
	shiSCENEAUTO_INIPARAM_DP_S


363 
HI_S32
 
s32ExpCou¡
;

364 
HI_U32
* 
pu32ExpThªsh
;

365 
SCENEAUTO_DEPATTR_S
* 
p°DPAâr
;

366 } 
	tSCENEAUTO_INIPARAM_DP_S
;

368 
	shiSCENEAUTO_INIPARAM_SHARPEN_S


370 
HI_S32
 
s32BôøãCou¡
;

371 
HI_U32
* 
pu32BôøãThªsh
;

372 
SCENEAUTO_SHARPEN_S
* 
p°Sh¨≥n
;

373 } 
	tSCENEAUTO_INIPARAM_SHARPEN_S
;

375 
	shiSCENEAUTO_INIPARAM_DEMOSAIC_S


377 
HI_S32
 
s32BôøãCou¡
;

378 
HI_U32
* 
pu32BôøãThªsh
;

379 
HI_S32
 
s32ExpCou¡
;

380 
HI_U32
* 
pu32ExpThªsh
;

381 
SCENEAUTO_DEMOSAIC_S
* 
p°Demoßic
;

382 } 
	tSCENEAUTO_INIPARAM_DEMOSAIC_S
;

384 
	shiSCENEAUTO_INIPARAM_AE_S


386 
HI_U8
 
u8AERunI¡îvÆ
;

387 
HI_S32
 
s32BôøãCou¡
;

388 
HI_U32
* 
pu32BôøãThªsh
;

389 
SCENEAUTO_AERELATEDBIT_S
* 
p°AERñ©edBô
;

390 
HI_S32
 
s32ExpCou¡
;

391 
HI_U32
* 
pu32AEExpDtoLThªsh
;

392 
HI_U32
* 
pu32AEExpLtoDThªsh
;

393 
SCENEAUTO_AERELATEDEXP_S
* 
p°AERñ©edExp
;

394 } 
	tSCENEAUTO_INIPARAM_AE_S
;

396 
	shiSCENEAUTO_INIPARAM_NRPROFILE_S


398 
HI_U8
 
au8NpDeÁu…1
[128];

399 
HI_U8
 
au8NpDeÁu…2
[128];

400 
HI_U8
 
au8Np1
[128];

401 
HI_U8
 
au8Np2
[128];

402 
HI_U32
 
u32ExpLow
;

403 
HI_U32
 
u32ExpHigh
;

404 } 
	tSCENEAUTO_INIPARAM_NRPROFILE_S
;

406 
	shiSCENEAUTO_INIPARAM_THRESHVALUE_S


408 
HI_BOOL
 
bIVEE«bÀ
;

409 
HI_BOOL
 
bHLCAutoE«bÀ
;

410 
HI_U32
 
u32HLCOnThªsh
;

411 
HI_U32
 
u32HLCOffThªsh
;

412 
HI_U32
 
u32HLCTﬁî™˚
;

413 
HI_U32
 
u32HLCExpThªsh
;

414 
HI_U32
 
u32HLCCou¡
;

415 
HI_U32
 
u32AveLumThªsh
;

416 
HI_U32
 
u32DñèDisExpThªash
;

417 
HI_U32
 
u32F≤ExpThªsh
;

418 
HI_U32
 
u32DRCSåígthThªsh
;

419 } 
	tSCENEAUTO_INIPARAM_THRESHVALUE_S
;

421 
	shiSCENEAUTO_INIPARA_S


423 
HI_U8
 
au8DciSåígthLut
[111];

424 
SCENEAUTO_INIPARAM_MPINFO_S
 
°MpInfo
;

425 
SCENEAUTO_INIPARAM_THRESHVALUE_S
 
°ThªshVÆue
;

426 
SCENEAUTO_INIPARAM_NRPROFILE_S
 
°IniNRProfûe
;

427 
SCENEAUTO_INIPARAM_AE_S
 
°IniAE
;

428 
SCENEAUTO_INIPARAM_DEMOSAIC_S
 
°IniDemoßic
;

429 
SCENEAUTO_INIPARAM_SHARPEN_S
 
°IniSh¨≥n
;

430 
SCENEAUTO_INIPARAM_DP_S
 
°IniDP
;

431 
SCENEAUTO_INIPARAM_GAMMA_S
 
°IniGamma
;

432 
SCENEAUTO_INIPARAM_H264VENC_S
 
°IniH264Víc
;

433 
SCENEAUTO_INIPARAM_H265VENC_S
 
°IniH265Víc
;

434 
SCENEAUTO_INIPARAM_3DNR_S
 
°Ini3dƒ
;

435 
SCENEAUTO_INIPARAM_HLC_S
 
°HLC
;

436 
SCENEAUTO_INIPARAM_IR_S
 
°IR
;

437 
SCENEAUTO_INIPARAM_BLC_S
 
°BLC
;

438 
SCENEAUTO_INIPARAM_DYNAMIC_S
 
°Fa°Dy«mic
;

439 
SCENEAUTO_INIPARAM_DYNAMIC_S
 
°N‹mÆDy«mic
;

440 
SCENEAUTO_INIPARAM_DRC_S
 
°DRC
;

441 } 
	tSCENEAUTO_INIPARA_S
;

443 
	shiSCENEAUTO_AEATTR_S


445 
HI_U8
 
u8S≥ed
;

446 
HI_U8
 
u8Tﬁî™˚
;

447 
HI_U16
 
u16BœckDñayFøme
;

448 
HI_U16
 
u16WhôeDñayFøme
;

449 
HI_U8
 
u8ExpCom≥nßti⁄
;

450 
HI_U8
 
u8AESå©egyMode
;

451 
HI_U8
 
u8MaxHi°Off£t
;

452 
HI_U16
 
u16Hi°R©ioSl›e
;

453 
HI_U32
 
u32SysGaöMax
;

454 
HI_U8
 
au8AeWeight
[
AE_WEIGHT_ROW
][
AE_WEIGHT_COLUMN
];

455 } 
	tSCENEAUTO_AEATTR_S
;

457 
	shiSCENEAUTO_DIS_S


459 
HI_BOOL
 
bE«bÀ
;

460 } 
	tSCENEAUTO_DIS_S
;

462 
	shiSCENEAUTO_SATURATION_S


464 
HI_U8
 
u8OpTy≥
;

465 
HI_U8
 
u8M™uÆS©
;

466 
HI_U8
 
au8AutoS©
[16];

467 } 
	tSCENEAUTO_SATURATION_S
;

469 
	shiSCENEAUTO_DRCATTR_S


471 
HI_BOOL
 
bE«bÀ
;

472 
HI_BOOL
 
bM™ulE«bÀ
;

473 
HI_S32
 
s32Såígth
;

474 
HI_U32
 
u32Sl›eMax
;

475 
HI_U32
 
u32Sl›eMö
;

476 
HI_U32
 
u32V¨ün˚S∑˚
;

477 
HI_U32
 
u32V¨ün˚I¡ísôy
;

478 
HI_U32
 
u32WhôeLevñ
;

479 
HI_U32
 
u32BœckLevñ
;

480 } 
	tSCENEAUTO_DRCATTR_S
;

482 
	shiSCENEAUTO_DCIPARAM_S


484 
HI_BOOL
 
bE™bÀ
;

485 
HI_U32
 
u32BœckGaö
;

486 
HI_U32
 
u32C⁄åa°Gaö
;

487 
HI_U32
 
u32LightGaö
;

488 } 
	tSCENEAUTO_DCIPARAM_S
;

490 
	shiSCENEAUTO_AEROUTE_NODE_S


492 
HI_U32
 
u32I¡Time
;

493 
HI_U32
 
u32SysGaö
;

494 } 
	tSCENEAUTO_AEROUTE_NODE_S
;

496 
	shiSCENEAUTO_AEROUTE_S


498 
HI_U32
 
u32TŸÆNum
;

499 
SCENEAUTO_AEROUTE_NODE_S
 
a°RouãNode
[8];

500 } 
	tSCENEAUTO_AEROUTE_S
;

502 
	shiSCENEAUTO_PREVIOUSPARA_S


504 
SCENEAUTO_DEMOSAIC_S
 
°Demoßic
;

505 
SCENEAUTO_SHARPEN_S
 
°Sh¨≥n
;

506 
SCENEAUTO_DEPATTR_S
 
°DP
;

507 
SCENEAUTO_GAMMA_S
 
°Gamma
;

508 
SCENEAUTO_CCM_S
 
°Ccm
;

509 
SCENEAUTO_ACM_S
 
°Acm
;

510 
SCENEAUTO_H264VENC_S
 
°H264Víc
;

511 
SCENEAUTO_H265VENC_S
 
°H265Víc
;

512 
SCENEAUTO_AEROUTE_S
 
°AERouã
;

513 
SCENEAUTO_DCIPARAM_S
 
°DCIP¨am
;

514 
SCENEAUTO_DRCATTR_S
 
°DRCAâr
;

515 
SCENEAUTO_SATURATION_S
 
°S©uøti⁄
;

516 
SCENEAUTO_DIS_S
 
°Dis
;

517 
SCENEAUTO_AEATTR_S
 
°AEAâr
;

518 } 
	tSCENEAUTO_PREVIOUSPARA_S
;

521 #ifde‡
__˝lu•lus


522 #i‡
__˝lu•lus


	@sample/scene_auto/src/include/hi_srdk_sceneauto_define_ext.h

17 #i‚de‡
__HI_SRDK_SCENEAUTO_DEFINE_EXT_H__


18 
	#__HI_SRDK_SCENEAUTO_DEFINE_EXT_H__


	)

20 
	ehiSRDK_SCENEAUTO_SEPCIAL_SCENE_E


22 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_NONE
 = 0,

23 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_BLC
,

24 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_IR
,

25 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_HLC
,

26 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_DYNAMIC
,

27 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_DRC
,

29 
	mSRDK_SCENEAUTO_SPECIAL_SCENE_BUTT


30 } 
	tSRDK_SCENEAUTO_SEPCIAL_SCENE_E
;

32 #ifde‡
__˝lu•lus


33 #i‡
__˝lu•lus


39 #ifde‡
__˝lu•lus


40 #i‡
__˝lu•lus


	@sample/scene_auto/src/include/hi_srdk_sceneauto_ext.h

17 #i‚de‡
__HI_SRDK_SCENEAUTO_EXT_H__


18 
	#__HI_SRDK_SCENEAUTO_EXT_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


36 
HI_S32
 
HI_SRDK_SCENEAUTO_Inô
(c⁄° 
HI_CHAR
* 
pszFûeName
);

46 
HI_S32
 
HI_SRDK_SCENEAUTO_DeInô
();

56 
HI_S32
 
HI_SRDK_SCENEAUTO_Sèπ
();

66 
HI_S32
 
HI_SRDK_SCENEAUTO_St›
();

76 
HI_S32
 
HI_SRDK_SCENEAUTO_SëS≥cülMode
(c⁄° 
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
* 
≥S≥cülS˚√
);

86 
HI_S32
 
HI_SRDK_SCENEAUTO_GëS≥cülMode
(
SRDK_SCENEAUTO_SEPCIAL_SCENE_E
* 
≥S≥cülS˚√
);

88 #ifde‡
__˝lu•lus


89 #i‡
__˝lu•lus


	@sample/tde/sample_tde.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<m©h.h
>

6 
	~<sys/time.h
>

7 
	~<sys/io˘l.h
>

8 
	~<löux/fb.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

12 
	~"hi_tde_≠i.h
"

13 
	~"hi_tde_ty≥.h
"

14 
	~"hi_tde_îrcode.h
"

15 
	~"hifb.h
"

17 
	~"hi_comm_vo.h
"

18 
	~"mpi_sys.h
"

20 
	~"mpi_vo.h
"

21 
	~"ßm∂e_comm.h
"

24 
	#TDE_PRINT
 
¥ötf


	)

26 
	#VoDev
 0

	)

27 
	#VoChn
 0

	)

30 
	#MIN
(
x
,
y
Ë((xË> (yË? (yË: (x))

	)

31 
	#MAX
(
x
,
y
Ë((xË> (yË? (xË: (y))

	)

33 c⁄° 
HI_CHAR
* 
	gpszImageNames
[] =

45 
	#N_IMAGES
 (
HI_S32
)(( (
pszImageNames
Ë/  (pszImageNames[0])))

	)

48 
	#BACKGROUND_NAME
 "ªs/background.bôs"

	)

50 
	#PIXFMT
 
TDE2_COLOR_FMT_ARGB1555


	)

51 
	#BPP
 2

	)

52 
	#SCREEN_WIDTH
 720

	)

53 
	#SCREEN_HEIGHT
 576

	)

54 
	#CYCLE_LEN
 60

	)

56 
HI_S32
 
	gg_s32FømeNum
;

57 
TDE2_SURFACE_S
 
	gg_°S¸ìn
[2];

58 
TDE2_SURFACE_S
 
	gg_°BackGround
;

59 
TDE2_SURFACE_S
 
	gg_°ImgSur
[
N_IMAGES
];

61 
HI_VOID
 
	$SAMPLE_TDE_Ußge
(
HI_CHAR
* 
sPrgNm
)

63 
	`¥ötf
("Ußgê: %†<ötf>\n", 
sPrgNm
);

64 
	`¥ötf
("intf:\n");

65 
	`¥ötf
("\t 0) vo cvbs output, default.\n");

66 
	`¥ötf
("\t 1) vo BT1120 output.\n");

69 
	}
}

71 
HI_S32
 
	$TDE_Cª©eSurÁ˚ByFûe
(c⁄° 
HI_CHAR
* 
pszFûeName
, 
TDE2_SURFACE_S
* 
p°SurÁ˚
, 
HI_U8
* 
pu8Vút
)

73 
FILE
* 
Â
;

74 
HI_U32
 
cﬁ‹fmt
, 
w
, 
h
, 
°ride
;

76 i‡((
NULL
 =
pszFûeName
Ë|| (NULL =
p°SurÁ˚
))

78 
	`¥ötf
("%s, LINE %d, NULLÖå!\n", 
__FUNCTION__
, 
__LINE__
);

82 
Â
 = 
	`f›í
(
pszFûeName
, "rb");

83 i‡(
NULL
 =
Â
)

85 
	`¥ötf
("îr‹ whí o≥¿pszFûeNamê%s,Üöe:%d\n", 
pszFûeName
, 
__LINE__
);

89 
	`‰ód
(&
cﬁ‹fmt
, 1, 4, 
Â
);

90 
	`‰ód
(&
w
, 1, 4, 
Â
);

91 
	`‰ód
(&
h
, 1, 4, 
Â
);

92 
	`‰ód
(&
°ride
, 1, 4, 
Â
);

94 
p°SurÁ˚
->
íCﬁ‹Fmt
 = 
cﬁ‹fmt
;

95 
p°SurÁ˚
->
u32Width
 = 
w
;

96 
p°SurÁ˚
->
u32Height
 = 
h
;

97 
p°SurÁ˚
->
u32Såide
 = 
°ride
;

98 
p°SurÁ˚
->
u8AÕha0
 = 0xff;

99 
p°SurÁ˚
->
u8AÕha1
 = 0xff;

100 
p°SurÁ˚
->
bAÕhaMax255
 = 
HI_TRUE
;

101 
p°SurÁ˚
->
bAÕhaExt1555
 = 
HI_TRUE
;

103 
	`‰ód
(
pu8Vút
, 1, 
°ride
 * 
h
, 
Â
);

105 
	`f˛o£
(
Â
);

108 
	}
}

110 
HI_VOID
 
	$cúcumrŸ©e
 (
HI_U32
 
u32CurOnShow
)

112 
TDE_HANDLE
 
s32H™dÀ
;

113 
TDE2_OPT_S
 
°O±
 = {0};

114 
HI_FLOAT
 
eXMid
, 
eYMid
;

115 
HI_FLOAT
 
eRadius
;

116 
HI_U32
 
i
;

117 
HI_FLOAT
 
f
;

118 
HI_U32
 
u32NextOnShow
;

119 
TDE2_RECT_S
 
°SrcRe˘
;

120 
TDE2_RECT_S
 
°D°Re˘
;

121 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

123 
u32NextOnShow
 = !
u32CurOnShow
;

125 
°O±
.
íOutAÕhaFrom
 = 
TDE2_COLORKEY_MODE_FOREGROUND
;

126 
°O±
.
unCﬁ‹KeyVÆue
.
°ruCkARGB
.
°Red
.
u8CompMask
 = 0xff;

127 
°O±
.
unCﬁ‹KeyVÆue
.
°ruCkARGB
.
°Gªí
.
u8CompMask
 = 0xff;

128 
°O±
.
unCﬁ‹KeyVÆue
.
°ruCkARGB
.
°Blue
.
u8CompMask
 = 0xff;

129 
°O±
.
íCﬁ‹KeyMode
 = 
TDE2_COLORKEY_MODE_FOREGROUND
;

130 
°O±
.
unCﬁ‹KeyVÆue
.
°ruCkARGB
.
°AÕha
.
bCompIgn‹e
 = 
HI_TRUE
;

132 
f
 = (Ë(
g_s32FømeNum
 % 
CYCLE_LEN
) / CYCLE_LEN;

134 
°SrcRe˘
.
s32Xpos
 = 0;

135 
°SrcRe˘
.
s32Ypos
 = 0;

136 
°SrcRe˘
.
u32Width
 = 
g_°BackGround
.u32Width;

137 
°SrcRe˘
.
u32Height
 = 
g_°BackGround
.u32Height;

139 
eXMid
 = 
g_°BackGround
.
u32Width
 / 2.16f;

140 
eYMid
 = 
g_°BackGround
.
u32Height
 / 2.304f;

142 
eRadius
 = 
	`MIN
 (
eXMid
, 
eYMid
) / 2.0f;

145 
s32H™dÀ
 = 
	`HI_TDE2_BegöJob
();

146 i‡(
HI_ERR_TDE_INVALID_HANDLE
 =
s32H™dÀ
)

148 
	`TDE_PRINT
("start job failed!\n");

153 
s32Rë
 = 
	`HI_TDE2_QuickC›y
(
s32H™dÀ
, &
g_°BackGround
, &
°SrcRe˘
,

154 &
g_°S¸ìn
[
u32NextOnShow
], &
°SrcRe˘
);

155 i‡(
s32Rë
 < 0)

157 
	`TDE_PRINT
("Löe:%d faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

158 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

162 
i
 = 0; i < 
N_IMAGES
; i++)

164 
HI_FLOAT
 
™g
;

165 
HI_FLOAT
 
r
;

167 
°SrcRe˘
.
s32Xpos
 = 0;

168 
°SrcRe˘
.
s32Ypos
 = 0;

169 
°SrcRe˘
.
u32Width
 = 
g_°ImgSur
[
i
].u32Width;

170 
°SrcRe˘
.
u32Height
 = 
g_°ImgSur
[
i
].u32Height;

173 
™g
 = 2.0‡* (
HI_FLOAT
Ë
M_PI
 * (HI_FLOATË
i
 / 
N_IMAGES
 - 
f
 * 2.0f * (HI_FLOAT) M_PI;

174 
r
 = 
eRadius
 + (eRadiu†/ 3.0fË* 
	`söf
 (
f
 * 2.0 * 
M_PI
);

176 
°D°Re˘
.
s32Xpos
 = 
eXMid
 + 
r
 * 
	`cosf
 (
™g
Ë- 
g_°ImgSur
[
i
].
u32Width
 / 2.0f;

177 
°D°Re˘
.
s32Ypos
 = 
eYMid
 + 
r
 * 
	`söf
 (
™g
Ë- 
g_°ImgSur
[
i
].
u32Height
 / 2.0f;

178 
°D°Re˘
.
u32Width
 = 
g_°ImgSur
[
i
].u32Width;

179 
°D°Re˘
.
u32Height
 = 
g_°ImgSur
[
i
].u32Height;

182 
s32Rë
 = 
	`HI_TDE2_Bôblô
(
s32H™dÀ
, &
g_°S¸ìn
[
u32NextOnShow
], &
°D°Re˘
,

183 &
g_°ImgSur
[
i
], &
°SrcRe˘
, &
g_°S¸ìn
[
u32NextOnShow
], &
°D°Re˘
, &
°O±
);

184 i‡(
s32Rë
 < 0)

186 
	`TDE_PRINT
("Löe:%d,HI_TDE2_Bôblô faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

187 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

193 
s32Rë
 = 
	`HI_TDE2_EndJob
(
s32H™dÀ
, 
HI_FALSE
, 
HI_TRUE
, 10);

194 i‡(
s32Rë
 < 0)

196 
	`TDE_PRINT
("Löe:%d,HI_TDE2_EndJob faûed,ªt=0x%x!\n", 
__LINE__
, 
s32Rë
);

197 
	`HI_TDE2_C™˚lJob
(
s32H™dÀ
);

201 
g_s32FømeNum
++;

203 
	}
}

205 
HI_S32
 
	$TDE_DøwGøphicSam∂e
()

207 
HI_U32
 
u32Size
;

208 
HI_S32
 
s32Fd
;

209 
HI_U32
 
u32Times
;

210 
HI_U8
* 
pu8S¸ìn
;

211 
HI_U8
* 
pu8BackGroundVú
;

213 
HI_U32
 
u32PhyAddr
;

214 
HI_S32
 
s32Rë
 = -1;

215 
HI_U32
 
i
 = 0;

216 
HI_BOOL
 
bShow
, 
bCom¥ess
;

217 
HIFB_ALPHA_S
 
°AÕha
 = {0};

219 
fb_fix_s¸ìnöfo
 
°FixInfo
;

220 
fb_v¨_s¸ìnöfo
 
°V¨Info
;

221 
fb_bôfõld
 
°R32
 = {10, 5, 0};

222 
fb_bôfõld
 
°G32
 = {5, 5, 0};

223 
fb_bôfõld
 
°B32
 = {0, 5, 0};

224 
fb_bôfõld
 
°A32
 = {15, 1, 0};

227 
	`HI_TDE2_O≥n
();

230 
s32Fd
 = 
	`›í
("/dev/fb0", 
O_RDWR
);

231 i‡(
s32Fd
 == -1)

233 
	`¥ötf
("open frame buffer deviceÉrror\n");

234 
FB_OPEN_ERROR
;

237 
bCom¥ess
 = 
HI_FALSE
 ;

238 i‡(
	`io˘l
(
s32Fd
, 
FBIOPUT_COMPRESSION_HIFB
, &
bCom¥ess
) < 0)

240 
	`¥ötf
(" FBIOPUT_COMPRESSION_HIFB failed!\n");

241 
	`˛o£
(
s32Fd
);

242 
FB_PROCESS_ERROR2
;

244 
°AÕha
.
bAÕhaCh™√l
 = 
HI_FALSE
;

245 
°AÕha
.
bAÕhaE«bÀ
 = 
HI_FALSE
;

246 i‡(
	`io˘l
(
s32Fd
, 
FBIOPUT_ALPHA_HIFB
, &
°AÕha
) < 0)

248 
	`¥ötf
("Putálpha info failed!\n");

249 
FB_PROCESS_ERROR0
;

253 i‡(
	`io˘l
(
s32Fd
, 
FBIOGET_VSCREENINFO
, &
°V¨Info
) < 0)

255 
	`¥ötf
("Get variable screen info failed!\n");

256 
FB_PROCESS_ERROR0
;

259 
°V¨Info
.
xªs_vútuÆ
 = 
SCREEN_WIDTH
;

260 
°V¨Info
.
yªs_vútuÆ
 = 
SCREEN_HEIGHT
 * 2;

261 
°V¨Info
.
xªs
 = 
SCREEN_WIDTH
;

262 
°V¨Info
.
yªs
 = 
SCREEN_HEIGHT
;

263 
°V¨Info
.
a˘iv©e
 = 
FB_ACTIVATE_NOW
;

264 
°V¨Info
.
bôs_≥r_pixñ
 = 16;

265 
°V¨Info
.
xoff£t
 = 0;

266 
°V¨Info
.
yoff£t
 = 0;

267 
°V¨Info
.
ªd
 = 
°R32
;

268 
°V¨Info
.
gªí
 = 
°G32
;

269 
°V¨Info
.
blue
 = 
°B32
;

270 
°V¨Info
.
å™•
 = 
°A32
;

272 i‡(
	`io˘l
(
s32Fd
, 
FBIOPUT_VSCREENINFO
, &
°V¨Info
) < 0)

274 
	`¥ötf
("process frame buffer deviceÉrror\n");

275 
FB_PROCESS_ERROR0
;

278 i‡(
	`io˘l
(
s32Fd
, 
FBIOGET_FSCREENINFO
, &
°FixInfo
) < 0)

280 
	`¥ötf
("process frame buffer deviceÉrror\n");

281 
FB_PROCESS_ERROR0
;

284 
u32Size
 = 
°FixInfo
.
smem_Àn
;

285 
u32PhyAddr
 = 
°FixInfo
.
smem_°¨t
;

286 
pu8S¸ìn
 = 
	`mm≠
(
NULL
, 
u32Size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
s32Fd
, 0);

287 i‡(
NULL
 =
pu8S¸ìn
)

289 
	`¥ötf
("mmap fb0 failed!\n");

290 
FB_PROCESS_ERROR0
;

292 
	`mem£t
(
pu8S¸ìn
, 0x00, 
°FixInfo
.
smem_Àn
);

295 
g_°S¸ìn
[0].
íCﬁ‹Fmt
 = 
PIXFMT
;

296 
g_°S¸ìn
[0].
u32PhyAddr
 = u32PhyAddr;

297 
g_°S¸ìn
[0].
u32Width
 = 
SCREEN_WIDTH
;

298 
g_°S¸ìn
[0].
u32Height
 = 
SCREEN_HEIGHT
;

299 
g_°S¸ìn
[0].
u32Såide
 = 
°FixInfo
.
löe_Àngth
;

300 
g_°S¸ìn
[0].
bAÕhaMax255
 = 
HI_TRUE
;

302 
g_°S¸ìn
[1] = g_stScreen[0];

303 
g_°S¸ìn
[1].
u32PhyAddr
 = g_°S¸ìn[0].u32PhyAdd∏+ g_°S¸ìn[0].
u32Såide
 * g_°S¸ìn[0].
u32Height
;

306 i‡(
HI_FAILURE
 =
	`HI_MPI_SYS_MmzAŒoc
(&(
g_°BackGround
.
u32PhyAddr
), ((**)&
pu8BackGroundVú
),

307 
NULL
, NULL, 720 * 576 * 2 * 
N_IMAGES
))

309 
	`TDE_PRINT
("allocate memory (720*576*2*N_IMAGES bytes) failed\n");

310 
FB_PROCESS_ERROR1
;

313 
	`TDE_Cª©eSurÁ˚ByFûe
(
BACKGROUND_NAME
, &
g_°BackGround
, 
pu8BackGroundVú
);

315 
g_°ImgSur
[0].
u32PhyAddr
 = 
g_°BackGround
.u32PhyAdd∏+ g_°BackGround.
u32Såide
 * g_°BackGround.
u32Height
;

316 
i
 = 0; i < 
N_IMAGES
 - 1; i++)

318 
	`TDE_Cª©eSurÁ˚ByFûe
(
pszImageNames
[
i
], &
g_°ImgSur
[i],

319 
pu8BackGroundVú
 + ((
HI_U32
)
g_°ImgSur
[
i
].
u32PhyAddr
 - 
g_°BackGround
.u32PhyAddr));

320 
g_°ImgSur
[
i
 + 1].
u32PhyAddr
 = g_°ImgSur[i].u32PhyAdd∏+ g_°ImgSur[i].
u32Såide
 * g_°ImgSur[i].
u32Height
;

322 
	`TDE_Cª©eSurÁ˚ByFûe
(
pszImageNames
[
i
], &
g_°ImgSur
[i],

323 
pu8BackGroundVú
 + ((
HI_U32
)
g_°ImgSur
[
i
].
u32PhyAddr
 - 
g_°BackGround
.u32PhyAddr));

325 
bShow
 = 
HI_TRUE
;

326 i‡(
	`io˘l
(
s32Fd
, 
FBIOPUT_SHOW_HIFB
, &
bShow
) < 0)

328 
	`Ârötf
 (
°dîr
, "Couldn't show fb\n");

329 
FB_PROCESS_ERROR2
;

332 
g_s32FømeNum
 = 0;

335 
u32Times
 = 0; u32Times < 20; u32Times++)

337 
	`cúcumrŸ©e
(
u32Times
 % 2);

338 
°V¨Info
.
yoff£t
 = (
u32Times
 % 2) ? 0 : 576;

341 i‡(
	`io˘l
(
s32Fd
, 
FBIOPAN_DISPLAY
, &
°V¨Info
) < 0)

343 
	`TDE_PRINT
("process frame buffer deviceÉrror\n");

344 
FB_PROCESS_ERROR2
;

347 
	`¶ìp
(1);

350 
s32Rë
 = 0;

352 
FB_PROCESS_ERROR2
:

353 
	`HI_MPI_SYS_MmzFªe
(
g_°BackGround
.
u32PhyAddr
, 
pu8BackGroundVú
);

354 
FB_PROCESS_ERROR1
:

355 
	`munm≠
(
pu8S¸ìn
, 
u32Size
);

356 
FB_PROCESS_ERROR0
:

357 
	`˛o£
(
s32Fd
);

358 
FB_OPEN_ERROR
:

359 
	`HI_TDE2_Clo£
();

361  
s32Rë
;

362 
	}
}

373 
	$maö
(
¨gc
, * 
¨gv
[])

375 
HI_S32
 
s32Rë
 = 0;

376 
VO_PUB_ATTR_S
 
°PubAâr
;

377 
VB_CONF_S
 
°VbC⁄f
;

379 i‡–(
¨gc
 < 2Ë|| (1 !
	`°æí
(
¨gv
[1])))

381 
	`SAMPLE_TDE_Ußge
(
¨gv
[0]);

382  
HI_FAILURE
;

385 
°PubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

386 
°PubAâr
.
íI¡fTy≥
 = 
VO_INTF_CVBS
;

387 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

389 i‡((
¨gc
 > 1Ë&& *
¨gv
[1] == '1')

391 
°PubAâr
.
íI¡fTy≥
 = 
VO_INTF_BT1120
;

392 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P60
;

395 
	`mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

396 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 16;

400 i‡(
HI_SUCCESS
 !
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
))

402 
SAMPLE_TDE_ERR0
;

404 i‡(
HI_SUCCESS
 !
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°PubAâr
))

406 
SAMPLE_TDE_ERR0
;

410 
s32Rë
 = 
	`TDE_DøwGøphicSam∂e
();

411 i‡(
s32Rë
 !
HI_SUCCESS
)

413 
SAMPLE_TDE_ERR1
;

416 
SAMPLE_TDE_ERR1
:

417 
	`SAMPLE_COMM_VO_St›Dev
(
VoDev
);

418 
SAMPLE_TDE_ERR0
:

419 
	`SAMPLE_COMM_SYS_Exô
();

421 
	}
}

	@sample/test_comm/MyCore.h

3 íum { 
	mFALSE
, 
	mTRUE
 } 
	tBoﬁ
;

7 
	mx
;

8 
	my
;

9 }
	tTPoöt
;

13 
	mù
[16];

14 
	mIPMask
[16];

15 
	mGayway
[16];

16 
TPoöt
 
	mp1
[2];

17 
TPoöt
 
	mp2
[2];

18 
TPoöt
 
	mp3
[2];

19 
TPoöt
 
	mp4
[2];

20 
	m™gñ
[2];

21 
	mwidth
;

22 
	mt1
,
	mt2
;

23 
TPoöt
 
	mpjs1
[2];

24 
TPoöt
 
	mpjs2
[2];

25 
	mwidthjs
;

26 
	mCamWidthjs
;

27 
	mYbegö
;

28 
	mYíd
;

29 
	mTtimejs
;

31 
TPoöt
 
	mp5
[2];

32 
TPoöt
 
	mp6
[2];

33 
TPoöt
 
	mp7
[2];

34 
TPoöt
 
	mp8
[2];

35 
	mXueShígSètus
;

36 
	mJSBK
;

37 
	mUpDownMode
;

38 } 
	tTSëtög
;

42 
	mx
[2];

43 
	mw
[2];

44 
	mid
;

45 }
	tTBlob
;

49 
	mx1
;

50 
	mx2
;

51 
	mps
;

52 }
	tTBlobShow
;

56 
	mx
;

57 
	mw
;

58 
	mid
;

59 }
	tTBlobSim∂e
;

63 
	m¨c
[4];

64 
	mnum
;

65 }
	tTArcSim∂e
;

69 
	mpoöäum
;

70 
	mx1
[2];

71 
	mx2
[2];

72 }
	tTPoötResu…
;

	@sample/test_comm/mytrace.c

4 
	~"myåa˚.h
"

7 
	$¥o˚ss
(
UINT8
 *
img´
)

10 
	}
}

	@sample/test_comm/mytrace.h

1 #i‚de‡
__MYTRACE_H


2 
	#__MYTRACE_H


	)

4 
	tUINT8
;

5 
¥o˚ss
(
UINT8
 *
img´
);

	@sample/test_comm/teacher.c

2 
	~"ãachî.h
"

5 
	gg_js
[4];

8 
	gJSgFømeCou¡î
;

9 
UINT8
 
	gJSFømeDif
[2][
TWIDTH
*
THEIGHT
];

10 
UINT8
 
	gJSFømeBKTemp
[2*10][
TWIDTH
*100];

11 
UINT8
 
	gJSFømeBK
[2][
TWIDTH
*
THEIGHT
];

13 
UINT8
 
	gJSFømeTmp
[
TWIDTH
*
THEIGHT
];

15 
UINT8
 *
	gJSpFømeCur
[2];

17 
TSëtög
 
	g£t
;

19 
	gJSProX
[2*
JSTARGETCOUNT
][
TWIDTH
];

20 
	gJSProXDif
[2*
JSTARGETCOUNT
][
TWIDTH
];

21 
	gJSProXSobñ
[2][
TWIDTH
];

22 
	gJSProXSobñLow
[2][
TWIDTH
];

24 
TPoöt
 
	gJSAngÀPoöt
[2][2];

25 
	gJSbMyTe°Fú°
=1;

27 
	gJSg_X
[2]={0,0};

28 
	gJSg_X2
[2]={0,0};

29 
	gJSgT¨gëCou¡îNow
;

32 
TBlob
 
	gJSg_Blob
[
BLOBNUM
];

33 
	gJSg_BlobCou¡î
=0;

34 
	gJSbGëBackGround
[2];

35 
	gJSg_GëBGCou¡
[2][
TWIDTH
];

36 
TBlob
 
	gJSg_BlobTemp
[
BLOBNUM
];

37 
TBlob
 
	gJSg_BlobTempLa°
[
BLOBNUM
];

39 
TBlobShow
 
	gJSg_BlobShow
[2][
BLOBNUM
];

40 
	gJSg_BlobShowCou¡
[2];

42 
	gJSg_BGStudyCou¡
[2];

45 
	gJSy_up
,
	gJSy_down
,
	gJSx_À·
,
	gJSx_right
;

46 
	gJSX_Width
[2];

47 
	gJSwidthjs
;

48 
	gJSMöT¨gëWidth
;

50 
	gJSFú°FödObje˘
;

52 
	gJST¨gëOutWaôögCou¡
;

53 
	gJSg_XLa°
[2];

54 
	gJSg_X2La°
[2];

55 
Boﬁ
 
	gJSb_FödT¨gëAndOutC‹
;

57 
	gJSGëRólXY_X
[2];

58 
	gJSg_BGMask
[2][
TWIDTH
];

59 
	gJSg_M‹eT¨gëBGRe£tCou¡
;

60 
	gJSTtime
=0;

65 
	gJSg_NoCh™geS∂ô
[2][
SPLITNUM
];

66 
	gJSg_NoCh™geS∂ôMax
[2][
SPLITNUM
];

67 
	gJSg_S∂ôHaveT¨gë
[2][
SPLITNUM
];

68 
	gJSg_S∂ôHaveT¨gëDif
[2][
SPLITNUM
];

69 
	gJSg_S∂ôGëBackGround
[2][
SPLITNUM
];

71 
	gJSg_NoCh™geS∂ôCou¡îWôhT¨gë
[2][
SPLITNUM
];

72 
	gJSg_DifX1
[2],
	gJSg_DifX2
[2];

73 
	gJSBlobCou¡î
[2];

75 
TPoötResu…
 
	gJSX_Aºay
[
COORNUM
];

76 
	gJSgFømeO√Two
;

80 
	$OsdRe˘2
(*
pD©a
,
hei
,
wid
,
x1
,
x2
,
y1
,
y2
,
ps
)

82 
i
,
j
,
k
,
m
,
n
;

85 
	`mem£t
(
pD©a
+
y1
*
wid
+
x1
,
ps
,
x2
-x1+1);

86 
	`mem£t
(
pD©a
+
y2
*
wid
+
x1
,
ps
,
x2
-x1+1);

88 
m
=
y1
;m<
y2
;m++)

90 *(
pD©a
+
m
*
wid
+
x1
)=
ps
;

91 *(
pD©a
+
m
*
wid
+
x2
)=
ps
;

93 
	}
}

95 
	gIMG_sobñ


97 
UINT8
 *
	gö
,

98 
UINT8
 *
	gout
,

99 
	gcﬁs
, 
	grows


102 
	gH
, 
	gO
, 
	gV
, 
	gi
;

103 
	gi00
, 
	gi01
, 
	gi02
;

104 
	gi10
, 
	gi12
;

105 
	gi20
, 
	gi21
, 
	gi22
;

106 
	gw
 = 
cﬁs
;

111 
	gi
 = 0; i < 
	gcﬁs
*(
	grows
-2) - 2; i++)

116 
	gi00
=
ö
[
i
 ]; 
	gi01
=ö[ò+1]; 
	gi02
=in[i +2];

117 
	gi10
=
ö
[
i
+ 
w
]; 
	gi12
=in[i+ w+2];

118 
	gi20
=
ö
[
i
+2*
w
]; 
	gi21
=ö[i+2*w+1]; 
	gi22
=in[i+2*w+2];

125 
	gH
 = - 
i00
 - 2*
i01
 - 
i02
 +

126 + 
i20
 + 2*
i21
 + 
i22
;

128 
	gV
 = - 
i00
 + 
i02


129 - 2*
i10
 + 2*
i12


130 - 
i20
 + 
i22
;

132 
	gO
 = 
abs
(
H
Ë+ábs(
V
);

138 i‡(
	gO
 > 255) O = 255;

143 
	gout
[
i
 + 1] = 
O
;

152 
	$SmoŸhGauss
(*
pImageD©a
, 
nWidth
, 
nHeight
, 
nWidthSãp
)

154 
i
 = 0;

155 
j
 = 0;

156 
nVÆue
 = 0;

157 *
pLöe
[3] = { 
NULL
, NULL, NULL };

158 
nTem∂©e
[9] =

164 
j
 = 1; j < 
nHeight
 - 1; j++)

166 
pLöe
[0] = 
pImageD©a
 + 
nWidthSãp
 * (
j
 - 1);

167 
pLöe
[1] = 
pImageD©a
 + 
nWidthSãp
 * 
j
;

168 
pLöe
[2] = 
pImageD©a
 + 
nWidthSãp
 * (
j
 + 1);

169 
i
 = 1; i < 
nWidth
 - 1; i++)

171 
nVÆue
 =

172 (
pLöe
[0][
i
-1] * 
nTem∂©e
[0] +

173 
pLöe
[0][
i
] * 
nTem∂©e
[1] +

174 
pLöe
[0][
i
+1] * 
nTem∂©e
[2] +

175 
pLöe
[1][
i
-1] * 
nTem∂©e
[3] +

176 
pLöe
[1][
i
] * 
nTem∂©e
[4] +

177 
pLöe
[1][
i
+1] * 
nTem∂©e
[5] +

178 
pLöe
[2][
i
-1] * 
nTem∂©e
[6] +

179 
pLöe
[2][
i
] * 
nTem∂©e
[7] +

180 
pLöe
[2][
i
+1] * 
nTem∂©e
[8]) / 16;

181 
pLöe
[0][
i
-1] = (Ë
nVÆue
;

185 
	}
}

187 
	$Upd©eBackGround
(
UINT8
* 
pCur
,UINT8* 
pBK
,
xl
,
xr
,
yu
,
yd
,
fudu
)

189 
i
,
j
,
k
;

190 if(
fudu
==0)

192 
j
=
yu
;j<
yd
;j++)

193 
i
=
xl
;i<
xr
;i++)

195 
pBK
[
j
*
TWIDTH
+
i
]=
pCur
[j*TWIDTH+i];

200 
j
=
yu
;j<
yd
;j++)

201 
i
=
xl
;i<
xr
;i++)

203 
k
=
pCur
[
j
*
TWIDTH
+
i
]-
pBK
[j*TWIDTH+i];

204 if(
k
>0)

208 
pBK
[
j
*
TWIDTH
+
i
]++;

210 if(
k
<0)

212 
pBK
[
j
*
TWIDTH
+
i
]--;

216 
	}
}

218 
	$JSCÀ¨BlobShow
()

220 
JSg_BlobShowCou¡
[0]=0;

221 
JSg_BlobShowCou¡
[1]=0;

222 
	}
}

224 
	$JSAddBlobShow
(
iFøme
,
x1
,
x2
,
ps
)

226 if((
iFøme
<0)||(iFrame>1)) ;

227 if(
JSg_BlobShowCou¡
[
iFøme
]>=
BLOBNUM
) ;

229 
JSg_BlobShow
[
iFøme
][
JSg_BlobShowCou¡
[iFøme]].
x1
=x1;

230 
JSg_BlobShow
[
iFøme
][
JSg_BlobShowCou¡
[iFøme]].
x2
=x2;

231 
JSg_BlobShow
[
iFøme
][
JSg_BlobShowCou¡
[iFøme]++].
ps
=ps;

232 
	}
}

234 
	$JSGëLa°Cou¡î
(
cc
)

236 if(
cc
==0)

237  
JSTARGETCOUNT
-1;

239  
cc
-1;

240 
	}
}

242 
	$JSRunNextCou¡î
()

244 
JSgT¨gëCou¡îNow
++;

245 if(
JSgT¨gëCou¡îNow
>=
JSTARGETCOUNT
)

246 
JSgT¨gëCou¡îNow
=0;

247 
	}
}

249 
	$JSPutCo‹
()

251 
i
;

252 
i
=0;i<
COORNUM
-1;i++)

254 
JSX_Aºay
[
i
]=JSX_Array[i+1];

256 
JSX_Aºay
[
i
].
poöäum
=
JSg_BlobCou¡î
;

257 
JSX_Aºay
[
i
].
x1
[0]=
JSg_X
[0];

258 
JSX_Aºay
[
i
].
x1
[1]=
JSg_X
[1];

259 
JSX_Aºay
[
i
].
x2
[0]=
JSg_X2
[0];

260 
JSX_Aºay
[
i
].
x2
[1]=
JSg_X2
[1];

261 
	}
}

263 
	$JSOuçut
()

265 
i
;

266 
⁄e
,
Æl
,
two
,
x¢um
,
zîo
;

267 
xcou¡1
,
xcou¡2
;

268 
j¶a°
[2]={0,0};

269 
i
=0;i<4;i++)

271 
g_js
[
i
]=0;

274 
⁄e
=0;
Æl
=0;
two
=0;
x¢um
=0;
zîo
=0;

275 
xcou¡1
=0;
xcou¡2
=0;

276 
i
=10;i<
COORNUM
;i++)

278 if(
JSX_Aºay
[
i
].
poöäum
==1)

280 
⁄e
++;

281 
xcou¡1
+=
JSX_Aºay
[
i
].
x1
[0];

286 if(
JSX_Aºay
[
i
].
poöäum
==2)

287 
two
++;

289 if(
JSX_Aºay
[
i
].
poöäum
==0)

290 
zîo
++;

292 
Æl
++;

297 if(
⁄e
>
Æl
)

299 
xcou¡1
 = xcou¡1/
⁄e
;

301 
g_js
[0] = 
xcou¡1
;

302 if(
j¶a°
[0]>0)

304 if(
	`abs
(
xcou¡1
-
j¶a°
[0])<1 )

306 
g_js
[0] = 
j¶a°
[0];

314 
g_js
[0] = 0;

315 
g_js
[1] = 0;

316 
g_js
[2] = 200;

317 
g_js
[3] = 200;

324 
j¶a°
[0]=
g_js
[0];

325 
j¶a°
[1]=
g_js
[1];

326 
	}
}

328 
	$JSCheckRólT¨gëBySobñLow
(
FømeNo
,
xÀ·
,
xright
,
x1
,
x2
)

330 
i
,
w
=10,
ªsu…
=0;

331 
xx1
=(
x1
-
w
)>
xÀ·
?(x1-w):xleft;

332 
xx2
=(
x2
+
w
)>(
xright
-1)?(xright-1):(x2+w);

333 
i
=
xx1
;i<
xx2
;i++)

335 if(
JSProXSobñLow
[
FømeNo
][
i
]>2)

337 
ªsu…
=1;;

340  
ªsu…
;

341 
	}
}

344 
	$JSGëRe˘C‹
(
FømeNo
)

346 
JSy_up
=
JSAngÀPoöt
[
FømeNo
][0].
y
;

347 
JSy_down
=
JSAngÀPoöt
[
FømeNo
][1].
y
;

348 
JSx_À·
=
JSAngÀPoöt
[
FømeNo
][0].
x
;

349 
JSx_right
=
JSAngÀPoöt
[
FømeNo
][1].
x
;

350 
	}
}

353 
	$JSCÀ¨S∂ôHaveT¨gë
(
FømeNo
)

355 
j
;

356 
j
=0;j<
SPLITNUM
;j++)

357 
JSg_S∂ôHaveT¨gë
[
FømeNo
][
j
]=0;

358 
	}
}

360 
	$JSSëS∂ôHaveT¨gë
(
FømeNo
,
xÀ·
,
xright
,
x1
,
x2
)

363 
j
;

364 
icou¡1
 = (
x1
-
xÀ·
)/
SPLITWIDTH
;

365 
icou¡2
 = (
x2
-
xÀ·
)/
SPLITWIDTH
;

367 
j
=
icou¡1
;j<=
icou¡2
;j++)

369 
JSg_S∂ôHaveT¨gë
[
FømeNo
][
j
]=1;

371 
	}
}

373 
	$JSCÀ¨S∂ôHaveT¨gëDif
(
FømeNo
)

375 
j
;

376 
j
=0;j<
SPLITNUM
;j++)

377 
JSg_S∂ôHaveT¨gëDif
[
FømeNo
][
j
]=0;

378 
	}
}

380 
	$JSSëS∂ôHaveT¨gëDif
(
FømeNo
,
xÀ·
,
xright
,
x1
,
x2
)

382 
j
;

383 
icou¡1
 = (
x1
-
xÀ·
)/
SPLITWIDTH
;

384 
icou¡2
 = (
x2
-
xÀ·
)/
SPLITWIDTH
;

385 
j
=
icou¡1
;j<=
icou¡2
;j++)

387 
JSg_S∂ôHaveT¨gëDif
[
FømeNo
][
j
]=1;

389 
	}
}

391 
	$JSInôP¨a
()

393 
j
,
k
;

398 
JSAngÀPoöt
[0][0].
x
=
£t
.
pjs1
[0].x;JSAngÀPoöt[0][0].
y
=set.pjs1[0].y;

399 
JSAngÀPoöt
[0][1].
x
=
£t
.
pjs1
[1].x;JSAngÀPoöt[0][1].
y
=set.pjs1[1].y;

403 if(
JSAngÀPoöt
[0][0].
y
<0||JSAngÀPoöt[0][0].y>(
THEIGHT
-1)||JSAnglePoint[0][1].y<0||JSAnglePoint[0][1].y>(THEIGHT-1)||JSAnglePoint[0][0].y>JSAnglePoint[0][1].y);

411 if(
£t
.
CamWidthjs
<=0 )

412 
JSMöT¨gëWidth
=20;

414 
JSMöT¨gëWidth
=
£t
.
CamWidthjs
;

416 if(
£t
.
widthjs
<=0 )

417 
JSwidthjs
=100;

419 
JSwidthjs
=
£t
.
widthjs
;

422 if(
£t
.
Ttimejs
<=0 )

423 
JSTtime
=10;

425 
JSTtime
=
£t
.
Ttimejs
;

428 
JSbMyTe°Fú°
=0;

430 
JSg_BlobCou¡î
=0;

431 
JSgT¨gëCou¡îNow
=0;

432 
JSFú°FödObje˘
=0;

433 
JSg_M‹eT¨gëBGRe£tCou¡
=0;

434 
JST¨gëOutWaôögCou¡
=0;

435 
JSgFømeCou¡î
=0;

437 
k
=0;k<
COORNUM
;k++)

439 
JSX_Aºay
[
k
].
poöäum
=0;

440 
JSX_Aºay
[
k
].
x1
[0]=0;

441 
JSX_Aºay
[
k
].
x1
[1]=0;

442 
JSX_Aºay
[
k
].
x2
[0]=0;

443 
JSX_Aºay
[
k
].
x2
[1]=0;

450 
k
=0;k<1;k++)

456 
j
=0;j<
BLOBNUM
;j++)

459 
JSg_Blob
[
j
].
w
[
k
]=0;JSg_Blob[j].
x
[k]=0;JSg_Blob[j].
id
=0;

462 
j
=0;j<
BLOBNUM
;j++)

465 
JSg_BlobTempLa°
[
j
].
w
[
k
]=0;JSg_BlobTempLa°[j].
x
[k]=0;JSg_BlobTempLa°[j].
id
=0;

469 
	`JSGëRe˘C‹
(
k
);

470 
JSX_Width
[
k
]=
JSx_right
-
JSx_À·
;

472 
JSg_BGStudyCou¡
[
k
]=720;

474 
JSg_DifX1
[
k
]=0;

475 
JSg_DifX2
[
k
]=0;

476 
j
=0;j<
SPLITNUM
;j++)

478 
JSg_NoCh™geS∂ô
[
k
][
j
]=0;

479 
JSg_NoCh™geS∂ôMax
[
k
][
j
]=0;

480 
JSg_S∂ôHaveT¨gë
[
k
][
j
]=0;

481 
JSg_S∂ôHaveT¨gëDif
[
k
][
j
]=0;

482 
JSg_S∂ôGëBackGround
[
k
][
j
]=0;

484 
JSg_NoCh™geS∂ôCou¡îWôhT¨gë
[
k
][
j
]=0;

499 
	}
}

501 
	$JSPªCål
(
‰amíum
)

503 
i
,
j
,
k
,
m
,
n
;

504 
thvÆue
;

506 
UINT8
 *
pImageCur
,*
pImageBK
,*
pImageBKTemp
;

512 
k
=0;k<1;k++)

515 
m
=
k
;

516 
	`mem£t
(
JSProX
[
m
],0,()*
TWIDTH
);

517 
	`mem£t
(
JSProXDif
[
m
],0,()*
TWIDTH
);

518 
	`mem£t
(
JSProXSobñ
[
k
],0,()*
TWIDTH
);

519 
	`mem£t
(
JSProXSobñLow
[
k
],0,()*
TWIDTH
);

521 
pImageCur
=
JSpFømeCur
[
k
];

522 
pImageBK
=
JSFømeBK
[
k
];

524 
thvÆue
=25;

526 
	`JSGëRe˘C‹
(
k
);

529 
	`SmoŸhGauss
(
pImageCur
+(
JSy_up
-1)*
TWIDTH
,TWIDTH,
JSy_down
-JSy_up+2,TWIDTH);

532 
j
=
JSy_up
;j<
JSy_down
;j++)

535 
i
=
JSx_À·
;i<
JSx_right
;i++)

538 if(
	`abs
(
pImageCur
[
j
*
TWIDTH
+
i
]-
pImageBK
[j*TWIDTH+i])>
thvÆue
)

540 
JSProX
[
m
][
i
]++;

545 if(
JSgFømeCou¡î
==0)

546 
pImageBKTemp
=
JSFømeBKTemp
[2*9+
k
];

548 
pImageBKTemp
=
JSFømeBKTemp
[2*(
JSgFømeCou¡î
-1)+
k
];

549 
j
=
JSy_up
;j<
JSy_down
;j++)

552 
i
=
JSx_À·
;i<
JSx_right
;i++)

555 if(
	`abs
(
pImageCur
[
j
*
TWIDTH
+
i
]-
pImageBKTemp
[(j-
JSy_up
)*TWIDTH+i])>20)

557 
JSProXDif
[
m
][
i
]++;

563 
	`IMG_sobñ
(
pImageCur
+
JSy_up
*
TWIDTH
,
JSFømeTmp
+JSy_up*TWIDTH,TWIDTH,
JSy_down
-JSy_up);

565 
j
=
JSy_up
;j<
JSy_down
-2;j++)

567 
i
=
JSx_À·
;i<
JSx_right
;i++)

569 if(
JSFømeTmp
[
j
*
TWIDTH
+
i
]>50)

571 
JSProXSobñ
[
k
][
i
]++;

573 if(
JSFømeTmp
[
j
*
TWIDTH
+
i
]>30)

575 
JSProXSobñLow
[
k
][
i
]++;

581 
pImageBKTemp
=
JSFømeBKTemp
[2*
JSgFømeCou¡î
+
k
];

582 
j
=
JSy_up
;j<
JSy_down
;j++)

583 
i
=
JSx_À·
;i<
JSx_right
;i++)

586 
pImageBKTemp
[(
j
-
JSy_up
)*
TWIDTH
+
i
]=
pImageCur
[j*TWIDTH+i];

589 if(
‰amíum
==8)

591 
	`Upd©eBackGround
(
pImageCur
,
pImageBK
,
JSx_À·
,
JSx_right
,
JSy_up
,
JSy_down
,0);

595 
JSgFømeCou¡î
++;

596 if(
JSgFømeCou¡î
>9)JSgFrameCounter=0;

597 
	}
}

599 
	$JSFödT¨gë
()

601 
i
,
j
,
k
,
w
,
id
,
p
,
pmax
;

602 
bFödNextBlob
;

603 
UINT8
 *
pImageCur
,*
pImageBK
,*
pImageBKTemp
;

605 
HeiVÆid
=2;

607 
k
=0;k<1;k++)

609 
j
=0;j<
BLOBNUM
;j++)

611 
JSg_BlobTemp
[
j
].
x
[
k
]=0;JSg_BlobTemp[j].
w
[k]=0;

613 
pImageCur
=
JSpFømeCur
[
k
];

614 
pImageBK
=
JSFømeBK
[
k
];

616 
	`JSGëRe˘C‹
(
k
);

619 
HeiVÆid
 = (
JSy_down
-
JSy_up
)*3/10;

620 
JSBlobCou¡î
[
k
]=0;

621 
i
=
JSx_À·
;i<
JSx_right
;i++)

623 if(
JSProX
[
k
][
i
]>
HeiVÆid
)

625 
JSg_BlobTemp
[
JSBlobCou¡î
[
k
]].
x
[k]=
i
-
JSx_À·
;

626 
i
++;i<
JSx_right
;i++)

628 if(
JSProX
[
k
][
i
]<
HeiVÆid
)

631 
bFödNextBlob
=0;

632 
pmax
 = (
i
+30)>
JSx_right
?JSx_right:(i+30);

633 
p
=
i
+1;p<
pmax
;p++)

635 if(
JSProX
[
k
][
p
]>
HeiVÆid
)

637 
bFödNextBlob
=1;;

640 if(
bFödNextBlob
==0)

644 if(
i
-
JSx_À·
-
JSg_BlobTemp
[
JSBlobCou¡î
[
k
]].
x
[k] > 4)

647 if(
	`JSCheckRólT¨gëBySobñLow
(
k
,
JSx_À·
,
JSx_right
,
JSg_BlobTemp
[
JSBlobCou¡î
[k]].
x
[k],
i
)>0)

649 
JSg_BlobTemp
[
JSBlobCou¡î
[
k
]].
w
[k]=
i
-
JSx_À·
-JSg_BlobTemp[JSBlobCou¡î[k]].
x
[k];

650 
JSBlobCou¡î
[
k
]++;

654 
	`Upd©eBackGround
(
pImageCur
,
pImageBK
,
JSg_BlobTemp
[
JSBlobCou¡î
[
k
]].
x
[k],
i
,
JSy_up
,
JSy_down
,1);

660 
i
=
p
;

663 if(
i
==
JSx_right
)

665 
JSg_BlobTemp
[
JSBlobCou¡î
[
k
]].
w
[k]=
JSx_right
-
JSx_À·
-JSg_BlobTemp[JSBlobCou¡î[k]].
x
[k];

666 
JSBlobCou¡î
[
k
]++;

669 if(
JSBlobCou¡î
[
k
]>=
BLOBNUM
)

675 
	`JSCÀ¨S∂ôHaveT¨gë
(
k
);

677 if(
JSBlobCou¡î
[
k
]==0)

679 
j
=0;j<
BLOBNUM
;j++)

681 
JSg_BlobTempLa°
[
j
].
x
[
k
]=-1;

682 
JSg_BlobTempLa°
[
j
].
w
[
k
]=-1;

695 
j
=0;j<
BLOBNUM
;j++)

697 
JSg_BlobTempLa°
[
j
].
x
[
k
]=-1;

698 
JSg_BlobTempLa°
[
j
].
w
[
k
]=-1;

700 
j
=0;j<
JSBlobCou¡î
[
k
];j++)

702 
xx1
=
JSg_BlobTemp
[
j
].
x
[
k
]+
JSx_À·
;

703 
xx2
=
JSg_BlobTemp
[
j
].
x
[
k
]+
JSx_À·
+JSg_BlobTemp[j].
w
[k];

705 
JSg_BlobTempLa°
[
j
].
x
[
k
]=
JSg_BlobTemp
[j].x[k];

706 
JSg_BlobTempLa°
[
j
].
w
[
k
]=
JSg_BlobTemp
[j].w[k];

709 
	`JSSëS∂ôHaveT¨gë
(
k
,
JSx_À·
,
JSx_right
,
xx1
,
xx2
);

724 
	}
}

726 
	$JSCheckT¨gë
()

728 
i
,
j
,
k
,
n
;

731 if(
JSBlobCou¡î
[0]==0)

733 
JSg_BlobCou¡î
=0;

735 if(
JSBlobCou¡î
[0]==1)

737 
JSg_Blob
[0]=
JSg_BlobTemp
[0];

738 
JSg_BlobCou¡î
=1;

742 
JSg_Blob
[0]=
JSg_BlobTemp
[0];

743 
JSg_Blob
[1]=
JSg_BlobTemp
[1];

744 
JSg_BlobCou¡î
=2;

752 
	}
}

754 
	$JSUpd©eImage
()

756 
i
,
j
,
k
,
icou¡
;

757 
DisX1
,
DisX2
;

758 
ûe·
,
úight
;

759 
iFudu
,
iPölv
;

760 
UINT8
 *
pImageCur
,*
pImageBK
;

761 
k
=0;k<1;k++)

763 
pImageCur
=
JSpFømeCur
[
k
];

764 
pImageBK
=
JSFømeBK
[
k
];

765 
	`JSGëRe˘C‹
(
k
);

768 
	`JSCÀ¨S∂ôHaveT¨gëDif
(
k
);

769 
DisX1
=0;
DisX2
=0;

770 
i
=
JSx_À·
;i<
JSx_right
;i++)

772 if(
JSProXDif
[
k
][
i
]>1)

774 
DisX1
 = 
i
;

777 
i
=
JSx_right
-1;i>=
JSx_À·
;i--)

779 if(
JSProXDif
[
k
][
i
]>1)

781 
DisX2
 = 
i
;

784 if(
DisX1
>0 && 
DisX2
>0)

786 
JSg_DifX1
[
k
] = (
DisX1
-5)<
JSx_À·
?JSx_left:(DisX1-5);

787 
JSg_DifX2
[
k
] = (
DisX2
+5)>(
JSx_right
-1)?(JSx_right-1):(DisX2+5);

788 
	`JSSëS∂ôHaveT¨gëDif
(
k
,
JSx_À·
,
JSx_right
,
JSg_DifX1
[k],
JSg_DifX2
[k]);

797 
icou¡
 = (
JSx_right
-
JSx_À·
)/
SPLITWIDTH
;

798 
j
=0;j<=
icou¡
;j++)

800 
JSg_NoCh™geS∂ô
[
k
][
j
]++;

801 
JSg_NoCh™geS∂ôMax
[
k
][
j
]++;

802 
ûe·
 = 
JSx_À·
+
SPLITWIDTH
*
j
;

803 
úight
 = (
JSx_À·
+
SPLITWIDTH
*(
j
+1))>
JSx_right
?JSx_right:(JSx_left+SPLITWIDTH*(j+1));

804 
i
=
ûe·
; i<
úight
; i++)

806 if(
JSProXDif
[
k
][
i
]>1)

808 
JSg_NoCh™geS∂ô
[
k
][
j
]=0;

809 
JSg_NoCh™geS∂ôMax
[
k
][
j
]=0;

816 if(
JSg_S∂ôGëBackGround
[
k
][
j
]==0)

818 
iFudu
=2;
iPölv
=20;

822 
iFudu
=0;
iPölv
=20;

827 if(
JSg_NoCh™geS∂ô
[
k
][
j
]>500 && 
JSg_S∂ôGëBackGround
[k][j]==0)

829 
	`Upd©eBackGround
(
pImageCur
,
pImageBK
,
ûe·
,
úight
,
JSy_up
,
JSy_down
,0);

830 
JSg_NoCh™geS∂ô
[
k
][
j
]=0;

833 if(
JSg_NoCh™geS∂ô
[
k
][
j
]>500 && 
JSg_S∂ôGëBackGround
[k][j]==1)

835 
	`Upd©eBackGround
(
pImageCur
,
pImageBK
,
ûe·
,
úight
,
JSy_up
,
JSy_down
,1);

836 
JSg_NoCh™geS∂ô
[
k
][
j
]=10;

840 if(
JSg_S∂ôGëBackGround
[
k
][
j
]==0 && 
JSg_NoCh™geS∂ôMax
[k][j]>1000)

842 
JSg_S∂ôGëBackGround
[
k
][
j
]=1;

854 if(
JSg_S∂ôHaveT¨gë
[
k
][
j
]>0 && 
JSg_NoCh™geS∂ô
[k][j]>0)

856 
JSg_NoCh™geS∂ôCou¡îWôhT¨gë
[
k
][
j
]++;

860 
JSg_NoCh™geS∂ôCou¡îWôhT¨gë
[
k
][
j
]=0;

862 if(
JSg_NoCh™geS∂ôCou¡îWôhT¨gë
[
k
][
j
]>1500)

864 
	`Upd©eBackGround
(
pImageCur
,
pImageBK
,
ûe·
,
úight
,
JSy_up
,
JSy_down
,0);

865 
JSg_NoCh™geS∂ôCou¡îWôhT¨gë
[
k
][
j
]=0;

879 
icou¡
=0;

880 
k
=0;k<1;k++)

882 
j
=0;j<
SPLITNUM
;j++)

884 if(
JSg_S∂ôHaveT¨gëDif
[
k
][
j
]>0 && 
JSg_S∂ôHaveT¨gë
[k][j]>0)

885 
icou¡
++;

888 if(
icou¡
>0)

890 
k
=0;k<1;k++)

892 
j
=0;j<
SPLITNUM
;j++)

894 if(
JSg_S∂ôHaveT¨gëDif
[
k
][
j
]==0 && 
JSg_S∂ôHaveT¨gë
[k][j]>0)

896 if(
JSg_S∂ôGëBackGround
[
k
][
j
]>0)

898 
JSg_NoCh™geS∂ô
[
k
][
j
]+=100;

899 
JSg_NoCh™geS∂ôMax
[
k
][
j
]+=100;

903 
JSg_NoCh™geS∂ô
[
k
][
j
]+=20;

904 
JSg_NoCh™geS∂ôMax
[
k
][
j
]+=20;

919 
	}
}

921 
	$JSGëRólXY
(
x1
)

923 
JSGëRólXY_X
[0]=100*
x1
/
JSX_Width
[0];

924 
JSGëRólXY_X
[1]=1;

925 
	}
}

927 
	$JSRecognize
()

929 
x1
,
x2
,
x3
=0,
x4
=0;

930 
UINT8
 *
pImageCur
=
JSpFømeCur
[0];

932 if(
JSg_BlobCou¡î
>0)

934 
	`JSGëRe˘C‹
(0);

935 
x1
=
JSg_Blob
[0].
x
[0]+JSg_Blob[0].
w
[0]/2;

936 if(
JSg_BlobCou¡î
>1)

937 
x3
=
JSg_Blob
[1].
x
[0]+JSg_Blob[1].
w
[0]/2;

939 
	`JSGëRólXY
(
x1
);

944 
JSg_X
[0]=
JSGëRólXY_X
[0];JSg_X[1]=JSGetRealXY_X[1];

946 if(
JSg_BlobCou¡î
>1)

948 
	`JSGëRólXY
(
x3
);

949 
JSg_X2
[0]=
JSGëRólXY_X
[0];JSg_X2[1]= JSGetRealXY_X[1];

951 if((
JSg_X
[0]==0)&&(
JSg_X2
[0]>0))

953 
JSg_X
[0]=
JSg_X2
[0];JSg_X[1]=JSg_X2[1];

954 
JSg_X2
[0]=0;JSg_X2[1]=0;

959 
JSFú°FödObje˘
=1;

966 
	}
}

968 
Boﬁ
 
	$JSCheckT¨gëOutWaôög
()

970 if(
JSFú°FödObje˘
==0)

971  
FALSE
;

972 if(
JSb_FödT¨gëAndOutC‹
)

974 
JST¨gëOutWaôögCou¡
=0;

975 
JSg_XLa°
[0]=
JSg_X
[0];

976 
JSg_XLa°
[1]=
JSg_X
[1];

977 
JSg_X2La°
[0]=
JSg_X2
[0];

978 
JSg_X2La°
[1]=
JSg_X2
[1];

979  
TRUE
;

983 
JST¨gëOutWaôögCou¡
++;

984 if(
JST¨gëOutWaôögCou¡
<10*1)

986 
JSg_X
[0]=
JSg_XLa°
[0];

987 
JSg_X
[1]=
JSg_XLa°
[1];

988 
JSg_X2
[0]=
JSg_X2La°
[0];

989 
JSg_X2
[1]=
JSg_X2La°
[1];

990  
TRUE
;

993  
FALSE
;

995 
	}
}

997 
	$JSFödNórBlobNo
(
TBlob
 
AºayBlob
[],
BlobNum
,TBlob 
ﬁdBlob
,
Cﬁ
)

999 
j
,
mö
,
ﬁd
,
föd
,
ªs
;

1000 
ﬁd
=
ﬁdBlob
.
x
[
Cﬁ
]+ﬁdBlob.
w
[Col]/2;

1001 
mö
=
AºayBlob
[0].
x
[
Cﬁ
]+AºayBlob[0].
w
[Cﬁ]/2;
ªs
=0;

1002 
j
=1;j<
BlobNum
;j++)

1004 
föd
=
AºayBlob
[
j
].
x
[
Cﬁ
]+AºayBlob[j].
w
[Col]/2;

1005 if(
	`abs
(
ﬁd
-
föd
)<abs(ﬁd-
mö
))

1007 
mö
=
föd
;

1008 
ªs
=
j
;

1013  
ªs
;

1014 
	}
}

1016 
	$JSSë∑øm
(
x1
,
y1
,
x2
,
y2
)

1018 
£t
.
pjs1
[0].
x
 = 
x1
; së.pjs1[0].
y
 = 
y1
;

1019 
£t
.
pjs1
[1].
x
 = 
x2
; së.pjs1[1].
y
 = 
y2
;

1020 
JSbMyTe°Fú°
 = 1;

1021 
	}
}

1025 * 
	$JSMyTe°
(
UINT8
 *
pFøme
,*
°r
)

1027 
JSVideoNo
=1;

1029 
JSg_X
[0]=0,JSg_X[1]=0;
JSg_X2
[0]=0;JSg_X2[1]=0;
JSb_FödT¨gëAndOutC‹
=
FALSE
;

1030 
JSpFømeCur
[0]=
pFøme
;

1031 
JSpFømeCur
[1]=
pFøme
+
TWIDTH
*
THEIGHT
;

1032 if(
JSbMyTe°Fú°
)

1034 
JSbMyTe°Fú°
 = 0;

1035 
	`JSInôP¨a
();

1036 
JSg_X
[0]=0,JSg_X[1]=0;

1037 
JSVideoNo
=0;

1038  
NULL
;

1043 
JSVideoNo
++;

1044 
	`JSPªCål
(
JSVideoNo
);

1046 if(
JSVideoNo
<30)

1047  
NULL
;

1049 
JSVideoNo
=100;

1051 
	`JSFödT¨gë
();

1053 
	`JSCheckT¨gë
();

1057 
	`JSUpd©eImage
();

1061 
	`JSRecognize
();

1071 if((
JSVideoNo
<2000Ë&& (
JSg_BlobCou¡î
>1)){

1072 
JSg_BlobCou¡î
=1;

1073 if((
JSg_X
[0]>0Ë&& (
JSg_X2
[0]>0)){

1074 if(
	`abs
(
g_js
[0]-
JSg_X
[0])>abs(g_js[0]-
JSg_X2
[0])){

1075 
JSg_X
[0]=
JSg_X2
[0];

1078 
JSg_X2
[0]=0;JSg_X2[1]=0;

1081 
	`JSPutCo‹
();

1082 
	`JSOuçut
();

1084 
	`•rötf
(
°r
,"%d,%d",
g_js
[0],
JSg_BlobCou¡î
);

1085  
°r
;

1086 
	}
}

	@sample/test_comm/teacher.h

2 
	~"m©h.h
"

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~"MyC‹e.h
"

9 
	#UINT8
 

	)

10 
	#TWIDTH
 720

	)

11 
	#THEIGHT
 576

	)

12 
	#TWIDTHUV
 360

	)

13 
	#BLOBNUM
 4

	)

14 
	#COORNUM
 20

	)

17 
	#SPLITNUM
 10

	)

18 
	#SPLITWIDTH
 100

	)

20 
	#JSTARGETCOUNT
 5

	)

22 
	#JSONEWITTH
 50

23 

	)

24 * 
JSMyTe°
(
UINT8
 *
pFøme
,* 
°r
);

25 
JSSë∑øm
(
x1
,
y1
,
x2
,
y2
);

	@sample/test_comm/teacher2.h

1 #i‚de‡
__TEACHER2_H


2 
	#__TEACHER2_H


	)

4 
	~<cv.h
>

5 
	~<cxc‹e.h
>

6 
	~<highgui.h
>

9 
‰ame
(
height
, 
width
, 
ty≥
, * 
d©a
);

	@sample/vda/sample_vda.c

12 #ifde‡
__˝lu•lus


13 #i‡
__˝lu•lus


18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<±hªad.h
>

23 
	~<sig«l.h
>

25 
	~"ßm∂e_comm.h
"

26 
	~"lﬂdbmp.h
"

28 
VIDEO_NORM_E
 
gs_íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

29 
VO_INTF_TYPE_E
 
g_íVoI¡fTy≥
 = 
VO_INTF_CVBS
;

31 
SAMPLE_VI_CONFIG_S
 
g_°ViChnC⁄fig
 =

33 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
,

34 
VIDEO_ENCODING_MODE_AUTO
,

35 
ROTATE_NONE
,

36 
VI_CHN_SET_NORMAL
,

37 
WDR_MODE_NONE


39 
HI_U32
 
gs_u32ViFrmR©e
 = 0;

44 
HI_S32
 
SAMPLE_VDA_GëVoAâr
(
VO_DEV
 
VoDev
, 
VO_INTF_SYNC_E
 
íI¡fSync
, 
VO_PUB_ATTR_S
* 
p°PubAâr
,

45 
VO_VIDEO_LAYER_ATTR_S
* 
p°LayîAâr
, 
HI_S32
 
s32Squ¨eS‹t
, 
VO_CHN_ATTR_S
* 
a°ChnAâr
)

47 
VO_INTF_TYPE_E
 
íI¡fTy≥
;

48 
HI_U32
 
u32Width
, 
u32Height
, 
j
;

49 #i‡
deföed
(
CHIP_TYPE_hi3521v100
Ë|| deföed(
CHIP_TYPE_hi3520Dv100
)

50 
VoDev
)

53 
íI¡fTy≥
 = 
VO_INTF_VGA
 | 
VO_INTF_HDMI
;

56 
íI¡fTy≥
 = 
VO_INTF_CVBS
;

59 
íI¡fTy≥
 = 
VO_INTF_CVBS
;

62 #ñi‡
deföed
(
CHIP_TYPE_hi3535v100
)

63 
VoDev
)

66 
íI¡fTy≥
 = 
VO_INTF_BT1120
 | 
VO_INTF_HDMI
;

69 
íI¡fTy≥
 = 
VO_INTF_BT1120
;

72 
íI¡fTy≥
 = 
VO_INTF_CVBS
;

75 
íI¡fTy≥
 = 
VO_INTF_CVBS
;

78 #ñi‡
deföed
(
CHIP_TYPE_hi3516av100
)

79 
íI¡fTy≥
 = 
VO_INTF_CVBS
;

81 
íI¡fTy≥
 = 
VO_INTF_BT1120
;

83 
íI¡fSync
)

85 
VO_OUTPUT_PAL
 :

86 
u32Width
 = 720;

87 
u32Height
 = 576; ;

88 
VO_OUTPUT_NTSC
 :

89 
u32Width
 = 720;

90 
u32Height
 = 480; ;

91 
VO_OUTPUT_1080P24
 :

92 
u32Width
 = 1920;

93 
u32Height
 = 1080; ;

94 
VO_OUTPUT_1080P25
 :

95 
u32Width
 = 1920;

96 
u32Height
 = 1080; ;

97 
VO_OUTPUT_1080P30
 :

98 
u32Width
 = 1920;

99 
u32Height
 = 1080; ;

100 
VO_OUTPUT_720P50
 :

101 
u32Width
 = 1280;

102 
u32Height
 = 720; ;

103 
VO_OUTPUT_720P60
 :

104 
u32Width
 = 1280;

105 
u32Height
 = 720; ;

106 
VO_OUTPUT_1080I50
 :

107 
u32Width
 = 1920;

108 
u32Height
 = 1080; ;

109 
VO_OUTPUT_1080I60
 :

110 
u32Width
 = 1920;

111 
u32Height
 = 1080; ;

112 
VO_OUTPUT_1080P50
 :

113 
u32Width
 = 1920;

114 
u32Height
 = 1080; ;

115 
VO_OUTPUT_1080P60
 :

116 
u32Width
 = 1920;

117 
u32Height
 = 1080; ;

118 
VO_OUTPUT_576P50
 :

119 
u32Width
 = 720;

120 
u32Height
 = 576; ;

121 
VO_OUTPUT_480P60
 :

122 
u32Width
 = 720;

123 
u32Height
 = 480; ;

124 
VO_OUTPUT_800x600_60
:

125 
u32Width
 = 800;

126 
u32Height
 = 600; ;

127 
VO_OUTPUT_1024x768_60
:

128 
u32Width
 = 1024;

129 
u32Height
 = 768; ;

130 
VO_OUTPUT_1280x1024_60
:

131 
u32Width
 = 1280;

132 
u32Height
 = 1024; ;

133 
VO_OUTPUT_1366x768_60
:

134 
u32Width
 = 1366;

135 
u32Height
 = 768; ;

136 
VO_OUTPUT_1440x900_60
:

137 
u32Width
 = 1440;

138 
u32Height
 = 900; ;

139 
VO_OUTPUT_1280x800_60
:

140 
u32Width
 = 1280;

141 
u32Height
 = 800; ;

144  
HI_FAILURE
;

147 i‡(
NULL
 !
p°PubAâr
)

149 
p°PubAâr
->
íI¡fSync
 =ÉnIntfSync;

150 
p°PubAâr
->
u32BgCﬁ‹
 = 0;

152 
p°PubAâr
->
íI¡fTy≥
 =ÉnIntfType;

155 i‡(
NULL
 !
p°LayîAâr
)

157 
p°LayîAâr
->
°Di•Re˘
.
s32X
 = 0;

158 
p°LayîAâr
->
°Di•Re˘
.
s32Y
 = 0;

159 
p°LayîAâr
->
°Di•Re˘
.
u32Width
 = u32Width;

160 
p°LayîAâr
->
°Di•Re˘
.
u32Height
 = u32Height;

161 
p°LayîAâr
->
°ImageSize
.
u32Width
 = u32Width;

162 
p°LayîAâr
->
°ImageSize
.
u32Height
 = u32Height;

164 
p°LayîAâr
->
bDoubÀFøme
 = 
HI_FALSE
;

165 
p°LayîAâr
->
u32Di•FrmRt
 = 25;

166 
p°LayîAâr
->
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

167 
p°LayîAâr
->
bClu°îMode
 = 
HI_FALSE
;

170 i‡(
NULL
 !
a°ChnAâr
)

172 
j
 = 0; j < (
s32Squ¨eS‹t
 * s32SquareSort); j++)

174 
a°ChnAâr
[
j
].
°Re˘
.
s32X
 = 
ALIGN_BACK
((
u32Width
 / 
s32Squ¨eS‹t
) * (j % s32SquareSort), 4);

175 
a°ChnAâr
[
j
].
°Re˘
.
s32Y
 = 
ALIGN_BACK
((
u32Height
 / 
s32Squ¨eS‹t
) * (j / s32SquareSort), 4);

176 
a°ChnAâr
[
j
].
°Re˘
.
u32Width
 = 
ALIGN_BACK
(u32Width / 
s32Squ¨eS‹t
, 4);

177 
a°ChnAâr
[
j
].
°Re˘
.
u32Height
 = 
ALIGN_BACK
(u32Heighà/ 
s32Squ¨eS‹t
, 4);

178 
a°ChnAâr
[
j
].
u32Pri‹ôy
 = 0;

179 
a°ChnAâr
[
j
].
bDeÊickî
 = 
HI_FALSE
;

183  
HI_SUCCESS
;

189 
SAMPLE_VDA_H™dÀSig
(
HI_S32
 
signo
)

191 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

193 
SAMPLE_COMM_ISP_St›
();

194 
SAMPLE_COMM_SYS_Exô
();

195 
¥ötf
("\033[0;31mprogramÉxitábnormally!\033[0;39m\n");

198 
exô
(0);

203 
SAMPLE_VDA_Ußge
(* 
sPrgNm
)

205 
¥ötf
("Ußgê: %†<ödex>\n", 
sPrgNm
);

206 
¥ötf
("index:\n");

207 
¥ötf
("\t 0) MD.(QVGA)\n");

208 
¥ötf
("\t 1) OD.(QVGA)\n");

220 
HI_S32
 
SAMPLE_Vda_QVGA
(
HI_BOOL
 
bVdaMd
)

222 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

223 
VI_CHN
 
ViChn_Md
 , 
ViChn_Od
 ;

224 
VDA_CHN
 
VdaChn_Md
 = 0, 
VdaChn_Od
 = 1;

225 
VB_CONF_S
 
°VbC⁄f
 = {0};

226 
PIC_SIZE_E
 
íSize_Md
 = 
PIC_QVGA
, 
íSize_Od
 = PIC_QVGA;

231 
VPSS_GRP
 
VpssGΩ
;

232 
VPSS_CHN
 
VpssChn
;

233 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

234 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

235 
VPSS_CHN_MODE_S
 
°VpssMode
 = {
VPSS_CHN_MODE_USER
, 1920, 1080, 
HI_FALSE
, 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
};

237 
VO_DEV
 
VoDev
;

238 
VO_CHN
 
VoChn
;

239 
VO_PUB_ATTR_S
 
°VoPubAâr
;

240 
SAMPLE_VO_MODE_E
 
íVoMode
;

241 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

242 
VO_CHN_ATTR_S
 
a°ChnAâr
[16];

244 
HI_U32
 
u32BlkSize
;

245 
SIZE_S
 
°Size
;

246 
PIC_SIZE_E
 
íPicSize
 = 
PIC_HD1080
;

251 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

252 
g_°ViChnC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

254 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íPicSize
);

256 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

258 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

259 
íPicSize
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

260 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

262 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

263 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 10;

265 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

266 
PIC_QVGA
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

267 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

268 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 10;

273 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

274 i‡(
HI_SUCCESS
 !
s32Rë
)

276 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

277 
END_0
;

283 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
g_°ViChnC⁄fig
);

284 i‡(
HI_SUCCESS
 !
s32Rë
)

286 
SAMPLE_PRT
("start vi failed!\n");

287 
END_0
;

293 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

294 
¥ötf
("\n°Size'†width i†%d, heigh i†%d!!!\n", 
°Size
.
u32Width
, stSize.
u32Height
);

295 i‡(
HI_SUCCESS
 !
s32Rë
)

297 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

298 
END_2
;

301 
VpssGΩ
 = 0;

302 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

303 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

304 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

305 
°VpssGΩAâr
.
bNrEn
 = 
HI_FALSE
;

306 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

307 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

308 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

309 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

311 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

312 i‡(
HI_SUCCESS
 !
s32Rë
)

314 
SAMPLE_PRT
("Start Vpss failed!\n");

315 
END_2
;

318 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
g_°ViChnC⁄fig
.
íViMode
);

319 i‡(
HI_SUCCESS
 !
s32Rë
)

321 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

322 
END_2
;

326 
VpssChn
 = 0;

327 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

328 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

329 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

330 
°VpssMode
.
u32Width
 = 
°Size
.u32Width;

331 
°VpssMode
.
u32Height
 = 
°Size
.u32Height;

332 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssMode
, 
HI_NULL
);

333 i‡(
HI_SUCCESS
 !
s32Rë
)

335 
SAMPLE_PRT
("Enable vpss chn failed!\n");

336 
END_2
;

341 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;

342 
VoChn
 = 0;

343 
íVoMode
 = 
VO_MODE_1MUX
;

345 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

346 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

348 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_720P50
;

352 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

355 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

359 
SAMPLE_VDA_GëVoAâr
(
VoDev
, 
VO_OUTPUT_1080P30
, &
°VoPubAâr
,

360 &
°LayîAâr
, 1, 
a°ChnAâr
);

364 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

365 i‡(
HI_SUCCESS
 !
s32Rë
)

367 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDevLayer failed!\n");

368 
END_1
;

372 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoDev
, &
°LayîAâr
, 
HI_TRUE
);

373 i‡(
HI_SUCCESS
 !
s32Rë
)

375 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDevLayer failed!\n");

376 
END_1
;

380 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

381 i‡(
HI_SUCCESS
 !
s32Rë
)

383 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

384 
END_1
;

388 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

389 i‡(
HI_SUCCESS
 !
s32Rë
)

391 
SAMPLE_PRT
("SAMPLE_COMM_VO_BindVpss failed!\n");

392 
END_1
;

400 
¶ìp
(2);

402 i‡(
HI_TRUE
 =
bVdaMd
)

404 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize_Md
, &
°Size
);

405 i‡(
HI_SUCCESS
 !
s32Rë
)

407 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

408 
END_3
;

410 
ViChn_Md
 = 
VpssChn
;

411 
s32Rë
 = 
SAMPLE_COMM_VDA_MdSèπ
(
VdaChn_Md
, 
ViChn_Md
, &
°Size
);

412 i‡(
HI_SUCCESS
 !
s32Rë
)

414 
SAMPLE_PRT
("VDA Md Start failed!\n");

415 
END_3
;

418 
¥ötf
("Pressány keyÅo stop!\n");

419 
gëch¨
();

420 
SAMPLE_COMM_VDA_MdSt›
(
VdaChn_Md
, 
ViChn_Md
);

424 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize_Od
, &
°Size
);

425 i‡(
HI_SUCCESS
 !
s32Rë
)

427 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

428 
END_3
;

430 
ViChn_Od
 = 
VpssChn
;

431 
s32Rë
 = 
SAMPLE_COMM_VDA_OdSèπ
(
VdaChn_Od
, 
ViChn_Od
, &
°Size
);

432 i‡(
HI_SUCCESS
 !
s32Rë
)

434 
SAMPLE_PRT
("VDA OD Start failed!\n");

435 
END_3
;

438 
¥ötf
("Pressány keyÅo stop!\n");

439 
gëch¨
();

440 
SAMPLE_COMM_VDA_OdSt›
(
VdaChn_Od
, 
ViChn_Od
);

447 
END_3
:

448 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

449 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

450 
SAMPLE_COMM_VO_St›Layî
(
VoDev
);

451 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

452 
END_2
:

453 
VpssGΩ
 = 0;

454 
VpssChn
 = 0;

455 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

456 
SAMPLE_COMM_VI_UnBödVpss
(
g_°ViChnC⁄fig
.
íViMode
);

457 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

458 
END_1
:

459 
HI_MPI_VI_DißbÀChn
(0);

460 
SAMPLE_COMM_VI_St›Vi
(&
g_°ViChnC⁄fig
);

461 
END_0
:

462 
SAMPLE_COMM_SYS_Exô
();

464  
s32Rë
;

471 
maö
(
¨gc
, * 
¨gv
[])

473 
HI_S32
 
s32Rë
;

475 i‡–(
¨gc
 < 2Ë|| (1 !
°æí
(
¨gv
[1])))

477 
SAMPLE_VDA_Ußge
(
¨gv
[0]);

478  
HI_FAILURE
;

481 
sig«l
(
SIGINT
, 
SAMPLE_VDA_H™dÀSig
);

482 
sig«l
(
SIGTERM
, 
SAMPLE_VDA_H™dÀSig
);

484 *
¨gv
[1])

487 
s32Rë
 = 
SAMPLE_Vda_QVGA
(
HI_TRUE
);

490 
s32Rë
 = 
SAMPLE_Vda_QVGA
(
HI_FALSE
);

493 
SAMPLE_VDA_Ußge
(
¨gv
[0]);

494  
HI_FAILURE
;

497 i‡(
HI_SUCCESS
 =
s32Rë
)

498 { 
¥ötf
("programÉxitÇormally!\n"); }

500 { 
¥ötf
("programÉxitábnormally!\n"); }

501 
exô
(
s32Rë
);

504 #ifde‡
__˝lu•lus


505 #i‡
__˝lu•lus


	@sample/venc/sample_venc.c

7 #ifde‡
__˝lu•lus


8 #i‡
__˝lu•lus


13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<±hªad.h
>

18 
	~<sig«l.h
>

20 
	~"ßm∂e_comm.h
"

22 
VIDEO_NORM_E
 
gs_íN‹m
 = 
VIDEO_ENCODING_MODE_NTSC
;

27 
SAMPLE_VENC_Ußge
(* 
sPrgNm
)

29 
¥ötf
("Ußgê: %†<ödex>\n", 
sPrgNm
);

30 
¥ötf
("index:\n");

31 
¥ötf
("\t 0) 1*1080p H264 + 1*1080p H265 + 1*D1 H264Éncode.\n");

32 
¥ötf
("\t 1) 1*1080p MJPEGÉncode + 1*1080p jpeg.\n");

33 
¥ötf
("\t 2)Üow delayÉncode.\n");

34 
¥ötf
("\t 3)Ñoi background framerate.\n");

35 
¥ötf
("\t 4) svc-t H264\n");

36 
¥ötf
("\t 5) H264 intraÑefresh.\n");

44 
SAMPLE_VENC_H™dÀSig
(
HI_S32
 
signo
)

46 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

48 
SAMPLE_COMM_ISP_St›
();

49 
SAMPLE_COMM_SYS_Exô
();

50 
¥ötf
("\033[0;31mprogramÅerminationábnormally!\033[0;39m\n");

52 
exô
(-1);

58 
SAMPLE_VENC_SåómH™dÀSig
(
HI_S32
 
signo
)

61 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

63 
SAMPLE_COMM_SYS_Exô
();

64 
¥ötf
("\033[0;31mprogramÉxitábnormally!\033[0;39m\n");

67 
exô
(0);

74 
HI_S32
 
SAMPLE_VENC_1080P_CLASSIC
(
HI_VOID
)

76 
PAYLOAD_TYPE_E
 
íPayLﬂd
[3] = {
PT_H264
, 
PT_H265
, PT_H264};

77 
PIC_SIZE_E
 
íSize
[3] = {
PIC_HD1080
, PIC_HD1080, 
PIC_D1
};

78 
HI_U32
 
u32Profûe
 = 0;

80 
VB_CONF_S
 
°VbC⁄f
;

81 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
 = {0};

83 
VPSS_GRP
 
VpssGΩ
;

84 
VPSS_CHN
 
VpssChn
;

85 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

86 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

87 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

89 
VENC_CHN
 
VícChn
;

90 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

92 
HI_S32
 
s32ChnNum
;

94 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

95 
HI_U32
 
u32BlkSize
;

96 
SIZE_S
 
°Size
;

97 
c
;

100 i‡((
SONY_IMX178_LVDS_5M_30FPS
 =
SENSOR_TYPE
)

101 || (
APTINA_AR0330_MIPI_1536P_25FPS
 =
SENSOR_TYPE
)

102 || (
APTINA_AR0330_MIPI_1296P_25FPS
 =
SENSOR_TYPE
))

104 
s32ChnNum
 = 2;

108 
s32ChnNum
 = 3;

114 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

116 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
[0]);

117 
SENSOR_TYPE
)

119 
SONY_IMX178_LVDS_5M_30FPS
:

120 
APTINA_AR0330_MIPI_1536P_25FPS
:

121 
APTINA_AR0330_MIPI_1296P_25FPS
:

122 
íSize
[1] = 
PIC_VGA
;

128 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

131 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

132 
íSize
[0], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

133 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

134 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 20;

136 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

137 
íSize
[1], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

138 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

139 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 20;

141 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

142 
íSize
[2], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

143 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkSize
 = u32BlkSize;

144 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkC¡
 = 20;

150 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

151 i‡(
HI_SUCCESS
 !
s32Rë
)

153 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

154 
END_VENC_1080P_CLASSIC_0
;

160 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

161 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

162 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

163 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

164 
°ViC⁄fig
.
íWDRMode
 = 
WDR_MODE_NONE
;

165 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

166 i‡(
HI_SUCCESS
 !
s32Rë
)

168 
SAMPLE_PRT
("start vi failed!\n");

169 
END_VENC_1080P_CLASSIC_1
;

175 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
[0], &
°Size
);

176 i‡(
HI_SUCCESS
 !
s32Rë
)

178 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

179 
END_VENC_1080P_CLASSIC_1
;

182 
VpssGΩ
 = 0;

183 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

184 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

185 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

186 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

187 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

188 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

189 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

190 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

192 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

193 i‡(
HI_SUCCESS
 !
s32Rë
)

195 
SAMPLE_PRT
("Start Vpss failed!\n");

196 
END_VENC_1080P_CLASSIC_2
;

199 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

200 i‡(
HI_SUCCESS
 !
s32Rë
)

202 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

203 
END_VENC_1080P_CLASSIC_3
;

206 
VpssChn
 = 0;

207 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

208 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

209 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

210 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

211 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

212 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

213 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

214 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

215 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

216 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

217 i‡(
HI_SUCCESS
 !
s32Rë
)

219 
SAMPLE_PRT
("Enable vpss chn failed!\n");

220 
END_VENC_1080P_CLASSIC_4
;

223 
VpssChn
 = 1;

224 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

225 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

226 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

227 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

228 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

229 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

230 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

231 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

232 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

233 i‡(
HI_SUCCESS
 !
s32Rë
)

235 
SAMPLE_PRT
("Enable vpss chn failed!\n");

236 
END_VENC_1080P_CLASSIC_4
;

239 i‡((
SONY_IMX178_LVDS_5M_30FPS
 !
SENSOR_TYPE
)

240 && (
APTINA_AR0330_MIPI_1536P_25FPS
 !
SENSOR_TYPE
)

241 && (
APTINA_AR0330_MIPI_1296P_25FPS
 !
SENSOR_TYPE
))

244 
VpssChn
 = 2;

245 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

246 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

247 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

248 
°VpssChnMode
.
u32Width
 = 720;

249 
°VpssChnMode
.
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 576 : 480;;

250 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

252 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

253 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

255 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

256 i‡(
HI_SUCCESS
 !
s32Rë
)

258 
SAMPLE_PRT
("Enable vpss chn failed!\n");

259 
END_VENC_1080P_CLASSIC_4
;

266 
¥ötf
("\t c) cbr.\n");

267 
¥ötf
("\t v) vbr.\n");

268 
¥ötf
("\t f) fixQp\n");

269 
¥ötf
("please input chooseÑc mode!\n");

270 
c
 = 
gëch¨
();

271 
c
)

274 
íRcMode
 = 
SAMPLE_RC_CBR
;

277 
íRcMode
 = 
SAMPLE_RC_VBR
;

280 
íRcMode
 = 
SAMPLE_RC_FIXQP
;

283 
¥ötf
("rc mode! is invaild!\n");

284 
END_VENC_1080P_CLASSIC_4
;

286 
VpssGΩ
 = 0;

287 
VpssChn
 = 0;

288 
VícChn
 = 0;

289 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
[0], \

290 
gs_íN‹m
, 
íSize
[0], 
íRcMode
, 
u32Profûe
);

291 i‡(
HI_SUCCESS
 !
s32Rë
)

293 
SAMPLE_PRT
("Start Venc failed!\n");

294 
END_VENC_1080P_CLASSIC_5
;

297 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

298 i‡(
HI_SUCCESS
 !
s32Rë
)

300 
SAMPLE_PRT
("Start Venc failed!\n");

301 
END_VENC_1080P_CLASSIC_5
;

305 
VpssChn
 = 1;

306 
VícChn
 = 1;

307 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
[1], \

308 
gs_íN‹m
, 
íSize
[1], 
íRcMode
, 
u32Profûe
);

309 i‡(
HI_SUCCESS
 !
s32Rë
)

311 
SAMPLE_PRT
("Start Venc failed!\n");

312 
END_VENC_1080P_CLASSIC_5
;

315 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

316 i‡(
HI_SUCCESS
 !
s32Rë
)

318 
SAMPLE_PRT
("Start Venc failed!\n");

319 
END_VENC_1080P_CLASSIC_5
;

323 i‡(
SONY_IMX178_LVDS_5M_30FPS
 !
SENSOR_TYPE
)

325 
VpssChn
 = 2;

326 
VícChn
 = 2;

327 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
[2], \

328 
gs_íN‹m
, 
íSize
[2], 
íRcMode
, 
u32Profûe
);

329 i‡(
HI_SUCCESS
 !
s32Rë
)

331 
SAMPLE_PRT
("Start Venc failed!\n");

332 
END_VENC_1080P_CLASSIC_5
;

335 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

336 i‡(
HI_SUCCESS
 !
s32Rë
)

338 
SAMPLE_PRT
("Start Venc failed!\n");

339 
END_VENC_1080P_CLASSIC_5
;

345 
s32Rë
 = 
SAMPLE_COMM_VENC_SèπGëSåóm
(
s32ChnNum
);

346 i‡(
HI_SUCCESS
 !
s32Rë
)

348 
SAMPLE_PRT
("Start Venc failed!\n");

349 
END_VENC_1080P_CLASSIC_5
;

352 
¥ötf
("pleaseÖressÅwice ENTERÅoÉxitÅhis sample\n");

353 
gëch¨
();

354 
gëch¨
();

359 
SAMPLE_COMM_VENC_St›GëSåóm
();

361 
END_VENC_1080P_CLASSIC_5
:

362 
VpssGΩ
 = 0;

364 
VpssChn
 = 0;

365 
VícChn
 = 0;

366 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

367 
SAMPLE_COMM_VENC_St›
(
VícChn
);

369 
VpssChn
 = 1;

370 
VícChn
 = 1;

371 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

372 
SAMPLE_COMM_VENC_St›
(
VícChn
);

375 i‡(
SONY_IMX178_LVDS_5M_30FPS
 !
SENSOR_TYPE
)

377 
VpssChn
 = 2;

378 
VícChn
 = 2;

379 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

380 
SAMPLE_COMM_VENC_St›
(
VícChn
);

383 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

384 
END_VENC_1080P_CLASSIC_4
:

385 
VpssGΩ
 = 0;

386 
VpssChn
 = 0;

387 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

388 
VpssChn
 = 1;

389 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

390 i‡(
SONY_IMX178_LVDS_5M_30FPS
 !
SENSOR_TYPE
)

392 
VpssChn
 = 2;

393 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

395 
END_VENC_1080P_CLASSIC_3
:

396 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

397 
END_VENC_1080P_CLASSIC_2
:

398 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

399 
END_VENC_1080P_CLASSIC_1
:

400 
SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

401 
END_VENC_1080P_CLASSIC_0
:

402 
SAMPLE_COMM_SYS_Exô
();

404  
s32Rë
;

412 
HI_S32
 
SAMPLE_VENC_1080P_MJPEG_JPEG
(
HI_VOID
)

414 
PAYLOAD_TYPE_E
 
íPayLﬂd
 = 
PT_MJPEG
;

415 
PIC_SIZE_E
 
íSize
 = 
PIC_HD1080
;

416 
HI_U32
 
u32Profûe
 = 0;

418 
VB_CONF_S
 
°VbC⁄f
;

419 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
 = {0};

421 
VPSS_GRP
 
VpssGΩ
;

422 
VPSS_CHN
 
VpssChn
;

423 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

424 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

425 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

427 
VENC_CHN
 
VícChn
;

428 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

429 
HI_S32
 
s32ChnNum
 = 1;

431 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

432 
HI_U32
 
u32BlkSize
;

433 
SIZE_S
 
°Size
;

434 
HI_S32
 
i
 = 0;

435 
ch
;

440 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

442 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

444 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
);

447 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

448 
íSize
, 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

450 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

451 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 12;

457 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

458 i‡(
HI_SUCCESS
 !
s32Rë
)

460 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

461 
END_VENC_MJPEG_JPEG_0
;

467 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

468 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

469 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

470 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

471 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

472 i‡(
HI_SUCCESS
 !
s32Rë
)

474 
SAMPLE_PRT
("start vi failed!\n");

475 
END_VENC_MJPEG_JPEG_1
;

481 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
, &
°Size
);

482 i‡(
HI_SUCCESS
 !
s32Rë
)

484 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

485 
END_VENC_MJPEG_JPEG_1
;

488 
VpssGΩ
 = 0;

489 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

490 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

491 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

492 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

493 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

494 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

495 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

496 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

497 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

498 i‡(
HI_SUCCESS
 !
s32Rë
)

500 
SAMPLE_PRT
("Start Vpss failed!\n");

501 
END_VENC_MJPEG_JPEG_2
;

504 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

505 i‡(
HI_SUCCESS
 !
s32Rë
)

507 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

508 
END_VENC_MJPEG_JPEG_3
;

512 
VpssChn
 = 0;

513 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

514 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

515 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

516 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

517 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

518 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

520 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

521 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

522 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

523 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

524 i‡(
HI_SUCCESS
 !
s32Rë
)

526 
SAMPLE_PRT
("Enable vpss chn failed!\n");

527 
END_VENC_MJPEG_JPEG_4
;

531 
VpssChn
 = 1;

532 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

533 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

534 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

535 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

536 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

537 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

539 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

540 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

541 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

542 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

543 i‡(
HI_SUCCESS
 !
s32Rë
)

545 
SAMPLE_PRT
("Enable vpss chn failed!\n");

546 
END_VENC_MJPEG_JPEG_4
;

552 
VpssGΩ
 = 0;

553 
VpssChn
 = 0;

554 
VícChn
 = 0;

555 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
, \

556 
gs_íN‹m
, 
íSize
, 
íRcMode
, 
u32Profûe
);

557 i‡(
HI_SUCCESS
 !
s32Rë
)

559 
SAMPLE_PRT
("Start Venc failed!\n");

560 
END_VENC_MJPEG_JPEG_5
;

563 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

564 i‡(
HI_SUCCESS
 !
s32Rë
)

566 
SAMPLE_PRT
("Start Venc failed!\n");

567 
END_VENC_MJPEG_JPEG_5
;

570 
VpssGΩ
 = 0;

571 
VpssChn
 = 1;

572 
VícChn
 = 1;

573 
s32Rë
 = 
SAMPLE_COMM_VENC_S«pSèπ
(
VícChn
, &
°Size
);

574 i‡(
HI_SUCCESS
 !
s32Rë
)

576 
SAMPLE_PRT
("Start snap failed!\n");

577 
END_VENC_MJPEG_JPEG_5
;

581 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

582 i‡(
HI_SUCCESS
 !
s32Rë
)

584 
SAMPLE_PRT
("Start Venc failed!\n");

585 
END_VENC_MJPEG_JPEG_5
;

591 
s32Rë
 = 
SAMPLE_COMM_VENC_SèπGëSåóm
(
s32ChnNum
);

592 i‡(
HI_SUCCESS
 !
s32Rë
)

594 
SAMPLE_PRT
("Start Venc failed!\n");

595 
END_VENC_MJPEG_JPEG_5
;

598 
¥ötf
("press 'q'ÅoÉxit sample!\nperess ENTERÅo capture oneÖictureÅo file\n");

599 
i
 = 0;

600 (
ch
 = 
gëch¨
()) != 'q')

602 
s32Rë
 = 
SAMPLE_COMM_VENC_S«pPro˚ss
(
VícChn
);

603 i‡(
HI_SUCCESS
 !
s32Rë
)

605 
¥ötf
("%s: s™∞¥o˚s†Áûed!\n", 
__FUNCTION__
);

608 
¥ötf
("¢≠ %d suc˚ss!\n", 
i
);

609 
i
++;

612 
¥ötf
("pleaseÖress ENTERÅoÉxitÅhis sample\n");

613 
gëch¨
();

614 
gëch¨
();

619 
SAMPLE_COMM_VENC_St›GëSåóm
();

621 
END_VENC_MJPEG_JPEG_5
:

622 
VpssGΩ
 = 0;

623 
VpssChn
 = 0;

624 
VícChn
 = 0;

625 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

626 
SAMPLE_COMM_VENC_St›
(
VícChn
);

628 
VpssChn
 = 1;

629 
VícChn
 = 1;

630 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

631 
SAMPLE_COMM_VENC_St›
(
VícChn
);

632 
END_VENC_MJPEG_JPEG_4
:

633 
VpssGΩ
 = 0;

634 
VpssChn
 = 0;

635 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

636 
VpssChn
 = 1;

637 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

638 
END_VENC_MJPEG_JPEG_3
:

639 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

640 
END_VENC_MJPEG_JPEG_2
:

641 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

642 
END_VENC_MJPEG_JPEG_1
:

643 
SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

644 
END_VENC_MJPEG_JPEG_0
:

645 
SAMPLE_COMM_SYS_Exô
();

647  
s32Rë
;

653 
HI_S32
 
SAMPLE_VENC_LOW_DELAY
(
HI_VOID
)

655 
PAYLOAD_TYPE_E
 
íPayLﬂd
[2] = {
PT_H264
, PT_H264};

656 
PIC_SIZE_E
 
íSize
[2] = {
PIC_HD1080
, 
PIC_VGA
};

657 
HI_U32
 
u32Profûe
 = 0;

659 
VB_CONF_S
 
°VbC⁄f
;

660 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
 = {0};

661 
HI_U32
 
u32Pri‹ôy
;

663 
VPSS_GRP
 
VpssGΩ
;

664 
VPSS_CHN
 
VpssChn
;

665 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

666 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

667 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

668 
VPSS_LOW_DELAY_INFO_S
 
°LowDñayInfo
;

670 
VENC_CHN
 
VícChn
;

671 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

672 
HI_S32
 
s32ChnNum
 = 2;

674 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

675 
HI_U32
 
u32BlkSize
;

676 
SIZE_S
 
°Size
;

677 
c
;

682 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

683 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

685 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
[0]);

688 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

689 
íSize
[0], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

691 
¥ötf
("u32BlkSize: %d\n", 
u32BlkSize
);

692 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

693 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 10;

695 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

696 
íSize
[1], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

697 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

698 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 6;

703 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

704 i‡(
HI_SUCCESS
 !
s32Rë
)

706 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

707 
END_VENC_LOW_DELAY_0
;

713 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

714 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

715 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

716 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

717 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

718 i‡(
HI_SUCCESS
 !
s32Rë
)

720 
SAMPLE_PRT
("start vi failed!\n");

721 
END_VENC_LOW_DELAY_1
;

727 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
[0], &
°Size
);

728 i‡(
HI_SUCCESS
 !
s32Rë
)

730 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

731 
END_VENC_LOW_DELAY_1
;

734 
VpssGΩ
 = 0;

735 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

736 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

737 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

738 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

739 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

740 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

741 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

742 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

743 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

744 i‡(
HI_SUCCESS
 !
s32Rë
)

746 
SAMPLE_PRT
("Start Vpss failed!\n");

747 
END_VENC_LOW_DELAY_2
;

750 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

751 i‡(
HI_SUCCESS
 !
s32Rë
)

753 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

754 
END_VENC_LOW_DELAY_3
;

757 
VpssChn
 = 0;

758 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

759 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

760 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

761 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

762 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

763 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

764 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

765 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

766 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

767 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

768 i‡(
HI_SUCCESS
 !
s32Rë
)

770 
SAMPLE_PRT
("Enable vpss chn failed!\n");

771 
END_VENC_LOW_DELAY_4
;

774 
VpssChn
 = 1;

775 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

776 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

777 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

778 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

779 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

780 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

781 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

782 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

783 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

784 i‡(
HI_SUCCESS
 !
s32Rë
)

786 
SAMPLE_PRT
("Enable vpss chn failed!\n");

787 
END_VENC_LOW_DELAY_4
;

794 
¥ötf
("\t c) cbr.\n");

795 
¥ötf
("\t v) vbr.\n");

796 
¥ötf
("\t f) fixQp\n");

797 
¥ötf
("please input chooseÑc mode!\n");

798 
c
 = 
gëch¨
();

799 
c
)

802 
íRcMode
 = 
SAMPLE_RC_CBR
;

805 
íRcMode
 = 
SAMPLE_RC_VBR
;

808 
íRcMode
 = 
SAMPLE_RC_FIXQP
;

811 
¥ötf
("rc mode! is invaild!\n");

812 
END_VENC_LOW_DELAY_4
;

814 
VpssGΩ
 = 0;

815 
VpssChn
 = 0;

816 
VícChn
 = 0;

817 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
[0], \

818 
gs_íN‹m
, 
íSize
[0], 
íRcMode
, 
u32Profûe
);

819 i‡(
HI_SUCCESS
 !
s32Rë
)

821 
SAMPLE_PRT
("Start Venc failed!\n");

822 
END_VENC_LOW_DELAY_5
;

825 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

826 i‡(
HI_SUCCESS
 !
s32Rë
)

828 
SAMPLE_PRT
("Start Venc failed!\n");

829 
END_VENC_LOW_DELAY_5
;

833 
s32Rë
 = 
HI_MPI_VENC_GëCh∆Pri‹ôy
(
VícChn
, &
u32Pri‹ôy
);

834 i‡(
HI_SUCCESS
 !
s32Rë
)

836 
SAMPLE_PRT
("Get Chnl Priority failed!\n");

837 
END_VENC_LOW_DELAY_5
;

840 
u32Pri‹ôy
 = 1;

842 
s32Rë
 = 
HI_MPI_VENC_SëCh∆Pri‹ôy
(
VícChn
, 
u32Pri‹ôy
);

843 i‡(
HI_SUCCESS
 !
s32Rë
)

845 
SAMPLE_PRT
("Set Chnl Priority failed!\n");

846 
END_VENC_LOW_DELAY_5
;

851 
s32Rë
 = 
HI_MPI_VPSS_GëLowDñayAâr
(
VpssGΩ
, 
VpssChn
, &
°LowDñayInfo
);

852 i‡(
HI_SUCCESS
 !
s32Rë
)

854 
SAMPLE_PRT
("HI_MPI_VPSS_GetLowDelayAttr failed!\n");

855 
END_VENC_LOW_DELAY_5
;

857 
°LowDñayInfo
.
bE«bÀ
 = 
HI_TRUE
;

858 
°LowDñayInfo
.
u32LöeC¡
 = 
°VpssChnMode
.
u32Height
 / 2;

859 
s32Rë
 = 
HI_MPI_VPSS_SëLowDñayAâr
(
VpssGΩ
, 
VpssChn
, &
°LowDñayInfo
);

860 i‡(
HI_SUCCESS
 !
s32Rë
)

862 
SAMPLE_PRT
("HI_MPI_VPSS_SetLowDelayAttr failed!\n");

863 
END_VENC_LOW_DELAY_5
;

867 
VpssChn
 = 1;

868 
VícChn
 = 1;

869 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
[1], \

870 
gs_íN‹m
, 
íSize
[1], 
íRcMode
, 
u32Profûe
);

871 i‡(
HI_SUCCESS
 !
s32Rë
)

873 
SAMPLE_PRT
("Start Venc failed!\n");

874 
END_VENC_LOW_DELAY_5
;

877 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

878 i‡(
HI_SUCCESS
 !
s32Rë
)

880 
SAMPLE_PRT
("Start Venc failed!\n");

881 
END_VENC_LOW_DELAY_5
;

887 
s32Rë
 = 
SAMPLE_COMM_VENC_SèπGëSåóm
(
s32ChnNum
);

888 i‡(
HI_SUCCESS
 !
s32Rë
)

890 
SAMPLE_PRT
("Start Venc failed!\n");

891 
END_VENC_LOW_DELAY_5
;

894 
¥ötf
("pleaseÖressÅwice ENTERÅoÉxitÅhis sample\n");

895 
gëch¨
();

896 
gëch¨
();

901 
SAMPLE_COMM_VENC_St›GëSåóm
();

903 
END_VENC_LOW_DELAY_5
:

904 
VpssGΩ
 = 0;

906 
VpssChn
 = 0;

907 
VícChn
 = 0;

908 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

909 
SAMPLE_COMM_VENC_St›
(
VícChn
);

911 
VpssChn
 = 1;

912 
VícChn
 = 1;

913 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

914 
SAMPLE_COMM_VENC_St›
(
VícChn
);

916 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

917 
END_VENC_LOW_DELAY_4
:

918 
VpssGΩ
 = 0;

919 
VpssChn
 = 0;

920 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

921 
VpssChn
 = 1;

922 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

923 
END_VENC_LOW_DELAY_3
:

924 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

925 
END_VENC_LOW_DELAY_2
:

926 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

927 
END_VENC_LOW_DELAY_1
:

928 
SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

929 
END_VENC_LOW_DELAY_0
:

930 
SAMPLE_COMM_SYS_Exô
();

932  
s32Rë
;

936 
HI_S32
 
SAMPLE_VENC_ROIBG_CLASSIC
(
HI_VOID
)

938 
PAYLOAD_TYPE_E
 
íPayLﬂd
 = 
PT_H264
;

939 
PIC_SIZE_E
 
íSize
[3] = {
PIC_HD1080
, 
PIC_HD720
, 
PIC_D1
};

940 
HI_U32
 
u32Profûe
 = 0;

942 
VB_CONF_S
 
°VbC⁄f
;

943 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
 = {0};

945 
VPSS_GRP
 
VpssGΩ
;

946 
VPSS_CHN
 
VpssChn
;

947 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

948 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

949 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

950 
VENC_ROI_CFG_S
 
°VícRoiCfg
;

951 
VENC_ROIBG_FRAME_RATE_S
 
°RoiBgFømeR©e
;

953 
VENC_CHN
 
VícChn
;

954 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

955 
HI_S32
 
s32ChnNum
 = 1;

957 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

958 
HI_U32
 
u32BlkSize
;

959 
SIZE_S
 
°Size
;

960 
c
;

965 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

966 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
[0]);

968 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

971 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

972 
íSize
[0], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

973 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

974 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 10;

976 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

977 
íSize
[1], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

978 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

979 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 6;

981 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

982 
íSize
[2], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

983 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkSize
 = u32BlkSize;

984 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkC¡
 = 6;

990 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

991 i‡(
HI_SUCCESS
 !
s32Rë
)

993 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

994 
END_VENC_1080P_CLASSIC_0
;

1000 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

1001 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

1002 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

1003 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

1004 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

1005 i‡(
HI_SUCCESS
 !
s32Rë
)

1007 
SAMPLE_PRT
("start vi failed!\n");

1008 
END_VENC_1080P_CLASSIC_1
;

1014 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
[0], &
°Size
);

1015 i‡(
HI_SUCCESS
 !
s32Rë
)

1017 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1018 
END_VENC_1080P_CLASSIC_1
;

1021 
VpssGΩ
 = 0;

1022 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1023 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1024 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

1025 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

1026 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

1027 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

1028 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1029 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

1030 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

1031 i‡(
HI_SUCCESS
 !
s32Rë
)

1033 
SAMPLE_PRT
("Start Vpss failed!\n");

1034 
END_VENC_1080P_CLASSIC_2
;

1037 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

1038 i‡(
HI_SUCCESS
 !
s32Rë
)

1040 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

1041 
END_VENC_1080P_CLASSIC_3
;

1044 
VpssChn
 = 0;

1045 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1046 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1047 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

1048 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1049 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1050 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1051 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

1052 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1053 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1054 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

1055 i‡(
HI_SUCCESS
 !
s32Rë
)

1057 
SAMPLE_PRT
("Enable vpss chn failed!\n");

1058 
END_VENC_1080P_CLASSIC_4
;

1065 
¥ötf
("\t c) cbr.\n");

1066 
¥ötf
("\t v) vbr.\n");

1067 
¥ötf
("\t f) fixQp\n");

1068 
¥ötf
("please input chooseÑc mode!\n");

1069 
c
 = 
gëch¨
();

1070 
c
)

1073 
íRcMode
 = 
SAMPLE_RC_CBR
;

1076 
íRcMode
 = 
SAMPLE_RC_VBR
;

1079 
íRcMode
 = 
SAMPLE_RC_FIXQP
;

1082 
¥ötf
("rc mode! is invaild!\n");

1083 
END_VENC_1080P_CLASSIC_4
;

1085 
VpssGΩ
 = 0;

1086 
VpssChn
 = 0;

1087 
VícChn
 = 0;

1088 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
, \

1089 
gs_íN‹m
, 
íSize
[0], 
íRcMode
, 
u32Profûe
);

1090 i‡(
HI_SUCCESS
 !
s32Rë
)

1092 
SAMPLE_PRT
("Start Venc failed!\n");

1093 
END_VENC_1080P_CLASSIC_5
;

1096 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

1097 i‡(
HI_SUCCESS
 !
s32Rë
)

1099 
SAMPLE_PRT
("Start Venc failed!\n");

1100 
END_VENC_1080P_CLASSIC_5
;

1102 
°VícRoiCfg
.
bAbsQp
 = 
HI_TRUE
;

1103 
°VícRoiCfg
.
bE«bÀ
 = 
HI_TRUE
;

1104 
°VícRoiCfg
.
s32Qp
 = 30;

1105 
°VícRoiCfg
.
u32Index
 = 0;

1106 
°VícRoiCfg
.
°Re˘
.
s32X
 = 64;

1107 
°VícRoiCfg
.
°Re˘
.
s32Y
 = 64;

1108 
°VícRoiCfg
.
°Re˘
.
u32Height
 = 256;

1109 
°VícRoiCfg
.
°Re˘
.
u32Width
 = 256;

1110 
s32Rë
 = 
HI_MPI_VENC_SëRoiCfg
(
VícChn
, &
°VícRoiCfg
);

1111 i‡(
HI_SUCCESS
 !
s32Rë
)

1113 
SAMPLE_PRT
("Start Venc failed!\n");

1114 
END_VENC_1080P_CLASSIC_5
;

1117 
s32Rë
 = 
HI_MPI_VENC_GëRoiBgFømeR©e
(
VícChn
, &
°RoiBgFømeR©e
);

1118 i‡(
HI_SUCCESS
 !
s32Rë
)

1120 
SAMPLE_PRT
("HI_MPI_VENC_GetRoiBgFrameRate failed!\n");

1121 
END_VENC_1080P_CLASSIC_5
;

1123 
°RoiBgFømeR©e
.
s32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

1124 
°RoiBgFømeR©e
.
s32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 5 : 15;

1126 
s32Rë
 = 
HI_MPI_VENC_SëRoiBgFømeR©e
(
VícChn
, &
°RoiBgFømeR©e
);

1127 i‡(
HI_SUCCESS
 !
s32Rë
)

1129 
SAMPLE_PRT
("HI_MPI_VENC_SetRoiBgFrameRate!\n");

1130 
END_VENC_1080P_CLASSIC_5
;

1135 
s32Rë
 = 
SAMPLE_COMM_VENC_SèπGëSåóm
(
s32ChnNum
);

1136 i‡(
HI_SUCCESS
 !
s32Rë
)

1138 
SAMPLE_PRT
("Start Venc failed!\n");

1139 
END_VENC_1080P_CLASSIC_5
;

1142 
¥ötf
("pleaseÖress ENTERÅoÉxitÅhis sample\n");

1143 
gëch¨
();

1144 
gëch¨
();

1149 
SAMPLE_COMM_VENC_St›GëSåóm
();

1151 
END_VENC_1080P_CLASSIC_5
:

1152 
VpssGΩ
 = 0;

1154 
VpssChn
 = 0;

1155 
VícChn
 = 0;

1156 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

1157 
SAMPLE_COMM_VENC_St›
(
VícChn
);

1161 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

1162 
END_VENC_1080P_CLASSIC_4
:

1163 
VpssGΩ
 = 0;

1164 
VpssChn
 = 0;

1165 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1166 
END_VENC_1080P_CLASSIC_3
:

1167 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

1168 
END_VENC_1080P_CLASSIC_2
:

1169 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

1170 
END_VENC_1080P_CLASSIC_1
:

1171 
SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

1172 
END_VENC_1080P_CLASSIC_0
:

1173 
SAMPLE_COMM_SYS_Exô
();

1175  
s32Rë
;

1178 
HI_S32
 
SAMPLE_VENC_SVC_H264
(
HI_VOID
)

1180 
PAYLOAD_TYPE_E
 
íPayLﬂd
 = 
PT_H264
;

1181 
PIC_SIZE_E
 
íSize
[3] = {
PIC_HD1080
, 
PIC_HD720
, 
PIC_D1
};

1182 
HI_U32
 
u32Profûe
 = 3;

1184 
VB_CONF_S
 
°VbC⁄f
;

1185 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
 = {0};

1187 
VPSS_GRP
 
VpssGΩ
;

1188 
VPSS_CHN
 
VpssChn
;

1189 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

1190 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

1191 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

1194 
VENC_CHN
 
VícChn
;

1195 
SAMPLE_RC_E
 
íRcMode
 = 
SAMPLE_RC_CBR
;

1196 
HI_S32
 
s32ChnNum
 = 1;

1198 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1199 
HI_U32
 
u32BlkSize
;

1200 
SIZE_S
 
°Size
;

1201 
c
;

1206 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1208 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
[0]);

1210 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1213 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

1214 
íSize
[0], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1215 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1216 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 10;

1218 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

1219 
íSize
[1], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1220 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1221 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 6;

1223 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, \

1224 
íSize
[2], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1225 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkSize
 = u32BlkSize;

1226 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkC¡
 = 6;

1232 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1233 i‡(
HI_SUCCESS
 !
s32Rë
)

1235 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1236 
END_VENC_1080P_CLASSIC_0
;

1242 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

1243 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

1244 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

1245 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

1246 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

1247 i‡(
HI_SUCCESS
 !
s32Rë
)

1249 
SAMPLE_PRT
("start vi failed!\n");

1250 
END_VENC_1080P_CLASSIC_1
;

1256 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
[0], &
°Size
);

1257 i‡(
HI_SUCCESS
 !
s32Rë
)

1259 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1260 
END_VENC_1080P_CLASSIC_1
;

1263 
VpssGΩ
 = 0;

1264 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1265 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1266 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

1267 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

1268 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

1269 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

1270 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1271 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

1272 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

1273 i‡(
HI_SUCCESS
 !
s32Rë
)

1275 
SAMPLE_PRT
("Start Vpss failed!\n");

1276 
END_VENC_1080P_CLASSIC_2
;

1279 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

1280 i‡(
HI_SUCCESS
 !
s32Rë
)

1282 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

1283 
END_VENC_1080P_CLASSIC_3
;

1286 
VpssChn
 = 0;

1287 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1288 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1289 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

1290 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1291 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1292 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1293 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

1294 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1295 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1296 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

1297 i‡(
HI_SUCCESS
 !
s32Rë
)

1299 
SAMPLE_PRT
("Enable vpss chn failed!\n");

1300 
END_VENC_1080P_CLASSIC_4
;

1307 
¥ötf
("\t c) cbr.\n");

1308 
¥ötf
("\t v) vbr.\n");

1309 
¥ötf
("\t f) fixQp\n");

1310 
¥ötf
("please input chooseÑc mode!\n");

1311 
c
 = 
gëch¨
();

1312 
c
)

1315 
íRcMode
 = 
SAMPLE_RC_CBR
;

1318 
íRcMode
 = 
SAMPLE_RC_VBR
;

1321 
íRcMode
 = 
SAMPLE_RC_FIXQP
;

1324 
¥ötf
("rc mode! is invaild!\n");

1325 
END_VENC_1080P_CLASSIC_4
;

1327 
VpssGΩ
 = 0;

1328 
VpssChn
 = 0;

1329 
VícChn
 = 0;

1330 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
, \

1331 
gs_íN‹m
, 
íSize
[0], 
íRcMode
, 
u32Profûe
);

1333 
¥ötf
("SAMPLE_COMM_VENC_Start is ok\n");

1335 i‡(
HI_SUCCESS
 !
s32Rë
)

1337 
SAMPLE_PRT
("Start Venc failed!\n");

1338 
END_VENC_1080P_CLASSIC_5
;

1341 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

1343 
¥ötf
("SAMPLE_COMM_VENC_BindVpss is ok\n");

1346 i‡(
HI_SUCCESS
 !
s32Rë
)

1348 
SAMPLE_PRT
("Start Venc failed!\n");

1349 
END_VENC_1080P_CLASSIC_5
;

1355 
s32Rë
 = 
SAMPLE_COMM_VENC_SèπGëSåóm_Svc_t
(
s32ChnNum
);

1357 i‡(
HI_SUCCESS
 !
s32Rë
)

1359 
SAMPLE_PRT
("Start Venc failed!\n");

1360 
END_VENC_1080P_CLASSIC_5
;

1363 
¥ötf
("pleaseÖress ENTERÅoÉxitÅhis sample\n");

1364 
gëch¨
();

1365 
gëch¨
();

1370 
SAMPLE_COMM_VENC_St›GëSåóm
();

1372 
¥ötf
("SAMPLE_COMM_VENC_StopGetStream is ok\n");

1373 
END_VENC_1080P_CLASSIC_5
:

1374 
VpssGΩ
 = 0;

1376 
VpssChn
 = 0;

1377 
VícChn
 = 0;

1378 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

1379 
SAMPLE_COMM_VENC_St›
(
VícChn
);

1383 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

1384 
END_VENC_1080P_CLASSIC_4
:

1385 
VpssGΩ
 = 0;

1386 
VpssChn
 = 0;

1387 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1388 
END_VENC_1080P_CLASSIC_3
:

1389 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

1390 
END_VENC_1080P_CLASSIC_2
:

1391 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

1392 
END_VENC_1080P_CLASSIC_1
:

1393 
SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

1394 
END_VENC_1080P_CLASSIC_0
:

1395 
SAMPLE_COMM_SYS_Exô
();

1396  
s32Rë
;

1402 
HI_S32
 
SAMPLE_VENC_H264_I¡øRe‰esh
(
HI_VOID
)

1404 
PAYLOAD_TYPE_E
 
íPayLﬂd
[3]{
PT_H264
, PT_H264, PT_H264};

1405 
PIC_SIZE_E
 
íSize
[3] = {
PIC_HD1080
, PIC_HD1080, 
PIC_D1
};

1406 
HI_U32
 
u32Profûe
 = 2;

1407 
d
;

1409 
VB_CONF_S
 
°VbC⁄f
;

1410 
SAMPLE_VI_CONFIG_S
 
°ViC⁄fig
 = {0};

1412 
VPSS_GRP
 
VpssGΩ
;

1413 
VPSS_CHN
 
VpssChn
;

1414 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

1415 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

1416 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

1418 
VENC_CHN
 
VícChn
;

1419 
VENC_CHN
 
VícChn1
 = 1;

1420 
SAMPLE_RC_E
 
íRcMode

SAMPLE_RC_CBR
;

1422 
HI_S32
 
s32ChnNum
 = 2;

1424 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1425 
HI_U32
 
u32BlkSize
;

1426 
SIZE_S
 
°Size
;

1427 
c
;

1432 
mem£t
(&
°VbC⁄f
,0,(
VB_CONF_S
));

1434 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
íSize
[0]);

1435 
SENSOR_TYPE
)

1437 
SONY_IMX178_LVDS_5M_30FPS
:

1438 
APTINA_AR0330_MIPI_1536P_25FPS
:

1439 
APTINA_AR0330_MIPI_1296P_25FPS
:

1440 
íSize
[1] = 
PIC_HD720
;

1446 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1449 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,\

1450 
íSize
[0], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1451 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1452 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 20;

1454 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,\

1455 
íSize
[1], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1456 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1457 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 =20;

1459 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
,\

1460 
íSize
[2], 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1461 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkSize
 = u32BlkSize;

1462 
°VbC⁄f
.
a°CommPoﬁ
[2].
u32BlkC¡
 = 20;

1468 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1469 i‡(
HI_SUCCESS
 !
s32Rë
)

1471 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1472 
END_VENC_1080P_CLASSIC_0
;

1478 
°ViC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

1479 
°ViC⁄fig
.
íRŸ©e
 = 
ROTATE_NONE
;

1480 
°ViC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_AUTO
;

1481 
°ViC⁄fig
.
íViChnSë
 = 
VI_CHN_SET_NORMAL
;

1482 
°ViC⁄fig
.
íWDRMode
 = 
WDR_MODE_NONE
;

1483 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(&
°ViC⁄fig
);

1484 i‡(
HI_SUCCESS
 !
s32Rë
)

1486 
SAMPLE_PRT
("start vi failed!\n");

1487 
END_VENC_1080P_CLASSIC_1
;

1493 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íSize
[0], &
°Size
);

1494 i‡(
HI_SUCCESS
 !
s32Rë
)

1496 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1497 
END_VENC_1080P_CLASSIC_1
;

1500 
VpssGΩ
 = 0;

1501 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1502 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1503 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

1504 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

1505 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

1506 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

1507 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1508 
°VpssGΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

1510 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

1511 i‡(
HI_SUCCESS
 !
s32Rë
)

1513 
SAMPLE_PRT
("Start Vpss failed!\n");

1514 
END_VENC_1080P_CLASSIC_2
;

1517 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
°ViC⁄fig
.
íViMode
);

1518 i‡(
HI_SUCCESS
 !
s32Rë
)

1520 
SAMPLE_PRT
("Vi bind Vpss failed!\n");

1521 
END_VENC_1080P_CLASSIC_3
;

1524 
VpssChn
 = 0;

1525 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1526 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1527 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

1528 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1529 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1530 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

1531 
mem£t
(&
°VpssChnAâr
, 0, (stVpssChnAttr));

1532 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1533 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1534 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

1535 i‡(
HI_SUCCESS
 !
s32Rë
)

1537 
SAMPLE_PRT
("Enable vpss chn failed!\n");

1538 
END_VENC_1080P_CLASSIC_4
;

1541 
VpssChn
 = 1;

1542 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1543 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1544 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

1545 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1546 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1547 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

1548 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1549 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1550 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

1551 i‡(
HI_SUCCESS
 !
s32Rë
)

1553 
SAMPLE_PRT
("Enable vpss chn failed!\n");

1554 
END_VENC_1080P_CLASSIC_4
;

1557 if((
SONY_IMX178_LVDS_5M_30FPS
 !
SENSOR_TYPE
)

1558 && (
APTINA_AR0330_MIPI_1536P_25FPS
 !
SENSOR_TYPE
)

1559 && (
APTINA_AR0330_MIPI_1296P_25FPS
 !
SENSOR_TYPE
))

1562 
VpssChn
 = 2;

1563 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1564 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1565 
°VpssChnMode
.
íPixñF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

1566 
°VpssChnMode
.
u32Width
 = 720;

1567 
°VpssChnMode
.
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
==
gs_íN‹m
)?576:480;;

1568 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1570 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1571 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1573 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, 
HI_NULL
);

1574 i‡(
HI_SUCCESS
 !
s32Rë
)

1576 
SAMPLE_PRT
("Enable vpss chn failed!\n");

1577 
END_VENC_1080P_CLASSIC_4
;

1584 
¥ötf
("\t c) cbr.\n");

1585 
¥ötf
("\t v) vbr.\n");

1586 
¥ötf
("\t f) fixQp\n");

1587 
¥ötf
("please input chooseÑc mode!\n");

1588 
c
 = 
gëch¨
();

1589 
c
)

1592 
íRcMode
 = 
SAMPLE_RC_CBR
;

1595 
íRcMode
 = 
SAMPLE_RC_VBR
;

1598 
íRcMode
 = 
SAMPLE_RC_FIXQP
;

1601 
¥ötf
("rc mode! is invaild!\n");

1602 
END_VENC_1080P_CLASSIC_4
;

1604 
VpssGΩ
 = 0;

1605 
VpssChn
 = 0;

1606 
VícChn
 = 0;

1607 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn
, 
íPayLﬂd
[0], 
gs_íN‹m
, 
íSize
[0], 
íRcMode
,
u32Profûe
);

1608 i‡(
HI_SUCCESS
 !
s32Rë
)

1610 
SAMPLE_PRT
("Start Venc failed!\n");

1611 
END_VENC_1080P_CLASSIC_5
;

1614 
VpssGΩ
 = 0;

1615 
VpssChn
 = 0;

1616 
VícChn1
 = 1;

1618 
s32Rë
 = 
SAMPLE_COMM_VENC_Sèπ
(
VícChn1
, 
íPayLﬂd
[0], 
gs_íN‹m
, 
íSize
[0], 
íRcMode
,
u32Profûe
);

1619 i‡(
HI_SUCCESS
 !
s32Rë
)

1621 
SAMPLE_PRT
("Start Venc failed!\n");

1622 
END_VENC_1080P_CLASSIC_5
;

1626 
VENC_RC_PARAM_S
 
°RcP¨am
;

1627 
HI_MPI_VENC_GëRcP¨am
(
VícChn
, &
°RcP¨am
);

1628 
°RcP¨am
.
u32ThrdI
[0] = 5;

1629 
°RcP¨am
.
u32ThrdI
[1] = 5;

1630 
°RcP¨am
.
u32ThrdI
[2] = 5;

1631 
°RcP¨am
.
u32ThrdI
[3] = 10;

1632 
°RcP¨am
.
u32ThrdI
[4] = 10;

1633 
°RcP¨am
.
u32ThrdI
[5] = 15;

1634 
°RcP¨am
.
u32ThrdI
[6] = 15;

1638 
°RcP¨am
.
u32ThrdP
[0] = 5;

1639 
°RcP¨am
.
u32ThrdP
[1] = 5;

1640 
°RcP¨am
.
u32ThrdP
[2] = 5;

1641 
°RcP¨am
.
u32ThrdP
[3] = 9;

1642 
°RcP¨am
.
u32ThrdP
[4] = 9;

1643 
°RcP¨am
.
u32ThrdP
[5] = 15;

1644 
°RcP¨am
.
u32ThrdP
[6] = 15;

1648 
°RcP¨am
.
u32RowQpDñè
 = 4;

1650 
°RcP¨am
.
°P¨amH264Cbr
.
s32IPQPDñè
 = -1;

1651 
HI_MPI_VENC_SëRcP¨am
(
VícChn
, &
°RcP¨am
);

1652 
HI_MPI_VENC_Reque°IDR
(
VícChn
, 
HI_TRUE
);

1656 
VENC_PARAM_INTRA_REFRESH_S
 
°I¡øRe‰esh
;

1657 
°I¡øRe‰esh
.
bRe‰eshE«bÀ
 = 
HI_TRUE
;

1658 
°I¡øRe‰esh
.
bISli˚E«bÀ
 = 
HI_TRUE
;

1659 
°I¡øRe‰esh
.
u32Re‰eshLöeNum
 = 9;

1660 
°I¡øRe‰esh
.
u32ReqIQp
 = 40;

1662 
HI_MPI_VENC_SëI¡øRe‰esh
(
VícChn
, &
°I¡øRe‰esh
);

1665 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

1666 i‡(
HI_SUCCESS
 !
s32Rë
)

1668 
SAMPLE_PRT
("Start Venc failed!\n");

1669 
END_VENC_1080P_CLASSIC_5
;

1672 
s32Rë
 = 
SAMPLE_COMM_VENC_BödVpss
(
VícChn1
, 
VpssGΩ
, 
VpssChn
);

1673 i‡(
HI_SUCCESS
 !
s32Rë
)

1675 
SAMPLE_PRT
("Start Venc failed!\n");

1676 
END_VENC_1080P_CLASSIC_5
;

1683 
s32Rë
 = 
SAMPLE_COMM_VENC_SèπGëSåóm
(
s32ChnNum
);

1684 i‡(
HI_SUCCESS
 !
s32Rë
)

1686 
SAMPLE_PRT
("Start Venc failed!\n");

1687 
END_VENC_1080P_CLASSIC_5
;

1694 
¥ötf
("Input 'i'ÅoÑequest IDR, 'q'ÅoÉxitÅhis sample\n");

1698 
VENC_RC_PARAM_S
 
°RcP¨am
;

1700 
d
 = 
gëch¨
();

1702 i‡(
d
 == 'i')

1704 
¥ötf
("Insert IDR\n");

1705 
HI_MPI_VENC_Reque°IDR
(0, 
HI_TRUE
);

1707 i‡(
d
 == 'q')

1709 
¥ötf
("Quit! \n");

1726 
SAMPLE_COMM_VENC_St›GëSåóm
();

1728 
END_VENC_1080P_CLASSIC_5
:

1729 
VpssGΩ
 = 0;

1730 
VpssChn
 = 0;

1731 
VícChn
 = 0;

1732 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

1733 
SAMPLE_COMM_VENC_St›
(
VícChn
);

1735 
SAMPLE_COMM_VENC_UnBödVpss
(
VícChn1
, 
VpssGΩ
, 
VpssChn
);

1736 
SAMPLE_COMM_VENC_St›
(
VícChn1
);

1739 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

1740 
END_VENC_1080P_CLASSIC_4
:

1741 
VpssGΩ
 = 0;

1742 
VpssChn
 = 0;

1743 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1745 
VpssChn
 = 1;

1746 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1747 if(
SONY_IMX178_LVDS_5M_30FPS
 !
SENSOR_TYPE
)

1749 
VpssChn
 = 2;

1750 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1754 
END_VENC_1080P_CLASSIC_3
:

1755 
SAMPLE_COMM_VI_UnBödVpss
(
°ViC⁄fig
.
íViMode
);

1756 
END_VENC_1080P_CLASSIC_2
:

1757 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

1758 
END_VENC_1080P_CLASSIC_1
:

1759 
SAMPLE_COMM_VI_St›Vi
(&
°ViC⁄fig
);

1760 
END_VENC_1080P_CLASSIC_0
:

1761 
SAMPLE_COMM_SYS_Exô
();

1763  
s32Rë
;

1772 
maö
(
¨gc
, * 
¨gv
[])

1774 
HI_S32
 
s32Rë
;

1775 i‡–(
¨gc
 < 2Ë|| (1 !
°æí
(
¨gv
[1])))

1777 
SAMPLE_VENC_Ußge
(
¨gv
[0]);

1778  
HI_FAILURE
;

1781 
sig«l
(
SIGINT
, 
SAMPLE_VENC_H™dÀSig
);

1782 
sig«l
(
SIGTERM
, 
SAMPLE_VENC_H™dÀSig
);

1784 *
¨gv
[1])

1787 
s32Rë
 = 
SAMPLE_VENC_1080P_CLASSIC
();

1790 
s32Rë
 = 
SAMPLE_VENC_1080P_MJPEG_JPEG
();

1793 
s32Rë
 = 
SAMPLE_VENC_LOW_DELAY
();

1796 
s32Rë
 = 
SAMPLE_VENC_ROIBG_CLASSIC
();

1799 
s32Rë
 = 
SAMPLE_VENC_SVC_H264
();

1802 
s32Rë
 = 
SAMPLE_VENC_H264_I¡øRe‰esh
();

1805 
¥ötf
("the index is invaild!\n");

1806 
SAMPLE_VENC_Ußge
(
¨gv
[0]);

1807  
HI_FAILURE
;

1810 i‡(
HI_SUCCESS
 =
s32Rë
)

1811 { 
¥ötf
("programÉxitÇormally!\n"); }

1813 { 
¥ötf
("programÉxitábnormally!\n"); }

1814 
exô
(
s32Rë
);

1817 #ifde‡
__˝lu•lus


1818 #i‡
__˝lu•lus


	@sample/vio/sample_vio.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

18 
	~<±hªad.h
>

19 
	~<sig«l.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<f˙é.h
>

23 
	~<sys/io˘l.h
>

25 
	~"ßm∂e_comm.h
"

28 
VIDEO_NORM_E
 
gs_íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

29 
VO_INTF_TYPE_E
 
g_íVoI¡fTy≥
 = 
VO_INTF_CVBS
;

30 
PIC_SIZE_E
 
g_íPicSize
 = 
PIC_HD1080
;

32 
SAMPLE_VIDEO_LOSS_S
 
gs_°VideoLoss
;

33 
HI_U32
 
gs_u32ViFrmR©e
 = 0;

35 
SAMPLE_VI_CONFIG_S
 
g_°ViChnC⁄fig
 =

37 
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
,

38 
VIDEO_ENCODING_MODE_AUTO
,

40 
ROTATE_NONE
,

41 
VI_CHN_SET_NORMAL
,

42 
WDR_MODE_NONE


48 
SAMPLE_VIO_Ußge
(* 
sPrgNm
)

50 
¥ötf
("Ußgê: %†<ödex> <ötf>\n", 
sPrgNm
);

51 
¥ötf
("index:\n");

52 
¥ötf
("\t 0)online mode VI/VPSS,1080P; VO(0:SD0(CVBS), 1:BT1120). Embeded isp,Öhychn channelÖreview.\n");

53 
¥ötf
("\t 1)online mode VI(WDR)/VPSS,1080P); VO(0:SD0(CVBS), 1:BT1120).Embeded isp,phychn channelÖreview.\n");

54 
¥ötf
("\t 2)online mode VI(FPN)/VPSS,1080P; VO(0:SD0(CVBS), 1:BT1120).frame mode FPN,Embeded isp,phychn channelÖreview.\n");

55 
¥ötf
("\t 3)online mode VI/VPSS(LDC),1080P; VO(0:SD0(CVBS), 1:BT1120).Embeded isp, online LDC,Öhychn channelÖreview.\n");

56 
¥ötf
("\t 4)online mode VI/VPSS(ROTATE),1080P; VO(0:SD0(CVBS), 1:BT1120).Embeded isp, online,Ñotate,Öhychn channelÖreview.\n");

57 
¥ötf
("\t 5)offline mode VI(ROTATE),1080P; VO(0:SD0(CVBS), 1:BT1120).Embeded isp, offline,Ñotate,Öhychn channelÖreview.\n");

58 
¥ötf
("\t 6)offline mode VI(LDC),1080P; VO(0:SD0(CVBS), 1:BT1120).Embeded isp, offline, LDC,Öhychn channelÖreview.\n");

59 
¥ötf
("\t 7)offline mode VI(DIS),1080P; VO(0:SD0(CVBS), 1:BT1120).Embeded isp, offline, DIS,Öhychn channelÖreview.\n");

60 
¥ötf
("\t 8)offline mode VI: BT1120; VO(0:SD0(CVBS), 1:BT1120).Isp bypass,Öhychn channelÖreview.\n");

61 
¥ötf
("\t 9)offline mode VI; VO(0:SD0(CVBS), 1:BT1120).Embeded isp,Ñesolution switch.\n");

62 
¥ötf
("intf:\n");

63 
¥ötf
("\t 0) vo cvbs output, default.\n");

64 
¥ötf
("\t 1) vo BT1120 output.\n");

72 
SAMPLE_VIO_H™dÀSig
(
HI_S32
 
signo
)

74 i‡(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

76 
SAMPLE_COMM_ISP_St›
();

77 
SAMPLE_COMM_SYS_Exô
();

78 
¥ötf
("\033[0;31mprogramÅerminationábnormally!\033[0;39m\n");

80 
exô
(-1);

87 
HI_S32
 
SAMPLE_VIO_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

89 
HI_U32
 
u32ViChnC¡
 = 2;

90 
VB_CONF_S
 
°VbC⁄f
;

91 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

92 
VO_CHN
 
VoChn
 = 0;

93 
VO_PUB_ATTR_S
 
°VoPubAâr
;

94 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

95 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

96 
VO_LAYER
 
VoLayî
 = 0;

97 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

98 
VPSS_GRP
 
VpssGΩ
 = 0;

99 
VPSS_CHN
 
VpssChn
 = 0;

100 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

101 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

102 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

103 
VPSS_EXT_CHN_ATTR_S
 
°VpssExtChnAâr
;

105 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

106 
HI_U32
 
u32BlkSize
;

107 
SIZE_S
 
°Size
;

108 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

113 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

114 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

116 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

117 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

118 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

121 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

122 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

127 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

128 i‡(
HI_SUCCESS
 !
s32Rë
)

130 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

131 
END_1080P_0
;

134 i‡(
p°ViC⁄fig
)

136 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

137 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

139 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

140 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

141 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

142 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

143 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

150 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

151 i‡(
HI_SUCCESS
 !
s32Rë
)

153 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

154 
END_1080P_0
;

160 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

161 i‡(
HI_SUCCESS
 !
s32Rë
)

163 
SAMPLE_PRT
("start vi failed!\n");

164 
END_1080P_0
;

167 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

168 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

169 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

170 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

171 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

172 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

174 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

175 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

181 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

182 i‡(
HI_SUCCESS
 !
s32Rë
)

184 
SAMPLE_PRT
("start VPSS GROUP failed!\n");

185 
END_1080P_1
;

188 
°VpssChnAâr
.
bB‹dîEn
 = 0;

189 
°VpssChnAâr
.
bFlù
 = 0;

190 
°VpssChnAâr
.
bMúr‹
 = 0;

191 
°VpssChnAâr
.
bSpEn
 = 0 ;

192 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

193 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

194 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

195 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

196 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

197 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

198 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

199 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

204 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, &
°VpssExtChnAâr
);

205 i‡(
HI_SUCCESS
 !
s32Rë
)

207 
SAMPLE_PRT
("start VPSS CHN failed!\n");

208 
END_1080P_1
;

214 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

215 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

217 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

218 
gs_u32ViFrmR©e
 = 50;

222 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

224 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

227 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

228 i‡(
HI_SUCCESS
 !
s32Rë
)

230 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

231 
END_1080P_2
;

234 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

235 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

236 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

238 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

239 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

241 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

242 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

243 &
°LayîAâr
.
u32Di•FrmRt
);

244 i‡(
HI_SUCCESS
 !
s32Rë
)

246 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

247 
END_1080P_2
;

250 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

251 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

253 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

254 i‡(
HI_SUCCESS
 !
s32Rë
)

256 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

257 
END_1080P_3
;

260 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

261 i‡(
HI_SUCCESS
 !
s32Rë
)

263 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

264 
END_1080P_4
;

268 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

270 i‡(
HI_SUCCESS
 !
s32Rë
)

272 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

273 
END_1080P_5
;

276 
VI_PAUSE
();

281 
END_1080P_5
:

282 
SAMPLE_COMM_VO_UnBödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

283 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

284 
END_1080P_4
:

285 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

286 
END_1080P_3
:

287 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

288 
END_1080P_2
:

289 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

290 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

291 
END_1080P_1
:

292 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

293 
END_1080P_0
:

294 
SAMPLE_COMM_SYS_Exô
();

295  
s32Rë
;

302 
HI_S32
 
SAMPLE_VIO_LINE_WDR_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

304 
HI_U32
 
u32ViChnC¡
 = 2;

305 
VB_CONF_S
 
°VbC⁄f
;

306 
VI_DEV
 
ViDev
 = 0;

307 
VI_CHN
 
ViChn
 = 0;

308 
VI_DEV_ATTR_S
 
°ViDevAâr
;

309 
ISP_DEV
 
I•Dev
 = 0;

310 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

311 
VO_CHN
 
VoChn
 = 0;

312 
VO_PUB_ATTR_S
 
°VoPubAâr
;

313 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

314 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

315 
VO_LAYER
 
VoLayî
 = 0;

316 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

317 
VPSS_GRP
 
VpssGΩ
 = 0;

318 
VPSS_CHN
 
VpssChn
 = 0;

319 
ISP_WDR_MODE_S
 
°WDRMode
;

320 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

321 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

322 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

323 
VPSS_EXT_CHN_ATTR_S
 
°VpssExtChnAâr
;

324 
HI_U32
 
u32Mode
 = 0;

325 
WDR_MODE_E
 
íOldWDRMode
;

326 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

327 
HI_U32
 
u32BlkSize
;

328 
SIZE_S
 
°Size
;

329 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

330 
HI_U32
 
u32Times
 = 2;

332 
ISP_INNER_STATE_INFO_S
 
°I¬îSèãInfo
 = {0};

336 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

337 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

339 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

340 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

341 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

344 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

345 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

350 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

351 i‡(
HI_SUCCESS
 !
s32Rë
)

353 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

354 
END_1080P_0
;

357 i‡(
p°ViC⁄fig
)

359 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

360 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

362 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

363 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

364 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

365 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

366 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

373 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

374 i‡(
HI_SUCCESS
 !
s32Rë
)

376 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

377 
END_1080P_0
;

384 
°WdrMode
.
íWDRMode
 = 
WDR_MODE_2To1_LINE
;

385 
s32Rë
 = 
HI_MPI_ISP_SëWDRMode
(0, &
°WdrMode
);

386 i‡(
HI_SUCCESS
 !
s32Rë
)

388 
SAMPLE_PRT
("start WDR failed!\n");

389 
END_1080P_0
;

397 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

398 i‡(
HI_SUCCESS
 !
s32Rë
)

400 
SAMPLE_PRT
("start vi failed!\n");

401 
END_1080P_0
;

404 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

405 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

406 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

407 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

408 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

409 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

410 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

411 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

416 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

417 i‡(
HI_SUCCESS
 !
s32Rë
)

419 
SAMPLE_PRT
("start VPSS GROUP failed!\n");

420 
END_1080P_1
;

423 
°VpssChnAâr
.
bB‹dîEn
 = 0;

424 
°VpssChnAâr
.
bFlù
 = 0;

425 
°VpssChnAâr
.
bMúr‹
 = 0;

426 
°VpssChnAâr
.
bSpEn
 = 0 ;

427 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

428 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

429 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

430 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

431 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

432 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

433 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

434 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

439 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, &
°VpssExtChnAâr
);

440 i‡(
HI_SUCCESS
 !
s32Rë
)

442 
SAMPLE_PRT
("start VPSS CHN failed!\n");

443 
END_1080P_1
;

449 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

450 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

452 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

453 
gs_u32ViFrmR©e
 = 50;

457 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

459 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

462 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

463 i‡(
HI_SUCCESS
 !
s32Rë
)

465 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

466 
END_1080P_2
;

469 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

470 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

471 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

472 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

473 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

475 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

476 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

477 &
°LayîAâr
.
u32Di•FrmRt
);

478 i‡(
HI_SUCCESS
 !
s32Rë
)

480 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

481 
END_1080P_2
;

483 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

484 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

486 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

487 i‡(
HI_SUCCESS
 !
s32Rë
)

489 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

490 
END_1080P_3
;

493 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

494 i‡(
HI_SUCCESS
 !
s32Rë
)

496 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

497 
END_1080P_4
;

500 
HI_MPI_SYS_GëViVpssMode
(&
u32Mode
);

501 i‡(!
u32Mode
)

503 
s32Rë
 = 
SAMPLE_COMM_VI_BödVpss
(
p°ViC⁄fig
->
íViMode
);

504 i‡(
HI_SUCCESS
 !
s32Rë
)

506 
SAMPLE_PRT
("SAMPLE_COMM_VI_BödVps†Áûed wôh %#x!\n", 
s32Rë
);

507 
END_1080P_5
;

511 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

512 i‡(
HI_SUCCESS
 !
s32Rë
)

514 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

515 
END_1080P_6
;

518 
s32Rë
 = 
HI_MPI_VI_GëDevAâr
(
ViDev
, &
°ViDevAâr
);

519 i‡(
s32Rë
 !
HI_SUCCESS
)

521 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

522 
END_1080P_6
;

525 
íOldWDRMode
 = 
p°ViC⁄fig
->
íWDRMode
;

527 
u32Times
 > 0)

529 
u32Times
--;

530 
VI_PAUSE
();

532 
s32Rë
 = 
HI_MPI_ISP_SëFMWSèã
(
I•Dev
, 
ISP_FMW_STATE_FREEZE
);

533 i‡(
s32Rë
 !
HI_SUCCESS
)

535 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

536 
END_1080P_6
;

538 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

539 i‡(
s32Rë
 !
HI_SUCCESS
)

541 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

542 
END_1080P_6
;

545 
s32Rë
 = 
HI_MPI_VI_DißbÀDev
(
ViDev
);

546 i‡(
s32Rë
 !
HI_SUCCESS
)

548 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

549 
END_1080P_6
;

551 
p°ViC⁄fig
->
íWDRMode
 = 
WDR_MODE_NONE
;

552 
s32Rë
 = 
SAMPLE_COMM_VI_SèπMIPI
(
p°ViC⁄fig
);

553 i‡(
s32Rë
 !
HI_SUCCESS
)

555 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

556 
END_1080P_6
;

559 
s32Rë
 = 
HI_MPI_ISP_SëFMWSèã
(
I•Dev
, 
ISP_FMW_STATE_RUN
);

560 i‡(
s32Rë
 !
HI_SUCCESS
)

562 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

563 
END_1080P_6
;

566 
°WDRMode
.
íWDRMode
 = 
p°ViC⁄fig
->enWDRMode;

567 
s32Rë
 = 
HI_MPI_ISP_SëWDRMode
(
I•Dev
, &
°WDRMode
);

568 i‡(
s32Rë
 !
HI_SUCCESS
)

570 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

571 
END_1080P_6
;

576 
HI_MPI_ISP_QuîyI¬îSèãInfo
(
I•Dev
, &
°I¬îSèãInfo
);

577 i‡(
HI_TRUE
 =
°I¬îSèãInfo
.
bWDRSwôchFöish
)

579 
SAMPLE_PRT
("wdr switch finish!\n");

582 
u¶ìp
(10000);

585 
s32Rë
 = 
SAMPLE_COMM_VI_SèπDev
(
ViDev
, 
p°ViC⁄fig
->
íViMode
);

586 i‡(
s32Rë
 !
HI_SUCCESS
)

588 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

589 
END_1080P_6
;

592 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ViChn
);

593 i‡(
s32Rë
 !
HI_SUCCESS
)

595 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

596 
END_1080P_6
;

599 
VI_PAUSE
();

600 
s32Rë
 = 
HI_MPI_ISP_SëFMWSèã
(
I•Dev
, 
ISP_FMW_STATE_FREEZE
);

601 i‡(
s32Rë
 !
HI_SUCCESS
)

603 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

604 
END_1080P_6
;

607 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

608 i‡(
s32Rë
 !
HI_SUCCESS
)

610 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

611 
END_1080P_6
;

614 
s32Rë
 = 
HI_MPI_VI_DißbÀDev
(
ViDev
);

615 i‡(
s32Rë
 !
HI_SUCCESS
)

617 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

618 
END_1080P_6
;

620 
p°ViC⁄fig
->
íWDRMode
 = 
íOldWDRMode
;

621 
s32Rë
 = 
SAMPLE_COMM_VI_SèπMIPI
(
p°ViC⁄fig
);

622 i‡(
s32Rë
 !
HI_SUCCESS
)

624 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

625 
END_1080P_6
;

628 
s32Rë
 = 
HI_MPI_ISP_SëFMWSèã
(
I•Dev
, 
ISP_FMW_STATE_RUN
);

629 i‡(
s32Rë
 !
HI_SUCCESS
)

631 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

632 
END_1080P_6
;

635 
°WDRMode
.
íWDRMode
 = 
p°ViC⁄fig
->enWDRMode;

636 
s32Rë
 = 
HI_MPI_ISP_SëWDRMode
(
I•Dev
, &
°WDRMode
);

637 i‡(
s32Rë
 !
HI_SUCCESS
)

639 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

640 
END_1080P_6
;

645 
HI_MPI_ISP_QuîyI¬îSèãInfo
(
I•Dev
, &
°I¬îSèãInfo
);

646 i‡(
HI_TRUE
 =
°I¬îSèãInfo
.
bWDRSwôchFöish
)

648 
SAMPLE_PRT
("wdr switch finish!\n");

651 
u¶ìp
(10000);

654 
s32Rë
 = 
SAMPLE_COMM_VI_SèπDev
(
ViDev
, 
p°ViC⁄fig
->
íViMode
);

655 i‡(
s32Rë
 !
HI_SUCCESS
)

657 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

658 
END_1080P_6
;

661 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ViChn
);

662 i‡(
s32Rë
 !
HI_SUCCESS
)

664 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

665 
END_1080P_6
;

668 
VI_PAUSE
();

673 
END_1080P_6
:

674 
SAMPLE_COMM_VO_UnBödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

675 
END_1080P_5
:

676 i‡(!
u32Mode
)

678 
SAMPLE_COMM_VI_UnBödVpss
(
p°ViC⁄fig
->
íViMode
);

681 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

682 
END_1080P_4
:

683 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

684 
END_1080P_3
:

685 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

686 
END_1080P_2
:

687 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

688 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

689 
END_1080P_1
:

690 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

691 
END_1080P_0
:

692 
SAMPLE_COMM_SYS_Exô
();

693  
s32Rë
;

700 
HI_S32
 
SAMPLE_VIO_FRAME_FPN_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

702 
HI_U32
 
u32ViChnC¡
 = 2;

703 
VB_CONF_S
 
°VbC⁄f
;

704 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

705 
VO_CHN
 
VoChn
 = 0;

706 
VO_PUB_ATTR_S
 
°VoPubAâr
;

707 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

708 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

709 
VO_LAYER
 
VoLayî
 = 0;

710 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

711 
VPSS_GRP
 
VpssGΩ
 = 0;

712 
VPSS_CHN
 
VpssChn
 = 0;

713 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

714 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

715 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

716 
VPSS_EXT_CHN_ATTR_S
 
°VpssExtChnAâr
;

719 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

720 
HI_U32
 
u32BlkSize
;

721 
SIZE_S
 
°Size
;

722 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

727 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

728 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

730 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

731 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
, 
SAMPLE_SYS_ALIGN_WIDTH
);

732 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

735 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

736 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

741 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

742 i‡(
HI_SUCCESS
 !
s32Rë
)

744 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

745 
END_1080P_0
;

748 i‡(
p°ViC⁄fig
)

750 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

751 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

753 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

754 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

755 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

756 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

757 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

764 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

765 i‡(
HI_SUCCESS
 !
s32Rë
)

767 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

768 
END_1080P_0
;

774 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

775 i‡(
HI_SUCCESS
 !
s32Rë
)

777 
SAMPLE_PRT
("start vi failed!\n");

778 
END_1080P_0
;

782 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

783 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

784 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

785 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

786 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

787 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

789 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

790 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

795 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

796 i‡(
HI_SUCCESS
 !
s32Rë
)

798 
SAMPLE_PRT
("start VPSS GROUP failed!\n");

799 
END_1080P_1
;

802 
°VpssChnAâr
.
bB‹dîEn
 = 0;

803 
°VpssChnAâr
.
bFlù
 = 0;

804 
°VpssChnAâr
.
bMúr‹
 = 0;

805 
°VpssChnAâr
.
bSpEn
 = 0 ;

806 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

807 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

808 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

809 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

810 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_SEG
;

811 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

812 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

813 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

818 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, &
°VpssExtChnAâr
);

819 i‡(
HI_SUCCESS
 !
s32Rë
)

821 
SAMPLE_PRT
("start VPSS CHN failed!\n");

822 
END_1080P_1
;

828 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

829 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

831 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

832 
gs_u32ViFrmR©e
 = 50;

836 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

838 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

841 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

842 i‡(
HI_SUCCESS
 !
s32Rë
)

844 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

845 
END_1080P_2
;

848 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

849 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

850 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

852 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

853 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

855 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

856 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

857 &
°LayîAâr
.
u32Di•FrmRt
);

858 i‡(
HI_SUCCESS
 !
s32Rë
)

860 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

861 
END_1080P_2
;

864 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

865 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

867 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

868 i‡(
HI_SUCCESS
 !
s32Rë
)

870 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

871 
END_1080P_3
;

874 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

875 i‡(
HI_SUCCESS
 !
s32Rë
)

877 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

878 
END_1080P_4
;

881 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

882 i‡(
HI_SUCCESS
 !
s32Rë
)

884 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

885 
END_1080P_5
;

888 c⁄° * 
Ân_fûe
 = "sample";

889 
ISP_FPN_TYPE_E
 
íF≤Ty≥
 = 
ISP_FPN_TYPE_FRAME
;

890 
PIXEL_FORMAT_E
 
íPixñF‹m©
 = 
PIXEL_FORMAT_RGB_BAYER
;

891 
COMPRESS_MODE_E
 
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

892 
HI_U32
 
u32FrmNum
 = 16;

893 
HI_U32
 
u32Thªshﬁd
 = 4095;

894 
fûeName
[
FILE_NAME_LEN
];

895 
VI_CHN_ATTR_S
 
°TempChnAâr
;

896 
VI_CHN
 
ViChn
 = 0;

900 
s32Rë
 = 
SAMPLE_COMM_VI_FPN_CALIBRATE_CONFIG
(
Ân_fûe
, 
íF≤Ty≥
,

901 
íPixñF‹m©
, 
íCom¥essMode
,

902 
u32FrmNum
, 
u32Thªshﬁd
);

903 i‡(
HI_SUCCESS
 !
s32Rë
)

905 
SAMPLE_PRT
("FPN cÆibøã faûed %#x!\n", 
s32Rë
);

906 
END_1080P_5
;

909 
ISP_OP_TYPE_E
 
íOpTy≥
 = 
OP_TYPE_AUTO
;

910 
HI_U32
 
u32Såígth
 = 0X100;

915 
s32Rë
 = 
HI_MPI_VI_GëChnAâr
(
ViChn
, &
°TempChnAâr
);

916 i‡(
HI_SUCCESS
 !
s32Rë
)

918 
¥ötf
("get vi chnáttr failed!");

919 
END_1080P_5
;

921 
¢¥ötf
(
fûeName
, 
FILE_NAME_LEN
, "./%s_%d_%d_%dbô.øw", 
Ân_fûe
, 
°TempChnAâr
.
°De°Size
.
u32Width
,

922 
°TempChnAâr
.
°De°Size
.
u32Height
 , 16);

923 
s32Rë
 = 
SAMPLE_COMM_VI_CORRECTION_CONFIG
(
fûeName
, 
íF≤Ty≥
, 
íOpTy≥
,

924 
u32Såígth
, 
íPixñF‹m©
);

925 i‡(
HI_SUCCESS
 !
s32Rë
)

927 
SAMPLE_PRT
("FPN c‹ª˘i⁄ faûed %#x!\n", 
s32Rë
);

928 
END_1080P_5
;

935 
END_1080P_5
:

936 
SAMPLE_COMM_VO_UnBödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

937 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

938 
END_1080P_4
:

939 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

940 
END_1080P_3
:

941 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

942 
END_1080P_2
:

943 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

944 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

945 
END_1080P_1
:

946 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

947 
END_1080P_0
:

948 
SAMPLE_COMM_SYS_Exô
();

949  
s32Rë
;

956 
HI_S32
 
SAMPLE_VI_VPSS_LDC_VO_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

958 
HI_U32
 
u32ViChnC¡
 = 2;

959 
VB_CONF_S
 
°VbC⁄f
;

960 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

961 
VO_CHN
 
VoChn
 = 0;

962 
VO_PUB_ATTR_S
 
°VoPubAâr
;

963 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

964 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

965 
VO_LAYER
 
VoLayî
 = 0;

966 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

967 
VPSS_GRP
 
VpssGΩ
 = 0;

968 
VPSS_CHN
 
VpssChn
 = 0;

969 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

970 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

971 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

972 
VPSS_EXT_CHN_ATTR_S
 
°VpssExtChnAâr
;

974 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

975 
HI_U32
 
u32BlkSize
;

976 
SIZE_S
 
°Size
;

977 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

978 
VPSS_LDC_ATTR_S
 
°LDCAâr
;

983 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

984 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

986 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

987 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

988 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

991 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

992 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 15;

997 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

998 i‡(
HI_SUCCESS
 !
s32Rë
)

1000 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1001 
END_1080P_0
;

1004 i‡(
p°ViC⁄fig
)

1006 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

1007 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

1009 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1010 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1011 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

1012 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1013 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

1020 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1021 i‡(
HI_SUCCESS
 !
s32Rë
)

1023 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1024 
END_1080P_0
;

1030 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

1031 i‡(
HI_SUCCESS
 !
s32Rë
)

1033 
SAMPLE_PRT
("start vi failed!\n");

1034 
END_1080P_0
;

1038 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

1039 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

1040 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

1041 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

1042 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1043 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1044 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1045 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1050 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

1051 i‡(
HI_SUCCESS
 !
s32Rë
)

1053 
SAMPLE_PRT
("start VPSS GROUP failed!\n");

1054 
END_1080P_1
;

1057 
°VpssChnAâr
.
bB‹dîEn
 = 0;

1058 
°VpssChnAâr
.
bFlù
 = 0;

1059 
°VpssChnAâr
.
bMúr‹
 = 0;

1060 
°VpssChnAâr
.
bSpEn
 = 0 ;

1061 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1062 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1063 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1064 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1065 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1066 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1067 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1068 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1070 
°LDCAâr
.
bE«bÀ
 = 
HI_TRUE
;

1071 
°LDCAâr
.
°Aâr
.
íVõwTy≥
 = 
LDC_VIEW_TYPE_ALL
;

1072 
°LDCAâr
.
°Aâr
.
s32CíãrXOff£t
 = 0;

1073 
°LDCAâr
.
°Aâr
.
s32CíãrYOff£t
 = 0;

1074 
°LDCAâr
.
°Aâr
.
s32R©io
 = 168;

1076 
s32Rë
 = 
HI_MPI_VPSS_SëLDCAâr
(
VpssGΩ
, 
VpssChn
, &
°LDCAâr
);

1077 i‡(
HI_SUCCESS
 !
s32Rë
)

1079 
SAMPLE_PRT
("set LDC failed!\n");

1080 
END_1080P_1
;

1086 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, &
°VpssExtChnAâr
);

1087 i‡(
HI_SUCCESS
 !
s32Rë
)

1089 
SAMPLE_PRT
("start VPSS CHN failed!\n");

1090 
END_1080P_1
;

1096 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1097 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

1099 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

1100 
gs_u32ViFrmR©e
 = 50;

1104 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1106 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

1109 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

1110 i‡(
HI_SUCCESS
 !
s32Rë
)

1112 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

1113 
END_1080P_2
;

1116 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1117 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1118 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1120 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1121 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1123 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

1124 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

1125 &
°LayîAâr
.
u32Di•FrmRt
);

1126 i‡(
HI_SUCCESS
 !
s32Rë
)

1128 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

1129 
END_1080P_2
;

1131 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

1132 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

1134 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1135 i‡(
HI_SUCCESS
 !
s32Rë
)

1137 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1138 
END_1080P_3
;

1141 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

1142 i‡(
HI_SUCCESS
 !
s32Rë
)

1144 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1145 
END_1080P_4
;

1148 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

1150 i‡(
HI_SUCCESS
 !
s32Rë
)

1152 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

1153 
END_1080P_5
;

1156 
VI_PAUSE
();

1160 
END_1080P_5
:

1161 
SAMPLE_COMM_VO_UnBödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

1162 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

1163 
END_1080P_4
:

1164 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

1165 
END_1080P_3
:

1166 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

1167 
END_1080P_2
:

1168 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1169 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

1170 
END_1080P_1
:

1171 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

1172 
END_1080P_0
:

1173 
SAMPLE_COMM_SYS_Exô
();

1174  
s32Rë
;

1181 
HI_S32
 
SAMPLE_VI_VPSS_ROTATE_VO_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1183 
HI_U32
 
u32ViChnC¡
 = 2;

1184 
VB_CONF_S
 
°VbC⁄f
;

1185 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

1186 
VO_CHN
 
VoChn
 = 0;

1187 
VO_PUB_ATTR_S
 
°VoPubAâr
;

1188 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

1189 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

1190 
VO_LAYER
 
VoLayî
 = 0;

1191 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1192 
VPSS_GRP
 
VpssGΩ
 = 0;

1193 
VPSS_CHN
 
VpssChn
 = 0;

1194 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

1195 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

1196 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

1197 
VPSS_EXT_CHN_ATTR_S
 
°VpssExtChnAâr
;

1199 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1200 
HI_U32
 
u32BlkSize
;

1201 
SIZE_S
 
°Size
;

1202 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_90
;

1207 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

1208 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1210 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

1211 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1212 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1215 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1216 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

1221 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

1222 i‡(
HI_SUCCESS
 !
s32Rë
)

1224 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1225 
END_1080P_0
;

1228 i‡(
p°ViC⁄fig
)

1231 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

1233 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1234 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1235 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

1236 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1237 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 20;

1244 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1245 i‡(
HI_SUCCESS
 !
s32Rë
)

1247 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1248 
END_1080P_0
;

1254 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

1255 i‡(
HI_SUCCESS
 !
s32Rë
)

1257 
SAMPLE_PRT
("start vi failed!\n");

1258 
END_1080P_0
;

1261 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

1262 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

1263 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

1264 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

1265 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1266 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1267 
°VpssGΩAâr
.
u32MaxW
 = 
°Size
.
u32Width
;

1268 
°VpssGΩAâr
.
u32MaxH
 = 
°Size
.
u32Height
;

1273 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

1274 i‡(
HI_SUCCESS
 !
s32Rë
)

1276 
SAMPLE_PRT
("start VPSS GROUP failed!\n");

1277 
END_1080P_1
;

1280 
°VpssChnAâr
.
bB‹dîEn
 = 0;

1281 
°VpssChnAâr
.
bFlù
 = 0;

1282 
°VpssChnAâr
.
bMúr‹
 = 0;

1283 
°VpssChnAâr
.
bSpEn
 = 0 ;

1284 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1285 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1286 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1287 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1288 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1289 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1290 
°VpssChnMode
.
u32Width
 = 
°Size
.u32Width;

1291 
°VpssChnMode
.
u32Height
 = 
°Size
.u32Height;

1293 
s32Rë
 = 
HI_MPI_VPSS_SëRŸ©e
(
VpssGΩ
, 
VpssChn
, 
íRŸ©e
);

1298 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, &
°VpssExtChnAâr
);

1299 i‡(
HI_SUCCESS
 !
s32Rë
)

1301 
SAMPLE_PRT
("start VPSS CHN failed!\n");

1302 
END_1080P_1
;

1308 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1309 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

1311 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

1312 
gs_u32ViFrmR©e
 = 50;

1316 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1318 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

1321 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

1322 i‡(
HI_SUCCESS
 !
s32Rë
)

1324 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

1325 
END_1080P_2
;

1328 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1329 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1330 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1332 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1333 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1335 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

1336 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

1337 &
°LayîAâr
.
u32Di•FrmRt
);

1338 i‡(
HI_SUCCESS
 !
s32Rë
)

1340 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

1341 
END_1080P_2
;

1344 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

1345 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

1347 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1348 i‡(
HI_SUCCESS
 !
s32Rë
)

1350 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1351 
END_1080P_3
;

1354 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

1355 i‡(
HI_SUCCESS
 !
s32Rë
)

1357 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1358 
END_1080P_4
;

1361 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

1363 i‡(
HI_SUCCESS
 !
s32Rë
)

1365 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

1366 
END_1080P_5
;

1369 
VI_PAUSE
();

1373 
END_1080P_5
:

1374 
SAMPLE_COMM_VO_UnBödVpss
(
VoDev
, 
VoChn
, 
VpssGΩ
, 
VpssChn
);

1375 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

1376 
END_1080P_4
:

1377 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

1378 
END_1080P_3
:

1379 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

1380 
END_1080P_2
:

1381 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

1382 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

1383 
END_1080P_1
:

1384 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

1385 
END_1080P_0
:

1386 
SAMPLE_COMM_SYS_Exô
();

1387  
s32Rë
;

1395 
HI_S32
 
SAMPLE_VI_ROTATE_VO_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1397 
HI_U32
 
u32ViChnC¡
 = 2;

1398 
VB_CONF_S
 
°VbC⁄f
;

1399 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

1400 
VO_CHN
 
VoChn
 = 0;

1401 
VI_CHN
 
ViChn
 = 0;

1402 
VO_PUB_ATTR_S
 
°VoPubAâr
;

1403 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

1404 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

1405 
VO_LAYER
 
VoLayî
 = 0;

1406 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1408 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1409 
HI_U32
 
u32BlkSize
;

1410 
SIZE_S
 
°Size
;

1411 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_90
;

1417 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

1418 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1420 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

1421 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1422 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1425 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1426 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

1431 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

1432 i‡(
HI_SUCCESS
 !
s32Rë
)

1434 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1435 
END_1080P_0
;

1438 i‡(
p°ViC⁄fig
)

1440 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

1441 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

1443 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1444 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1445 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

1446 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1447 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

1454 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1455 i‡(
HI_SUCCESS
 !
s32Rë
)

1457 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1458 
END_1080P_0
;

1464 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

1465 i‡(
HI_SUCCESS
 !
s32Rë
)

1467 
SAMPLE_PRT
("start vi failed!\n");

1468 
END_1080P_0
;

1476 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1477 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

1479 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

1480 
gs_u32ViFrmR©e
 = 50;

1484 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1486 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

1489 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

1490 i‡(
HI_SUCCESS
 !
s32Rë
)

1492 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

1493 
END_1080P_1
;

1496 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1497 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1498 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1500 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1501 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1503 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

1504 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

1505 &
°LayîAâr
.
u32Di•FrmRt
);

1506 i‡(
HI_SUCCESS
 !
s32Rë
)

1508 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

1509 
END_1080P_1
;

1512 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

1513 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

1515 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1516 i‡(
HI_SUCCESS
 !
s32Rë
)

1518 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1519 
END_1080P_2
;

1521 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

1522 i‡(
HI_SUCCESS
 !
s32Rë
)

1524 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1525 
END_1080P_3
;

1529 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ViChn
);

1530 i‡(
HI_SUCCESS
 !
s32Rë
)

1532 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

1533 
END_1080P_4
;

1536 
VI_PAUSE
();

1540 
END_1080P_4
:

1541 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

1542 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

1543 
END_1080P_3
:

1544 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

1545 
END_1080P_2
:

1546 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

1547 
END_1080P_1
:

1548 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

1549 
END_1080P_0
:

1550 
SAMPLE_COMM_SYS_Exô
();

1552  
s32Rë
;

1560 
HI_S32
 
SAMPLE_VI_LDC_VO_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1562 
HI_U32
 
u32ViChnC¡
 = 2;

1563 
VB_CONF_S
 
°VbC⁄f
;

1564 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

1565 
VO_CHN
 
VoChn
 = 0;

1566 
VI_CHN
 
ViChn
 = 0;

1567 
VO_PUB_ATTR_S
 
°VoPubAâr
;

1568 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

1569 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

1570 
VO_LAYER
 
VoLayî
 = 0;

1571 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1573 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1574 
HI_U32
 
u32BlkSize
;

1575 
SIZE_S
 
°Size
;

1576 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_90
;

1577 
VI_LDC_ATTR_S
 
°LDCAâr
;

1582 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

1583 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1585 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

1586 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1587 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1590 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1591 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

1596 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

1597 i‡(
HI_SUCCESS
 !
s32Rë
)

1599 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1600 
END_1080P_0
;

1603 i‡(
p°ViC⁄fig
)

1606 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

1608 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1609 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1610 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

1611 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1612 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

1619 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1620 i‡(
HI_SUCCESS
 !
s32Rë
)

1622 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1623 
END_1080P_0
;

1629 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

1630 i‡(
HI_SUCCESS
 !
s32Rë
)

1632 
SAMPLE_PRT
("start vi failed!\n");

1633 
END_1080P_0
;

1638 
°LDCAâr
.
bE«bÀ
 = 
HI_TRUE
;

1639 
°LDCAâr
.
°Aâr
.
íVõwTy≥
 = 
LDC_VIEW_TYPE_ALL
;

1640 
°LDCAâr
.
°Aâr
.
s32CíãrXOff£t
 = 0;

1641 
°LDCAâr
.
°Aâr
.
s32CíãrYOff£t
 = 0;

1642 
°LDCAâr
.
°Aâr
.
s32R©io
 = 168;

1644 
s32Rë
 = 
HI_MPI_VI_SëLDCAâr
(
ViChn
, &
°LDCAâr
);

1645 i‡(
HI_SUCCESS
 !
s32Rë
)

1647 
SAMPLE_PRT
("set LDC failed!\n");

1648 
END_1080P_1
;

1654 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1655 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

1657 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

1658 
gs_u32ViFrmR©e
 = 50;

1662 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1664 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

1667 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

1668 i‡(
HI_SUCCESS
 !
s32Rë
)

1670 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

1671 
END_1080P_1
;

1674 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1675 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1676 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1678 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1679 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1680 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

1681 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

1682 &
°LayîAâr
.
u32Di•FrmRt
);

1683 i‡(
HI_SUCCESS
 !
s32Rë
)

1685 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

1686 
END_1080P_1
;

1689 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

1690 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

1692 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

1693 i‡(
HI_SUCCESS
 !
s32Rë
)

1695 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1696 
END_1080P_2
;

1700 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

1701 i‡(
HI_SUCCESS
 !
s32Rë
)

1703 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1704 
END_1080P_3
;

1708 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ViChn
);

1709 i‡(
HI_SUCCESS
 !
s32Rë
)

1711 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

1712 
END_1080P_4
;

1715 
¥ötf
("\nplease hitány key, disable LDC\n\n");

1716 
VI_PAUSE
();

1717 
°LDCAâr
.
bE«bÀ
 = 
HI_FALSE
;

1719 
s32Rë
 = 
HI_MPI_VI_SëLDCAâr
(
ViChn
, &
°LDCAâr
);

1720 i‡(
HI_SUCCESS
 !
s32Rë
)

1722 
SAMPLE_PRT
("£àLDC faûed wôh %#x!\n", 
s32Rë
);

1723 
END_1080P_4
;

1726 
¥ötf
("\nplease hitány key,Énable LDC\n");

1727 
VI_PAUSE
();

1729 
°LDCAâr
.
bE«bÀ
 = 
HI_TRUE
;

1731 
s32Rë
 = 
HI_MPI_VI_SëLDCAâr
(
ViChn
, &
°LDCAâr
);

1732 i‡(
HI_SUCCESS
 !
s32Rë
)

1734 
SAMPLE_PRT
("£àLDC faûed wôh %#x!\n", 
s32Rë
);

1735 
END_1080P_4
;

1738 
VI_PAUSE
();

1742 
END_1080P_4
:

1743 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

1744 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

1745 
END_1080P_3
:

1746 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

1747 
END_1080P_2
:

1748 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

1749 
END_1080P_1
:

1750 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

1751 
END_1080P_0
:

1752 
SAMPLE_COMM_SYS_Exô
();

1754  
HI_SUCCESS
;

1762 
HI_S32
 
SAMPLE_VI_DIS_VPSS_VO_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

1764 
HI_U32
 
u32ViChnC¡
 = 2;

1765 
VB_CONF_S
 
°VbC⁄f
;

1766 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

1767 
VO_CHN
 
VoChn
 = 0;

1768 
VI_CHN
 
ViChn
 = 0;

1769 
VO_PUB_ATTR_S
 
°VoPubAâr
;

1770 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_2MUX
;

1771 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

1772 
VO_LAYER
 
VoLayî
 = 0;

1773 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

1774 
VPSS_GRP
 
VpssGΩ
 = 0;

1775 
VPSS_CHN
 
VpssChn
 = 0;

1776 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
;

1777 
VPSS_CHN_ATTR_S
 
°VpssChnAâr
;

1778 
VPSS_CHN_MODE_S
 
°VpssChnMode
;

1779 
VI_CHN_ATTR_S
 
°ChnAâr
;

1780 
VPSS_EXT_CHN_ATTR_S
 
°VpssExtChnAâr
;

1782 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

1783 
HI_U32
 
u32BlkSize
;

1784 
SIZE_S
 
°Size
;

1785 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

1790 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

1791 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

1793 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

1794 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

1795 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

1798 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

1799 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 15;

1804 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

1805 i‡(
HI_SUCCESS
 !
s32Rë
)

1807 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

1808 
END_1080P_0
;

1811 i‡(
p°ViC⁄fig
)

1813 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

1814 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

1816 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1817 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

1818 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

1819 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

1820 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

1827 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

1828 i‡(
HI_SUCCESS
 !
s32Rë
)

1830 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

1831 
END_1080P_0
;

1837 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

1838 i‡(
HI_SUCCESS
 !
s32Rë
)

1840 
SAMPLE_PRT
("start vi failed!\n");

1841 
END_1080P_0
;

1845 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

1846 i‡(
HI_SUCCESS
 !
s32Rë
)

1848 
SAMPLE_PRT
("disable vi chn failed!\n");

1849 
END_1080P_0
;

1851 
°ChnAâr
.
°C≠Re˘
.
s32X
 = 0;

1852 
°ChnAâr
.
°C≠Re˘
.
s32Y
 = 0;

1853 
°ChnAâr
.
°C≠Re˘
.
u32Width
 = 1180 + 100;

1854 
°ChnAâr
.
°C≠Re˘
.
u32Height
 = 620 + 100;

1855 
°ChnAâr
.
bFlù
 = 
HI_FALSE
;

1856 
°ChnAâr
.
bMúr‹
 = 
HI_FALSE
;

1857 
°ChnAâr
.
íC≠Sñ
 = 
VI_CAPSEL_BOTH
;

1858 
°ChnAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1859 
°ChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1860 
°ChnAâr
.
s32SrcFømeR©e
 = 30;

1861 
°ChnAâr
.
s32D°FømeR©e
 = 30;

1863 
°ChnAâr
.
°De°Size
.
u32Width
 = stChnAâr.
°C≠Re˘
.u32Width;

1864 
°ChnAâr
.
°De°Size
.
u32Height
 = stChnAâr.
°C≠Re˘
.u32Height;

1865 
s32Rë
 = 
HI_MPI_VI_SëChnAâr
(
ViChn
, &
°ChnAâr
);

1866 i‡(
HI_SUCCESS
 !
s32Rë
)

1868 
SAMPLE_PRT
("set vi chn failed!\n");

1869 
END_1080P_0
;

1872 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ViChn
);

1873 i‡(
HI_SUCCESS
 !
s32Rë
)

1875 
SAMPLE_PRT
("enable vi chn failed!\n");

1876 
END_1080P_0
;

1879 
°VpssGΩAâr
.
bDciEn
 = 
HI_FALSE
;

1880 
°VpssGΩAâr
.
bHi°En
 = 
HI_FALSE
;

1881 
°VpssGΩAâr
.
bIeEn
 = 
HI_FALSE
;

1882 
°VpssGΩAâr
.
bNrEn
 = 
HI_TRUE
;

1883 
°VpssGΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

1884 
°VpssGΩAâr
.
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1885 
°VpssGΩAâr
.
u32MaxH
 = 720 + 100;

1886 
°VpssGΩAâr
.
u32MaxW
 = 1280 + 100;

1892 
s32Rë
 = 
SAMPLE_COMM_VPSS_SèπGroup
(
VpssGΩ
, &
°VpssGΩAâr
);

1893 i‡(
HI_SUCCESS
 !
s32Rë
)

1895 
SAMPLE_PRT
("start VPSS GROUP failed!\n");

1896 
END_1080P_1
;

1899 
°VpssChnAâr
.
bB‹dîEn
 = 0;

1900 
°VpssChnAâr
.
bFlù
 = 0;

1901 
°VpssChnAâr
.
bMúr‹
 = 0;

1902 
°VpssChnAâr
.
bSpEn
 = 0 ;

1903 
°VpssChnAâr
.
s32D°FømeR©e
 = -1;

1904 
°VpssChnAâr
.
s32SrcFømeR©e
 = -1;

1905 
°VpssChnMode
.
bDoubÀ
 = 
HI_FALSE
;

1906 
°VpssChnMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

1907 
°VpssChnMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

1908 
°VpssChnMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1909 
°VpssChnMode
.
u32Width
 = 1180;

1910 
°VpssChnMode
.
u32Height
 = 620;

1913 
VPSS_CROP_INFO_S
 
°VpssCr›Info
;

1915 
°VpssCr›Info
.
bE«bÀ
 = 
HI_TRUE
;

1916 
°VpssCr›Info
.
íCr›Co‹dö©e
 = 
VPSS_CROP_ABS_COOR
;

1917 
°VpssCr›Info
.
°Cr›Re˘
.
s32X
 = 50;

1918 
°VpssCr›Info
.
°Cr›Re˘
.
s32Y
 = 50;

1919 
°VpssCr›Info
.
°Cr›Re˘
.
u32Width
 = 1180;

1920 
°VpssCr›Info
.
°Cr›Re˘
.
u32Height
 = 620;

1921 
s32Rë
 = 
HI_MPI_VPSS_SëGΩCr›
(
VpssGΩ
, &
°VpssCr›Info
);

1922 i‡(
HI_SUCCESS
 !
s32Rë
)

1924 
SAMPLE_PRT
("set VPSS group crop failed!\n");

1925 
END_1080P_1
;

1931 
s32Rë
 = 
SAMPLE_COMM_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
, &
°VpssChnAâr
, &
°VpssChnMode
, &
°VpssExtChnAâr
);

1932 i‡(
HI_SUCCESS
 !
s32Rë
)

1934 
SAMPLE_PRT
("start VPSS CHN failed!\n");

1935 
END_1080P_1
;

1941 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

1942 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

1944 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

1945 
gs_u32ViFrmR©e
 = 50;

1949 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

1951 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

1954 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

1955 i‡(
HI_SUCCESS
 !
s32Rë
)

1957 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

1958 
END_1080P_2
;

1961 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

1962 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

1963 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

1965 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

1966 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

1968 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

1969 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

1970 &
°LayîAâr
.
u32Di•FrmRt
);

1971 i‡(
HI_SUCCESS
 !
s32Rë
)

1973 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

1974 
END_1080P_2
;

1976 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

1977 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

1979 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_FALSE
);

1980 i‡(
HI_SUCCESS
 !
s32Rë
)

1982 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1983 
END_1080P_3
;

1986 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
íVoMode
);

1987 i‡(
HI_SUCCESS
 !
s32Rë
)

1989 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

1990 
END_1080P_4
;

1993 
SAMPLE_COMM_VI_BödVpss
(
p°ViC⁄fig
->
íViMode
);

1995 
s32Rë
 = 
SAMPLE_COMM_VO_BödVpss
(
VoDev
, 
VoChn
 + 1, 
VpssGΩ
, 
VpssChn
);

1996 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ViChn
);

1997 i‡(
HI_SUCCESS
 !
s32Rë
)

1999 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

2000 
END_1080P_5
;

2004 
ISP_DIS_ATTR_S
 
°DisAâr
;

2005 
°DisAâr
.
bE«bÀ
 = 
HI_TRUE
;

2007 
I•Dev
 = 0;

2008 
s32Rë
 = 
HI_MPI_ISP_SëDISAâr
(
I•Dev
, &
°DisAâr
);

2009 i‡(
HI_SUCCESS
 !
s32Rë
)

2011 
SAMPLE_PRT
("set DISátrr failed!\n");

2012 
END_1080P_5
;

2015 
¥ötf
("\n\npress keyÅo disable dis ------\n");

2016 
VI_PAUSE
();

2018 
s32Rë
 = 
HI_MPI_ISP_GëDISAâr
(
I•Dev
, &
°DisAâr
);

2019 i‡(
HI_SUCCESS
 !
s32Rë
)

2021 
SAMPLE_PRT
("get DISátrr failed!\n");

2022 
END_1080P_5
;

2024 
°DisAâr
.
bE«bÀ
 = 
HI_FALSE
;

2025 
s32Rë
 = 
HI_MPI_ISP_SëDISAâr
(
I•Dev
, &
°DisAâr
);

2026 i‡(
HI_SUCCESS
 !
s32Rë
)

2028 
SAMPLE_PRT
("set DISátrr failed!\n");

2029 
END_1080P_5
;

2031 
¥ötf
("\n\npress keyÅoÉnable dis ------\n");

2032 
VI_PAUSE
();

2034 
s32Rë
 = 
HI_MPI_ISP_GëDISAâr
(
I•Dev
, &
°DisAâr
);

2035 i‡(
HI_SUCCESS
 !
s32Rë
)

2037 
SAMPLE_PRT
("get DISátrr failed!\n");

2038 
END_1080P_5
;

2041 
°DisAâr
.
bE«bÀ
 = 
HI_TRUE
;

2042 
s32Rë
 = 
HI_MPI_ISP_SëDISAâr
(
I•Dev
, &
°DisAâr
);

2043 i‡(
HI_SUCCESS
 !
s32Rë
)

2045 
SAMPLE_PRT
("set DISátrr failed!\n");

2046 
END_1080P_5
;

2048 
VI_PAUSE
();

2053 
END_1080P_5
:

2054 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

2055 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

2056 
END_1080P_4
:

2057 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

2058 
END_1080P_3
:

2059 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

2060 
END_1080P_2
:

2061 
SAMPLE_COMM_VPSS_DißbÀChn
(
VpssGΩ
, 
VpssChn
);

2062 
SAMPLE_COMM_VPSS_St›Group
(
VpssGΩ
);

2063 
END_1080P_1
:

2064 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

2065 
END_1080P_0
:

2066 
SAMPLE_COMM_SYS_Exô
();

2068  
s32Rë
;

2076 
HI_S32
 
SAMPLE_VIO_BT1120_1080P_PªVõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2078 
HI_U32
 
u32ViChnC¡
 = 1;

2079 
VB_CONF_S
 
°VbC⁄f
;

2080 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

2081 
VO_CHN
 
VoChn
 = 0;

2082 
VI_CHN
 
ViChn
 = 0;

2083 
VO_PUB_ATTR_S
 
°VoPubAâr
;

2084 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

2085 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

2087 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2088 
HI_U32
 
u32BlkSize
;

2089 
SIZE_S
 
°Size
;

2090 
VO_LAYER
 
VoLayî
 = 0;

2091 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

2097 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

2098 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

2100 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
PIC_HD1080
,

2101 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

2102 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

2105 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

2106 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

2111 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

2112 i‡(
HI_SUCCESS
 !
s32Rë
)

2114 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

2115 
END_1080P_0
;

2121 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

2122 i‡(
HI_SUCCESS
 !
s32Rë
)

2124 
SAMPLE_PRT
("start vi failed!\n");

2125 
END_1080P_0
;

2131 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

2132 i‡(
HI_SUCCESS
 !
s32Rë
)

2134 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

2135 
END_1080P_1
;

2141 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

2142 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

2144 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

2148 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

2150 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

2152 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

2153 i‡(
HI_SUCCESS
 !
s32Rë
)

2155 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDevLayer failed!\n");

2156 
END_1080P_1
;

2159 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

2160 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

2161 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

2163 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

2164 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

2165 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

2166 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

2167 &
°LayîAâr
.
u32Di•FrmRt
);

2168 i‡(
HI_SUCCESS
 !
s32Rë
)

2170 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

2171 
END_1080P_1
;

2173 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

2174 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

2176 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

2178 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

2179 i‡(
HI_SUCCESS
 !
s32Rë
)

2181 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

2182 
END_1080P_2
;

2185 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ViChn
);

2186 i‡(
HI_SUCCESS
 !
s32Rë
)

2188 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVi(vo:%d)-(vichn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

2189 
END_1080P_3
;

2192 
VI_PAUSE
();

2196 
END_1080P_3
:

2197 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

2198 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

2199 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

2200 
END_1080P_2
:

2201 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

2202 
END_1080P_1
:

2203 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

2204 
END_1080P_0
:

2205 
SAMPLE_COMM_SYS_Exô
();

2207  
s32Rë
;

2213 
HI_S32
 
SAMPLE_VIO_720P_Extchn_Pªvõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2215 
HI_U32
 
u32ViChnC¡
 = 2;

2216 
VB_CONF_S
 
°VbC⁄f
;

2217 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

2218 
VO_CHN
 
VoChn
 = 0;

2219 
VI_CHN
 
ViChn
 = 0;

2220 
VO_PUB_ATTR_S
 
°VoPubAâr
;

2221 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

2223 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2224 
HI_U32
 
u32BlkSize
;

2225 
SIZE_S
 
°Size
;

2226 
VI_EXT_CHN_ATTR_S
 
°ExtChnAâr
;

2227 
VI_CHN
 
ExtChn
 = 1;

2228 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

2233 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

2234 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

2236 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

2237 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

2238 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

2241 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

2242 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

2244 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
PIC_D1
,

2245 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

2246 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

2247 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

2253 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

2254 i‡(
HI_SUCCESS
 !
s32Rë
)

2256 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

2257 
END_1080P_0
;

2263 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

2264 i‡(
HI_SUCCESS
 !
s32Rë
)

2266 
SAMPLE_PRT
("start vi failed!\n");

2267 
END_1080P_0
;

2270 
°ExtChnAâr
.
íPixF‹m©
 = 
SAMPLE_PIXEL_FORMAT
;

2271 
°ExtChnAâr
.
s32BödChn
 = 
ViChn
;

2272 
°ExtChnAâr
.
°De°Size
.
u32Width
 = 720;

2273 
°ExtChnAâr
.
°De°Size
.
u32Height
 = 576;

2274 
°ExtChnAâr
.
s32D°FømeR©e
 = -1;

2275 
°ExtChnAâr
.
s32SrcFømeR©e
 = -1;

2277 
s32Rë
 = 
HI_MPI_VI_SëExtChnAâr
(
ExtChn
, &
°ExtChnAâr
);

2278 i‡(
HI_SUCCESS
 !
s32Rë
)

2280 
SAMPLE_PRT
("HI_MPI_VI_SetExtChnAttr failed!\n");

2281 
END_1080P_0
;

2283 
s32Rë
 = 
HI_MPI_VI_E«bÀChn
(
ExtChn
);

2284 i‡(
HI_SUCCESS
 !
s32Rë
)

2286 
SAMPLE_PRT
("HI_MPI_VI_EnableChn failed!\n");

2287 
END_1080P_0
;

2293 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

2294 i‡(
HI_SUCCESS
 !
s32Rë
)

2296 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

2297 
END_1080P_1
;

2303 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

2304 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

2306 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_720P50
;

2310 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

2312 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

2314 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

2315 i‡(
HI_SUCCESS
 !
s32Rë
)

2317 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDevLayer failed!\n");

2318 
END_1080P_1
;

2321 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

2322 i‡(
HI_SUCCESS
 !
s32Rë
)

2324 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

2325 
END_1080P_2
;

2328 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ExtChn
);

2329 i‡(
HI_SUCCESS
 !
s32Rë
)

2331 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVi(vo:%d)-(vichn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

2332 
END_1080P_3
;

2335 
VI_PAUSE
();

2339 
END_1080P_3
:

2340 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

2341 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

2342 
END_1080P_2
:

2343 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

2344 
END_1080P_1
:

2345 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ExtChn
);

2346 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

2347 
END_1080P_0
:

2348 
SAMPLE_COMM_SYS_Exô
();

2350  
s32Rë
;

2356 
HI_S32
 
SAMPLE_VIO_720P_Sís‹ModeCh™ge_Pªvõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2358 
HI_U32
 
u32ViChnC¡
 = 2;

2359 
VB_CONF_S
 
°VbC⁄f
;

2360 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

2361 
VO_CHN
 
VoChn
 = 0;

2362 
VI_CHN
 
ViChn
 = 0;

2363 
VO_PUB_ATTR_S
 
°VoPubAâr
;

2364 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

2365 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

2367 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2368 
HI_S32
 
s32GëC
;

2369 
HI_U8
 
u8Mode
;

2370 
HI_U32
 
u32BlkSize
;

2371 
SIZE_S
 
°Size
;

2372 
ROTATE_E
 
íRŸ©e
 = 
ROTATE_NONE
;

2377 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

2378 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

2380 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

2381 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

2382 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

2385 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

2386 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

2391 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
gs_íN‹m
, 
íPicSize
, &
°Size
);

2392 i‡(
HI_SUCCESS
 !
s32Rë
)

2394 
SAMPLE_PRT
("SAMPLE_COMM_SYS_GetPicSize failed!\n");

2395 
END_1080P_1
;

2398 i‡(
p°ViC⁄fig
)

2400 
íRŸ©e
 = 
p°ViC⁄fig
->enRotate;

2401 i‡(
ROTATE_90
 =
íRŸ©e
 || 
ROTATE_270
 ==ÉnRotate)

2403 
u32BlkSize
 = (
CEILING_2_POWER
(
°Size
.
u32Width
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

2404 
CEILING_2_POWER
(
°Size
.
u32Height
, 
SAMPLE_SYS_ALIGN_WIDTH
) * \

2405 ((
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
SAMPLE_PIXEL_FORMAT
) ? 2 : 1.5));

2406 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkSize
 = u32BlkSize;

2407 
°VbC⁄f
.
a°CommPoﬁ
[1].
u32BlkC¡
 = 8;

2414 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

2415 i‡(
HI_SUCCESS
 !
s32Rë
)

2417 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

2418 
END_1080P_0
;

2424 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

2425 i‡(
HI_SUCCESS
 !
s32Rë
)

2427 
SAMPLE_PRT
("start vi failed!\n");

2428 
END_1080P_0
;

2434 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

2435 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

2437 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_720P50
;

2438 
gs_u32ViFrmR©e
 = 50;

2442 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

2444 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

2447 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

2448 i‡(
HI_SUCCESS
 !
s32Rë
)

2450 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDevLayer failed!\n");

2451 
END_1080P_1
;

2454 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

2455 i‡(
HI_SUCCESS
 !
s32Rë
)

2457 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

2458 
END_1080P_2
;

2461 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ViChn
);

2462 i‡(
HI_SUCCESS
 !
s32Rë
)

2464 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVi(vo:%d)-(vichn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

2465 
END_1080P_3
;

2468 
¥ötf
("---------quit(q)/linear(l)/wdr(w)---------\n");

2469 (
s32GëC
 = 
gëch¨
()) != 'q')

2471 i‡('l' =
s32GëC
)

2473 
u8Mode
 = 0;

2475 i‡('w' =
s32GëC
)

2477 
u8Mode
 = 1;

2484 
s32Rë
 = 
SAMPLE_COMM_ISP_Ch™geSís‹Mode
(
u8Mode
);

2485 i‡(
HI_SUCCESS
 !
s32Rë
)

2487 
SAMPLE_PRT
("SAMPLE_COMM_ISP_ChangeSensorMode failed!\n");

2496 
END_1080P_3
:

2497 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

2498 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

2499 
END_1080P_2
:

2500 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

2501 
END_1080P_1
:

2502 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

2503 
END_1080P_0
:

2504 
SAMPLE_COMM_SYS_Exô
();

2506  
s32Rë
;

2509 
HI_S32
 
SAMLE_VIO_Resﬁuti⁄Swôch_Pªvõw
(
SAMPLE_VI_CONFIG_S
* 
p°ViC⁄fig
)

2511 
HI_U32
 
u32ViChnC¡
 = 2;

2512 
VB_CONF_S
 
°VbC⁄f
;

2513 
VO_DEV
 
VoDev
 = 
SAMPLE_VO_DEV_DSD0
;;

2514 
VO_CHN
 
VoChn
 = 0;

2515 
VI_DEV
 
ViDev
 = 0;

2516 
VI_CHN
 
ViChn
 = 0;

2517 
ISP_DEV
 
I•Dev
 = 0;

2518 
VO_PUB_ATTR_S
 
°VoPubAâr
;

2519 
ISP_INNER_STATE_INFO_S
 
°I¬îSèãInfo
;

2521 
SIZE_S
 
°T¨gëSize
;

2522 
RECT_S
 
°C≠Re˘
;

2524 
SAMPLE_VO_MODE_E
 
íVoMode
 = 
VO_MODE_1MUX
;

2525 
PIC_SIZE_E
 
íPicSize
 = 
g_íPicSize
;

2526 
VO_LAYER
 
VoLayî
 = 0;

2527 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

2528 
ISP_PUB_ATTR_S
 
°PubAâr
;

2530 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

2531 
HI_U32
 
u32BlkSize
;

2533 i‡–
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode


2534 || 
PANASONIC_MN34220_SUBLVDS_720P_120FPS
 =
p°ViC⁄fig
->
íViMode


2535 || 
PANASONIC_MN34220_MIPI_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode


2536 || 
PANASONIC_MN34220_MIPI_720P_120FPS
 =
p°ViC⁄fig
->
íViMode


2537 || 
SONY_IMX117_LVDS_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode


2538 || 
SONY_IMX117_LVDS_720P_30FPS
 =
p°ViC⁄fig
->
íViMode
 )

2540 
íPicSize
 = 
PIC_HD1080
;

2542 i‡–
OMNIVISION_OV4689_MIPI_4M_30FPS
 =
p°ViC⁄fig
->
íViMode


2543 || 
OMNIVISION_OV4689_MIPI_1080P_30FPS
 =
p°ViC⁄fig
->
íViMode
 )

2545 
íPicSize
 = 
PIC_2592x1520
;

2549 
SAMPLE_PRT
("Not supportÅhis sensorÅype!\n");

2550 
END_1080P
;

2556 
gs_u32ViFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
gs_íN‹m
) ? 25 : 30;

2557 
mem£t
(&
°VbC⁄f
, 0, (
VB_CONF_S
));

2559 
u32BlkSize
 = 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
gs_íN‹m
, 
íPicSize
,

2560 
SAMPLE_PIXEL_FORMAT
, 
SAMPLE_SYS_ALIGN_WIDTH
);

2561 
°VbC⁄f
.
u32MaxPoﬁC¡
 = 128;

2564 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkSize
 = u32BlkSize;

2565 
°VbC⁄f
.
a°CommPoﬁ
[0].
u32BlkC¡
 = 
u32ViChnC¡
 * 8;

2570 
s32Rë
 = 
SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

2571 i‡(
HI_SUCCESS
 !
s32Rë
)

2573 
SAMPLE_PRT
("sy°em inô faûed wôh %d!\n", 
s32Rë
);

2574 
END_1080P_0
;

2580 
s32Rë
 = 
SAMPLE_COMM_VI_SèπVi
(
p°ViC⁄fig
);

2581 i‡(
HI_SUCCESS
 !
s32Rë
)

2583 
SAMPLE_PRT
("start vi failed!\n");

2584 
END_1080P_0
;

2590 
°VoPubAâr
.
íI¡fTy≥
 = 
g_íVoI¡fTy≥
;

2591 i‡(
VO_INTF_BT1120
 =
g_íVoI¡fTy≥
)

2593 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

2594 
gs_u32ViFrmR©e
 = 50;

2598 
°VoPubAâr
.
íI¡fSync
 = 
VO_OUTPUT_PAL
;

2600 
°VoPubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

2603 
s32Rë
 = 
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

2604 i‡(
HI_SUCCESS
 !
s32Rë
)

2606 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartDev failed!\n");

2607 
END_1080P_1
;

2610 
°LayîAâr
.
bClu°îMode
 = 
HI_FALSE
;

2611 
°LayîAâr
.
bDoubÀFøme
 = 
HI_FALSE
;

2612 
°LayîAâr
.
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

2614 
°LayîAâr
.
°Di•Re˘
.
s32X
 = 0;

2615 
°LayîAâr
.
°Di•Re˘
.
s32Y
 = 0;

2617 
s32Rë
 = 
SAMPLE_COMM_VO_GëWH
(
°VoPubAâr
.
íI¡fSync
,

2618 &
°LayîAâr
.
°Di•Re˘
.
u32Width
, &°LayîAâr.°Di•Re˘.
u32Height
,

2619 &
°LayîAâr
.
u32Di•FrmRt
);

2620 i‡(
HI_SUCCESS
 !
s32Rë
)

2622 
SAMPLE_PRT
("SAMPLE_COMM_VO_GetWH failed!\n");

2623 
END_1080P_1
;

2626 
°LayîAâr
.
°ImageSize
.
u32Width
 = stLayîAâr.
°Di•Re˘
.u32Width;

2627 
°LayîAâr
.
°ImageSize
.
u32Height
 = stLayîAâr.
°Di•Re˘
.u32Height;

2629 
s32Rë
 = 
SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°LayîAâr
, 
HI_TRUE
);

2630 i‡(
HI_SUCCESS
 !
s32Rë
)

2632 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

2633 
END_1080P_2
;

2635 
s32Rë
 = 
SAMPLE_COMM_VO_SèπChn
(
VoDev
, 
VO_MODE_1MUX
);

2636 i‡(
HI_SUCCESS
 !
s32Rë
)

2638 
SAMPLE_PRT
("SAMPLE_COMM_VO_StartChn failed!\n");

2639 
END_1080P_3
;

2643 
s32Rë
 = 
SAMPLE_COMM_VO_BödVi
(
VoDev
, 
VoChn
, 
ViChn
);

2644 i‡(
HI_SUCCESS
 !
s32Rë
)

2646 
SAMPLE_PRT
("SAMPLE_COMM_VO_BödVpss(vo:%d)-(VpssChn:%dËÁûed wôh %#x!\n", 
VoDev
, 
VoChn
, 
s32Rë
);

2647 
END_1080P_4
;

2650 
VI_PAUSE
();

2652 
s32Rë
 = 
HI_MPI_ISP_GëPubAâr
(
I•Dev
, &
°PubAâr
);

2653 i‡(
s32Rë
 !
HI_SUCCESS
)

2655 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2656 
END_1080P_4
;

2659 
SAMPLE_COMM_VI_SwôchResP¨am
(
p°ViC⁄fig
, &
°PubAâr
, &
°C≠Re˘
);

2661 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

2662 i‡(
s32Rë
 !
HI_SUCCESS
)

2664 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2665 
END_1080P_4
;

2667 
s32Rë
 = 
HI_MPI_VI_DißbÀDev
(
ViDev
);

2668 i‡(
s32Rë
 !
HI_SUCCESS
)

2670 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2671 
END_1080P_4
;

2673 
s32Rë
 = 
SAMPLE_COMM_VI_SèπMIPI
(
p°ViC⁄fig
);

2674 i‡(
s32Rë
 !
HI_SUCCESS
)

2676 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2677 
END_1080P_4
;

2680 
s32Rë
 = 
HI_MPI_ISP_SëPubAâr
(
I•Dev
, &
°PubAâr
);

2681 i‡(
s32Rë
 !
HI_SUCCESS
)

2683 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2684 
END_1080P_4
;

2688 
HI_MPI_ISP_QuîyI¬îSèãInfo
(
I•Dev
, &
°I¬îSèãInfo
);

2689 i‡(
HI_TRUE
 =
°I¬îSèãInfo
.
bResSwôchFöish
)

2691 
SAMPLE_PRT
("Res switch finish!\n");

2694 
u¶ìp
(1000);

2697 
s32Rë
 = 
SAMPLE_COMM_VI_SèπDev
(
ViDev
, 
p°ViC⁄fig
->
íViMode
);

2698 i‡(
s32Rë
 !
HI_SUCCESS
)

2700 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2701 
END_1080P_4
;

2704 
°T¨gëSize
.
u32Width
 = 
°C≠Re˘
.u32Width;

2705 
°T¨gëSize
.
u32Height
 = 
°C≠Re˘
.u32Height;

2706 
s32Rë
 = 
SAMPLE_COMM_VI_SèπChn
(
ViChn
, &
°C≠Re˘
, &
°T¨gëSize
, 
p°ViC⁄fig
);

2707 i‡(
s32Rë
 !
HI_SUCCESS
)

2709 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2710 
END_1080P_4
;

2714 
VI_PAUSE
();

2715 
s32Rë
 = 
HI_MPI_ISP_GëPubAâr
(
I•Dev
, &
°PubAâr
);

2716 i‡(
s32Rë
 !
HI_SUCCESS
)

2718 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2719 
END_1080P_4
;

2722 
SAMPLE_COMM_VI_SwôchResP¨am
(
p°ViC⁄fig
, &
°PubAâr
, &
°C≠Re˘
);

2724 
s32Rë
 = 
HI_MPI_VI_DißbÀChn
(
ViChn
);

2725 i‡(
s32Rë
 !
HI_SUCCESS
)

2727 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2728 
END_1080P_4
;

2730 
s32Rë
 = 
HI_MPI_VI_DißbÀDev
(
ViDev
);

2731 i‡(
s32Rë
 !
HI_SUCCESS
)

2733 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2734 
END_1080P_4
;

2736 
s32Rë
 = 
SAMPLE_COMM_VI_SèπMIPI
(
p°ViC⁄fig
);

2737 i‡(
s32Rë
 !
HI_SUCCESS
)

2739 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2740 
END_1080P_4
;

2742 
s32Rë
 = 
HI_MPI_ISP_SëPubAâr
(
I•Dev
, &
°PubAâr
);

2743 i‡(
s32Rë
 !
HI_SUCCESS
)

2745 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2746 
END_1080P_4
;

2751 
HI_MPI_ISP_QuîyI¬îSèãInfo
(
I•Dev
, &
°I¬îSèãInfo
);

2752 i‡(
HI_TRUE
 =
°I¬îSèãInfo
.
bResSwôchFöish
)

2754 
SAMPLE_PRT
("Res switch finish!\n");

2757 
u¶ìp
(1000);

2760 
s32Rë
 = 
SAMPLE_COMM_VI_SèπDev
(
ViDev
, 
p°ViC⁄fig
->
íViMode
);

2761 i‡(
s32Rë
 !
HI_SUCCESS
)

2763 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2764 
END_1080P_4
;

2767 
°T¨gëSize
.
u32Width
 = 
°C≠Re˘
.u32Width;

2768 
°T¨gëSize
.
u32Height
 = 
°C≠Re˘
.u32Height;

2769 
s32Rë
 = 
SAMPLE_COMM_VI_SèπChn
(
ViChn
, &
°C≠Re˘
, &
°T¨gëSize
, 
p°ViC⁄fig
);

2770 i‡(
s32Rë
 !
HI_SUCCESS
)

2772 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

2773 
END_1080P_4
;

2775 
VI_PAUSE
();

2780 
END_1080P_4
:

2781 
SAMPLE_COMM_VO_UnBödVi
(
VoDev
, 
VoChn
);

2782 
SAMPLE_COMM_VO_St›Chn
(
VoDev
, 
íVoMode
);

2783 
END_1080P_3
:

2784 
SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

2785 
END_1080P_2
:

2786 
SAMPLE_COMM_VO_St›Dev
(
VoDev
);

2787 
END_1080P_1
:

2788 
SAMPLE_COMM_VI_St›Vi
(
p°ViC⁄fig
);

2789 
END_1080P_0
:

2790 
SAMPLE_COMM_SYS_Exô
();

2791 
END_1080P
:

2792  
s32Rë
;

2799 
maö
(
¨gc
, * 
¨gv
[])

2801 
HI_S32
 
s32Rë
 = 
HI_FAILURE
;

2803 i‡–(
¨gc
 < 2Ë|| (1 !
°æí
(
¨gv
[1])))

2805 
SAMPLE_VIO_Ußge
(
¨gv
[0]);

2806  
HI_FAILURE
;

2809 
sig«l
(
SIGINT
, 
SAMPLE_VIO_H™dÀSig
);

2810 
sig«l
(
SIGTERM
, 
SAMPLE_VIO_H™dÀSig
);

2812 i‡((
¨gc
 > 2Ë&& *
¨gv
[2] == '1')

2814 
g_íVoI¡fTy≥
 = 
VO_INTF_BT1120
;

2817 
g_°ViChnC⁄fig
.
íViMode
 = 
SENSOR_TYPE
;

2818 
SAMPLE_COMM_VI_GëSizeBySís‹
(&
g_íPicSize
);

2820 *
¨gv
[1])

2824 
s32Rë
 = 
SAMPLE_VIO_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2828 i‡((
SENSOR_TYPE
 =
PANASONIC_MN34220_SUBLVDS_1080P_30FPS
)

2829 || (
SENSOR_TYPE
 =
PANASONIC_MN34220_SUBLVDS_720P_120FPS
)

2830 || (
SENSOR_TYPE
 =
PANASONIC_MN34220_MIPI_1080P_30FPS
)

2831 || (
SENSOR_TYPE
 =
PANASONIC_MN34220_MIPI_720P_120FPS
)

2832 || (
SENSOR_TYPE
 =
SONY_IMX123_LVDS_QXGA_30FPS
))

2834 
g_°ViChnC⁄fig
.
íWDRMode
 = 
WDR_MODE_2To1_LINE
;

2838 
g_°ViChnC⁄fig
.
íWDRMode
 = 
WDR_MODE_2To1_FRAME
;

2840 
s32Rë
 = 
SAMPLE_VIO_LINE_WDR_PªVõw
(&
g_°ViChnC⁄fig
);

2844 
s32Rë
 = 
SAMPLE_VIO_FRAME_FPN_PªVõw
(&
g_°ViChnC⁄fig
);

2848 
s32Rë
 = 
SAMPLE_VI_VPSS_LDC_VO_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2851 
s32Rë
 = 
SAMPLE_VI_VPSS_ROTATE_VO_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2854 
g_°ViChnC⁄fig
.
íRŸ©e
 = 
ROTATE_90
;

2855 
s32Rë
 = 
SAMPLE_VI_ROTATE_VO_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2858 
s32Rë
 = 
SAMPLE_VI_LDC_VO_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2861 
s32Rë
 = 
SAMPLE_VI_DIS_VPSS_VO_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2866 
g_°ViChnC⁄fig
.
íViMode
 = 
SAMPLE_VI_MODE_BT1120_1080P
;

2867 
g_°ViChnC⁄fig
.
íN‹m
 = 
VIDEO_ENCODING_MODE_PAL
;

2868 
s32Rë
 = 
SAMPLE_VIO_BT1120_1080P_PªVõw
(&
g_°ViChnC⁄fig
);

2871 
s32Rë
 = 
SAMLE_VIO_Resﬁuti⁄Swôch_Pªvõw
(&
g_°ViChnC⁄fig
);

2874 
SAMPLE_PRT
("the index is invaild!\n");

2875 
SAMPLE_VIO_Ußge
(
¨gv
[0]);

2876  
HI_FAILURE
;

2879 i‡(
HI_SUCCESS
 =
s32Rë
)

2881 
SAMPLE_PRT
("programÉxitÇormally!\n");

2885 
SAMPLE_PRT
("programÉxitábnormally!\n");

2887 
exô
(
s32Rë
);

2890 #ifde‡
__˝lu•lus


2891 #i‡
__˝lu•lus


	@tools/aenc_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_aio.h
"

16 
	~"mpi_´nc.h
"

19 
	#VALUE_BETWEEN
(
x
,
mö
,
max
Ë(((x)>=(mö)Ë&& ((xË<(max)))

	)

21 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

23 
AENC_CHN
 
AícChn
;

24 
HI_U32
 
u32Size
 = 1024;

25 
AUDIO_SAVE_FILE_INFO_S
 
°SaveFûeInfo
;

26 
HI_S32
 
s32Rë
;

27 
FILE
* 
Â
 = 
NULL
;

28 
HI_CHAR
 
aCurP©h
[258];

30 
	`¥ötf
("Usage: ./aenc_dump [chn] [name] [size] [path]\n");

31 
	`¥ötf
("chn:áenc chn id.\n");

32 
	`¥ötf
("name: fileÇame (default).\n");

33 
	`¥ötf
("size: file size(KB)(defaultly 1M).\n");

34 
	`¥ötf
("path:Öath for saving(currentÖath if NULL).\n\n\n");

36 i‡((
¨gc
 < 2) || (argc > 5))

38 
	`¥ötf
("wrongárg!!!!\n\n");

42 
AícChn
 = 
	`©oi
(
¨gv
[1]);

43 i‡(!
	`VALUE_BETWEEN
(
AícChn
, 0, 
AENC_MAX_CHN_NUM
))

45 
	`¥ötf
("chn id must be [0,32]!!!!\n\n");

49 i‡(
¨gc
 >= 3)

51 i‡(!
	`VALUE_BETWEEN
(
	`°æí
(
¨gv
[2]), 0, 256))

53 
	`¥ötf
("pathÜenth must be [0,256]!!!!\n\n");

56 
	`mem˝y
(
°SaveFûeInfo
.
aFûeName
, 
¨gv
[2], 
	`°æí
(argv[2]));

57 
°SaveFûeInfo
.
aFûeName
[
	`°æí
(
¨gv
[2])] = '\0';

61 
	`mem˝y
(
°SaveFûeInfo
.
aFûeName
, "deÁu…", 
	`°æí
("default") + 1);

64 i‡(
¨gc
 >= 4)

66 i‡(!
	`VALUE_BETWEEN
(
	`©oi
(
¨gv
[3]), 1, 10 * 1024))

68 
	`¥ötf
("file size must be [1, 10*1024]!!!!\n\n");

71 
u32Size
 = 
	`©oi
(
¨gv
[3]);

74 i‡(
¨gc
 >= 5)

76 i‡(!
	`VALUE_BETWEEN
(
	`°æí
(
¨gv
[4]), 0, 256))

78 
	`¥ötf
("pathÜenth must be [0, 256]!!!!\n\n");

81 
	`mem˝y
(
°SaveFûeInfo
.
aFûeP©h
, 
¨gv
[4], 
	`°æí
(argv[4]));

82 
°SaveFûeInfo
.
aFûeP©h
[
	`°æí
(
¨gv
[4])] = '\0';

86 
Â
 = 
	`p›í
("pwd", "r");

87 
	`fgës
(
aCurP©h
, ◊CurP©h), 
Â
);

88 i‡(!
	`VALUE_BETWEEN
(
	`°æí
(
aCurP©h
), 0, 256))

90 
	`¥ötf
("pathÜenth must be [0,256]!!!!\n\n");

93 
aCurP©h
[
	`°æí
(aCurPath) - 1] = '/';

94 
	`¢¥ötf
(
°SaveFûeInfo
.
aFûeP©h
, 256, "%s", 
aCurP©h
);

95 
	`p˛o£
(
Â
);

99 
°SaveFûeInfo
.
u32FûeSize
 = 
u32Size
;

100 
°SaveFûeInfo
.
bCfg
 = 
HI_TRUE
;

102 
	`¥ötf
("Fûê∑th:%s, fûê«me:%s, fûêsize:%d*1024\n\n", 
°SaveFûeInfo
.
aFûeP©h
, stSaveFûeInfo.
aFûeName
, stSaveFûeInfo.
u32FûeSize
);

103 
s32Rë
 = 
	`HI_MPI_AENC_SaveFûe
(
AícChn
, &
°SaveFûeInfo
);

104 i‡(
s32Rë
 !
HI_SUCCESS
)

106 
	`¥ötf
("HI_MPI_AENC_SaveFûe(Ëîr‹,ªt=%x!!!!\n\n", 
s32Rë
);

110  
HI_SUCCESS
;

111 
	}
}

	@tools/ai_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_aio.h
"

16 
	~"mpi_ai.h
"

19 
	#VALUE_BETWEEN
(
x
,
mö
,
max
Ë(((x)>=(mö)Ë&& ((xË<(max)))

	)

21 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

23 
AUDIO_DEV
 
AiDevId
;

24 
AI_CHN
 
AiChn
;

25 
HI_U32
 
u32Size
 = 1024;

26 
AUDIO_SAVE_FILE_INFO_S
 
°SaveFûeInfo
;

27 
HI_S32
 
s32Rë
;

28 
FILE
* 
Â
 = 
NULL
;

29 
HI_CHAR
 
aCurP©h
[258];

31 
	`¥ötf
("Usage: ./ai_dump [dev] [chn] [name] [size] [path]\n");

32 
	`¥ötf
("dev:ái dev id.\n");

33 
	`¥ötf
("chn:ái chn id.\n");

34 
	`¥ötf
("name: fileÇame (default).\n");

35 
	`¥ötf
("size: file size(KB)(defalutly 1M).\n");

36 
	`¥ötf
("path:Öath for saving(currentÖath if NULL).\n\n\n");

38 i‡((
¨gc
 < 3) || (argc > 6))

40 
	`¥ötf
("wrongárg!!!!\n\n");

44 
AiDevId
 = 
	`©oi
(
¨gv
[1]);

45 i‡(!
	`VALUE_BETWEEN
(
AiDevId
, 0, 
AI_DEV_MAX_NUM
))

47 
	`¥ötf
("grp id must be [0,1]!!!!\n\n");

51 
AiChn
 = 
	`©oi
(
¨gv
[2]);

52 i‡(!
	`VALUE_BETWEEN
(
AiDevId
, 0, 
AIO_MAX_CHN_NUM
))

54 
	`¥ötf
("chn id must be [0,16]!!!!\n\n");

58 i‡(
¨gc
 >= 4)

60 i‡(!
	`VALUE_BETWEEN
(
	`°æí
(
¨gv
[3]), 0, 256))

62 
	`¥ötf
("pathÜenth must be [0,256]!!!!\n\n");

66 
	`mem˝y
(
°SaveFûeInfo
.
aFûeName
, 
¨gv
[3], 
	`°æí
(argv[3]));

67 
°SaveFûeInfo
.
aFûeName
[
	`°æí
(
¨gv
[3])] = '\0';

71 
	`mem˝y
(
°SaveFûeInfo
.
aFûeName
, "deÁu…", 
	`°æí
("default") + 1);

74 i‡(
¨gc
 >= 5)

76 i‡(!
	`VALUE_BETWEEN
(
	`©oi
(
¨gv
[4]), 1, 10 * 1024))

78 
	`¥ötf
("file size must be [1, 10*1024]!!!!\n\n");

81 
u32Size
 = 
	`©oi
(
¨gv
[4]);

84 i‡(
¨gc
 >= 6)

86 i‡(!
	`VALUE_BETWEEN
(
	`°æí
(
¨gv
[5]), 0, 256))

88 
	`¥ötf
("pathÜenth must be [0,256]!!!!\n\n");

91 
	`mem˝y
(
°SaveFûeInfo
.
aFûeP©h
, 
¨gv
[5], 
	`°æí
(argv[5]));

92 
°SaveFûeInfo
.
aFûeP©h
[
	`°æí
(
¨gv
[5])] = '\0';

96 
Â
 = 
	`p›í
("pwd", "r");

97 
	`fgës
(
aCurP©h
, ◊CurP©h), 
Â
);

98 i‡(!
	`VALUE_BETWEEN
(
	`°æí
(
aCurP©h
), 0, 256))

100 
	`¥ötf
("pathÜenth must be [0,256]!!!!\n\n");

103 
aCurP©h
[
	`°æí
(aCurPath) - 1] = '/';

104 
	`¢¥ötf
(
°SaveFûeInfo
.
aFûeP©h
, 256, "%s", 
aCurP©h
);

105 
	`p˛o£
(
Â
);

109 
°SaveFûeInfo
.
u32FûeSize
 = 
u32Size
;

110 
°SaveFûeInfo
.
bCfg
 = 
HI_TRUE
;

112 
	`¥ötf
("Fûê∑th:%s, fûê«me:%s, fûêsize:%d*1024\n\n", 
°SaveFûeInfo
.
aFûeP©h
, stSaveFûeInfo.
aFûeName
, stSaveFûeInfo.
u32FûeSize
);

113 
s32Rë
 = 
	`HI_MPI_AI_SaveFûe
(
AiDevId
, 
AiChn
, &
°SaveFûeInfo
);

114 i‡(
s32Rë
 !
HI_SUCCESS
)

116 
	`¥ötf
("HI_MPI_AI_SaveFûe(Ëîr‹,ªt=%x!!!!\n\n", 
s32Rë
);

120  
HI_SUCCESS
;

121 
	}
}

	@tools/isp_debug.c

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/io˘l.h
>

11 
	~<sys/pﬁl.h
>

12 
	~<sys/time.h
>

13 
	~<sys/mm™.h
>

14 
	~<f˙é.h
>

15 
	~<î∫o.h
>

16 
	~<±hªad.h
>

17 
	~<sig«l.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<sig«l.h
>

23 
	~"hi_comm⁄.h
"

24 
	~"hi_comm_video.h
"

25 
	~"hi_comm_sys.h
"

26 
	~"mpi_vb.h
"

27 
	~"mpi_sys.h
"

28 
	~"hi_comm_i•.h
"

29 
	~"mpi_i•.h
"

30 
	~"hi_¢s_˘æ.h
"

31 
	~"hi_´_comm.h
"

32 
	~"hi_awb_comm.h
"

33 
	~"mpi_´.h
"

34 
	~"mpi_awb.h
"

36 
HI_U32
 
au32Size
[3] = {0};

37 
HI_U32
 
au32PhyAddr
[3] = {0};

38 
HI_VOID
* 
≠VôAddr
[3] = {
HI_NULL
};

39 
HI_VOID
* 
≠VútAddr
[3] = {
HI_NULL
};

40 
FILE
* 
aÂ
[3] = {
HI_NULL
};

42 
HI_S32
 
HI_MPI_AE_Cål
(
ALG_LIB_S
* 
p°AeLib
, 
HI_U32
 
u32Cmd
, 
HI_VOID
* 
pVÆue
);

43 
HI_S32
 
HI_MPI_AWB_Cål
(
ALG_LIB_S
* 
p°AwbLib
, 
HI_U32
 
u32Cmd
, 
HI_VOID
* 
pVÆue
);

45 
ölöe
 
HI_VOID
 
U£age
(HI_VOID)

47 
¥ötf
("\nNOTICE: ThisÅool only can be used for DEBUG_ING !!!\n");

48 
¥ötf
("usage: ./Isp debug [ispdepth] [aedepth] [awbdepth]. sample: ./isp_debug 10 10 10\n");

49 
¥ötf
("[ispdepth]----------the frameÇumber of isp\n");

50 
¥ötf
("[aedepth] ----------the frameÇumber ofáe\n");

51 
¥ötf
("[awbdepth]----------the frameÇumber ofáwb\n\n");

56 
HI_S32
 
ISP_DEBUG_Exô
(
HI_VOID
)

58 
HI_S32
 
	gi
, 
	gs32Rë
 = 0;

59 
ISP_DEBUG_INFO_S
 
	g°Debug
;

60 
ALG_LIB_S
 
	g°Lib
;

63 
	g°Debug
.
	gbDebugEn
 = 0;

64 
	g°Debug
.
	gu32Dïth
 = 0;

65 
	g°Debug
.
	gu32PhyAddr
 = 0;

66 
	gs32Rë
 = 
HI_MPI_ISP_SëDebug
(0, &
°Debug
);

67 i‡(
	gHI_SUCCESS
 !
s32Rë
)

69 
¥ötf
("HI_MPI_ISP_SëDebug faûed 0x%x! Löe: %d\n", 
s32Rë
, 
__LINE__
);

70  
	gHI_FAILURE
;

74 
	g°Debug
.
	gbDebugEn
 = 0;

75 
	g°Debug
.
	gu32Dïth
 = 0;

76 
	g°Debug
.
	gu32PhyAddr
 = 0;

77 
	g°Lib
.
	gs32Id
 = 0;

78 
°r˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
);

79 
	gs32Rë
 = 
HI_MPI_AE_Cål
(&
°Lib
, 
AE_DEBUG_ATTR_SET
, (
HI_VOID
*)&
°Debug
);

80 i‡(
	gHI_SUCCESS
 !
s32Rë
)

82 
¥ötf
("HI_MPI_AE_Cå»Áûed 0x%x!\n", 
s32Rë
);

83  
	gHI_FAILURE
;

87 
	g°Debug
.
	gbDebugEn
 = 0;

88 
	g°Debug
.
	gu32Dïth
 = 0;

89 
	g°Debug
.
	gu32PhyAddr
 = 0;

90 
	g°Lib
.
	gs32Id
 = 0;

91 
°r˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
);

92 
	gs32Rë
 = 
HI_MPI_AWB_Cål
(&
°Lib
, 
AWB_DEBUG_ATTR_SET
, (
HI_VOID
*)&
°Debug
);

93 i‡(
	gHI_SUCCESS
 !
s32Rë
)

95 
¥ötf
("HI_MPI_ISP_AwbCå»Áûed 0x%x!\n", 
s32Rë
);

96  
	gHI_FAILURE
;

99 
¶ìp
(1);

101 
	gi
 = 0; i < 3; i++)

103 i‡(
	gHI_NULL
 !
aÂ
[
i
])

105 
f˛o£
(
aÂ
[
i
]);

106 
	gaÂ
[
i
] = 
HI_NULL
;

109 i‡((
	gHI_NULL
 !
≠VútAddr
[
i
]Ë&& (0 !
au32Size
[i]))

111 
HI_MPI_SYS_Munm≠
(
≠VútAddr
[
i
], 
au32Size
[i]);

112 
	g≠VútAddr
[
i
] = 
HI_NULL
;

113 
	gau32Size
[
i
] = 0;

116 i‡((0 !
au32PhyAddr
[
i
]Ë&& (
HI_NULL
 !
≠VôAddr
[i]))

118 
HI_MPI_SYS_MmzFªe
(
au32PhyAddr
[
i
], 
≠VôAddr
[i]);

119 
	gau32PhyAddr
[
i
] = 0;

120 
	g≠VôAddr
[
i
] = 
HI_NULL
;

124  
	gHI_SUCCESS
;

127 
HI_VOID
 
ISP_DEBUG_H™dÀSig
(
HI_S32
 
s32SigNo
)

129 i‡(
	gSIGINT
 =
s32SigNo
 || 
SIGTERM
 == s32SigNo)

131 
ISP_DEBUG_Exô
();

134 
exô
(0);

137 
HI_S32
 
maö
(
¨gc
, * 
¨gv
[])

139 
HI_S32
 
	gi
, 
	gs32Rë
 = 0;

141 
HI_U32
 
	gau32Dïth
[3] = {0};

142 
HI_CHAR
* 
	gacFûíame
[3] = {
HI_NULL
};

143 
ISP_DEBUG_INFO_S
 
	g°Debug
;

144 
ALG_LIB_S
 
	g°Lib
;

146 
sig«l
(
SIGINT
, 
ISP_DEBUG_H™dÀSig
);

147 
sig«l
(
SIGTERM
, 
ISP_DEBUG_H™dÀSig
);

149 
U£age
();

151 i‡((
	g¨gc
 <1Ë|| (
¨gc
 > 4))

153 
U£age
();

154  
	gHI_FAILURE
;

157 i‡(
	g¨gc
 > 1)

159 
	gau32Dïth
[0] = 
©oi
(
¨gv
[1]);

160 i‡(0 =
au32Dïth
[0])

162 
U£age
();

163  
	gHI_FAILURE
;

167 i‡(
	g¨gc
 > 2)

169 
	gau32Dïth
[1] = 
©oi
(
¨gv
[2]);

170 i‡(0 =
au32Dïth
[1])

172 
U£age
();

173  
	gHI_FAILURE
;

177 i‡(
	g¨gc
 > 3)

179 
	gau32Dïth
[2] = 
©oi
(
¨gv
[3]);

180 i‡(0 =
au32Dïth
[2])

182 
U£age
();

183  
	gHI_FAILURE
;

187 i‡(
	g¨gc
 > 1)

189 
	gau32Size
[0] = (
ISP_DBG_ATTR_S
Ë+ (
ISP_DBG_STATUS_S
Ë* 
au32Dïth
[0];

190 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc_Cached
(&
au32PhyAddr
[0], &
≠VôAddr
[0], 
HI_NULL
, HI_NULL, 
au32Size
[0]);

191 i‡(
	gHI_SUCCESS
 !
s32Rë
)

193 
¥ötf
("BufÇotÉnough!\n");

194  
	gHI_FAILURE
;

197 
	g°Debug
.
	gbDebugEn
 = 
HI_TRUE
;

198 
	g°Debug
.
	gu32Dïth
 = 
au32Dïth
[0];

199 
	g°Debug
.
	gu32PhyAddr
 = 
au32PhyAddr
[0];

200 
	gs32Rë
 = 
HI_MPI_ISP_SëDebug
(0, &
°Debug
);

201 i‡(
	gHI_SUCCESS
 !
s32Rë
)

203 
¥ötf
("HI_MPI_ISP_SëDebug faûed 0x%x!\n", 
s32Rë
);

204  
	gHI_FAILURE
;

208 i‡(
	g¨gc
 > 2)

210 
	gau32Size
[1] = (
AE_DBG_ATTR_S
Ë+ (
AE_DBG_STATUS_S
Ë* 
au32Dïth
[1];

211 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc_Cached
(&
au32PhyAddr
[1], &
≠VôAddr
[1], 
HI_NULL
, HI_NULL, 
au32Size
[1]);

212 i‡(
	gHI_SUCCESS
 !
s32Rë
)

214 
¥ötf
("BufÇotÉnough!\n");

215  
	gHI_FAILURE
;

218 
	g°Debug
.
	gbDebugEn
 = 
HI_TRUE
;

219 
	g°Debug
.
	gu32Dïth
 = 
au32Dïth
[1];

220 
	g°Debug
.
	gu32PhyAddr
 = 
au32PhyAddr
[1];

221 
	g°Lib
.
	gs32Id
 = 0;

222 
°r˝y
(
°Lib
.
acLibName
, 
HI_AE_LIB_NAME
);

223 
	gs32Rë
 = 
HI_MPI_AE_Cål
(&
°Lib
, 
AE_DEBUG_ATTR_SET
, (
HI_VOID
*)&
°Debug
);

224 i‡(
	gHI_SUCCESS
 !
s32Rë
)

226 
¥ötf
("HI_MPI_AE_Cå»Áûed 0x%x!\n", 
s32Rë
);

227  
	gHI_FAILURE
;

231 i‡(
	g¨gc
 > 3)

233 
	gau32Size
[2] = (
AWB_DBG_ATTR_S
Ë+ (
AWB_DBG_STATUS_S
Ë* 
au32Dïth
[2];

234 
	gs32Rë
 = 
HI_MPI_SYS_MmzAŒoc_Cached
(&
au32PhyAddr
[2], &
≠VôAddr
[2], 
HI_NULL
, HI_NULL, 
au32Size
[2]);

235 i‡(
	gHI_SUCCESS
 !
s32Rë
)

237 
¥ötf
("BufÇotÉnough!\n");

238  
	gHI_FAILURE
;

241 
	g°Debug
.
	gbDebugEn
 = 
HI_TRUE
;

242 
	g°Debug
.
	gu32Dïth
 = 
au32Dïth
[2];

243 
	g°Debug
.
	gu32PhyAddr
 = 
au32PhyAddr
[2];

244 
	g°Lib
.
	gs32Id
 = 0;

245 
°r˝y
(
°Lib
.
acLibName
, 
HI_AWB_LIB_NAME
);

246 
	gs32Rë
 = 
HI_MPI_AWB_Cål
(&
°Lib
, 
AWB_DEBUG_ATTR_SET
, (
HI_VOID
*)&
°Debug
);

247 i‡(
	gHI_SUCCESS
 !
s32Rë
)

249 
¥ötf
("HI_MPI_ISP_AwbCå»Áûed 0x%x!\n", 
s32Rë
);

250  
	gHI_FAILURE
;

254 
¥ötf
("Waiting,Öressány keyÅo stop write debug info!\n");

255 
gëch¨
();

257 
	gi
 = 0; i < 
	g¨gc
 - 1; i++)

259 
	g≠VútAddr
[
i
] = 
HI_MPI_SYS_Mm≠
(
au32PhyAddr
[i], 
au32Size
[i]);

260 i‡(
	gHI_NULL
 =
≠VútAddr
[
i
])

262 
¥ötf
("HI_MPI_SYS_Mmap failed!\n");

263  
	gHI_FAILURE
;

266 i‡(0 =
i
)

268 
acFûíame
[
i
] = "isp_debug_sys.dat";

270 i‡(1 =
i
)

272 
acFûíame
[
i
] = "isp_debug_ae.dat";

274 i‡(2 =
i
)

276 
acFûíame
[
i
] = "isp_debug_awb.dat";

282 
	gaÂ
[
i
] = 
f›í
(
acFûíame
[i], "wb");

283 i‡(
	gaÂ
[
i
] =
HI_NULL
)

285 
¥ötf
("›í fûê%†îr‹ \n", 
acFûíame
[
i
]);

286  
	gHI_FAILURE
;

290 
fwrôe
(
≠VútAddr
[
i
], 1, 
au32Size
[i], 
aÂ
[i]);

294 
ISP_DEBUG_Exô
();

296  
	gHI_SUCCESS
;

301 #ifde‡
__˝lu•lus


302 #i‡
__˝lu•lus


	@tools/rc_attr.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"hi_comm⁄.h
"

6 
	~"hi_comm_video.h
"

7 
	~"hi_comm_sys.h
"

8 
	~"hi_comm_vo.h
"

9 
	~"hi_comm_rc.h
"

10 
	~"hi_comm_víc.h
"

12 
	~"mpi_vb.h
"

13 
	~"mpi_sys.h
"

14 
	~"mpi_vi.h
"

15 
	~"mpi_vo.h
"

16 
	~"mpi_víc.h
"

18 
	#USAGE_HELP
()\

20 
	`¥ötf
("\n\tußgê: %†grou∞∑ø vÆue\n", 
¨gv
[0]); \

21 
	`¥ötf
("\n\tÖara: \n"); \

22 
	`¥ötf
("\tstattime [Õ≥º∆ ±º‰,µ•Œª:√Î\n"); \

23 
	`¥ötf
("\t bitrate ¬Î¬ £¨µ•Œª:kbps\n"); \

24 
	`¥ötf
("\tgop ¡Ω∏ˆI÷°µƒº‰∏Ù£¨µ•Œª:÷°\n"); \

25 
	`¥ötf
("\tqpdelta I÷°”ÎP÷°º‰µƒQP≤Ó“Ï£¨≤Ó“Ï‘Ω¥Û’˚ÃÂ–ßπ˚∫√µ´∫ÙŒ¸–ß”¶—œ÷ÿ\n"); \

26 
	`¥ötf
("\tmqpdelta ‘⁄∫ÍøÈº∂¬Î¬ øÿ÷∆ ±£¨√ø“ª––∫ÍøÈµƒ∆ ºQpœ‡∂‘”⁄÷°∆ ºQpµƒ≤®∂Ø∑˘∂»÷µ\n"); \

27 
	`¥ötf
("\tmaxqp ◊Ó¥ÛQP‘º ¯\n"); \

28 }

	)

30 
	#CHECK_RET
(
ex¥ess
,
«me
)\

32 i‡(
HI_SUCCESS
 !
ex¥ess
)\

34 
	`¥ötf
("%s failedát %s: LINE: %d !Érrno:%d \n",\

35 
«me
, 
__FUNCTION__
, 
__LINE__
, 
ex¥ess
);\

36  
HI_FAILURE
;\

38 }0)

	)

41 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

43 
HI_S32
 
s32Rë
;

44 
HI_S32
 
s32EncChn
;

45 
HI_CHAR
 
∑ø
[16];

46 
HI_U32
 
vÆue
 = 0;

47 
HI_U32
 
i
;

48 
VENC_RC_MODE_E
 
eMode
;

50 
VENC_RC_PARAM_S
 
°VícRcP¨am
;

51 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

53 i‡(
¨gc
 < 3)

55 
	`USAGE_HELP
();

58 
s32EncChn
 = 0;

59 
s32EncChn
 = 
	`©oi
(
¨gv
[1]);

60 
	`°r˝y
(
∑ø
, 
¨gv
[2]);

62 
s32Rë
 = 
	`HI_MPI_VENC_GëRcP¨am
(
s32EncChn
, &
°VícRcP¨am
);

63 
	`CHECK_RET
(
s32Rë
, "get RcÖaram");

64 
s32Rë
 = 
	`HI_MPI_VENC_GëChnAâr
(
s32EncChn
, &
°VícChnAâr
);

65 
	`CHECK_RET
(
s32Rë
, "get Rc Attr");

67 
eMode
 = 
°VícChnAâr
.
°RcAâr
.
íRcMode
;

70 i‡(0 =
	`°rcmp
(
∑ø
, "?"))

72 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

74 
	`¥ötf
("\t°©timê%d\n", 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32SètTime
);

75 
	`¥ötf
("\tbôøã %d\n", 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32BôR©e
);

76 
	`¥ötf
("\tg› %d\n", 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32G›
);

77 
	`¥ötf
("\tqpdñè %d\n", 
°VícRcP¨am
.
°P¨amH264Cbr
.
s32IPQPDñè
);

78 
	`¥ötf
("\tmaxq∞%d\n", 
°VícRcP¨am
.
°P¨amH264Cbr
.
u32MaxQp
);

82 
	`¥ötf
("\t°©timê%d\n", 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32SètTime
);

83 
	`¥ötf
("\tbôøã %d\n", 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32BôR©e
);

84 
	`¥ötf
("\tg› %d\n", 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32G›
);

85 
	`¥ötf
("\tqpdñè %d\n", 
°VícRcP¨am
.
°P¨amH265Cbr
.
s32IPQPDñè
);

86 
	`¥ötf
("\tmaxq∞%d\n", 
°VícRcP¨am
.
°P¨amH265Cbr
.
u32MaxQp
);

89 
	`¥ötf
("\tmqpdñè %d\n", 
°VícRcP¨am
.
u32RowQpDñè
);

92 
vÆue
 = 
	`©oi
(
¨gv
[3]);

93 
	`¥ötf
("ch¿%d,Ö¨®%s, vÆuê%d\n", 
s32EncChn
, 
∑ø
, 
vÆue
);

94 i‡(0 =
	`°rcmp
(
∑ø
, "stattime"))

96 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

98 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32SètTime
 = 
vÆue
;

102 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32SètTime
 = 
vÆue
;

105 i‡(0 =
	`°rcmp
(
∑ø
, "thªsh"Ë&& 
¨gc
 == 15)

107 
i
 = 0; i < 12; i++)

109 
°VícRcP¨am
.
u32ThrdI
[
i
] = 
	`©oi
(
¨gv
[i + 3]);

110 
°VícRcP¨am
.
u32ThrdP
[
i
] = 
	`©oi
(
¨gv
[i + 3]);

113 i‡(0 =
	`°rcmp
(
∑ø
, "±hªsh"Ë&& 
¨gc
 == 15)

115 
i
 = 0; i < 12; i++)

117 
°VícRcP¨am
.
u32ThrdP
[
i
] = 
	`©oi
(
¨gv
[i + 3]);

120 i‡(0 =
	`°rcmp
(
∑ø
, "bitrate"))

122 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

124 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32BôR©e
 = 
vÆue
;

128 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32BôR©e
 = 
vÆue
;

131 i‡–0 =
	`°rcmp
(
∑ø
, "framerate"))

133 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

135 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
‰32D°FrmR©e
 = 
vÆue
;

139 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
‰32D°FrmR©e
 = 
vÆue
;

142 i‡(0 =
	`°rcmp
(
∑ø
, "gop"))

144 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

146 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32G›
 = 
vÆue
;

151 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32G›
 = 
vÆue
;

154 i‡(0 =
	`°rcmp
(
∑ø
, "flut"))

156 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

158 
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
.
u32Flu˘u©eLevñ
 = 
vÆue
;

162 
°VícChnAâr
.
°RcAâr
.
°AârH265Cbr
.
u32Flu˘u©eLevñ
 = 
vÆue
;

165 i‡(0 =
	`°rcmp
(
∑ø
, "qpdelta"))

167 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

169 
°VícRcP¨am
.
°P¨amH264Cbr
.
s32IPQPDñè
 = 
vÆue
;

173 
°VícRcP¨am
.
°P¨amH265Cbr
.
s32IPQPDñè
 = 
vÆue
;

176 i‡(0 =
	`°rcmp
(
∑ø
, "maxqp"))

178 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

180 
°VícRcP¨am
.
°P¨amH264Cbr
.
u32MaxQp
 = 
vÆue
;

185 
°VícRcP¨am
.
°P¨amH265Cbr
.
u32MaxQp
 = 
vÆue
;

188 i‡(0 =
	`°rcmp
(
∑ø
, "level"))

190 i‡(
eMode
 =
VENC_RC_MODE_H264CBR
)

192 
°VícRcP¨am
.
°P¨amH264Cbr
.
s32QuÆôyLevñ
 = 
vÆue
;

196 
°VícRcP¨am
.
°P¨amH265Cbr
.
s32QuÆôyLevñ
 = 
vÆue
;

199 i‡(0 =
	`°rcmp
(
∑ø
, "mqpdelta"))

201 
°VícRcP¨am
.
u32RowQpDñè
 = 
vÆue
;

203 i‡–0 =
	`°rcmp
(
∑ø
, "deblock"))

205 
VENC_PARAM_H264_DBLK_S
 
°H264Dblk
;

206 
s32Rë
 = 
	`HI_MPI_VENC_GëH264Dblk
(0, &
°H264Dblk
);

207 
	`CHECK_RET
(
s32Rë
, "get deblock");

208 
°H264Dblk
.
dißbÀ_deblockög_fûãr_idc
 = 2;

209 
°H264Dblk
.
¶i˚_Æpha_c0_off£t_div2
 = 
vÆue
;

210 
°H264Dblk
.
¶i˚_bëa_off£t_div2
 = 
vÆue
;

211 
s32Rë
 = 
	`HI_MPI_VENC_SëH264Dblk
(0, &
°H264Dblk
);

212 
	`CHECK_RET
(
s32Rë
, "get deblock");

215 
s32Rë
 = 
	`HI_MPI_VENC_SëChnAâr
(
s32EncChn
, &
°VícChnAâr
);

216 
	`CHECK_RET
(
s32Rë
, "set Chn Attr");

218 
s32Rë
 = 
	`HI_MPI_VENC_SëRcP¨am
(
s32EncChn
, &
°VícRcP¨am
);

219 
	`CHECK_RET
(
s32Rë
, "set RcÖaram");

222 
	}
}

	@tools/vi_bayerdump.c

1 
	~<uni°d.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<sys/io˘l.h
>

5 
	~<sys/pﬁl.h
>

6 
	~<sys/time.h
>

7 
	~<sys/mm™.h
>

8 
	~<f˙é.h
>

9 
	~<î∫o.h
>

10 
	~<±hªad.h
>

11 
	~<sig«l.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<°rög.h
>

17 
	~"hi_comm⁄.h
"

18 
	~"hi_comm_video.h
"

19 
	~"hi_comm_sys.h
"

20 
	~"hi_comm_vi.h
"

21 
	~"hi_comm_vo.h
"

22 
	~"mpi_vb.h
"

23 
	~"mpi_sys.h
"

24 
	~"mpi_vi.h
"

25 
	~"mpi_vo.h
"

27 
	~"hi_comm_i•.h
"

28 
	~"mpi_i•.h
"

29 
	~"hi_¢s_˘æ.h
"

31 
	~"mpi_af.h
"

32 
	~"mpi_awb.h
"

33 
	~"mpi_´.h
"

36 
	#MAX_FRM_CNT
 256

	)

37 
	#MAX_FRM_WIDTH
 4096

38 

	)

40 
	#ALIGN_BACK
(
x
, 
a
Ë(◊Ë* (((xË/ (a))))

	)

44 
HI_S32
 
	gs_s32MemDev
 = -1;

46 
	#MEM_DEV_OPEN
() \

48 i‡(
s_s32MemDev
 <= 0)\

50 
s_s32MemDev
 = 
	`›í
("/dev/mem", 
O_CREAT
|
O_RDWR
|
O_SYNC
);\

51 i‡(
s_s32MemDev
 < 0)\

53 
	`≥º‹
("Open dev/memÉrror");\

57 }0)

	)

59 
	#MEM_DEV_CLOSE
() \

61 
HI_S32
 
s32Rë
;\

62 i‡(
s_s32MemDev
 > 0)\

64 
s32Rë
 = 
	`˛o£
(
s_s32MemDev
);\

65 if(
HI_SUCCESS
 !
s32Rë
)\

67 
	`≥º‹
("Close mem/dev Fail");\

68  
s32Rë
;\

70 
s_s32MemDev
 = -1;\

72 }0)

	)

74 
	$ußge
()

76 
	`¥ötf
(

91 
	`exô
(1);

92 
	}
}

94 
HI_VOID
* 
	$COMM_SYS_Mm≠
(
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
)

96 
HI_U32
 
u32Diff
;

97 
HI_U32
 
u32PagePhy
;

98 
HI_U32
 
u32PageSize
;

99 
HI_U8
* 
pPageAddr
;

102 
u32PagePhy
 = 
u32PhyAddr
 & 0xfffff000;

103 
u32Diff
 = 
u32PhyAddr
 - 
u32PagePhy
;

106 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

107 
pPageAddr
 = 
	`mm≠
 ((*)0, 
u32PageSize
, 
PROT_READ
 | 
PROT_WRITE
,

108 
MAP_SHARED
, 
s_s32MemDev
, 
u32PagePhy
);

109 i‡(
MAP_FAILED
 =
pPageAddr
 )

111 
	`≥º‹
("mmapÉrror");

112  
NULL
;

114  (
HI_VOID
*Ë(
pPageAddr
 + 
u32Diff
);

115 
	}
}

117 
HI_S32
 
	$COMM_SYS_Munm≠
(
HI_VOID
* 
pVúAddr
, 
HI_U32
 
u32Size
)

119 
HI_U32
 
u32PageAddr
;

120 
HI_U32
 
u32PageSize
;

121 
HI_U32
 
u32Diff
;

123 
u32PageAddr
 = (((
HI_U32
)
pVúAddr
) & 0xfffff000);

124 
u32Diff
 = (
HI_U32
)
pVúAddr
 - 
u32PageAddr
;

125 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

127  
	`munm≠
((
HI_VOID
*)
u32PageAddr
, 
u32PageSize
);

128 
	}
}

131 
	$ßm∂e_bayî_dump
(
VIDEO_FRAME_S
* 
pVBuf
, 
HI_U32
 
u32Nbô
, 
FILE
* 
pfd
)

133 
w
, 
h
;

134 
HI_U16
* 
pVBufVút_Y
;

135 
HI_U8
 
au8D©a
[
MAX_FRM_WIDTH
];

136 
HI_U16
 
au16D©a
[
MAX_FRM_WIDTH
];

137 
HI_U32
 
phy_addr
, 
size
;

138 
HI_U8
* 
pU£rPageAddr
[2];

140 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 2;

142 
phy_addr
 = 
pVBuf
->
u32PhyAddr
[0];

144 
	`MEM_DEV_OPEN
();

146 
pU£rPageAddr
[0] = (
HI_U8
*Ë
	`COMM_SYS_Mm≠
(
phy_addr
, 
size
);

147 i‡(
NULL
 =
pU£rPageAddr
[0])

152 
pVBufVút_Y
 = (
HI_U16
*)
pU£rPageAddr
[0];

155 
	`Ârötf
(
°dîr
, "ßvög......Raw d©a......u32Såide[0]: %d, width: %d\n", 
pVBuf
->
u32Såide
[0],ÖVBuf->
u32Width
);

156 
	`fÊush
(
°dîr
);

157 
h
 = 0; h < 
pVBuf
->
u32Height
; h++)

159 
HI_U16
 
u16D©a
;

160 
w
 = 0; w < 
pVBuf
->
u32Width
; w++)

162 i‡(8 =
u32Nbô
)

164 
au8D©a
[
w
] = (
pVBufVút_Y
[
h
 * 
pVBuf
->
u32Width
 + w] >> 8);

166 i‡(10 =
u32Nbô
)

168 
u16D©a
 = (
pVBufVút_Y
[
h
 * 
pVBuf
->
u32Width
 + 
w
] >> 6);

169 
au16D©a
[
w
] = 
u16D©a
;

171 i‡(12 =
u32Nbô
)

173 
u16D©a
 = (
pVBufVút_Y
[
h
 * 
pVBuf
->
u32Width
 + 
w
] >> 4);

174 
au16D©a
[
w
] = 
u16D©a
;

176 i‡(14 =
u32Nbô
)

178 
u16D©a
 = (
pVBufVút_Y
[
h
 * 
pVBuf
->
u32Width
 + 
w
] >> 2);

179 
au16D©a
[
w
] = 
u16D©a
;

181 i‡(16 =
u32Nbô
)

183 
u16D©a
 = 
pVBufVút_Y
[
h
 * 
pVBuf
->
u32Width
 + 
w
];

184 
au16D©a
[
w
] = 
u16D©a
;

188 
	`¥ötf
("Eº! Bayî d©®ˇn'àsuµ‹à%d bôs!eg: 8bôs;10bôs;12bôs.\n", 
u32Nbô
);

193 i‡(8 =
u32Nbô
)

195 
	`fwrôe
(
au8D©a
, 
pVBuf
->
u32Width
, 1, 
pfd
);

199 
	`fwrôe
(
au16D©a
, 
pVBuf
->
u32Width
, 2, 
pfd
);

203 
	`fÊush
(
pfd
);

205 
	`Ârötf
(
°dîr
, "d⁄êu32TimeRef: %d!\n", 
pVBuf
->
u32TimeRef
);

206 
	`fÊush
(
°dîr
);

208 
	`COMM_SYS_Munm≠
(
pU£rPageAddr
[0], 
size
);

210 
	`MEM_DEV_CLOSE
();

213 
	}
}

215 
HI_S32
 
	$VI_DumpBayî
(
VI_DEV
 
ViDev
, 
HI_U32
 
u32Nbô
, HI_U32 
u32C¡
, 
HI_S32
 
s32VcNum
)

217 
i
, 
j
;

218 
VI_FRAME_INFO_S
 
°Føme
;

219 
VI_FRAME_INFO_S
 
a°Føme
[
MAX_FRM_CNT
];

220 
HI_CHAR
 
szYuvName
[128];

221 
FILE
* 
pfd
;

222 
HI_S32
 
s32MûliSec
 = 2000;

223 
VI_CHN
 
ViChn
;

224 
HI_U32
 
u32C≠C¡
;

226 
	`VIU_GET_RAW_CHN
(
ViDev
, 
ViChn
);

228 i‡(
	`HI_MPI_VI_SëFømeDïth
(
ViChn
, 1))

230 
	`¥ötf
("HI_MPI_VI_SëFømeDïthÉº, vòch¿%d \n", 
ViChn
);

234 
	`u¶ìp
(5000);

236 i‡(
	`HI_MPI_VI_GëFøme
(
ViChn
, &
°Føme
.
°ViFrmInfo
, 
s32MûliSec
))

238 
	`¥ötf
("HI_MPI_VI_GëFømêîr, vòch¿%d \n", 
ViChn
);

243 
i
 = 0; i < 
u32C¡
; i++)

245 i‡(
	`HI_MPI_VI_GëFøme
(
ViChn
, &
a°Føme
[
i
].
°ViFrmInfo
, 
s32MûliSec
) < 0)

247 
	`¥ötf
("gë vòch¿%d fømêîr\n", 
ViChn
);

248 
	`¥ötf
("⁄ly gë %d føme\n", 
i
);

252 
u32C≠C¡
 = 
i
;

255 i‡(-1 =
s32VcNum
)

257 
	`•rötf
(
szYuvName
, "./vi_dev_%d_%d_%d_%d_%dbôs.øw", 
ViDev
,

258 
°Føme
.
°ViFrmInfo
.
°VFøme
.
u32Width
, stFøme.°ViFrmInfo.°VFøme.
u32Height
,

259 
u32C≠C¡
, 
u32Nbô
);

264 
	`•rötf
(
szYuvName
, "./vi_dev_%d_%d_%d_%d_%dbôs_vc%d.øw", 
ViDev
,

265 
°Føme
.
°ViFrmInfo
.
°VFøme
.
u32Width
, stFøme.°ViFrmInfo.°VFøme.
u32Height
,

266 
u32C≠C¡
, 
u32Nbô
, 
s32VcNum
);

269 
	`¥ötf
("Dum∞øw fømêo‡vòch¿%dÅÿfûe: \"%s\"\n", 
ViChn
, 
szYuvName
);

270 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
°Føme
.
°ViFrmInfo
);

273 
pfd
 = 
	`f›í
(
szYuvName
, "wb");

274 i‡(
NULL
 =
pfd
)

279 
j
 = 0; j < 
i
; j++)

282 
	`ßm∂e_bayî_dump
(&
a°Føme
[
j
].
°ViFrmInfo
.
°VFøme
, 
u32Nbô
, 
pfd
);

285 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
a°Føme
[
j
].
°ViFrmInfo
);

288 
	`f˛o£
(
pfd
);

291 
	}
}

293 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

295 
VI_DEV
 
ViDev
 = 0;

296 
HI_S32
 
s32Rë
 = 0;

297 
HI_U32
 
u32Nbô
 = 8;

298 
HI_U32
 
u32FrmC¡
 = 1;

299 
HI_S32
 
s32VcNum
 = -1;

300 
HI_U32
 
u32DesIdAddr
 = 0x20580210;

301 
HI_U32
 
u32BackupVÆue
;

303 
	`¥ötf
("\nNOTICE: ThisÅool only can be used for TESTING !!!\n");

304 i‡(
¨gc
 < 2)

306 
	`ußge
();

307  
s32Rë
;

310 
s32Rë
 = 
	`HI_MPI_SYS_GëReg
(
u32DesIdAddr
, &
u32BackupVÆue
);

311 i‡(
HI_SUCCESS
 !
s32Rë
)

313 
	`¥ötf
("HI_MPI_SYS_GëReg faûed, s32Rë = %d!\n", 
s32Rë
);

314  
s32Rë
;

317 i‡(0 =
u32BackupVÆue
)

319 
s32VcNum
 = -1;

321 i‡(1 =
u32BackupVÆue
)

323 
s32VcNum
 = 0;

325 i‡(2 =
u32BackupVÆue
)

327 
s32VcNum
 = 1;

331 
s32VcNum
 = -1;

334 i‡(
¨gc
 > 1)

336 
u32Nbô
 = 
	`©oi
(
¨gv
[1]);

338 i‡(
¨gc
 > 2)

340 
u32FrmC¡
 = 
	`©oi
(
¨gv
[2]);

342 i‡(
¨gc
 > 3)

344 
s32VcNum
 = 
	`©oi
(
¨gv
[3]);

347 
s32Rë
 = 
	`HI_MPI_VI_E«bÀBayîDump
(
ViDev
);

348 i‡(
HI_SUCCESS
 !
s32Rë
)

350 
	`¥ötf
("HI_MPI_VI_E«bÀBayîDum∞Áûed(0x%x)!\n", 
s32Rë
);

351  
s32Rë
;

354 i‡(-1 =
s32VcNum
)

356 
s32Rë
 = 
	`HI_MPI_SYS_SëReg
(
u32DesIdAddr
, 0x0);

357 i‡(
HI_SUCCESS
 !
s32Rë
)

359 
	`¥ötf
("HI_MPI_SYS_SëReg faûed, s32Rë = 0x%x!\n", 
s32Rë
);

360  
s32Rë
;

363 i‡(0 =
s32VcNum
)

365 
s32Rë
 = 
	`HI_MPI_SYS_SëReg
(
u32DesIdAddr
, 0x1);

366 i‡(
HI_SUCCESS
 !
s32Rë
)

368 
	`¥ötf
("HI_MPI_SYS_SëReg faûed, s32Rë = 0x%x!\n", 
s32Rë
);

369  
s32Rë
;

372 i‡(1 =
s32VcNum
)

374 
s32Rë
 = 
	`HI_MPI_SYS_SëReg
(
u32DesIdAddr
, 0x2);

375 i‡(
HI_SUCCESS
 !
s32Rë
)

377 
	`¥ötf
("HI_MPI_SYS_SëReg faûed, s32Rë = 0x%x!\n", 
s32Rë
);

378  
s32Rë
;

383 
	`¥ötf
("Invalid VCÇum!\n");

386 
	`¥ötf
("===pressány keyÅo continue.\n");

387 
	`gëch¨
();

389 
s32Rë
 = 
	`VI_DumpBayî
(
ViDev
, 
u32Nbô
, 
u32FrmC¡
, 
s32VcNum
);

390 i‡(
HI_SUCCESS
 !
s32Rë
)

392 
	`¥ötf
("VI_StartBayerData failed!\n");

393 
EXIT
;

396 
EXIT
:

397 
s32Rë
 = 
	`HI_MPI_VI_DißbÀBayîDump
(0);

398 i‡(
HI_SUCCESS
 !
s32Rë
)

400 
	`¥ötf
("HI_MPI_VI_DisableBayerDump failed!\n");

401  
s32Rë
;

404 
s32Rë
 = 
	`HI_MPI_SYS_SëReg
(
u32DesIdAddr
, 
u32BackupVÆue
);

405 i‡(
HI_SUCCESS
 !
s32Rë
)

407 
	`¥ötf
("HI_MPI_SYS_SëReg faûed, s32Rë = 0x%x!\n", 
s32Rë
);

408  
s32Rë
;

411  
HI_SUCCESS
;

412 
	}
}

	@tools/vi_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_vi.h
"

16 
	~"mpi_vi.h
"

17 
	~"hi_comm_vgs.h
"

18 
	~"mpi_vgs.h
"

23 
	#MAX_FRM_CNT
 256

	)

24 
	#MAX_FRM_WIDTH
 4096

	)

26 
VI_CHN_ATTR_S
 
	g°ChnAârBackup
;

29 
HI_S32
 
	gs_s32MemDev
 = -1;

31 
	#MEM_DEV_OPEN
() \

33 i‡(
s_s32MemDev
 <= 0)\

35 
s_s32MemDev
 = 
	`›í
("/dev/mem", 
O_CREAT
|
O_RDWR
|
O_SYNC
);\

36 i‡(
s_s32MemDev
 < 0)\

38 
	`≥º‹
("Open dev/memÉrror");\

42 }0)

	)

44 
	#MEM_DEV_CLOSE
() \

46 
HI_S32
 
s32Rë
;\

47 i‡(
s_s32MemDev
 > 0)\

49 
s32Rë
 = 
	`˛o£
(
s_s32MemDev
);\

50 if(
HI_SUCCESS
 !
s32Rë
)\

52 
	`≥º‹
("Close mem/dev Fail");\

53  
s32Rë
;\

55 
s_s32MemDev
 = -1;\

57 }0)

	)

59 
HI_VOID
* 
	$COMM_SYS_Mm≠
(
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
)

61 
HI_U32
 
u32Diff
;

62 
HI_U32
 
u32PagePhy
;

63 
HI_U32
 
u32PageSize
;

64 
HI_U8
* 
pPageAddr
;

67 
u32PagePhy
 = 
u32PhyAddr
 & 0xfffff000;

68 
u32Diff
 = 
u32PhyAddr
 - 
u32PagePhy
;

71 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

72 
pPageAddr
 = 
	`mm≠
 ((*)0, 
u32PageSize
, 
PROT_READ
 | 
PROT_WRITE
,

73 
MAP_SHARED
, 
s_s32MemDev
, 
u32PagePhy
);

74 i‡(
MAP_FAILED
 =
pPageAddr
 )

76 
	`≥º‹
("mmapÉrror");

77  
NULL
;

79  (
HI_VOID
*Ë(
pPageAddr
 + 
u32Diff
);

80 
	}
}

82 
HI_S32
 
	$COMM_SYS_Munm≠
(
HI_VOID
* 
pVúAddr
, 
HI_U32
 
u32Size
)

84 
HI_U32
 
u32PageAddr
;

85 
HI_U32
 
u32PageSize
;

86 
HI_U32
 
u32Diff
;

88 
u32PageAddr
 = (((
HI_U32
)
pVúAddr
) & 0xfffff000);

89 
u32Diff
 = (
HI_U32
)
pVúAddr
 - 
u32PageAddr
;

90 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

92  
	`munm≠
((
HI_VOID
*)
u32PageAddr
, 
u32PageSize
);

93 
	}
}

97 #ifde‡
DIS_DATA_DEBUG


98 
	#DIS_STATS_NUM
 9

	)

99 
	shiVI_DIS_STATS_S


101 
HI_S32
 
	mas32HDñè
[
DIS_STATS_NUM
];

102 
HI_S32
 
	mas32HSad
[
DIS_STATS_NUM
];

103 
HI_S32
 
	mas32HMv
[
DIS_STATS_NUM
];

104 
HI_S32
 
	mas32VDñè
[
DIS_STATS_NUM
];

105 
HI_S32
 
	mas32VSad
[
DIS_STATS_NUM
];

106 
HI_S32
 
	mas32VMv
[
DIS_STATS_NUM
];

107 
HI_U32
 
	mu32HMŸi⁄
;

108 
HI_U32
 
	mu32VMŸi⁄
;

109 
HI_U32
 
	mu32HOff£t
;

110 
HI_U32
 
	mu32VOff£t
;

111 } 
	tVI_DIS_STATS_S
;

113 
	$vi_dump_ßve_⁄e_dis
(
VI_CHN
 
ViChn
, 
VIDEO_FRAME_S
* 
pVBuf
)

115 
g_°rDisBuff
[256] = {'\0'};

116 
szDisFûeName
[128];

117 
FILE
* 
p°DisFd
 = 
NULL
;

118 
HI_U32
 
u32DisBufOff£t
;

119 
VI_DIS_STATS_S
* 
p°DisSèts
;

120 
j
;

121 
HI_U32
 
u32BufSize
;

122 
iBufSize
 = 0;

123 
size
 = 256;

125 i‡(
p°DisFd
 =
NULL
)

127 
	`•rötf
(
szDisFûeName
, "./vi_%dp_01_dis_ªsu….txt", 
pVBuf
->
u32Width
);

129 
p°DisFd
 = 
	`f›í
(
szDisFûeName
, "wb");

130 i‡(
NULL
 =
p°DisFd
)

136 
u32BufSize
 = 
pVBuf
->
u32Såide
[0] *ÖVBuf->
u32Height
;

137 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
pVBuf
->
íPixñF‹m©
)

139 
u32BufSize
 *= 2;

143 
u32BufSize
 = u32BufSize * 3 >> 1;

146 
u32DisBufOff£t
 = 
pVBuf
->
u32PhyAddr
[0] + 
u32BufSize
;

147 
p°DisSèts
 = (
VI_DIS_STATS_S
*Ë
	`COMM_SYS_Mm≠
(
u32DisBufOff£t
, 
size
);

149 
	`•rötf
(
g_°rDisBuff
, "%s\n", \

151 
iBufSize
 = 
	`°æí
(
g_°rDisBuff
) + 1;

152 
	`fwrôe
(
g_°rDisBuff
, 
iBufSize
, 1, 
p°DisFd
);

155 
j
 = 0; j < 9; j++)

157 
	`•rötf
(
g_°rDisBuff
, "%8d, %8d, %8d, %8d, %8d, %8d\n", \

158 
p°DisSèts
->
as32VDñè
[
j
],Ö°DisSèts->
as32VSad
[j],Ö°DisSèts->
as32VMv
[j], \

159 
p°DisSèts
->
as32HDñè
[
j
],Ö°DisSèts->
as32HSad
[j],Ö°DisSèts->
as32HMv
[j]);

160 
iBufSize
 = 
	`°æí
(
g_°rDisBuff
) + 1;

161 
	`fwrôe
(
g_°rDisBuff
, 
iBufSize
, 1, 
p°DisFd
);

164 
	`•rötf
(
g_°rDisBuff
, "%s\n", "H_Motion, V_Motion, *H_Offset, *V_Offset");

165 
iBufSize
 = 
	`°æí
(
g_°rDisBuff
) + 1;

166 
	`fwrôe
(
g_°rDisBuff
, 
iBufSize
, 1, 
p°DisFd
);

168 
	`•rötf
(
g_°rDisBuff
, "%8d %8d %8d %8d\n\n", \

169 
p°DisSèts
->
u32HMŸi⁄
,Ö°DisSèts->
u32VMŸi⁄
,

170 
p°DisSèts
->
u32HOff£t
,Ö°DisSèts->
u32VOff£t
);

171 
iBufSize
 = 
	`°æí
(
g_°rDisBuff
) + 1;

172 
	`fwrôe
(
g_°rDisBuff
, 
iBufSize
, 1, 
p°DisFd
);

173 
	`fÊush
(
p°DisFd
);

175 
	`COMM_SYS_Munm≠
((
HI_VOID
*)
p°DisSèts
, 
size
);

176 
	}
}

181 
	$vi_dump_ßve_⁄e_‰ame
(
VIDEO_FRAME_S
* 
pVBuf
, 
FILE
* 
pfd
)

183 
w
, 
h
;

184 * 
pVBufVút_Y
;

185 * 
pVBufVút_C
;

186 * 
pMemC⁄ã¡
;

187 
TmpBuff
[
MAX_FRM_WIDTH
];

188 
HI_U32
 
phy_addr
, 
size
;

189 
FILE
* 
Â
;

190 
HI_CHAR
* 
pU£rPageAddr
[2];

191 
PIXEL_FORMAT_E
 
íPixñF‹m©
 = 
pVBuf
->enPixelFormat;

192 
HI_U32
 
u32UvHeight
;

194 i‡(
pVBuf
->
u32Width
 > 
MAX_FRM_WIDTH
)

196 
	`¥ötf
("Ovî max fømêwidth: %d, c™'àsuµ‹t.\n", 
MAX_FRM_WIDTH
);

200 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
íPixñF‹m©
)

202 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 3 / 2;

203 
u32UvHeight
 = 
pVBuf
->
u32Height
 / 2;

207 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 2;

208 
u32UvHeight
 = 
pVBuf
->
u32Height
;

211 
phy_addr
 = 
pVBuf
->
u32PhyAddr
[0];

213 
pU£rPageAddr
[0] = (
HI_CHAR
*Ë
	`COMM_SYS_Mm≠
(
phy_addr
, 
size
);

214 i‡(
NULL
 =
pU£rPageAddr
[0])

218 
	`¥ötf
("°ride: %d,%d\n", 
pVBuf
->
u32Såide
[0],ÖVBuf->u32Stride[1] );

220 
pVBufVút_Y
 = 
pU£rPageAddr
[0];

221 
pVBufVút_C
 = 
pVBufVút_Y
 + (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
);

223 
Â
 = 
	`f›í
("save.yuv","wb");

224 
	`fwrôe
(
pU£rPageAddr
[0], 1920 * 1080 * 3 / 2, 1, 
Â
);

225 
	`f˛o£
(
Â
);

228 
	`Ârötf
(
°dîr
, "saving......Y......");

229 
	`fÊush
(
°dîr
);

230 
h
 = 0; h < 
pVBuf
->
u32Height
; h++)

232 
pMemC⁄ã¡
 = 
pVBufVút_Y
 + 
h
 * 
pVBuf
->
u32Såide
[0];

233 
	`fwrôe
(
pMemC⁄ã¡
, 
pVBuf
->
u32Width
, 1, 
pfd
);

235 
	`fÊush
(
pfd
);

238 
	`Ârötf
(
°dîr
, "U......");

239 
	`fÊush
(
°dîr
);

240 
h
 = 0; h < 
u32UvHeight
; h++)

242 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

244 
pMemC⁄ã¡
 += 1;

246 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

248 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

249 
pMemC⁄ã¡
 += 2;

251 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

253 
	`fÊush
(
pfd
);

256 
	`Ârötf
(
°dîr
, "V......");

257 
	`fÊush
(
°dîr
);

258 
h
 = 0; h < 
u32UvHeight
; h++)

260 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

262 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

264 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

265 
pMemC⁄ã¡
 += 2;

267 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

269 
	`fÊush
(
pfd
);

271 
	`Ârötf
(
°dîr
, "d⁄ê%d!\n", 
pVBuf
->
u32TimeRef
);

272 
	`fÊush
(
°dîr
);

274 
	`COMM_SYS_Munm≠
(
pU£rPageAddr
[0], 
size
);

275 
	}
}

277 
HI_S32
 
	$SAMPLE_VI_BackupAâr
(
VI_CHN
 
ViChn
)

279 
VI_CHN_ATTR_S
 
°ChnAâr
;

281 
	`MEM_DEV_OPEN
();

283 i‡(
ViChn
 != 0)

288 i‡(
	`HI_MPI_VI_GëChnAâr
(
ViChn
, &
°ChnAârBackup
))

290 
	`¥ötf
("HI_MPI_VI_GëChnAâ∏îr, vòch¿%d \n", 
ViChn
);

295 
	`HI_MPI_VI_SëFømeDïth
(
ViChn
, 0);

296 
	`¶ìp
(1);

298 
	`¥ötf
("com¥es†mode: %d -> %d. \n", 
°ChnAârBackup
.
íCom¥essMode
, 
COMPRESS_MODE_NONE
);

300 
	`mem˝y
(&
°ChnAâr
, &
°ChnAârBackup
, (
VI_CHN_ATTR_S
));

302 
°ChnAâr
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

305 i‡(
	`HI_MPI_VI_SëChnAâr
(
ViChn
, &
°ChnAâr
))

307 
	`¥ötf
("HI_MPI_VI_SëChnAâ∏îr, vòch¿%d \n", 
ViChn
);

312 
	}
}

314 
HI_S32
 
	$SAMPLE_VI_Re°‹eAâr
(
VI_CHN
 
ViChn
)

316 
	`MEM_DEV_CLOSE
();

318 i‡(
ViChn
 != 0)

323 
	`¥ötf
("ª°‹êcom¥es†mode: %d\n", 
°ChnAârBackup
.
íCom¥essMode
);

324 i‡(
	`HI_MPI_VI_SëChnAâr
(
ViChn
, &
°ChnAârBackup
))

326 
	`¥ötf
("HI_MPI_VI_SëChnAâ∏îr, vòch¿%d \n", 
ViChn
);

331 
	}
}

333 
HI_S32
 
	$SAMPLE_MISC_GETVB
(
VIDEO_FRAME_INFO_S
* 
p°OutFøme
, VIDEO_FRAME_INFO_S* 
p°InFøme
,

334 
VB_BLK
* 
p°VbBlk
, 
VB_POOL
 
poﬁ
)

336 
HI_U32
 
u32Size
;

337 
VB_BLK
 
VbBlk
 = 
VB_INVALID_HANDLE
;

338 
HI_U32
 
u32PhyAddr
;

339 
HI_VOID
* 
pVúAddr
;

340 
HI_U32
 
u32LumaSize
, 
u32ChrmSize
;

341 
HI_U32
 
u32LSåide
, 
u32CSåide
;

342 
HI_U32
 
u32Width
, 
u32Height
;

345 
u32Width
 = 
p°InFøme
->
°VFøme
.u32Width;

346 
u32Height
 = 
p°InFøme
->
°VFøme
.u32Height;

347 
u32LSåide
 = 
p°InFøme
->
°VFøme
.
u32Såide
[0];

348 
u32CSåide
 = 
p°InFøme
->
°VFøme
.
u32Såide
[1];

349 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
p°InFøme
->
°VFøme
.
íPixñF‹m©
)

351 
u32Size
 = 
u32LSåide
 * 
u32Height
 << 1;

352 
u32LumaSize
 = 
u32LSåide
 * 
u32Height
;

353 
u32ChrmSize
 = 
u32LumaSize
;

355 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
p°InFøme
->
°VFøme
.
íPixñF‹m©
)

357 
u32Size
 = (3 * 
u32LSåide
 * 
u32Height
) >> 1;

358 
u32LumaSize
 = 
u32LSåide
 * 
u32Height
;

359 
u32ChrmSize
 = 
u32LumaSize
 >> 1;

366 
VbBlk
 = 
	`HI_MPI_VB_GëBlock
(
poﬁ
, 
u32Size
, 
HI_NULL
);

367 *
p°VbBlk
 = 
VbBlk
;

369 i‡(
VB_INVALID_HANDLE
 =
VbBlk
)

371 
	`¥ötf
("HI_MPI_VB_GëBlockÉº! size:%d\n", 
u32Size
);

372  
HI_FAILURE
;

375 
u32PhyAddr
 = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(
VbBlk
);

376 i‡(0 =
u32PhyAddr
)

378 
	`¥ötf
("HI_MPI_VB_Handle2PhysAddrÉrr!\n");

379  
HI_FAILURE
;

382 
pVúAddr
 = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
(
u32PhyAddr
, 
u32Size
);

383 i‡(
NULL
 =
pVúAddr
)

385 
	`¥ötf
("HI_MPI_SYS_MmapÉrr!\n");

386  
HI_FAILURE
;

389 
p°OutFøme
->
u32PoﬁId
 = 
	`HI_MPI_VB_H™dÀ2PoﬁId
(
VbBlk
);

390 i‡(
VB_INVALID_POOLID
 =
p°OutFøme
->
u32PoﬁId
)

392 
	`¥ötf
("u32PoolIdÉrr!\n");

393  
HI_FAILURE
;

396 
p°OutFøme
->
°VFøme
.
u32PhyAddr
[0] = u32PhyAddr;

399 
p°OutFøme
->
°VFøme
.
u32PhyAddr
[1] =Ö°OutFøme->°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

400 
p°OutFøme
->
°VFøme
.
u32PhyAddr
[2] =Ö°OutFøme->°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

402 
p°OutFøme
->
°VFøme
.
pVúAddr
[0] =ÖVirAddr;

403 
p°OutFøme
->
°VFøme
.
pVúAddr
[1] =Ö°OutFøme->°VFøme.pVúAddr[0] + 
u32LumaSize
;

404 
p°OutFøme
->
°VFøme
.
pVúAddr
[2] =Ö°OutFøme->°VFøme.pVúAddr[1] + 
u32ChrmSize
;

406 
p°OutFøme
->
°VFøme
.
u32Width
 = u32Width;

407 
p°OutFøme
->
°VFøme
.
u32Height
 = u32Height;

408 
p°OutFøme
->
°VFøme
.
u32Såide
[0] = 
u32LSåide
;

409 
p°OutFøme
->
°VFøme
.
u32Såide
[1] = 
u32CSåide
;

410 
p°OutFøme
->
°VFøme
.
u32Såide
[2] = 
u32CSåide
;

411 
p°OutFøme
->
°VFøme
.
u32Fõld
 = 
VIDEO_FIELD_FRAME
;

412 
p°OutFøme
->
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

413 
p°OutFøme
->
°VFøme
.
íPixñF‹m©
 = 
p°InFøme
->stVFrame.enPixelFormat;

415  
HI_SUCCESS
;

416 
	}
}

419 
HI_S32
 
	$SAMPLE_MISC_ViDump
(
VI_CHN
 
ViChn
, 
HI_U32
 
u32C¡
)

421 
HI_S32
 
i
, 
j
, 
s32Rë
;

422 
VIDEO_FRAME_INFO_S
 
°Føme
;

423 
VIDEO_FRAME_INFO_S
* 
p°OutFøme
;

424 
VIDEO_FRAME_INFO_S
 
a°Føme
[
MAX_FRM_CNT
];

425 
HI_CHAR
 
szYuvName
[128];

426 
HI_CHAR
 
szPixFrm
[10];

427 
FILE
* 
pfd
;

428 
HI_S32
 
s32MûliSec
 = 2000;

429 
VGS_TASK_ATTR_S
 
°Task
;

430 
VGS_HANDLE
 
hH™dÀ
;

431 
VB_BLK
 
VbBlk
 = 
VB_INVALID_HANDLE
;

432 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

433 
HI_U32
 
u32BlkSize
 = 0;

435 
	`¥ötf
("\nNOTICE: ThisÅool only can be used for TESTING !!!\n");

436 
	`¥ötf
("usage: ./vi_dump [vichn] [frmcnt]. sample: ./vi_dump 0 5\n\n");

438 i‡(
	`HI_MPI_VI_SëFømeDïth
(
ViChn
, 1))

440 
	`¥ötf
("HI_MPI_VI_SëFømeDïthÉº, vòch¿%d \n", 
ViChn
);

444 
	`u¶ìp
(90000);

446 i‡(
	`HI_MPI_VI_GëFøme
(
ViChn
, &
°Føme
, 
s32MûliSec
))

448 
	`¥ötf
("HI_MPI_VI_GëFømêîr, vòch¿%d \n", 
ViChn
);

453 
	`°r˝y
(
szPixFrm
,

454 (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
) ? "p420" : "p422");

455 
	`•rötf
(
szYuvName
, "./vi_chn_%d_%d_%d_%s_%d.yuv", 
ViChn
,

456 
°Føme
.
°VFøme
.
u32Width
, stFøme.°VFøme.
u32Height
, 
szPixFrm
, 
u32C¡
);

457 
	`¥ötf
("Dum∞YUV fømêo‡vòch¿%dÅÿfûe: \"%s\"\n", 
ViChn
, 
szYuvName
);

459 
s32Rë
 = 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
°Føme
);

460 i‡(
s32Rë
 !
HI_SUCCESS
)

462 
	`¥ötf
("release frame failed\n");

463 
END1
;

466 i‡(
COMPRESS_MODE_NONE
 !
°Føme
.
°VFøme
.
íCom¥essMode
)

468 
u32BlkSize
 = (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
)

469 ? (
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
 * 3 >> 1) : (stFrame.stVFrame.u32Stride[0] * stFrame.stVFrame.u32Height * 2);

472 
hPoﬁ
 = 
	`HI_MPI_VB_Cª©ePoﬁ
(
u32BlkSize
, 2 , 
NULL
);

473 i‡(
hPoﬁ
 =
VB_INVALID_POOLID
)

475 
	`¥ötf
("HI_MPI_VB_CreatePool failed! \n");

476 
END1
;

481 
pfd
 = 
	`f›í
(
szYuvName
, "wb");

482 i‡(
NULL
 =
pfd
)

488 
i
 = 0; i < 
u32C¡
; i++)

490 i‡(
	`HI_MPI_VI_GëFøme
(
ViChn
, &
a°Føme
[
i
], 
s32MûliSec
) < 0)

492 
	`¥ötf
("gë vòch¿%d fømêîr\n", 
ViChn
);

493 
	`¥ötf
("⁄ly gë %d føme\n", 
i
);

498 
j
 = 0; j < 
i
; j++)

500 i‡(
COMPRESS_MODE_NONE
 !
a°Føme
[
j
].
°VFøme
.
íCom¥essMode
)

502 
p°OutFøme
 = &
°Task
.
°ImgOut
;

503 
	`mem˝y
(&
°Task
.
°ImgIn
.
°VFøme
, &
a°Føme
[
j
].°VFøme, (
VIDEO_FRAME_S
));

504 
°Task
.
°ImgIn
.
u32PoﬁId
 = 
a°Føme
[
j
].u32PoolId;

505 i‡(
HI_SUCCESS
 !
	`SAMPLE_MISC_GETVB
(
p°OutFøme
, &
a°Føme
[
j
], &
VbBlk
, 
hPoﬁ
))

507 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
a°Føme
[
j
]);

509 i‡(
VB_INVALID_HANDLE
 !
VbBlk
)

511 
	`HI_MPI_VB_Rñó£Block
(
VbBlk
);

516 
s32Rë
 = 
	`HI_MPI_VGS_BegöJob
(&
hH™dÀ
);

517 i‡(
s32Rë
 !
HI_SUCCESS
)

519 
	`¥ötf
("HI_MPI_VGS_BeginJob failed\n");

520 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
a°Føme
[
j
]);

521 
	`HI_MPI_VB_Rñó£Block
(
VbBlk
);

522 
END2
;

525 
s32Rë
 = 
	`HI_MPI_VGS_AddSˇÀTask
(
hH™dÀ
, &
°Task
);

527 i‡(
s32Rë
 !
HI_SUCCESS
)

529 
	`¥ötf
("HI_MPI_VGS_AddScaleTask failed\n");

530 
	`HI_MPI_VGS_C™˚lJob
(
hH™dÀ
);

531 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
a°Føme
[
j
]);

532 
	`HI_MPI_VB_Rñó£Block
(
VbBlk
);

533 
END2
;

537 
s32Rë
 = 
	`HI_MPI_VGS_EndJob
(
hH™dÀ
);

538 i‡(
s32Rë
 !
HI_SUCCESS
)

540 
	`¥ötf
("HI_MPI_VGS_EndJob failed\n");

541 
	`HI_MPI_VGS_C™˚lJob
(
hH™dÀ
);

542 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
a°Føme
[
j
]);

543 
	`HI_MPI_VB_Rñó£Block
(
VbBlk
);

544 
END2
;

547 
	`vi_dump_ßve_⁄e_‰ame
(&
p°OutFøme
->
°VFøme
, 
pfd
);

551 
	`vi_dump_ßve_⁄e_‰ame
(&
a°Føme
[
j
].
°VFøme
, 
pfd
);

554 #ifde‡
DIS_DATA_DEBUG


555 
	`vi_dump_ßve_⁄e_dis
(
ViChn
, &
a°Føme
[
j
].
°VFøme
);

559 
	`HI_MPI_VI_Rñó£Føme
(
ViChn
, &
a°Føme
[
j
]);

560 
	`HI_MPI_VB_Rñó£Block
(
VbBlk
);

563 
END2
:

564 i‡(
hPoﬁ
 !
VB_INVALID_POOLID
)

566 
	`HI_MPI_VB_De°royPoﬁ
(
hPoﬁ
);

568 
END1
:

569 
	`f˛o£
(
pfd
);

572 
	}
}

575 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

577 
VI_CHN
 
ViChn
 = 0;

578 
HI_U32
 
u32FrmC¡
 = 1;

580 i‡(
¨gc
 > 1)

582 
ViChn
 = 
	`©oi
(
¨gv
[1]);

585 i‡(
¨gc
 > 2)

587 
u32FrmC¡
 = 
	`©oi
(
¨gv
[2]);

590 
	`MEM_DEV_OPEN
();

592 
	`SAMPLE_MISC_ViDump
(
ViChn
, 
u32FrmC¡
);

594 
	`MEM_DEV_CLOSE
();

597  
HI_SUCCESS
;

598 
	}
}

	@tools/vo_video_csc_config.c

17 
	~<sys/mm™.h
>

18 
	~<f˙é.h
>

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<sys/io˘l.h
>

25 
	~"hi_comm⁄.h
"

26 
	~"hi_comm_video.h
"

27 
	~"hi_comm_sys.h
"

28 
	~"mpi_sys.h
"

29 
	~"hi_comm_vb.h
"

30 
	~"mpi_vb.h
"

31 
	~"hi_comm_vo.h
"

32 
	~"mpi_vo.h
"

33 
	~"hi_deföes.h
"

35 
	#VO_CHECK_RET
(
ex¥ess
,
«me
)\

	)

37 
HI_S32
 
	gRë
;\

38 
	gRë
 = 
ex¥ess
;\

39 i‡(
	gHI_SUCCESS
 !
Rë
)\

41 
¥ötf
("%†Áûedáà%s: LINE: %d wôh %#x!\n", 
«me
, 
__FUNCTION__
, 
__LINE__
, 
Rë
);\

45 
HI_VOID
 
	$ußge
(
HI_VOID
)

47 
	`¥ötf
("\nNOTICE: ThisÅool only can be used for TESTING !!!\n");

48 
	`¥ötf
("NOTICE: Luma/Contrast/Hue/Satuature [0,100], Gain [0, 0x3f],enCscMatrix[0,2]\n");

49 
	`¥ötf
("enCscMatrix : 0 - (identity);1-(601-709);2-(709-601).\n");

50 
	`¥ötf
("usage: ./vo_video_csc_config [LayerId][enCscMatrix] [Luma] [Contrast] [Hue] [Satuature] [Gain]. sample: ./vo_video_csc_config 0 1 50 50 50 50 48\n\n");

51 
	}
}

53 
HI_S32
 
	$vo_video_csc_c⁄fig
(
HI_U32
 
u32LayîId
, HI_U32 
íCscM©rix
, HI_U32 
u32Luma
, HI_U32 
u32C⁄åa°
, HI_U32 
u32Hue
, HI_U32 
u32S©u©uª
, HI_U32 
u32Gaö
)

55 
VO_CSC_S
 
°VideoCSC
;

56 
	`ußge
();

58 i‡(
u32LayîId
 < 0 || u32LayerId > 4)

60 
	`¥ötf
 ("layerÉrr \n");

61 
	`ußge
();

65 i‡(
u32C⁄åa°
 < 0 || u32Contrast > 100)

67 
	`¥ötf
 ("u32ContrastÉrr \n");

68 
	`ußge
();

71 i‡(
u32Hue
 < 0 || u32Hue > 100)

73 
	`¥ötf
 ("u32HueÉrr \n");

74 
	`ußge
();

77 i‡(
u32Luma
 < 0 || u32Luma > 100)

79 
	`¥ötf
 ("u32LumaÉrr \n");

80 
	`ußge
();

83 i‡(
u32S©u©uª
 < 0 || u32Satuature > 100)

85 
	`¥ötf
 ("u32SatuatureÉrr \n");

86 
	`ußge
();

89 i‡(
u32Gaö
 < 0x0 || u32Gain > 0x3F)

91 
	`¥ötf
 ("u32GainÉrr \n");

92 
	`ußge
();

95 i‡(
íCscM©rix
 < 0 ||ÉnCscMatrix > 2)

97 
	`¥ötf
 ("enCscMatrixÉrr \n");

98 
	`ußge
();

101 
°VideoCSC
.
íCscM©rix
 =ÉnCscMatrix;

102 
°VideoCSC
.
u32C⁄åa°
 = u32Contrast;

103 
°VideoCSC
.
u32Hue
 = u32Hue;

104 
°VideoCSC
.
u32Luma
 = u32Luma;

105 
°VideoCSC
.
u32S©u©uª
 = u32Satuature;

106 
	`VO_CHECK_RET
(
	`HI_MPI_VO_SëVideoLayîCSC
(
u32LayîId
, &
°VideoCSC
), "HI_MPI_VO_SetVideoLayerCSC");

107 
	`VO_CHECK_RET
(
	`HI_MPI_VO_GëVideoLayîCSC
(
u32LayîId
, &
°VideoCSC
), "HI_MPI_VO_GetVideoLayerCSC");

108 
	`¥ötf
("m©rix %d, c⁄ %d, huê%d,Üum®%d, stu %d\n", 
°VideoCSC
.
íCscM©rix
,

109 
°VideoCSC
.
u32C⁄åa°
, stVideoCSC.
u32Hue
, stVideoCSC.
u32Luma
, stVideoCSC.
u32S©u©uª
);

110  
HI_SUCCESS
;

111 
	}
}

113 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

115 
HI_U32
 
u32LayîId
;

116 
HI_U32
 
u32Luma
;

117 
HI_U32
 
u32C⁄åa°
;

118 
HI_U32
 
u32Hue
;

119 
HI_U32
 
u32S©u©uª
;

120 
HI_U32
 
u32Gaö
;

121 
HI_U32
 
íCscM©rix
;

123 i‡(
¨gc
 > 1)

125 
u32LayîId
 = 
	`©oi
(
¨gv
[1]);

128 i‡(
¨gc
 > 2)

130 
íCscM©rix
 = 
	`©oi
(
¨gv
[2]);

133 i‡(
¨gc
 > 3)

135 
u32Luma
 = 
	`©oi
(
¨gv
[3]);

138 i‡(
¨gc
 > 4)

140 
u32C⁄åa°
 = 
	`©oi
(
¨gv
[4]);

143 i‡(
¨gc
 > 5)

145 
u32Hue
 = 
	`©oi
(
¨gv
[5]);

148 i‡(
¨gc
 > 6)

150 
u32S©u©uª
 = 
	`©oi
(
¨gv
[6]);

153 i‡(
¨gc
 > 7)

155 
u32Gaö
 = 
	`©oi
(
¨gv
[7]);

158 
	`vo_video_csc_c⁄fig
(
u32LayîId
, 
íCscM©rix
, 
u32Luma
, 
u32C⁄åa°
, 
u32Hue
, 
u32S©u©uª
, 
u32Gaö
);

160  
HI_SUCCESS
;

161 
	}
}

	@tools/vou_chn_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_vo.h
"

16 
	~"mpi_vo.h
"

17 
	~"mpi_vgs.h
"

19 
	#MAX_FRM_CNT
 256

	)

21 
HI_S32
 
	gs_s32MemDev
 = 0;

23 
	shiDUMP_MEMBUF_S


25 
VB_BLK
 
	mhBlock
;

26 
VB_POOL
 
	mhPoﬁ
;

27 
HI_U32
 
	mu32PoﬁId
;

29 
HI_U32
 
	mu32PhyAddr
;

30 
HI_U8
* 
	mpVúAddr
;

31 
HI_S32
 
	ms32Mdev
;

32 } 
	tDUMP_MEMBUF_S
;

34 
HI_S32
 
	$mem›í
( )

36 i‡(
s_s32MemDev
 <= 0)

38 
s_s32MemDev
 = 
	`›í
 ("/dev/mem", 
O_CREAT
 | 
O_RDWR
 | 
O_SYNC
);

39 i‡(
s_s32MemDev
 <= 0)

45 
	}
}

47 
HI_VOID
 
	$mem˛o£
()

49 
	`˛o£
(
s_s32MemDev
);

50 
	}
}

52 * 
	$memm≠
–
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
 )

54 
HI_U32
 
u32Diff
;

55 
HI_U32
 
u32PagePhy
;

56 
HI_U32
 
u32PageSize
;

57 
HI_U8
* 
pPageAddr
;

59 
u32PagePhy
 = 
u32PhyAddr
 & 0xfffff000;

60 
u32Diff
 = 
u32PhyAddr
 - 
u32PagePhy
;

63 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

64 
pPageAddr
 = 
	`mm≠
 ((*)0, 
u32PageSize
, 
PROT_READ
 | 
PROT_WRITE
,

65 
MAP_SHARED
, 
s_s32MemDev
, 
u32PagePhy
);

66 i‡(
MAP_FAILED
 =
pPageAddr
 )

68  
NULL
;

70  (*Ë(
pPageAddr
 + 
u32Diff
);

71 
	}
}

73 
HI_S32
 
	$memunm≠
(
HI_VOID
* 
pVúAddr
, 
HI_U32
 
u32Size
 )

75 
HI_U32
 
u32PageAddr
;

76 
HI_U32
 
u32PageSize
;

77 
HI_U32
 
u32Diff
;

79 
u32PageAddr
 = (((
HI_U32
)
pVúAddr
) & 0xfffff000);

81 
u32Diff
 = (
HI_U32
)
pVúAddr
 - 
u32PageAddr
;

82 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

84  
	`munm≠
((
HI_VOID
*)
u32PageAddr
, 
u32PageSize
);

85 
	}
}

90 
	$ßm∂e_yuv_dump
(
VIDEO_FRAME_S
* 
pVBuf
, 
FILE
* 
pfd
)

92 
w
, 
h
;

93 * 
pVBufVút_Y
;

94 * 
pVBufVút_C
;

95 * 
pMemC⁄ã¡
;

96 
TmpBuff
[4096];

97 
HI_U32
 
phy_addr
, 
Ysize
, 
Csize
;

98 
PIXEL_FORMAT_E
 
íPixñF‹m©
 = 
pVBuf
->enPixelFormat;

99 
HI_U32
 
u32UvHeight
;

101 
Ysize
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
);

102 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
íPixñF‹m©
)

104 
Csize
 = (
pVBuf
->
u32Såide
[1]Ë* (pVBuf->
u32Height
) / 2;

105 
u32UvHeight
 = 
pVBuf
->
u32Height
 / 2;

109 
Csize
 = (
pVBuf
->
u32Såide
[1]Ë* (pVBuf->
u32Height
);

110 
u32UvHeight
 = 
pVBuf
->
u32Height
;

113 
phy_addr
 = 
pVBuf
->
u32PhyAddr
[0];

116 
pVBufVút_Y
 = (
HI_CHAR
*Ë
	`HI_MPI_SYS_Mm≠
(
phy_addr
, 
Ysize
);

117 i‡(
NULL
 =
pVBufVút_Y
)

122 
pVBufVút_C
 = (
HI_CHAR
*Ë
	`HI_MPI_SYS_Mm≠
(
pVBuf
->
u32PhyAddr
[1], 
Csize
);

123 i‡(
NULL
 =
pVBufVút_C
)

125 
	`HI_MPI_SYS_Munm≠
(
pVBufVút_Y
, 
Ysize
);

130 
	`Ârötf
(
°dîr
, "saving......Y......");

131 
	`fÊush
(
°dîr
);

132 
h
 = 0; h < 
pVBuf
->
u32Height
; h++)

134 
pMemC⁄ã¡
 = 
pVBufVút_Y
 + 
h
 * 
pVBuf
->
u32Såide
[0];

135 
	`fwrôe
(
pMemC⁄ã¡
, 
pVBuf
->
u32Width
, 1, 
pfd
);

137 
	`fÊush
(
pfd
);

141 
	`Ârötf
(
°dîr
, "U......");

142 
	`fÊush
(
°dîr
);

143 
h
 = 0; h < 
u32UvHeight
; h++)

145 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

147 
pMemC⁄ã¡
 += 1;

149 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

151 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

152 
pMemC⁄ã¡
 += 2;

154 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

156 
	`fÊush
(
pfd
);

159 
	`Ârötf
(
°dîr
, "V......");

160 
	`fÊush
(
°dîr
);

161 
h
 = 0; h < 
u32UvHeight
; h++)

163 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

165 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

167 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

168 
pMemC⁄ã¡
 += 2;

170 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

172 
	`fÊush
(
pfd
);

174 
	`Ârötf
(
°dîr
, "d⁄ê%d!\n", 
pVBuf
->
u32TimeRef
);

175 
	`fÊush
(
°dîr
);

177 
	`HI_MPI_SYS_Munm≠
(
pVBufVút_Y
, 
Ysize
);

178 
	`HI_MPI_SYS_Munm≠
(
pVBufVút_C
, 
Csize
);

180 
	}
}

182 
HI_S32
 
	$SAMPLE_MISC_VoDump
(
VO_DEV
 
VoDev
, 
VO_CHN
 
VoChn
, 
HI_U32
 
u32C¡
)

184 
HI_S32
 
i
, 
s32Rë
;

185 
VIDEO_FRAME_INFO_S
 
°Føme
;

187 
HI_CHAR
 
szYuvName
[128];

188 
HI_CHAR
 
szPixFrm
[10];

189 
FILE
* 
pfd
;

190 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

191 
HI_U32
 
u32BlkSize
 = 0;

193 
DUMP_MEMBUF_S
 
°Mem
 = {0};

194 
VIDEO_FRAME_INFO_S
 
°FrmInfo
;

195 
VGS_HANDLE
 
hH™dÀ
;

196 
VGS_TASK_ATTR_S
 
°Task
;

197 
HI_U32
 
u32LumaSize
 = 0;

198 
HI_U32
 
u32ChrmSize
 = 0;

199 
HI_U32
 
u32PicLSåide
 = 0;

200 
HI_U32
 
u32PicCSåide
 = 0;

201 
HI_U32
 
u32Width
 = 0;

202 
HI_U32
 
u32Height
 = 0;

203 
HI_BOOL
 
bSídToVgs
 = 
HI_FALSE
;

205 
	`¥ötf
("\nNOTICE: ThisÅool only can be used for TESTING !!!\n");

206 
	`¥ötf
("usage: ./vou_chn_dump [vodev] [vochn] [frmcnt]. sample: ./vou_chn_dump 0 0 5\n\n");

209 
s32Rë
 = 
	`HI_MPI_VO_GëChnFøme
(
VoDev
, 
VoChn
, &
°Føme
, 0);

210 i‡(
HI_SUCCESS
 !
s32Rë
)

212 
	`¥ötf
("HI_MPI_VO(%d)_GëChnFømêî∫ÿ%#x\n", 
VoDev
, 
s32Rë
);

217 
	`°r˝y
(
szPixFrm
, (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
) ? "p420" : "p422");

218 
	`•rötf
(
szYuvName
, "./vo(%d,%d)_%d_%d_%s_%d.yuv", 
VoDev
, 
VoChn
,

219 
°Føme
.
°VFøme
.
u32Width
, stFøme.°VFøme.
u32Height
, 
szPixFrm
, 
u32C¡
);

220 
	`¥ötf
("Dum∞YUV fømêo‡vo(%d,%dËtÿfûe: \"%s\"\n", 
VoDev
, 
VoChn
, 
szYuvName
);

222 
bSídToVgs
 = (
°Føme
.
°VFøme
.
íCom¥essMode
 > 0Ë|| (°Føme.°VFøme.
íVideoF‹m©
 > 0);

224 
	`HI_MPI_VO_Rñó£ChnFøme
(
VoDev
, 
VoChn
, &
°Føme
);

227 
pfd
 = 
	`f›í
(
szYuvName
, "wb");

229 i‡(
NULL
 =
pfd
)

234 
	`mem›í
();

236 
u32PicLSåide
 = 
°Føme
.
°VFøme
.
u32Såide
[0];

237 
u32PicCSåide
 = 
°Føme
.
°VFøme
.
u32Såide
[0];

238 
u32LumaSize
 = 
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
;

239 
u32ChrmSize
 = (
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
Ë>> (1 + (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =°Føme.°VFøme.
íPixñF‹m©
));

240 
u32Width
 = 
°Føme
.
°VFøme
.u32Width;

241 
u32Height
 = 
°Føme
.
°VFøme
.u32Height;

243 i‡(
bSídToVgs
)

245 
u32BlkSize
 = (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
)

246 ? (
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
 * 3 >> 1) : (stFrame.stVFrame.u32Stride[0] * stFrame.stVFrame.u32Height * 2);

249 
hPoﬁ
 = 
	`HI_MPI_VB_Cª©ePoﬁ
–
u32BlkSize
, 2, 
NULL
);

250 i‡(
hPoﬁ
 =
VB_INVALID_POOLID
)

252 
	`¥ötf
("HI_MPI_VB_CreatePool failed! \n");

253 
END1
;

256 
°Mem
.
hPoﬁ
 = hPool;

260 
i
 = 0; i < 
u32C¡
; i++)

262 
s32Rë
 = 
	`HI_MPI_VO_GëChnFøme
(
VoDev
, 
VoChn
, &
°Føme
, 20);

263 i‡(
HI_SUCCESS
 !
s32Rë
)

265 
	`¥ötf
("gë vo(%d,%dË‰amêîr\n", 
VoDev
, 
VoChn
);

266 
	`¥ötf
("⁄ly gë %d føme\n", 
i
);

270 i‡(
bSídToVgs
)

272 (
°Mem
.
hBlock
 = 
	`HI_MPI_VB_GëBlock
(°Mem.
hPoﬁ
, 
u32BlkSize
, 
NULL
)Ë=
VB_INVALID_HANDLE
)

277 
°Mem
.
u32PhyAddr
 = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(°Mem.
hBlock
);

280 
°Mem
.
pVúAddr
 = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
–°Mem.
u32PhyAddr
, 
u32BlkSize
 );

281 i‡(
°Mem
.
pVúAddr
 =
NULL
)

283 
	`¥ötf
("Mem dev mayÇot open\n");

284 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

285 
END2
;

288 
	`mem£t
(&
°FrmInfo
.
°VFøme
, 0, (
VIDEO_FRAME_S
));

289 
°FrmInfo
.
°VFøme
.
u32PhyAddr
[0] = 
°Mem
.u32PhyAddr;

290 
°FrmInfo
.
°VFøme
.
u32PhyAddr
[1] = stFrmInfo.°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

291 
°FrmInfo
.
°VFøme
.
u32PhyAddr
[2] = stFrmInfo.°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

293 
°FrmInfo
.
°VFøme
.
pVúAddr
[0] = 
°Mem
.pVirAddr;

294 
°FrmInfo
.
°VFøme
.
pVúAddr
[1] = (
HI_U8
*Ë°FrmInfo.°VFøme.pVúAddr[0] + 
u32LumaSize
;

295 
°FrmInfo
.
°VFøme
.
pVúAddr
[2] = (
HI_U8
*Ë°FrmInfo.°VFøme.pVúAddr[1] + 
u32ChrmSize
;

297 
°FrmInfo
.
°VFøme
.
u32Width
 = u32Width;

298 
°FrmInfo
.
°VFøme
.
u32Height
 = u32Height;

299 
°FrmInfo
.
°VFøme
.
u32Såide
[0] = 
u32PicLSåide
;

300 
°FrmInfo
.
°VFøme
.
u32Såide
[1] = 
u32PicCSåide
;

301 
°FrmInfo
.
°VFøme
.
u32Såide
[2] = 
u32PicCSåide
;

303 
°FrmInfo
.
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

304 
°FrmInfo
.
°VFøme
.
íPixñF‹m©
 = 
°Føme
.stVFrame.enPixelFormat;

305 
°FrmInfo
.
°VFøme
.
íVideoF‹m©
 = 
VIDEO_FORMAT_LINEAR
;

307 
°FrmInfo
.
°VFøme
.
u64±s
 = (
i
 * 40);

308 
°FrmInfo
.
°VFøme
.
u32TimeRef
 = (
i
 * 2);

310 
°FrmInfo
.
u32PoﬁId
 = 
hPoﬁ
;

312 
s32Rë
 = 
	`HI_MPI_VGS_BegöJob
(&
hH™dÀ
);

313 i‡(
s32Rë
 !
HI_SUCCESS
)

315 
	`¥ötf
("HI_MPI_VGS_BeginJob failed\n");

316 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

317 
	`HI_MPI_VO_Rñó£ChnFøme
(
VoDev
, 
VoChn
, &
°Føme
);

318 
END2
;

321 
	`mem˝y
(&
°Task
.
°ImgIn
, &
°Føme
.
°VFøme
, (
VIDEO_FRAME_INFO_S
));

322 
	`mem˝y
(&
°Task
.
°ImgOut
 , &
°FrmInfo
, (
VIDEO_FRAME_INFO_S
));

323 
s32Rë
 = 
	`HI_MPI_VGS_AddSˇÀTask
(
hH™dÀ
, &
°Task
);

324 i‡(
s32Rë
 !
HI_SUCCESS
)

326 
	`¥ötf
("HI_MPI_VGS_AddScaleTask failed\n");

327 
	`HI_MPI_VGS_C™˚lJob
(
hH™dÀ
);

328 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

329 
	`HI_MPI_VO_Rñó£ChnFøme
(
VoDev
, 
VoChn
, &
°Føme
);

330 
END2
;

333 
s32Rë
 = 
	`HI_MPI_VGS_EndJob
(
hH™dÀ
);

334 i‡(
s32Rë
 !
HI_SUCCESS
)

336 
	`¥ötf
("HI_MPI_VGS_EndJob failed\n");

337 
	`HI_MPI_VGS_C™˚lJob
(
hH™dÀ
);

338 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

339 
	`HI_MPI_VO_Rñó£ChnFøme
(
VoDev
, 
VoChn
, &
°Føme
);

340 
END2
;

344 
	`ßm∂e_yuv_dump
(&
°FrmInfo
.
°VFøme
, 
pfd
);

346 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

351 
	`ßm∂e_yuv_dump
(&
°Føme
.
°VFøme
, 
pfd
);

355 
s32Rë
 = 
	`HI_MPI_VO_Rñó£ChnFøme
(
VoDev
, 
VoChn
, &
°Føme
);

356 i‡(
HI_SUCCESS
 !
s32Rë
)

358 
	`¥ötf
("Rñó£ vo(%d,%dË‰amêîr\n", 
VoDev
, 
VoChn
);

359 
	`¥ötf
("⁄ly gë %d føme\n", 
i
);

365 
END2
:

366 i‡(
hPoﬁ
 !
VB_INVALID_POOLID
)

368 
	`HI_MPI_VB_De°royPoﬁ
–
hPoﬁ
 );

371 
END1
:

373 
	`mem˛o£
();

375 
	`f˛o£
(
pfd
);

378 
	}
}

380 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

382 
VO_DEV
 
VoDev
 = 0;

383 
VO_CHN
 
VoChn
 = 0;

384 
HI_U32
 
u32FrmC¡
 = 1;

387 i‡(
¨gc
 > 1)

389 
VoDev
 = 
	`©oi
(
¨gv
[1]);

393 i‡(
¨gc
 > 2)

395 
VoChn
 = 
	`©oi
(
¨gv
[2]);

399 i‡(
¨gc
 > 3)

401 
u32FrmC¡
 = 
	`©oi
(
¨gv
[3]);

404 
	`SAMPLE_MISC_VoDump
(
VoDev
, 
VoChn
, 
u32FrmC¡
);

406  
HI_SUCCESS
;

407 
	}
}

	@tools/vou_screen_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_vo.h
"

16 
	~"mpi_vo.h
"

18 
	#MAX_FRM_CNT
 256

	)

20 
HI_S32
 
	gs_s32MemDev
 = 0;

22 
HI_S32
 
	$mem›í
( )

24 i‡(
s_s32MemDev
 <= 0)

26 
s_s32MemDev
 = 
	`›í
 ("/dev/mem", 
O_CREAT
 | 
O_RDWR
 | 
O_SYNC
);

27 i‡(
s_s32MemDev
 <= 0)

33 
	}
}

35 
HI_VOID
 
	$mem˛o£
()

37 
	`˛o£
(
s_s32MemDev
);

38 
	}
}

40 * 
	$memm≠
–
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
 )

42 
HI_U32
 
u32Diff
;

43 
HI_U32
 
u32PagePhy
;

44 
HI_U32
 
u32PageSize
;

45 
HI_U8
* 
pPageAddr
;

47 
u32PagePhy
 = 
u32PhyAddr
 & 0xfffff000;

48 
u32Diff
 = 
u32PhyAddr
 - 
u32PagePhy
;

51 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

52 
pPageAddr
 = 
	`mm≠
 ((*)0, 
u32PageSize
, 
PROT_READ
 | 
PROT_WRITE
,

53 
MAP_SHARED
, 
s_s32MemDev
, 
u32PagePhy
);

54 i‡(
MAP_FAILED
 =
pPageAddr
 )

56  
NULL
;

58  (*Ë(
pPageAddr
 + 
u32Diff
);

59 
	}
}

61 
HI_S32
 
	$memunm≠
(
HI_VOID
* 
pVúAddr
, 
HI_U32
 
u32Size
 )

63 
HI_U32
 
u32PageAddr
;

64 
HI_U32
 
u32PageSize
;

65 
HI_U32
 
u32Diff
;

67 
u32PageAddr
 = (((
HI_U32
)
pVúAddr
) & 0xfffff000);

69 
u32Diff
 = (
HI_U32
)
pVúAddr
 - 
u32PageAddr
;

70 
u32PageSize
 = ((
u32Size
 + 
u32Diff
 - 1) & 0xfffff000) + 0x1000;

72  
	`munm≠
((
HI_VOID
*)
u32PageAddr
, 
u32PageSize
);

73 
	}
}

78 
	$ßm∂e_yuv_dump
(
VIDEO_FRAME_S
* 
pVBuf
, 
FILE
* 
pfd
)

80 
w
, 
h
;

81 * 
pVBufVút_Y
;

82 * 
pVBufVút_C
;

83 * 
pMemC⁄ã¡
;

84 
TmpBuff
[4096];

85 
HI_U32
 
phy_addr
, 
Ysize
, 
Csize
;

86 
PIXEL_FORMAT_E
 
íPixñF‹m©
 = 
pVBuf
->enPixelFormat;

87 
HI_U32
 
u32UvHeight
;

89 
Ysize
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
);

90 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
íPixñF‹m©
)

92 
Csize
 = (
pVBuf
->
u32Såide
[1]Ë* (pVBuf->
u32Height
) / 2;

93 
u32UvHeight
 = 
pVBuf
->
u32Height
 / 2;

97 
Csize
 = (
pVBuf
->
u32Såide
[1]Ë* (pVBuf->
u32Height
);

98 
u32UvHeight
 = 
pVBuf
->
u32Height
;

101 
phy_addr
 = 
pVBuf
->
u32PhyAddr
[0];

104 
pVBufVút_Y
 = (
HI_CHAR
*Ë
	`HI_MPI_SYS_Mm≠
(
phy_addr
, 
Ysize
);

105 i‡(
NULL
 =
pVBufVút_Y
)

110 
pVBufVút_C
 = (
HI_CHAR
*Ë
	`HI_MPI_SYS_Mm≠
(
pVBuf
->
u32PhyAddr
[1], 
Csize
);

111 i‡(
NULL
 =
pVBufVút_C
)

113 
	`HI_MPI_SYS_Munm≠
(
pVBufVút_Y
, 
Ysize
);

118 
	`Ârötf
(
°dîr
, "saving......Y......");

119 
	`fÊush
(
°dîr
);

120 
h
 = 0; h < 
pVBuf
->
u32Height
; h++)

122 
pMemC⁄ã¡
 = 
pVBufVút_Y
 + 
h
 * 
pVBuf
->
u32Såide
[0];

123 
	`fwrôe
(
pMemC⁄ã¡
, 
pVBuf
->
u32Width
, 1, 
pfd
);

125 
	`fÊush
(
pfd
);

129 
	`Ârötf
(
°dîr
, "U......");

130 
	`fÊush
(
°dîr
);

131 
h
 = 0; h < 
u32UvHeight
; h++)

133 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

135 
pMemC⁄ã¡
 += 1;

137 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

139 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

140 
pMemC⁄ã¡
 += 2;

142 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

144 
	`fÊush
(
pfd
);

147 
	`Ârötf
(
°dîr
, "V......");

148 
	`fÊush
(
°dîr
);

149 
h
 = 0; h < 
u32UvHeight
; h++)

151 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

153 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

155 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

156 
pMemC⁄ã¡
 += 2;

158 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

160 
	`fÊush
(
pfd
);

162 
	`Ârötf
(
°dîr
, "d⁄ê%d!\n", 
pVBuf
->
u32TimeRef
);

163 
	`fÊush
(
°dîr
);

165 
	`HI_MPI_SYS_Munm≠
(
pVBufVút_Y
, 
Ysize
);

166 
	`HI_MPI_SYS_Munm≠
(
pVBufVút_C
, 
Csize
);

168 
	}
}

170 
HI_S32
 
	$SAMPLE_MISC_VoDump
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32C¡
)

172 
HI_S32
 
i
, 
s32Rë
;

173 
VIDEO_FRAME_INFO_S
 
°Føme
;

175 
HI_CHAR
 
szYuvName
[128];

176 
HI_CHAR
 
szPixFrm
[10];

177 
FILE
* 
pfd
;

179 
	`¥ötf
("\nNOTICE: ThisÅool only can be used for TESTING !!!\n");

180 
	`¥ötf
("usage: ./vou_screen_dump [VoLayer] [frmcnt]. sample: ./vou_screen_dump 0 1\n\n");

183 
s32Rë
 = 
	`HI_MPI_VO_GëS¸ìnFøme
(
VoLayî
, &
°Føme
, 0);

184 i‡(
HI_SUCCESS
 !
s32Rë
)

186 
	`¥ötf
("HI_MPI_VO(%d)_GëS¸ìnFømêî∫ÿ%#x\n", 
VoLayî
, 
s32Rë
);

191 
	`°r˝y
(
szPixFrm
,

192 (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
) ? "p420" : "p422");

193 
	`•rötf
(
szYuvName
, "./vo(%d)_%d_%d_%s_%d.yuv", 
VoLayî
,

194 
°Føme
.
°VFøme
.
u32Width
, stFøme.°VFøme.
u32Height
, 
szPixFrm
, 
u32C¡
);

195 
	`¥ötf
("Dum∞YUV fømêo‡vo(%dËtÿfûe: \"%s\"\n", 
VoLayî
, 
szYuvName
);

197 
	`HI_MPI_VO_Rñó£S¸ìnFøme
(
VoLayî
, &
°Føme
);

200 
pfd
 = 
	`f›í
(
szYuvName
, "wb");

202 i‡(
NULL
 =
pfd
)

207 
	`mem›í
();

210 
i
 = 0; i < 
u32C¡
; i++)

212 
s32Rë
 = 
	`HI_MPI_VO_GëS¸ìnFøme
(
VoLayî
, &
°Føme
, 0);

213 i‡(
HI_SUCCESS
 !
s32Rë
)

215 
	`¥ötf
("gë vo(%dË‰amêîr\n", 
VoLayî
);

216 
	`¥ötf
("⁄ly gë %d føme\n", 
i
);

219 
	`¥ötf
("add∏0x%x\n", 
°Føme
.
°VFøme
.
u32PhyAddr
[0]);

221 
	`ßm∂e_yuv_dump
(&
°Føme
.
°VFøme
, 
pfd
);

224 
s32Rë
 = 
	`HI_MPI_VO_Rñó£S¸ìnFøme
(
VoLayî
, &
°Føme
);

225 i‡(
HI_SUCCESS
 !
s32Rë
)

227 
	`¥ötf
("Rñó£ vo(%dË‰amêîr\n", 
VoLayî
);

228 
	`¥ötf
("⁄ly gë %d føme\n", 
i
);

233 
	`mem˛o£
();

235 
	`f˛o£
(
pfd
);

238 
	}
}

240 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

242 
VO_LAYER
 
VoLayî
 = 0;

243 
HI_U32
 
u32FrmC¡
 = 1;

246 i‡(
¨gc
 > 1)

248 
VoLayî
 = 
	`©oi
(
¨gv
[1]);

251 i‡(
¨gc
 > 2)

253 
u32FrmC¡
 = 
	`©oi
(
¨gv
[2]);

256 
	`SAMPLE_MISC_VoDump
(
VoLayî
, 
u32FrmC¡
);

258  
HI_SUCCESS
;

259 
	}
}

	@tools/vpss_attr.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"hi_comm⁄.h
"

6 
	~"hi_comm_video.h
"

7 
	~"hi_comm_sys.h
"

8 
	~"hi_comm_vo.h
"

9 
	~"hi_comm_vi.h
"

10 
	~"hi_comm_vpss.h
"

11 
	~"hi_ty≥.h
"

13 
	~"mpi_vb.h
"

14 
	~"mpi_sys.h
"

15 
	~"mpi_vi.h
"

16 
	~"mpi_vo.h
"

17 
	~"mpi_vpss.h
"

19 
	#USAGE_HELP
()\

21 
	`¥ötf
("\n\tußgê: %†∑ø vÆuêgrou∞[chn] \n", 
¨gv
[0]); \

22 
	`¥ötf
("\n\tÖara: \n"); \

23 
	`¥ötf
("\t\tenNR [0, disable; 1,enable]\n"); \

24 
	`¥ötf
("\t\tcon [∂‘±»∂»£¨value:0~48, default:8]\n"); \

25 
	`¥ötf
("\t\tglob [NR«ø∂»£¨value:0~1408, default:128]\n"); \

26 
	`¥ötf
("\t\tie [IE«ø∂»£¨value:-1~100, default:-1]\n"); \

27 
	`¥ötf
("\t\tysf [¡¡∂»ø’”Ú»•‘Î«ø∂»£¨value:-1~9999, default:-1]\n"); \

28 
	`¥ötf
("\t\tytf [¡¡∂» ±”Ú»•‘Î«ø∂»£¨value:-1~15, default:-1]\n"); \

29 
	`¥ötf
("\t\tcsf […´∂»ø’”Ú»•‘Î«ø∂»£¨value:-1~255, default:-1]\n"); \

30 
	`¥ötf
("\t\tctf […´∂» ±”Ú»•‘Î«ø∂»£¨value:-1~32, default:-1]\n"); \

31 
	`¥ötf
("\t\tmdz [‘À∂Ø≈–∂œ„–÷µ£¨value:-1~511, default:-1]\n"); \

32 }

	)

34 
	#CHECK_RET
(
ex¥ess
,
«me
)\

36 i‡(
HI_SUCCESS
 !
ex¥ess
)\

38 
	`¥ötf
("%s failedát %s: LINE: %d !Érrno:%d \n", \

39 
«me
, 
__FUNCTION__
, 
__LINE__
, 
ex¥ess
);\

40  
HI_FAILURE
;\

42 }0)

	)

45 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

47 
HI_S32
 
s32Rë
;

48 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
 = {0};

49 
VPSS_GRP_PARAM_S
 
°VpssGΩP¨am
 = {0};

51 
∑øTemp
[16];

52 
HI_U32
 
vÆue
 = 0;

53 
VPSS_GRP
 
VpssGΩ
 = 0;

54 c⁄° * 
∑ø
 = 
∑øTemp
;

56 i‡(
¨gc
 < 4)

58 
	`USAGE_HELP
();

62 
	`°r˝y
(
∑øTemp
, 
¨gv
[1]);

63 
vÆue
 = 
	`©oi
(
¨gv
[2]);

64 
VpssGΩ
 = 
	`©oi
(
¨gv
[3]);

66 
s32Rë
 = 
	`HI_MPI_VPSS_GëGΩAâr
(
VpssGΩ
, &
°VpssGΩAâr
);

67 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_GetGrpAttr");

70 
s32Rë
 = 
	`HI_MPI_VPSS_GëGΩP¨am
(
VpssGΩ
, &
°VpssGΩP¨am
);

71 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_GetGrpParam");

73 i‡(0 =
	`°rcmp
(
∑ø
, "enNR"))

75 
°VpssGΩAâr
.
bNrEn
 = 
vÆue
;

77 i‡(0 =
	`°rcmp
(
∑ø
, "con"))

79 
°VpssGΩP¨am
.
u32C⁄åa°
 = 
vÆue
;

81 i‡(0 =
	`°rcmp
(
∑ø
, "glob"))

83 
°VpssGΩP¨am
.
s32GlobÆSåígth
 = 
vÆue
;

85 i‡(0 =
	`°rcmp
(
∑ø
, "ie"))

87 
°VpssGΩP¨am
.
s32IeSåígth
 = 
vÆue
;

89 i‡(0 =
	`°rcmp
(
∑ø
, "ysf"))

91 
°VpssGΩP¨am
.
s32YSFSåígth
 = 
vÆue
;

93 i‡(0 =
	`°rcmp
(
∑ø
, "ytf"))

95 
°VpssGΩP¨am
.
s32YTFSåígth
 = 
vÆue
;

97 i‡(0 =
	`°rcmp
(
∑ø
, "csf"))

99 
°VpssGΩP¨am
.
s32CSFSåígth
 = 
vÆue
;

101 i‡(0 =
	`°rcmp
(
∑ø
, "ctf"))

103 
°VpssGΩP¨am
.
s32CTFSåígth
 = 
vÆue
;

105 i‡(0 =
	`°rcmp
(
∑ø
, "mdz"))

107 
°VpssGΩP¨am
.
s32MŸi⁄Limí
 = 
vÆue
;

111 
	`¥ötf
("errÖara\n");

112 
	`USAGE_HELP
();

115 
s32Rë
 = 
	`HI_MPI_VPSS_SëGΩAâr
(
VpssGΩ
, &
°VpssGΩAâr
);

116 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_SetGrpAttr");

119 
s32Rë
 = 
	`HI_MPI_VPSS_SëGΩP¨am
(
VpssGΩ
, &
°VpssGΩP¨am
);

120 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_SetGrpParam");

123 
	`¥ötf
("\t\ãnNR %d\n", 
°VpssGΩAâr
.
bNrEn
);

124 
	`¥ötf
("\t\tc⁄ %d\n", 
°VpssGΩP¨am
.
u32C⁄åa°
);

125 
	`¥ötf
("\t\tglob %d\n", 
°VpssGΩP¨am
.
s32GlobÆSåígth
);

126 
	`¥ötf
("\t\tõ %d\n", 
°VpssGΩP¨am
.
s32IeSåígth
);

127 
	`¥ötf
("\t\tys‡ %d\n", 
°VpssGΩP¨am
.
s32YSFSåígth
);

128 
	`¥ötf
("\t\tyt‡ %d\n", 
°VpssGΩP¨am
.
s32YTFSåígth
);

129 
	`¥ötf
("\t\tcs‡ %d\n", 
°VpssGΩP¨am
.
s32CSFSåígth
);

130 
	`¥ötf
("\t\t˘‡ %d\n", 
°VpssGΩP¨am
.
s32CTFSåígth
);

131 
	`¥ötf
("\t\tmdz %d\n", 
°VpssGΩP¨am
.
s32MŸi⁄Limí
);

134 
	}
}

	@tools/vpss_attr2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"hi_comm⁄.h
"

6 
	~"hi_comm_video.h
"

7 
	~"hi_comm_sys.h
"

8 
	~"hi_comm_vo.h
"

9 
	~"hi_comm_vi.h
"

10 
	~"hi_comm_vpss.h
"

11 
	~"hi_ty≥.h
"

13 
	~"mpi_vb.h
"

14 
	~"mpi_sys.h
"

15 
	~"mpi_vi.h
"

16 
	~"mpi_vo.h
"

17 
	~"mpi_vpss.h
"

21 
	#USAGE_HELP
()\

23 
	`¥ötf
("\n\tußgê: %†∑ø vÆuêgrou∞[chn] \n", 
¨gv
[0]); \

24 
	`¥ötf
("\n\tpara: \n"); \

25 
	`¥ötf
("\t\tenNR [0, disable; 1,enable]\n"); \

26 
	`¥ötf
("\t\tsfc [ø’”Ú¬À≤®«ø∂»£¨value:0~255, default:8]\n"); \

27 
	`¥ötf
("\t\ttfc [ ±”Ú¬À≤®«ø∂»£¨value:0~32, default:0]\n"); \

28 
	`¥ötf
("\t\tiepost [Œ∆¿Ì/±ﬂ‘µ «∑Ò∫Û÷√¥¶¿Ì£¨value:0~1, default:0]\n"); \

29 
	`¥ötf
("\t\tie [Œ∆¿Ì/±ﬂ‘µ‘ˆ«ø«ø∂»£¨value:0~63, default:63]\n"); \

30 
	`¥ötf
("\t\tysfm [¡¡∂»‘À∂Ø«¯”Úø’”Ú¡¡«¯«ø∂»£¨value:0~255, default:32]\n"); \

31 
	`¥ötf
("\t\tysfs [¡¡∂»æ≤÷π«¯”Úø’”Ú¡¡«¯«ø∂»£¨value:0~64, default:32]\n"); \

32 
	`¥ötf
("\t\tytf [¡¡∂» ±”Ú«ø∂»£¨value:0~31, default:31]\n"); \

33 
	`¥ötf
("\t\tymth [¡¡∂»µƒ‘À∂ØºÏ≤‚„–÷µ£¨value:0~511, default:64]\n");\

34 
	`¥ötf
("\t\tdesand [»•ø≈¡£‘Î…˘£¨value:0~8, default:0 ]\n");\

35 }0)

	)

37 
	#CHECK_RET
(
ex¥ess
,
«me
)\

39 i‡(
HI_SUCCESS
 !
ex¥ess
)\

41 
	`¥ötf
("%s failedát %s: LINE: %d !Érrno:0x%x \n", \

42 
«me
, 
__FUNCTION__
, 
__LINE__
, 
ex¥ess
);\

43  
HI_FAILURE
;\

45 }0)

	)

48 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

50 
HI_S32
 
s32Rë
;

51 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
 = {0};

52 
VPSS_GRP_PARAM_V2_S
 
°VpssGΩP¨am
 = {0};

54 
∑øTemp
[16];

55 
HI_U32
 
vÆue
 = 0;

56 
VPSS_GRP
 
VpssGΩ
 = 0;

57 c⁄° * 
∑ø
 = 
∑øTemp
;

59 i‡(
¨gc
 < 4)

61 
	`USAGE_HELP
();

65 
	`°r˝y
(
∑øTemp
, 
¨gv
[1]);

66 
vÆue
 = 
	`©oi
(
¨gv
[2]);

67 
VpssGΩ
 = 
	`©oi
(
¨gv
[3]);

69 
s32Rë
 = 
	`HI_MPI_VPSS_GëGΩAâr
(
VpssGΩ
, &
°VpssGΩAâr
);

70 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_GetGrpAttr");

73 
s32Rë
 = 
	`HI_MPI_VPSS_GëGΩP¨amV2
(
VpssGΩ
, &
°VpssGΩP¨am
);

74 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_GetGrpParam");

76 
	`¥ötf
("================================\n");

77 i‡(0 =
	`°rcmp
(
∑ø
, "enNR"))

79 
°VpssGΩAâr
.
bNrEn
 = 
vÆue
;

81 i‡(0 =
	`°rcmp
(
∑ø
, "sfc"))

83 
°VpssGΩP¨am
.
Chroma_SF_Såígth
 = 
vÆue
;

85 i‡(0 =
	`°rcmp
(
∑ø
, "tfc"))

87 
°VpssGΩP¨am
.
Chroma_TF_Såígth
 = 
vÆue
;

89 i‡(0 =
	`°rcmp
(
∑ø
, "iepost"))

91 
°VpssGΩP¨am
.
IE_Po°Fœg
 = 
vÆue
;

93 i‡(0 =
	`°rcmp
(
∑ø
, "ie"))

95 
°VpssGΩP¨am
.
IE_Såígth
 = 
vÆue
;

97 i‡(0 =
	`°rcmp
(
∑ø
, "ysfm"))

99 
°VpssGΩP¨am
.
Luma_SF_MoveAªa
 = 
vÆue
;

101 i‡(0 =
	`°rcmp
(
∑ø
, "ysfs"))

103 
°VpssGΩP¨am
.
Luma_SF_StûlAªa
 = 
vÆue
;

105 i‡(0 =
	`°rcmp
(
∑ø
, "ytf"))

107 
°VpssGΩP¨am
.
Luma_TF_Såígth
 = 
vÆue
;

109 i‡(0 =
	`°rcmp
(
∑ø
, "ymth"))

111 
°VpssGΩP¨am
.
Luma_MŸi⁄Thªsh
 = 
vÆue
;

113 i‡(0 =
	`°rcmp
(
∑ø
, "desand"))

119 
	`¥ötf
("errÖara\n");

120 
	`USAGE_HELP
();

123 
s32Rë
 = 
	`HI_MPI_VPSS_SëGΩAâr
(
VpssGΩ
, &
°VpssGΩAâr
);

124 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_SetGrpAttr");

127 
s32Rë
 = 
	`HI_MPI_VPSS_SëGΩP¨amV2
(
VpssGΩ
, &
°VpssGΩP¨am
);

128 
	`CHECK_RET
(
s32Rë
, "HI_MPI_VPSS_SetGrpParam");

130 
	`¥ötf
("\t\ãnNR %d\n", 
°VpssGΩAâr
.
bNrEn
);

131 
	`¥ötf
("\t\tsf¯ %d\n", 
°VpssGΩP¨am
.
Chroma_SF_Såígth
);

132 
	`¥ötf
("\t\âf¯ %d\n", 
°VpssGΩP¨am
.
Chroma_TF_Såígth
);

133 
	`¥ötf
("\t\tõpo° %d\n", 
°VpssGΩP¨am
.
IE_Po°Fœg
);

134 
	`¥ötf
("\t\tõ %d\n", 
°VpssGΩP¨am
.
IE_Såígth
);

135 
	`¥ötf
("\t\tymth %d\n", 
°VpssGΩP¨am
.
Luma_MŸi⁄Thªsh
);

136 
	`¥ötf
("\t\tysfm %d\n", 
°VpssGΩP¨am
.
Luma_SF_MoveAªa
);

137 
	`¥ötf
("\t\tysf† %d\n", 
°VpssGΩP¨am
.
Luma_SF_StûlAªa
);

138 
	`¥ötf
("\t\tyt‡ %d\n", 
°VpssGΩP¨am
.
Luma_TF_Såígth
);

142 
	}
}

	@tools/vpss_chn_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_vpss.h
"

16 
	~"mpi_vpss.h
"

18 
	#VALUE_BETWEEN
(
x
,
mö
,
max
Ë(((x)>=(mö)Ë&& ((xË<(max)))

	)

21 
	$ßm∂e_yuv_dump
(
VIDEO_FRAME_S
* 
pVBuf
, 
FILE
* 
pfd
)

23 
w
, 
h
;

24 * 
pVBufVút_Y
;

25 * 
pVBufVút_C
;

26 * 
pMemC⁄ã¡
;

27 
TmpBuff
[2000];

28 
HI_U32
 
phy_addr
, 
size
;

29 
HI_CHAR
* 
pU£rPageAddr
[2];

30 
PIXEL_FORMAT_E
 
íPixñF‹m©
 = 
pVBuf
->enPixelFormat;

31 
HI_U32
 
u32UvHeight
;

33 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
íPixñF‹m©
)

35 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 3 / 2;

36 
u32UvHeight
 = 
pVBuf
->
u32Height
 / 2;

40 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 2;

41 
u32UvHeight
 = 
pVBuf
->
u32Height
;

44 
phy_addr
 = 
pVBuf
->
u32PhyAddr
[0];

47 
pU£rPageAddr
[0] = (
HI_CHAR
*Ë
	`HI_MPI_SYS_Mm≠
(
phy_addr
, 
size
);

48 i‡(
NULL
 =
pU£rPageAddr
[0])

54 
pVBufVút_Y
 = 
pU£rPageAddr
[0];

55 
pVBufVút_C
 = 
pVBufVút_Y
 + (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
);

58 
	`Ârötf
(
°dîr
, "saving......Y......");

59 
	`fÊush
(
°dîr
);

60 
h
 = 0; h < 
pVBuf
->
u32Height
; h++)

62 
pMemC⁄ã¡
 = 
pVBufVút_Y
 + 
h
 * 
pVBuf
->
u32Såide
[0];

63 
	`fwrôe
(
pMemC⁄ã¡
, 
pVBuf
->
u32Width
, 1, 
pfd
);

65 
	`fÊush
(
pfd
);

69 
	`Ârötf
(
°dîr
, "U......");

70 
	`fÊush
(
°dîr
);

71 
h
 = 0; h < 
u32UvHeight
; h++)

73 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

75 
pMemC⁄ã¡
 += 1;

77 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

79 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

80 
pMemC⁄ã¡
 += 2;

82 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

84 
	`fÊush
(
pfd
);

87 
	`Ârötf
(
°dîr
, "V......");

88 
	`fÊush
(
°dîr
);

89 
h
 = 0; h < 
u32UvHeight
; h++)

91 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

93 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

95 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

96 
pMemC⁄ã¡
 += 2;

98 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

100 
	`fÊush
(
pfd
);

102 
	`Ârötf
(
°dîr
, "d⁄ê%d!\n", 
pVBuf
->
u32TimeRef
);

103 
	`fÊush
(
°dîr
);

105 
	`HI_MPI_SYS_Munm≠
(
pU£rPageAddr
[0], 
size
);

106 
	}
}

109 
HI_VOID
* 
	$SAMPLE_MISC_VpssDump
(
VPSS_GRP
 
GΩ
, 
VPSS_CHN
 
Chn
, 
HI_U32
 
u32FømeC¡
, HI_U32 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32PixñF‹m©
)

111 
VIDEO_FRAME_INFO_S
 
°Føme
;

112 
HI_CHAR
 
szYuvName
[128];

113 
HI_CHAR
 
szPixFrm
[10];

114 
FILE
* 
pfd
;

115 
VPSS_GRP
 
VpssGΩ
 = 
GΩ
;

116 
VPSS_CHN
 
VpssChn
 = 
Chn
;

117 
HI_U32
 
u32C¡
 = 
u32FømeC¡
;

118 
HI_U32
 
u32Dïth
 = 2;

119 
HI_U32
 
u32OrigDïth
 = 0;

120 
VPSS_CHN_MODE_S
 
°OrigVpssMode
, 
°VpssMode
;

121 
HI_S32
 
s32MûliSec
 = 200;

123 i‡(
	`HI_MPI_VPSS_GëChnMode
(
VpssGΩ
, 
VpssChn
, &
°OrigVpssMode
Ë!
HI_SUCCESS
)

125 
	`¥ötf
("get modeÉrror!!!\n");

126  (
HI_VOID
*) - 1;

129 i‡(
	`HI_MPI_VPSS_GëDïth
(
VpssGΩ
, 
VpssChn
, &
u32OrigDïth
Ë!
HI_SUCCESS
)

131 
	`¥ötf
("get depthÉrror!!!\n");

132  (
HI_VOID
*) - 1;

135 
°VpssMode
.
íChnMode
 = 
VPSS_CHN_MODE_USER
;

136 i‡(
u32PixñF‹m©
 == 0)

138 
°VpssMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

142 
°VpssMode
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
;

144 
°VpssMode
.
u32Width
 = u32Width;

145 
°VpssMode
.
u32Height
 = u32Height;

146 
°VpssMode
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

147 
°VpssMode
.
bDoubÀ
 = 
HI_FALSE
;

148 i‡(
	`HI_MPI_VPSS_SëChnMode
(
VpssGΩ
, 
VpssChn
, &
°VpssMode
Ë!
HI_SUCCESS
)

150 
	`¥ötf
("set modeÉrror!!!\n");

151  (
HI_VOID
*) - 1;

153 i‡(
	`HI_MPI_VPSS_SëDïth
(
VpssGΩ
, 
VpssChn
, 
u32Dïth
Ë!
HI_SUCCESS
)

155 
	`¥ötf
("set depthÉrror!!!\n");

156  (
HI_VOID
*) - 1;

158 
	`u¶ìp
(100000);

160 
	`mem£t
(&
°Føme
, 0, (stFrame));

161 
	`HI_MPI_VPSS_GëChnFøme
(
VpssGΩ
, 
VpssChn
, &
°Føme
, 
s32MûliSec
Ë!
HI_SUCCESS
)

163 
	`¥ötf
("get frameÉrror!!!\n");

164 
	`u¶ìp
(40000);

168 
	`°r˝y
(
szPixFrm
,

169 (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
) ? "p420" : "p422");

170 
	`•rötf
(
szYuvName
, "./vpss_gΩ%d_chn%d_w%d_h%d_%s_%d.yuv", 
VpssGΩ
, 
VpssChn
,

171 
°Føme
.
°VFøme
.
u32Width
, stFøme.°VFøme.
u32Height
, 
szPixFrm
, 
u32C¡
);

172 
	`¥ötf
("Dum∞YUV fømêo‡vps†ch¿%dÅÿfûe: \"%s\"\n", 
VpssChn
, 
szYuvName
);

173 
	`fÊush
(
°dout
);

175 
	`HI_MPI_VPSS_Rñó£ChnFøme
(
VpssGΩ
, 
VpssChn
, &
°Føme
);

177 
pfd
 = 
	`f›í
(
szYuvName
, "wb");

179 i‡(
NULL
 =
pfd
)

181  (
HI_VOID
*) - 1;

185 
u32C¡
--)

187 i‡(
	`HI_MPI_VPSS_GëChnFøme
(
VpssGΩ
, 
VpssChn
, &
°Føme
, 
s32MûliSec
Ë!
HI_SUCCESS
)

189 
	`¥ötf
("Get frame fail \n");

190 
	`u¶ìp
(1000);

193 
	`ßm∂e_yuv_dump
(&
°Føme
.
°VFøme
, 
pfd
);

195 
	`¥ötf
("Gë VpssGΩ %d fømê%d!!\n", 
VpssGΩ
, 
u32C¡
);

197 
	`HI_MPI_VPSS_Rñó£ChnFøme
(
VpssGΩ
, 
VpssChn
, &
°Føme
);

199 
	`f˛o£
(
pfd
);

201 
	`HI_MPI_VPSS_SëDïth
(
VpssGΩ
, 
VpssChn
, 
u32OrigDïth
);

202 
	`HI_MPI_VPSS_SëChnMode
(
VpssGΩ
, 
VpssChn
, &
°OrigVpssMode
);

204  (
HI_VOID
*)0;

205 
	}
}

207 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

209 
VPSS_GRP
 
VpssGΩ
 = 0;

210 
VPSS_CHN
 
VpssChn
 = 0;

211 
HI_U32
 
u32FrmC¡
 = 1;

212 
HI_U32
 
u32Width
 = 720;

213 
HI_U32
 
u32Height
 = 576;

214 
HI_U32
 
u32PixñF‹m©
 = 0;

216 
	`¥ötf
("Usage: ./vpss_dump [Grp] [Chn] [Count] [Width] [Height] [PixelFormat]\n");

217 
	`¥ötf
("Grp: vpss Grp id.\n");

218 
	`¥ötf
("Chn: vpss Chn id.\n");

219 
	`¥ötf
("Count: frame count.\n");

220 
	`¥ötf
("Width: image width.\n");

221 
	`¥ötf
("Height: image Height.\n");

222 
	`¥ötf
("PixelFormat: imageÖixel format, 0 for semiplanar420áng 1 for semiplanar422.\n");

224 i‡(
¨gc
 < 7)

226 
	`¥ötf
("wrongárg!!!!\n\n");

230 
VpssGΩ
 = 
	`©oi
(
¨gv
[1]);

231 i‡(!
	`VALUE_BETWEEN
(
VpssGΩ
, 0, 127))

233 
	`¥ötf
("grp id must be [0,127]!!!!\n\n");

237 
VpssChn
 = 
	`©oi
(
¨gv
[2]);

238 i‡(!
	`VALUE_BETWEEN
(
VpssChn
, 0, 4))

240 
	`¥ötf
("chn id must be [0,4]!!!!\n\n");

243 
u32FrmC¡
 = 
	`©oi
(
¨gv
[3]);

245 
u32Width
 = 
	`©oi
(
¨gv
[4]);

246 i‡(!
	`VALUE_BETWEEN
(
u32Width
, 64, 2592))

248 
	`¥ötf
("image width must be [64, 2592]!!!!\n\n");

251 
u32Height
 = 
	`©oi
(
¨gv
[5]);

252 i‡(!
	`VALUE_BETWEEN
(
u32Height
, 64, 2592))

254 
	`¥ötf
("image height must be [64, 2592]!!!!\n\n");

257 
u32PixñF‹m©
 = 
	`©oi
(
¨gv
[6]);

258 i‡(!
	`VALUE_BETWEEN
(
u32PixñF‹m©
, 0, 1))

260 
	`¥ötf
("imageÖixelformat must be [0,1]!!!!\n\n");

264 
	`SAMPLE_MISC_VpssDump
(
VpssGΩ
, 
VpssChn
, 
u32FrmC¡
, 
u32Width
, 
u32Height
, 
u32PixñF‹m©
);

266  
HI_SUCCESS
;

267 
	}
}

	@tools/vpss_src_dump.c

1 
	~<sys/mm™.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/io˘l.h
>

9 
	~"hi_comm⁄.h
"

10 
	~"hi_comm_video.h
"

11 
	~"hi_comm_sys.h
"

12 
	~"mpi_sys.h
"

13 
	~"hi_comm_vb.h
"

14 
	~"mpi_vb.h
"

15 
	~"hi_comm_vpss.h
"

16 
	~"mpi_vpss.h
"

17 
	~"mpi_vgs.h
"

19 
	#VALUE_BETWEEN
(
x
,
mö
,
max
Ë(((x)>=(mö)Ë&& ((xË<(max)))

	)

22 
	shiDUMP_MEMBUF_S


24 
VB_BLK
 
	mhBlock
;

25 
VB_POOL
 
	mhPoﬁ
;

26 
HI_U32
 
	mu32PoﬁId
;

28 
HI_U32
 
	mu32PhyAddr
;

29 
HI_U8
* 
	mpVúAddr
;

30 
HI_S32
 
	ms32Mdev
;

31 } 
	tDUMP_MEMBUF_S
;

34 
	$ßm∂e_yuv_dump
(
VIDEO_FRAME_S
* 
pVBuf
, 
FILE
* 
pfd
)

36 
w
, 
h
;

37 * 
pVBufVút_Y
;

38 * 
pVBufVút_C
;

39 * 
pMemC⁄ã¡
;

40 
TmpBuff
[2000];

41 
HI_U32
 
phy_addr
, 
size
;

42 
HI_CHAR
* 
pU£rPageAddr
[2];

43 
PIXEL_FORMAT_E
 
íPixñF‹m©
 = 
pVBuf
->enPixelFormat;

44 
HI_U32
 
u32UvHeight
;

46 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
íPixñF‹m©
)

48 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 3 / 2;

49 
u32UvHeight
 = 
pVBuf
->
u32Height
 / 2;

53 
size
 = (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
) * 2;

54 
u32UvHeight
 = 
pVBuf
->
u32Height
;

57 
phy_addr
 = 
pVBuf
->
u32PhyAddr
[0];

60 
pU£rPageAddr
[0] = (
HI_CHAR
*Ë
	`HI_MPI_SYS_Mm≠
(
phy_addr
, 
size
);

61 i‡(
NULL
 =
pU£rPageAddr
[0])

67 
pVBufVút_Y
 = 
pU£rPageAddr
[0];

68 
pVBufVút_C
 = 
pVBufVút_Y
 + (
pVBuf
->
u32Såide
[0]Ë* (pVBuf->
u32Height
);

71 
	`Ârötf
(
°dîr
, "saving......Y......");

72 
	`fÊush
(
°dîr
);

73 
h
 = 0; h < 
pVBuf
->
u32Height
; h++)

75 
pMemC⁄ã¡
 = 
pVBufVút_Y
 + 
h
 * 
pVBuf
->
u32Såide
[0];

76 
	`fwrôe
(
pMemC⁄ã¡
, 
pVBuf
->
u32Width
, 1, 
pfd
);

78 
	`fÊush
(
pfd
);

82 
	`Ârötf
(
°dîr
, "U......");

83 
	`fÊush
(
°dîr
);

84 
h
 = 0; h < 
u32UvHeight
; h++)

86 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

88 
pMemC⁄ã¡
 += 1;

90 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

92 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

93 
pMemC⁄ã¡
 += 2;

95 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

97 
	`fÊush
(
pfd
);

100 
	`Ârötf
(
°dîr
, "V......");

101 
	`fÊush
(
°dîr
);

102 
h
 = 0; h < 
u32UvHeight
; h++)

104 
pMemC⁄ã¡
 = 
pVBufVút_C
 + 
h
 * 
pVBuf
->
u32Såide
[1];

106 
w
 = 0; w < 
pVBuf
->
u32Width
 / 2; w++)

108 
TmpBuff
[
w
] = *
pMemC⁄ã¡
;

109 
pMemC⁄ã¡
 += 2;

111 
	`fwrôe
(
TmpBuff
, 
pVBuf
->
u32Width
 / 2, 1, 
pfd
);

113 
	`fÊush
(
pfd
);

115 
	`Ârötf
(
°dîr
, "d⁄ê%d!\n", 
pVBuf
->
u32TimeRef
);

116 
	`fÊush
(
°dîr
);

118 
	`HI_MPI_SYS_Munm≠
(
pU£rPageAddr
[0], 
size
);

119 
	}
}

122 
HI_S32
 
	$SAMPLE_MISC_VpssDumpSrcImage
(
VPSS_GRP
 
GΩ
)

124 
HI_S32
 
i
 = 0;

125 
HI_S32
 
s32Rë
;

126 
VIDEO_FRAME_INFO_S
 
°Føme
;

127 
HI_CHAR
 
szYuvName
[128];

128 
HI_CHAR
 
szPixFrm
[10];

129 
FILE
* 
pfd
;

130 
VB_POOL
 
hPoﬁ
 = 
VB_INVALID_POOLID
;

131 
HI_U32
 
u32BlkSize
 = 0;

133 
DUMP_MEMBUF_S
 
°Mem
 = {0};

134 
VIDEO_FRAME_INFO_S
 
°FrmInfo
;

135 
VGS_HANDLE
 
hH™dÀ
;

136 
VGS_TASK_ATTR_S
 
°Task
;

137 
HI_U32
 
u32LumaSize
 = 0;

138 
HI_U32
 
u32ChrmSize
 = 0;

139 
HI_U32
 
u32PicLSåide
 = 0;

140 
HI_U32
 
u32PicCSåide
 = 0;

141 
HI_U32
 
u32Width
 = 0;

142 
HI_U32
 
u32Height
 = 0;

143 
HI_BOOL
 
bSídToVgs
 = 
HI_FALSE
;

144 
VPSS_GRP
 
VpssGΩ
 = 
GΩ
;

147 (
	`HI_MPI_VPSS_GëGΩFøme
(
VpssGΩ
, &
°Føme
, 0Ë!
HI_SUCCESS
))

149 
	`¥ötf
("get frameÉrror!!!\n");

150 
	`¶ìp
(1);

154 
	`°r˝y
(
szPixFrm
, (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
) ? "p420" : "p422");

155 
	`•rötf
(
szYuvName
, "./vpss%d_%d_%d_%s.yuv", 
VpssGΩ
,

156 
°Føme
.
°VFøme
.
u32Width
, stFøme.°VFøme.
u32Height
, 
szPixFrm
);

158 
	`¥ötf
("Dum∞YUV fømêo‡vpss%dÅÿfûe: \"%s\"\n", 
VpssGΩ
, 
szYuvName
);

160 
bSídToVgs
 = ((
°Føme
.
°VFøme
.
íCom¥essMode
 > 0Ë|| (°Føme.°VFøme.
íVideoF‹m©
 > 0));

163 
pfd
 = 
	`f›í
(
szYuvName
, "wb");

165 i‡(
NULL
 =
pfd
)

170 
u32PicLSåide
 = 
°Føme
.
°VFøme
.
u32Såide
[0];

171 
u32PicCSåide
 = 
°Føme
.
°VFøme
.
u32Såide
[0];

172 
u32LumaSize
 = 
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
;

173 
u32ChrmSize
 = (
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
Ë>> (1 + (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =°Føme.°VFøme.
íPixñF‹m©
));

174 
u32Width
 = 
°Føme
.
°VFøme
.u32Width;

175 
u32Height
 = 
°Føme
.
°VFøme
.u32Height;

177 i‡(
bSídToVgs
)

179 
u32BlkSize
 = (
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 =
°Føme
.
°VFøme
.
íPixñF‹m©
)

180 ? (
°Føme
.
°VFøme
.
u32Såide
[0] * stFøme.°VFøme.
u32Height
 * 3 >> 1) : (stFrame.stVFrame.u32Stride[0] * stFrame.stVFrame.u32Height * 2);

183 
hPoﬁ
 = 
	`HI_MPI_VB_Cª©ePoﬁ
–
u32BlkSize
, 1, 
NULL
);

184 i‡(
hPoﬁ
 =
VB_INVALID_POOLID
)

186 
	`¥ötf
("HI_MPI_VB_CreatePool failed! \n");

187 
END1
;

190 
°Mem
.
hPoﬁ
 = hPool;

193 i‡(
bSídToVgs
)

195 (
°Mem
.
hBlock
 = 
	`HI_MPI_VB_GëBlock
(°Mem.
hPoﬁ
, 
u32BlkSize
, 
NULL
)Ë=
VB_INVALID_HANDLE
)

200 
°Mem
.
u32PhyAddr
 = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(°Mem.
hBlock
);

203 
°Mem
.
pVúAddr
 = (
HI_U8
*Ë
	`HI_MPI_SYS_Mm≠
–°Mem.
u32PhyAddr
, 
u32BlkSize
 );

204 i‡(
°Mem
.
pVúAddr
 =
NULL
)

206 
	`¥ötf
("Mem dev mayÇot open\n");

207 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

208 
END2
;

211 
	`mem£t
(&
°FrmInfo
.
°VFøme
, 0, (
VIDEO_FRAME_S
));

212 
°FrmInfo
.
°VFøme
.
u32PhyAddr
[0] = 
°Mem
.u32PhyAddr;

213 
°FrmInfo
.
°VFøme
.
u32PhyAddr
[1] = stFrmInfo.°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

214 
°FrmInfo
.
°VFøme
.
u32PhyAddr
[2] = stFrmInfo.°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

216 
°FrmInfo
.
°VFøme
.
pVúAddr
[0] = 
°Mem
.pVirAddr;

217 
°FrmInfo
.
°VFøme
.
pVúAddr
[1] = (
HI_U8
*Ë°FrmInfo.°VFøme.pVúAddr[0] + 
u32LumaSize
;

218 
°FrmInfo
.
°VFøme
.
pVúAddr
[2] = (
HI_U8
*Ë°FrmInfo.°VFøme.pVúAddr[1] + 
u32ChrmSize
;

220 
°FrmInfo
.
°VFøme
.
u32Width
 = u32Width;

221 
°FrmInfo
.
°VFøme
.
u32Height
 = u32Height;

222 
°FrmInfo
.
°VFøme
.
u32Såide
[0] = 
u32PicLSåide
;

223 
°FrmInfo
.
°VFøme
.
u32Såide
[1] = 
u32PicCSåide
;

224 
°FrmInfo
.
°VFøme
.
u32Såide
[2] = 
u32PicCSåide
;

226 
°FrmInfo
.
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

227 
°FrmInfo
.
°VFøme
.
íPixñF‹m©
 = 
°Føme
.stVFrame.enPixelFormat;

228 
°FrmInfo
.
°VFøme
.
íVideoF‹m©
 = 
VIDEO_FORMAT_LINEAR
;

230 
°FrmInfo
.
°VFøme
.
u64±s
 = (
i
 * 40);

231 
°FrmInfo
.
°VFøme
.
u32TimeRef
 = (
i
 * 2);

233 
°FrmInfo
.
u32PoﬁId
 = 
hPoﬁ
;

235 
s32Rë
 = 
	`HI_MPI_VGS_BegöJob
(&
hH™dÀ
);

236 i‡(
s32Rë
 !
HI_SUCCESS
)

238 
	`¥ötf
("HI_MPI_VGS_BeginJob failed\n");

239 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

240 
END2
;

243 
	`mem˝y
(&
°Task
.
°ImgIn
, &
°Føme
.
°VFøme
, (
VIDEO_FRAME_INFO_S
));

244 
	`mem˝y
(&
°Task
.
°ImgOut
 , &
°FrmInfo
, (
VIDEO_FRAME_INFO_S
));

245 
s32Rë
 = 
	`HI_MPI_VGS_AddSˇÀTask
(
hH™dÀ
, &
°Task
);

246 i‡(
s32Rë
 !
HI_SUCCESS
)

248 
	`¥ötf
("HI_MPI_VGS_AddScaleTask failed\n");

249 
	`HI_MPI_VGS_C™˚lJob
(
hH™dÀ
);

250 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

251 
END2
;

254 
s32Rë
 = 
	`HI_MPI_VGS_EndJob
(
hH™dÀ
);

255 i‡(
s32Rë
 !
HI_SUCCESS
)

257 
	`¥ötf
("HI_MPI_VGS_EndJob failed\n");

258 
	`HI_MPI_VGS_C™˚lJob
(
hH™dÀ
);

259 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

260 
END2
;

262 
	`¶ìp
(1);

264 
	`ßm∂e_yuv_dump
(&
°FrmInfo
.
°VFøme
, 
pfd
);

266 
	`HI_MPI_VB_Rñó£Block
(
°Mem
.
hBlock
);

271 
	`ßm∂e_yuv_dump
(&
°Føme
.
°VFøme
, 
pfd
);

275 
END2
:

276 i‡(
hPoﬁ
 !
VB_INVALID_POOLID
)

278 
	`HI_MPI_VB_De°royPoﬁ
–
hPoﬁ
 );

281 
END1
:

282 
	`f˛o£
(
pfd
);

284 
	`HI_MPI_VPSS_Rñó£GΩFøme
(
VpssGΩ
, &
°Føme
);

287 
	}
}

289 
HI_S32
 
	$maö
(
¨gc
, * 
¨gv
[])

291 
VPSS_GRP
 
VpssGΩ
 = 0;

293 
	`¥ötf
("Usage: ./vpss_dump [Grp] \n");

294 
	`¥ötf
("Grp: vpss Grp id.\n");

297 i‡(
¨gc
 < 2)

299 
	`¥ötf
("wrongárg!!!!\n\n");

303 
VpssGΩ
 = 
	`©oi
(
¨gv
[1]);

304 i‡(!
	`VALUE_BETWEEN
(
VpssGΩ
, 0, 127))

306 
	`¥ötf
("grp id must be [0,127]!!!!\n\n");

310 
	`SAMPLE_MISC_VpssDumpSrcImage
(
VpssGΩ
);

312  
HI_SUCCESS
;

313 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/asm/stat.h

1 #i‚de‡
_ASM_X86_STAT_H


2 
	#_ASM_X86_STAT_H


	)

4 
	#STAT_HAVE_NSEC
 1

	)

6 #ifde‡
__i386__


7 
	s°©
 {

8 
	m°_dev
;

9 
	m°_öo
;

10 
	m°_mode
;

11 
	m°_∆ök
;

12 
	m°_uid
;

13 
	m°_gid
;

14 
	m°_rdev
;

15 
	m°_size
;

16 
	m°_blksize
;

17 
	m°_blocks
;

18 
	m°_©ime
;

19 
	m°_©ime_n£c
;

20 
	m°_mtime
;

21 
	m°_mtime_n£c
;

22 
	m°_˘ime
;

23 
	m°_˘ime_n£c
;

24 
	m__unu£d4
;

25 
	m__unu£d5
;

28 
	#STAT64_HAS_BROKEN_ST_INO
 1

	)

33 
	s°©64
 {

34 
	m°_dev
;

35 
	m__∑d0
[4];

37 
	m__°_öo
;

39 
	m°_mode
;

40 
	m°_∆ök
;

42 
	m°_uid
;

43 
	m°_gid
;

45 
	m°_rdev
;

46 
	m__∑d3
[4];

48 
	m°_size
;

49 
	m°_blksize
;

52 
	m°_blocks
;

54 
	m°_©ime
;

55 
	m°_©ime_n£c
;

57 
	m°_mtime
;

58 
	m°_mtime_n£c
;

60 
	m°_˘ime
;

61 
	m°_˘ime_n£c
;

63 
	m°_öo
;

68 
	s°©
 {

69 
	m°_dev
;

70 
	m°_öo
;

71 
	m°_∆ök
;

73 
	m°_mode
;

74 
	m°_uid
;

75 
	m°_gid
;

76 
	m__∑d0
;

77 
	m°_rdev
;

78 
	m°_size
;

79 
	m°_blksize
;

80 
	m°_blocks
;

82 
	m°_©ime
;

83 
	m°_©ime_n£c
;

84 
	m°_mtime
;

85 
	m°_mtime_n£c
;

86 
	m°_˘ime
;

87 
	m°_˘ime_n£c
;

88 
	m__unu£d
[3];

93 
	s__ﬁd_kî√l_°©
 {

94 
	m°_dev
;

95 
	m°_öo
;

96 
	m°_mode
;

97 
	m°_∆ök
;

98 
	m°_uid
;

99 
	m°_gid
;

100 
	m°_rdev
;

101 #ifde‡
__i386__


102 
	m°_size
;

103 
	m°_©ime
;

104 
	m°_mtime
;

105 
	m°_˘ime
;

107 
	m°_size
;

108 
	m°_©ime
;

109 
	m°_mtime
;

110 
	m°_˘ime
;

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/fb.h

1 #i‚de‡
_LINUX_FB_H


2 
	#_LINUX_FB_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/i2c.h
>

7 
	gdíåy
;

11 
	#FB_MAX
 32

	)

15 
	#FBIOGET_VSCREENINFO
 0x4600

	)

16 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

17 
	#FBIOGET_FSCREENINFO
 0x4602

	)

18 
	#FBIOGETCMAP
 0x4604

	)

19 
	#FBIOPUTCMAP
 0x4605

	)

20 
	#FBIOPAN_DISPLAY
 0x4606

	)

21 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

26 
	#FBIOGET_CON2FBMAP
 0x460F

	)

27 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

28 
	#FBIOBLANK
 0x4611

	)

29 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

30 
	#FBIO_ALLOC
 0x4613

	)

31 
	#FBIO_FREE
 0x4614

	)

32 
	#FBIOGET_GLYPH
 0x4615

	)

33 
	#FBIOGET_HWCINFO
 0x4616

	)

34 
	#FBIOPUT_MODEINFO
 0x4617

	)

35 
	#FBIOGET_DISPINFO
 0x4618

	)

38 
	#FB_TYPE_PACKED_PIXELS
 0

	)

39 
	#FB_TYPE_PLANES
 1

	)

40 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

41 
	#FB_TYPE_TEXT
 3

	)

42 
	#FB_TYPE_VGA_PLANES
 4

	)

44 
	#FB_AUX_TEXT_MDA
 0

	)

45 
	#FB_AUX_TEXT_CGA
 1

	)

46 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

47 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

48 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

49 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

50 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

51 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

52 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

53 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

54 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

55 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

57 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

58 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

59 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

61 
	#FB_VISUAL_MONO01
 0

	)

62 
	#FB_VISUAL_MONO10
 1

	)

63 
	#FB_VISUAL_TRUECOLOR
 2

	)

64 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

65 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

66 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

68 
	#FB_ACCEL_NONE
 0

	)

69 
	#FB_ACCEL_ATARIBLITT
 1

	)

70 
	#FB_ACCEL_AMIGABLITT
 2

	)

71 
	#FB_ACCEL_S3_TRIO64
 3

	)

72 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

73 
	#FB_ACCEL_S3_VIRGE
 5

	)

74 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

75 
	#FB_ACCEL_DEC_TGA
 7

	)

76 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

77 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

78 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

79 
	#FB_ACCEL_SUN_CREATOR
 11

	)

80 
	#FB_ACCEL_SUN_CGSIX
 12

	)

81 
	#FB_ACCEL_SUN_LEO
 13

	)

82 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

83 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

84 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

85 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

86 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

87 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

88 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

89 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

90 
	#FB_ACCEL_SUN_CG14
 22

	)

91 
	#FB_ACCEL_SUN_BWTWO
 23

	)

92 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

93 
	#FB_ACCEL_SUN_TCX
 25

	)

94 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

95 
	#FB_ACCEL_NV3
 27

	)

96 
	#FB_ACCEL_NV4
 28

	)

97 
	#FB_ACCEL_NV5
 29

	)

98 
	#FB_ACCEL_CT_6555x
 30

	)

99 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

100 
	#FB_ACCEL_ATI_RAGE128
 32

	)

101 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

102 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

103 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

104 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

105 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

106 
	#FB_ACCEL_ATI_RADEON
 38

	)

107 
	#FB_ACCEL_I810
 39

	)

108 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

109 
	#FB_ACCEL_SIS_XABRE
 41

	)

110 
	#FB_ACCEL_I830
 42

	)

111 
	#FB_ACCEL_NV_10
 43

	)

112 
	#FB_ACCEL_NV_20
 44

	)

113 
	#FB_ACCEL_NV_30
 45

	)

114 
	#FB_ACCEL_NV_40
 46

	)

115 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

116 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

117 
	#FB_ACCEL_OMAP1610
 49

	)

118 
	#FB_ACCEL_TRIDENT_TGUI
 50

	)

119 
	#FB_ACCEL_TRIDENT_3DIMAGE
 51

	)

120 
	#FB_ACCEL_TRIDENT_BLADE3D
 52

	)

121 
	#FB_ACCEL_TRIDENT_BLADEXP
 53

	)

122 
	#FB_ACCEL_CIRRUS_ALPINE
 53

	)

123 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

124 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

125 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

126 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

127 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

128 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

129 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

130 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

131 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

132 
	#FB_ACCEL_PXA3XX
 99

	)

134 
	#FB_ACCEL_SAVAGE4
 0x80

	)

135 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

136 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

137 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

138 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

139 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

140 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

141 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

142 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

143 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

144 
	#FB_ACCEL_S3TWISTER_P
 0x8®

	)

145 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

146 
	#FB_ACCEL_SUPERSAVAGE
 0x8¯

	)

147 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

148 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8ê

	)

150 
	sfb_fix_s¸ìnöfo
 {

151 
	mid
[16];

152 
	msmem_°¨t
;

154 
__u32
 
	msmem_Àn
;

155 
__u32
 
	mty≥
;

156 
__u32
 
	mty≥_aux
;

157 
__u32
 
	mvisuÆ
;

158 
__u16
 
	mx∑n°ï
;

159 
__u16
 
	my∑n°ï
;

160 
__u16
 
	mywøp°ï
;

161 
__u32
 
	mlöe_Àngth
;

162 
	mmmio_°¨t
;

164 
__u32
 
	mmmio_Àn
;

165 
__u32
 
	mac˚l
;

167 
__u16
 
	mª£rved
[3];

180 
	sfb_bôfõld
 {

181 
__u32
 
	moff£t
;

182 
__u32
 
	mÀngth
;

183 
__u32
 
	mmsb_right
;

187 
	#FB_NONSTD_HAM
 1

	)

188 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

190 
	#FB_ACTIVATE_NOW
 0

	)

191 
	#FB_ACTIVATE_NXTOPEN
 1

	)

192 
	#FB_ACTIVATE_TEST
 2

	)

193 
	#FB_ACTIVATE_MASK
 15

	)

195 
	#FB_ACTIVATE_VBL
 16

	)

196 
	#FB_CHANGE_CMAP_VBL
 32

	)

197 
	#FB_ACTIVATE_ALL
 64

	)

198 
	#FB_ACTIVATE_FORCE
 128

	)

199 
	#FB_ACTIVATE_INV_MODE
 256

	)

201 
	#FB_ACCELF_TEXT
 1

	)

203 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

204 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

205 
	#FB_SYNC_EXT
 4

	)

206 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

207 
	#FB_SYNC_BROADCAST
 16

	)

210 
	#FB_SYNC_ON_GREEN
 32

	)

212 
	#FB_VMODE_NONINTERLACED
 0

	)

213 
	#FB_VMODE_INTERLACED
 1

	)

214 
	#FB_VMODE_DOUBLE
 2

	)

215 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

216 
	#FB_VMODE_MASK
 255

	)

218 
	#FB_VMODE_YWRAP
 256

	)

219 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

220 
	#FB_VMODE_CONUPDATE
 512

	)

225 
	#FB_ROTATE_UR
 0

	)

226 
	#FB_ROTATE_CW
 1

	)

227 
	#FB_ROTATE_UD
 2

	)

228 
	#FB_ROTATE_CCW
 3

	)

230 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

231 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

233 
	sfb_v¨_s¸ìnöfo
 {

234 
__u32
 
	mxªs
;

235 
__u32
 
	myªs
;

236 
__u32
 
	mxªs_vútuÆ
;

237 
__u32
 
	myªs_vútuÆ
;

238 
__u32
 
	mxoff£t
;

239 
__u32
 
	myoff£t
;

241 
__u32
 
	mbôs_≥r_pixñ
;

242 
__u32
 
	mgøysˇÀ
;

244 
fb_bôfõld
 
	mªd
;

245 
fb_bôfõld
 
	mgªí
;

246 
fb_bôfõld
 
	mblue
;

247 
fb_bôfõld
 
	må™•
;

249 
__u32
 
	mn⁄°d
;

251 
__u32
 
	ma˘iv©e
;

253 
__u32
 
	mheight
;

254 
__u32
 
	mwidth
;

256 
__u32
 
	mac˚l_Êags
;

259 
__u32
 
	mpix˛ock
;

260 
__u32
 
	mÀ·_m¨gö
;

261 
__u32
 
	mright_m¨gö
;

262 
__u32
 
	muµî_m¨gö
;

263 
__u32
 
	mlowî_m¨gö
;

264 
__u32
 
	mhsync_Àn
;

265 
__u32
 
	mvsync_Àn
;

266 
__u32
 
	msync
;

267 
__u32
 
	mvmode
;

268 
__u32
 
	mrŸ©e
;

269 
__u32
 
	mª£rved
[5];

272 
	sfb_cm≠
 {

273 
__u32
 
	m°¨t
;

274 
__u32
 
	mÀn
;

275 
__u16
 *
	mªd
;

276 
__u16
 *
	mgªí
;

277 
__u16
 *
	mblue
;

278 
__u16
 *
	må™•
;

281 
	sfb_c⁄2fbm≠
 {

282 
__u32
 
	mc⁄sﬁe
;

283 
__u32
 
	m‰amebuf„r
;

287 
	#VESA_NO_BLANKING
 0

	)

288 
	#VESA_VSYNC_SUSPEND
 1

	)

289 
	#VESA_HSYNC_SUSPEND
 2

	)

290 
	#VESA_POWERDOWN
 3

	)

295 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

298 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

301 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

304 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

307 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

310 
	#FB_VBLANK_VBLANKING
 0x001

	)

311 
	#FB_VBLANK_HBLANKING
 0x002

	)

312 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

313 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

314 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

315 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

316 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

317 
	#FB_VBLANK_VSYNCING
 0x080

	)

318 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

320 
	sfb_vbœnk
 {

321 
__u32
 
	mÊags
;

322 
__u32
 
	mcou¡
;

323 
__u32
 
	mvcou¡
;

324 
__u32
 
	mhcou¡
;

325 
__u32
 
	mª£rved
[4];

329 
	#ROP_COPY
 0

	)

330 
	#ROP_XOR
 1

	)

332 
	sfb_c›y¨ó
 {

333 
__u32
 
	mdx
;

334 
__u32
 
	mdy
;

335 
__u32
 
	mwidth
;

336 
__u32
 
	mheight
;

337 
__u32
 
	msx
;

338 
__u32
 
	msy
;

341 
	sfb_fûÃe˘
 {

342 
__u32
 
	mdx
;

343 
__u32
 
	mdy
;

344 
__u32
 
	mwidth
;

345 
__u32
 
	mheight
;

346 
__u32
 
	mcﬁ‹
;

347 
__u32
 
	mr›
;

350 
	sfb_image
 {

351 
__u32
 
	mdx
;

352 
__u32
 
	mdy
;

353 
__u32
 
	mwidth
;

354 
__u32
 
	mheight
;

355 
__u32
 
	mfg_cﬁ‹
;

356 
__u32
 
	mbg_cﬁ‹
;

357 
__u8
 
	mdïth
;

358 c⁄° *
	md©a
;

359 
fb_cm≠
 
	mcm≠
;

366 
	#FB_CUR_SETIMAGE
 0x01

	)

367 
	#FB_CUR_SETPOS
 0x02

	)

368 
	#FB_CUR_SETHOT
 0x04

	)

369 
	#FB_CUR_SETCMAP
 0x08

	)

370 
	#FB_CUR_SETSHAPE
 0x10

	)

371 
	#FB_CUR_SETSIZE
 0x20

	)

372 
	#FB_CUR_SETALL
 0xFF

	)

374 
	sfbcuΩos
 {

375 
__u16
 
	mx
, 
	my
;

378 
	sfb_curs‹
 {

379 
__u16
 
	m£t
;

380 
__u16
 
	míabÀ
;

381 
__u16
 
	mr›
;

382 c⁄° *
	mmask
;

383 
fbcuΩos
 
	mhŸ
;

384 
fb_image
 
	mimage
;

387 #ifde‡
CONFIG_FB_BACKLIGHT


389 
	#FB_BACKLIGHT_LEVELS
 128

	)

390 
	#FB_BACKLIGHT_MAX
 0xFF

	)

	@/usr/include/linux/fcntl.h

1 #i‚de‡
_LINUX_FCNTL_H


2 
	#_LINUX_FCNTL_H


	)

4 
	~<asm/f˙é.h
>

6 
	#F_SETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 0)

	)

7 
	#F_GETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 1)

	)

13 
	#F_CANCELLK
 (
F_LINUX_SPECIFIC_BASE
 + 5)

	)

16 
	#F_DUPFD_CLOEXEC
 (
F_LINUX_SPECIFIC_BASE
 + 6)

	)

22 
	#F_NOTIFY
 (
F_LINUX_SPECIFIC_BASE
+2)

	)

27 
	#DN_ACCESS
 0x00000001

	)

28 
	#DN_MODIFY
 0x00000002

	)

29 
	#DN_CREATE
 0x00000004

	)

30 
	#DN_DELETE
 0x00000008

	)

31 
	#DN_RENAME
 0x00000010

	)

32 
	#DN_ATTRIB
 0x00000020

	)

33 
	#DN_MULTISHOT
 0x80000000

	)

35 
	#AT_FDCWD
 -100

	)

38 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

39 
	#AT_REMOVEDIR
 0x200

	)

41 
	#AT_SYMLINK_FOLLOW
 0x400

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

23 #unde‡
NR_OPEN


24 
	#INR_OPEN
 1024

	)

26 
	#BLOCK_SIZE_BITS
 10

	)

27 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

29 
	#SEEK_SET
 0

	)

30 
	#SEEK_CUR
 1

	)

31 
	#SEEK_END
 2

	)

32 
	#SEEK_MAX
 
SEEK_END


	)

35 
	sfûes_°©_°ru˘
 {

36 
	mƒ_fûes
;

37 
	mƒ_‰ì_fûes
;

38 
	mmax_fûes
;

41 
	söodes_°©_t
 {

42 
	mƒ_öodes
;

43 
	mƒ_unu£d
;

44 
	mdummy
[5];

48 
	#NR_FILE
 8192

	)

50 
	#MAY_EXEC
 1

	)

51 
	#MAY_WRITE
 2

	)

52 
	#MAY_READ
 4

	)

53 
	#MAY_APPEND
 8

	)

54 
	#MAY_ACCESS
 16

	)

55 
	#MAY_OPEN
 32

	)

63 
	#FMODE_READ
 ((
fmode_t
)1)

	)

65 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

67 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

69 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

71 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

73 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

75 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

77 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

80 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

88 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

91 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

147 
	#RW_MASK
 1

	)

148 
	#RWA_MASK
 16

	)

149 
	#READ
 0

	)

150 
	#WRITE
 1

	)

151 
	#READA
 16

	)

152 
	#SWRITE
 17

	)

153 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

154 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

155 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

156 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

157 
	#WRITE_ODIRECT
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

158 
	#SWRITE_SYNC_PLUG
 \

159 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

160 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

161 
	#WRITE_BARRIER
 (
WRITE
 | (1 << 
BIO_RW_BARRIER
))

	)

167 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

168 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

170 
	#SEL_IN
 1

	)

171 
	#SEL_OUT
 2

	)

172 
	#SEL_EX
 4

	)

175 
	#FS_REQUIRES_DEV
 1

	)

176 
	#FS_BINARY_MOUNTDATA
 2

	)

177 
	#FS_HAS_SUBTYPE
 4

	)

178 
	#FS_REVAL_DOT
 16384

	)

179 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

186 
	#MS_RDONLY
 1

	)

187 
	#MS_NOSUID
 2

	)

188 
	#MS_NODEV
 4

	)

189 
	#MS_NOEXEC
 8

	)

190 
	#MS_SYNCHRONOUS
 16

	)

191 
	#MS_REMOUNT
 32

	)

192 
	#MS_MANDLOCK
 64

	)

193 
	#MS_DIRSYNC
 128

	)

194 
	#MS_NOATIME
 1024

	)

195 
	#MS_NODIRATIME
 2048

	)

196 
	#MS_BIND
 4096

	)

197 
	#MS_MOVE
 8192

	)

198 
	#MS_REC
 16384

	)

199 
	#MS_VERBOSE
 32768

	)

201 
	#MS_SILENT
 32768

	)

202 
	#MS_POSIXACL
 (1<<16Ë

	)

203 
	#MS_UNBINDABLE
 (1<<17Ë

	)

204 
	#MS_PRIVATE
 (1<<18Ë

	)

205 
	#MS_SLAVE
 (1<<19Ë

	)

206 
	#MS_SHARED
 (1<<20Ë

	)

207 
	#MS_RELATIME
 (1<<21Ë

	)

208 
	#MS_KERNMOUNT
 (1<<22Ë

	)

209 
	#MS_I_VERSION
 (1<<23Ë

	)

210 
	#MS_STRICTATIME
 (1<<24Ë

	)

211 
	#MS_ACTIVE
 (1<<30)

	)

212 
	#MS_NOUSER
 (1<<31)

	)

217 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

222 
	#MS_MGC_VAL
 0xC0ED0000

	)

223 
	#MS_MGC_MSK
 0xffff0000

	)

227 
	#S_SYNC
 1

	)

228 
	#S_NOATIME
 2

	)

229 
	#S_APPEND
 4

	)

230 
	#S_IMMUTABLE
 8

	)

231 
	#S_DEAD
 16

	)

232 
	#S_NOQUOTA
 32

	)

233 
	#S_DIRSYNC
 64

	)

234 
	#S_NOCMTIME
 128

	)

235 
	#S_SWAPFILE
 256

	)

236 
	#S_PRIVATE
 512

	)

251 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

253 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

254 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

255 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

256 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

257 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

258 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

259 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

260 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

262 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

263 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

264 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

265 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

267 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

268 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

269 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

270 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

275 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

276 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

277 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

278 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

279 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

280 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

281 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

282 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

283 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

284 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

285 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

286 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

288 
	#BLKPG
 
	`_IO
(0x12,105)

	)

292 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

293 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

298 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

299 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

300 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

301 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

302 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

303 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

304 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

305 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

306 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

307 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

308 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

309 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

311 
	#BMAP_IOCTL
 1

	)

312 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

313 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

314 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

315 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

317 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

318 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

319 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

320 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

321 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

322 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

323 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

324 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

325 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

330 
	#FS_SECRM_FL
 0x00000001

	)

331 
	#FS_UNRM_FL
 0x00000002

	)

332 
	#FS_COMPR_FL
 0x00000004

	)

333 
	#FS_SYNC_FL
 0x00000008

	)

334 
	#FS_IMMUTABLE_FL
 0x00000010

	)

335 
	#FS_APPEND_FL
 0x00000020

	)

336 
	#FS_NODUMP_FL
 0x00000040

	)

337 
	#FS_NOATIME_FL
 0x00000080

	)

339 
	#FS_DIRTY_FL
 0x00000100

	)

340 
	#FS_COMPRBLK_FL
 0x00000200

	)

341 
	#FS_NOCOMP_FL
 0x00000400

	)

342 
	#FS_ECOMPR_FL
 0x00000800

	)

344 
	#FS_BTREE_FL
 0x00001000

	)

345 
	#FS_INDEX_FL
 0x00001000

	)

346 
	#FS_IMAGIC_FL
 0x00002000

	)

347 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

348 
	#FS_NOTAIL_FL
 0x00008000

	)

349 
	#FS_DIRSYNC_FL
 0x00010000

	)

350 
	#FS_TOPDIR_FL
 0x00020000

	)

351 
	#FS_EXTENT_FL
 0x00080000

	)

352 
	#FS_DIRECTIO_FL
 0x00100000

	)

353 
	#FS_RESERVED_FL
 0x80000000

	)

355 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

356 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

359 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

360 
	#SYNC_FILE_RANGE_WRITE
 2

	)

361 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/i2c-dev.h

22 #i‚de‡
_LINUX_I2C_DEV_H


23 
	#_LINUX_I2C_DEV_H


	)

25 
	~<löux/ty≥s.h
>

34 
	#I2C_RETRIES
 0x0701

	)

36 
	#I2C_TIMEOUT
 0x0702

	)

41 
	#I2C_SLAVE
 0x0703

	)

42 
	#I2C_SLAVE_FORCE
 0x0706

	)

44 
	#I2C_TENBIT
 0x0704

	)

46 
	#I2C_FUNCS
 0x0705

	)

48 
	#I2C_RDWR
 0x0707

	)

50 
	#I2C_PEC
 0x0708

	)

51 
	#I2C_SMBUS
 0x0720

	)

55 
	si2c_smbus_io˘l_d©a
 {

56 
__u8
 
	mªad_wrôe
;

57 
__u8
 
	mcomm™d
;

58 
__u32
 
	msize
;

59 
i2c_smbus_d©a
 *
	md©a
;

63 
	si2c_rdwr_io˘l_d©a
 {

64 
i2c_msg
 *
	mmsgs
;

65 
__u32
 
	mnmsgs
;

68 
	#I2C_RDRW_IOCTL_MAX_MSGS
 42

	)

	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

101 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

102 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

103 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

105 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

110 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

112 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

113 
I2C_FUNC_SMBUS_BYTE
 | \

114 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

115 
I2C_FUNC_SMBUS_WORD_DATA
 | \

116 
I2C_FUNC_SMBUS_PROC_CALL
 | \

117 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

118 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

119 
I2C_FUNC_SMBUS_PEC
)

	)

124 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

125 
	ui2c_smbus_d©a
 {

126 
__u8
 
	mbyã
;

127 
__u16
 
	mw‹d
;

128 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

133 
	#I2C_SMBUS_READ
 1

	)

134 
	#I2C_SMBUS_WRITE
 0

	)

138 
	#I2C_SMBUS_QUICK
 0

	)

139 
	#I2C_SMBUS_BYTE
 1

	)

140 
	#I2C_SMBUS_BYTE_DATA
 2

	)

141 
	#I2C_SMBUS_WORD_DATA
 3

	)

142 
	#I2C_SMBUS_PROC_CALL
 4

	)

143 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

144 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

145 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

146 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

38 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

39 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

42 
	#__FUNCTION__
 (
__func__
)

	)

45 #ifde‡
CONFIG_NUMA


46 
	#NUMA_BUILD
 1

	)

48 
	#NUMA_BUILD
 0

	)

52 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


53 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

	@/usr/include/linux/major.h

1 #i‚de‡
_LINUX_MAJOR_H


2 
	#_LINUX_MAJOR_H


	)

9 
	#UNNAMED_MAJOR
 0

	)

10 
	#MEM_MAJOR
 1

	)

11 
	#RAMDISK_MAJOR
 1

	)

12 
	#FLOPPY_MAJOR
 2

	)

13 
	#PTY_MASTER_MAJOR
 2

	)

14 
	#IDE0_MAJOR
 3

	)

15 
	#HD_MAJOR
 
IDE0_MAJOR


	)

16 
	#PTY_SLAVE_MAJOR
 3

	)

17 
	#TTY_MAJOR
 4

	)

18 
	#TTYAUX_MAJOR
 5

	)

19 
	#LP_MAJOR
 6

	)

20 
	#VCS_MAJOR
 7

	)

21 
	#LOOP_MAJOR
 7

	)

22 
	#SCSI_DISK0_MAJOR
 8

	)

23 
	#SCSI_TAPE_MAJOR
 9

	)

24 
	#MD_MAJOR
 9

	)

25 
	#MISC_MAJOR
 10

	)

26 
	#SCSI_CDROM_MAJOR
 11

	)

27 
	#MUX_MAJOR
 11

	)

28 
	#XT_DISK_MAJOR
 13

	)

29 
	#INPUT_MAJOR
 13

	)

30 
	#SOUND_MAJOR
 14

	)

31 
	#CDU31A_CDROM_MAJOR
 15

	)

32 
	#JOYSTICK_MAJOR
 15

	)

33 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

34 
	#OPTICS_CDROM_MAJOR
 17

	)

35 
	#SANYO_CDROM_MAJOR
 18

	)

36 
	#CYCLADES_MAJOR
 19

	)

37 
	#CYCLADESAUX_MAJOR
 20

	)

38 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

39 
	#MFM_ACORN_MAJOR
 21

	)

40 
	#SCSI_GENERIC_MAJOR
 21

	)

41 
	#IDE1_MAJOR
 22

	)

42 
	#DIGICU_MAJOR
 22

	)

43 
	#DIGI_MAJOR
 23

	)

44 
	#MITSUMI_CDROM_MAJOR
 23

	)

45 
	#CDU535_CDROM_MAJOR
 24

	)

46 
	#STL_SERIALMAJOR
 24

	)

47 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

48 
	#STL_CALLOUTMAJOR
 25

	)

49 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

50 
	#QIC117_TAPE_MAJOR
 27

	)

51 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

53 
	#STL_SIOMEMMAJOR
 28

	)

54 
	#ACSI_MAJOR
 28

	)

55 
	#AZTECH_CDROM_MAJOR
 29

	)

56 
	#FB_MAJOR
 29

	)

57 
	#CM206_CDROM_MAJOR
 32

	)

58 
	#IDE2_MAJOR
 33

	)

59 
	#IDE3_MAJOR
 34

	)

60 
	#Z8530_MAJOR
 34

	)

61 
	#XPRAM_MAJOR
 35

	)

62 
	#NETLINK_MAJOR
 36

	)

63 
	#PS2ESDI_MAJOR
 36

	)

64 
	#IDETAPE_MAJOR
 37

	)

65 
	#Z2RAM_MAJOR
 37

	)

66 
	#APBLOCK_MAJOR
 38

	)

67 
	#DDV_MAJOR
 39

	)

68 
	#NBD_MAJOR
 43

	)

69 
	#RISCOM8_NORMAL_MAJOR
 48

	)

70 
	#DAC960_MAJOR
 48

	)

71 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

72 
	#MKISS_MAJOR
 55

	)

73 
	#DSP56K_MAJOR
 55

	)

75 
	#IDE4_MAJOR
 56

	)

76 
	#IDE5_MAJOR
 57

	)

78 
	#SCSI_DISK1_MAJOR
 65

	)

79 
	#SCSI_DISK2_MAJOR
 66

	)

80 
	#SCSI_DISK3_MAJOR
 67

	)

81 
	#SCSI_DISK4_MAJOR
 68

	)

82 
	#SCSI_DISK5_MAJOR
 69

	)

83 
	#SCSI_DISK6_MAJOR
 70

	)

84 
	#SCSI_DISK7_MAJOR
 71

	)

86 
	#COMPAQ_SMART2_MAJOR
 72

	)

87 
	#COMPAQ_SMART2_MAJOR1
 73

	)

88 
	#COMPAQ_SMART2_MAJOR2
 74

	)

89 
	#COMPAQ_SMART2_MAJOR3
 75

	)

90 
	#COMPAQ_SMART2_MAJOR4
 76

	)

91 
	#COMPAQ_SMART2_MAJOR5
 77

	)

92 
	#COMPAQ_SMART2_MAJOR6
 78

	)

93 
	#COMPAQ_SMART2_MAJOR7
 79

	)

95 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

96 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

98 
	#AURORA_MAJOR
 79

	)

100 
	#I2O_MAJOR
 80

	)

102 
	#SHMIQ_MAJOR
 85

	)

103 
	#SCSI_CHANGER_MAJOR
 86

	)

105 
	#IDE6_MAJOR
 88

	)

106 
	#IDE7_MAJOR
 89

	)

107 
	#IDE8_MAJOR
 90

	)

108 
	#IDE9_MAJOR
 91

	)

110 
	#DASD_MAJOR
 94

	)

112 
	#MDISK_MAJOR
 95

	)

114 
	#UBD_MAJOR
 98

	)

116 
	#PP_MAJOR
 99

	)

117 
	#JSFD_MAJOR
 99

	)

119 
	#PHONE_MAJOR
 100

	)

121 
	#COMPAQ_CISS_MAJOR
 104

	)

122 
	#COMPAQ_CISS_MAJOR1
 105

	)

123 
	#COMPAQ_CISS_MAJOR2
 106

	)

124 
	#COMPAQ_CISS_MAJOR3
 107

	)

125 
	#COMPAQ_CISS_MAJOR4
 108

	)

126 
	#COMPAQ_CISS_MAJOR5
 109

	)

127 
	#COMPAQ_CISS_MAJOR6
 110

	)

128 
	#COMPAQ_CISS_MAJOR7
 111

	)

130 
	#VIODASD_MAJOR
 112

	)

131 
	#VIOCD_MAJOR
 113

	)

133 
	#ATARAID_MAJOR
 114

	)

135 
	#SCSI_DISK8_MAJOR
 128

	)

136 
	#SCSI_DISK9_MAJOR
 129

	)

137 
	#SCSI_DISK10_MAJOR
 130

	)

138 
	#SCSI_DISK11_MAJOR
 131

	)

139 
	#SCSI_DISK12_MAJOR
 132

	)

140 
	#SCSI_DISK13_MAJOR
 133

	)

141 
	#SCSI_DISK14_MAJOR
 134

	)

142 
	#SCSI_DISK15_MAJOR
 135

	)

144 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

145 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

146 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

148 
	#DRBD_MAJOR
 147

	)

149 
	#RTF_MAJOR
 150

	)

150 
	#RAW_MAJOR
 162

	)

152 
	#USB_ACM_MAJOR
 166

	)

153 
	#USB_ACM_AUX_MAJOR
 167

	)

154 
	#USB_CHAR_MAJOR
 180

	)

156 
	#MMC_BLOCK_MAJOR
 179

	)

158 
	#VXVM_MAJOR
 199

	)

159 
	#VXSPEC_MAJOR
 200

	)

160 
	#VXDMP_MAJOR
 201

	)

162 
	#XENVBD_MAJOR
 202

	)

164 
	#MSR_MAJOR
 202

	)

165 
	#CPUID_MAJOR
 203

	)

167 
	#OSST_MAJOR
 206

	)

169 
	#IBM_TTY3270_MAJOR
 227

	)

170 
	#IBM_FS3270_MAJOR
 228

	)

172 
	#VIOTAPE_MAJOR
 230

	)

174 
	#BLOCK_EXT_MAJOR
 259

	)

175 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/linux/poll.h

1 #i‚de‡
_LINUX_POLL_H


2 
	#_LINUX_POLL_H


	)

4 
	~<asm/pﬁl.h
>

	@/usr/include/linux/reboot.h

1 #i‚de‡
_LINUX_REBOOT_H


2 
	#_LINUX_REBOOT_H


	)

8 
	#LINUX_REBOOT_MAGIC1
 0x„e1dód

	)

9 
	#LINUX_REBOOT_MAGIC2
 672274793

	)

10 
	#LINUX_REBOOT_MAGIC2A
 85072278

	)

11 
	#LINUX_REBOOT_MAGIC2B
 369367448

	)

12 
	#LINUX_REBOOT_MAGIC2C
 537993216

	)

28 
	#LINUX_REBOOT_CMD_RESTART
 0x01234567

	)

29 
	#LINUX_REBOOT_CMD_HALT
 0xCDEF0123

	)

30 
	#LINUX_REBOOT_CMD_CAD_ON
 0x89ABCDEF

	)

31 
	#LINUX_REBOOT_CMD_CAD_OFF
 0x00000000

	)

32 
	#LINUX_REBOOT_CMD_POWER_OFF
 0x4321FEDC

	)

33 
	#LINUX_REBOOT_CMD_RESTART2
 0xA1B2C3D4

	)

34 
	#LINUX_REBOOT_CMD_SW_SUSPEND
 0xD000FCE2

	)

35 
	#LINUX_REBOOT_CMD_KEXEC
 0x45584543

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_STOPPED
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

42 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

26 
	#NFDBITS
 
__NFDBITS


	)

28 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

29 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

30 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

31 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

32 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

38 
	#ITIMER_REAL
 0

	)

39 
	#ITIMER_VIRTUAL
 1

	)

40 
	#ITIMER_PROF
 2

	)

42 
	sôimî•ec
 {

43 
time•ec
 
	mô_öãrvÆ
;

44 
time•ec
 
	mô_vÆue
;

47 
	sôimîvÆ
 {

48 
timevÆ
 
	mô_öãrvÆ
;

49 
timevÆ
 
	mô_vÆue
;

55 
	#CLOCK_REALTIME
 0

	)

56 
	#CLOCK_MONOTONIC
 1

	)

57 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

58 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

59 
	#CLOCK_MONOTONIC_RAW
 4

	)

60 
	#CLOCK_REALTIME_COARSE
 5

	)

61 
	#CLOCK_MONOTONIC_COARSE
 6

	)

66 
	#CLOCK_SGI_CYCLE
 10

	)

67 
	#MAX_CLOCKS
 16

	)

68 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

69 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

74 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132640

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROW
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROW
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/prctl.h

19 #i‚de‡
_SYS_PRCTL_H


20 
	#_SYS_PRCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<löux/¥˘l.h
>

25 
__BEGIN_DECLS


28 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

30 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #ifde‡
__USE_UNIX98


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/fcntl.h

1 
	~<asm-gíîic/f˙é.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 
	~<bôs/w‹dsize.h
>

27 #i‚de‡
__exã∫_ölöe


28 
	#__MATH_INLINE
 
__ölöe


	)

30 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

34 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

37 
__MATH_INLINE
 

38 
__NTH
 (
	$__signbôf
 (
__x
))

40 #i‡
__WORDSIZE
 == 32

41 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

42  
__u
.
__i
 < 0;

44 
__m
;

45 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

46  
__m
 & 0x8;

48 
	}
}

49 
__MATH_INLINE
 

50 
__NTH
 (
	$__signbô
 (
__x
))

52 #i‡
__WORDSIZE
 == 32

53 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

54  
__u
.
__i
[1] < 0;

56 
__m
;

57 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

58  
__m
 & 0x80;

60 
	}
}

61 
__MATH_INLINE
 

62 
__NTH
 (
	$__signbôl
 (
__x
))

64 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

65  (
__u
.
__i
[2] & 0x8000) != 0;

66 
	}
}

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HWPOISON
 100

	)

102 #ifde‡
__USE_XOPEN2K


103 
	#POSIX_MADV_NORMAL
 0

	)

104 
	#POSIX_MADV_RANDOM
 1

	)

105 
	#POSIX_MADV_SEQUENTIAL
 2

	)

106 
	#POSIX_MADV_WILLNEED
 3

	)

107 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #ifde‡
__USE_XOPEN


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


24 
	~<bôs/w‹dsize.h
>

26 #i‡
__WORDSIZE
 == 64

27 
	#__SIZEOF_SEM_T
 32

	)

29 
	#__SIZEOF_SEM_T
 16

	)

34 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

39 
	m__size
[
__SIZEOF_SEM_T
];

40 
	m__Æign
;

41 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

236 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

239 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

245 
	smsghdr


247 *
	mmsg_«me
;

248 
sockÀn_t
 
	mmsg_«mñí
;

250 
iovec
 *
	mmsg_iov
;

251 
size_t
 
	mmsg_iovÀn
;

253 *
	mmsg_c⁄åﬁ
;

254 
size_t
 
	mmsg_c⁄åﬁÀn
;

259 
	mmsg_Êags
;

263 
	scmsghdr


265 
size_t
 
	mcmsg_Àn
;

270 
	mcmsg_Àvñ
;

271 
	mcmsg_ty≥
;

272 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

273 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

278 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

279 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

281 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

283 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

284 
	#CMSG_FIRSTHDR
(
mhdr
) \

285 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

286 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

287 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

288 & (
size_t
Ë~( (size_tË- 1))

	)

289 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

290 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

291 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

293 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

294 
cmsghdr
 *
__cmsg
Ë
__THROW
;

295 #ifde‡
__USE_EXTERN_INLINES


296 #i‚de‡
_EXTERN_INLINE


297 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

299 
_EXTERN_INLINE
 
cmsghdr
 *

300 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

302 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

306 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

307 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

308 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


309 + 
__mhdr
->
msg_c⁄åﬁÀn
)

310 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

311 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

314  
__cmsg
;

315 
	}
}

322 
	mSCM_RIGHTS
 = 0x01

323 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

324 #ifde‡
__USE_GNU


325 , 
	mSCM_CREDENTIALS
 = 0x02

326 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

330 #ifde‡
__USE_GNU


332 
	su¸ed


334 
pid_t
 
	mpid
;

335 
uid_t
 
	muid
;

336 
gid_t
 
	mgid
;

341 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


342 #i‚de‡
FIOGETOWN


343 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

345 #i‚de‡
FIOSETOWN


346 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

348 #i‚de‡
SIOCATMARK


349 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

351 #i‚de‡
SIOCGPGRP


352 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

354 #i‚de‡
SIOCGSTAMP


355 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

357 #i‚de‡
SIOCGSTAMPNS


358 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

360 #i‚de‡
SIOCSPGRP


361 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

366 
	~<asm/sockë.h
>

368 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


369 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


370 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


371 #unde‡
FIOGETOWN


373 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


374 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


375 #unde‡
FIOSETOWN


377 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


378 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


379 #unde‡
SIOCATMARK


381 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


382 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


383 #unde‡
SIOCGPGRP


385 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


386 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


387 #unde‡
SIOCGSTAMP


389 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


390 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


391 #unde‡
SIOCGSTAMPNS


393 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


394 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


395 #unde‡
SIOCSPGRP


400 
	slögî


402 
	ml_⁄off
;

403 
	ml_lögî
;

	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

21 #i‚de‡
_TERMIOS_H


25 
	tcc_t
;

26 
	t•ìd_t
;

27 
	ttcÊag_t
;

29 
	#NCCS
 32

	)

30 
	sãrmios


32 
tcÊag_t
 
	mc_iÊag
;

33 
tcÊag_t
 
	mc_oÊag
;

34 
tcÊag_t
 
	mc_cÊag
;

35 
tcÊag_t
 
	mc_lÊag
;

36 
cc_t
 
	mc_löe
;

37 
cc_t
 
	mc_cc
[
NCCS
];

38 
•ìd_t
 
	mc_i•ìd
;

39 
•ìd_t
 
	mc_o•ìd
;

40 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

41 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

45 
	#VINTR
 0

	)

46 
	#VQUIT
 1

	)

47 
	#VERASE
 2

	)

48 
	#VKILL
 3

	)

49 
	#VEOF
 4

	)

50 
	#VTIME
 5

	)

51 
	#VMIN
 6

	)

52 
	#VSWTC
 7

	)

53 
	#VSTART
 8

	)

54 
	#VSTOP
 9

	)

55 
	#VSUSP
 10

	)

56 
	#VEOL
 11

	)

57 
	#VREPRINT
 12

	)

58 
	#VDISCARD
 13

	)

59 
	#VWERASE
 14

	)

60 
	#VLNEXT
 15

	)

61 
	#VEOL2
 16

	)

64 
	#IGNBRK
 0000001

	)

65 
	#BRKINT
 0000002

	)

66 
	#IGNPAR
 0000004

	)

67 
	#PARMRK
 0000010

	)

68 
	#INPCK
 0000020

	)

69 
	#ISTRIP
 0000040

	)

70 
	#INLCR
 0000100

	)

71 
	#IGNCR
 0000200

	)

72 
	#ICRNL
 0000400

	)

73 
	#IUCLC
 0001000

	)

74 
	#IXON
 0002000

	)

75 
	#IXANY
 0004000

	)

76 
	#IXOFF
 0010000

	)

77 
	#IMAXBEL
 0020000

	)

78 
	#IUTF8
 0040000

	)

81 
	#OPOST
 0000001

	)

82 
	#OLCUC
 0000002

	)

83 
	#ONLCR
 0000004

	)

84 
	#OCRNL
 0000010

	)

85 
	#ONOCR
 0000020

	)

86 
	#ONLRET
 0000040

	)

87 
	#OFILL
 0000100

	)

88 
	#OFDEL
 0000200

	)

89 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


90 
	#NLDLY
 0000400

	)

91 
	#NL0
 0000000

	)

92 
	#NL1
 0000400

	)

93 
	#CRDLY
 0003000

	)

94 
	#CR0
 0000000

	)

95 
	#CR1
 0001000

	)

96 
	#CR2
 0002000

	)

97 
	#CR3
 0003000

	)

98 
	#TABDLY
 0014000

	)

99 
	#TAB0
 0000000

	)

100 
	#TAB1
 0004000

	)

101 
	#TAB2
 0010000

	)

102 
	#TAB3
 0014000

	)

103 
	#BSDLY
 0020000

	)

104 
	#BS0
 0000000

	)

105 
	#BS1
 0020000

	)

106 
	#FFDLY
 0100000

	)

107 
	#FF0
 0000000

	)

108 
	#FF1
 0100000

	)

111 
	#VTDLY
 0040000

	)

112 
	#VT0
 0000000

	)

113 
	#VT1
 0040000

	)

115 #ifde‡
__USE_MISC


116 
	#XTABS
 0014000

	)

120 #ifde‡
__USE_MISC


121 
	#CBAUD
 0010017

	)

123 
	#B0
 0000000

	)

124 
	#B50
 0000001

	)

125 
	#B75
 0000002

	)

126 
	#B110
 0000003

	)

127 
	#B134
 0000004

	)

128 
	#B150
 0000005

	)

129 
	#B200
 0000006

	)

130 
	#B300
 0000007

	)

131 
	#B600
 0000010

	)

132 
	#B1200
 0000011

	)

133 
	#B1800
 0000012

	)

134 
	#B2400
 0000013

	)

135 
	#B4800
 0000014

	)

136 
	#B9600
 0000015

	)

137 
	#B19200
 0000016

	)

138 
	#B38400
 0000017

	)

139 #ifde‡
__USE_MISC


140 
	#EXTA
 
B19200


	)

141 
	#EXTB
 
B38400


	)

143 
	#CSIZE
 0000060

	)

144 
	#CS5
 0000000

	)

145 
	#CS6
 0000020

	)

146 
	#CS7
 0000040

	)

147 
	#CS8
 0000060

	)

148 
	#CSTOPB
 0000100

	)

149 
	#CREAD
 0000200

	)

150 
	#PARENB
 0000400

	)

151 
	#PARODD
 0001000

	)

152 
	#HUPCL
 0002000

	)

153 
	#CLOCAL
 0004000

	)

154 #ifde‡
__USE_MISC


155 
	#CBAUDEX
 0010000

	)

157 
	#B57600
 0010001

	)

158 
	#B115200
 0010002

	)

159 
	#B230400
 0010003

	)

160 
	#B460800
 0010004

	)

161 
	#B500000
 0010005

	)

162 
	#B576000
 0010006

	)

163 
	#B921600
 0010007

	)

164 
	#B1000000
 0010010

	)

165 
	#B1152000
 0010011

	)

166 
	#B1500000
 0010012

	)

167 
	#B2000000
 0010013

	)

168 
	#B2500000
 0010014

	)

169 
	#B3000000
 0010015

	)

170 
	#B3500000
 0010016

	)

171 
	#B4000000
 0010017

	)

172 
	#__MAX_BAUD
 
B4000000


	)

173 #ifde‡
__USE_MISC


174 
	#CIBAUD
 002003600000

	)

175 
	#CMSPAR
 010000000000

	)

176 
	#CRTSCTS
 020000000000

	)

180 
	#ISIG
 0000001

	)

181 
	#ICANON
 0000002

	)

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


183 
	#XCASE
 0000004

	)

185 
	#ECHO
 0000010

	)

186 
	#ECHOE
 0000020

	)

187 
	#ECHOK
 0000040

	)

188 
	#ECHONL
 0000100

	)

189 
	#NOFLSH
 0000200

	)

190 
	#TOSTOP
 0000400

	)

191 #ifde‡
__USE_MISC


192 
	#ECHOCTL
 0001000

	)

193 
	#ECHOPRT
 0002000

	)

194 
	#ECHOKE
 0004000

	)

195 
	#FLUSHO
 0010000

	)

196 
	#PENDIN
 0040000

	)

198 
	#IEXTEN
 0100000

	)

201 
	#TCOOFF
 0

	)

202 
	#TCOON
 1

	)

203 
	#TCIOFF
 2

	)

204 
	#TCION
 3

	)

207 
	#TCIFLUSH
 0

	)

208 
	#TCOFLUSH
 1

	)

209 
	#TCIOFLUSH
 2

	)

212 
	#TCSANOW
 0

	)

213 
	#TCSADRAIN
 1

	)

214 
	#TCSAFLUSH
 2

	)

217 
	#_IOT_ãrmios
 \

218 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

6 
	#PR_SET_PDEATHSIG
 1

	)

7 
	#PR_GET_PDEATHSIG
 2

	)

10 
	#PR_GET_DUMPABLE
 3

	)

11 
	#PR_SET_DUMPABLE
 4

	)

14 
	#PR_GET_UNALIGN
 5

	)

15 
	#PR_SET_UNALIGN
 6

	)

16 
	#PR_UNALIGN_NOPRINT
 1

	)

17 
	#PR_UNALIGN_SIGBUS
 2

	)

21 
	#PR_GET_KEEPCAPS
 7

	)

22 
	#PR_SET_KEEPCAPS
 8

	)

25 
	#PR_GET_FPEMU
 9

	)

26 
	#PR_SET_FPEMU
 10

	)

27 
	#PR_FPEMU_NOPRINT
 1

	)

28 
	#PR_FPEMU_SIGFPE
 2

	)

31 
	#PR_GET_FPEXC
 11

	)

32 
	#PR_SET_FPEXC
 12

	)

33 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

34 
	#PR_FP_EXC_DIV
 0x010000

	)

35 
	#PR_FP_EXC_OVF
 0x020000

	)

36 
	#PR_FP_EXC_UND
 0x040000

	)

37 
	#PR_FP_EXC_RES
 0x080000

	)

38 
	#PR_FP_EXC_INV
 0x100000

	)

39 
	#PR_FP_EXC_DISABLED
 0

	)

40 
	#PR_FP_EXC_NONRECOV
 1

	)

41 
	#PR_FP_EXC_ASYNC
 2

	)

42 
	#PR_FP_EXC_PRECISE
 3

	)

46 
	#PR_GET_TIMING
 13

	)

47 
	#PR_SET_TIMING
 14

	)

48 
	#PR_TIMING_STATISTICAL
 0

	)

50 
	#PR_TIMING_TIMESTAMP
 1

	)

53 
	#PR_SET_NAME
 15

	)

54 
	#PR_GET_NAME
 16

	)

57 
	#PR_GET_ENDIAN
 19

	)

58 
	#PR_SET_ENDIAN
 20

	)

59 
	#PR_ENDIAN_BIG
 0

	)

60 
	#PR_ENDIAN_LITTLE
 1

	)

61 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

64 
	#PR_GET_SECCOMP
 21

	)

65 
	#PR_SET_SECCOMP
 22

	)

68 
	#PR_CAPBSET_READ
 23

	)

69 
	#PR_CAPBSET_DROP
 24

	)

72 
	#PR_GET_TSC
 25

	)

73 
	#PR_SET_TSC
 26

	)

74 
	#PR_TSC_ENABLE
 1

	)

75 
	#PR_TSC_SIGSEGV
 2

	)

78 
	#PR_GET_SECUREBITS
 27

	)

79 
	#PR_SET_SECUREBITS
 28

	)

85 
	#PR_SET_TIMERSLACK
 29

	)

86 
	#PR_GET_TIMERSLACK
 30

	)

88 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

89 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

95 
	#PR_MCE_KILL
 33

	)

96 
	#PR_MCE_KILL_CLEAR
 0

	)

97 
	#PR_MCE_KILL_SET
 1

	)

99 
	#PR_MCE_KILL_LATE
 0

	)

100 
	#PR_MCE_KILL_EARLY
 1

	)

101 
	#PR_MCE_KILL_DEFAULT
 2

	)

103 
	#PR_MCE_KILL_GET
 34

	)

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/fcntl.h

1 #i‚de‡
_ASM_GENERIC_FCNTL_H


2 
	#_ASM_GENERIC_FCNTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#O_ACCMODE
 00000003

	)

9 
	#O_RDONLY
 00000000

	)

10 
	#O_WRONLY
 00000001

	)

11 
	#O_RDWR
 00000002

	)

12 #i‚de‡
O_CREAT


13 
	#O_CREAT
 00000100

	)

15 #i‚de‡
O_EXCL


16 
	#O_EXCL
 00000200

	)

18 #i‚de‡
O_NOCTTY


19 
	#O_NOCTTY
 00000400

	)

21 #i‚de‡
O_TRUNC


22 
	#O_TRUNC
 00001000

	)

24 #i‚de‡
O_APPEND


25 
	#O_APPEND
 00002000

	)

27 #i‚de‡
O_NONBLOCK


28 
	#O_NONBLOCK
 00004000

	)

30 #i‚de‡
O_SYNC


31 
	#O_SYNC
 00010000

	)

33 #i‚de‡
FASYNC


34 
	#FASYNC
 00020000

	)

36 #i‚de‡
O_DIRECT


37 
	#O_DIRECT
 00040000

	)

39 #i‚de‡
O_LARGEFILE


40 
	#O_LARGEFILE
 00100000

	)

42 #i‚de‡
O_DIRECTORY


43 
	#O_DIRECTORY
 00200000

	)

45 #i‚de‡
O_NOFOLLOW


46 
	#O_NOFOLLOW
 00400000

	)

48 #i‚de‡
O_NOATIME


49 
	#O_NOATIME
 01000000

	)

51 #i‚de‡
O_CLOEXEC


52 
	#O_CLOEXEC
 02000000

	)

54 #i‚de‡
O_NDELAY


55 
	#O_NDELAY
 
O_NONBLOCK


	)

58 
	#F_DUPFD
 0

	)

59 
	#F_GETFD
 1

	)

60 
	#F_SETFD
 2

	)

61 
	#F_GETFL
 3

	)

62 
	#F_SETFL
 4

	)

63 #i‚de‡
F_GETLK


64 
	#F_GETLK
 5

	)

65 
	#F_SETLK
 6

	)

66 
	#F_SETLKW
 7

	)

68 #i‚de‡
F_SETOWN


69 
	#F_SETOWN
 8

	)

70 
	#F_GETOWN
 9

	)

72 #i‚de‡
F_SETSIG


73 
	#F_SETSIG
 10

	)

74 
	#F_GETSIG
 11

	)

77 #i‚de‡
CONFIG_64BIT


78 #i‚de‡
F_GETLK64


79 
	#F_GETLK64
 12

	)

80 
	#F_SETLK64
 13

	)

81 
	#F_SETLKW64
 14

	)

85 #i‚de‡
F_SETOWN_EX


86 
	#F_SETOWN_EX
 15

	)

87 
	#F_GETOWN_EX
 16

	)

90 
	#F_OWNER_TID
 0

	)

91 
	#F_OWNER_PID
 1

	)

92 
	#F_OWNER_PGRP
 2

	)

94 
	sf_ow√r_ex
 {

95 
	mty≥
;

96 
pid_t
 
	mpid
;

100 
	#FD_CLOEXEC
 1

	)

103 #i‚de‡
F_RDLCK


104 
	#F_RDLCK
 0

	)

105 
	#F_WRLCK
 1

	)

106 
	#F_UNLCK
 2

	)

110 #i‚de‡
F_EXLCK


111 
	#F_EXLCK
 4

	)

112 
	#F_SHLCK
 8

	)

116 #i‚de‡
F_INPROGRESS


117 
	#F_INPROGRESS
 16

	)

121 
	#LOCK_SH
 1

	)

122 
	#LOCK_EX
 2

	)

123 
	#LOCK_NB
 4

	)

125 
	#LOCK_UN
 8

	)

127 
	#LOCK_MAND
 32

	)

128 
	#LOCK_READ
 64

	)

129 
	#LOCK_WRITE
 128

	)

130 
	#LOCK_RW
 192

	)

132 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

134 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK


135 #i‚de‡
__ARCH_FLOCK_PAD


136 
	#__ARCH_FLOCK_PAD


	)

139 
	sÊock
 {

140 
	ml_ty≥
;

141 
	ml_whí˚
;

142 
__kî√l_off_t
 
	ml_°¨t
;

143 
__kî√l_off_t
 
	ml_Àn
;

144 
__kî√l_pid_t
 
	ml_pid
;

145 
	m__ARCH_FLOCK_PAD


149 #i‚de‡
CONFIG_64BIT


151 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK64


152 #i‚de‡
__ARCH_FLOCK64_PAD


153 
	#__ARCH_FLOCK64_PAD


	)

156 
	sÊock64
 {

157 
	ml_ty≥
;

158 
	ml_whí˚
;

159 
__kî√l_loff_t
 
	ml_°¨t
;

160 
__kî√l_loff_t
 
	ml_Àn
;

161 
__kî√l_pid_t
 
	ml_pid
;

162 
	m__ARCH_FLOCK64_PAD


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	spﬁlfd
 {

32 
	mfd
;

33 
	mevíts
;

34 
	mªvíts
;

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

70 
	#IP_PMTUDISC_DONT
 0

	)

71 
	#IP_PMTUDISC_WANT
 1

	)

72 
	#IP_PMTUDISC_DO
 2

	)

73 
	#IP_PMTUDISC_PROBE
 3

	)

76 
	#SOL_IP
 0

	)

78 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

79 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

80 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


86 
	sù_›ts


88 
ö_addr
 
	mù_d°
;

89 
	mù_›ts
[40];

93 
	sù_mªqn


95 
ö_addr
 
	mimr_mu…üddr
;

96 
ö_addr
 
	mimr_addªss
;

97 
	mimr_ifödex
;

101 
	sö_pktöfo


103 
	mùi_ifödex
;

104 
ö_addr
 
	mùi_•ec_d°
;

105 
ö_addr
 
	mùi_addr
;

112 
	#IPV6_ADDRFORM
 1

	)

113 
	#IPV6_2292PKTINFO
 2

	)

114 
	#IPV6_2292HOPOPTS
 3

	)

115 
	#IPV6_2292DSTOPTS
 4

	)

116 
	#IPV6_2292RTHDR
 5

	)

117 
	#IPV6_2292PKTOPTIONS
 6

	)

118 
	#IPV6_CHECKSUM
 7

	)

119 
	#IPV6_2292HOPLIMIT
 8

	)

121 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

123 
	#IPV6_NEXTHOP
 9

	)

124 
	#IPV6_AUTHHDR
 10

	)

125 
	#IPV6_UNICAST_HOPS
 16

	)

126 
	#IPV6_MULTICAST_IF
 17

	)

127 
	#IPV6_MULTICAST_HOPS
 18

	)

128 
	#IPV6_MULTICAST_LOOP
 19

	)

129 
	#IPV6_JOIN_GROUP
 20

	)

130 
	#IPV6_LEAVE_GROUP
 21

	)

131 
	#IPV6_ROUTER_ALERT
 22

	)

132 
	#IPV6_MTU_DISCOVER
 23

	)

133 
	#IPV6_MTU
 24

	)

134 
	#IPV6_RECVERR
 25

	)

135 
	#IPV6_V6ONLY
 26

	)

136 
	#IPV6_JOIN_ANYCAST
 27

	)

137 
	#IPV6_LEAVE_ANYCAST
 28

	)

138 
	#IPV6_IPSEC_POLICY
 34

	)

139 
	#IPV6_XFRM_POLICY
 35

	)

141 
	#IPV6_RECVPKTINFO
 49

	)

142 
	#IPV6_PKTINFO
 50

	)

143 
	#IPV6_RECVHOPLIMIT
 51

	)

144 
	#IPV6_HOPLIMIT
 52

	)

145 
	#IPV6_RECVHOPOPTS
 53

	)

146 
	#IPV6_HOPOPTS
 54

	)

147 
	#IPV6_RTHDRDSTOPTS
 55

	)

148 
	#IPV6_RECVRTHDR
 56

	)

149 
	#IPV6_RTHDR
 57

	)

150 
	#IPV6_RECVDSTOPTS
 58

	)

151 
	#IPV6_DSTOPTS
 59

	)

153 
	#IPV6_RECVTCLASS
 66

	)

154 
	#IPV6_TCLASS
 67

	)

157 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

158 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

159 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

160 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

163 
	#IPV6_PMTUDISC_DONT
 0

	)

164 
	#IPV6_PMTUDISC_WANT
 1

	)

165 
	#IPV6_PMTUDISC_DO
 2

	)

166 
	#IPV6_PMTUDISC_PROBE
 3

	)

169 
	#SOL_IPV6
 41

	)

170 
	#SOL_ICMPV6
 58

	)

173 
	#IPV6_RTHDR_LOOSE
 0

	)

174 
	#IPV6_RTHDR_STRICT
 1

	)

176 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
430
13075
component/isp/sensor/aptina_ar0230/ar0230_cmos.c
component/isp/sensor/aptina_ar0230/ar0230_sensor_ctl.c
component/isp/sensor/aptina_ar0330/ar0330_cmos.c
component/isp/sensor/aptina_ar0330/ar0330_sensor_ctl.c
component/isp/sensor/hi_cmoscfg/hi_cmos_cfg.c
component/isp/sensor/omnivision_ov4689/ov4689_cmos.c
component/isp/sensor/omnivision_ov4689/ov4689_sensor_ctl.c
component/isp/sensor/omnivision_ov5658/ov5658_cmos.c
component/isp/sensor/omnivision_ov5658/ov5658_sensor_ctl.c
component/isp/sensor/panasonic_mn34220/mn34220_cmos.c
component/isp/sensor/panasonic_mn34220/mn34220_sensor_ctl.c
component/isp/sensor/panasonic_mn34220_mipi/mn34220_cmos.c
component/isp/sensor/panasonic_mn34220_mipi/mn34220_sensor_ctl.c
component/isp/sensor/sony_imx117/imx117_cmos.c
component/isp/sensor/sony_imx117/imx117_sensor_ctl.c
component/isp/sensor/sony_imx123/imx123_cmos.c
component/isp/sensor/sony_imx123/imx123_sensor_ctl.c
component/isp/sensor/sony_imx136/imx136_cmos.c
component/isp/sensor/sony_imx136/imx136_sensor_ctl.c
component/isp/sensor/sony_imx178/imx178_cmos.c
component/isp/sensor/sony_imx178/imx178_sensor_ctl.c
component/isp/sensor/sony_imx178_37M/imx178_cmos.c
component/isp/sensor/sony_imx178_37M/imx178_sensor_ctl.c
component/isp/sensor/sony_imx185/imx185_cmos.c
component/isp/sensor/sony_imx185/imx185_sensor_ctl.c
component/pm/avs/avs.c
component/pm/base/pm.c
component/pm/base/pmc.c
component/pm/dev/cpu/avs_cpu.c
component/pm/dev/cpu/clock_cpu.c
component/pm/dev/cpu/cpu.c
component/pm/dev/cpu/include/cpu.h
component/pm/dev/cpu/opp_cpu.c
component/pm/dev/cpu/regulator_cpu.c
component/pm/dev/media/avs_media.c
component/pm/dev/media/clock_media.c
component/pm/dev/media/include/media.h
component/pm/dev/media/media.c
component/pm/dev/media/opp_media.c
component/pm/dev/media/regulator_media.c
component/pm/dvfs/hi_cpufreq.c
component/pm/dvfs/hi_dvfs.c
component/pm/include/avs_pm.h
component/pm/include/hi_clock.h
component/pm/include/hi_cpufreq.h
component/pm/include/hi_dvfs.h
component/pm/include/hi_opp_data.h
component/pm/include/opp.h
component/pm/include/pm.h
component/pm/include/pmc.h
component/pm/include/regulator.h
component/pm/include/sys_pm.h
component/pm/opp/hi_opp_data.c
component/pm/opp/opp.c
component/pm/regulator/regulator.c
extdrv/ak7756en/ak7756.mod.c
extdrv/ak7756en/ak7756en.c
extdrv/ak7756en/ak7756en.h
extdrv/ak7756en/ak7756en_cram.h
extdrv/ak7756en/ak7756en_def.h
extdrv/ak7756en/ak7756en_pram.h
extdrv/piris/piris.c
extdrv/piris/piris.h
extdrv/piris/piris_ext.h
extdrv/piris/piris_test.c
extdrv/piris/strfunc.c
extdrv/piris/strfunc.h
extdrv/pwm/pwm.c
extdrv/pwm/pwm.h
extdrv/pwm/pwm_test.c
extdrv/pwm/pwm_write.c
extdrv/pwm/strfunc.c
extdrv/pwm/strfunc.h
extdrv/sensor_i2c/isp_ext.h
extdrv/sensor_i2c/sensor_i2c.c
extdrv/sensor_i2c/sensor_i2c.mod.c
extdrv/sensor_spi/isp_ext.h
extdrv/sensor_spi/sensor_spi.c
extdrv/sensor_spi/sensor_spi.h
extdrv/sensor_spi/sensor_spi.mod.c
extdrv/tlv320aic31/tlv320aic31.c
extdrv/tlv320aic31/tlv320aic31.h
extdrv/tlv320aic31/tlv320aic31_def.h
extdrv/tlv320aic31/tlv_320aic31.mod.c
include/acodec.h
include/dictionary.h
include/hi_ae_comm.h
include/hi_af_comm.h
include/hi_awb_comm.h
include/hi_comm_3a.h
include/hi_comm_adec.h
include/hi_comm_aenc.h
include/hi_comm_ai.h
include/hi_comm_aio.h
include/hi_comm_ao.h
include/hi_comm_isp.h
include/hi_comm_ive.h
include/hi_comm_pciv.h
include/hi_comm_rc.h
include/hi_comm_region.h
include/hi_comm_sns.h
include/hi_comm_sys.h
include/hi_comm_vb.h
include/hi_comm_vda.h
include/hi_comm_vdec.h
include/hi_comm_venc.h
include/hi_comm_vgs.h
include/hi_comm_vi.h
include/hi_comm_video.h
include/hi_comm_vo.h
include/hi_comm_vpss.h
include/hi_common.h
include/hi_debug.h
include/hi_defines.h
include/hi_errno.h
include/hi_i2c.h
include/hi_io.h
include/hi_isp_bin.h
include/hi_isp_debug.h
include/hi_ive.h
include/hi_math.h
include/hi_mipi.h
include/hi_sns_ctrl.h
include/hi_spi.h
include/hi_tde_api.h
include/hi_tde_errcode.h
include/hi_tde_type.h
include/hi_type.h
include/hi_vreg.h
include/hifb.h
include/himedia.h
include/iniparser.h
include/list.h
include/mpi_adec.h
include/mpi_ae.h
include/mpi_aenc.h
include/mpi_af.h
include/mpi_ai.h
include/mpi_ao.h
include/mpi_awb.h
include/mpi_isp.h
include/mpi_ive.h
include/mpi_pciv.h
include/mpi_region.h
include/mpi_sys.h
include/mpi_vb.h
include/mpi_vda.h
include/mpi_vdec.h
include/mpi_venc.h
include/mpi_vgs.h
include/mpi_vi.h
include/mpi_vo.h
include/mpi_vpss.h
include/strlib.h
sample/3516app/3516a.c
sample/3516app/ive_detect.c
sample/3516app/ive_test.c
sample/audio/sample_audio.c
sample/common/loadbmp.c
sample/common/loadbmp.h
sample/common/sample_comm.h
sample/common/sample_comm_audio.c
sample/common/sample_comm_isp.c
sample/common/sample_comm_ive.c
sample/common/sample_comm_ive.h
sample/common/sample_comm_sys.c
sample/common/sample_comm_vda.c
sample/common/sample_comm_venc.c
sample/common/sample_comm_vi.c
sample/common/sample_comm_vo.c
sample/common/sample_comm_vpss.c
sample/detect/ive_detect.c
sample/detect2/ive_detect.c
sample/hifb/sample_hifb.c
sample/ive/sample/sample_ive_ann.c
sample/ive/sample/sample_ive_bg_model.c
sample/ive/sample/sample_ive_canny.c
sample/ive/sample/sample_ive_gmm.c
sample/ive/sample/sample_ive_main.h
sample/ive/sample/sample_ive_od.c
sample/ive/sample/sample_ive_sobel_with_cached_mem.c
sample/ive/sample/sample_ive_st_and_lk.c
sample/ive/sample/sample_ive_svm.c
sample/ive/sample/sample_ive_test_memory.c
sample/ive/sample_ive_main.c
sample/libdetect2/det/ClusterForBody.cpp
sample/libdetect2/det/ClusterForBody.h
sample/libdetect2/det/DetectMotionTempl.cpp
sample/libdetect2/det/DetectMotionTempl.h
sample/libdetect2/det/DetectWithCT.cpp
sample/libdetect2/det/DetectWithCT.h
sample/libdetect2/det/DetectWithOF.cpp
sample/libdetect2/det/DetectWithOF.h
sample/libdetect2/det/DetectWithOF2.cpp
sample/libdetect2/det/DetectWithOF2.h
sample/libdetect2/det/DetectWithOF3.cpp
sample/libdetect2/det/DetectWithOF3.h
sample/libdetect2/det/DetectWithOF4.cpp
sample/libdetect2/det/DetectWithOF4.h
sample/libdetect2/det/DetectWithOF5.cpp
sample/libdetect2/det/DetectWithOF5.h
sample/libdetect2/det/History.h
sample/libdetect2/det/SkinMask.cpp
sample/libdetect2/det/SkinMask.h
sample/libdetect2/det/ct/CompressiveTracker.cpp
sample/libdetect2/det/ct/CompressiveTracker.h
sample/libdetect2/det/detect.cpp
sample/libdetect2/det/detect.h
sample/libdetect2/det/detect_main.cpp
sample/libdetect2/det/detect_main.h
sample/libdetect2/det/objdet.cpp
sample/libdetect2/det/objdet.h
sample/libdetect2/det/polyfit.cpp
sample/libdetect2/det/polyfit.h
sample/libdetect2/libimagesource/VideoSourceBase.h
sample/libdetect2/libimagesource/VideoSourceFFmpeg.cpp
sample/libdetect2/libimagesource/VideoSourceFFmpeg.h
sample/libdetect2/libimagesource/VideoSourceForMorn.cpp
sample/libdetect2/libimagesource/VideoSourceForMorn.h
sample/libdetect2/libimagesource/VideoSourceForRTSP.cpp
sample/libdetect2/libimagesource/VideoSourceForRTSP.h
sample/libdetect2/libimagesource/VideoSourceForYuan.cpp
sample/libdetect2/libimagesource/VideoSourceForYuan.h
sample/libdetect2/libimagesource/VideoSourceForZqpkt.cpp
sample/libdetect2/libimagesource/VideoSourceForZqpkt.h
sample/libdetect2/libimagesource/VideoSourceFordshow.cpp
sample/libdetect2/libimagesource/VideoSourceFordshow.h
sample/libdetect2/libimagesource/VideoSourceFromIPCam.cpp
sample/libdetect2/libimagesource/VideoSourceFromIPCam.h
sample/libdetect2/libimagesource/cJSON.c
sample/libdetect2/libimagesource/cJSON.h
sample/libdetect2/libimagesource/image_source.h
sample/libdetect2/libimagesource/main.cpp
sample/libdetect2/libimagesource/resource.h
sample/libdetect2/libkvconfig/KVConfig.cpp
sample/libdetect2/libkvconfig/KVConfig.h
sample/libdetect_t/KVConfig.cpp
sample/libdetect_t/KVConfig.h
sample/libdetect_t/blackboard_detect.cpp
sample/libdetect_t/blackboard_detect.h
sample/libdetect_t/image_source.h
sample/libdetect_t/libdetect_t.cpp
sample/libdetect_t/libdetect_t.h
sample/region/sample_region.c
sample/scene_auto/sample_scene.c
sample/scene_auto/src/adapt/hi3516a/hi_sceneauto_adpt.c
sample/scene_auto/src/common/hi_srdk_sceneauto.c
sample/scene_auto/src/include/hi_sceneauto_comm.h
sample/scene_auto/src/include/hi_sceneauto_comm_ext.h
sample/scene_auto/src/include/hi_sceneauto_define.h
sample/scene_auto/src/include/hi_srdk_sceneauto_define_ext.h
sample/scene_auto/src/include/hi_srdk_sceneauto_ext.h
sample/tde/sample_tde.c
sample/test_comm/MyCore.h
sample/test_comm/mytrace.c
sample/test_comm/mytrace.h
sample/test_comm/teacher.c
sample/test_comm/teacher.h
sample/test_comm/teacher2.h
sample/vda/sample_vda.c
sample/venc/sample_venc.c
sample/vio/sample_vio.c
tools/aenc_dump.c
tools/ai_dump.c
tools/isp_debug.c
tools/rc_attr.c
tools/vi_bayerdump.c
tools/vi_dump.c
tools/vo_video_csc_config.c
tools/vou_chn_dump.c
tools/vou_screen_dump.c
tools/vpss_attr.c
tools/vpss_attr2.c
tools/vpss_chn_dump.c
tools/vpss_src_dump.c
/usr/include/arpa/inet.h
/usr/include/asm/stat.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/linux/errno.h
/usr/include/linux/fb.h
/usr/include/linux/fcntl.h
/usr/include/linux/fs.h
/usr/include/linux/i2c-dev.h
/usr/include/linux/i2c.h
/usr/include/linux/ioctl.h
/usr/include/linux/kernel.h
/usr/include/linux/major.h
/usr/include/linux/poll.h
/usr/include/linux/reboot.h
/usr/include/linux/sched.h
/usr/include/linux/string.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/poll.h
/usr/include/sys/prctl.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/errno.h
/usr/include/asm/fcntl.h
/usr/include/asm/ioctl.h
/usr/include/asm/poll.h
/usr/include/asm/types.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/poll.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/linux/prctl.h
/usr/include/netinet/in.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/fcntl.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/in.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/select.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/stddef.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/bits/libc-lock.h
/usr/include/bits/wchar.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wchar.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/sockios.h
